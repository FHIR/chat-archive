[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>public List&lt;Observation&gt; getObservations(String id, String start, String end, String system, String code)\n        throws Exception {\n    IQuery&lt;IBaseBundle&gt; query = client.search() //\n            .forResource(Observation.class) //\n            .where(Observation.CODE.exactly().systemAndCode(system, code)) //\n            .and(Observation.SUBJECT.hasId(id));\n    if (start != null) {\n        Date date = Date.from(LocalDate.parse(start).atStartOfDay().minusDays(2).toInstant(ZoneOffset.UTC));\n        query = query.and(Observation.DATE.afterOrEquals().day(date));\n    }\n    if (end != null) {\n        Date date = Date.from(LocalDate.parse(end).atStartOfDay().plusDays(2).toInstant(ZoneOffset.UTC));\n        query = query.and(Observation.DATE.beforeOrEquals().day(date));\n    }\n    Bundle results = query.returnBundle(Bundle.class).execute();\n    // Log the results\n    // logger.info(ContextUtil.getContext().newXmlParser().setPrettyPrint(true).encodeResourceToString(results));\n    ArrayList&lt;Observation&gt; ret = new ArrayList&lt;&gt;();\n    ret.addAll(getEntries(results));\n    while (results.getLink(Bundle.LINK_NEXT) != null) {\n        results = client.loadPage().next(results).execute();\n        ret.addAll(getEntries(results));\n    }\n    ArrayList&lt;Observation&gt; fret = new ArrayList&lt;&gt;();\n    for (Observation obs : ret) {\n        DateTimeType eff = obs.getEffectiveDateTimeType();\n        if ((start == null || eff.after(parseDate(start, eff, false)))\n                &amp;&amp; (end == null || eff.before(parseDate(end, eff, true)))) {\n            fret.add(obs);\n        }\n    }\n    return fret;\n}\n</code></pre></div>",
        "id": 197585137,
        "sender_full_name": "Eric Mays",
        "timestamp": 1589475367
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>public List&lt;Observation&gt; getBloodPressures(Patient patient) throws Exception {\n    return getBloodPressures(patient.getId());\n}\n\npublic List&lt;Observation&gt; getBloodPressures(String id) throws Exception {\n    return getBloodPressures(id, null, null);\n}\n\npublic List&lt;Observation&gt; getBloodPressures(Patient patient, String start, String end) throws Exception {\n    return getBloodPressures(patient.getId(), start, end);\n}\n\npublic List&lt;Observation&gt; getBloodPressures(String id, String start, String end) throws Exception {\n    return getObservations(id, start, end, LoincCode.system, LoincCode.Bp.getCode());\n}\n</code></pre></div>",
        "id": 197585282,
        "sender_full_name": "Eric Mays",
        "timestamp": 1589475440
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>public List&lt;Observation&gt; getAverageBloodPressures(Patient patient) throws Exception {\n    return getAverageBloodPressures(patient.getId());\n}\n\npublic List&lt;Observation&gt; getAverageBloodPressures(String id) throws Exception {\n    return getAverageBloodPressures(id, null, null);\n}\n\npublic List&lt;Observation&gt; getAverageBloodPressures(Patient patient, String start, String end) throws Exception {\n    return getAverageBloodPressures(patient.getId(), start, end);\n}\n\npublic List&lt;Observation&gt; getAverageBloodPressures(String id, String start, String end) throws Exception {\n    return getObservations(id, start, end, SnomedConcept.system, &quot;&quot; + SnomedConcept.AverageBp.getSctid());\n}\n</code></pre></div>",
        "id": 197585462,
        "sender_full_name": "Eric Mays",
        "timestamp": 1589475516
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>// 723232008 |Average blood pressure (observable entity)|\nAverageBp(723232008, &quot;Average blood pressure (observable entity)&quot;),\n// 314440001 |Average systolic blood pressure (observable entity)|\nAverageSbp(314440001, &quot;Average systolic blood pressure (observable entity)&quot;),\n// 314453003 |Average diastolic blood pressure (observable entity)|\nAverageDbp(314453003, &quot;Average diastolic blood pressure (observable entity)&quot;),\n// 364075005 |Heart rate (observable entity)|\n</code></pre></div>",
        "id": 197585910,
        "sender_full_name": "Eric Mays",
        "timestamp": 1589475688
    },
    {
        "content": "<p>Hi Eric, it looks like we cannot support two FHIR servers at a time, at least for the setup we have for the connectathon so we will have to import the data. Is the last data set you provided to me the latest or do you want to send me an updated set? I will then import it into our FHIR server. This will simulate the pull from the aggregator for now.</p>",
        "id": 197588758,
        "sender_full_name": "Claude Nanjo",
        "timestamp": 1589476852
    },
    {
        "content": "<p>The data I sent should be close enough, but here's the latest<br>\n<a href=\"/user_uploads/10155/27bUv6QltnHqBhng8c7btwum/ATC-med-2-cimi-avgs.json\">ATC-med-2-cimi-avgs.json</a> <a href=\"/user_uploads/10155/YuiZdYA9en-g7q5DV46YHsnT/ATC-med-2-cimi.json\">ATC-med-2-cimi.json</a></p>",
        "id": 197590405,
        "sender_full_name": "Eric Mays",
        "timestamp": 1589477578
    },
    {
        "content": "<p>Out of the pair, which one should I use in determining whether the patient's blood pressure is in control? I assume the clinically valid average?</p>",
        "id": 197590673,
        "sender_full_name": "Claude Nanjo",
        "timestamp": 1589477691
    },
    {
        "content": "<p>Yes, use IHM_AVERAGE_IHM_BP_7. For this data I think they are all clinically valid.</p>",
        "id": 197590998,
        "sender_full_name": "Eric Mays",
        "timestamp": 1589477880
    },
    {
        "content": "<p>Perfect. Thank you.</p>",
        "id": 197591055,
        "sender_full_name": "Claude Nanjo",
        "timestamp": 1589477898
    },
    {
        "content": "<p>I noticed the algorithm in in the notes. It works for me but when I was generating data to test out the use case, I had it in the algorithm extension:<br>\n{<br>\n  \"resourceType\": \"Observation\",<br>\n  \"extension\": [<br>\n    {<br>\n      \"url\": \"<a href=\"http://hl7.org/fhir/hspc/StructureDefinition/BodyPositionExt\">http://hl7.org/fhir/hspc/StructureDefinition/BodyPositionExt</a>\",<br>\n      \"valueCodeableConcept\": {<br>\n        \"coding\": [<br>\n          {<br>\n            \"system\": \"<a href=\"http://snomed.info/sct\">http://snomed.info/sct</a>\",<br>\n            \"code\": \"33586001\",<br>\n            \"display\": \"Sitting position (finding)\"<br>\n          }<br>\n        ]<br>\n      }<br>\n    },<br>\n    {<br>\n      \"url\": \"<a href=\"http://hl7.org/fhir/hspc/StructureDefinition/MeasurementDeviceExt\">http://hl7.org/fhir/hspc/StructureDefinition/MeasurementDeviceExt</a>\",<br>\n      \"valueCodeableConcept\": {<br>\n        \"coding\": [<br>\n          {<br>\n            \"system\": \"<a href=\"http://snomed.info/sct\">http://snomed.info/sct</a>\",<br>\n            \"code\": \"720738005\",<br>\n            \"display\": \"Blood pressure cuff, adult size large (physical object)\"<br>\n          }<br>\n        ]<br>\n      }<br>\n    },<br>\n    {<br>\n      \"url\": \"<a href=\"http://hl7.org/fhir/hspc/StructureDefinition/MeasurementSettingExt\">http://hl7.org/fhir/hspc/StructureDefinition/MeasurementSettingExt</a>\",<br>\n      \"valueCodeableConcept\": {<br>\n        \"coding\": [<br>\n          {<br>\n            \"system\": \"<a href=\"http://snomed.info/sct\">http://snomed.info/sct</a>\",<br>\n            \"code\": \"264362003\",<br>\n            \"display\": \"Home (environment)\"<br>\n          }<br>\n        ]<br>\n      }<br>\n    },<br>\n    {<br>\n      \"url\": \"<a href=\"http://hl7.org/fhir/hspc/StructureDefinition/AlgorithmForBloodPressureAverageExt\">http://hl7.org/fhir/hspc/StructureDefinition/AlgorithmForBloodPressureAverageExt</a>\",<br>\n      \"extension\": [<br>\n        {<br>\n          \"url\": \"<a href=\"http://hl7.org/fhir/hspc/StructureDefinition/AlgorithmTypeExt\">http://hl7.org/fhir/hspc/StructureDefinition/AlgorithmTypeExt</a>\",<br>\n          \"valueCodeableConcept\": {<br>\n            \"text\": \"IHM_AVERAGE_IHM_BP_7\"<br>\n          }<br>\n        },<br>\n        {<br>\n          \"url\": \"<a href=\"http://hl7.org/fhir/hspc/StructureDefinition/TimeWindowExt\">http://hl7.org/fhir/hspc/StructureDefinition/TimeWindowExt</a>\",<br>\n          \"valueQuantity\": {<br>\n            \"value\": 10,<br>\n            \"unit\": \"d\"<br>\n          }<br>\n        },<br>\n        {<br>\n          \"url\": \"<a href=\"http://hl7.org/fhir/hspc/StructureDefinition/SetSizeExt\">http://hl7.org/fhir/hspc/StructureDefinition/SetSizeExt</a>\",<br>\n          \"valueInteger\": 30<br>\n        }<br>\n      ]<br>\n    }<br>\n  ],<br>\n  \"status\": \"final\",<br>\n  \"code\": {<br>\n    \"coding\": [<br>\n      {<br>\n        \"system\": \"<a href=\"http://snomed.info/sct\">http://snomed.info/sct</a>\",<br>\n        \"code\": \"723232008\",<br>\n        \"display\": \"Average blood pressure (observable entity)\"<br>\n      }<br>\n    ],<br>\n    \"text\": \"Average Home Blood Pressure Panel\"<br>\n  },<br>\n  \"subject\": {<br>\n    \"reference\": \"Patient/X1000003\"<br>\n  },<br>\n  \"effectiveDateTime\": \"2020-05-13T20:34:03-07:00\",<br>\n  \"bodySite\": {<br>\n    \"coding\": [<br>\n      {<br>\n        \"system\": \"<a href=\"http://snomed.info/sct\">http://snomed.info/sct</a>\",<br>\n        \"code\": \"17137000\",<br>\n        \"display\": \"Structure of brachial artery (body structure)\"<br>\n      }<br>\n    ]<br>\n  },<br>\n  \"method\": {<br>\n    \"coding\": [<br>\n      {<br>\n        \"system\": \"<a href=\"http://snomed.info/sct\">http://snomed.info/sct</a>\",<br>\n        \"code\": \"17146006\",<br>\n        \"display\": \"Arterial pressure monitoring, non-invasive method (regime/therapy)\"<br>\n      }<br>\n    ]<br>\n  },<br>\n  \"component\": [<br>\n    {<br>\n      \"code\": {<br>\n        \"coding\": [<br>\n          {<br>\n            \"system\": \"<a href=\"http://snomed.info/sct\">http://snomed.info/sct</a>\",<br>\n            \"code\": \"314453003\",<br>\n            \"display\": \"Average diastolic blood pressure (observable entity)\"<br>\n          }<br>\n        ],<br>\n        \"text\": \"Diastolic blood pressure\"<br>\n      },<br>\n      \"valueQuantity\": {<br>\n        \"value\": 96,<br>\n        \"unit\": \"mmHg\"<br>\n      }<br>\n    },<br>\n    {<br>\n      \"code\": {<br>\n        \"coding\": [<br>\n          {<br>\n            \"system\": \"<a href=\"http://snomed.info/sct\">http://snomed.info/sct</a>\",<br>\n            \"code\": \"314440001\",<br>\n            \"display\": \"Average systolic blood pressure (observable entity)\"<br>\n          }<br>\n        ],<br>\n        \"text\": \"Systolic blood pressure\"<br>\n      },<br>\n      \"valueQuantity\": {<br>\n        \"value\": 148,<br>\n        \"unit\": \"mmHg\"<br>\n      }<br>\n    }<br>\n  ]<br>\n}</p>",
        "id": 197594994,
        "sender_full_name": "Claude Nanjo",
        "timestamp": 1589479628
    },
    {
        "content": "<p>OK, if you could work with the note that would be great. There are some issues with the completeness of the algorithm extension and the use of codeable concept.</p>",
        "id": 197598375,
        "sender_full_name": "Eric Mays",
        "timestamp": 1589481105
    }
]