[
    {
        "content": "<p>One issue that I have with the Git workflow is that:</p>\n<p>1) The build takes a long time  for example this morning:</p>\n<div class=\"codehilite\"><pre><span></span>BUILD SUCCESSFUL\nTotal time: 95 minutes 33 seconds\n</pre></div>\n\n\n<p>and 2) I like to see the current state of my local build so the partial build is really handy. </p>\n<p>so I can make a bunch of small commits to the main branch but still keep track of how it all renders locally continuously. </p>\n<p>3)  With Git, I am under the impression when I create a new branch for each  commit means I can't use the the partial build each time but have to run a full build each time.</p>\n<p>4) if that is the case I will be forced to create massive PR with lots of changes across several trackers instead of the preferred 1 change  per tracker,  because it will take too long to wait for a full build each time.</p>\n<p>5) Besides not running a local build for each commit/branch/PR what other workflow is there so I can see the rendered output for each small change between branches?</p>",
        "id": 153995818,
        "sender_full_name": "Eric Haas",
        "timestamp": 1536688417
    },
    {
        "content": "<p>For a specific example, I have a tracker to change all OO resources from `.context</p>",
        "id": 153995819,
        "sender_full_name": "Eric Haas",
        "timestamp": 1536688633
    },
    {
        "content": "<p>back to <code> .encounter</code>.   Ideally would create a new branch for each resource, make the edits,  run the build , commit, make a PR , repeat until done.   Now I'm not going to spend 12 * 95 minutes doing this but will make all the changes in a single branch and commit and make a PR covering a dozen or so resources.</p>",
        "id": 153995820,
        "sender_full_name": "Eric Haas",
        "timestamp": 1536688812
    },
    {
        "content": "<p>If I understand your concern correctly, I think you can still take advantage of the partial build functionality. Switching to a new branch doesn't mean you have a different local directory, so it happens on the same set of files. Creating a new branch, for example, doesn't actually change any of the content of the local directory, it's a source control operation only. So the partial build should still work the way that you're used to.</p>",
        "id": 153995836,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536690084
    },
    {
        "content": "<p>atom doesn't work that way so maybe I'm confusing the two.  but my recollection working with igs is the ig-pub doesn't remember... I'll check it out.</p>",
        "id": 153995858,
        "sender_full_name": "Eric Haas",
        "timestamp": 1536692772
    },
    {
        "content": "<p>What impact does branch switching have on file timestamps?  That's the real question that matters  for the build</p>",
        "id": 153995859,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536692937
    },
    {
        "content": "<p><a href=\"https://git.wiki.kernel.org/index.php/Git_FAQ#Why_isn.27t_Git_preserving_modification_time_on_files.3F\" target=\"_blank\" title=\"https://git.wiki.kernel.org/index.php/Git_FAQ#Why_isn.27t_Git_preserving_modification_time_on_files.3F\">https://git.wiki.kernel.org/index.php/Git_FAQ#Why_isn.27t_Git_preserving_modification_time_on_files.3F</a> has good context and an explanation. The bottom line is that git will make changes to timestamps only on files that actually change their contents when doing a checkout. At that point it sets the timestamp to the current time.</p>",
        "id": 153995862,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536693496
    },
    {
        "content": "<p>It's designed to support this kind of compilation process.</p>",
        "id": 153995863,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536693532
    },
    {
        "content": "<p>the tricky thing is that once you commit a file, it then starts changing when you switch branches locally. It doesn't change if you haven't committed it. I'm finding that difference quite tricky in practice</p>",
        "id": 153995920,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536701024
    },
    {
        "content": "<p>In practice, you should think about merging one Branch into another (locally) if you want the same new files to appear in both.</p>",
        "id": 153995934,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536702492
    },
    {
        "content": "<p>but then you can't do a push to a remote branch from it?</p>",
        "id": 153995946,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536703189
    },
    {
        "content": "<p>sure you can.</p>",
        "id": 153995948,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536703511
    },
    {
        "content": "<p>The branches will look just as they do locally.</p>",
        "id": 153995949,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536703527
    },
    {
        "content": "<p>but then they'll include incomplete work from the other branch, not just the work I want to push</p>",
        "id": 153995954,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536704029
    },
    {
        "content": "<p>Sure. This workflow only makes sense if you're going to wait until the work is complete before you merge.</p>",
        "id": 153995955,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704088
    },
    {
        "content": "<p>But you can push at intervals as you make progress.</p>",
        "id": 153995956,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704095
    },
    {
        "content": "<p>The bottom line is that you want the state of the repository locally to look the same as it will on the build server.</p>",
        "id": 153995957,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704109
    },
    {
        "content": "<p>So anytime you would lie on untracked files you are violating that expectation -- it is likely to lead to surprising disagreements between what you see locally and what you see on the build server.</p>",
        "id": 153995958,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704129
    },
    {
        "content": "<p>so this isn't a solution. I have 2 different things going on - a bug fix, and some bigger development. I have committed files to the bigger development, but it's not done yet. I lose all them if I switch to a new branch for the bug fix. But if I merge the committed changes to the bug fix branch, then, when I push it up, I'll get all the incomplete work as well</p>",
        "id": 153995960,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536704344
    },
    {
        "content": "<p>In this scenario, does the bug fix depend on the bigger development?</p>",
        "id": 153995961,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704466
    },
    {
        "content": "<p>Normally I would expect to do a bug fix in isolation and push a very small change just for that.</p>",
        "id": 153995962,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704477
    },
    {
        "content": "<p>no, it doesn't depend on it, and yes that's right. But switching to the branch for the bug fix changes the state of the local workspace so it doesn't include anything committed for the other work, but does still include things not committed. Don't you see how troublesome that is?</p>",
        "id": 153995966,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536704622
    },
    {
        "content": "<p>That's where stash <strong>could</strong> help, I think - when you need it in a case like that.</p>",
        "id": 153995967,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536704720
    },
    {
        "content": "<p>how does it help?</p>",
        "id": 153995968,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536704730
    },
    {
        "content": "<p>I don't usually run into this, but if you need to make a quick switch for this kind of bug fix, the incantation of <a href=\"https://stackoverflow.com/a/835561\" target=\"_blank\" title=\"https://stackoverflow.com/a/835561\">https://stackoverflow.com/a/835561</a> should help -- <code>git stash --all</code> before switching branches to the bug fix</p>",
        "id": 153995969,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704735
    },
    {
        "content": "<p>yes</p>",
        "id": 153995970,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536704758
    },
    {
        "content": "<p>how does it help? <br>\n- it leaves all my changes in place? (right)<br>\n- it completely removes my changes? (wrong)</p>",
        "id": 153995971,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536704785
    },
    {
        "content": "<p>Then when you come back to your work in progress branch you can <code>git stash pop</code></p>",
        "id": 153995972,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704785
    },
    {
        "content": "<p>It hides your changes so you can do the bug fix in isolation.</p>",
        "id": 153995975,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704807
    },
    {
        "content": "<p>but (Josh) we discussed why losing my changes is impossible....</p>",
        "id": 153995976,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536704815
    },
    {
        "content": "<p>I may not have followed this part.</p>",
        "id": 153995977,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704833
    },
    {
        "content": "<p>I keep coming back to this: GIT does not support the workflow I need to function</p>",
        "id": 153995978,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536704836
    },
    {
        "content": "<p>If the bug fix is really independent, you should not want other unrelated changes present when you make and test it.</p>",
        "id": 153995979,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704844
    },
    {
        "content": "<p>I <em>don't</em> have that choice</p>",
        "id": 153995980,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536704856
    },
    {
        "content": "<p>typically, I am doing bug fixes while debugging something. Can't remove everything the debugger is running on while running it.</p>",
        "id": 153995982,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536704881
    },
    {
        "content": "<p>The thing that really puzzles me here is that git is incredibly flexible when it comes to work flow. If you want, you can just make all your changes on a Graham WIP branch and merge that into Master occasionally.</p>",
        "id": 153995984,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704894
    },
    {
        "content": "<p>what is hard about this? Surely this is how everyone works? What else to do? twiddle thumbs?</p>",
        "id": 153995985,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536704902
    },
    {
        "content": "<p>I wouldn't consider that to be a best practice but you can emulate anything you do in svn that way.</p>",
        "id": 153995986,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704914
    },
    {
        "content": "<p>right</p>",
        "id": 153995987,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536704932
    },
    {
        "content": "<blockquote>\n<p>If you want, you can just make all your changes on a Graham WIP branch and merge that into Master occasionally.</p>\n</blockquote>\n<p>But then you can't commit stuff for things one at a time</p>",
        "id": 153995988,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536704934
    },
    {
        "content": "<p>I'm just trying to emulate my existing workflow I'm dependent on, and the advice is: can't do that</p>",
        "id": 153995989,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536704960
    },
    {
        "content": "<p>You can commits individually. You might just wind up merging groups of features at once.</p>",
        "id": 153995990,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704968
    },
    {
        "content": "<p>So you can have a bug fix commit on your general work-in-progress branch.</p>",
        "id": 153995991,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536704980
    },
    {
        "content": "<p>in other words: once I start working on something, I cannot also do a bug fix and commit it in isolation</p>",
        "id": 153995992,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536705022
    },
    {
        "content": "<p>I think we're mixing commit and push here, and that's making it more confusing</p>",
        "id": 153995993,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536705067
    },
    {
        "content": "<p>You can absolutely do that. when you say commit in isolation, do you mean commit and merge to the master branch in isolation from the work you are doing in a future branch? And without changing branches ever?</p>",
        "id": 153995994,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536705073
    },
    {
        "content": "<p>Yes, we are mixing commit, push, and merge.</p>",
        "id": 153995995,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536705081
    },
    {
        "content": "<p>I don't have any idea what you think I'm mixing. I'm asking a really simple question to me: I'm doing some big changes, partially committed. I'm also making a bug fix. I want to get the change for the bug fix up to the master without committing the unfinished work, and without having to lose it from my local workspace</p>",
        "id": 153995997,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536705154
    },
    {
        "content": "<p>I <em>never</em> made an svn commit without that being true</p>",
        "id": 153995998,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536705178
    },
    {
        "content": "<p>I think what you really want to do in that case is cherry-pick the bug fix commit and merge it (and it alone) into master.</p>",
        "id": 153995999,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536705246
    },
    {
        "content": "<p>The typical workflow is to make a bug fix Branch off of Master, fix the bug, push it up, and merge this branch into your feature branch.</p>",
        "id": 153996000,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536705255
    },
    {
        "content": "<p>The challenge for Grahame is he wants to do this without ever running \"git checkout\". So as not to cause some files to disappear from his debugger.</p>",
        "id": 153996001,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536705287
    },
    {
        "content": "<p>but I can't switch to the branch for the bug fix without trashing my local local</p>",
        "id": 153996002,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536705292
    },
    {
        "content": "<p>yes</p>",
        "id": 153996003,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536705295
    },
    {
        "content": "<p>The best suggestion I have for you here is to suspend the debugger while you commit on another branch and merge that branch into your feature branch.</p>",
        "id": 153996004,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536705458
    },
    {
        "content": "<p>this is entirely not a workable response for me</p>",
        "id": 153996005,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536705544
    },
    {
        "content": "<p>Or maybe better: edit the file locally but don't push until you have the debugger session over with.</p>",
        "id": 153996007,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536705573
    },
    {
        "content": "<p>If you want to do everything in a single \"work\" branch (I'm still not sure if that's actually what you want to do), you can make the bug fix commit in the midst of everything else that you are doing and then cherry-pick that commit alone directly into the master branch (with no pull request - we might have turned the ability to do that off, but it could be enabled).  That will get the fix published separately and will not mess with anything else that you are doing.  I don't think it's considered to be very \"orthodox\" from the git perspective, but I think it should work.</p>",
        "id": 153996010,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536705873
    },
    {
        "content": "<p>I think that there might be a place for committing directly to master but it must very much be a special case. And not for this workflow.</p>",
        "id": 153996011,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536705935
    },
    {
        "content": "<p>It's not exactly committing directly to master (although a new commit is also created there), as you've first committed it in your work branch (or wherever).  Other than the \"extra\" commit to master I think it's not too different from what we're always doing now in svn.  I'm not saying I <strong>recommend</strong> it, but something to <a href=\"https://www.previousnext.com.au/blog/intro-cherry-picking-git\" target=\"_blank\" title=\"https://www.previousnext.com.au/blog/intro-cherry-picking-git\">consider</a>.</p>",
        "id": 153996014,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536706390
    },
    {
        "content": "<p>well, yes, it's not too different. It's not too different in an important and bad way: the whole point of all this was to protect the build, which we didn't have in svn</p>",
        "id": 153996016,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536706449
    },
    {
        "content": "<p>Can't disagree there, either.  So to achieve that the workflow has to change.  But maybe you could be the only one allowed to do this - for when it really is a better workflow for you (and is also sufficiently safe to do)?</p>",
        "id": 153996017,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536706594
    },
    {
        "content": "<p>I think we all know that it's not that safe for me to do, based on experience</p>",
        "id": 153996019,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536706889
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/42467062/commit-a-single-file-to-another-branch\" target=\"_blank\" title=\"https://stackoverflow.com/questions/42467062/commit-a-single-file-to-another-branch\">https://stackoverflow.com/questions/42467062/commit-a-single-file-to-another-branch</a></p>",
        "id": 153996105,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536712337
    },
    {
        "content": "<p>that's my case right there</p>",
        "id": 153996106,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536712344
    },
    {
        "content": "<p>as I said, does not everyone do this?</p>",
        "id": 153996107,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536712354
    },
    {
        "content": "<p>I guess not -- or perhals just not in a context where running \"git checkout\"' is an issue.</p>",
        "id": 153996123,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536721350
    }
]