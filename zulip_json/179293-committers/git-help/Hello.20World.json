[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191582\">@Angelo Kastroulis</span>  <span class=\"user-mention\" data-user-id=\"191369\">@Andy Stechishin</span>   <span class=\"user-mention\" data-user-id=\"191972\">@Steve Munini</span>  <span class=\"user-mention\" data-user-id=\"191363\">@Vadim Peretokin</span>  <span class=\"user-mention\" data-user-id=\"192121\">@Geoff Low</span>  <span class=\"user-mention\" data-user-id=\"192017\">@Nagesh Bashyam</span>   <span class=\"user-mention\" data-user-id=\"191871\">@Robert Horn</span>   <span class=\"user-mention\" data-user-id=\"191678\">@Abigail Watson</span>  <span class=\"user-mention\" data-user-id=\"191926\">@Joel Schneider</span>   -- I'm subscribing you here because you mentioned you might be willing to help out in answering community questions about how to use git and GitHub. We're finally in the process of transitioning the FHIR core spec development from svn to GitHub, and I'm setting up this channel for support. (We'll be doing a proper, broader announcement later this week, but I wanted to lay the groundwork first.)</p>\n<p>The quick ask of you, if you're still willing, is to set up notifications for this <a class=\"stream\" data-stream-id=\"179293\" href=\"/#narrow/stream/179293-committers.2Fgit-help\">#committers/git-help</a> channel and lend a hand when people come with questions.</p>\n<p>(Cc <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> )</p>",
        "id": 153993084,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536083847
    },
    {
        "content": "<p>Happy to help Josh!</p>",
        "id": 153993150,
        "sender_full_name": "Steve Munini",
        "timestamp": 1536092247
    },
    {
        "content": "<p>Sure.  If we've got FHIR.js and core FHIR spec all on GitHub and messaging connected via git hooks to Zulip streams, maybe we should set up Meteor on FHIR as well.....</p>",
        "id": 153993154,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1536093146
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span>  Happy to help</p>",
        "id": 153993317,
        "sender_full_name": "Nagesh Bashyam",
        "timestamp": 1536118852
    },
    {
        "content": "<p>Awesome. What is the status of the transition atm?</p>\n<p>edit: <a href=\"https://github.com/hl7-fhir/fhir-svn/wiki/Get-Started-with-FHIR-on-GitHub\" target=\"_blank\" title=\"https://github.com/hl7-fhir/fhir-svn/wiki/Get-Started-with-FHIR-on-GitHub\">https://github.com/hl7-fhir/fhir-svn/wiki/Get-Started-with-FHIR-on-GitHub</a></p>",
        "id": 153993375,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1536145120
    },
    {
        "content": "<p>That's the right reference. We're planning to cut over at the end of this week, and trying to get things set up before then</p>",
        "id": 153993390,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536151058
    },
    {
        "content": "<p>Also happy to assist.  Couple of questions: are we using the protected branches feature, with minimum N reviewers and status checks (could we setup travis-ci to automatically review changes and make sure they don't break the build)?</p>",
        "id": 153993405,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536153792
    },
    {
        "content": "<p>we'll be doing that - normal commit is to a branch that the build checks and then automatically commits to trunk</p>",
        "id": 153993408,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536153881
    },
    {
        "content": "<p>Ah, sorry - didn't read far enough down the supplied document!</p>",
        "id": 153993415,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536154496
    },
    {
        "content": "<p>To clarify, there's no \"auto commit to the truck\" -- current process we're standing up is the PR can't be merged until status checks complete, and then it can be merged.</p>",
        "id": 153993416,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536154628
    },
    {
        "content": "<p>But the merge to master requires pressing the button.</p>",
        "id": 153993417,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536154648
    },
    {
        "content": "<p>really? that sounds painful.</p>",
        "id": 153993419,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536154823
    },
    {
        "content": "<p>some days I do 100s of commits</p>",
        "id": 153993420,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536154836
    },
    {
        "content": "<p>In general these would be grouped into relevant feature sets.</p>",
        "id": 153993422,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536155063
    },
    {
        "content": "<p>I don't know what that means</p>",
        "id": 153993423,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536155104
    },
    {
        "content": "<p>oh, like normally you would create a feature Branch to work on a feature. You might do hundred commits in the course of developing that feature, and then you would merge the branch once the feature was complete.</p>",
        "id": 153993424,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536155161
    },
    {
        "content": "<p>that's kind of not the workflow. I'm typically processing typos and stuff like that.</p>",
        "id": 153993425,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536155221
    },
    {
        "content": "<p>I'm not saying it's impossible to have a workflow with auto merging, but there is no built-in support for that kind of workflow, so we would have to create some kind of listener component and call the merge API when certain conditions were met -- and we would need a way to tell which PRs were intended to the auto merge. I've never seen this in the wild.</p>",
        "id": 153993426,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536155223
    },
    {
        "content": "<p>i suppose I could do it that way</p>",
        "id": 153993427,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536155229
    },
    {
        "content": "<p>Yeah -- if you read through the write-up Wiki document linked above, and this looks unworkable, we should step back and think about how to change it.</p>",
        "id": 153993429,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536155350
    },
    {
        "content": "<p>Stuff like <a href=\"https://mergify.io\" target=\"_blank\" title=\"https://mergify.io\">https://mergify.io</a> looks quite flexible although I'm reluctant to take a dependency on it.</p>",
        "id": 153993434,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536155470
    },
    {
        "content": "<p>I'm not sure. most of the time, the PR workflow will be fine. It's not many days that I go through 100s of tasks all over the place</p>",
        "id": 153993436,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536155566
    },
    {
        "content": "<p>Ok. If you are willing to try it this way, I would say we should give it a shot. We can always adjust the process as we learn more -- we can make it as complicated as we need to :-)</p>",
        "id": 153993440,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536155633
    },
    {
        "content": "<p>yes we give it a shot</p>",
        "id": 153993442,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536155680
    },
    {
        "content": "<p>yeah, we tend to bundle changes into branches, which are usually linked to jira tickets; so you bundle the effort for a particular fix or feature into a branch; then you push that bundle of work into GH and raise a PR against the master or develop branch from the feature branch.</p>",
        "id": 153993447,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536156112
    },
    {
        "content": "<p>and lots of tasks I work on, that's how it works. But I also process 100s of tasks that are just tiny little text or grammar fixes. Can presently average 2:30 secs for these</p>",
        "id": 153993450,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536156249
    },
    {
        "content": "<p>what I might recommend for those cases is to do a commit for each one (if you want the granularity) and then reference the GForge issue in the commit message(s). But push them all up as a single branch so you can group together the tests+merge into a single step that covers all 100 of them.</p>",
        "id": 153993458,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536156518
    },
    {
        "content": "<p>In other words to pull request would basically be for  \"a bunch of typos I fixed this afternoon\".</p>",
        "id": 153993459,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536156544
    },
    {
        "content": "<p>yup, that's it</p>",
        "id": 153993462,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536156758
    },
    {
        "content": "<blockquote>\n<p>jawalonoski deleted the branch jwalonoski_clean_old_svn_files.</p>\n</blockquote>\n<p>umm, we have to go back and delete branches?</p>",
        "id": 153994510,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536356552
    },
    {
        "content": "<p>When you merge a PR, you get the option to delete the branch. I generally do because it keeps the branches down.</p>",
        "id": 153994521,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536356742
    },
    {
        "content": "<p>We can introduce automatic cleanup at some point.. but the branches also don't harm anything so it's more of a nice to have.</p>",
        "id": 153994527,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356870
    },
    {
        "content": "<p>so I just followed the instructions here: <a href=\"https://github.com/HL7/fhir/wiki/Get-Started-with-FHIR-on-GitHub\" target=\"_blank\" title=\"https://github.com/HL7/fhir/wiki/Get-Started-with-FHIR-on-GitHub\">https://github.com/HL7/fhir/wiki/Get-Started-with-FHIR-on-GitHub</a>. They are perfectly horrible and are 10x more work than working under svn. I will hope that we can make better instructions somewhere.</p>",
        "id": 153994593,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536360185
    },
    {
        "content": "<p>the most horrible bit is the named branches. is there some expectation that we'll have differently named branches for each piece of work?</p>",
        "id": 153994594,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536360231
    },
    {
        "content": "<p>so my PR just failed. I did a build, it worked. Then I committed using git, and it truncated a file</p>",
        "id": 153994610,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536360960
    },
    {
        "content": "<p>it appears to be truncated at the point where I quitted from git diff.</p>",
        "id": 153994611,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536360985
    },
    {
        "content": "<p>git did not notify that it was trashing my file...</p>",
        "id": 153994612,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536360994
    },
    {
        "content": "<p>so I launched a pull request through tortoisegit. I got this as outcome</p>",
        "id": 153994629,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536361857
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>The following changes since commit b0679f740d350ffe085eb4d65f64ad629a99eb96:\n\n  compile fix, and improve git ignore (2018-09-08 08:24:34 +1000)\n\nare available in the Git repository at:\n\n  https://github.com/HL7/fhir gg-work\n\nfor you to fetch changes up to c76f807961e81fcfbe7d69a856fa70769e6f68ab:\n\n  fix loinc.xml (2018-09-08 09:07:30 +1000)\n\n----------------------------------------------------------------\nGrahame Grieve (2):\n      fix up git ignored\n      fix loinc.xml\n\n .gitignore | 1 +\n 1 file changed, 1 insertion(+)\n</pre></div>",
        "id": 153994630,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536361859
    },
    {
        "content": "<p>Can you clarify whether the horribleness issue is the instructions or the actual procedures themselves?</p>",
        "id": 153994631,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536361859
    },
    {
        "content": "<p>I don't understand the \"for you to fetch changes up\" line - is this something I need to do? or something I could do if I wanted?</p>",
        "id": 153994632,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536361909
    },
    {
        "content": "<p>the procedures are horrible.</p>",
        "id": 153994633,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536361917
    },
    {
        "content": "<p>and now I'm lost again</p>",
        "id": 153994635,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362054
    },
    {
        "content": "<p>I'm not sure exactly what that message is from, but let's look at GitHub.</p>",
        "id": 153994636,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362058
    },
    {
        "content": "<p>I made a commit following the instructions, to gg-work</p>",
        "id": 153994637,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362069
    },
    {
        "content": "<p>then I created a pull request</p>",
        "id": 153994638,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362073
    },
    {
        "content": "<p><a href=\"https://github.com/HL7/fhir/pull/18\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pull/18\">https://github.com/HL7/fhir/pull/18</a></p>",
        "id": 153994639,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362082
    },
    {
        "content": "<p>that failed, because git truncated my file</p>",
        "id": 153994641,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362085
    },
    {
        "content": "<p>now I made a new commit to the branch that fixed the file git trashed</p>",
        "id": 153994642,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362098
    },
    {
        "content": "<p>Can you clarify what you mean by truncated a file?</p>",
        "id": 153994643,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362104
    },
    {
        "content": "<p>I see 3 commits currently on not pull request Branch. What additional changes are you expecting?</p>",
        "id": 153994644,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362114
    },
    {
        "content": "<p>now i want to do a PR on the to move changes from gg-work to the head, and I can't figure out how to do it</p>",
        "id": 153994646,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362151
    },
    {
        "content": "<p>git cut the loinc.xml file off at bout line 200</p>",
        "id": 153994647,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362164
    },
    {
        "content": "<p>So you have to pull request already created. Now it's just a question of merging it.</p>",
        "id": 153994648,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362170
    },
    {
        "content": "<p>I don't have it already created.</p>",
        "id": 153994649,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362181
    },
    {
        "content": "<p>I don't think git cut the file off. I think you're just looking at a preview. Where are you seeing this?</p>",
        "id": 153994650,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362199
    },
    {
        "content": "<p>it completely did get cut off</p>",
        "id": 153994652,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362212
    },
    {
        "content": "<p><a href=\"https://github.com/HL7/fhir/pull/18\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pull/18\">https://github.com/HL7/fhir/pull/18</a> has a merge button that will become active when the build status checks complete.</p>",
        "id": 153994653,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362220
    },
    {
        "content": "<p>umm</p>",
        "id": 153994654,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362276
    },
    {
        "content": "<p>so I didn't understand. The pull request was magically brought back to life after it failed.. because ... why?</p>",
        "id": 153994655,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362339
    },
    {
        "content": "<p>the PR is requesting that a particular Branch be merged. If you keep adding commits to the branch, each time you add a new commit the status check will run again.</p>",
        "id": 153994656,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362364
    },
    {
        "content": "<p>At some point when you are happy with a set of commits currently on the branch you can merge them into master.</p>",
        "id": 153994657,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362383
    },
    {
        "content": "<p>Or at any point you can give up and close the PR and optionally delete the branch.</p>",
        "id": 153994659,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362407
    },
    {
        "content": "<p>so if I merge into the master, and then make new commits to the branch, then what?</p>",
        "id": 153994660,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362480
    },
    {
        "content": "<p>Well that would not be a recommended practice. GitHub will consider the pull request to be merged so you would have to open a new one. you could technically do this  (opening a new requests on the same persistent branch) but it doesn't have much to recommend it.</p>",
        "id": 153994661,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362513
    },
    {
        "content": "<p>Better to keep them short lived</p>",
        "id": 153994662,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362537
    },
    {
        "content": "<p>I guess this answers my earlier question:</p>\n<blockquote>\n<p>the most horrible bit is the named branches. is there some expectation that we'll have differently named branches for each piece of work?</p>\n</blockquote>",
        "id": 153994664,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362566
    },
    {
        "content": "<p>that means the answer is yes, and I have a real problem with it. Perhaps it's ok for you, who rarely commit to the build, but I can make 100s of commits a day</p>",
        "id": 153994665,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362610
    },
    {
        "content": "<p>You could have special dispensation to commit directly to master if you want :-)</p>",
        "id": 153994666,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362638
    },
    {
        "content": "<p>But this kind of workflow is very typical across most of the software development practices that I've seen.</p>",
        "id": 153994668,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362658
    },
    {
        "content": "<p>I think I want that for special cases, but not normally</p>",
        "id": 153994669,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362666
    },
    {
        "content": "<p>(I would love to hear from others here.)</p>",
        "id": 153994670,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362682
    },
    {
        "content": "<p>I do want to emphasize that a typical workflow might involve hundreds of commits on a single feature branch. And you merge that all as the completed feature, and then you're done. I know this doesn't describe everything you do, but it is a good mindset to have for the things where it does fit. With that, I am off to dinner with Carrie :-)</p>",
        "id": 153994671,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536362815
    },
    {
        "content": "<p>it just feels to me like the manual trickiness here - going from a simple 'commit, write change notes, done' to 'name branch, switch to it, commit, push named branch by name, make a pr, watch for the pr to complete, merge' turns a 15 second operation into something that takes much longer - 3-4 minutes cumlatively? (and I can't see how I can interlace work either, which I do all the time)</p>",
        "id": 153994672,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362836
    },
    {
        "content": "<blockquote>\n<p>hundreds of commits on a single feature branch</p>\n</blockquote>",
        "id": 153994674,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362880
    },
    {
        "content": "<p>is completely not my normal workflow. sometimes I do something that could look like that.</p>",
        "id": 153994675,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362898
    },
    {
        "content": "<p>but it's rare.</p>",
        "id": 153994676,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536362902
    },
    {
        "content": "<p>something else I don't know what I did wrong:</p>",
        "id": 153994700,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536366915
    },
    {
        "content": "<p>I made a commit to a new branch: <br>\ngrahamegrieve pushed 4 commits to branch gg-no-svn.<br>\ncompile fix, and improve git ignore (b0679f7)<br>\nfix up git ignored (4c84b9e)<br>\nfix loinc.xml (c76f807)<br>\nremove references to svn throughout code base (cc40a26)</p>",
        "id": 153994701,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536366931
    },
    {
        "content": "<p>that's all my commits from the other branch. I thought I had reset my work area, but obviously not...</p>",
        "id": 153994702,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536366961
    },
    {
        "content": "<p>One annoying thing about many branches is that even if we clean up the main repository, the branches stick around on the local machine until they're manually cleaned up there.</p>",
        "id": 153994711,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536367732
    },
    {
        "content": "<p>(or at least I haven't figured out how to make them go poof automatically)</p>",
        "id": 153994713,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536367750
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/a/41611648\" target=\"_blank\" title=\"https://stackoverflow.com/a/41611648\">https://stackoverflow.com/a/41611648</a> may be helpful if you want this behavior</p>",
        "id": 153994755,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536413483
    },
    {
        "content": "<p>Ok.  Is there any reason this wouldn't be something everyone would want?  I.e. any reason to keep local versions of branches that have already been applied to the master?  If not, can we add this to the Git setup instructions - including how to do it using non-commandline :)</p>",
        "id": 153994764,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536421823
    },
    {
        "content": "<p>that stack overflow question feels like a powerful statement of what I think is wrong about git</p>",
        "id": 153994768,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536439938
    },
    {
        "content": "<p>Current git hit list:<br>\n- how do you maintain a single local clone, but commit to multiple different branches<br>\n- how do we replace the build number system<br>\n- how do we tell people how to know when a commit makes it's way onto <a href=\"http://build.fhir.org\" target=\"_blank\" title=\"http://build.fhir.org\">build.fhir.org</a><br>\n- how to auto-merge commits from authorised users<br>\n- how to auto-delete local branches that are dead</p>",
        "id": 153994849,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536491272
    },
    {
        "content": "<p>gave my answer for #1 on committers</p>",
        "id": 153994863,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536504172
    },
    {
        "content": "<p>For removing unused branches, there's a comment above -- would be good to know if this achieves the desired behavior.</p>",
        "id": 153994868,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536506983
    },
    {
        "content": "<p>For \"auto merging\", this needs a bit more explanation; how would a Committer indicate which pull requests are intended for automatic merging, vs work in progress? This is especially important as we add more review process.</p>",
        "id": 153994870,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536507093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> for #1, can you walk through the workflow for that?  I have a local repository.  It contains 3 changed files.  I want to commit/push/merge one of them.  The other 2 aren't ready to share yet and I don't want there to be any risk of those changes being pushed and merged</p>",
        "id": 153994871,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536507118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> The committer wouldn't indicate.  Nothing gets pushed unless it's ready to merge.  The Git server would have to determine based on what had been committed whether additional review was needed.</p>",
        "id": 153994872,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536507168
    },
    {
        "content": "<p>For telling people when changes are published, watching <a class=\"stream\" data-stream-id=\"142\" href=\"/#narrow/stream/142-committers.2Fnotification\">#committers/notification</a> for a successful build status on master should help -- once announced, the build is published to <a href=\"http://build.fhir.org\" target=\"_blank\" title=\"http://build.fhir.org\">build.fhir.org</a></p>",
        "id": 153994873,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536507168
    },
    {
        "content": "<p>The \"when changes are published\" problem is how you say the equivalent of \"watch for 17234 to successfully build, then grab the latest changes\" where 17234 needs to be something human-recognizable - i.e. not a hash</p>",
        "id": 153994874,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536507263
    },
    {
        "content": "<p>BTW - I presume the notion of pushing a work in progress to a branch is if you're doing shared development on a branch  or are doing major work you don't want  to lose if something bad happens locally?  We could, perhaps, have a naming convention for such branches.  In SVN, that would have been done with a true \"branch\" and in practice, I'm not sure we ever did that.</p>",
        "id": 153994875,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536507394
    },
    {
        "content": "<p>Why can't someone watch for a hash in the notification channel?</p>",
        "id": 153994880,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536510702
    },
    {
        "content": "<p>That is, Why would it have to be an integer?</p>",
        "id": 153994881,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536510785
    },
    {
        "content": "<p>Re: sharing work in progress, yes, the key use case would be review, whether via automated checks or individual human reviewers</p>",
        "id": 153994882,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536510862
    },
    {
        "content": "<p>Two main reasons - hashes are gobbledygook that's hard for a human brain to match; a sequential number gives you a sense of how long you need to wait</p>",
        "id": 153994884,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536512218
    },
    {
        "content": "<blockquote>\n<p>Why can't someone watch for a hash in the notification channel?</p>\n</blockquote>\n<p>because they're not subscribed to Zulip?</p>",
        "id": 153994891,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536525603
    },
    {
        "content": "<p>re: auto-merge- the discussion here seems to be about auto-pull request. That's not what I thought we were talking about:</p>\n<blockquote>\n<p>how would a Committer indicate which pull requests are intended for automatic merging, vs work in progress</p>\n</blockquote>\n<p>Why would you have a PR on work in progress?</p>",
        "id": 153994892,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536525717
    },
    {
        "content": "<p>Why not just define a build number, that's what we're really doing, we just used the SVN revision number as a convenient shorthand. Moreover, there's already build tooling that depends on that build number, seems like the easiest thing to do to support the transition is to continue that, but since the source control no longer supports it, we need to maintain it. So build a simple process that increments the build number in a master version file in the build, and commits the change. That's a release. Whether we automatically do that on every commit is another question.</p>",
        "id": 153994893,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536525857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> :</p>\n<blockquote>\n<p>The only operation you need for switching to commit to different branches of your single local clone is 'git checkout', in combination with committing first before you checkout and switch to a different branch or using 'git stash' to save the state of your work (including 'git stash -u' or 'git stash -a' if you also want to save the state of untracked or even \"ignored\" files).</p>\n</blockquote>\n<p>My workflow is: I want switch branches so I can commit, not commit so I can switch</p>",
        "id": 153994894,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536525884
    },
    {
        "content": "<blockquote>\n<p>So build a simple process that increments the build number in a master version file in the build, and commits the change</p>\n</blockquote>\n<p>That's what I wanted, but I was assured it was impossible.</p>",
        "id": 153994895,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536525921
    },
    {
        "content": "<p>it certainly can't be manual though - must be maintained by the infrastructure. But I think, in the end, that it isn't viable</p>",
        "id": 153994896,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536525997
    },
    {
        "content": "<p>It's impossible to have the git source control do it automatically like SVN did, but it's not impossible.</p>",
        "id": 153994897,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536526023
    },
    {
        "content": "<p>Yes, by manual I just mean you have to indicate that you want to do it. We could auto-wire it to the commit if we wanted, but that would mean every commit would have two commits, one for the change and one to increment the build number.</p>",
        "id": 153994898,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536526060
    },
    {
        "content": "<p>Could we suppress notification of the second commit?</p>",
        "id": 153994899,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536526099
    },
    {
        "content": "<p>Well, what I'm wondering is whether we need to release on _every_ commit.</p>",
        "id": 153994900,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536526114
    },
    {
        "content": "<p>Should there be an \"I want to release now\" decision?</p>",
        "id": 153994901,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536526140
    },
    {
        "content": "<p>Note that that still doesn't help in terms of telling peole what to look for in the CI build because when you commit, nothing would tell you what the number was going to be...</p>",
        "id": 153994902,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536526141
    },
    {
        "content": "<p>The CI build releases everytime it succeeds (and increments even when it doesn't succeed).  I don't know why we'd diverge from that.</p>",
        "id": 153994904,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536526176
    },
    {
        "content": "<blockquote>\n<p>Should there be an \"I want to release now\" decision?</p>\n</blockquote>\n<p>no; the CI build is the current. why complicate matters?</p>",
        "id": 153994905,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536526178
    },
    {
        "content": "<p>That's fair, but are we okay with every commit having another commit that increments the build number?</p>",
        "id": 153994910,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536526389
    },
    {
        "content": "<p>It would effectively double the size of the commit log. And it would mean that you'd have to pull after every commit.</p>",
        "id": 153994913,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536526482
    },
    {
        "content": "<p>You have to pull before you do a push regardless, no?  You wouldn't pull after every commit - that could be pulling 50+ times a day sometimes.</p>",
        "id": 153994915,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536526584
    },
    {
        "content": "<p>True, just before you push.</p>",
        "id": 153994916,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536526604
    },
    {
        "content": "<p>I guess the question now is whether this would work or not work. Obviously we can imagine ways that everything could work better -- and we can invest in building explicit tooling when needed. We can create a bot to notify you when you were build is ready, for example. But first we have to understand the problems that matter. :-)</p>",
        "id": 153994919,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536527147
    },
    {
        "content": "<p>for me, the problems that matter are my hit list above</p>",
        "id": 153994920,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536527175
    },
    {
        "content": "<p>I'll qualify that with \"the problems sofar discovered that matter...\" :)</p>",
        "id": 153994921,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536527238
    },
    {
        "content": "<p>The idea of building tools to generate follow-on commits to for every commit sounds like it'll be surprising. Software projects I'm familiar with use an explicitly release version then it matters. I'm very wary of trying to rewrite git to make it work like svn. We don't <em>need</em> to switch if we don't want to.</p>",
        "id": 153994923,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536527656
    },
    {
        "content": "<blockquote>\n<p>Software projects I'm familiar with use an explicitly release version then it matters</p>\n</blockquote>",
        "id": 153994927,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536527764
    },
    {
        "content": "<p>that's a bizarre statement for me. Because I'm asking questions that seem like they would be inevitable for any project, and there doesn't seem to be any answers</p>",
        "id": 153994928,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536527789
    },
    {
        "content": "<p>With a continuous integration build, why would every commit not \"matter\"?</p>",
        "id": 153994929,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536527881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I'm pretty sure that you can arrange your workflow so that you can \"switch branches so I can commit\" - if that's still what you want to do.  You can use stash if you want to avoid making additional interim commits (whether or not it's \"discouraged\") - maybe that will work for you.</p>",
        "id": 153994939,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536528184
    },
    {
        "content": "<p>Matter for explicitly human versioning. Often in a continuous deployment scenario, you'll build a binary for each commit, labeling it with a git hash. Deployment can be made and rolled back via hash.</p>",
        "id": 153994940,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536528193
    },
    {
        "content": "<p>That's the same thing, it's just a much less useful label (especially given we already have a history with a sequential build number, if we now \"switch\" to github hashes, build tooling will forever have a \"before this date look for this pattern\" special case).</p>",
        "id": 153994942,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536528290
    },
    {
        "content": "<p>I don't understand \"Deployment can be made and rolled back via hash\"</p>",
        "id": 153994946,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536528465
    },
    {
        "content": "<p>We don't have any \"deployment\".  If we want to undo a commit, we grab the original version and commit that.  Everything's always a roll-forward.</p>",
        "id": 153994947,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536528512
    },
    {
        "content": "<blockquote>\n<p>We don't have any \"deployment\".</p>\n</blockquote>\n<p>We do though, every time we publish the build, that's a deployment, and it's tagged with a build number that downstream tooling relies on to make decisions.</p>",
        "id": 153994948,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536528558
    },
    {
        "content": "<p>I'm just describing common patterns I see, in response to \"why wouldn't every commit matter\"</p>",
        "id": 153994949,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536528561
    },
    {
        "content": "<p>The only \"official\" releases we have are the ballots and official publications.  And those are snapshots taken of the master after imposing tight constraints that lock others from pushing/merging anything for a period of time.</p>",
        "id": 153994950,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536528566
    },
    {
        "content": "<p>I guess I don't understand the explaination.  In a CI build, who would roll anything back via hash and why?</p>",
        "id": 153994951,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536528662
    },
    {
        "content": "<p>Well, in a continuous delivery pipeline, the goal is to automate as much as possible of the deployment process. If you subsequently find an issue that made it farther down the pipe than it should have, you can roll it back.</p>",
        "id": 153994952,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536528713
    },
    {
        "content": "<p>That's true, but if the only thing that ever increments that number is the master build process, and it's only ever made as a single-file commit, that should be an auto-resolvable issue.</p>",
        "id": 153994954,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536528800
    },
    {
        "content": "<p>The number has to be in the build somewhere anyway, it's in the footer of every page.</p>",
        "id": 153994955,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536528916
    },
    {
        "content": "<p>If you roll back, you don't have an incrementing version.</p>",
        "id": 153994956,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536528946
    },
    {
        "content": "<p>I don't really understand rollback. what does it mean, and how can you know it's safe?</p>",
        "id": 153994957,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536529182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> For:</p>\n<blockquote>\n<p>for #1, can you walk through the workflow for that? I have a local repository. It contains 3 changed files. I want to commit/push/merge one of them. The other 2 aren't ready to share yet and I don't want there to be any risk of those changes being pushed and merged</p>\n</blockquote>\n<p>If I'm understanding the scenario (and I think I do), in that case I would use git add to stage the one changed file that I want to commit, and then use git commit to commit that file only (and you can push immediately afterward, or defer that until later as you prefer).  Then, if I wanted to checkout and work on a different branch I would use git stash (with -u if either or both of those files are untracked) to save the work on the other 2 files and then checkout the other branch.  Then when I'm ready to come back to that branch to keep working on those two files (and any others) I would checkout that branch and do git stash pop (or apply) to keep working on them where I left off before.</p>",
        "id": 153994966,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536529815
    },
    {
        "content": "<p>I have 3 changed files.  None of them require <code>git add</code> because all 3 files are already in source control.  I'm never going to commit without pushing and I'm never going to push without merging.  If I commit, it's because \"this work is done and ready to add to the main build\".  (We can explore use-cases for committing without pushing or pushing without merging later, but the default for everyone at the start will be commit =push = merge (if build successful).</p>",
        "id": 153994967,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536530019
    },
    {
        "content": "<p>I don't \"want\" to work on a different branch.  But, it sounds like every time I push, I need to be on a different branch.</p>",
        "id": 153994968,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536530070
    },
    {
        "content": "<p>No, I think there's some misunderstanding here.  First, you do need 'git add' to say what you want to be committed in the next commit (that doesn't happen without you saying so, regardless of whether the files are under version control).  I agree that then the typical (or universal) workflow will be to push and merge what I've just committed.  And you <strong>do not</strong> need to be on a different branch every time that you push.  You can do as many commit - push command pairs as you want on a single branch (as long as there are further changes available to  commit).  I've done that lots of times.</p>",
        "id": 153994969,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536530323
    },
    {
        "content": "<p>So what I think I'm hearing is the following:<br>\n1. make changes as you like in root.  <br>\n2. When you're ready to commit some stuff:<br>\na) stash your changes<br>\nb) create a new branch relevant to that set of changes<br>\nc) switch to that branch<br>\nd) unstash your changes to the current branch<br>\ne) commit the changes you want committed<br>\nf) re-stash the rest of the changes<br>\ng) pull from git to make sure you've got the latest, handling any merges necessary<br>\nh) push the commit and create a pull request<br>\ni) until we have auto-merge, go to the website and merge the pull request<br>\nj) checkout your original branch<br>\nk) unstash the uncommitted changes and keep working<br>\nl) trust that the branch you just committed will get deleted at some point in the future when the server cleans up its branch and that gets pushed down to your local store if you've got your config set up properly</p>",
        "id": 153994970,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536530326
    },
    {
        "content": "<p>Is that correct?</p>",
        "id": 153994971,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536530330
    },
    {
        "content": "<blockquote>\n<p>I would use git stash (with -u if either or both of those files are untracked) to save the work on the other 2 files and then checkout the other branch</p>\n</blockquote>\n<p>So the work I'm doing is lost when I switch branches</p>",
        "id": 153994972,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536530332
    },
    {
        "content": "<p>the one issue is with generating pull requests - that does need to be from a different branch (not master)</p>",
        "id": 153994973,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536530402
    },
    {
        "content": "<p>But that's addressed in my proposed workflow, no?</p>",
        "id": 153994974,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536530423
    },
    {
        "content": "<p>I think it is, Lloyd - yes (I just haven't read all of it yet)</p>",
        "id": 153994975,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536530446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  no, if you use git stash followed later by git stash pop none of the work will be lost</p>",
        "id": 153994976,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536530514
    },
    {
        "content": "<p>When I do a pull in step g, that only effects the new branch, not my local master -correct?  Or am I going to have worry about merging in step k too?</p>",
        "id": 153994977,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536530739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> I think you can simplify your proposed workflow substantially if you do the work that you're going to commit and push in a branch (not master) that you will then generate the pull request from (that should obviate the need for a-d, and some of the rest).  I've seen recommendations and I agree that it's best not to make any changes directly in master (what you are calling root?), as it's easiest if that's left in a clean state so that any git pulls from upstream can always be fast-forward merged.  From there you do do a git merge to any branch that you are doing work on where you want it to be updated to reflect the latest changes from others.</p>",
        "id": 153994979,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536531034
    },
    {
        "content": "<p>Grahame's whole point is that he needs to do all his work in one branch because he needs to only build one branch.</p>",
        "id": 153994980,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531090
    },
    {
        "content": "<p>he can do that if he wants to</p>",
        "id": 153994982,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536531109
    },
    {
        "content": "<p>He can't sit and twiddle his thumbs waiting for 45 minutes while the build runs before he keeps working on other stuff</p>",
        "id": 153994983,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531114
    },
    {
        "content": "<p>how?</p>",
        "id": 153994984,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531117
    },
    {
        "content": "<p>We're talking local build here.</p>",
        "id": 153994986,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531156
    },
    {
        "content": "<p>I've never said this:</p>\n<blockquote>\n<p>he needs to do all his work in one branch</p>\n</blockquote>\n<p>what I said is \"I need to do all my work in one local directory\". I'm not following everything here completely, but I think those are different things</p>",
        "id": 153994989,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536531326
    },
    {
        "content": "<p>Right.  You need to work in one folder and kick off a build and keep working without having a bunch of files revert because you've switched branches and make the running build confused and either die or not reflect your changes.</p>",
        "id": 153994991,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531433
    },
    {
        "content": "<p>pretty much. I very frequently run the build basically continuously - stop and start again, or start as soon as it's done. I can have the build running &gt;90% of the time</p>",
        "id": 153994992,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536531498
    },
    {
        "content": "<p>The proposal I described above would still have to wait for the build to end - or at least get past its dependency on source files before you could do the stash/switch/unstash/.../switch back step</p>",
        "id": 153994993,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531584
    },
    {
        "content": "<p>But it would allow you to have multiple independent edits in your working folder and commit a subset of those in a branch without losing the rest.</p>",
        "id": 153994994,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531611
    },
    {
        "content": "<p>It is, however, a butt-ugly set of steps...</p>",
        "id": 153994995,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531628
    },
    {
        "content": "<p>And you're limited in doing it when the build is either not running or has progressed past a particular point.</p>",
        "id": 153994996,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531687
    },
    {
        "content": "<p>it's certainly an awful workflow. Astonishingly bad</p>",
        "id": 153994997,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536531714
    },
    {
        "content": "<p>As an alternative, can we get access to (i.e. render) the pre-merge content on the CI build?</p>",
        "id": 153994999,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531785
    },
    {
        "content": "<p>that's an alternative how?</p>",
        "id": 153995000,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536531803
    },
    {
        "content": "<p>That would offload the build process to the server.</p>",
        "id": 153995001,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531805
    },
    {
        "content": "<p>I agree the build time is a concern - but I don't think there's a reason it can't work the same way Grahame does it now in svn (if I understand his process).  My take is that you do some work on the \"work branch\" (could be only one or multiple of those) and then run the local build.  While the build is running you can still work on some additional files (if that doesn't interfere with the build).  Once the build is successful then the changes it reflects can be committed and pushed.</p>\n<p>The big issue where I think there is a problem with the build delay, is that, as Lloyd says,  you don't want to have \"a bunch of files revert because you've switched branches and make the running build confused and either die or not reflect your changes.\"  That actually will happen if you switch branches during a build and that has to be avoided.  So that may push very strongly toward doing all of the work in a single \"work branch\" that multiple commits and pull requests are then generated from.  I think that will end up being very similar to the workflow with svn - so maybe not actually \"astonishingly bad\"?</p>",
        "id": 153995002,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536531812
    },
    {
        "content": "<p>You could run the build for your branch on the server, see if it looked good and if not, fix it</p>",
        "id": 153995003,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> consistently says \"don't do another PR on a branch that's already merged\"</p>",
        "id": 153995004,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536531940
    },
    {
        "content": "<p>When you needed to make an interrupt, you'd stash your work, switch to a new branch, make your changes, commit and push them, then switch back and unstash.  You wouldn't wait to test locally - your test would be the results of the server-side \"ready to merge\" build.  We'd just need a flag for it to not auto-merge because you'd want to check that all was good with the output before merging.</p>",
        "id": 153995005,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531941
    },
    {
        "content": "<p>right now I'm trying remember what about GIT makes it actually better to justify all this awfulness</p>",
        "id": 153995006,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536531981
    },
    {
        "content": "<p>Right.  We wouldn't be doing that.  You'd have your development branch and a patch-specific branch.  You'd PR on the patch-specific branch.</p>",
        "id": 153995007,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536531994
    },
    {
        "content": "<p>it seems like an incredibly high price to pay just to get checked builds</p>",
        "id": 153995008,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536532001
    },
    {
        "content": "<p>Better = checked build, simpler typo correction, ability to add extra steps around \"sensitive\" (e.g. normative) files.  Though it's possible that some of that could be done in SVN if we added hooks and stuff.</p>",
        "id": 153995009,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536532068
    },
    {
        "content": "<blockquote>\n<p>simpler typo correction</p>\n</blockquote>",
        "id": 153995010,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536532083
    },
    {
        "content": "<p>really?</p>",
        "id": 153995011,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536532087
    },
    {
        "content": "<p>nothing about this is simpler at all</p>",
        "id": 153995012,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536532100
    },
    {
        "content": "<p>typo correction people will be able to do from the Git website - no pushes/pulls etc.</p>",
        "id": 153995013,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536532282
    },
    {
        "content": "<p>It's not simpler for change-proposal based stuff</p>",
        "id": 153995014,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536532305
    },
    {
        "content": "<p>well, I've been meaning to comment on that. I'd actually rather not have that. It's me that processes the vast majority of the typo 'fixes'. only about 60% of them are valid and simple. about 10% are valid and real hard, and about 30% are not typos or not actually right or are html style issues</p>",
        "id": 153995015,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536532413
    },
    {
        "content": "<p>and I always fix them using search/replace when I can, and about 50% of the time, I find the same mistake in more than one place</p>",
        "id": 153995016,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536532515
    },
    {
        "content": "<p>I don't think that committing new work and submitting a new pull request on a previously merged branch is actually a problem:<br>\n<a href=\"https://stackoverflow.com/questions/22010679/add-commits-to-a-merged-branch-and-start-a-new-pull-request\" target=\"_blank\" title=\"https://stackoverflow.com/questions/22010679/add-commits-to-a-merged-branch-and-start-a-new-pull-request\">https://stackoverflow.com/questions/22010679/add-commits-to-a-merged-branch-and-start-a-new-pull-request</a></p>",
        "id": 153995017,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536532984
    },
    {
        "content": "<p>I suspect that is what you will want to do</p>",
        "id": 153995018,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536532994
    },
    {
        "content": "<p>It's also not appearing, though, that switching to git is making anything easier (other than typos) or solving any problems :(</p>",
        "id": 153995019,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536533410
    },
    {
        "content": "<p>we do want the checked build</p>",
        "id": 153995021,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536533751
    },
    {
        "content": "<p>have a look at this: <a href=\"https://github.com/HL7/fhir/pull/21\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pull/21\">https://github.com/HL7/fhir/pull/21</a></p>",
        "id": 153995022,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536533767
    },
    {
        "content": "<p>why do we get all the past changes repeated?</p>",
        "id": 153995023,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536533796
    },
    {
        "content": "<p>I tried following Lloyd's method. it failed, because of conflicting changes between branch and master. Scarily, the stash pop was partially successful, and left me with a trashed work space</p>",
        "id": 153995026,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536535920
    },
    {
        "content": "<p>Re: seeing changes repeated, is it possible you created a new branch off of your old branch, instead of from master?</p>",
        "id": 153995027,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536536092
    },
    {
        "content": "<p>I suppose. But John got my changes in this pull:</p>",
        "id": 153995028,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536536123
    },
    {
        "content": "<p><a href=\"https://github.com/HL7/fhir/pull/20\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pull/20\">https://github.com/HL7/fhir/pull/20</a></p>",
        "id": 153995029,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536536148
    },
    {
        "content": "<p>When the branches are merged, I configured GitHub to do a \"squash\" , which means the commits themselves are squashed into a single commit beforehand merging.</p>",
        "id": 153995030,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536536151
    },
    {
        "content": "<p>no he didn't. weird</p>",
        "id": 153995031,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536536174
    },
    {
        "content": "<p>but I don't understand how your response relates to my question</p>",
        "id": 153995033,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536536367
    },
    {
        "content": "<p>ok. my hate for git is increasing rapidly. this pull:</p>",
        "id": 153995039,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536539554
    },
    {
        "content": "<p><a href=\"https://github.com/HL7/fhir/pull/22\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pull/22\">https://github.com/HL7/fhir/pull/22</a></p>",
        "id": 153995040,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536539558
    },
    {
        "content": "<p>it says: This branch has conflicts that must be resolved</p>",
        "id": 153995041,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536539567
    },
    {
        "content": "<p>well, git, I <em>did</em> resolve the conflicts.</p>",
        "id": 153995042,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536539580
    },
    {
        "content": "<p>but, wtf, I'll do what it says in how to resolve the conflicts. which, of course, is a spectacular fail. but eventually I pull/merge/edit 100s of conflicts until i have something that builds and that git says is ok. So then I commit to my local master.. because git says I don't know what I'm doing (and surely i have no clue at all) and it says I need to do that and not to change that. So I do. And then I switch to the branch in that pull.. and now git says that there is nothing to push, so.... I don't know how to fix that.</p>",
        "id": 153995044,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536539690
    },
    {
        "content": "<p>but I know that I need to get this pushed so that I can get on with fixing the long list of other things people want me to fix today</p>",
        "id": 153995045,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536539770
    },
    {
        "content": "<p>I guess the answer is, I'm too stupid to use git, so I don't know how I can get anything fixed</p>",
        "id": 153995046,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536539799
    },
    {
        "content": "<p>We can all be confident that the issue isn't with your intelligence. It's a learning curve to be sure,. But if you're encountering issues with the basics of making and merging isolated changes, it's probably an issue with my instructions.</p>",
        "id": 153995048,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536540030
    },
    {
        "content": "<p>Maybe we can set up a time for screen sharing / joint debugging to figure out what's going on.</p>",
        "id": 153995049,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536540059
    },
    {
        "content": "<p>oh no I'm sure if I wiped everything and started afresh every time, it would be just dandy. But that completely is not how it's possible for me to work</p>",
        "id": 153995050,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536540062
    },
    {
        "content": "<p>now would be really useful, since I'm stuck</p>",
        "id": 153995051,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536540071
    },
    {
        "content": "<p>Your definitely shouldn't ever have to \"wipe everything\".</p>",
        "id": 153995052,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536540098
    },
    {
        "content": "<p>that's how your instructions work</p>",
        "id": 153995053,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536540107
    },
    {
        "content": "<p>Shouldn't be. Let's talk ; I'll message you in a minute when i get set up with a computer.</p>",
        "id": 153995054,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536540138
    },
    {
        "content": "<p>k thx</p>",
        "id": 153995055,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536540145
    },
    {
        "content": "<p><a href=\"https://hangouts.google.com/call/td_tS3u2_qIQtq1m14WNAAEE\" target=\"_blank\" title=\"https://hangouts.google.com/call/td_tS3u2_qIQtq1m14WNAAEE\">https://hangouts.google.com/call/td_tS3u2_qIQtq1m14WNAAEE</a></p>",
        "id": 153995056,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536540368
    },
    {
        "content": "<p><a href=\"#narrow/stream/138-committers.2Fgit-help/subject/Hello.20World/near/184483\" title=\"#narrow/stream/138-committers.2Fgit-help/subject/Hello.20World/near/184483\">https://chat.fhir.org/#narrow/stream/138-committers.2Fgit-help/subject/Hello.20World/near/184483</a></p>",
        "id": 153995067,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536542453
    },
    {
        "content": "<p>ok. long discussion with Josh (thanks). So some updates:</p>\n<blockquote>\n<p>#1 how do you maintain a single local clone, but commit to multiple different branches</p>\n</blockquote>\n<p>Josh has changed Github not to use squash merges. This means that we can commit to a branch after a PR on it.  Also Josh very patiently demonstrated how switching works. The combination of how switching works and allowing commits to a branch after PR doesn't bring us back to the simplicity of SVN but it's probably workable. It's still much more mentally complex...</p>\n<blockquote>\n<p>#2 how do we replace the build number system</p>\n</blockquote>\n<p>The automated build numbering system is very difficult to replace, but the ways I use it to blow various caches downstream of the main build can be done just as well by introducing a manually controlled number somewhere. The pain is that I have to create a new place for that, add it to the package files, and then get all the downstream tools to be upgraded. But that's a once off pain</p>\n<blockquote>\n<p>#3 how do we tell people how to know when a commit makes it's way onto <a href=\"http://build.fhir.org\" target=\"_blank\" title=\"http://build.fhir.org\">build.fhir.org</a></p>\n</blockquote>\n<p>Josh is going to update the build bot so that it adds the commit message to the build notification. Anyone to whom we used to say 'want for build X', the message will now be: watch the committers/notification for the commit message to appear. That's still incomplete because http caches might get in the way (this happens about 5% of the time) and there's no easy way to say 'you have the right version in practice' (user will have to scan the history of the build bot and see what hash they're getting. difficult when we're really busy)</p>\n<blockquote>\n<p>#4 how to auto-merge commits from authorised users</p>\n</blockquote>\n<p>Josh is going to look at mergify for this </p>\n<blockquote>\n<p>#5 how to auto-delete local branches that are dead</p>\n</blockquote>\n<p>we didn't discuss this</p>\n<blockquote>\n<p>#6 (new) do we have to have topics for each branch</p>\n</blockquote>\n<p>we didn't discuss this</p>",
        "id": 153995082,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536547389
    },
    {
        "content": "<p>Will there be some improved documentation forthcoming around #1 (and changes in the documentation in general to not presume the use of commandline)?</p>",
        "id": 153995088,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536547567
    },
    {
        "content": "<p>Re: docs, if we can define patterns that work for committers in the community, let's by all means document them. I think we're a little bit today still at the stage of throwing things at the wall to see what sticks.</p>",
        "id": 153995089,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536547638
    },
    {
        "content": "<p>Re: CLI, I'd love if there are volunteers to help with platform-specific GUI tool advice + docs. Again, I think we need a well-defined workflow, and working CLI instructions, before we attempt to \"port\" these as instructions for platform-specific GUI tools.</p>",
        "id": 153995090,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536547673
    },
    {
        "content": "<p>Agreed and happy to help with the Windows/TortoiseGit instructions</p>",
        "id": 153995093,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536547845
    },
    {
        "content": "<p>ok another question. I switched to my local master, and it said my local master was 6 commits ahead of the remote master... I can't think how that makes sense. So I did a pull, and now it's 7 commits ahead of the remote master.</p>",
        "id": 153995095,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536550039
    },
    {
        "content": "<p>that doesn't make sense to me</p>",
        "id": 153995096,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536550040
    },
    {
        "content": "<p>and also, <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> I very definitely derived the branch used here from my master: <a href=\"https://github.com/HL7/fhir/pull/23\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pull/23\">https://github.com/HL7/fhir/pull/23</a></p>",
        "id": 153995153,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536559817
    },
    {
        "content": "<p>but it still claims to be based further back that it should have been, which is only the last change. Presumably, I have somehow been unable to get my master actually current?</p>",
        "id": 153995154,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536559863
    },
    {
        "content": "<p>(since it only contains the actual changes I definitely wanted)</p>",
        "id": 153995155,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536559874
    },
    {
        "content": "<p>Here's an example of a Git branching model, known as \"GitFlow\", that may be of interest.<br>\n<a href=\"https://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" title=\"https://nvie.com/posts/a-successful-git-branching-model/\">https://nvie.com/posts/a-successful-git-branching-model/</a><br>\nBeing new to the FHIR &amp; Git discussion, I'm unsure how well this aligns with what has already been established, but it may be worth a look.</p>",
        "id": 153995256,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1536591051
    },
    {
        "content": "<blockquote>\n<p>ok another question. I switched to my local master, and it said my local master was 6 commits ahead of the remote master... </p>\n</blockquote>\n<p>Remember when you commit, unlike SVN, it doesn't automatically go up to the server. So you made 6 commits locally and didn't push them to remote</p>\n<blockquote>\n<p>So I did a pull, and now it's 7 commits ahead of the remote master.</p>\n</blockquote>\n<p>Maybe you got the latest commits from remote and merged them (so merge-commit, 1 commit) hence why you're 7 ahead now. Push and you won't be ahead anymore</p>",
        "id": 153995696,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1536669384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191363\">@Vadim Peretokin</span> keep in mind that the master branch on <a href=\"http://GitHub.com/hl7/fhir\" target=\"_blank\" title=\"http://GitHub.com/hl7/fhir\">GitHub.com/hl7/fhir</a> can't be pushed to directly -- only gets updated via PR.</p>",
        "id": 153995699,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536670473
    },
    {
        "content": "<p>Right, sorry (and that's very good!). Making a PR for those and merging that PR would then get your local master up to date.</p>\n<p>Though in my workflow I never bother with the local master - I just make a new branch from the remote master for every logical piece of work that I do.</p>",
        "id": 153995701,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1536670668
    },
    {
        "content": "<p>Do you want to jot down the way you get a new feature branch started, so we can we exactly what this means?</p>",
        "id": 153995703,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536670745
    },
    {
        "content": "<p>I'll have a look at that.</p>",
        "id": 153995711,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1536671489
    },
    {
        "content": "<p>Feature branches represent a set of tasks; something motivates GG to (for example) fix a set of typos - it may be a forge issue or similar; you create a feature branch for that set of work.  We have jira issues representing both Bug fixes and New Features, and the unique identifiers for them are usually included in the feature branch name.  The idea is you commit as you go, so you don't have unstaged changes; stashing is a PITA in my experience.</p>\n<p>All those tasks to close out the issue are bundled together in the feature branch and when the work is complete, the branch is then pushed up for a PR merge the changes in the current HEAD branch; </p>\n<p>Conventionally, in the git-flow model, the <code>develop</code> branch would be the <em>HEAD</em> branch and represents the current working state (so would be the source for <a href=\"http://build.fhir.org\" target=\"_blank\" title=\"http://build.fhir.org\">build.fhir.org</a> for example); <code>master</code> represents the last released version (and there are <code>release</code> branches for past releases)</p>",
        "id": 153995759,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536679628
    },
    {
        "content": "<p>This is a great overview! I should note for the record that we are not proposing to follow the git-flow model right now; we are doing something that looks a lot more like the familiar subversion workflow to try to minimize the pain of transition -- that is to say, a single <code>master</code> branch that represents the current state of the spec (generally in flux, but not broken), with release tags from time to time as we publish releases.</p>",
        "id": 153995764,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536680270
    },
    {
        "content": "<p>yeah, we follow it 'loosely' - when you start talking about<code>release</code> and <code>hotfix</code> branches people (who've been doing this much longer than I have) get confused - as do I.</p>",
        "id": 153995893,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536696346
    },
    {
        "content": "<p>that said, I do find the distinction between <code>master</code> and <code>develop</code> to be helpful;</p>",
        "id": 153995894,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536696552
    }
]