[
    {
        "content": "<p>As I feared,  I made a change in a branch committed and pushed ( forgot to close excel and is all @#$ up but that is separate issue )  checkout back to master branch run the build and voila it is as if I never made a change.    So how to I keep a local build copy of all the cumulative changes?  so I can move forward without having to wait for a PR to be approved and updating the master before I can make the next incremental change?</p>",
        "id": 153996278,
        "sender_full_name": "Eric Haas",
        "timestamp": 1536765402
    },
    {
        "content": "<p>so if I run the build  ( specifically the <a href=\"http://publish.sh\" target=\"_blank\" title=\"http://publish.sh\">publish.sh</a> bash) in the current branch it reflects the changes.  if I checkout to the master branch and then run the build,  it does not.   Is this expected behavior?</p>",
        "id": 153996293,
        "sender_full_name": "Eric Haas",
        "timestamp": 1536767814
    },
    {
        "content": "<p>That's expected behavior.  However, you should be able to merge the change from your branch into your local master</p>",
        "id": 153996296,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536768638
    },
    {
        "content": "<blockquote>\n<p>You should be able to merge the change from your branch into your local master</p>\n</blockquote>\n<p>How do I do that? ( by how I mean step by step command lines that i can literally copy and paste into my shel l )</p>\n<p>What happens when I do a git pull origin master if I merge a branch with the master?  will I get conflicts?</p>",
        "id": 153996322,
        "sender_full_name": "Eric Haas",
        "timestamp": 1536773024
    },
    {
        "content": "<p><code>master</code> is usually considered a special branch; so usual pattern is to: <br>\n1. make your changes on a feature branch (which will be initially a copy of the master branch), <br>\n2. add any new files<br>\n3. commit the changes, <br>\n4. push the commits to the remote (GH in this case), <br>\n5. create a PR<br>\n6. merge the PR (this is often expected to be done by a third party under the guise of code review)<br>\n7. checkout master<br>\n8. git pull</p>\n<p>If master is updated in the meantime, a <code>git pull</code> will reflect the changes upstream (it by default updates all local branches) ; you can then merge them into your feature branch by running a <code>git merge master</code>- here you might get conflicts if the changes you have made are on the same files as what other people have been updating; this can be painful, but there are some good tools to assist.  W.r.t to running builds, by default the current branch will be the upstream version plus the changes you've made.</p>",
        "id": 153996376,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536789146
    },
    {
        "content": "<p>To do a local merge:</p>\n<div class=\"codehilite\"><pre><span></span>$ git checkout master\n$ git pull\n$ git merge my-branch\n</pre></div>\n\n\n<p>1. The first checks out the <code>master</code> branch<br>\n2. The second runs a git pull to sync with the remote master <br>\n3. The third merges the commits from your feature branch into the current branch (<code>master</code>)<br>\nIf there are conflicts, it will tell you here; I recommend a tool for managing the conflicts; the Jetbrains tools work pretty well.</p>\n<p>There is a second command <code>git fetch</code> which just fetches the changes;  ==&gt; <code>git pull</code> does a <em>fetch</em>, followed by a <em>merge</em></p>",
        "id": 153996377,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536789742
    },
    {
        "content": "<p>IU</p>",
        "id": 153996384,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536791058
    },
    {
        "content": "<p>I'm still far from understanding all the implicit stuff going on in the background, but my PRs initially claimed to containing past changes. I think that this happened because I was trying to merge my local changes into my local master to do what Eric's trying to do</p>",
        "id": 153996386,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536791161
    },
    {
        "content": "<p>between this issue and the build error and the build using all my cpu I am giving up for a while and will try again when things are better sorted.</p>",
        "id": 153996387,
        "sender_full_name": "Eric Haas",
        "timestamp": 1536791345
    },
    {
        "content": "<p>here's a pretty funny page: <a href=\"https://www.quora.com/Why-is-Git-so-hard-to-learn\" target=\"_blank\" title=\"https://www.quora.com/Why-is-Git-so-hard-to-learn\">https://www.quora.com/Why-is-Git-so-hard-to-learn</a> - series of completely contradictory answers. The problems for me are all because the 'this is easy' answers don't deal with real world work flow - pretending that our work is a series of cleanly separated tasks. I especially like the 'learn git slowly' answers - as if git is actually our job</p>",
        "id": 153996388,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536791355
    },
    {
        "content": "<blockquote>\n<p>giving up for a while</p>\n</blockquote>\n<p>other committers are too scared to try. From my point of view, we have a serious problem here</p>",
        "id": 153996389,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536791383
    },
    {
        "content": "<p>I saw Eric's comment here, but I wasn't sure if it was related to Git in particular, vs a broken build.</p>",
        "id": 153996418,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536798881
    },
    {
        "content": "<p>both, but Git is what changed.</p>",
        "id": 153996419,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536798919
    },
    {
        "content": "<p>What else are you hearing ? I want to 1) be responsive to serious issues, 2) allay any unnecessary fears, and 3) treat this as an experiment that that is reversible if we're not happy.</p>",
        "id": 153996420,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536798946
    },
    {
        "content": "<p>I just think it would be a shame to treat \"I was too scared to try\" as a deciding vote (vs, I tried and couldn't make it work)</p>",
        "id": 153996421,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536798996
    },
    {
        "content": "<p>For perspective, pretty much every serious software product now uses some flavor of distributed version control; it's not part like we're peddling a giant fad (IMO at least).</p>",
        "id": 153996422,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536799057
    },
    {
        "content": "<p>well, I hear that committers are watching this and deciding not to contribute for now, in the hope that documentation will improve.</p>",
        "id": 153996423,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536799353
    },
    {
        "content": "<p>I'm not hopeful on that front right now - the workflow I am following is really very complicated; the documentation you wrote is right in principle, but doesn't deal with our reality. I don't know how many committers interlace work the way that Eric/Lloyd/I do, but I suspect that most of us do.</p>",
        "id": 153996424,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536799424
    },
    {
        "content": "<p>I understand that the general movement is in this direction, but I very much feel as though real issues are dismissed as FUD when they represent a significant increase in the workflow complexity - once you have figured out how to explain the issues in language that git users can understand.</p>",
        "id": 153996425,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536799509
    },
    {
        "content": "<p>Okay. Well I'm here to help, but I'm not going to push. Please let me know what I can do that's useful, beyond the experiment we're running with Mergify and the updated merge announcements we've configured on Zulip.</p>",
        "id": 153996426,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536800309
    },
    {
        "content": "<p>well, what might help is :<br>\n- agreeing on 1 or a few UI enhanced clients that we document, and documenting for them. For instance, I think that most of us on windows use tortoisegit. command line documentation I'll be ignoring. I simply don't understand how you can meaningfully review changes in 100s of files using a command line tool<br>\n- documenting a workflow that supports maintaining a single local folder you work in, and committing sets of changes out of it as separate PRs (while maintaining the integrity of your local workspace)</p>",
        "id": 153996433,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536803979
    },
    {
        "content": "<p>Great! The first item <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>  has agreed to help with. I've not had much luck personally with GUIs for git or svn, but I know this is very much a matter of personal preference.</p>",
        "id": 153996436,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536806006
    },
    {
        "content": "<p>The second item is a sticking point if I'm not mistaken -- unless you've seen a solution somewhere in our recent discussion/exploration.</p>",
        "id": 153996439,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536806043
    },
    {
        "content": "<p>it's really weird how there's no one workable single UI</p>",
        "id": 153996440,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536806056
    },
    {
        "content": "<p>the second item is critical; we can at least document  a least worst practice</p>",
        "id": 153996441,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536806083
    },
    {
        "content": "<p>I use TortoiseGit and am happy to write docs for that, I'll work on that.</p>",
        "id": 153996442,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536806091
    },
    {
        "content": "<p>What is the least worst? I'm not sure I've seen one that meets your criteria.</p>",
        "id": 153996443,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536806122
    },
    {
        "content": "<p>However, I've never had any success with merging my local branches that I've pushed and then sync'ing. That's a recipe for really difficult to resolve conflicts, it seems to me.</p>",
        "id": 153996444,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536806151
    },
    {
        "content": "<p>I've always pushed, then merged to master, then pulled from master.</p>",
        "id": 153996445,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536806167
    },
    {
        "content": "<p>Is the mergify going to auto-merge commits?</p>",
        "id": 153996446,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536806217
    },
    {
        "content": "<p>er, I mean PRs?</p>",
        "id": 153996447,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536806226
    },
    {
        "content": "<p>actually, the most practical idea I've seen yet is to have a sibling folder you do git from. you commit from that. but that has it's own problems</p>",
        "id": 153996448,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536806236
    },
    {
        "content": "<p>Only in an opt-in fashion for now, but that's what we're looking into.</p>",
        "id": 153996449,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536806256
    },
    {
        "content": "<p>mergify: yes, for approved editors. at this time, I'm the only approved editor while we test</p>",
        "id": 153996450,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536806265
    },
    {
        "content": "<p>For the sibling folder idea, how do you manage changes between the main folder and the sibling folder?</p>",
        "id": 153996451,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536806301
    },
    {
        "content": "<p>Are they both git clones, or just the sibling is a git clone?</p>",
        "id": 153996452,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536806314
    },
    {
        "content": "<p>well, I think there's problems, and I haven't tried it, but if I tried, here's what I'd do: tie my working copy to master. Only sync into it from master. Have a batch file that copies everything from the working copy to my git-commit copy. Use that after I switch that git-commit copy to the branch I'm going to commit to. Resync it after committing</p>",
        "id": 153996453,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536806427
    },
    {
        "content": "<p>it just seems like so much work compared to the really simple pattern with svn or git when committing to the master directly: choose a set of changes, and commit them.</p>",
        "id": 153996454,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536806462
    },
    {
        "content": "<p>I feel as though git should be able to do this: choose a set of changes, and commit to a clone of the master, and tell me if that's a problem</p>",
        "id": 153996455,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536806501
    },
    {
        "content": "<p>A slightly crazy idea here - what if each individual had their own branch (and only one).  When you pushed, if the branch built, it would auto-merge.  You could commit and push at will, always working in one branch.  No switching.  No stashing.  But still having the ability to test before merging.  Is that viable/technically possible?  We'd have 40-50 branches, though probably only 10 or so that would be terribly active.  I'm sure this notion will make git afficianados cringe (and I do get why), but what I'm interested in is maximum simplicity, minimum pain and getting the one and only thing we really looking for from Git - not breaking builds.  (And I think that we ought to also be able to get the \"changes must be reviewed if they're impacting normative content\" capability with this mode too which was the major \"nice-to-have\" we'd been hoping for.)</p>",
        "id": 153996464,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536807736
    },
    {
        "content": "<p>Another option would be to consider a \"develop\" branch where committers can commit directly, and commits would be either manually or automatically (on some gate) merged to master.</p>",
        "id": 153996479,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536808635
    },
    {
        "content": "<p>The challenge there is that every developers commits impact everyone else.  If I push something to the developer branch that breaks building the developer branch, everyone's twiddling their thumbs until that change gets fixed.</p>",
        "id": 153996481,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536808705
    },
    {
        "content": "<p>If everyone has their own branch, they can only break themselves - and are on the hook for fixing themselves.  Only downside would be someone who pushes something and doesn't notice that the build failed.  They think they're done, but their stuff never got migrated.  So we might need to set up something to ping people occasionally (every day?  every week?) if their committed branch is unmerged.</p>",
        "id": 153996483,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536808800
    },
    {
        "content": "<blockquote>\n<p>what if each individual had their own branch (and only one). When you pushed, if the branch built, it would auto-merge</p>\n</blockquote>\n<p>Well, I'll give it a go. but how does it get synced against the master for other people's changes?</p>",
        "id": 153996497,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536812094
    },
    {
        "content": "<p>When you pull, you'd want to pull from the master.  I presumed that was possible, but don't know for sure.</p>",
        "id": 153996500,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536812249
    },
    {
        "content": "<p>Just as a query, what editors are people using?  I use Jetbrains (PyCharm, IntelliJ, etc) and the tooling for creating, pushing, merging and resolving conflicts works pretty well.</p>",
        "id": 153996620,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536840429
    },
    {
        "content": "<p>I think the theory is that CI would help Lloyds case; if he does his work in isolation on a feature branch; pushes the branch to GH, and you have travis-ci running on the PR with merging being blocked until the build passes (on your feature branch), then <code>develop</code> after someone merges the PR will still be stable and working.  Anyone pulling from <code>develop</code> at that time would be guaranteed to have a working branch.  </p>\n<p>Features are aimed at change requests, so for example you'd have a branches called: </p>\n<ul>\n<li><code>feature/forge_101_add_valueset_to_patient</code></li>\n<li><code>fix/forge_102_amend_status_description_for_patient</code></li>\n</ul>\n<p>These branches which would be merged into <code>develop</code> via a PR, that if gated by a status check will prove that the develop branch is always in a working state.  </p>\n<p>When someone takes on a new task (Say FORGE-103), they would: <br>\n1. <code>git checkout develop</code><br>\n2.<code>git pull</code> <br>\n3. <code>git branch feature/forge_103_add_coding_decision_workflow</code> (which creates a copy of develop under the new branch)<br>\n4. <code>git checkout feature/forge_103_add_coding_decision_workflow</code>    <br>\n5. do some work, commit your changes<br>\n6. locally run the build on the feature branch; if it passes, move to the next step - if it doesn't then the issue lies with changes on the branch, which need to be fixed before moving on<br>\n7. <code>git push origin feature/forge_103_add_coding_decision_workflow</code><br>\n8. Create a PR - <em>NOTE</em> GH will warn you if you are out of date so you can mitigate locally before pushing again<br>\n9. Wait for the CI status checks to pass (which they should, because you ran them locally) and then someone will merge into <code>develop</code><br>\n10. Goto 1.</p>\n<p>You can of course replace all of my references to <code>develop</code> by <code>master</code> but the concept remains the same.   Change Requests are tracked by the branch and pull requests.  You could have multiple clones of the repository, and in doing so switch contexts to work on another task while the build is running on the current (ie /dev/fhir1 /dev/fhir2), but that could get confusing fast.  So long as you follow the <code>git pull</code> then <code>git branch</code> you should be able to stay sane as <code>develop</code> in the repository will always be stable; the nightly build would run off the <code>develop</code> branch and per the contract will always be in a working state.</p>\n<p>well, that's the theory</p>",
        "id": 153996625,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536841894
    },
    {
        "content": "<p>I think that theory is exactly what we're doing with git this week (on \"master\" rather than \"develop\") and exactly what seems to be causing some angst.</p>\n<p>The key challenges we're hearing are: 1) extra steps compared with the subversion workflow, and 2) the inability to change branches while actively running a debugger.</p>",
        "id": 153996642,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536846633
    },
    {
        "content": "<p>I think that Lloyd's idea might work.  Each person can create and work with and push from their own 'develop' branch (like 'rhausam-develop').  I think that could be managed locally, and wouldn't necessarily need to be prescribed or enforced (particularly if some committers prefer a different workflow).  If the local master branches are kept clean, then they can always be fast-forward updated (without conflicts) by <code>git pull</code> and then those updates can be merged into the 'develop' branch via <code>git checkout 'local-develop-branch'</code> and <code>git merge master</code>.</p>",
        "id": 153996657,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536849989
    },
    {
        "content": "<p>We lose semanticly meaningful branches (at least for the people who follow this workflow), but we never had it before and it wasn't something we were looking to gain with the transition to Git.  If someone can reflect how to do this properly using TortoiseGit, I'd be willing to apply a couple of change requests to see how it works. :)</p>",
        "id": 153996667,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536850937
    },
    {
        "content": "<p>I use the command line and haven't tried TortoiseGit yet, so I can't help with that.</p>",
        "id": 153996670,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536851163
    },
    {
        "content": "<p>Ok, and is the workflow task based? i.e.  for the next hour I'm fixing one thing, or adding one feature?<br>\nIs the prior development on an rolling HEAD basis - be it master or $(USER)_develop?</p>",
        "id": 153996672,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536851257
    },
    {
        "content": "<p>I'm installing tortoise git, I can try and put some screenshots together and share a document</p>",
        "id": 153996673,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536851287
    },
    {
        "content": "<p>The standard workflow for Grahame, myself and quite a few others is \"I'm fixing a bunch of stuff simultaneously.  Some of it is done and other stuff won't be done for hours or days.  The stuff that's done, I want integrated into the mainline now (because someone's waiting on it).  We don't create different branches for different features because we can only run one build locally and we can't wait for a build to finish before we work on other stuff.</p>",
        "id": 153996683,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536851753
    },
    {
        "content": "<p>For people who only work on one thing at a time and don't mind waiting for a 30-45 minute build to complete before they commit, push and switch, a more traditional workflow is fine.</p>",
        "id": 153996684,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536851792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192121\">@Geoff Low</span> I'm working on <a href=\"https://github.com/HL7/fhir/wiki/Using-TortoiseGit-with-FHIR\" target=\"_blank\" title=\"https://github.com/HL7/fhir/wiki/Using-TortoiseGit-with-FHIR\">this</a> right now, just want to make sure we're not duplicating effort...</p>",
        "id": 153996703,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536852965
    },
    {
        "content": "<p>Cool, I have some examples of creating a PR, followed by a failing status check, and then passing if that helps</p>",
        "id": 153996706,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536853241
    },
    {
        "content": "<p>from <a href=\"https://travis-ci.org/synthetichealth/synthea/jobs/428219650\" target=\"_blank\" title=\"https://travis-ci.org/synthetichealth/synthea/jobs/428219650\">https://travis-ci.org/synthetichealth/synthea/jobs/428219650</a></p>",
        "id": 153996708,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536853330
    },
    {
        "content": "<p>Okay, I've made it to the Pull Request step. I've got a submitted PR, once that's merged to master, I can finish up the \"simplest case\" commit scenario: <a href=\"https://github.com/HL7/fhir/wiki/Using-TortoiseGit-with-FHIR\" target=\"_blank\" title=\"https://github.com/HL7/fhir/wiki/Using-TortoiseGit-with-FHIR\">https://github.com/HL7/fhir/wiki/Using-TortoiseGit-with-FHIR</a></p>",
        "id": 153996738,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536857427
    },
    {
        "content": "<p>Comments welcome on the content, it makes sense to me, but I'm fairly bad at explaining things, I think.</p>",
        "id": 153996740,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536857453
    },
    {
        "content": "<p>I really don't like the notion of having to go to the website to create a pull request.  Why is it hard to do that with tortoise?  (Should also highlight that a Git commit is different than an SVN commit)</p>",
        "id": 153996755,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536858658
    },
    {
        "content": "<p>The TortoiseGit interface just doesn't default the information, so you have to go look it up. It also doesn't provide all the nice Github stuff like being able to request a reivewer, etc.</p>",
        "id": 153996758,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536859060
    },
    {
        "content": "<p>Honestly, for me, Github is what makes Git usable. If I wasn't able to use Github, I wouldn't use Git.</p>",
        "id": 153996759,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536859076
    },
    {
        "content": "<p>Having to go to an external website in order to use source control doesn't sound super-useable to me...</p>",
        "id": 153996763,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536859818
    },
    {
        "content": "<p>You don't have to, it's just easier :)</p>",
        "id": 153996781,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536860919
    },
    {
        "content": "<p>\"Going to an external website is easier\" is an interesting notion of \"useable\"...</p>",
        "id": 153996801,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536862813
    },
    {
        "content": "<p>According to <a href=\"https://tortoisegit.org/docs/tortoisegit/tgit-dug-patch.html#tgit-dug-patch-pullrequest\" target=\"_blank\" title=\"https://tortoisegit.org/docs/tortoisegit/tgit-dug-patch.html#tgit-dug-patch-pullrequest\">https://tortoisegit.org/docs/tortoisegit/tgit-dug-patch.html#tgit-dug-patch-pullrequest</a> - you can create the PR directly from TortoiseGit.</p>\n<p>You then just need to get someone to merge it through the website; although github has a pretty nice API</p>",
        "id": 153996841,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536869437
    },
    {
        "content": "<p>Once it's set up properly, the merging should happen automatically for most things (and for other things, someone else would need to review and do the merge.)</p>",
        "id": 153996844,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536869842
    },
    {
        "content": "<p>once the branch is pushed to GH, anyone can check it out.  So if they need it urgently, so long as you have pushed it they can checkout your working branch locally and carry on; at some point in the future your changes will be merged into the master branch.  But the master/develop branch stays stable, and working</p>",
        "id": 153996845,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536869853
    },
    {
        "content": "<p>Docs look good; Couple of comments:</p>\n<ul>\n<li>what is the vscache used for?</li>\n<li>do you need to mention a <code>git pull</code> before checking out <code>master</code>in the <em>Switch back to master</em> section</li>\n</ul>",
        "id": 153996849,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536870720
    },
    {
        "content": "<p>My intent is to show that pull after the PR is approved, so pulling the feature branch changes that are now in the remote master into your local master, so I was waiting to talk about that until that PR is merged and I can grab the screenshots of that happening.</p>",
        "id": 153996851,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536871469
    },
    {
        "content": "<p>The vscache is the terminology cache the build uses so it doesn't have to expand everything every time.</p>",
        "id": 153996852,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536871519
    },
    {
        "content": "<p>ok, I was referring to the fact that you need to do a git pull after the PR merge; otherwise your changes (plus the merge commit) won't have been retrieved from the remote prior to checkout</p>",
        "id": 153996863,
        "sender_full_name": "Geoff Low",
        "timestamp": 1536876246
    },
    {
        "content": "<p>So, I thought that's what I was saying with this:</p>\n<blockquote>\n<p>NOTE: This means the changes you just made on your feature branch are no longer in your working directory, they are in a pull request that needs to be reviewed and merged into master. Once the change has been merged to the master branch, use \"Pull\" to get those changes into your local repository's master branch.</p>\n</blockquote>\n<p>I'm concerned that either I'm not understanding what you're saying or I haven't explained that well in the documentation. Thoughts?</p>",
        "id": 153997032,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536938595
    },
    {
        "content": "<p>Ok, I misread - the commandline tool just does a checkout (without the pull). From the docs I now see that tortoisegit seems to do a fetch and merge from the <code>origin</code> at the same time.  Please ignore my comment.</p>",
        "id": 153997260,
        "sender_full_name": "Geoff Low",
        "timestamp": 1537135633
    }
]