[
    {
        "content": "<p>My pull request as conflict (in files I didn't (intend to) change) - <a href=\"https://github.com/HL7/fhir/pull/212\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pull/212\">https://github.com/HL7/fhir/pull/212</a></p>\n<p>Conflicting files<br>\ntests/ig30/txCache/all-systems.cache<br>\nvscache/all-systems.cache<br>\nvscache/lang.cache<br>\nvscache/ucum.cache</p>\n<p>I know there's been a large vscache thread today but don't know if this is the same issue or not. </p>\n<p>Any ideas how I fix this? Thanks</p>",
        "id": 154014951,
        "sender_full_name": "Craig Newman",
        "timestamp": 1541112774
    },
    {
        "content": "<p>just revert them</p>",
        "id": 154014953,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541113334
    },
    {
        "content": "<p>Not sure how to do that.</p>",
        "id": 154014954,
        "sender_full_name": "Craig Newman",
        "timestamp": 1541113585
    },
    {
        "content": "<p>I'm using TortoiseGit if that makes a difference</p>",
        "id": 154014955,
        "sender_full_name": "Craig Newman",
        "timestamp": 1541113607
    },
    {
        "content": "<p>I don't know how to revert once you get to the point of seeing a conflict in a pull request - I always select \"resolve conflicts\" and then edit each file - but that requires a situation where it's obvious what edits to make - and for the cache files, I don't know if that's the case...</p>",
        "id": 154014956,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541115620
    },
    {
        "content": "<p>The changes were minimal so I just made a new clone and re-established the changes in ImmunizationRecommmendation. I'm doing the local build now and once that's done, hopefully can just do a new commit and pull request. Do you think that will work? how do I clean up the existing pull request? Do I just click the \"close\" button?</p>",
        "id": 154014959,
        "sender_full_name": "Craig Newman",
        "timestamp": 1541116229
    },
    {
        "content": "<p>see my post here <a href=\"#narrow/stream/138-committers.2Fgit-help/subject/Getting.20rid.20of.20.20vscache.20conflict\" title=\"#narrow/stream/138-committers.2Fgit-help/subject/Getting.20rid.20of.20.20vscache.20conflict\">https://chat.fhir.org/#narrow/stream/138-committers.2Fgit-help/subject/Getting.20rid.20of.20.20vscache.20conflict</a></p>",
        "id": 154014983,
        "sender_full_name": "Eric Haas",
        "timestamp": 1541123478
    },
    {
        "content": "<p>now I'm stuck. I've created a new branch, from master, fully synced, rebuilt the terminology cache, and committed it. here's the PR: <a href=\"https://github.com/HL7/fhir/pull/218\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pull/218\">https://github.com/HL7/fhir/pull/218</a></p>",
        "id": 154015321,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541200422
    },
    {
        "content": "<p>this must overwrite the terminology cache... but git, for some reason I cannot imagine, says that this is a merge conflict.</p>",
        "id": 154015322,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541200448
    },
    {
        "content": "<p>how do I force git to just use my new versions?</p>",
        "id": 154015323,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541200462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> Igit remains a big obstacle to getting work done. I have had some impassioned approaches from the other committers about this.</p>",
        "id": 154015324,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541200508
    },
    {
        "content": "<p>I just pulled your changes and am building it locally now.</p>",
        "id": 154015325,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1541200510
    },
    {
        "content": "<p>and that will help?</p>",
        "id": 154015326,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541200525
    },
    {
        "content": "<p>I see that the PR history merges with other branches. I have no idea why</p>",
        "id": 154015330,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541200918
    },
    {
        "content": "<p>Well, my build won't.  But I stashed my local files so I could avoid the local conflict and pull. If I'm understanding where you are in the process I think you can probably do a force merge?</p>",
        "id": 154015331,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1541200919
    },
    {
        "content": "<p>how do I do that?</p>",
        "id": 154015332,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541200937
    },
    {
        "content": "<p>not sure of the steps with TortoiseGit (if you're using that)<br>\nand I always double check the syntax before doing something like this</p>",
        "id": 154015333,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1541201013
    },
    {
        "content": "<p>I don't have merge conflicts locally. They're on github....</p>",
        "id": 154015334,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541201039
    },
    {
        "content": "<p>yes, I gathered that was your issue</p>",
        "id": 154015335,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1541201055
    },
    {
        "content": "<p>I need to run for a moment and I'll be back in a few minutes</p>",
        "id": 154015336,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1541201098
    },
    {
        "content": "<p>Re: forcing git to use new versions, do you mean on GitHub? You can locally create a new branch off master and updated these files in your new branch, then push and merge into master. You'll see conflicts if the files change in master before you merge.</p>",
        "id": 154015340,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541206796
    },
    {
        "content": "<p>Re: the broader issues, I think the key question is whether we're getting better, as a community.</p>",
        "id": 154015341,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541206847
    },
    {
        "content": "<p><a href=\"https://github.com/HL7/fhir/pulse\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pulse\">https://github.com/HL7/fhir/pulse</a> tells a somewhat encouraging story for this week... But it's obviously tough.</p>",
        "id": 154015342,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541206879
    },
    {
        "content": "<p>We’re not getting happier. As for my PR - I’ve already tried twice, for 6 hours of work. I know what the changes are, and prepared the commit... would have been enough in svn days. That’s the common complaint from committers: things that used to be simple and take a few minutes now take hours of work</p>",
        "id": 154015346,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541207805
    },
    {
        "content": "<p>And tax our ability to deal with complexity. Just another thing we have to deal with</p>",
        "id": 154015348,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541207828
    },
    {
        "content": "<p>My comment about \"force merge\" wasn't really accurate - that doesn't actually exist, but other similar things do.  I think the bottom line is that if GitHub won't allow you to merge (for whatever it's reasons are) then you need to do that locally and then push back up.  You can use Josh's suggestion or other options locally.</p>",
        "id": 154015351,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1541208058
    },
    {
        "content": "<p>It's weird that when a conflict is detected you can't, from the Git website just say \"mine wins\"</p>",
        "id": 154015352,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541208065
    },
    {
        "content": "<p>Obviously you'd need to be cautious about using that sort of thing, but it's sometimes necessary</p>",
        "id": 154015353,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541208106
    },
    {
        "content": "<p>The website doesn't have rich tools for managing conflicts. 6 months ago it did not have any tools for managing conflict. This is a workflow where typically you would handle the merge locally and push once it was handled.</p>",
        "id": 154015354,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541208111
    },
    {
        "content": "<p>Yes, that would be nice to have - and I've seen others complaining about the same thing.</p>",
        "id": 154015355,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1541208144
    },
    {
        "content": "<p>In any event, if we don't feel like things are improving and people don't like the experience, it seems like we should go back to svn.</p>",
        "id": 154015356,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541208191
    },
    {
        "content": "<p>I personally think it would be a disappointing outcome, but hey we tried the experiment.</p>",
        "id": 154015357,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541208215
    },
    {
        "content": "<p>I really liked seeing changes submitted in branches, reviewable and mergeable on their own time, but the usability of the overall system may be too low.</p>",
        "id": 154015358,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541208289
    },
    {
        "content": "<p>I think the build has been more stable and reliable since we made the switch - and that was one of the main goals.</p>",
        "id": 154015359,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1541208366
    },
    {
        "content": "<p>Yes, master has been quite stable. Perhaps even zero broken builds?</p>",
        "id": 154015360,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541208426
    },
    {
        "content": "<p>Yes, I think that's right.  It's always building successfully for me now.</p>",
        "id": 154015361,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1541208476
    },
    {
        "content": "<p>The notion of managing conflicts locally doesn't work well when the gap between creating a PR and being able to merge it is 30-45 minutes (and that's only if you merge as soon as the PR passes).   Also, if I've been working on a change locally for several days (or even over a week), it's not obvious how I merge my changes with the remote master before pushing without switching out of my branch.  Perhaps that should be part of the standard workflow before pushing a change?</p>",
        "id": 154015370,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541211749
    },
    {
        "content": "<p>Re: managing changes locally, you can run tests as part of the normal pull request process and then handle the merge itself locally. I'd be happy to work through this with you and then we could write up instructions.</p>",
        "id": 154015371,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541211857
    },
    {
        "content": "<p>As for the longer term changes, yes a good habit is to keep merging Master into your branch so that he you don't run into conflicts in the first place.</p>",
        "id": 154015372,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541211882
    },
    {
        "content": "<p>Actually, what Josh just said is what I was going to say.  You can do a fresh pull of the master branch and then merge (or possibly rebase) the latest master into your feature branch before you push and generate the PR.  That should avoid the conflicts.</p>",
        "id": 154015373,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1541211989
    },
    {
        "content": "<p>How do I do a pull of the master and merge it into my branch without switching out of my branch?</p>",
        "id": 154015374,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541213208
    },
    {
        "content": "<p>(Preferably using TortoiseGit)</p>",
        "id": 154015375,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541213223
    },
    {
        "content": "<p>\"git fetch\" and \"git merge origin/master\" from the cli... I'm sure there is a nice way to do this in Tortoise</p>",
        "id": 154015376,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541213285
    },
    {
        "content": "<p>So I’m away for the weekend and various restrictions to power access and time mean I can’t finish this pr.. can someone run it to the ground? The changes that matter are the java and XML changes. The cache files... anyone can just delete them before the build, and then commit what they end up with.</p>",
        "id": 154015387,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541225201
    },
    {
        "content": "<p>I don’t really want to go back. The inefficiencies are at least partly because you can’t try to do things the same way with git and it takes time to learn how to navigate the choices. But git is very obnoxious about conflicts in some parts of the workflow... clearly it’s not designed for people who actually use it.</p>",
        "id": 154015388,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541225324
    },
    {
        "content": "<p>I'll run it to the ground, yes:-)</p>",
        "id": 154015402,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541247129
    },
    {
        "content": "<p>Er, I can't do this without help -- the cache currently in master looks totally broken, like, <a href=\"https://github.com/HL7/fhir/blob/master/vscache/all-systems.cache\" target=\"_blank\" title=\"https://github.com/HL7/fhir/blob/master/vscache/all-systems.cache\">https://github.com/HL7/fhir/blob/master/vscache/all-systems.cache</a> starts with:</p>\n<div class=\"codehilite\"><pre><span></span>-------------------------------------------------------------------------------------\n// &lt;30 newlines snipped&gt;\n\n{&quot;hierarchical&quot; : true, &quot;valueSet&quot; :{\n  &quot;resourceType&quot; : &quot;ValueSet&quot;,\n  &quot;compose&quot; : {\n    &quot;include&quot; : [{\n      &quot;system&quot; : &quot;http://snomed.info/sct&quot;\n    },\n    {\n      &quot;system&quot; : &quot;http://loinc.org&quot;\n    },\n    {\n      &quot;system&quot; : &quot;http://www.nlm.nih.gov/research/umls/rxnorm&quot;\n    }]\n  }\n}}\n####\ne: {\n  &quot;valueSet&quot; : {\n</pre></div>\n\n\n<p>Or maybe that's normal?? Are these not json files?</p>",
        "id": 154015403,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541248631
    },
    {
        "content": "<p>Yeah, normal I guess. The build errors are pretty cryptic :)</p>",
        "id": 154015404,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541248695
    },
    {
        "content": "<p>I also see windows-style line endings on these cache files; is that intentional ?</p>",
        "id": 154015405,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541248723
    },
    {
        "content": "<p>Anyway, made these changes and merged 'em (<a href=\"https://github.com/HL7/fhir/pull/220\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pull/220\">https://github.com/HL7/fhir/pull/220</a>)</p>",
        "id": 154015427,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541261278
    },
    {
        "content": "<p>We seem to still be thrashing on these cache files though, <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>. e.g., <span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span> has pull requests that are generating <a href=\"https://github.com/HL7/fhir/pull/222\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pull/222\">conflicts</a> on these cache files. I don't understand how this is supposed to work.</p>\n<p>My understanding was that pretty much only Grahame should eve be pushing changes to cache files; is that right? If so, we should make sure these files aren't generally modified when other people build; if not we should come up with some other strategy for how we're going to avoid conflicts and thrashing on these files.</p>",
        "id": 154015434,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541265632
    },
    {
        "content": "<p>What used to happen with SVN is that conflicts with the cache files would (typically) just merge and we wouldn't have conflicts.  The question is why that's not happening under Git.  Essentially everyone who makes changes to their models has the potential to trigger different terminology needs and thus change cache contents.  When they commit, their changes should merge with whatever's in master.  But that seems to not be happening cleanly.</p>",
        "id": 154015440,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541268846
    },
    {
        "content": "<p>I think in subversion there was never a need to merge... because people were always building on the latest? Or are you saying svn knew how to do merges on this file type (which is... Kind of ad hoc) beyond simple line oriented merge logic?</p>",
        "id": 154015441,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541268984
    },
    {
        "content": "<p>Either way, you're suggesting that everyone reallocate does need to be editing these cache files routinely in their own commits.</p>",
        "id": 154015442,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541269025
    },
    {
        "content": "<p>Which wasn't what I had understood (just my error, most likely)</p>",
        "id": 154015443,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541269049
    },
    {
        "content": "<p>If we want merges to work better on these files, we could define a custom merge driver for whatever the cache file format is (some kind of multipart json thingy).</p>",
        "id": 154015444,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541269374
    },
    {
        "content": "<p>Nobody edits them - they're generated based on data looked up from the terminology server.  Caching the information speeds the builds significantly, so you want the information cached from each individual's build to  be merged into master.  The challenge with having the committers try to manually merge is no committer has a clue what's in the file - they're created by the build process</p>",
        "id": 154015445,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541269614
    },
    {
        "content": "<p>I don't know why we seemed to have less collision issues in SVN</p>",
        "id": 154015446,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541269671
    },
    {
        "content": "<p>I'm just saying that if they're automatically updated in contradictory ways, we could define a custom merge driver that would help git do the right thing (more often).</p>",
        "id": 154015447,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541269732
    },
    {
        "content": "<p>If that's an option, that certainly sounds like something that would be useful</p>",
        "id": 154015448,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541269911
    },
    {
        "content": "<p>It's possible. The major downside is that it would mean supplying a merge program that everyone would have to install and have on their path. Simpler might be to define a cache file format that is more like oriented, so it merges more cleanly by default.</p>",
        "id": 154015449,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541270023
    },
    {
        "content": "<p>Seeing as we generally hit the merge conflict on the Github website, can't we just run it from the online Git?</p>",
        "id": 154015450,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541271497
    },
    {
        "content": "<p>GitHub doesn't currently support running arbitrary binaries in their automated merge process.</p>",
        "id": 154015451,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541271658
    },
    {
        "content": "<p>I don’t understand this - it’s just a text format, and should merge like text. And there shouldn’t be new merge conflicts unless people are not fully synchronised</p>",
        "id": 154015453,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541273033
    },
    {
        "content": "<p>And yes , windows style line endings</p>",
        "id": 154015454,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541273083
    },
    {
        "content": "<p>Lloyd is right. The only time these files change should be when you change something about the terminology is used, and you should commit the result to save other people to time to make the call</p>",
        "id": 154015455,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541273199
    },
    {
        "content": "<p>The \"text format\" includes stuff like json, which doesn't necessarily merge great when treated as pure text.</p>",
        "id": 154015463,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541274105
    },
    {
        "content": "<p>For line endings: do we _want_ windows style line endings on the files? Is that, erm, part of their file format specification?</p>",
        "id": 154015464,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1541274162
    },
    {
        "content": "<p>The snomed, ucum, loinc files I am not referring to, they simply get changed if I build.</p>",
        "id": 154015473,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1541275714
    },
    {
        "content": "<p>Yes but don’t commit them for now. They should stop changing.</p>",
        "id": 154015514,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541304136
    },
    {
        "content": "<p>The txt format won’t ever need to merge inside the json. They merge just fine when they build correctly. I wish java had a mode where depending on the default encoding is an error</p>",
        "id": 154015515,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541304193
    },
    {
        "content": "<p>I have to choose one line ending style so we don’t have line ending merge clashes which would be beyond stupid. So I chose windows style, since some windows text utilities don’t handle Unix style line endings</p>",
        "id": 154015516,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541304289
    },
    {
        "content": "<p>It may be worth mentioning that Git also has facilities for dealing with line endings, which could potentially interfere or interact with other strategies for dealing with them.<br>\n<a href=\"https://help.github.com/articles/dealing-with-line-endings/#platform-all\" target=\"_blank\" title=\"https://help.github.com/articles/dealing-with-line-endings/#platform-all\">https://help.github.com/articles/dealing-with-line-endings/#platform-all</a></p>",
        "id": 154015696,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1541439493
    },
    {
        "content": "<p>We should never let git change line endings on us</p>",
        "id": 154015753,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541449794
    },
    {
        "content": "<p>I know Git has informed me that it was changing line endings when I stashed stuff.  How do I tell it to not mess with line endings?</p>",
        "id": 154015759,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541450620
    },
    {
        "content": "<p>Using a <code>.gitattributes</code> file to configure file types as <code>binary</code> is one option.  However, that could also affect how <code>git diff</code> works, so additional tweaking may be needed.</p>",
        "id": 154015769,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1541454024
    },
    {
        "content": "<p>I get asked when installing git</p>",
        "id": 154015837,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541486190
    }
]