[
    {
        "content": "<p>Question about implementation of HL7v2 ADT feeds in high latency environments. Are there any widely adopted mechanisms to help maintain sequencing of ADT messages when communicating over a WAN?</p>\n<p>I’m trying to work out how to best manage roughly 1.5 million daily ADT messages into my system over a 40 millisecond (round-trip time) environment. Simply waiting for ACK prior to firing off the next message (how I’ve always seen MLLP implemented) seems to be a problem here. Any implementers have any advice to mitigate the impact of high latencies in high volume environments?</p>",
        "id": 231528946,
        "sender_full_name": "Aaron",
        "timestamp": 1616527507
    },
    {
        "content": "<p>Multiple MLLP connections, split by one or more of ( source | destination | mrn mod X |...)?</p>",
        "id": 231541068,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1616532406
    },
    {
        "content": "<p>Thanks. In the past, I've been able to get away with splitting feeds when patients didn't share a common patient ID so we could build isolated feeds that didn't interact with each other. In this case, there is a single source system generating the feed and we haven't identified a safe way to split the feed without the potential for one feed overlapping with another in some way.  </p>\n<p>Moving to multiple feeds will work if we can manage to determine when we are receiving a stale message.</p>",
        "id": 231549566,
        "sender_full_name": "Aaron",
        "timestamp": 1616536253
    },
    {
        "content": "<p>If it is a single source system, wouldn't they have a unique identifier within that system? I have seen implementations where the split was on a simple hash of the identifier. The only issue to solve would be merged patients where there are two valid IDs depending on the time of the message...</p>",
        "id": 231550640,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1616536778
    },
    {
        "content": "<p>Thanks for your responses and thoughts! We were also entertaining the same concept where we split based on some attribute of the patient id and then come up with a mechanism to safely manage merges, moves, etc.</p>",
        "id": 231630520,
        "sender_full_name": "Aaron",
        "timestamp": 1616591520
    },
    {
        "content": "<p>I'm seen folks split feeds based on odd/even MRN and other stable patient-level factors.  If you split the feed based on patient level data, then you don't run into per-patient FIFO issues.  If your feed involves merges, you will need to handle that, but you can send the merge messages on both feeds (if the two patients have different odd/even MRNs, for example).  Bed swaps and other multi-patient messages get trickier.</p>",
        "id": 231634165,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1616592916
    }
]