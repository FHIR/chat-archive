[
    {
        "content": "<p>Hey all, I wrote a validator script in order to ensure that the published files conform to the spec (since I was having trouble parsing some of the files). <a href=\"https://github.com/lazau/scheduling-links-aggregator/tree/main/validator\">https://github.com/lazau/scheduling-links-aggregator/tree/main/validator</a>. Please try it and let me know if it's of any use.</p>",
        "id": 235286723,
        "sender_full_name": "Laza Upatising",
        "timestamp": 1618893794
    },
    {
        "content": "<p>Thanks Laza! BTW did you have a chance to try out the Inferno validator? (I can see the value too of having something lightweight and immediate!)</p>",
        "id": 235364466,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1618932761
    },
    {
        "content": "<p>This looks great!  I'm going through our <a href=\"https://infernotest.healthit.gov/community\">Inferno</a> tests and comparing what you have here.  I <em>love</em> how lightweight this is (Inferno started that way, but has become quite a bit bigger over time to support more and more FHIR-based use cases).</p>",
        "id": 235513316,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1619013138
    },
    {
        "content": "<p>One thing I noticed is that when invoking through the command line (for Mac bash at least), you need to escape the <code>$</code> that is present on all of the URLs.  That tripped me up for a minute.  So you need to put in:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>./validator all https://raw.githubusercontent.com/smart-on-fhir/smart-scheduling-links/master/examples/<span class=\"se\">\\$</span>bulk-publish\n</code></pre></div>\n<p>I shouldn't be surprised by the well defined behavior of my own tools though ;-)</p>",
        "id": 235513645,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1619013247
    },
    {
        "content": "<p>Yeah it took me a long time to develop the habit of single quoting everything when I pass these URLs into curl.</p>",
        "id": 235520884,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1619015798
    },
    {
        "content": "<p>Question on this vs. the Inferno validator — I’ve got a system with some edge-case-y locations that have no associated phone number or URL, and Inferno says I should not have an empty array for <code>telecom</code>. But when I dropped the property, this validator requires it. I <em>think</em> Inferno is correct on that, but wanted to check and make sure.</p>",
        "id": 242674658,
        "sender_full_name": "Rob Brackett",
        "timestamp": 1623716249
    },
    {
        "content": "<p>If you don't have any telecoms, the thing to do in FHIR is to omit the element altogether rather than supplying an empty array. Let me see if I can cite chapter and verse on that...</p>",
        "id": 242674909,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1623716483
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/json.html#xml\">http://build.fhir.org/json.html#xml</a> (\"arrays are never empty\" -- but it's kinda buried ;-)</p>",
        "id": 242675038,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1623716609
    },
    {
        "content": "<p>OK, so that's a bug in <a href=\"https://github.com/lazau/scheduling-links-aggregator/tree/main/validator\">https://github.com/lazau/scheduling-links-aggregator/tree/main/validator</a>, then.</p>",
        "id": 242677171,
        "sender_full_name": "Rob Brackett",
        "timestamp": 1623719031
    },
    {
        "content": "<p>I think the validator is implementing our constraint from <a href=\"https://github.com/smart-on-fhir/smart-scheduling-links/blob/master/specification.md#location-file\">https://github.com/smart-on-fhir/smart-scheduling-links/blob/master/specification.md#location-file</a> that says telecom is required</p>",
        "id": 242678337,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1623720438
    },
    {
        "content": "<p>In your case you can't satisfy the constraint</p>",
        "id": 242678345,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1623720476
    },
    {
        "content": "<p>Sounds like Inferno is failing you as expected -- but let me know if I'm misinterpreting this conclusion <span class=\"user-mention\" data-user-id=\"398591\">@Rob Brackett</span> .  For Inferno, we translated these requirements into FHIR's profiling language, which carries some rules that may not be spelled out in the scheduling links spec.</p>",
        "id": 242682468,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1623725797
    },
    {
        "content": "<p>You could probably get Inferno to pass you by providing a DataAbsentReason in this case.  I don't think that this is of much practical value though -- I can't imagine many clients would be sophisticated enough to look out for that kind of thing for this use case.</p>",
        "id": 242682794,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1623726223
    },
    {
        "content": "<blockquote>\n<p>I think the validator is implementing our constraint from <a href=\"https://github.com/smart-on-fhir/smart-scheduling-links/blob/master/specification.md#location-file\">https://github.com/smart-on-fhir/smart-scheduling-links/blob/master/specification.md#location-file</a> that says telecom is required</p>\n</blockquote>\n<p>Ah, geez, this is another one of those right-in-front-of-my-face moments — after seeing the “must not be present if empty” error from Inferno, I’d been looking at the fact that <code>telecom</code> has cardinality <code>0..*</code> in FHIR proper (<a href=\"http://hl7.org/fhir/location.html\">http://hl7.org/fhir/location.html</a>) + the text that phone and URL <em>should</em> be set in SMART Scheduling Links, but totally overlooked the <code>Y</code> in the required column right next to it. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 242684131,
        "sender_full_name": "Rob Brackett",
        "timestamp": 1623728136
    },
    {
        "content": "<p>So between the fact that arrays should never be empty and the fact that <code>telecom</code> is required for SMART Scheduling Links, it might be helpful to note in the description column of the table of location properties that the <code>telecom</code> array SHALL have at least one contact point. I can make a PR for that if I’ve got the interpretation correct here.</p>",
        "id": 242684456,
        "sender_full_name": "Rob Brackett",
        "timestamp": 1623728711
    },
    {
        "content": "<blockquote>\n<p>Sounds like Inferno is failing you as expected</p>\n</blockquote>\n<p>Yeah, it seems to be.</p>\n<p>I think the end result here is that I was just getting twisted up in the subtlety that, because <code>telecom</code> is required and empty arrays aren’t allowed, the spec is essentially requiring <em>at least one</em> telecom contact point, but doesn’t say that directly. (If I had any complaint about Inferno here, it might be that I’d prefer a message about that (must have at least one entry) rather than the message that the property shouldn’t be present if it’s an empty array and a different message that it must be present once I’ve omitted it to satisfy the earlier error.)</p>",
        "id": 242685931,
        "sender_full_name": "Rob Brackett",
        "timestamp": 1623730653
    },
    {
        "content": "<blockquote>\n<p>it might be helpful to note in the description column of the table of location properties that the telecom array SHALL have at least one contact point. I can make a PR for that if I’ve got the interpretation correct here.</p>\n</blockquote>\n<p>this was our interpretation as well, and I don't see much harm reflecting this requirement (if valid) in the description because the extra 'should' language for url/phone obscures things a bit.</p>",
        "id": 242729788,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1623762780
    },
    {
        "content": "<p>In theory, in the <code>'telecom': []</code> case, Inferno should provide two errors, one like \"Location.telecom: minimum required = 1, but only found 0\", and one like \"Location.telecom: Array cannot be empty - the property should not be present if it has no values\".  This isn't a big deal, but I'm curious if we only presented the second error in this case.</p>",
        "id": 242731735,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1623763668
    },
    {
        "content": "<p>Thanks for the feedback about the error messages, it's very helpful for us to know what people find confusing.</p>",
        "id": 242732301,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1623763901
    },
    {
        "content": "<p>Thanks also for the feedback on the spec! Would be happy to take a PR clarifying this point.</p>",
        "id": 242734161,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1623764645
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> Added a PR at <a href=\"https://github.com/smart-on-fhir/smart-scheduling-links/pull/47\">https://github.com/smart-on-fhir/smart-scheduling-links/pull/47</a></p>\n<p><span class=\"user-mention\" data-user-id=\"406044\">@Laza Upatising</span> I think that still leaves an issue on your validator that it allows <code>telecom</code> to be an empty array, when it should actually have at least one entry.</p>",
        "id": 242777023,
        "sender_full_name": "Rob Brackett",
        "timestamp": 1623781426
    },
    {
        "content": "<p>Fixed, thanks for the heads up!</p>\n<p>There are a bunch of other arrays being validated without the non-empty requirement. Reading <a href=\"https://github.com/smart-on-fhir/smart-scheduling-links/pull/47#issue-670638023\">https://github.com/smart-on-fhir/smart-scheduling-links/pull/47#issue-670638023</a> implies that all arrays cannot be empty - I'll need to update the validator to enforce these rules on other arrays too (e.g. \"Location.identifier\", \"Schedule.serviceType\", \"Schedule.serviceType.coding\").</p>\n<p>Actually, this brings up another question. If JSON arrays are never allowed to be empty, what's the requirements around the \"extension\" field in both Schedule and Slot files? Reading between the lines in the spec, it seems like the intent is to make these fields optional 'extensions', but the non-empty requirement means at least one extension must be provided?</p>",
        "id": 242781693,
        "sender_full_name": "Laza Upatising",
        "timestamp": 1623783242
    },
    {
        "content": "<p>Actually, replying to myself: it seems like if the field is not named we can bypass the non-empty requirement altogether. So only when a field is named is the non-empty requirement applied. Sorry for the confusion!</p>",
        "id": 242783032,
        "sender_full_name": "Laza Upatising",
        "timestamp": 1623783769
    },
    {
        "content": "<p>You figured this out in your follow-up, but just to confirm:  when we say \"non-empty\" this just means \"if you have no extensions, omit the <code>extension</code> property altogether instead of writing <code>\"extension\": []</code>. If all the extensions are optional on a given resource, omitting the <code>extension</code> property is fine.</p>",
        "id": 242783622,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1623784036
    },
    {
        "content": "<p>Thank you for the clarification. I will add another validation rule around disallowing empty arrays (<code>\"extension\": []</code> will yield a validation error), suggesting that implementers should just omit the field altogether.</p>",
        "id": 242783989,
        "sender_full_name": "Laza Upatising",
        "timestamp": 1623784206
    },
    {
        "content": "<p>Validator updated with new rules. Please @ me if you see unexpected results.</p>",
        "id": 242817005,
        "sender_full_name": "Laza Upatising",
        "timestamp": 1623803757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406044\">@Laza Upatising</span> I only just noticed today that the validator requires Ruby 3+ (it crashes on bad dates in Ruby 2). Might be helpful to check <code>RbConfig::CONFIG[\"MAJOR\"]</code> or something and warn users on Ruby 2 at the start of the script.</p>",
        "id": 243564517,
        "sender_full_name": "Rob Brackett",
        "timestamp": 1624388876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406044\">@Laza Upatising</span> Also noticed the validator does not support the has-availability extension (from here: <a href=\"https://github.com/smart-on-fhir/smart-scheduling-links/blob/master/specification.md#describe-unknown-availability-capacity-or-slot-times\">https://github.com/smart-on-fhir/smart-scheduling-links/blob/master/specification.md#describe-unknown-availability-capacity-or-slot-times</a>). I get an error message like:</p>\n<div class=\"codehilite\"><pre><span></span><code>unrecognized field value &#39;http://fhir-registry.smarthealthit.org/StructureDefinition/has-availability&#39;. Must be one of [&quot;http://fhir-registry.smarthealthit.org/StructureDefinition/vaccine-product&quot;, &quot;http://fhir-registry.smarthealthit.org/StructureDefinition/vaccine-dose&quot;]\n</code></pre></div>",
        "id": 245081619,
        "sender_full_name": "Rob Brackett",
        "timestamp": 1625596943
    },
    {
        "content": "<p>Looks like it’s also marking <code>position</code> as required for locations.</p>",
        "id": 245083567,
        "sender_full_name": "Rob Brackett",
        "timestamp": 1625597874
    },
    {
        "content": "<p>Thanks for the reports <span class=\"user-mention\" data-user-id=\"398591\">@Rob Brackett</span>. I've fixed the 'has-availability' and <code>position</code> issues. I was unable to reproduce the Ruby 3 issue though. The only Date parsing code is in validator_lib.rb in the <code>iso8601_validator</code> method, which works in both Ruby 2 and 3. Let me know how I can reproduce it and I'll make the fix.</p>",
        "id": 247047935,
        "sender_full_name": "Laza Upatising",
        "timestamp": 1627088163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406044\">@Laza Upatising</span> Took another look at this and the issue is &lt; 2.7, not &lt; 3.0! Specifically, in 2.6 and earlier, <code>DateTime.iso8601</code> raises <code>ArgumentError</code> for an unparseable string, but you’re only catching <code>Date::Error</code>, which is what 2.7+ raises: <a href=\"https://github.com/lazau/scheduling-links-aggregator/blob/8072ab740f0ff057379dfae9785893c35f33193a/validator/validator_lib.rb#L851-L853\">https://github.com/lazau/scheduling-links-aggregator/blob/8072ab740f0ff057379dfae9785893c35f33193a/validator/validator_lib.rb#L851-L853</a></p>",
        "id": 247405011,
        "sender_full_name": "Rob Brackett",
        "timestamp": 1627427730
    },
    {
        "content": "<p>(I had been on 2.6.5, I think)</p>",
        "id": 247405096,
        "sender_full_name": "Rob Brackett",
        "timestamp": 1627427771
    }
]