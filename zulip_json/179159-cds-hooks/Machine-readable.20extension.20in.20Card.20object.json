[
    {
        "content": "<p>I am wondering if anyone has had a use-case where machine-readable information needs to be returned by the CDS Service to be consumed by the backend (or a rich frontend library) to make more elaborate workflow decisions. We have a use-case in which we want to potentially carry instructions in a Card to direct the client how to render a patient's information (e.g., mask some fields) or instruct the client to take one path or another from a workflow (e.g.,  do not include this patient in a list).<br>\nThe Card data structure seems to be designed very tightly coupled to be consumed by the UI so I'm wondering if anyone has implemented a use-case like this with CDS hooks and how they modeled the Card object. <br>\nWe're currently thinking of an extension to the Card object where, similar to the case of <code>context</code> in the request, a free-formed object can be returned and consumed by the client.</p>",
        "id": 186550739,
        "sender_full_name": "Mohammad Jafari",
        "timestamp": 1579915402
    },
    {
        "content": "<p>We didn't do that exact use case, but we did want to return additional structured data to the client.  In our use case, the CDS was backed by CQL and we wanted to return some of the direct CQL values as well.  We used extensions.  The spec actually has a section indicating that this is a permissible way to handle such a thing.  See: <a href=\"https://cds-hooks.hl7.org/1.0/#extensions\" target=\"_blank\" title=\"https://cds-hooks.hl7.org/1.0/#extensions\">https://cds-hooks.hl7.org/1.0/#extensions</a></p>\n<p>In our case, we put extensions on the discovery response and the card responses.  As the spec suggests, we \"precoordinated\" what the extensions would be with the client via supplemental documentation.</p>",
        "id": 186552984,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1579918987
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"191920\">@Mohammad Jafari</span> , I'll second Chris' recommendation of using extensions.</p>",
        "id": 187030232,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1580418190
    },
    {
        "content": "<p>Could you also better explain your workflow? I'd question if it really makes sense to standardly model this type of really specific and (as you say) elaborate UI guidance (which is why extensions make sense). FHIR is our payload data model in CDS Hooks. \"Masking a patient's info\" would be done with something like Consent resource, and I'd think that excluding a patient from a list would be updating a List resource.  Notably, in FHIR these wouldn't be about the UI, but rather about the logic that governs the UI.</p>",
        "id": 187030236,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1580418192
    }
]