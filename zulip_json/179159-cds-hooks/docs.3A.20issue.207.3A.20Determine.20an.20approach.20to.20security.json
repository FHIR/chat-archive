[
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/7#issuecomment-267753284\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/7#issuecomment-267753284\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/7\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/7\">issue 7</a></p>\n<blockquote>\n<p>In previous conversations, we have said that the CDS service should have the same access privileges as the current practitioner. Thus, the FHIR data the CDS service is able to retrieve should be only the data the current practitioner has privileges to retrieve. I confirmed this with two physicians that I work with at Cerner.</p>\n<p>Given this, this precludes us from using the <a href=\"http://docs.smarthealthit.org/authorization/backend-services/\" target=\"_blank\" title=\"http://docs.smarthealthit.org/authorization/backend-services/\">SMART Backend Services</a> model or what is commonly referred to as B2B tokens. This is because this security model does not contain the notion of a user and thus the token is not scoped to the privileges/authorization of the current practitioner. Additionally, B2B tokens are scoped to the entire patient population but a more appropriate and secure model for a CDS Hooks invocation would be scoped to the current patient in context.</p>\n<p>This leads us to using OAuth 2 access tokens with an embedded practitioner (and the current patient in context). Effectively, the same tokens obtained by a SMART app during an embedded launch.</p>\n<p>I agree with <span class=\"user-mention\" data-user-email=\"isaacvetter@gmail.com\">@Isaac Vetter</span> that we should use consistent field names between SMART and CDS Hooks; <code>access_token</code>, <code>expires_in</code>, and <code>token_type</code> (always <code>Bearer</code>). I think we should return <code>scope</code> too.</p>\n<p>To ensure proper auditing, I think each CDS service should have it's own client id. This allows the EHR to track each FHIR access with the calling CDS service. As such, this means that each CDS service will have a distinct access token.</p>\n<p>For performance reasons, we have also previously discussed the EHR managing the creation, lifecycle, and management of these access tokens and provide them to the CDS services upon each hook invocation. I'm fine exploring this strategy to see how it works.</p>\n<hr>\n<p>I've had informal conversations with some on data or event-based CDS Service invocations (as opposed to the current user-invoked hooks). In this scenario there is no practitioner in context causing the CDS service to be invoked and thus will necessitate a different security model. In this case I believe we do need to leverage the SMART Backend service / B2B model. Additionally, I do not think it is necessary for the EHR to manage the OAuth access tokens in this case. I call this out here just for completeness but we'll handle/discuss this on a separate issue when we broach this topic more formally.</p>\n</blockquote>",
        "id": 153863865,
        "sender_full_name": "Github Notifications",
        "timestamp": 1481967384
    },
    {
        "content": "<p>jmandel <a href=\"https://github.com/cds-hooks/docs/issues/7#issuecomment-267783679\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/7#issuecomment-267783679\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/7\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/7\">issue 7</a></p>\n<blockquote>\n<p>Going back to the original two goals...</p>\n<p>I think  the discussion here is focused on (1), which is to say: how the CDS Service should authenticate itself to the EHR. If the EHR just passes the <code>access_token</code> (and <code>expires_in</code>, etc) along to the service at launch time, this works — though it's worth saying that it relies entirely on a service's SSL certificate (https URL) for security, similar to a public client app in SMART's EHR launch flow. We *could* give the client an opportunity to authenticate *before* it receives a token, e.g. by passing the service a <code>launch</code> id (which gets traded for a token in an authenticated call) rather than a ready-to-go access token at invocation time. This is a security design decision; we'd want to understand our threat model and choose accordingly.</p>\n<p>For (2), which is to say \"how the EHR authenticates to the service\", I think my assessment back in 3/2016 was wrong, or incorrectly written. This is a use case where the Backend Service flow (with the ERH as the client and the CDS Service as the server!) would work.</p>\n</blockquote>",
        "id": 153863893,
        "sender_full_name": "Github Notifications",
        "timestamp": 1482004950
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/cds-hooks/docs/issues/7#issuecomment-272658801\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/7#issuecomment-272658801\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/7\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/7\">issue 7</a></p>\n<blockquote>\n<blockquote>\n<p>how [should] the CDS Service authenticate itself to the EHR? <br>\n(1) relies entirely on a service's SSL certificate (https URL) for security, similar to a public client in SMART's EHR launch flow. <br>\nor <br>\n(2) pass the service a launch id ... rather than a ready-to-go access token at invocation time. <br>\nTechnically, either approach works; this is a security design decision</p>\n</blockquote>\n<p>I think that the EHR providing a launch token, instead of an access token in the cds request, is prohibitively expensive in terms performance. </p>\n<p>Also, if the launch token was somehow determined to be invalid by the OAuth server, the cds-service doesn't have the option of presenting a login screen to the user. </p>\n<p>It seems clear to me that the EHR should provide an access token as part of the cds request to the cds-service. </p>\n<blockquote>\n<p>For (2), which is to say \"how the EHR authenticates to the service\", I think my assessment back in 3/2016 was wrong, or incorrectly written. This is a use case where the Backend Service flow (with the ERH as the client and the CDS Service as the server!) would work.<br>\n<img alt=\"👍\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/unicode/1f44d.png\" title=\"👍\"> </p>\n</blockquote>\n</blockquote>",
        "id": 153867082,
        "sender_full_name": "Github Notifications",
        "timestamp": 1484433709
    },
    {
        "content": "<p>kpshek closed <a href=\"https://github.com/cds-hooks/docs/issues/7\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/7\">issue 7</a></p>",
        "id": 153867142,
        "sender_full_name": "Github Notifications",
        "timestamp": 1484438031
    }
]