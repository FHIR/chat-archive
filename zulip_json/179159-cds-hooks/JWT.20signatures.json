[
    {
        "content": "<p>Quick note from bulk data track this weekend: <span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span> noted that in .NET, the standard libraries didn't support RS-384 signatures (but did, for example, support RS-256). Has anyone else run into this?</p>",
        "id": 154003964,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1538419757
    },
    {
        "content": "<p><a href=\"https://jwt.io/\" target=\"_blank\" title=\"https://jwt.io/\">https://jwt.io/</a> has the list of all the supported JWT encodings, and it says that it does support that...? maybe a newer version than last checked?</p>",
        "id": 154004297,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1538448444
    },
    {
        "content": "<p>(That being said, I have only used the Jose.Jwt lib with RS-256)</p>",
        "id": 154004299,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1538448595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> We have observed the same restriction in the .NET standard libraries. It is also not possible to update to the latest library without upgrading to a different Owin version. So for now we are also just supporting RS-256.</p>",
        "id": 154004502,
        "sender_full_name": "Chuck Feltner",
        "timestamp": 1538488369
    },
    {
        "content": "<p>(To be clear, Michele was able to work around and generate RS384 signatures, but it wasn't as straightforward as he had hoped.)</p>",
        "id": 154004657,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1538492967
    },
    {
        "content": "<p>I was using <a href=\"https://www.nuget.org/packages/System.IdentityModel.Tokens.Jwt\" target=\"_blank\" title=\"https://www.nuget.org/packages/System.IdentityModel.Tokens.Jwt\">https://www.nuget.org/packages/System.IdentityModel.Tokens.Jwt</a> - and even using the latest version I was not able to sign using RS384 (but maybe I missed something?)</p>",
        "id": 154004689,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1538494393
    },
    {
        "content": "<p>The work-around was to build the JWT header and payload manually and sign them using the standard .NET crypto libraries - that do support RS384</p>",
        "id": 154004690,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1538494471
    },
    {
        "content": "<p>This was working on a client. For the server we currently use IdentityServer3 that does not seem to support RS384, so our current backend authentication implementation uses RS265 (but it is an area where we have to do some more investigations)</p>",
        "id": 154004694,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1538494599
    }
]