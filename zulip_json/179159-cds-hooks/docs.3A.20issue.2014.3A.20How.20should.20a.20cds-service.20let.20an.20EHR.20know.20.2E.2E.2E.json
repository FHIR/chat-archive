[
    {
        "content": "<p>isaacvetter opened <a href=\"https://github.com/cds-hooks/docs/issues/14\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/14\">issue 14</a></p>\n<blockquote>\n<p>How should a cds-service let an EHR know about errors? </p>\n<p>Following RESTful best practices, HTTP error statuses returned by a cds-service to an EHR when appropriate:  <br>\n- 403 Forbidden for authnz failures<br>\n- 503 Method not Allowed for incorrect HTTP method</p>\n<p>For business-logic type errors, it might make sense for the service to return a 500 containing a FHIR <a href=\"https://www.hl7.org/fhir/operationoutcome.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/operationoutcome.html\">OperationOutcome </a>with values from the FHIR <a href=\"https://www.hl7.org/fhir/valueset-issue-type.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/valueset-issue-type.html\">IssueType valueset</a>, but further constrained.</p>\n</blockquote>",
        "id": 153863161,
        "sender_full_name": "Github Notifications",
        "timestamp": 1481575955
    },
    {
        "content": "<p>Sorry but Zulip didn't take my post before. Is there any specification / discussion on returning feedback from CARDs back to CDS Service? An example would be confirmation of allowing a patient to be added to a study where the CDS Service manages the study enrollement.</p>",
        "id": 153863771,
        "sender_full_name": "David Taylor",
        "timestamp": 1481915999
    },
    {
        "content": "<p>David - We defined an <a href=\"http://cds-hooks.org/#analytics\" target=\"_blank\" title=\"http://cds-hooks.org/#analytics\">analytics endpoint</a> which is similar to what you're asking (the EHR providing feedback back to the CDS service on interactions with the card). However, in the example you cited, where is the user being added to a study? Is the EHR adding the user to the study or is the user interacting with a SMART app to do this?</p>",
        "id": 153863820,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1481946509
    },
    {
        "content": "<p>Neither -  the CDS Servce is what adds a patient in this case to a study - manged outside the EHR.</p>",
        "id": 153863821,
        "sender_full_name": "David Taylor",
        "timestamp": 1481946584
    },
    {
        "content": "<p>So when the CDS Service triggers the creation of a card, it automatically adds the patient to a study?</p>",
        "id": 153863822,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1481946624
    },
    {
        "content": "<p>Nope, it first needs acceptance from the Provider. An example: Provider orders medication, CDS determines that qualifies a Patient, Provider is prompted from the alert (card) to confirm and then I need that confirmation back to add them to the study</p>",
        "id": 153863823,
        "sender_full_name": "David Taylor",
        "timestamp": 1481947035
    },
    {
        "content": "<p>Ah</p>",
        "id": 153863824,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1481947054
    },
    {
        "content": "<p>in this case the CDS system is outside of the EHR control - invoked by the EHR but managed by seperate groups / organizations</p>",
        "id": 153863825,
        "sender_full_name": "David Taylor",
        "timestamp": 1481947086
    },
    {
        "content": "<p>Sure</p>",
        "id": 153863826,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1481947106
    },
    {
        "content": "<p>CDS cards are JSON so they don't contain execute logic/arbitrary code by the CDS service. This prevents the type of interaction that you're asking for.</p>",
        "id": 153863827,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1481947153
    },
    {
        "content": "<p>Today, all state changes from the card itself are via 'suggestions' which are in the form of FHIR resources (like adding a new medication or removing an medication).</p>",
        "id": 153863828,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1481947231
    },
    {
        "content": "<p>Right - that is why this is a challenge for the type of CDS interactions we have had in the past and for this to meet our needs</p>",
        "id": 153863829,
        "sender_full_name": "David Taylor",
        "timestamp": 1481947266
    },
    {
        "content": "<p>A possible way to satisfy your use case is for the CDS card to return a link that says something like \"Click here to enroll the patient in this study\". This link would be handled by the CDS service and would serve as your acceptance/confirmation</p>",
        "id": 153863830,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1481947346
    },
    {
        "content": "<p>This assumes a very tight coupling with the EHR and a very limited role for the CDS system, which might be fine for most users perspectives but for my needs I need more flexiblity - maybe it needs to be more of a drive to a SMART app that is more interactive</p>",
        "id": 153863831,
        "sender_full_name": "David Taylor",
        "timestamp": 1481947355
    },
    {
        "content": "<p>Yes, our intention is to serve up SMART apps from cards where more interaction or sophisticated logic is desired.</p>",
        "id": 153863832,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1481947397
    },
    {
        "content": "<p>so does the link need to be to a smart service or can it be to a general restful service?</p>",
        "id": 153863833,
        "sender_full_name": "David Taylor",
        "timestamp": 1481947416
    },
    {
        "content": "<p>The link doesn't need to be a SMART app -- it could be a generated link with some unique identifier that indicates to you the patient/provider in context and the study they are being enrolled in</p>",
        "id": 153863834,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1481947478
    },
    {
        "content": "<p>For example, when you register for a new account on a website and get an email with a confirmation link to confirm your email address (which completes your account creation). This link is generated with some UUID that upon doing a GET to that link (eg, clicking on it), it confirms some state.</p>",
        "id": 153863835,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1481947558
    },
    {
        "content": "<p>that is great news - sorry I haven't had a lot of time yet looking this over so thanks for clarifying that. So the response card would be a Link with instructions to click the link for accepting? That would work - thank you for clarifying</p>",
        "id": 153863837,
        "sender_full_name": "David Taylor",
        "timestamp": 1481947743
    },
    {
        "content": "<p>No problem, I'm happy to help!</p>",
        "id": 153863838,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1481947767
    },
    {
        "content": "<p>After you think through your scenario more with this possible solution, let me know if this will indeed work</p>",
        "id": 153863839,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1481947807
    },
    {
        "content": "<p>Will do - btw, swagger is a great choice for documenting your API. </p>",
        "id": 153863840,
        "sender_full_name": "David Taylor",
        "timestamp": 1481947884
    },
    {
        "content": "<p>thanks for helping me so late as well</p>",
        "id": 153863841,
        "sender_full_name": "David Taylor",
        "timestamp": 1481947903
    },
    {
        "content": "<p>Thanks! I think you're one of a couple people I've heard actually use the Swagger API. Glad to hear it's getting some use</p>",
        "id": 153863842,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1481947930
    },
    {
        "content": "<p>Swagger got plenty of endorsement from users at DevDays in Amsterdam</p>",
        "id": 153863863,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481955095
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/14#issuecomment-267754318\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/14#issuecomment-267754318\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/14\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/14\">issue 14</a></p>\n<blockquote>\n<p><span class=\"user-mention\" data-user-email=\"isaacvetter@gmail.com\">@Isaac Vetter</span> - Are there particular scenarios or use cases that prompted you to raise this question?</p>\n<p>I would imagine the CDS service should return standard HTTP error codes when appropriate. I hadn't thought of the need to explicitly call this our in our spec for CDS services.</p>\n<p>Regarding the 'business-logic' errors, what would the EHR do with these errors? This question likely goes back towards the scenarios/use cases that you are thinking of.</p>\n<p>Related to this discussion, an outstanding/unresolved question I've had is what expectations should be placed on the EHR to indicate CDS service invocation failures _or_ timeouts? This question can be framed both around error and SLA expectations. I don't know that we need strong requirements around this but instead could provide acknowledge and perhaps guidance on how this can be handled.</p>\n</blockquote>",
        "id": 153863866,
        "sender_full_name": "Github Notifications",
        "timestamp": 1481968769
    },
    {
        "content": "<p>Just want to add that it would be relatively trivial to build a simple SMART app around the “click link to enroll” use case. This would be a SMART app that, on button click, talks to <span class=\"user-mention\" data-user-id=\"192651\">@David Taylor</span> 's backend via whatever means necessary and would display the result of enrollment.</p>",
        "id": 153864544,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1482311686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192651\">@David Taylor</span> , <span class=\"user-mention\" data-user-id=\"191339\">@Pascal Pfiffner</span> , <span class=\"user-mention\" data-user-id=\"191355\">@Kevin Shekleton</span>  -- what about the cds-service returning a (currently very draft) ResearchSubject FHIR object? </p>",
        "id": 153867089,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1484434050
    },
    {
        "content": "<p>Honestly I've been dealing with recursive java marshaling issues this afternoon with both dstu2 and 3 - StringType derives from Elemement which has a StringType id field</p>",
        "id": 153867090,
        "sender_full_name": "David Taylor",
        "timestamp": 1484434148
    },
    {
        "content": "<p>I'm stuck with marshaling issues - both dstu2 and 3 - anyone able to use JAXB wth HapiFhir at all or know how to replace spring marshlaing with Stax (which looks like the only way forward) Defaults to Jackson which solves everything with annotations only. Example: dtsu3: StringType -&gt; ....Element which has StringType id</p>",
        "id": 153867093,
        "sender_full_name": "David Taylor",
        "timestamp": 1484434316
    },
    {
        "content": "<p>olbrich <a href=\"https://github.com/cds-hooks/docs/issues/14#issuecomment-272660455\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/14#issuecomment-272660455\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/14\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/14\">issue 14</a></p>\n<blockquote>\n<p>@kpshek I think there should also be explicit thought about what happens when a CDS service is offline, down for maintenance, or otherwise unavailable.  Some sort of graceful degradation would be ideal.</p>\n</blockquote>",
        "id": 153867105,
        "sender_full_name": "Github Notifications",
        "timestamp": 1484435620
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/14#issuecomment-272661277\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/14#issuecomment-272661277\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/14\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/14\">issue 14</a></p>\n<blockquote>\n<p>@olbrich - I think we can use RESTful conventions of standard HTTP error code for this particular use case. For instance, in the case of a CDS service down for maintenance, I think the CDS service can simply return a <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\" target=\"_blank\" title=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">503 status</a>:</p>\n<blockquote>\n<p>The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.</p>\n</blockquote>\n<p>I call this out because I don't think it's necessary to add any additional fields to the response of the CDS service.</p>\n<p>The next (and more important question) is how should the EHR handle this scenario when it occurs? This is where I'm unsure if this is something we can handle in the spec. Instead, I'm thinking we should perhaps create an implementation or best practices guide that calls out these scenarios to raise visibility and provide examples of how they should be dealt with. The reason why I'm thinking this is because the nature of the CDS service and it's importance to the organization's workflow/business will determine how the EHR should handle failures such as this.</p>\n</blockquote>",
        "id": 153867116,
        "sender_full_name": "Github Notifications",
        "timestamp": 1484436488
    },
    {
        "content": "<p>Btw, I've channeled my frustration into some CDS Hooks parsers extending from Jame's Stax based parsers. If anyone is interested, I'll share them up on github later in the week. They will need to be overridded to handle specific Prefetch, Create, Delete objects if other than array's of Fhir IBaseResource objects.</p>",
        "id": 153867199,
        "sender_full_name": "David Taylor",
        "timestamp": 1484494326
    },
    {
        "content": "<p>Thanks, David!</p>",
        "id": 153867201,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1484494350
    }
]