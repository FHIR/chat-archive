[
    {
        "content": "<p>I've been thinking there might be a good way to apply a filter to a CDS Hook (and other event-driven use cases).  The technique used by subscription is not event-driven.  Subscription allows a specifying \"Criteria=a search criteria\".  Of course a search criteria is by definition, searching over the database for matching records.  This isn't what often needs done.  Often, we have the data already and need to find the matching Hooks (or Subscriptions even).</p>",
        "id": 153868119,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1484760638
    },
    {
        "content": "<p>What makes more sense for an event-driven model is something that a rules engine would use...pattern matching.  This could be something like \"code=123\".  This is different than \"Observation?code=123\" because the first is a property on a resource I already have identified and the second is an expression of resources I havent' identified.</p>",
        "id": 153868120,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1484760881
    },
    {
        "content": "<p>There is a form of pattern matching that is already defined in the spec that could be very well suited for this operation...a Profile.  A profile of course is a set of rules that an already idenitified resource abides by.  For example, if I wanted to write a CDS Hook with a focus on smoking status, I could simply say in my Hook definition \"Profile=daf-smokingstatus\".  </p>",
        "id": 153868121,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1484761248
    },
    {
        "content": "<p>In your daf-smokingstatus profile example, are you trying to only have your CDS service invoked when you know the patient is a smoker?</p>",
        "id": 153868125,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1484761444
    },
    {
        "content": "<p>Slightly more general, in that example, it would just be a patient with a known smoking status</p>",
        "id": 153868126,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1484761486
    },
    {
        "content": "<p>It might be more valuable to have a cds-hooks service only when the smoking status is known, and \"true\"</p>",
        "id": 153868127,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1484761520
    },
    {
        "content": "<p>So in that case, a new profile would be needed that logically extended daf-smokingstatus, something like my-daf-smoker</p>",
        "id": 153868128,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1484761558
    },
    {
        "content": "<p>but this allows the cds-hooks service and the cds-hooks engine to share an agreement of what \"matches\" before hand, and also allows the cds-hooks engine (or backing EHR) to pre-calculate the matching operation and save it as a profile claim on the resource.</p>",
        "id": 153868129,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1484761650
    },
    {
        "content": "<p>so filtering becomes an O(1) operation in the cds-hooks engine</p>",
        "id": 153868130,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1484761683
    },
    {
        "content": "<p>I'm still thinking through the implications of all of this</p>",
        "id": 153868131,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1484762205
    },
    {
        "content": "<p>I agree we could do many filtering use cases through profile matching</p>",
        "id": 153868132,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1484762231
    },
    {
        "content": "<p>I'm just not sure a generic method using profiles would be best. There is also FHIRPath (or CQL) which provides generic methods of qualifying on a desired data set</p>",
        "id": 153868134,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1484762377
    },
    {
        "content": "<p>All of those bring with it considerable implementation complexities. I'm not saying those aren't ultimately the right thing to do, but they haven't seen widespread implementation (partly due to the complexity/cost IMHO).</p>",
        "id": 153868135,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1484762453
    },
    {
        "content": "<p>To be fair, I haven't spent a lot of time thinking through ways to implement all of this but I'm happy to hear you're thinking through options, Travis!</p>",
        "id": 153868136,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1484762542
    },
    {
        "content": "<p>Perhaps it would help to solicit feedback &amp; concrete use cases on filtering that would be desired *today* by the current CDS services in production (not via CDS Hooks) or those planned in the near future. From those, we can see if there is a simple approach that we could employ or something more generic that would cover the things desired today as well as those that may come up in the future</p>",
        "id": 153868137,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1484762665
    },
    {
        "content": "<p>Btw, we have a Github issue for this: <a href=\"https://github.com/cds-hooks/docs/issues/6\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/6\">https://github.com/cds-hooks/docs/issues/6</a></p>",
        "id": 153868138,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1484762675
    },
    {
        "content": "<p>One of the benefits/draw of CDS Hooks is its simplicity so I would like to keep that goal in mind here too. Travis, your profile proposal may turn out to be that, I just need to play around with things further (including profiles)</p>",
        "id": 153868139,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1484762745
    },
    {
        "content": "<p>I think we could have a pretty simple *optional* execution model where you list <code>(resource, fhirpath )</code> tuples and the EHR can use them as a trigger guard, only calling your service if your expressions return true. like:</p>\n<div class=\"codehilite\"><pre>{\n  &quot;triggerGuard&quot;: [{\n    &quot;for&quot;: &quot;Patient/{{patient}}&quot;,\n    &quot;require&quot;: &quot;Patient.name.given.exists()&quot;\n  }]\n}\n</pre></div>",
        "id": 153868140,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1484763053
    },
    {
        "content": "<p>if somebody was interested in exploring this...</p>",
        "id": 153868141,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1484763070
    },
    {
        "content": "<p>I'd personally like to explore that (though it will be after the other areas we need to wrap up first)</p>",
        "id": 153868147,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1484763220
    },
    {
        "content": "<p>The FHIRPath approach does seem interesting.  Is the scope of FHIRPath limited to the usage of resources, or could it also be used in expressing constraints in the definition of a resource?</p>",
        "id": 153868153,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1484764165
    },
    {
        "content": "<p>Hey Guys - understanding the Clinical Reasoning approach to \"trigger guards\", data requirements and formal cds logic definitions would be useful here: </p>",
        "id": 153868155,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1484764302
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/cqif/cqif-topics-using-expressions.html\" target=\"_blank\" title=\"http://build.fhir.org/cqif/cqif-topics-using-expressions.html\">http://build.fhir.org/cqif/cqif-topics-using-expressions.html</a></p>",
        "id": 153868156,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1484764303
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/cqif/cqif-topics-using-expressions.html#data-requirements\" target=\"_blank\" title=\"http://build.fhir.org/cqif/cqif-topics-using-expressions.html#data-requirements\">http://build.fhir.org/cqif/cqif-topics-using-expressions.html#data-requirements</a></p>",
        "id": 153868158,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1484764421
    },
    {
        "content": "<p>If I understand, FHIRPath, FluentPath, CQL are ways to create an expression and a Profile is way to define an agreement for extensions and constrains on a resource.   If that is correct, then a Profile in theory could use FHIRPath, FluentPath, CQL as a means to define the agreement.  I'm asking because I've heard different takes on Profile.</p>",
        "id": 153868168,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1484766174
    },
    {
        "content": "<p>Yes, a Profile is a way to express constraints on any given resource type both to reflect constraints on the datamodel (e.g. change in cardinalities), add FhirPath based additional constraints on it, ensure extensions are present on the model and it can in fact be used to define new extensions as well.</p>",
        "id": 153868173,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1484767141
    },
    {
        "content": "<p>Yes, DataRequirement can be used with a TriggerDefinition to describe when something should be invoked. <span class=\"user-mention\" data-user-id=\"192233\">@Travis Cummings</span> one of the things we tested at this connectathon was a HAPI JPA plugin that can run CQL and FHIRPath. It would be interesting to try the pattern matching approach you're suggesting with that plugin. We'd be interested in trying it out with the HSPC containers, can we chat about how to get that plugged in to one of those?</p>",
        "id": 153868176,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1484767698
    },
    {
        "content": "<p>Thanks for getting me up to speed on some of these approaches.  Using this approach, a CDS-Hook definition could use a DataRequirement that referenced a FHIR Profile that used FhirPath to describe an expression that matched a resource!</p>",
        "id": 153868178,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1484768758
    },
    {
        "content": "<p>I wonder if this is a place where cds-hooks could simplify /  define an implementation approach for a limited subset of the Clinical Reasoning artefacts.  </p>",
        "id": 153868181,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1484768935
    },
    {
        "content": "<p>Would be good to get some use cases on the table. I'm interested to see how far we can go with FHIR REST API + fhirpath.</p>",
        "id": 153868184,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1484769269
    },
    {
        "content": "<p>I'd be interested in that.  start with the expression language itself before layers of containment.</p>",
        "id": 153868206,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1484769760
    }
]