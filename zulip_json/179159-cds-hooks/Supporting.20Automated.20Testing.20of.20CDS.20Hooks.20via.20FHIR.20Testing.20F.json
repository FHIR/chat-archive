[
    {
        "content": "<p>Hello cdshooks community.</p>\n<p>I'm reaching out to solicit feedback, suggestions and recommendations concerning the support of automated conformance testing of cdshooks implementations by leveraging and enhancing the FHIR Testing Framework/Test Engine, <a href=\"http://build.fhir.org/testing.html\" target=\"_blank\" title=\"http://build.fhir.org/testing.html\">http://build.fhir.org/testing.html</a>, and the FHIR TestScript resource, <a href=\"http://build.fhir.org/testscript.html\" target=\"_blank\" title=\"http://build.fhir.org/testscript.html\">http://build.fhir.org/testscript.html</a>.</p>\n<p>The driving force behind this request is the Da Vinci project where the implementation of one of the initial use cases, Coverage Requirements Discovery (CRD), is via cdshooks. Implementation and Conformance testing of the Da Vinci use cases are to leverage the FHIR Testing Framework and TestScript resources. So, I am currently researching how best to support the testing of cdshooks services within this framework.</p>",
        "id": 153986537,
        "sender_full_name": "Richard Ettema",
        "timestamp": 1534282672
    },
    {
        "content": "<p>Here is an initial list of items where I am seeking feedback:</p>\n<ul>\n<li>\n<p><strong>CDS Hooks is a separate specfication from the FHIR specification. As such, CDS Hooks service request and response bodies/payloads cannot be validated using the current FHIR Validation Engine.</strong><br>\n-- Should/Can the FHIR Validation Engine be enhanced to support validation of cdshooks messages?<br>\n-- If the FHIR Validation Engine is enhanced, how will the engine handle cdshook service definitions; i.e. are cdshooks service definitions available in a structured format that can be parsed by the engine?</p>\n</li>\n<li>\n<p><strong>What TestScript resource definition enhancements are needed? Some initial areas:</strong><br>\n-- New operation code(s) are needed for the cdshooks services. Should a new ValueSet be created or should additional code(s) be added to the existing operation codes?<br>\n-- If the FHIR Validation Engine is not enhanced to support cdshooks messages, then the current 'assert.validateProfileId' element would need to change to allow access to the contained FHIR resource instance(s). <em>This would look something like:</em></p>\n</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span> &lt;validateProfile&gt;\n   &lt;validateProfileId value=&quot;profileId&quot;/&gt;\n   &lt;validateProfilePath value=&quot;[path expression to contained FHIR resource]&quot;/&gt;\n &lt;/validateProfile&gt;\n *Note: FHIR R4 ballot is currently frozen so this may require the use of extensions.\n</pre></div>\n\n\n<ul>\n<li>\n<p><strong>How would we test errors, and exceptions within a cdshooks workflow?</strong></p>\n</li>\n<li>\n<p><strong>The cdshooks messages can, and most likely will, contain FHIR resources. I have not found any mechanism to state what FHIR version of the resource(s) are contained in the cdshooks message. This needs to be explicit and clear in order for test engines to construct expected outcomes in testing.</strong><br>\n-- There is a Zulip thread message that asks this question, <a href=\"#narrow/stream/17-cds-hooks/topic/prefetch.20fhir.20version\" title=\"#narrow/stream/17-cds-hooks/topic/prefetch.20fhir.20version\">https://chat.fhir.org/#narrow/stream/17-cds-hooks/topic/prefetch.20fhir.20version</a>, but there has not been any reply.<br>\n-- Also, the cdshooks specification, <a href=\"https://cds-hooks.org/specification/1.0\" target=\"_blank\" title=\"https://cds-hooks.org/specification/1.0\">https://cds-hooks.org/specification/1.0</a>, contains examples where it appears the FHIR version of the contained resources are outdated; i.e. they are not conformant to the official FHIR DSTU2 (v1.0.2) or STU3 (v3.0.1) specification. It would be helpful to have these updated.</p>\n</li>\n</ul>\n<p>Thank you in advance for your feedback and any additional suggestions or recommendations.</p>",
        "id": 153986544,
        "sender_full_name": "Richard Ettema",
        "timestamp": 1534282845
    },
    {
        "content": "<blockquote>\n<p>Should/Can the FHIR Validation Engine be enhanced to support validation of cdshooks messages?</p>\n</blockquote>\n<p>I've expressed this opinion before and it may not be a popular opinion here, but I don't see a need to define a standard grammar/language for expressing the notion of an abstract test. I am fully behind testing (one of the major reasons why we re-wrote our Sandbox was to write it from the ground up with automated tests) but think the community would get far more value by simply writing automated tests in an existing framework (rspec, junit, unittest in python, etc) than the FHIR testing resources.</p>",
        "id": 153986844,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534339152
    },
    {
        "content": "<p>one problem with that approach is: which one?</p>",
        "id": 153986845,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534339210
    },
    {
        "content": "<p>I don't care, pick one and open source it.</p>",
        "id": 153986847,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534339224
    },
    {
        "content": "<p>kevin for president</p>",
        "id": 153986848,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1534339266
    },
    {
        "content": "<p>:D</p>",
        "id": 153986849,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1534339274
    },
    {
        "content": "<blockquote>\n<p>are cdshooks service definitions available in a structured format that can be parsed by the engine?</p>\n</blockquote>\n<p>A CDS Service's discovery endpoint (available at <code>{baseUrl}\\cds-services</code>) will return the service definitions in JSON</p>",
        "id": 153986851,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534339277
    },
    {
        "content": "<p>I'm glad I have one supporter on this topic <span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span> <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 153986853,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534339321
    },
    {
        "content": "<p>is there an apparent preferred candidate? I'm not against picking something if it means we can share test cases and the community will coalesce to it</p>",
        "id": 153986854,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534339386
    },
    {
        "content": "<p>My language preference (in order) would be: Ruby, JavaScript, or Python. Java or C# if you really had to but I'd take one of the first 3 choices any day.</p>",
        "id": 153986861,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534339489
    },
    {
        "content": "<p>I'd think about platform/library support before language....</p>",
        "id": 153986866,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534339595
    },
    {
        "content": "<p>The mental hurdles one has to go through to learn FHIR's custom testing language (those resources/tooling) and then execute them under one of the few existing implementations has always seemed odd to me. I'd rather just grab an open source test suite (written in one of those existing languages/testing frameworks) and add new tests (if needed) and run.</p>\n<p>The work <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>'s team with the python Sync4Science tests was great</p>",
        "id": 153986867,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534339598
    },
    {
        "content": "<p>All 3 of those languages have great testing library support</p>",
        "id": 153986868,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534339613
    },
    {
        "content": "<blockquote>\n<p>How would we test errors, and exceptions within a cdshooks workflow?</p>\n</blockquote>\n<p>Testing these scenarios is always difficult. One great step would be to write an open source CDS Service that returns failures/execptions when called. Something like a Chaos Monkey CDS Service. This would be beneficial only to EHR implementers.</p>\n<p>Testing these same scenarios for CDS Services will be more difficult since the failure scenarios are much less. For instance, if the EHR fails the CDS Service just isn't invoked. You could create a similar open source Chaos FHIR Service that fails so when the EHR invokes the CDS Service, the subsequent requests to the FHIR Server (by the CDS Service) fail.</p>",
        "id": 153986880,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534339808
    },
    {
        "content": "<blockquote>\n<p>The cdshooks messages can, and most likely will, contain FHIR resources. I have not found any mechanism to state what FHIR version of the resource(s) are contained in the cdshooks message. This needs to be explicit and clear in order for test engines to construct expected outcomes in testing.</p>\n</blockquote>\n<p>This is an offline coordination between the EHR and CDS Service. We have punted on this until we get more implementer feedback. I don't believe this hampers testing in any way as you can simply specify the version of FHIR you expect the EHR + CDS Service to use in the course of their transactions.</p>",
        "id": 153986885,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534339962
    },
    {
        "content": "<blockquote>\n<p>Also, the cdshooks specification, <a href=\"https://cds-hooks.org/specification/1.0\" target=\"_blank\" title=\"https://cds-hooks.org/specification/1.0\">https://cds-hooks.org/specification/1.0</a>, contains examples where it appears the FHIR version of the contained resources are outdated; i.e. they are not conformant to the official FHIR DSTU2 (v1.0.2) or STU3 (v3.0.1) specification. It would be helpful to have these updated.</p>\n</blockquote>\n<p>CDS Hooks is not tied to a particular version of FHIR, just like SMART. As such, our specification will contain reference and examples to dealing with multiple versions of FHIR.</p>",
        "id": 153986887,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534340030
    },
    {
        "content": "<p>Also, it is \"CDS Hooks\", not \"cdshooks\" (sorry, nit correction <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span> )</p>",
        "id": 153986890,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534340050
    },
    {
        "content": "<p>it would be good for the examples to conform to at least one of the versions...</p>",
        "id": 153986892,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534340082
    },
    {
        "content": "<p>We actually have examples across <strong>both</strong> DSTU2 and STU3 now</p>",
        "id": 153986895,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534340137
    },
    {
        "content": "<p>(Isaac has an update to our examples in a PR review right now)</p>",
        "id": 153986897,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534340158
    },
    {
        "content": "<p>Overall for testing, it's not clear to me that we need to be able to share test logic across frameworks. In other words, agreeing with Kevin: the important thing is to have tests and make them easy to run. If we have different Test Suites written by different people in different languages, that's fine too -- but we should maintain one official test suite for CDS Hooks. Keep a copy hosted online so it's easy to run without installing. Make it available in Docker so it's easy for anyone to run locally. And pick a language that at least the test Suite authors are productive with, so it's easy to maintain and extend.</p>",
        "id": 153986909,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1534341628
    },
    {
        "content": "<p>How does multi-version work in prefetch?</p>",
        "id": 153986918,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1534343548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> - Are you asking about a CDS Service requesting different versions of FHIR in prefetch queries?</p>",
        "id": 153986947,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534346127
    },
    {
        "content": "<p>My interpretation of your earlier statement is that prefetch definitions are version agnostic.  In the case where a query would execute successfully against multiple versions, how does a server know what version is in the prefetch?</p>",
        "id": 153986965,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1534346942
    },
    {
        "content": "<p>Ah, I get your question now. The only way to support this today is for a CDS Service to flex its Discovery data based upon the EHR calling it. This is similar to how a SMART app must flex how it calls the EHR's FHIR server depending upon the version of FHIR that is supported.</p>",
        "id": 153986999,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534351392
    },
    {
        "content": "<p>In the case of a SMART app, the app initiates the data flow and it can hit the CapabilityStatement.  For CDS Hooks, there's what I'd presumed was a \"static\" Service definition that is queried by the Client/EHR to see what prefetches are asked for.   Is it really the intention that the service definition is dynamic?  If it is, how does the service know what version to expose?  I'm hoping it's not hard-configured to who's asking...</p>",
        "id": 153987041,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1534358174
    },
    {
        "content": "<p>All good questions and things we have discussed previously (without coming to an answer). What we have settled on is \"let's see how initial implementations goes and add enhancements/complexity when deemed necessary\"</p>",
        "id": 153987150,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534369421
    },
    {
        "content": "<p>We <em>really</em> value maintaining a simple API (it's one of the biggest reasons why CDS Hooks is so popular IMHO) and not trying to design/tackle every possible scenario and corner case.</p>",
        "id": 153987153,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534369538
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"191355\">@Kevin Shekleton</span> - Lloyd and I are taking about a potentiall iss GET parameter on the discovery endpoint as a simple method to enable dynamic CDS service functionality. See <a href=\"#narrow/stream/17-cds-hooks/topic/Search.20param.20names.20in.20prefetch\" title=\"#narrow/stream/17-cds-hooks/topic/Search.20param.20names.20in.20prefetch\">https://chat.fhir.org/#narrow/stream/17-cds-hooks/topic/Search.20param.20names.20in.20prefetch</a></p>\n<p>Thoughts welcome!</p>",
        "id": 153987335,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1534392596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191864\">@Isaac Vetter</span>  - What about just using the JWT instead since that is already present?</p>",
        "id": 153987350,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534394118
    },
    {
        "content": "<p>that's a great idea.</p>\n<p>Does the CDS client authenticate to the CDS Hooks service's discovery endpoint? It's unspecified in the spec. </p>\n<p>With that said, if the CDS client did authenticate, per <a href=\"https://cds-hooks.org/specification/1.0/#trusting-ehrs\" target=\"_blank\" title=\"https://cds-hooks.org/specification/1.0/#trusting-ehrs\">the spec</a> to the discovery endpoint, the service would then have access to the CapabilityStatement. </p>\n<p>I like it!</p>\n<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  - what do you think?</p>\n<p>Isaac</p>",
        "id": 153987354,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1534394357
    },
    {
        "content": "<blockquote>\n<p>\"Each time an EHR transmits a request to a CDS Service, the request MUST include an Authorization header presenting the JWT as a “Bearer” token:\"</p>\n</blockquote>\n<p>This is supposed to convey that _every_ EHR call to a CDS Service (whether that be to the Discovery endpoint or to a CDS Service endpoint) needs to have the JWT.</p>\n<p>Later in the spec, we call out the Discovery endpoint in an example when discussing the JWT internals:</p>\n<blockquote>\n<p>\"For example, consider a CDS Service available at a base URL of <a href=\"https://cds.example.org\" target=\"_blank\" title=\"https://cds.example.org\">https://cds.example.org</a>. When the EHR invokes the CDS Service discovery endpoint, the aud value is either \"<a href=\"https://cds.example.org/cds-services\" target=\"_blank\" title=\"https://cds.example.org/cds-services\">https://cds.example.org/cds-services</a>\" or [\"https://cds.example.org/cds-services\"]. Similarly, when the EHR invokes a particular CDS Service (say, some-service), the aud value is either \"<a href=\"https://cds.example.org/cds-services/some-service\" target=\"_blank\" title=\"https://cds.example.org/cds-services/some-service\">https://cds.example.org/cds-services/some-service</a>\" or [\"https://cds.example.org/cds-services/some-service\"].\"</p>\n</blockquote>",
        "id": 153987355,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534394811
    },
    {
        "content": "<p>Oh, I see you understand that too <span class=\"user-mention\" data-user-id=\"191864\">@Isaac Vetter</span> with your link to \"the spec\". <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 153987356,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534394854
    },
    {
        "content": "<p>Well, I guess I am just posting the relevant parts of the spec that do call out that the JWT is present even on Discovery calls for people who don't want to follow the link <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue winking eye\">:stuck_out_tongue_winking_eye:</span></p>",
        "id": 153987358,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534394903
    },
    {
        "content": "<p>As I said in the other thread, I'm not thrilled with the notion of a dynamic service definition that adjusts itself to the capabilities of the EHR.  I can certainly understand the appeal of that architecture from an EHR perspective, but if it's a question of \"who's best able to deal with the complexity of adjusting configuration\", my leaning would be that the EHRs have much more capability than a lot of the CDS services - which I think of as being not necessarily mor sophisticated than app developers.</p>",
        "id": 153987420,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1534399983
    },
    {
        "content": "<p>SMART apps already have to dynamically adjust themselves to the capabilities of the EHRs they are interacting with. This includes differing FHIR versions + differences in supported resources, CRUD capabilities, and search/filtering capabilities on individual resources.</p>",
        "id": 153987441,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534401933
    },
    {
        "content": "<p>Yes - but SMART Apps don't host dynamic websites.  The CDS Services will typically have some degree of dynamicly interacting with the client's repository.  The question is whether they also need to have a dynamic service declaration.</p>",
        "id": 153987571,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1534429590
    },
    {
        "content": "<blockquote>\n<p>Yes - but SMART Apps don't host dynamic websites.</p>\n</blockquote>\n<p>Can you elaborate on this? I'm not following.</p>",
        "id": 153987751,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1534448155
    },
    {
        "content": "<p>The EHR doesn't ever \"query\" the SMART App for configuration.  You just launch it.  The SMART app does all of the querying.  With CDSHooks, the service is expected to have a queriable endpoint that describes what it does.  <span class=\"user-mention\" data-user-id=\"191864\">@Isaac Vetter</span> is proposing that be an 'active' endpoint the dynamicly adjusts what it displays based on who's asking.  I think that's going to be too hard for a lot of services to manage.</p>",
        "id": 153987753,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1534448995
    }
]