[
    {
        "content": "<p>I am at the Australian R Unconference today, working on the R client for FHIR</p>",
        "id": 153916201,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508993101
    },
    {
        "content": "<p>It was written by <span class=\"user-mention\" data-user-id=\"194597\">@Sander Laverman</span> - thanks.</p>",
        "id": 153916202,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508993117
    },
    {
        "content": "<p>I've beefed it up and I know it pretty well now</p>",
        "id": 153916203,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508993156
    },
    {
        "content": "<p>I've just reviewed it with one of the leads for R for Australia, and the clear message is that it's basically useless without methods for restructuring the data to make it square</p>",
        "id": 153916204,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508993202
    },
    {
        "content": "<p>restructuring the data.... needs some new ideas....</p>",
        "id": 153916205,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508993237
    },
    {
        "content": "<p>I'm wondering about beefing up graphQL to allow for flattening, or exploring some OData conversion specification...</p>",
        "id": 153916206,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508993308
    },
    {
        "content": "<p>I followed this:</p>",
        "id": 153916260,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1509016218
    },
    {
        "content": "<p><a href=\"https://github.com/graphcool/framework/issues/268\" target=\"_blank\" title=\"https://github.com/graphcool/framework/issues/268\">https://github.com/graphcool/framework/issues/268</a></p>",
        "id": 153916261,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1509016230
    },
    {
        "content": "<p>Data Reorganization Directives</p>\n<p>GraphQL is a very effectively language for navigating a graph and selecting subset of information from it. However for some uses, the physical structure of the result set is important. This is most relevant when extracting data for statistical analysis in languages such as R. In order to facilitate these kind of uses, FHIR servers should consider supporting the following directives that allow implementers to flatten the return graph for easier analysis</p>\n<p>@flatten</p>\n<p>This directive indicates the the field to which it is attached is not actually produced in the output graph. Instead, it's children will be processed and added to the output graph as specified in it's place. </p>\n<p>Notes:<br>\nIf @flatten is used on an element with repeating cardinality, then by default, all the children will become lists<br>\nWhen using @flatten, all the collated children must have the same FHIR type. The server SHALL return an error if they don't</p>\n<p>@singleton</p>\n<p>This directive indicates that an field collates to a single node, not a list. It is only used in association with fields on which a parent has @flatten, and overrides the impact of flattening in making it a list. The server SHALL return an error if there is more than on value when flattening</p>\n<p>@first</p>\n<p>This is a shortcut for a FHIR path filter [$index = 0] and indicates to only take the first match of the elements. Note that this only applies to the immediate context of the field in the source graph, not to the output graph</p>\n<p>@slice(fhirpath)</p>\n<p>This indicates that in the output graph, each element in the source will have \".\" and the result of the FHIRPath as a string appended to the specified name. This slices a list up into multiple single values. For example</p>\n<p>name @slice($index) @flatten {given @first @singleton family}</p>\n<p>For a resource that has 2 names will result in the output </p>\n<p>{<br>\n  \"Given.1\" : \"first name, first given\",<br>\n  \"Family.1\" : \"first name family name\",<br>\n  \"Given.2\" : \"second name, first given\",<br>\n  \"Family.2\" : \"second name family name\"<br>\n}</p>\n<p>Other uses might be e.g. Telecom @slice(use) to generate telecom.home for instance.</p>\n<p>Notes:<br>\nIn general, the intent of @slice is to break a list into multiple singletons. However servers do not treat the outputs are singletons unless this is explicitly specified using @singleton</p>",
        "id": 153916344,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1509056252
    },
    {
        "content": "<p><a href=\"http://www.healthintersections.com.au/?p=2740\" target=\"_blank\" title=\"http://www.healthintersections.com.au/?p=2740\">http://www.healthintersections.com.au/?p=2740</a> - for anyone interested in graphQL or data analysis</p>",
        "id": 153916380,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1509093341
    },
    {
        "content": "<p>I am having a hard time wrapping my head around how the flatten directive is not breaking the GraphQL official specification. It takes it from a \"get what you ask for\" to \"ask and see what you get\" kind of shift. Doesn't returning fields not requested break the GraphQL specification? And then what about returning fields that are not part of the schema? That would definitely break spec. And this adds even more logistical problems considering even the basic example:</p>\n<div class=\"codehilite\"><pre><span></span><code>For an example, take this graphQL, and apply it to the patient example:\n\n{\n  identifier { system value }\n  active\n  name { text given family }\n}\nThis will give the output:\n\n{\n  &quot;identifier&quot;: [{\n      &quot;system&quot;: &quot;urn:oid:1.2.36.146.595.217.0.1&quot;,\n      &quot;value&quot;: &quot;12345&quot;\n  }],\n  &quot;active&quot;: true,\n  &quot;name&quot;: [{\n    &quot;given&quot;: [&quot;Peter&quot;,&quot;James&quot;],\n    &quot;family&quot;: &quot;Chalmers&quot;\n  },{\n    &quot;given&quot;: [&quot;Jim&quot;]\n  },{\n    &quot;given&quot;: [&quot;Peter&quot;,&quot;James&quot;],\n    &quot;family&quot;: &quot;Windsor&quot;\n  }]\n}\nAdding the @flatten directive changes the output:\n\n{\n  identifier @flatten { system value }\n  active\n  name @flatten { text given family }\n}\nThis has the output:\n\n{\n  &quot;system&quot;:[&quot;urn:oid:1.2.36.146.595.217.0.1&quot;],\n  &quot;value&quot;:[&quot;12345&quot;],\n  &quot;active&quot;:true,\n  &quot;given&quot;:[&quot;Peter&quot;,&quot;James&quot;,&quot;Jim&quot;,&quot;Peter&quot;,&quot;James&quot;],\n  &quot;family&quot;:[&quot;Chalmers&quot;,&quot;Windsor&quot;]\n}\n</code></pre></div>\n<p>I understand that by using @first as exemplified we can remove the second given name for each patient allowing the response to be better understood as 3 patients instead of 5, but what about the family name? We see two family names and no null field for the missing value. I would expect the example response to be: <code>[\"Chalmers\",null,\"Windsor\"]</code> since the second patient did not have a family name. Without having a null value though, the data becomes ambiguous very quickly and I don't see much good out of the flatten directive if it is even supported anywhere?</p>\n<p><a href=\"https://github.com/Asymmetrik/graphql-fhir\">https://github.com/Asymmetrik/graphql-fhir</a> seems like the biggest open source project for supporting GraphQL on a Node.js server and it does not support the flatten directive still.</p>\n<p>I see this spec is still in a draft and has been for quite some time. Is there any consensus to using GraphQL for FHIR or is this a lost cause? I think it is needed as data is becoming more graph like and would be great if we could see FHIR implementations on services like Dgraph or Neo4j. I'm still a newb so maybe they exist, I just haven't found them yet.</p>",
        "id": 246610155,
        "sender_full_name": "Anthony Master",
        "timestamp": 1626796280
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"427852\">@Anthony Master</span>  couple of thoughts that might help:<br>\nYour example patient is actually 1 patient. \"Windsor\" is his maiden name (see original fhir resource in github).<br>\nThis shows a problem of the suggested \"flatten\" directive which seems to lose too much meta information. I wouldn't understand why this was required at all, maybe this was an R thing. Now, as there is the FHIR bulk data api, there shouldn't be an issue with loading data into neo4j for analytics with a little bit of schema config.</p>",
        "id": 247937534,
        "sender_full_name": "Paul Hellwig",
        "timestamp": 1627920854
    },
    {
        "content": "<p>ok it's a fair comment that @flatten and @singleton are problematic with regard to schema.</p>",
        "id": 249674588,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629170119
    },
    {
        "content": "<p>And maybe that will mean that they can't be supported, though my implementation does. it's just such a useful thing for a client to save them walking through deep json structures. It's definitely really useful in R, which is orientated towards processing square json structures, but it's useful for any client that is going to process the json returned.</p>",
        "id": 249674652,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629170195
    },
    {
        "content": "<p>but your example output looks wrong to me, and would certainly not be preocessible. It's not the same as in the spec.</p>",
        "id": 249674674,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629170281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"427852\">@Anthony Master</span></p>",
        "id": 249674712,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629170290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179219-analytics-on.20FHIR/topic/R.20Unconference/near/249674588\">said</a>:</p>\n<blockquote>\n<p>ok it's a fair comment that @flatten and @singleton are problematic with regard to schema.</p>\n</blockquote>\n<p>Thank you for the reply. I have accepted a position as an Interface Specialist and start tomorrow. I was mainly just trying to get the lay of the land a little bit and see where things stood. Implementing GraphQL directives seems to be a big grey area with what they are allowed and not allowed to do in regards to the GraphQL specification. I recently had a similar discussion about implementing a directive from another service provider and there was mixed feedback as to what the spec actually means concerning directives. I have a lot of GraphQL, MySQL, JavaScript experience, no experience with R and obviously a rookie with HL7 (both 2.x and FHIR). Looking forward to the challenges ahead.</p>",
        "id": 249723860,
        "sender_full_name": "Anthony Master",
        "timestamp": 1629209326
    }
]