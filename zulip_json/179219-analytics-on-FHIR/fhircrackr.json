[
    {
        "content": "<p>New R package available: Useful tools for conveniently downloading FHIR resources in xml format<br>\nand converting them to R data frames. The package uses FHIR search to download bundles from a FHIR server, provides functions to save and read XML files containing such bundles and allows flattening the bundles to data.frames using XPath expressions. We would be very happy if anyone who's interested could test it and report issues! <a href=\"https://cran.r-project.org/package=fhircrackr\">https://cran.r-project.org/package=fhircrackr</a></p>",
        "id": 203590026,
        "sender_full_name": "Danny Ammon",
        "timestamp": 1594462144
    },
    {
        "content": "<p>how does it compare to the existing package?</p>",
        "id": 203673047,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1594608088
    },
    {
        "content": "<p>As far as we can tell the existing package (RonFHIR) just loads FHIR resources into R as json resources, which most R people would probably have been able to to themsevelves using the httr package RonFHIR is wrapping.  That is not too helpful as you cant do data analysis on these resources.  fhircrackr on the other hand gives an interface (fhir_crack()) to extract the data from resources into table like structures (aka data.frames) within R.</p>",
        "id": 203679392,
        "sender_full_name": "Julia Palm",
        "timestamp": 1594618206
    },
    {
        "content": "<p>so you have to provide XPath rules to convert to tables? How would JSON be supported or is that not a reasonable addition?</p>",
        "id": 203758327,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1594667916
    },
    {
        "content": "<p>does fhircrackr support smart on fhir?</p>\n<p>(great name, btw, but you do need to formally apply for trademark permission here: <a href=\"http://www.hl7.org/about/product.trademark.application.cfm\">http://www.hl7.org/about/product.trademark.application.cfm</a>)</p>",
        "id": 203758592,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1594668074
    },
    {
        "content": "<p>At the moment you have to provide XPath rules to convert to tables, so json is not supported, that is correct. <br>\nThere's different levels of \"cracking\" a bundle of fhir ressources provided in the package. If you know which elements of the resources you are interested in and you can provide the XPath expression to their position, you can extract data frames with only that information. I think it will be hard to transfer this functionality to JSON because I'm not aware of a comparable tool for JSON.<br>\nOn the other hand you can crack the entire bundle and turn every element into a column of the data frame. At the moment, fhircrackr  can do this to XMLs exclusively too, but that might technically be transferable to JSON sometime. In my opinion that is however not the most useful functionality, because  the resulting data frames are incredibly wide and sparse and contain a lot information you won't be interested in for data analysis.</p>\n<p>I have to say I'm not very familiar with smart on fhir. What kinds of preconditions would fhircrackr have to satisfy to support smart on fhir? The package can currently access any endpoint that can return xml resources via fhir search and it is open source, so any of the code is of course freely available.</p>\n<p>Thanks for the remark about the trademark permission, we'll take care of that!</p>",
        "id": 203800491,
        "sender_full_name": "Julia Palm",
        "timestamp": 1594705131
    },
    {
        "content": "<p>well, smart on fhir is really just an OAUth profile - you can copy the code from the existing R package for that (it's not a lot).</p>",
        "id": 203804116,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1594710192
    },
    {
        "content": "<p>I think that there's several equivalents to XPath for json, but none have formal standing</p>",
        "id": 203804199,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1594710262
    }
]