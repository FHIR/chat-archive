[
    {
        "content": "<p>I need to convert this </p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">urlify</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">A</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">t</span> <span class=\"o\">=</span> <span class=\"sr\">/[&amp; +$,:;=?@\"#{}|^~[`%!'&lt;&gt;\\]\\.\\/\\(\\)\\*\\\\]/g</span><span class=\"p\">;</span>\n                <span class=\"k\">return</span> <span class=\"p\">(</span>\n                    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">truncate</span> <span class=\"o\">||</span> <span class=\"nx\">e</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">options</span><span class=\"p\">),</span>\n                    <span class=\"nx\">A</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">()</span>\n                        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/\\'/gi</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n                        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"s2\">\"-\"</span><span class=\"p\">)</span>\n                        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/-{2,}/g</span><span class=\"p\">,</span> <span class=\"s2\">\"-\"</span><span class=\"p\">)</span>\n                        <span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mf\">0</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">truncate</span><span class=\"p\">)</span>\n                        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/^-+|-+$/gm</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n                        <span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">()</span>\n                <span class=\"p\">);</span>\n            <span class=\"p\">})</span>\n</code></pre></div>",
        "id": 225925450,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612998193
    },
    {
        "content": "<p>to java code that does the same thing</p>",
        "id": 225925472,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612998199
    },
    {
        "content": "<p>I'm not sure how some of the string stuff works</p>",
        "id": 225925514,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612998230
    },
    {
        "content": "<p>I remember that the t = / sequence has some special meaning, but google doesn't seem to know how to help me find what it is. What's the /g at the end?</p>",
        "id": 225925838,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612998399
    },
    {
        "content": "<p>global match, basically do it as many times as you can</p>",
        "id": 225925935,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1612998457
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&quot;abcdeabcdeab&quot;.replace(/abc/, &quot;123&quot;)\n&quot;123deabcdeab&quot;\n&quot;abcdeabcdeab&quot;.replace(/abc/g, &quot;123&quot;)\n&quot;123de123deab&quot;```\n</code></pre></div>",
        "id": 225926059,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1612998506
    },
    {
        "content": "<p>so that's a regex at face value? It doesn't have string quotes around it ? It's the string quotes bit I have some memory of it meaning something</p>",
        "id": 225926084,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612998517
    },
    {
        "content": "<p>and what does the return () mean? it's returning a set?</p>",
        "id": 225926292,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612998619
    },
    {
        "content": "<p>yeah, <code>/slash-escaped-regex/flags</code> is the same as new Regexp(\"quote-escaped-regex\", \"flags\")</p>",
        "id": 225926296,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1612998624
    },
    {
        "content": "<p>hmm I wonder how I do that in java?</p>",
        "id": 225926344,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612998660
    },
    {
        "content": "<p>after squinting at it for a bit, i think the return (foo) is the same as return foo</p>",
        "id": 225926564,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1612998782
    },
    {
        "content": "<p>hmm, not sure, given the ',' there</p>",
        "id": 225926622,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1612998818
    },
    {
        "content": "<p>I don't know how to read that. It's used here:</p>",
        "id": 225926699,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612998854
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nx\">u</span> <span class=\"o\">=</span> <span class=\"nx\">l</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">urlify</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">[</span><span class=\"nx\">r</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">)),</span> <span class=\"p\">(</span><span class=\"nx\">h</span> <span class=\"o\">=</span> <span class=\"mf\">0</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 225926710,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612998866
    },
    {
        "content": "<p>so it's used as if it just returns a string</p>",
        "id": 225926721,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612998877
    },
    {
        "content": "<p>I think this is the same in java:</p>",
        "id": 225926755,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612998907
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Java\"><pre><span></span><code><span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"nf\">urlify</span><span class=\"p\">(</span><span class=\"n\">String</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">String</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"s\">\"&amp; +$,:;=?@\\\"#{}|^~[`%!'&lt;&gt;\\\\]\\\\.\\\\/\\\\(\\\\)\\\\*\\\\\\\\\"</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span>\n        <span class=\"p\">.</span><span class=\"na\">replaceAll</span><span class=\"p\">(</span><span class=\"s\">\"\\\\'/\"</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"na\">replaceAll</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"s\">\"-\"</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"na\">replaceAll</span><span class=\"p\">(</span><span class=\"s\">\"-{2,}\"</span><span class=\"p\">,</span> <span class=\"s\">\"-\"</span><span class=\"p\">)</span>\n<span class=\"c1\">//        .substring(0, this.options.truncate)</span>\n        <span class=\"p\">.</span><span class=\"na\">replaceAll</span><span class=\"p\">(</span><span class=\"s\">\"^-+|-+$\"</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"na\">toLowerCase</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 225926767,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612998911
    },
    {
        "content": "<p>it looks to me like <code>this.options.truncate || e(this.options),</code> is just there for side-effects</p>",
        "id": 225926792,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1612998924
    },
    {
        "content": "<p>there's also a trim() at the beginning to get rid of WS:</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot; \\ntrim me  \\n&quot;.trim()\n&quot;trim me&quot;\n</code></pre></div>",
        "id": 225926933,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1612998991
    },
    {
        "content": "<p>duh thanks</p>",
        "id": 225926979,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612999018
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&quot;--++asdf&#39;in quotes&#39;&amp; +$-x--y---z&quot;.trim()\n                        .replace(/\\&#39;/gi, &quot;&quot;)\n                        .replace(t, &quot;-&quot;)\n                        .replace(/-{2,}/g, &quot;-&quot;)\n                        .substring(0, 99)\n                        .replace(/^-+|-+$/gm, &quot;&quot;)\n                        .toLowerCase()\n&quot;asdfin-quotes-x-y-z&quot;\n</code></pre></div>",
        "id": 225927404,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1612999261
    },
    {
        "content": "<p>that should exercise it pretty well</p>",
        "id": 225927445,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1612999281
    },
    {
        "content": "<p>(though i forgot the trim)</p>",
        "id": 225927556,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1612999329
    },
    {
        "content": "<p>thanks</p>",
        "id": 225928609,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612999932
    },
    {
        "content": "<p>Hi. Quick question:<br>\nI have this code in a script somewhere:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code>          <span class=\"kd\">var</span> <span class=\"nx\">feedbacklabel</span> <span class=\"o\">=</span> <span class=\"s1\">'Feedback'</span><span class=\"p\">;</span>\n          <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"k\">if</span> <span class=\"nx\">feedbackEntry</span><span class=\"p\">.</span><span class=\"nx\">parameters</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n            <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"k\">if</span> <span class=\"nx\">feedbackEntry</span><span class=\"p\">.</span><span class=\"nx\">label</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n              <span class=\"nx\">feedbacklabel</span> <span class=\"o\">=</span> <span class=\"s1\">'{{feedbackEntry.label}}'</span><span class=\"p\">;</span>  <span class=\"c1\">// The feedback label is a string as provided</span>\n            <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"nx\">endif</span> <span class=\"o\">%</span><span class=\"p\">};</span>\n</code></pre></div>\n<p>Basically saying \"The feedbacklabel var is \"Feedback\" unless the variable {{feedbackEntry.label}} is defined, in which case the feedbacklabel takes that value. In order to further secure this (e.g. avoid someone wanting to inject code), can I / should I add a toString there?</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code>          <span class=\"kd\">var</span> <span class=\"nx\">feedbacklabel</span> <span class=\"o\">=</span> <span class=\"s1\">'Feedback'</span><span class=\"p\">;</span>\n          <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"k\">if</span> <span class=\"nx\">feedbackEntry</span><span class=\"p\">.</span><span class=\"nx\">parameters</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n            <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"k\">if</span> <span class=\"nx\">feedbackEntry</span><span class=\"p\">.</span><span class=\"nx\">label</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n              <span class=\"nx\">feedbacklabel</span> <span class=\"o\">=</span> <span class=\"s1\">'{{feedbackEntry.label}}.toString()'</span><span class=\"p\">;</span>  <span class=\"c1\">// The feedback label is a string (and cast as such)</span>\n            <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"nx\">endif</span> <span class=\"o\">%</span><span class=\"p\">};</span>\n</code></pre></div>\n<p>?</p>",
        "id": 231351273,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1616434055
    },
    {
        "content": "<p>what about a ternary?</p>\n<div class=\"codehilite\"><pre><span></span><code>var label = feedbackEntry.label ? feedbackEntry.label : &quot;Feedback&quot;\n</code></pre></div>",
        "id": 232494046,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1617136709
    }
]