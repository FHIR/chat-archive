[
    {
        "content": "<p>Does the <code>cql-execution</code> library support the new Aggregate Queries functionality? <a href=\"https://cql.hl7.org/2020May/03-developersguide.html#aggregate-queries\">https://cql.hl7.org/2020May/03-developersguide.html#aggregate-queries</a></p>",
        "id": 259279395,
        "sender_full_name": "Rebecca Green",
        "timestamp": 1635357278
    },
    {
        "content": "<p>Yes.  Support for aggregate queries was added to <code>cql-execution</code> in version 2.3.0.</p>",
        "id": 259294949,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1635363445
    },
    {
        "content": "<p>Thanks! Just found the answer in the release notes before you posted your reply. I'm confused about how to set the initial aggregate value in cql. If I want the initial value to be 0, how would I express that in CQL?</p>",
        "id": 259296632,
        "sender_full_name": "Rebecca Green",
        "timestamp": 1635364203
    },
    {
        "content": "<p><code>define Sum: ({ 1, 2, 3, 4, 5 }) X aggregate Result starting 0: Result + Result</code></p>",
        "id": 259331784,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1635387218
    },
    {
        "content": "<p>Without the <code>starting</code> clause, the <code>Result</code> accumulator is initially <code>null</code></p>",
        "id": 259331845,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1635387250
    },
    {
        "content": "<p>Does an aggregate have to be an Integer or can it be something else like a Tuple for example?</p>",
        "id": 259523030,
        "sender_full_name": "Rebecca Green",
        "timestamp": 1635513792
    },
    {
        "content": "<p>If so how would you express that?</p>",
        "id": 259523066,
        "sender_full_name": "Rebecca Green",
        "timestamp": 1635513811
    },
    {
        "content": "<p>For example I'm trying to write a function similar to this:</p>\n<div class=\"codehilite\"><pre><span></span><code>define function AggregateFunction():\n  (expand Interval[1, 4]) C\n  aggregate S starting ({\n    A: null,\n    B: null,\n    C: null,\n    D: null\n  } as Tuple {\n    A Boolean,\n    B Boolean,\n    C Boolean,\n    D Boolean\n  }):\n  case\n    when C &gt; 1 then S.A is true\n    when C = 1 then S.B is true\n    when C &lt; 1 then S.C is true\n    when C = 0 then S.D is true\n    else S\n  end\n</code></pre></div>\n<p>But I'm getting an error this error: <code>Expected an expression of type 'System.Boolean', but found an expression of type 'tuple of A: System.Boolean, B: System.Boolean, C: System.Boolean, D: System.Boolean'.</code> </p>\n<p>I thought that by specifying the starting value as the tuple the cql would expect the tuple as a response. Any help? Thoughts on what I'm getting wrong here?</p>",
        "id": 259542122,
        "sender_full_name": "Rebecca Green",
        "timestamp": 1635521886
    },
    {
        "content": "<p>The aggregate can be any type, the accumulator expression is responsible for determining what \"accumulating\" means for each iteration. This example from the spec, for instance, accumulates sets of intervals:</p>\n<div class=\"codehilite\"><pre><span></span><code>define &quot;RolledOutIntervals&quot;:\n  MedicationRequestIntervals M\n    aggregate R starting (null as List&lt;Interval&lt;DateTime&gt;&gt;): R union ({\n      M X\n        let S: Max({ end of Last(R) + 1 day, start of X }),\n          E: S + duration in days of X\n        return Interval[S, E]\n    })\n</code></pre></div>",
        "id": 260064260,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1635890690
    }
]