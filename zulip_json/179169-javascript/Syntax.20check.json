[
    {
        "content": "<p>I'm just working on setting up javascript hosting in my server.</p>",
        "id": 153927344,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1514575695
    },
    {
        "content": "<p>can I just check expectations.... if you're working with a patient,</p>",
        "id": 153927345,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1514575728
    },
    {
        "content": "<p>where p is a Patient</p>",
        "id": 153927346,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1514575740
    },
    {
        "content": "<p>p.identifier[0].system</p>",
        "id": 153927347,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1514575756
    },
    {
        "content": "<p>that would access the system value on the first identifier, yes?</p>",
        "id": 153927348,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1514575768
    },
    {
        "content": "<p>what would be expected to add an identifier?</p>",
        "id": 153927349,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1514575795
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">identifier</span> <span class=\"o\">=</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">identifier</span><span class=\"p\">.</span><span class=\"nx\">concat</span><span class=\"p\">([</span><span class=\"k\">new</span> <span class=\"nx\">Identifier</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">system</span><span class=\"o\">=</span><span class=\"s1\">&#39;http://something&#39;</span><span class=\"p\">}])</span>\n</pre></div>",
        "id": 153927350,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1514575886
    },
    {
        "content": "<p>is that right?</p>",
        "id": 153927351,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1514575893
    },
    {
        "content": "<p>p.identifier[0].system is indeed the first identifier's system.</p>\n<p>As for adding an identifier, there are a bunch of ways one could do this.<br>\nYour example probably won't work (JS gurus may correct me ...)<br>\nYou would either just add an anonymous JS object to the p.identifier array:</p>\n<div class=\"codehilite\"><pre><span></span>p.identifier = p.identifier.concat([{system: &#39;http://something&#39;}]);\n</pre></div>\n\n\n<p>or you might have a JS class called Identifier with some constructor (and fully blown probably with setters and getters):</p>\n<div class=\"codehilite\"><pre><span></span>class Identifier {\n  constructor(system) {\n    this.system = system; // in real life should also check whether system is not null ...\n  }\n}\np.identifier = p.identifier.concat([new Identifier(&#39;http://something&#39;)]);\n</pre></div>",
        "id": 153927352,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1514581757
    },
    {
        "content": "<p>to add a single object to an array, you might also use push() instead of concat(), saving a pair of brackets and the assignment:</p>\n<div class=\"codehilite\"><pre><span></span>p.identifier.push(SOME_IDENTIFIER_OBJECT);\n</pre></div>",
        "id": 153927353,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1514581963
    },
    {
        "content": "<p>thanks. Doesn't / shouldn't the JS reference library define Identifier() so that it can be used?</p>",
        "id": 153927354,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1514584716
    },
    {
        "content": "<p>Well, if you are talking about <a href=\"https://github.com/FHIR/fhir.js\" target=\"_blank\" title=\"https://github.com/FHIR/fhir.js\">https://github.com/FHIR/fhir.js</a> - this is basically a client wrapper for the RESTful API.<br>\nfhir.js doesn't know about resources and data types.<br>\nThe same is true for SMART's client-js, which internally uses fhir.js.<br>\nYou can use one of the JSON schema implementations to validate JS objects against FHIR resource definitions, or the fhir-validator-js available on Github.<br>\nAfaik, that's all there is, in terms of more or less official libraries.<br>\nWhether there should be more ... maybe <span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span>  can elaborate on that ;-)</p>",
        "id": 153927356,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1514641469
    }
]