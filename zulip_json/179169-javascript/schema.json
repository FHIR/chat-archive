[
    {
        "content": "<p>Just init stream for discussion of FHIR -&gt; JSON schema. <span class=\"user-mention\" data-user-id=\"191325\">@Dunmail</span> <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> </p>",
        "id": 153811019,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448282486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191325\">@Dunmail</span>  we need to separate node code from pure convertion and validation code.<br>\nAlse let's decide on language (es6?) and project location</p>",
        "id": 153811020,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448282547
    },
    {
        "content": "<p>I hate vanilla js syntax, <span class=\"user-mention\" data-user-id=\"191325\">@Dunmail</span>  are you ok about es6?</p>",
        "id": 153811061,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448287475
    },
    {
        "content": "<p>ES6 = TypeScript?</p>",
        "id": 153811063,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1448287515
    },
    {
        "content": "<p>Without the types...</p>",
        "id": 153811064,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1448287521
    },
    {
        "content": "<p>almost :) just a subset of TypeScript :)</p>",
        "id": 153811065,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448287552
    },
    {
        "content": "<p><a href=\"https://babeljs.io/docs/learn-es2015/\" target=\"_blank\" title=\"https://babeljs.io/docs/learn-es2015/\">https://babeljs.io/docs/learn-es2015/</a> is a good overview</p>",
        "id": 153811066,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1448287585
    },
    {
        "content": "<p>I found how to make babel faster - just add exclude: node_modules to babelrc :)</p>",
        "id": 153811067,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448287615
    },
    {
        "content": "<p>Ah, that sounds better!</p>",
        "id": 153811068,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1448287633
    },
    {
        "content": "<blockquote>\n<p>Without the types...</p>\n</blockquote>\n<p>Ha. The crucial part.</p>",
        "id": 153811069,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1448287773
    },
    {
        "content": "<p>Ok. Read it. Understand the differences.</p>",
        "id": 153811070,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1448287807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span>  time to learn some dynamic lang :)</p>",
        "id": 153811071,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448287834
    },
    {
        "content": "<p>Conformance -&gt; swagger.json -&gt; auto-generated clients</p>",
        "id": 153811073,
        "sender_full_name": "Dunmail",
        "timestamp": 1448287916
    },
    {
        "content": "<p>I am not spending my days chasing down a bug that a compiler could have found. Like assigning strings to integers or calling functions with missing params. I have done that for ages in older languages pre-javascript. No thanks ;-)   TypeScript is dynamic enough for me.</p>",
        "id": 153811075,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1448288016
    },
    {
        "content": "<p>You have to be a user of Haskell :)</p>",
        "id": 153811076,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448288038
    },
    {
        "content": "<p>Here is purescript for real typed guys - <a href=\"http://www.purescript.org/\" target=\"_blank\" title=\"http://www.purescript.org/\">http://www.purescript.org/</a></p>",
        "id": 153811077,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448288072
    },
    {
        "content": "<p>still hate js and es6 syntax, so much boilerplate in comparison with coffeescript <img alt=\":unamused:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/unamused.png\" title=\":unamused:\"> </p>",
        "id": 153811085,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448297785
    },
    {
        "content": "<p>Y. Coffescript is nice!</p>",
        "id": 153811097,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1448310231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191325\">@Dunmail</span>  i've mostly repeated your work and  passed simple test - all examples thro all schemas.  <a href=\"https://github.com/niquola/fhir-schema\" target=\"_blank\" title=\"https://github.com/niquola/fhir-schema\">https://github.com/niquola/fhir-schema</a><br>\nI hope, i'm ready to merge projects and discuss details :) Here is demo - <a href=\"http://niquola.github.io/fhir-schema/#/\" target=\"_blank\" title=\"http://niquola.github.io/fhir-schema/#/\">http://niquola.github.io/fhir-schema/#/</a></p>",
        "id": 153811194,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448467616
    },
    {
        "content": "<p>@<strong>nicola</strong> Like it! What else do we need to do?</p>",
        "id": 153811228,
        "sender_full_name": "Dunmail",
        "timestamp": 1448559529
    },
    {
        "content": "<p>Constraints may be easier if/when structuredefs have fhirpath</p>",
        "id": 153811229,
        "sender_full_name": "Dunmail",
        "timestamp": 1448559644
    },
    {
        "content": "<p>Binding to required valuesets can be done</p>",
        "id": 153811230,
        "sender_full_name": "Dunmail",
        "timestamp": 1448559710
    },
    {
        "content": "<p>I'm fighting with <a href=\"https://github.com/epoberezkin/ajv\" target=\"_blank\" title=\"https://github.com/epoberezkin/ajv\">https://github.com/epoberezkin/ajv</a>. It should be faster then tv4 and more strict.<br>\nWe have to layout library and separate pure JS build, node build, borwser build</p>",
        "id": 153811231,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448559720
    },
    {
        "content": "<p>So we have a core which is just a function StructureDefinition -&gt; JSON Schema</p>",
        "id": 153811232,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448559765
    },
    {
        "content": "<p>Then we could have a nodejs wrapper, which could build from fs for example</p>",
        "id": 153811233,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448559813
    },
    {
        "content": "<p>browser wrapper with cache and async or prebuild schema</p>",
        "id": 153811234,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448559834
    },
    {
        "content": "<p>Let's decide about where on github we'll put it?</p>",
        "id": 153811235,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448559886
    },
    {
        "content": "<p>may be create organization fhir.js?</p>",
        "id": 153811236,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448559897
    },
    {
        "content": "<p>Sounds good. I think core will need a $validate function as we'll need to use .addFormat</p>",
        "id": 153811237,
        "sender_full_name": "Dunmail",
        "timestamp": 1448559947
    },
    {
        "content": "<p>fhir.js org is good!</p>",
        "id": 153811238,
        "sender_full_name": "Dunmail",
        "timestamp": 1448559992
    },
    {
        "content": "<p>What do you think of this lib layout?</p>\n<p><strong>fhir.js/json-schema-core</strong></p>\n<p>Core package for generating json-schema from FHIR structure definitions and<br>\nvalidating FHIR resources against json-schema definitions.</p>\n<p>*Constructor*</p>\n<div class=\"codehilite\"><pre>var instance = new json-schema([schema])\n</pre></div>\n\n\n<ul>\n<li>Returns json-schema instance.</li>\n<li>Instance has a schema property to hold the schema it uses.</li>\n<li>By default, we add the primitives/elements to the schema (maybe fhir core?).</li>\n<li>If prebuilt schema is provided, override existing definitions with new definitions.</li>\n</ul>\n<p>*Get schema*</p>\n<div class=\"codehilite\"><pre>instance.schema = function() {\n    return json-schema.schema object\n}\n</pre></div>\n\n\n<p><strong>Add new definitions to schema</strong></p>\n<div class=\"codehilite\"><pre>instance.add(structureDefinition, callback){\n    if structureDefinition is not an array, coerce to array\n    for each structureDefinition,\n        build schema and add/update in schema.definitions\n    then callback\n}\n</pre></div>\n\n\n<p><strong>Validate resource against a profile</strong></p>\n<div class=\"codehilite\"><pre>instance.validate(resource, [url], [options], callback){\n    if no url assume core resource profiles : https://www.hl7.org/fhir/{{resource.resourceType.toLowerCase}}.profile.json\n    if no schema.definitions[url] throw Error\n\n    ? could we validate against profiles that resource claims to support (via resource meta)\n    ? options to modify validation behaviour\n\n    var result = validator.validate(resource, schema.definitions[url])\n\n    callback(result as OperationOutcome)\n}\n</pre></div>\n\n\n<p><strong>fhir.js/json-schema-node</strong></p>\n<p>Package wrapping fhir.js/json-schema-core to provide additional node specific capabilities:</p>\n<ul>\n<li>add profiles from fs location?</li>\n<li>connect middleware function?</li>\n<li>promisify functions?</li>\n</ul>\n<p><strong>fhir.js/json-schema-bower</strong></p>\n<p>(Not necessarily bower!)</p>\n<p>Package wrapping fhir.js/json-schema-core to provide additional browser-specific capabilities</p>\n<ul>\n<li>aysnc support?</li>\n<li>add profiles from localstorage?</li>\n</ul>",
        "id": 153811246,
        "sender_full_name": "Dunmail",
        "timestamp": 1448616465
    },
    {
        "content": "<p>May be start from one repo with many builds?</p>",
        "id": 153811247,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448618274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191325\">@Dunmail</span> Put you ideas to fhir.js/fhir-schema - at least this would be umbrella project for all packages.</p>",
        "id": 153811248,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448618774
    },
    {
        "content": "<p>Yes - can always refactor to other projects if we need to</p>",
        "id": 153811249,
        "sender_full_name": "Dunmail",
        "timestamp": 1448622969
    },
    {
        "content": "<p>Let's just list modules:</p>\n<ul>\n<li>schema-generation</li>\n<li>schema-usage</li>\n<li>schema-adapters</li>\n<li>different JSON schema enginies</li>\n<li>browser</li>\n<li>node</li>\n<li>schema-build (include schema for current  FHIR specs)</li>\n</ul>",
        "id": 153811250,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448624610
    },
    {
        "content": "<p>What does schema-adapter do?</p>",
        "id": 153811251,
        "sender_full_name": "Dunmail",
        "timestamp": 1448624743
    },
    {
        "content": "<p>there are a lot of JSON schema engines - so adapters would just glue library to concrete ones </p>",
        "id": 153811252,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448624800
    },
    {
        "content": "<p>Got it</p>",
        "id": 153811253,
        "sender_full_name": "Dunmail",
        "timestamp": 1448624837
    },
    {
        "content": "<p>I've played with ajv, it's one order faster then tv4 for example. But top level api of this libraries very different</p>",
        "id": 153811254,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448624845
    },
    {
        "content": "<p>OK</p>",
        "id": 153811255,
        "sender_full_name": "Dunmail",
        "timestamp": 1448624880
    },
    {
        "content": "<p>so for example usage could looks like:</p>\n<div class=\"codehilite\"><pre><span class=\"nx\">fhir</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fhir-schema/tv4&#39;</span><span class=\"p\">)</span>\n<span class=\"nx\">or</span>\n<span class=\"nx\">fhir</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fhir-schema/ajv&#39;</span><span class=\"p\">)</span>\n</pre></div>",
        "id": 153811256,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448624901
    },
    {
        "content": "<p>I could organize my code as initial repo and push to github. Is it ok?</p>",
        "id": 153811257,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448624968
    },
    {
        "content": "<p>Or we could start from your repo....</p>",
        "id": 153811258,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448624990
    },
    {
        "content": "<p>Better than OK :)</p>\n<p>Have sent a couple of PRs, porting from the proof of concept lib I did</p>",
        "id": 153811259,
        "sender_full_name": "Dunmail",
        "timestamp": 1448625023
    },
    {
        "content": "<p>Here is it  - <a href=\"https://github.com/fhir-js/fhir-schema\" target=\"_blank\" title=\"https://github.com/fhir-js/fhir-schema\">https://github.com/fhir-js/fhir-schema</a></p>",
        "id": 153811260,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1448641976
    },
    {
        "content": "<p>To discussion about selecting schema based on resourceType:  swagger supports - \"discriminator\". Adds support for polymorphism. The discriminator is the schema property name that is used to differentiate between other schema that inherit this schema. The property name used MUST be defined at this schema and it MUST be in the required property list. When used, the value MUST be the name of this schema or any schema that inherits it.</p>",
        "id": 153811427,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1449221942
    }
]