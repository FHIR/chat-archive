[
    {
        "content": "<p>Hi all, it's been a 'to-do' for a while to look at splitting out the TypeScript definitions to be have some runtime (e.g., classes), split into individual files, etc.  I've started working on a pass of changes, using a new language definition to ensure I don't break anything for anyone else.  The current R4 output is in a temp repo: <a href=\"https://github.com/GinoCanessa/FhirTypeScriptOddsAndEnds\">https://github.com/GinoCanessa/FhirTypeScriptOddsAndEnds</a> .</p>\n<p>The code to generate it (for those playing with fhir-codegen) is in the <a href=\"https://github.com/microsoft/fhir-codegen/tree/dev\">dev branch</a>.</p>\n<p>There are still some things I'm not happy with (e.g., not sure about constructors vs. factory pattern to make parsing easier), but it's a start.  Cheers!</p>",
        "id": 268073229,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1642194668
    },
    {
        "content": "<p>If I'm constructing (say) a Condition from JSON, at what point do things like the CodeableConcept constructor for Condition.code get executed?</p>",
        "id": 268084607,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1642200904
    },
    {
        "content": "<p>Do I need to invoke that myself, or will the Condition constructor eventually handle this, or is the expectation that CodeableConcept is acting only as an interferface and nobody ever needs to create instances of that class because a genetic object implementing the interface is sufficient? (If we start attaching behavior to the classes, that would force us into instantiating them...)</p>",
        "id": 268084858,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1642201059
    },
    {
        "content": "<p>Cool! But I'm not sure I understand the use-case of these model classes.. Are we not able to enforce this validation with JSON schema at runtime (and rely on DT type definitions at develop time)?</p>\n<p>In any case, I find my odds-and-ends usually ends up including a set of type predicate guards when I am dealing with polymorphic things, along these lines.:</p>\n<div class=\"codehilite\"><pre><span></span><code>export const isPatient = (resource: any): resource is fhir4.Patient =&gt; {\n   return resource.resourceType === &#39;Patient&#39;\n}\n</code></pre></div>",
        "id": 268463827,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1642544190
    },
    {
        "content": "<blockquote>\n<p>Are we not able to enforce this validation with JSON schema at runtime </p>\n</blockquote>\n<p>Sure -- might want to incorporate something like <a href=\"https://ajv.js.org/\">https://ajv.js.org/</a> if the basis of runtime validation is JSON schema; embedding validation as a capability in classes work too though (and aligns with how some other FHIR language libraries work).</p>",
        "id": 268464972,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1642544723
    },
    {
        "content": "<p>Thanks Brian!  This is moving towards the concept of a 'fuller' JS/TS library, and is just one idea I had to move forward.  I've looked at a few things for run-time type checking (like io-ts) but I want to see how much we can get without additional dependencies.  Mostly because I've found people are opinionated about which one to use =).</p>\n<p>I also found myself adding back things removed for DT type definitions during development..  Things like instances of enumerations for value-sets, which cannot live in interface files.</p>",
        "id": 268465850,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1642545276
    },
    {
        "content": "<p>And blah, missed your earlier questions <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> :  That's the kind of thing I am testing with the definitions.  I expect to make some pretty major changes to that pass - right now I'm trying to evaluate if it's better to move to a factory pattern so that you can choose a <code>fromJson</code> and <code>fromObject</code> separately in order to get different behaviors... </p>\n<p>Basically, I just wanted to push and see what works and what doesn't.</p>",
        "id": 268466132,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1642545455
    },
    {
        "content": "<p>re: ajv.js, I <em>think</em> I remember that the FHIR definitions did not play well with JSON Schema (some sort of design-assumption incompatibility).  I'll add to my list to see if that's true or not though.</p>",
        "id": 268466397,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1642545588
    },
    {
        "content": "<p>May be time to investigate <a href=\"https://datatracker.ietf.org/doc/html/rfc8927\">https://datatracker.ietf.org/doc/html/rfc8927</a> for FHIR too! (Avj supports both -- FWIW we've used Avj with JSON schema for basic FHIR validation in SMART Health Cards tooling.)</p>",
        "id": 268468744,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1642546915
    },
    {
        "content": "<p>the json community re-inventing XML... how adorable</p>",
        "id": 268472787,
        "sender_full_name": "John Moehrke",
        "timestamp": 1642549433
    },
    {
        "content": "<p>Show me the namespaces!</p>",
        "id": 268477886,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1642553229
    },
    {
        "content": "<p>We tried using the JSON schemas provided in the r4 downloads, <a href=\"https://www.hl7.org/fhir/fhir.schema.json.zip\">https://www.hl7.org/fhir/fhir.schema.json.zip</a>, before and hit a slew of semantic validations not raising as errors. For example, required fields are not being marked as required. We ended up falling back to the HAPI java validator because so much was missing from the downloadable JSON schemas. I don't think this is a problem with the js JSON validator libs but the actual schemas being generated for the downloads in fhir r4.</p>\n<p>Just an FYI for anyone fully depending on those FHIR JSON schemas only.</p>",
        "id": 269278880,
        "sender_full_name": "Mike Lohmeier",
        "timestamp": 1643126733
    },
    {
        "content": "<p>Ok, so the next pass is posted for thoughts.  Right now, I've added another tree of exports for interfaces.  So, the root index exports <code>interfaces</code>, <code>models</code>, and <code>valuesets</code>.  There's been a bit of back and forth about required elements/constructors, so what I have tentatively landed on is:</p>\n<ul>\n<li>Define the interface that contains the elements for a type.</li>\n<li>Optional elements are decorated with <code>?</code> syntax, but all elements have <code>|undefined</code> - this allows for adding required properties later, but still have good hinting on what is actually required.</li>\n<li>Classes implement the relevant interface (e.g., <code>fhirModels.Patient implements fhirInterfaces.IPatient</code>).</li>\n<li>Constructors use the <code>Partial&lt;T&gt;</code> hint so that you can create a class without all the required elements.</li>\n<li>Classes define a static factory function (<code>CreateStrict</code> right now) that takes the interface without a partial tag, so that you can ensure you have all required elements.  It throws if something is missing.</li>\n<li>Classes define an instance function (<code>checkRequiredElements</code> right now) that checks to see if the instance has values for all required elements (incomplete, but should be enough to give the idea... I have not looked at choice types yet).</li>\n</ul>\n<p>I have been focused on the generation, so I have not <em>used</em> this output yet (I did make sure it compiles =).  I will get to that when I can, but thought it would be good to post before the weekend.</p>\n<p>Cheers!</p>\n<p>(edit: one thing I know I want to update is adding an interface around those functions so that they can be used generically).</p>\n<p>(edit2: Also, there is a <code>FhirResourceFactory</code> function in <code>models.ts</code> which uses the <code>resourceType</code> value to create a resource of that type)</p>\n<p>(edit3: Files are on <a href=\"https://github.com/GinoCanessa/FhirTypeScriptOddsAndEnds\">GitHub</a> =)</p>",
        "id": 269809454,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1643407596
    },
    {
        "content": "<p>Another note: something I want to evaluate is either using a model like this, or using a separate set of 'strict' models and 'optional' models that both get exported.</p>",
        "id": 269814645,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1643410508
    },
    {
        "content": "<p>Ok, pushed another pass up to <a href=\"https://github.com/GinoCanessa/FhirTypeScriptOddsAndEnds\">GitHub</a>.  I was not happy with how convoluted everything got on the last pass, so I split everything into a 'strict' and 'optional' version.</p>\n<p>All interfaces and models are just replicated between the two, so that you can pick and choose when importing:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">OptionalModels</span> <span class=\"kr\">as</span> <span class=\"nx\">fhir4</span> <span class=\"p\">}</span>  <span class=\"kr\">from</span> <span class=\"s1\">'./index'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Patient</span><span class=\"p\">,</span> <span class=\"nx\">OperationOutcome</span> <span class=\"p\">}</span> <span class=\"kr\">from</span> <span class=\"s1\">'./strictmodels'</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The <code>CreateStrict</code> and <code>checkRequiredElements</code> still exist on the optional, but not on the strict versions.  I would like to add some sort of opposite function to strict (e.g., check if some arbitrary object has the elements to <em>be</em> of a class), but have not added it yet.</p>\n<p>Any comments/thoughts/feedback welcome.</p>",
        "id": 270099213,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1643660673
    }
]