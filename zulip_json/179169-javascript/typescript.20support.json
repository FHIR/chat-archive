[
    {
        "content": "<p>Hi all, we are working toward having typescript definitions for STU3, R4, (and eventually R5). </p>\n<p>The original effort can be tracked here in this PR: <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/pull/49574\">https://github.com/DefinitelyTyped/DefinitelyTyped/pull/49574</a>. As you can see in the conversation, this will take a few steps; the first is to properly version the existing @types/fhir to be 3.0. That has started here: <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/pull/49719\">https://github.com/DefinitelyTyped/DefinitelyTyped/pull/49719</a></p>\n<p>Anyway, if you are interested in typescript, feel free to comment or otherwise contribute towards this effort!</p>",
        "id": 217509373,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1605977992
    },
    {
        "content": "<p>Hi Brian, if you are looking for some base definitions to start from, I have a set posted at: <a href=\"https://github.com/microsoft/fhir-codegen/tree/main/generated\">https://github.com/microsoft/fhir-codegen/tree/main/generated</a> .  In general, the <a href=\"https://github.com/microsoft/fhir-codegen\">project</a> can output various languages, with the TypeScript output being done by <a href=\"https://github.com/microsoft/fhir-codegen/blob/main/src/Microsoft.Health.Fhir.SpecManager/Language/TypeScript.cs\">this file</a>.</p>\n<p>Happy to make changes or accept PRs.</p>",
        "id": 217644639,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1606146656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span>  Awesome! I'll take a look. I forked an existing generator and modernized it a bit here: <a href=\"https://github.com/Vermonster/fhir-dts-generator/tree/r4\">https://github.com/Vermonster/fhir-dts-generator/tree/r4</a> and am working toward versioning an r4 at DT soon.</p>",
        "id": 220125263,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1608130591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span>  - I am looking at the MS codegen, very nice! I would like to use the output of this for my own projects and also publish to DefinatelyTyped (now we have major FHIR version tracking setup there). </p>\n<p>One nice change -- in the event the property is of type code, and has a required binding, it would be great to take advantage of the Enums that are produced instead of having it a <code>string</code>.</p>\n<p>For instance, this example (set <code>use?: HumanNameUseCodes</code> instead of <code>use?: string</code>).</p>\n<p><a href=\"/user_uploads/10155/5Yi5StwmDKdeZxsKXcwWyv3U/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/5Yi5StwmDKdeZxsKXcwWyv3U/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/5Yi5StwmDKdeZxsKXcwWyv3U/image.png\"></a></div><p>I am trying to figure where in the source code to look for this, any pointers?</p>",
        "id": 223840434,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1611528615
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> , I'm glad it's useful!</p>\n<p>This is done in the Firely output, so one good place to start is there.   If you look at <code>Language\\CSharpFirely2</code> line 1402 (<code>WriteCodedElement</code>), the function starts with a form of the checks you would want to use.  In the <code>Language\\TypeScript</code> file, I'd say the easiest place to match it would be around line 549 (<code>WriteElement</code>).  I don't have all the context loaded in my head, but I'd be happy to spend more time on it either later in the week or next (depending on WGM schedule).</p>\n<p>As a note on language development with codegen, if you regenerate any of the 'standard' files (checked in via the <code>generated</code> directory in the root of the repo) you can use git to see the differences your changes caused.</p>\n<p>I'll continue checking the thread here as possible, so if you have any other questions please feel free to ask!</p>",
        "id": 223923471,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1611592461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span>  -- Here is an attempt - <a href=\"https://github.com/microsoft/fhir-codegen/pull/45\">https://github.com/microsoft/fhir-codegen/pull/45</a>  </p>\n<p>I also have changes to make the code work better cross-platform. There are some strange path defaults that are windows -specific. LMK I can make another PR.</p>",
        "id": 224606031,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1612042252
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> !  I'll take a look shortly.</p>",
        "id": 224751356,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1612196668
    },
    {
        "content": "<p>And yes, I'd love a PR for the path changes as well.  I try to remember to test in WSL periodically, but apparently haven't in quite some time.</p>",
        "id": 224751880,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1612196878
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span>  - I found a bug. When there is a choice type with a <code>1..1</code>, such as <code>UsageContext.value[x]</code> (<a href=\"https://www.hl7.org/fhir/metadatatypes.html#UsageContext\">https://www.hl7.org/fhir/metadatatypes.html#UsageContext</a>), the generated interface is below --  which specifies <em>all</em> types are required:</p>\n<p><a href=\"/user_uploads/10155/YwUU2mN6rEqaG5D3G1dkOsQ3/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/YwUU2mN6rEqaG5D3G1dkOsQ3/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/YwUU2mN6rEqaG5D3G1dkOsQ3/image.png\"></a></div><p>I think we need this sort of pattern (e.g. \"RequireOnlyOne\") <a href=\"https://realfiction.net/2019/02/03/typescript-type-shenanigans-2-specify-at-least-one-property\">https://realfiction.net/2019/02/03/typescript-type-shenanigans-2-specify-at-least-one-property</a>. I can work on another PR.</p>",
        "id": 226576787,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1613509791
    },
    {
        "content": "<p>(or a hack to make them all optional, which is the current situation -- <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/fhir/index.d.ts#L2385-L2402\">https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/fhir/index.d.ts#L2385-L2402</a>)</p>",
        "id": 226576959,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1613509874
    },
    {
        "content": "<p>All optional is probably the best reflection of the FHIR requirements (which even for <code>1..1</code> elements allows you to provivde an extension instead of one of the choices).</p>",
        "id": 226577034,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613509920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> well that's simpler to implement. Should we do that (make them all optional)?</p>",
        "id": 226577227,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1613509997
    },
    {
        "content": "<p>If Gino agrees :)</p>",
        "id": 226577636,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613510168
    },
    {
        "content": "<p>(BTW, the hack you linked to is awesome -- great illustration of how fun/productive the type system is.)</p>",
        "id": 226578276,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613510473
    },
    {
        "content": "<p>Yeah, great catch!.  Let me take a quick peek - making that situation optional should be a quick fix.</p>",
        "id": 226578521,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1613510596
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> -- I am running through the examples to create tests for the generated types... </p>\n<p>Another problem is contained resources have a <code>resourceType</code> property for serialization in JSON. But this is not part of the resource interface. So all these fail:<br>\n<a href=\"/user_uploads/10155/4JfTOuPMcUf3fq8BSmtASVQ_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/4JfTOuPMcUf3fq8BSmtASVQ_/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/4JfTOuPMcUf3fq8BSmtASVQ_/image.png\"></a></div>",
        "id": 226579334,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1613510966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span>  - <a href=\"https://github.com/microsoft/fhir-codegen/pull/47\">PR 47</a> has the optionality change, if you'd like to take a peek before I merge it in (has the change to the TS language and each of the generated files).</p>",
        "id": 226580511,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1613511440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span>  - Awesome!</p>\n<p>Though more testing now, I think my inline of codes caused problems (which I am finding though testing). In here <a href=\"https://github.com/microsoft/fhir-codegen/blob/main/src/Microsoft.Health.Fhir.SpecManager/Language/TypeScript.cs#L590\">https://github.com/microsoft/fhir-codegen/blob/main/src/Microsoft.Health.Fhir.SpecManager/Language/TypeScript.cs#L590</a> I assumed <code>element.Codes</code> is exhaustive. It is not (see the generated list for <code>Observation.status</code>). So I think we either need to remove this, or figure out how to get the exhaustive list in this case.</p>",
        "id": 226581018,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1613511705
    },
    {
        "content": "<p>IIRC, I had issues with that at the time and punted on <code>Resource</code> - defining the field as type <code>string</code> prevented the resources from defining the literal.</p>\n<p>One approach is to define enums (similar to the 'data_types_*' Codings) and then explicitly allow those values (nice and explicit, but quite verbose).<br>\nAnother approach would be to add the field to <code>Resource</code> with something like <code>string|any</code>.</p>\n<p>Thoughts?</p>",
        "id": 226581246,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1613511814
    },
    {
        "content": "<p>This is the approach used presently -- <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/fhir/index.d.ts#L26665\">https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/fhir/index.d.ts#L26665</a></p>",
        "id": 226581724,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1613512038
    },
    {
        "content": "<p>In the codegen approach, I think we could make it a property of Resource as a code/string , and then limit to the list of resource types?</p>",
        "id": 226582209,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1613512248
    },
    {
        "content": "<p>Hmm.. in that file, <code>ResourceBase</code> has a <code>resourceType?: code;</code> element, which is then not included on the actual resources (e.g., <code>Patient</code> does not have anything that indicates the <code>resourceType</code> must be present and must be the literal 'Patient').</p>\n<p>If we want to do something similar, I'd lean towards defining the union of the literals as allowed on resource, then each individual on the type.</p>",
        "id": 226582776,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1613512516
    },
    {
        "content": "<p>For the codes (e.g., <code>Observation.status</code>, I should have the proper expansion loaded, give me a minute to see.</p>",
        "id": 226582844,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1613512558
    },
    {
        "content": "<p>right, I like how you have the resourceType guard. I like the idea of adding the exhaustive set of literals on Resource.</p>",
        "id": 226584794,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1613513133
    },
    {
        "content": "<p>Codes was an easy fix - <a href=\"https://github.com/microsoft/fhir-codegen/commit/5656be0eae6019da7223ecbf986c453f4794cd98\">this commit</a> has the code changes and new generated files.  It uses the expansions instead of the resource-embedded versions.</p>\n<p>I'm looking at the resourceType changes, so haven't made another PR yet.</p>",
        "id": 226587336,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1613513855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> - in working through the implementation, I'm concerned about the performance implication of putting the literals together.  Doing string comparisons to a list of &gt;100 literal values isn't great for performance.</p>\n<p>I've added the field as <code>any</code> on Resource for now - it's in <a href=\"https://github.com/microsoft/fhir-codegen/pull/48\">PR 48</a>.  If this works for you I'll merge it in.  If it doesn't, please let me know.</p>\n<p>Thanks!</p>",
        "id": 226693623,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1613583014
    },
    {
        "content": "<p>Okay, if anyone is interested in typescript, I pushed a commit to DT that has R4 (current), and versions R3 and R2 -- <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/pull/53511\">https://github.com/DefinitelyTyped/DefinitelyTyped/pull/53511</a> -- please comment so we can get this pushed through (the DT people might not be familiar with FHIR).</p>",
        "id": 240772356,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1622406307
    },
    {
        "content": "<p>Done!</p>\n<p>You can <code>npm i -D @types/fhir</code> and enjoy 3 namespaces: <code>fhir2</code>, <code>fhir3</code>, and <code>fhir4</code> in all your favorite typescript project.</p>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span>  and others for help! I have a talk next week at DevDays about this, and will post some examples online.</p>",
        "id": 241301922,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1622659385
    },
    {
        "content": "<p>Thank you for all of your hard work!  This is great, and I am looking forward to the session!</p>",
        "id": 241309609,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1622662988
    },
    {
        "content": "<p>I have review existing type annotation and find out that Bundle is not generic.<br>\nIn type generator, my team developed <a href=\"https://github.com/beda-software/aidbox-ts-generator\">https://github.com/beda-software/aidbox-ts-generator</a> it is generic.</p>\n<p>Both Bundle <a href=\"https://github.com/beda-software/sdc-ide/blob/master/shared/src/contrib/aidbox/index.ts#L1361\">https://github.com/beda-software/sdc-ide/blob/master/shared/src/contrib/aidbox/index.ts#L1361</a><br>\nand BundleEntry <a href=\"https://github.com/beda-software/sdc-ide/blob/62d3a74b5ac6e5eec6e51ee3edb4ed2f01419486/shared/src/contrib/aidbox/index.ts#L1385\">https://github.com/beda-software/sdc-ide/blob/62d3a74b5ac6e5eec6e51ee3edb4ed2f01419486/shared/src/contrib/aidbox/index.ts#L1385</a><br>\nare generics.</p>\n<p>I decided to contribute to <a href=\"https://github.com/microsoft/fhir-codegen/\">https://github.com/microsoft/fhir-codegen/</a> to add this useful feature and find out that it is written with C# <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> </p>\n<p>I am not sure what used under the hood in fhir-codegen. It seems that it works with pure strings. Please correct me if I am wrong here.</p>\n<p>In aidbox-ts-generator we are using <a href=\"https://ts-morph.com/\">https://ts-morph.com/</a> to generate TypeScript AST. <br>\nIt is a simple and powerful way, and you can see how simple and elegant implementation may be.<br>\nIt is only 443 lines of code. </p>\n<p>So why are we using the C# version fot the type annotation generator?</p>",
        "id": 242799940,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1623791253
    },
    {
        "content": "<p>Hi Ilya, there's no conspiracy here... it uses C# because that's what I started the project in  =).  The code generator is a generic tool that reads any version of the FHIR specification (and coming soon: IGs), normalizes it, and exports code - there are a several languages exported today, as well as some non-language things like the Info files or visualization experiments with Cytoscape.</p>\n<p>I added TypeScript when I needed it and couldn't find anything usable (particularly because I was trying to use Connectathon preview builds, which I failed to find any tooling around).  Brian picked it up and did the work (I helped! =) to modify it for DT.  If someone wants to rewrite all of the generation code in TS, I can provide pointers - but it's a fair bit of work for all the backend stuff and I don't plan to rewrite it for every language I use.  Everything is cross-platform, so there shouldn't be any barriers there.</p>\n<p>I'll note that I chose this method over static transformations (e.g., templating) because the experience I saw with templating over time was that it became unusable (e.g., the templates for the C# library over 10 years of changes).  I wanted something that completely separated the language part from the specification part, and would have either needed to create my own IL or do something like this <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n<p>In that project, the language export is separate from all the specification stuff, and is typically a single file.  For TS, it's all in <a href=\"https://github.com/microsoft/fhir-codegen/blob/main/src/Microsoft.Health.Fhir.SpecManager/Language/TypeScript.cs\">Language/TypeScript.cs</a>, which comes in at a total of 765 lines and includes a fair bit of boilerplate and pretty formatting.</p>\n<p>I have a fair bit of <a href=\"https://microsoft.github.io/fhir-codegen/\">documentation</a>, though it is slightly out of date (typing this made me discover that I lost the automatic update part when I changed computers - so that'll be fixed soon).  If it would be helpful to go through it in detail, I am happy to do that as well.</p>\n<p>While PRs are preferred, I'm also fine with making changes based on discussion here or GH requests.  If there's a 'new' version for an object that I can diff with the existing output, I can work through changes.  I'll note that PR's are preferred because I have a pretty full plate right now.  Also, since these definitions are being used in an 'official' way, we can either make branches to test modifications or fork the existing TS language file into a new language to test until we want to update the original.</p>",
        "id": 242806030,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1623794865
    },
    {
        "content": "<p>Gino, thank you for the detailed explanation. I clarify a lot for me.</p>\n<p>As I mentioned, I am not familiar with the C# ecosystem. Is it possible to upload the compiled version of fhir-codegen to npm to allow launch it throw npx to get a similar experience to all other nodejs ecosystem?<br>\nWill it require mono runtime to be installed in the system first? Are there any possible backward compatibility issues with such an approach? Is there something similar to <a href=\"https://www.graalvm.org/\">https://www.graalvm.org/</a> for .net world?</p>\n<p>As I mentioned on DevDay it is important to move the type annotation generation process on the application layer. <br>\nInstead of using generic fhir4 from npm, developers need a profiled version of FHIR. <br>\nProfiles are defined on the app layer, so the codegen process should happen there as well. <br>\nSo, the goal for TypeScript annotation generator is not just to generate a set of predefined fhir2, fhir3, fhir4, etc.<br>\nt is highly important to give developers a simple way to create type annotation for the app runtime.</p>\n<p>Finally, it all my thoughts, please feel free to correct me if I am wrong somewhere, and let's continue the discussion.</p>\n<p><span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> I would like to hear your thought as well.</p>",
        "id": 242840058,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1623828678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"196255\">@Ilya Beda</span>  -- a few thoughts:</p>\n<ul>\n<li>\n<p>I also don't regularly use C#, and am on mac. I use asdf (<a href=\"https://asdf-vm.com/\">https://asdf-vm.com/</a>) to manage all my languages across all my projects (here are all the languages <a href=\"https://github.com/asdf-vm/asdf-plugins\">https://github.com/asdf-vm/asdf-plugins</a>), and it also works fine for dotnet (<a href=\"https://github.com/emersonsoares/asdf-dotnet-core\">https://github.com/emersonsoares/asdf-dotnet-core</a>)</p>\n</li>\n<li>\n<p>I found this command handy for running the codegen project (from the root of the git repo):</p>\n</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>&gt; dotnet build\n&gt; dotnet src/fhir-codegen-cli/bin/Debug/netcoreapp3.1/fhir-codegen-cli.dll --official-expansions-only true --export-types &quot;primitive|complex|resource&quot; --language TypeScript\n</code></pre></div>\n<p>See the documentation for argument reference - <a href=\"https://github.com/microsoft/fhir-codegen\">https://github.com/microsoft/fhir-codegen</a>.</p>\n<ul>\n<li>You could package up the output of codegen to make and npm module (adding package.json, etc). I have a GH project that I will push later this week that I used to packages up special for DT. This includes generating tests from all the examples in the FHIR spec. Then does linting, testing, and then creates this structure with these files so making future PRs could be simplified: <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/fhir\">https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/fhir</a></li>\n</ul>",
        "id": 242907528,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1623861656
    },
    {
        "content": "<p>No problem Ilya!</p>\n<p>Regarding C#, there are similar tools in general - each community ends up building roughly the same things, but with different priorities.  So, some will be \"better\" and some will be \"worse\" in a completely subjective way.</p>\n<p>As I did during DevDays, I disagree that the generation needs to be in the application layer - or at least that it is useful to replicate that work now.  In order to do the generation, we need local access to the specifications, the expansions, and eventually any IGs in question.  Especially if multiple versions are supported (and the intention is to continue into the future), there is a lot of plumbing work that I think of as infrastructure tooling.  That is the same reason why this tool works off of the built versions of the specifications instead of the definitional inputs - there is a lot of work that people are already doing and I can leverage that instead of repeating the effort.  It may be nice one day in the future that to have the same code that builds the Java definitions also export multiple languages, but I am not worried about it now.</p>\n<p>That said, I am aware that each of us also has different needs and priorities, so I will also try to assist anyone if they do want to take on the project of doing an equivalent project from the ground up.  But I consider part of that suggesting \"don't do it\"  =).  For some short and recent examples: 4.0.1 changed some internal type tracking (JSON/XML type to FHIR type), which broke code gen at that time; the inheritance models were changed, which broke a bunch of things again; then R5 (and now R4B) moved the build input from the spreadsheets to StructureDefinitions, which had a lot of little implications, etc..  None of these are related to any particular language, they are just development taxes that need to be paid.  In this project, those changes were isolated and fixed without any changes to the language exporters.</p>\n<p>I hope the goal is to move beyond 'pile of generated types' and get to a proper generic FHIR library (of which I believe there are several in progress, but to my knowledge there isn't a clear 'winner' yet).  In C# land, the generated code is used as a part of the larger library created by Firely (in fact this was swapped in for another system, which was already the second or third, if I remember correctly).  Much of the functionality in a library is not something that should be generated - this project started as me trying to move that boundary a bit in one direction.</p>\n<p>In that model, tailoring the core definitions to look a way that works in a library makes sense, so things like generics will be good across-the-board improvements.  I would expect library usage to be adding an NPM for the core (e.g., FHIR R4), and provide some path for developers to work with IGs that does not involve large or complex pipelines.  There may need to be additional tools that extend the already generated code (e.g., something in TS contained in the library), a service that lets you grab the definitions you want (e.g., download via FHIR registry, Simplifier, a standalone site, etc.), or some other plumbing.</p>\n<p>Overall, I am happy to contribute as needed.  I am quite happy to defer on what is needed to some of the many people here who can speak better to that direction.  But I will note that I also do not plan to redo several years worth of work to change the language.</p>",
        "id": 242918747,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1623866516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191782\">Brian Kaney</span> <a href=\"#narrow/stream/179169-javascript/topic/typescript.20support/near/242907528\">said</a>:</p>\n<blockquote>\n<ul>\n<li>I found this command handy for running the codegen project (from the root of the git repo):</li>\n</ul>\n<p><div class=\"codehilite\"><pre><span></span><code>&gt; dotnet build\n&gt; dotnet src/fhir-codegen-cli/bin/Debug/netcoreapp3.1/fhir-codegen-cli.dll --official-expansions-only true --export-types &quot;primitive|complex|resource&quot; --language TypeScript\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks, I couldn't get this working when I, similarly to <span class=\"user-mention\" data-user-id=\"196255\">@Ilya Beda</span> tried earlier in the week to build the project and couldn't figure out how to actually execute it (also a Mac user). <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> would you accept a PR from me that basically just adds the above under a 'development' heading?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"222054\">Gino Canessa</span> <a href=\"#narrow/stream/179169-javascript/topic/typescript.20support/near/242918747\">said</a>:</p>\n<blockquote>\n<p>There may need to be additional tools that extend the already generated code (e.g., something in TS contained in the library), a service that lets you grab the definitions you want (e.g., download via FHIR registry, Simplifier, a standalone site, etc.), or some other plumbing.</p>\n</blockquote>\n<p>We would need this in order to, for example, write a TS native Validator. To be clear though are you agreeing that a PR to add, in this specific case, to make Bundle generic in the TS output?</p>",
        "id": 242922381,
        "sender_full_name": "Joshua Kelly",
        "timestamp": 1623868175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416067\">@Joshua Kelly</span><br>\nRe: documentation: of course!  I hadn't realized the deficiency in the documentation as it was.  If you add something I will try to keep it up to date; I finally got around to replacing my 17\" MBP with an M1, so I can start testing there myself periodically as well.</p>\n<p>Re: Generics: yes, with the caveat that I don't want to break Brian's version that's in DT.  So if he's on board with the change we can modify the existing TS output and if not, we can add an new language output for it (e.g., TS_Generic, etc.).</p>\n<p>Generally speaking, I try not to step on toes of people maintaining a language.  Since it's about 10 seconds of work to duplicate it as a new 'language' for export, that's an easy alternative.</p>",
        "id": 242927900,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1623870594
    },
    {
        "content": "<blockquote>\n<p>Re: Generics: yes, with the caveat that I don't want to break Brian's version that's in DT. So if he's on board with the change we can modify the existing TS output and if not, we can add an new language output for it (e.g., TS_Generic, etc.).</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I think we should do this, as the types were just released is early enough to support some churn. I can see about including notes to describe this change.</p>",
        "id": 242934097,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1623873336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"222054\">Gino Canessa</span> <a href=\"#narrow/stream/179169-javascript/topic/typescript.20support/near/242927900\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"416067\">Joshua Kelly</span><br>\nRe: documentation: of course!  I hadn't realized the deficiency in the documentation as it was.  If you add something I will try to keep it up to date; I finally got around to replacing my 17\" MBP with an M1, so I can start testing there myself periodically as well.</p>\n</blockquote>\n<p>Done - sent a PR. I successfully reproduced the TS build on a Mac.</p>\n<p>Here's a direct comparison of <code>Bundle</code> between the two implementations (fhir-codegen first):</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"k\">export</span> <span class=\"kd\">interface</span> <span class=\"nx\">Bundle</span> <span class=\"k\">extends</span> <span class=\"nx\">Resource</span> <span class=\"p\">{</span>\n  <span class=\"nx\">resourceType</span><span class=\"o\">:</span> <span class=\"s1\">'Bundle'</span><span class=\"p\">;</span>\n  <span class=\"nx\">entry?</span>: <span class=\"kt\">BundleEntry</span><span class=\"p\">[];</span>\n  <span class=\"nx\">identifier?</span>: <span class=\"kt\">Identifier</span><span class=\"p\">;</span>\n  <span class=\"nx\">link?</span>: <span class=\"kt\">BundleLink</span><span class=\"p\">[];</span>\n  <span class=\"nx\">signature?</span>: <span class=\"kt\">Signature</span><span class=\"p\">;</span>\n  <span class=\"nx\">timestamp?</span>: <span class=\"kt\">string</span><span class=\"p\">;</span>\n  <span class=\"nx\">_timestamp?</span>: <span class=\"kt\">Element</span><span class=\"p\">;</span>\n  <span class=\"nx\">total?</span>: <span class=\"kt\">number</span><span class=\"p\">;</span>\n  <span class=\"kd\">type</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"s1\">'document'</span><span class=\"o\">|</span><span class=\"s1\">'message'</span><span class=\"o\">|</span><span class=\"s1\">'transaction'</span><span class=\"o\">|</span><span class=\"s1\">'transaction-response'</span><span class=\"o\">|</span><span class=\"s1\">'batch'</span><span class=\"o\">|</span><span class=\"s1\">'batch-response'</span><span class=\"o\">|</span><span class=\"s1\">'history'</span><span class=\"o\">|</span><span class=\"s1\">'searchset'</span><span class=\"o\">|</span><span class=\"s1\">'collection'</span><span class=\"p\">);</span>\n  <span class=\"nx\">_type?</span>: <span class=\"kt\">Element</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"k\">export</span> <span class=\"kd\">interface</span> <span class=\"nx\">Bundle</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span> <span class=\"k\">extends</span> <span class=\"nx\">Resource</span> <span class=\"o\">=</span> <span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">readonly</span> <span class=\"nx\">resourceType</span><span class=\"o\">:</span> <span class=\"s1\">'Bundle'</span><span class=\"p\">;</span>\n    <span class=\"nx\">id?</span>: <span class=\"kt\">id</span><span class=\"p\">;</span>\n    <span class=\"nx\">meta?</span>: <span class=\"kt\">Meta</span><span class=\"p\">;</span>\n    <span class=\"nx\">entry?</span>: <span class=\"kt\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">BundleEntry</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n    <span class=\"nx\">identifier?</span>: <span class=\"kt\">Identifier</span><span class=\"p\">;</span>\n    <span class=\"nx\">implicitRules?</span>: <span class=\"kt\">uri</span><span class=\"p\">;</span>\n    <span class=\"nx\">language?</span>: <span class=\"kt\">code</span><span class=\"p\">;</span>\n    <span class=\"nx\">link?</span>: <span class=\"kt\">BundleLink</span><span class=\"p\">[];</span>\n    <span class=\"nx\">signature?</span>: <span class=\"kt\">Signature</span><span class=\"p\">;</span>\n    <span class=\"nx\">timestamp?</span>: <span class=\"kt\">instant</span><span class=\"p\">;</span>\n    <span class=\"nx\">total?</span>: <span class=\"kt\">unsignedInt</span><span class=\"p\">;</span>\n    <span class=\"kd\">type</span><span class=\"o\">:</span> <span class=\"nx\">code</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Supporting generic on <code>Bundle</code> and <code>BundleEntry</code> makes sense to me. So does <code>readme</code> on any <code>resourceType</code> fields for that matter. If I write a PR to support would it would be against <code>fhir-codegen</code> directly right?</p>",
        "id": 243027340,
        "sender_full_name": "Joshua Kelly",
        "timestamp": 1623940712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"196255\">@Ilya Beda</span> apparently it is possible to distribute cross platform binaries inside of an npm package (sqlite3 is apparently installable via npm and is a reference way to do this). So conceivably we could make it <code>npx</code>-friendly.</p>",
        "id": 243029861,
        "sender_full_name": "Joshua Kelly",
        "timestamp": 1623941646
    },
    {
        "content": "<p><del>@<strong>Joshua Kelly</strong>  - does this accommodate polymorphic bundles?</del> NM: I was confused.</p>",
        "id": 243033251,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1623942813
    },
    {
        "content": "<p>fwiw, the NodeOnFhir implementation is much more similar to the first example (fhir-codegen) which is more EcmaScript-ish.  My understanding from the Meteor ecosystem is that the JVMs are broadly targeting EcmaScript as their underlying implementation, and TypeScript just gets compiled down to that.  </p>\n<p>(I hope we proceed cautiously with encouraging inline typing.  Just because we can, doesn’t always mean we should.)</p>",
        "id": 243038550,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1623944712
    },
    {
        "content": "<p>We could make a docker image (e.g. with dotnet and the CLI installed), then invoke with a local volume mount. I don't really see compelling benefits having an npm wrapper for fhir-codegen.</p>",
        "id": 243038780,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1623944797
    },
    {
        "content": "<p>For purposes of discussion of generics in the definition specifically, generic support lets you constrain the entries of a Bundle, like so (adding some Resource other than Patient or Practioner would cause it to fail, and specifying none at all is fine).</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kd\">const</span> <span class=\"nx\">bundle</span>: <span class=\"kt\">Bundle</span><span class=\"o\">&lt;</span><span class=\"nx\">Patient</span> <span class=\"o\">|</span> <span class=\"nx\">Practitioner</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">resourceType</span><span class=\"o\">:</span> <span class=\"s2\">\"Bundle\"</span><span class=\"p\">,</span>\n    <span class=\"kd\">type</span><span class=\"o\">:</span> <span class=\"s2\">\"collection\"</span><span class=\"p\">,</span>\n    <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"resource\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"resourceType\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Patient\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"id\"</span><span class=\"o\">:</span> <span class=\"s2\">\"patient-01\"</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"resource\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"resourceType\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Practitioner\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"id\"</span><span class=\"o\">:</span> <span class=\"s2\">\"practitioner-01\"</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This doesn't feel like anything but a nice additive improvement to me since it doesn't break using them without this annotation.</p>\n<p><span class=\"user-mention\" data-user-id=\"191678\">@Abbie Watson</span> agree that ES target is the \"prize\" with TS in general. I see it as a way to build great ES tools. I think having a really holistic implementer story that considers how to effectively use types throughout a project and in different ways is important to get right.</p>",
        "id": 243080220,
        "sender_full_name": "Joshua Kelly",
        "timestamp": 1623961927
    },
    {
        "content": "<p>Here's a WIP commit to support this <span class=\"user-mention\" data-user-id=\"196255\">@Ilya Beda</span>: <a href=\"https://github.com/Automate-Medical/fhir-codegen/commit/8f61e67eb23a814d84546180420c7c97f76b263a\">https://github.com/Automate-Medical/fhir-codegen/commit/8f61e67eb23a814d84546180420c7c97f76b263a</a> - tho <span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> you may have better idea than just hacking the exportName check inline here.</p>",
        "id": 243082095,
        "sender_full_name": "Joshua Kelly",
        "timestamp": 1623962735
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  <span class=\"user-mention\" data-user-id=\"416067\">@Joshua Kelly</span> <br>\nI added a small note <a href=\"https://github.com/Automate-Medical/fhir-codegen/commit/8f61e67eb23a814d84546180420c7c97f76b263a#r52324266\">https://github.com/Automate-Medical/fhir-codegen/commit/8f61e67eb23a814d84546180420c7c97f76b263a#r52324266</a><br>\nplease review.</p>\n<p>I see that T is used as a type of resource inside BundleEntry in example.ts but I can find these changes in the source code.</p>\n<p>I also think that these changes are fully backward compatible and may be safely applied.</p>",
        "id": 243095267,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1623970085
    },
    {
        "content": "<p>I've opened up a new PR on fhir-codegen based off of the feedback from the initial WIP commit above: <a href=\"https://github.com/microsoft/fhir-codegen/pull/66\">https://github.com/microsoft/fhir-codegen/pull/66</a></p>",
        "id": 243550997,
        "sender_full_name": "Joshua Kelly",
        "timestamp": 1624383025
    },
    {
        "content": "<p>Good deal, a few of questions:</p>\n<ol>\n<li>I assume we want this everywhere there is a <code>FhirResource</code> today (e.g., <code>Parameters.parameter.resource</code>, etc.), correct?</li>\n<li>Where do we want the generic annotations?  Is it just on the element and the resource (<code>Bundle&lt;T&gt;</code> and <code>Bundle.entry[].resource&lt;T&gt;</code>) or each step of the way (e.g., also annotate <code>Bundle.entry&lt;T&gt;</code> for consistency).</li>\n<li>For <code>contained</code>, I assume we do <em>not</em> want to bubble up at all (e.g., we don't want <code>Encounter&lt;Patient&gt;</code> or anything crazy like that).  But, we still want <code>Resource.contained&lt;T&gt;</code>, correct?</li>\n</ol>",
        "id": 243552980,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1624383875
    },
    {
        "content": "<p>I'm not clear on use cases for constrained <code>.contained</code>, but if we want this, it kind of implies <code>Resource&lt;ContainedType&gt;</code>, doesn't it? As in your <code>Encounter&lt;Patient | Organization&gt;</code> to describe an Encounter whose <code>.contained[]</code> can include Patients or Organization resources?</p>",
        "id": 243584474,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1624399407
    },
    {
        "content": "<p>Yes, that's why I'm asking about it.  I can see the value in <code>Parameters.parameter</code> (though not as clear to me in <code>Parameter</code> itself).  For the same reason I can see the value in <code>Encounter.contained&lt;Patient&gt;</code>, but I don't really like the idea of making <code>Encounter&lt;Patient&gt;</code> since it's such a rare use case to start with (and I think will cause confusion, especially to new devs).</p>",
        "id": 243585361,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1624399978
    },
    {
        "content": "<p>I don't know that i'd use the generic in the bundle either, as with searches and lots of other types, there are more than 1 type in there, such as with _include, or the outcomes that can be included.<br>\nAnd particularly OperationOutcome should always be in the options for the Bundle I'd be wanting...</p>",
        "id": 243610431,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1624428656
    },
    {
        "content": "<p>For sure the correct use of bundle generics in search would involve expressions like <code>Bundle&lt;Encounter | Patient | OperationOutcome&gt;</code></p>",
        "id": 243655535,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1624456787
    },
    {
        "content": "<p>I don't think that generics should be used everywhere when FHIRResoruce is used.<br>\nBundle and BundleEntry is a quite different situation.<br>\nOne of the most common use cases is when you are using FHIR search API to get a lit of specific resources.</p>\n<p>I am using it like this<br>\n<a href=\"https://github.com/beda-software/aidbox-react/blob/master/src/services/fhir.ts#L154\">https://github.com/beda-software/aidbox-react/blob/master/src/services/fhir.ts#L154</a></p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kd\">const</span> <span class=\"nx\">patients</span> <span class=\"o\">=</span> <span class=\"k\">await</span>  <span class=\"nx\">getFHIRResources</span><span class=\"p\">(</span><span class=\"s1\">'Patient'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>I don't need to specify a type for the <code>patients</code> variable. Based on the <code>getFHIRResources</code> definition TypeScript will automatically calculate it as Bundle&lt;Patient&gt;. It simplifies code a lot and keeps it typesafe.</p>\n<p>When I use _include or _revinclude I have to set type explicitly like this.</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kd\">const</span> <span class=\"nx\">patients</span> <span class=\"o\">=</span> <span class=\"k\">await</span>  <span class=\"nx\">getFHIRResources</span><span class=\"o\">&lt;</span><span class=\"nx\">Patient</span> <span class=\"o\">|</span> <span class=\"nx\">Encounter</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n    <span class=\"s1\">'Patient'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">_revinlude</span><span class=\"o\">:</span> <span class=\"s1\">'Encounter:patient'</span><span class=\"p\">});</span>\n</code></pre></div>",
        "id": 243905582,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1624622188
    },
    {
        "content": "<p>But there is more complexity lurking here. From discussion above, it is at least clear that these search cases need to account for operation outcomes, which might always appear alongside resources of the requested type in the search response bundle.</p>",
        "id": 243912843,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1624626509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416067\">Joshua Kelly</span> <a href=\"#narrow/stream/179169-javascript/topic/typescript.20support/near/243550997\">said</a>:</p>\n<blockquote>\n<p>I've opened up a new PR on fhir-codegen based off of the feedback from the initial WIP commit above: <a href=\"https://github.com/microsoft/fhir-codegen/pull/66\">https://github.com/microsoft/fhir-codegen/pull/66</a></p>\n</blockquote>\n<p>I found a nice implementation example yesterday when using generics on Bundle to support typing the prefetch requests in CDS Hooks land. Also uses the CDSH types <span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> released. We can type the expected prefetch structure:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">CDS</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s2\">\"../src\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">interface</span> <span class=\"nx\">PatientPrefetch</span> <span class=\"p\">{</span>\n    <span class=\"nx\">patient</span>: <span class=\"kt\">fhir4.Patient</span><span class=\"p\">;</span>\n    <span class=\"c1\">// upcoming in @types/fhir - suggested in PR and this thread</span>\n    <span class=\"nx\">hemoglobin</span>: <span class=\"kt\">fhir4.Bundle</span><span class=\"o\">&lt;</span><span class=\"nx\">fhir4</span><span class=\"p\">.</span><span class=\"nx\">Observation</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">hookRequestResponse</span><span class=\"p\">(</span><span class=\"nx\">request</span>: <span class=\"kt\">CDSHooks.HookRequest</span><span class=\"o\">&lt;</span><span class=\"nx\">PatientPrefetch</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//                                                       typing is inferred here, but for explicitness...</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">patient</span><span class=\"p\">,</span> <span class=\"nx\">hemoglobin</span> <span class=\"p\">}</span><span class=\"o\">:</span> <span class=\"nx\">PatientPrefetch</span> <span class=\"o\">=</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">prefetch</span>\n\n    <span class=\"c1\">// function can respond to hook and has access to typed Observation in the Bundle</span>\n    <span class=\"c1\">// returned in the hemoglobin key   - versus having just the flat Bundle typing</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 243931061,
        "sender_full_name": "Joshua Kelly",
        "timestamp": 1624634869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416067\">@Joshua Kelly</span>  looks nice - should I add generic support to <a href=\"https://github.com/Vermonster/smart-typescript-support/blob/main/types/cds-hooks/index.d.ts\">https://github.com/Vermonster/smart-typescript-support/blob/main/types/cds-hooks/index.d.ts</a> ? I was thinking about representing the types for each hook context. </p>\n<p>Also, should I make this in DT instead of the current npm package?</p>",
        "id": 243969128,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1624654117
    },
    {
        "content": "<p>Error handling is another tricky part. Thank you <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> for raising this up.</p>\n<p>I am using the RemoteData approach for API error handling.<br>\nInitially, it comes from elm-lang. Here is a blog post about this approach <a href=\"http://blog.jenkster.com/2016/06/how-elm-slays-a-ui-antipattern.html\">http://blog.jenkster.com/2016/06/how-elm-slays-a-ui-antipattern.html</a><br>\nHere is my RemoteData  adaptation for typescript <a href=\"https://github.com/beda-software/aidbox-react/blob/master/src/libs/remoteData.ts\">https://github.com/beda-software/aidbox-react/blob/master/src/libs/remoteData.ts</a></p>\n<p>Then I use it in service to fetch data:<br>\n<a href=\"https://github.com/beda-software/aidbox-react/blob/master/src/services/service.ts#L18\">https://github.com/beda-software/aidbox-react/blob/master/src/services/service.ts#L18</a></p>\n<p>Finally, if the server returns OperationOutcome it will be captured with <code>Failure</code>.  In my previous example the type of patients is like this. </p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kd\">const</span> <span class=\"nx\">patients</span>:<span class=\"kt\">RemoteData</span><span class=\"o\">&lt;</span><span class=\"nx\">Bundle</span><span class=\"o\">&lt;</span><span class=\"nx\">Patient</span> <span class=\"o\">|</span> <span class=\"nx\">Encounter</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">OperationOutcome</span><span class=\"o\">&gt;</span>  <span class=\"o\">=</span>\n    <span class=\"k\">await</span>  <span class=\"nx\">getFHIRResources</span><span class=\"o\">&lt;</span><span class=\"nx\">Patient</span> <span class=\"o\">|</span> <span class=\"nx\">Encounter</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n        <span class=\"s1\">'Patient'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">_revinlude</span><span class=\"o\">:</span> <span class=\"s1\">'Encounter:patient'</span><span class=\"p\">});</span>\n</code></pre></div>",
        "id": 244000452,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1624692683
    },
    {
        "content": "<p>Neat -- like this fancy Either ;-)  but to be clear I wasn't talking about operation outcomes that represent errors. Oftentimes a FHIR API server will include an operation outcome as a bundle entry in a successful search response providing some additional detail or context -- that is an informational status OperationOutcome rather than than an error.</p>",
        "id": 244017857,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1624718010
    },
    {
        "content": "<p>Hmm,  I don't face such behaviour previously. Could you please provide an example of a request that returns such a result ?@<strong>Josh Mandel</strong></p>",
        "id": 244063750,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1624795153
    },
    {
        "content": "<p>Every Epic instance.</p>",
        "id": 244069452,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1624804238
    },
    {
        "content": "<p><a href=\"https://github.com/jmandel/my-health-data/blob/4dbc49f184cd5aabc9c7eea26060d1e212dc82ad/my-data/2019-03-01/data-from-uw/laboratory.json\">https://github.com/jmandel/my-health-data/blob/4dbc49f184cd5aabc9c7eea26060d1e212dc82ad/my-data/2019-03-01/data-from-uw/laboratory.json</a> is old but handy -- even if the result count was &gt;0 this OperationOutcome could still be present</p>",
        "id": 244069531,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1624804375
    },
    {
        "content": "<p>Yea, personally I don't see a ton of benefit from using generics with bundles to be honest, but others seemed to, and it's optional. </p>\n<p>I find that I am usually dealing with bundles from an external server. And I use a type predicate guard when processing these bundle entries - because as you mention they are polymorphic (including the occasional OperationOutcome).</p>",
        "id": 244312542,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1624985655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"196255\">@Ilya Beda</span>  - In one example, if you do a Batch bundle for a GET, POST, PATCH, etc, it is possible that one/some could fail, while the others are okay. In this case the return bundle could have OperationOutcome entry(ies).</p>",
        "id": 244313239,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1624985946
    },
    {
        "content": "<p>Oh.</p>\n<p>I have a quite different experience.<br>\nUsually, I got an empty bundle instead of OperationOutcome with <code>Resource request returns no results</code> warning.</p>\n<p>Also, I prefer to use a transaction bundle for bulk updates instead of the batch.<br>\nThe transaction fails if even one entry fails. So, I got OperationOutcome instead of Bundle.</p>",
        "id": 244335767,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1624995516
    },
    {
        "content": "<blockquote>\n<p>Also, I prefer to use a transaction bundle for bulk updates instead of the batch.<br>\nThe transaction fails if even one entry fails. So, I got OperationOutcome instead of Bundle.</p>\n</blockquote>\n<p>What if you want to run a several search or read operations, there would be no need for a transaction then....</p>",
        "id": 244341237,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1624997829
    },
    {
        "content": "<p>I am using Aidbox and it doesn't fire OperationOutcome in case of missing data, as Epic did in Josh's example.<br>\nAll issues like wrong search parameters handled in the dev environment, so I don't care about these cases.<br>\nRead, search operations are OperationOutcome free in my case =)</p>",
        "id": 244392236,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1625042073
    },
    {
        "content": "<p>I'm not saying there are no scenarios where you can ever be sure about what's in a bundle. I'm saying that according to the base FHIR specification (and consist with real world server behaviors) you need to be ready for such things. So when we think about what goes into a general purpose library or type definitions, those are the considerations we need to make.</p>",
        "id": 244425720,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1625060829
    },
    {
        "content": "<p>You always can use OperationOutcome as one of the elements of union type. </p>\n<div class=\"codehilite\"><pre><span></span><code>Bundle&lt;Patient | OperationOutcome&gt;\n</code></pre></div>\n<p>Even if you don't specify it explicitly, the generic's default should be FhirResource. It is a union type that contains all resources including OperationOutcome.</p>\n<p>So, it covers all possible cases I think.</p>",
        "id": 244523385,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1625120410
    },
    {
        "content": "<p>Agreed, I used that same example above. I have no concern about covering Bundle.entry.resource in a Bundle generic. I don't think I see the rationale for Resource.contained or Parameters.resource.</p>",
        "id": 244565247,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1625146068
    },
    {
        "content": "<p>Makes sense - my concern was consistency.  It feels odd that we use a generic in one place but not other areas that have the same definition.  I'll go through what's open shortly.</p>",
        "id": 244572214,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1625148665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span>  -- I tend to agree. Is there a reason <span class=\"user-mention\" data-user-id=\"196255\">@Ilya Beda</span> we wouldn't do the same to <code>contained</code> or in Parameter? Maybe there are other cases as well...</p>",
        "id": 244577878,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1625150775
    },
    {
        "content": "<p>I just read <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>  comment -- why not support generics for contained or Parameter? Or to put it a different way, why is Bundle unique?</p>",
        "id": 244579642,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1625151406
    },
    {
        "content": "<p>Both of these are used in widely variable ways that may be pretty hard to predict, though in heavily profiled environments, your mileage may vary. If you make contained generic, you wind up making every Resource generic. I'm not arguing against; just not clear on the benefit, is all.</p>",
        "id": 244588597,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1625154829
    },
    {
        "content": "<p>FYI: I created a new PR (<a href=\"https://github.com/microsoft/fhir-codegen/pull/67\">67</a>) which builds on the one that was there.  There were a few issues that I cleaned up and then I regenerated the TS files for review.  It <em>should</em> have tagged the four of you, but <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>.</p>\n<p>It has generic support from <code>Bundle</code> down to <code>Bundle.entry.resource</code>, and defaults to <code>FhirResource</code> if nothing is specified.  It is also fairly straightforward to add more (just more entries in the dictionary <a href=\"https://github.com/microsoft/fhir-codegen/pull/67/files#diff-59a799ebab4aa219d40e6200b77cb66d9c31afe705adea9b7265d565de2fc90aR122\">here</a>), if we like this and identify areas we want it later.</p>\n<p>I briefly considered generics for choice elements (e.g., <code>Patient.deceased&lt;boolean|dateTime&gt;</code>), but I believe doing that requires changing everything from interfaces to classes so that we can customize serialization / parsing.  Definitely not a 'today' thing.</p>",
        "id": 244632079,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1625176798
    },
    {
        "content": "<p>I think we should add an enum type for FHIR Resource different from the currently defined FhirResource, which is a union type of all of the individual resource types. I think this should be purely additive, but here's the difference:</p>\n<p>Existing:</p>\n<div class=\"codehilite\"><pre><span></span><code>export type FhirResource =\n  Account\n  |ActivityDefinition\n  |AdverseEvent\n</code></pre></div>\n<p>New addition:</p>\n<div class=\"codehilite\"><pre><span></span><code>export enum FhirResourceList {\n  Account = &quot;Account&quot;,\n  ActivityDefinition = &quot;ActivityDefinition&quot;,\n  AdverseEvent = &quot;AdverseEvent&quot;,\n</code></pre></div>\n<p>Why is this useful? There are lots of places where I'm finding that I need to enumerate the list of string Resource types. Here's one neat example I found recently in being able to define 1 liner template literal type definitions for SMART clinical scopes (v1 and v2 - tho the v2 example isn't totally complete:</p>\n<div class=\"codehilite\"><pre><span></span><code>export type ClinicalScopeV1 = `${&quot;patient&quot; | &quot;user&quot; }/${fhir4.FhirResourceList | &quot;*&quot;}.${&quot;read&quot; | &quot;write&quot; | &quot;*&quot;}`\nexport type ClinicalScopeV2 = `${&quot;patient&quot; | &quot;user&quot; | &quot;system&quot;}/${fhir4.FhirResourceList | &quot;*&quot;}.${&quot;c&quot; | &quot;r&quot; | &quot;u&quot; | &quot;d&quot; | &quot;s&quot;}`\n</code></pre></div>\n<p>This is really expressive because the type almost acts like a regex on the string content, and having the enum makes it possible (this does not work with the union type in fhir4.FhirResource).</p>\n<p>Other reasons why an enum would be useful include that you can't enumerate union type values, but obviously enums can be. That's helpful especially in cases where you're using the type declarations to auto generate code like RESTful routes.</p>\n<ol>\n<li>Is there interest/support for this as PR on the mainline fhir-codegen TS output? <span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> </li>\n<li>Do we like the name FhirResourceList? Are there other language library reference examples that deal with this issue?</li>\n</ol>",
        "id": 246537792,
        "sender_full_name": "Joshua Kelly",
        "timestamp": 1626747157
    },
    {
        "content": "<p>Thanks for the clear explanation of your use case here! Am I right in thinking it could also be met with something like;</p>\n<div class=\"codehilite\"><pre><span></span><code>type FhirResourceType = &quot;Account&quot; | &quot;ActivityDefinition&quot; | ....\n</code></pre></div>\n\n<p>and if so, are there reasons to prefer one approach over the other?</p>",
        "id": 246538822,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1626748536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191315\">Josh Mandel</span> <a href=\"#narrow/stream/179169-javascript/topic/typescript.20support/near/246538822\">said</a>:</p>\n<blockquote>\n<p>Thanks for the clear explanation of your use case here! Am I right in thinking it could also be met with something like;</p>\n<div class=\"codehilite\"><pre><span></span><code>type FhirResourceType = &quot;Account&quot; | &quot;ActivityDefinition&quot; | ....\n</code></pre></div>\n\n<p>and if so, are there reasons to prefer one approach over the other?</p>\n</blockquote>\n<p>Yes, this is the string union type. It would work for the template literal examples. However, union types can't be enumerated. The enum type is somewhat unique in TypeScript in that the compiler will allow you to write run-time enumeration.</p>\n<p>An example where this was helpful to me recently:</p>\n<div class=\"codehilite\"><pre><span></span><code>const restResources: fhir4.CapabilityStatementRestResource[] = Object.values(fhir4.FhirResourceList).map((resource) =&gt; {\n      return {\n        type: resource,\n        ...defaultRestReourceCapability\n      }\n    }\n  })\n</code></pre></div>\n<p>From what I understand, <code>enum</code> is feature compat with what a string union is at a type level but has the added benefit of runtime enumeration.</p>",
        "id": 246541571,
        "sender_full_name": "Joshua Kelly",
        "timestamp": 1626752184
    },
    {
        "content": "<p>Thanks! And the proposal here is to add an enum supporting these use cases, without changing how existing types are modeled (i.e., existing definitions would stay the same)? If so, it sounds good and useful to me.</p>",
        "id": 246542833,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1626753860
    },
    {
        "content": "<p>Looks good to me as well.</p>",
        "id": 246562121,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1626772932
    },
    {
        "content": "<p>this random blog post rates union vs enum <del>a tie</del> gives the edge to union actually  -- <a href=\"https://blog.bam.tech/developer-news/should-you-use-enums-or-union-types-in-typescript\">https://blog.bam.tech/developer-news/should-you-use-enums-or-union-types-in-typescript</a></p>",
        "id": 246635183,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1626808157
    },
    {
        "content": "<p>I recommend a test to see if either has any (code editor) performance consequences. The FHIR spec is pretty big, and this factor might be the priority.</p>",
        "id": 246635583,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1626808362
    },
    {
        "content": "<p>Re: that blog -- it's a great write-up. Looking at the use cases here though</p>\n<ul>\n<li>extensibility isn't critical given that a FHIR release corresponds to a fixed set of resource types</li>\n<li>iteration over unions only works if you declare a const array <em>in addition to</em> the type</li>\n<li>switch statements shouldn't be relevant here because switches would presumably be over <code>someLocalResourceVar.resourceType</code> as already modeled, and not over this new union-or-enum type.</li>\n</ul>\n<p>--&gt; if iteration is the primary use case (and others are already met through existing means), enums have a slight edge.</p>",
        "id": 246636091,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1626808638
    },
    {
        "content": "<p>Agreed that looking for perf issues (in editor and/or tsc step) is a key step</p>",
        "id": 246636130,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1626808659
    },
    {
        "content": "<p>Ok, have <a href=\"https://github.com/microsoft/fhir-codegen/pull/71\">PR 71</a> for review.  I'm trying to sort out permissions to actually be able to tag people as reviewers, but since the repo is MS-owned it's a bit of a challenge.</p>\n<p>I have not done performance testing on this yet.  It would be trivial to add both options if that is easier for someone to use and compare.</p>\n<p>In response to an earlier question, yes other languages do something like this.  In C# we generate two dictionaries, one <code>string, type</code> and one <code>type, string</code> so that it is easy to convert between them (e.g., I have a string, return the type to me).  Since we are using interfaces to describe the resources, I don't know if that would be useful or not.</p>\n<p><span class=\"user-mention\" data-user-id=\"416067\">@Joshua Kelly</span> <span class=\"user-mention\" data-user-id=\"196255\">@Ilya Beda</span> <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> <span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span></p>",
        "id": 246907507,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1626988719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> I like the PR and adding the union type, I think both are useful.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"222054\">Gino Canessa</span> <a href=\"#narrow/stream/179169-javascript/topic/typescript.20support/near/246907507\">said</a>:</p>\n<blockquote>\n<p>I have not done performance testing on this yet.  It would be trivial to add both options if that is easier for someone to use and compare.</p>\n</blockquote>\n<p>I have a codebase where I am already using an enum that I can test both with (that's what provoked me to add to the thread).</p>\n<p>A couple comments about the blog post. One of the examples in terms of differences between the two is outdated, extending for example: <a href=\"https://github.com/microsoft/TypeScript/pull/40998\">https://github.com/microsoft/TypeScript/pull/40998</a></p>\n<p>Also:</p>\n<blockquote>\n<p>Enums are compiled to some obscure code, instead of being just removed by the TypeScript compiler.</p>\n</blockquote>\n<p>Personally I don't think it's obscure. Even if you compile to ES5 it's just an object with string values - <code>Record&lt;string, string&gt;</code>- which is why you can enumerate it in the runtime.</p>\n<p>I have a codebase which uses both @types/fhir and has it's own versions of both the union type and enum, I have a few examples (like the string template literal types case I originally posted) where I have it working with all of the intellisense stuff in VS Code. I'll volunteer to do some testing with it, any ideas on what to prove/test out here? <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span></p>",
        "id": 246989151,
        "sender_full_name": "Joshua Kelly",
        "timestamp": 1627052738
    },
    {
        "content": "<p>I was preparing for an update to DT with the readonly <code>resourceType</code> and the work on generic support for Bundle. But I  noticed this commit was merged recently: <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/pull/54356\">https://github.com/DefinitelyTyped/DefinitelyTyped/pull/54356</a>  (and see this: <a href=\"https://github.com/microsoft/dtslint/pull/335\">https://github.com/microsoft/dtslint/pull/335</a>)</p>\n<p>I don't want to undo what they did. <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> should we put this upstream in FHIR codegen? Or should I add this when packing for DT (e.g. this is the packing project I use: <a href=\"https://github.com/Vermonster/fhir-dts-generator\">https://github.com/Vermonster/fhir-dts-generator</a>)</p>",
        "id": 247147602,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1627250100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416067\">@Joshua Kelly</span>  </p>\n<blockquote>\n<p>I'll volunteer to do some testing with it, any ideas on what to prove/test out here? <span class=\"user-mention silent\" data-user-id=\"222054\">Gino Canessa</span> </p>\n</blockquote>\n<p>For me, it really is editor performance. If there is no difference, I don't really have a strong opinion.</p>",
        "id": 247147678,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1627250217
    },
    {
        "content": "<p>For the typing (adding <code>undefined</code> to optional elements), that appears to be 'more correct', so I am putting it in now.<br>\nRelated to editor performance, I've received a request to split up the definitions the way we do in some other languages (e.g., <code>index.ts</code> + <code>patient.ts</code>, <code>encounter.ts</code>, etc.).  Thoughts? (<span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> , <span class=\"user-mention\" data-user-id=\"416067\">@Joshua Kelly</span> , <span class=\"user-mention\" data-user-id=\"196255\">@Ilya Beda</span> , <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> )</p>",
        "id": 247228654,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1627317852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> how would splitting it up affect performance? Also if you did that, how would you configure your code to use, e.g. would use  triple-slash<code>/// &lt;reference path=\"types/fhir/patient.d.ts\" /&gt;</code> on each file were you would need it? I think for the magic of ts configured for DT, we would still have the entire namespace automatically be available (in <code>@types/fhir</code>), right?</p>",
        "id": 247229922,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1627318440
    },
    {
        "content": "<p>Many editors don't like massive files.  Looking at the definition of <code>Patient</code> means opening a file of about 150 lines instead of one that's over 400,000 lines.</p>\n<p>We would want to setup a main file that includes everything else (e.g., <code>r4.d.ts</code>).  Consumers can still use a single include, but it's a bit easier to navigate.  We'll want to sort out what the exact structure looks like to ensure there are no conflicts between the versions.</p>",
        "id": 247242936,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1627324312
    },
    {
        "content": "<p>The TS project-agnostic default should be a concatenated export of types but FHIR is a schema that can break defaults. </p>\n<blockquote>\n<p>We would want to setup a main file that includes everything else</p>\n</blockquote>\n<p>The most critical thing for a consumer, IMHO, is just to be able to access the entire namespace without having to explicitly import. That's what will be possible with <code>r4.d.t.s</code> for ex, so I think this makes sense. The split examples are just an alt output.</p>",
        "id": 247284121,
        "sender_full_name": "Joshua Kelly",
        "timestamp": 1627349937
    },
    {
        "content": "<p>How does that handle extensions and contained parts? (as any?)</p>",
        "id": 247296494,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1627364801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span>  -- extensions are formally defined, you can search for :</p>\n<div class=\"codehilite\"><pre><span></span><code>/**\n * Optional Extension Element - found in all resources.\n */\nexport interface Extension extends Element {\n</code></pre></div>\n<p>And for contained is current set to:</p>\n<div class=\"codehilite\"><pre><span></span><code>contained?: FhirResource[] | undefined;\n</code></pre></div>\n<p>Where FhirResource is all the defined resource types.</p>",
        "id": 247326994,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1627389479
    },
    {
        "content": "<p>Isn't that with the full R4.d.ts file, was more referring to patient.d.ts</p>",
        "id": 247327466,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1627389796
    },
    {
        "content": "<p>Or does that format them drag in the other resources, which I'd have though eventually gets them all (due to contained)</p>",
        "id": 247327509,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1627389831
    },
    {
        "content": "<p>Ah, I see what you mean. Yes I think patient.d.ts would have to reference all others because of contained.</p>",
        "id": 247328127,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1627390166
    },
    {
        "content": "<p>Yep, that's part of the question - how would we want to structure files/modules so that this works and makes sense.  I have it on my list, but was hoping that someone here had gone through the exercise already  =)</p>",
        "id": 247383923,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1627416333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191782\">Brian Kaney</span> <a href=\"#narrow/stream/179169-javascript/topic/typescript.20support/near/247147602\">said</a>:</p>\n<blockquote>\n<p>I was preparing for an update to DT with the readonly <code>resourceType</code> and the work on generic support for Bundle.</p>\n</blockquote>\n<p>I would request that use of <code>readonly</code> be reconsidered for only cases where no implementor could realistically need to override it in a subtype class.</p>",
        "id": 247636821,
        "sender_full_name": "Preston Lee",
        "timestamp": 1627590489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197152\">@Preston Lee</span> I think it is okay, if you mean this sort of thing -- <a href=\"https://bit.ly/3l9OB1P\">https://bit.ly/3l9OB1P</a></p>",
        "id": 247643147,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1627593722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> Doesn't that break though if you try <code>let t: MyParent = aChild;</code>? \"Types of property 'resourceType' are incompatible.\"</p>",
        "id": 247648712,
        "sender_full_name": "Preston Lee",
        "timestamp": 1627597213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197152\">@Preston Lee</span>  - Yes, the type system would guard against that. Maybe I am not understanding your use-case if this is a problem for you. Could you make an example of your concern?</p>",
        "id": 247651443,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1627599292
    },
    {
        "content": "<p>Hi!</p>\n<p>I have one more thought.<br>\nCurrently Reference is a regular type with no restrictions, so <code>Reference.type</code> is an optional string.<br>\nWhat do you think about making Reference generic?</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kd\">interface</span> <span class=\"nx\">Reference</span><span class=\"p\">&lt;</span><span class=\"nt\">ResourceType</span> <span class=\"err\">=</span> <span class=\"na\">FhirResourceType</span> <span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n<span class=\"p\">...</span>\n<span class=\"kr\">type</span><span class=\"o\">:</span> <span class=\"nx\">ResourceType</span><span class=\"p\">;</span>\n<span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>It will be the first step to type-safe Reference type.<br>\nOnce <a href=\"https://github.com/microsoft/TypeScript/issues/41160\">https://github.com/microsoft/TypeScript/issues/41160</a> get approved we can validate  <code>Reference.reference</code> to match <code>${ResourceType}/\\s+</code>.</p>\n<p>I would like to hear your thoughts.</p>",
        "id": 251382485,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1630415829
    },
    {
        "content": "<p>it's tricky in principle. you don't always know what the reference is, and you don't always care to look it up. and it's <em>supposed</em> to be the right type... but you might not want an error in an external system to cause an error your types</p>",
        "id": 251383197,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630416111
    },
    {
        "content": "<p>If an external system provides a reference with an incorrect type it most likely cracks runtime anyway when you try to handle it. If you are not handling it you are fine. Since TypeScript works only at the compile-time and doesn't cause any runtime errors because of types.</p>",
        "id": 251384617,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1630416623
    },
    {
        "content": "<p>We have an open discussion on <a href=\"https://github.com/microsoft/fhir-codegen/issues/70\">GitHub</a> for this.  If it makes sense, <code>Reference</code> becomes a generic that <em>can</em> have a FHIR Type, or <code>undefined</code>.</p>",
        "id": 251464851,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1630446026
    },
    {
        "content": "<p>I remember that I saw the conversation somewhere, but can't find it. Thank you for the link!</p>",
        "id": 251521547,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1630484833
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span>  would it be a good time to refresh DT with the latest fhir-codegen?</p>",
        "id": 256115815,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1633374936
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> , apologies for the long delay in response.  I'm happy to merge in current changes, but did have a policy question for the group.</p>\n<p>I have a pass of the generator that splits up the type definitions into a <code>.d.ts</code> file and the value-sets, code enumerations, etc. into a <code>.ts</code> one, but the question becomes: what do we want to do with them?</p>\n<p>My inclination would be to start pushing up the combination as an NPM package, but I wanted to see what everyone's thoughts were: yes, no, out of scope, etc.</p>\n<p>I have been hoping to sketch out a generic TS/JS client package (similar to the .NET SDK from Firely or the HAPI SDK from SmileCDR).  But unfortunately it's been too far down my list to get to it.  Thoughts?</p>",
        "id": 257717834,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1634312225
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span>  -- Were you thinking this as a replacement or alternative or in addition to DT @types/fhir?</p>",
        "id": 257765597,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1634332268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span>  <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>.  We can get <em>most</em> of what is needed with just DT. The biggest issue I ran into is the inability to express ValueSet and  CodeableConcept instances, since those aren't type information.  Use-case wise, I needed them so that I could list options in a drop-down for user selection.</p>\n<p>For me personally, it's just as easy to run the codegen locally when I need something like that  =).  But I don't love that story, so I was asking what works best for everyone else.</p>",
        "id": 257768001,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1634333506
    },
    {
        "content": "<p>I see. I kinda like the idea having @types/fhir and then a complemental npm library. I also find I build type guards all the time, so to have a nice NPM package that we could put that in would be really nice!</p>",
        "id": 257768316,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1634333673
    },
    {
        "content": "<p>What's the issue with CodeableConcepts? Just getting the code values not as basic strings?<br>\nI use the dt types quite successfully for expansions in questionnaire dropdowns.</p>",
        "id": 257813483,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1634372438
    },
    {
        "content": "<p>The issue is that you cannot create an instance of an object in an interface file.  So, we could make things like enums of the codes, but have no way of expressing the full instance (e.g., system, code, text, etc.).</p>",
        "id": 258079261,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1634582789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> (or others) have you considered anything along the lines of the dotnet extension methods, except implemented in typescript?<br>\nI'm working on some front end stuff to try implementing this (alongside your definitioned typed fhir types)</p>",
        "id": 263807658,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1638764802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> yeah, I have a 'want' item on my to-do list of a large TS library project.. but haven't been able to get to it.  Right now, the code-gen output includes a lot of stuff that gets stripped for the Definitely Typed version (since it's a .d.ts); e.g., the <a href=\"https://github.com/microsoft/fhir-codegen/blob/main/generated/TypeScript_R4.ts\">R4</a> file in generated.</p>\n<p>For my 'what do I want the end result to look like' tinkering, I installed the DT version and am keeping a file with additions I pull from the R4 generated output.  I'm hoping that I can use that to inform the next iteration of output.</p>",
        "id": 263866638,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1638804601
    },
    {
        "content": "<p>Something you can share? I might be able to also contribute to the thoughts...</p>",
        "id": 263938464,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1638832416
    },
    {
        "content": "<p>(I'm working on SDC in typescript - now that my dotnet side is mostly cooking, and thought I'd do the same...)</p>",
        "id": 263938542,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1638832460
    }
]