[
    {
        "content": "<p>Not directly a typescript issue, but anyone else got any good tips on parsing decimal data in a way that doesn't loose the precision?<br>\nparseFloat removes all the trailing precision from it...<br>\nI'm using it in my Javascript Questionnaire renderer</p>",
        "id": 243481786,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1624347867
    },
    {
        "content": "<p>Anyone tried this module? <a href=\"https://github.com/globalizejs/globalize#number-module\">https://github.com/globalizejs/globalize#number-module</a></p>",
        "id": 243482258,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1624348202
    },
    {
        "content": "<p>I have not.  You might also consider <a href=\"https://www.npmjs.com/package/big.js\">big.js</a> (16M downloads/week) or <a href=\"https://www.npmjs.com/package/bignumber.js\">bignumber.js</a> (5M downloads/week) -- but I have not tried either of those either.</p>",
        "id": 243511070,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1624366521
    },
    {
        "content": "<p>Brian, I'm usually pretty good at remembering that issue, but I haven't looked at it in JS yet.</p>\n<p>I think the problem Brian is asking about is in the JSON parser / serializer; e.g., on chromium-based browsers you get the following behavior:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"s1\">'{\"data\":3.000000}'</span><span class=\"p\">)</span>\n <span class=\"o\">-&gt;</span> <span class=\"nx\">returns</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"mf\">3</span><span class=\"p\">}</span>\n<span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span> <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"mf\">3.0000</span><span class=\"p\">})</span>\n <span class=\"o\">-&gt;</span> <span class=\"nx\">returns</span><span class=\"o\">:</span> <span class=\"s2\">\"{\\\"data\\\":3}\"</span>\n</code></pre></div>\n<p>Both of which have lost the additional precision on the number... sadly, that is conformant with the spec :sigh:.</p>\n<p>For serialization, it <em>may</em> work to use one of those libraries an add a custom <code>replacer</code> function for <code>JSON.stringify</code> (looks good on paper, haven't tested).</p>\n<p>Unfortunately, the parser is harder to work around.  Even using the <code>reviver</code> parameter on <code>JSON.parse</code> doesn't help because the value passed in is already a <code>number</code> by the time the function is called.  I would probably start with the polyfill implementation on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\">Mozilla</a> page or an existing C/C++ library I could compile via <a href=\"https://emscripten.org/\">Emscripten</a> (or possibly C# via <a href=\"https://github.com/theolivenbaum/h5\">h5</a>, but I have never used it so I don't know if it actually works =).  Time permitting, I'd like to see a few options and performance test them, but that feels like a lot unless the first attempt had horrible performance.</p>\n<p>I'll add it to my (super short, really) list, unless someone else has solved this already (:hopeful look:)?</p>",
        "id": 243544653,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1624380420
    },
    {
        "content": "<p>I hadn't thought of it in the context of deserializing a whole JSON object, but yes, in that case it's a bit more complicated than just \"use this library\".  That said, the original post said \"parseFloat removes all the trailing precision from it\", so if he is talking about parseFloat, then maybe he is really working w/ the numeric values directly... But of course I am not going to stop you, <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span>, if you want to spend some time solving for the JSON problem too!</p>",
        "id": 243565490,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1624389334
    },
    {
        "content": "<p>Lol <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>  =).  I guess it could be in either point, since each step along the way will lose precision.</p>\n<p>Guess this is relevant to the larger 'standard FHIR library for JS/TS', since it will need to include a parser/serializer and some object library for precise numeric types (I like your suggestion of <code>big.js</code>).</p>",
        "id": 243566816,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1624389969
    },
    {
        "content": "<p><a href=\"https://gitlab.com/shimaore/jsonparse-decimal\">https://gitlab.com/shimaore/jsonparse-decimal</a> is the kind of thing that we're talking about, yes? (Integrates a JSON parser + decimal handling)</p>",
        "id": 243584211,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1624399253
    },
    {
        "content": "<p>(That particular library doesn't seem super active or popular; just looking at the shape of the solution...)</p>",
        "id": 243584276,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1624399291
    },
    {
        "content": "<p>Yes - it has the parser and the dependency on the (also not very active) <a href=\"https://github.com/MikeMcl/decimal.js-light/\">decimal-js.light</a> project.</p>",
        "id": 243585169,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1624399820
    },
    {
        "content": "<p>All of these issues yes, but the specific spot I was slipping on was the conversion of user entered text data into the fhir questionnaire answer as valueDecimal...</p>",
        "id": 243607029,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1624424157
    }
]