[
    {
        "content": "<p>I'm almost ready to post a small helper library to assist with handling fhir extensions in typescript/javascript - that will end up in npm.<br>\nThis is a sample from the unit tests showing how its used</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"s1\">'boolean get/set extension value'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">sample</span><span class=\"o\">:</span> <span class=\"nx\">fhir4</span><span class=\"p\">.</span><span class=\"nx\">Coding</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">system</span><span class=\"o\">:</span> <span class=\"s1\">'system'</span><span class=\"p\">,</span> <span class=\"nx\">code</span><span class=\"o\">:</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"nx\">display</span><span class=\"o\">:</span> <span class=\"s1\">'blah'</span> <span class=\"p\">};</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nb\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">sample</span><span class=\"p\">)).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'{\"system\":\"system\",\"code\":\"c\",\"display\":\"blah\"}'</span><span class=\"p\">);</span>\n    <span class=\"nx\">exHelpers</span><span class=\"p\">.</span><span class=\"nx\">setExtension</span><span class=\"p\">(</span><span class=\"nx\">sample</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s1\">'exturl'</span><span class=\"p\">,</span> <span class=\"nx\">valueBoolean</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">});</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">exHelpers</span><span class=\"p\">.</span><span class=\"nx\">getExtensionBooleanValue</span><span class=\"p\">(</span><span class=\"nx\">sample</span><span class=\"p\">,</span> <span class=\"s1\">'exturl'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nb\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">sample</span><span class=\"p\">)).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'{\"system\":\"system\",\"code\":\"c\",\"display\":\"blah\",\"extension\":[{\"url\":\"exturl\",\"valueBoolean\":true}]}'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">exHelpers</span><span class=\"p\">.</span><span class=\"nx\">setExtension</span><span class=\"p\">(</span><span class=\"nx\">sample</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s1\">'exturl'</span><span class=\"p\">,</span> <span class=\"nx\">valueBoolean</span><span class=\"o\">:</span> <span class=\"kc\">false</span> <span class=\"p\">});</span>\n    <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">exHelpers</span><span class=\"p\">.</span><span class=\"nx\">getExtensionBooleanValue</span><span class=\"p\">(</span><span class=\"nx\">sample</span><span class=\"p\">,</span> <span class=\"s1\">'exturl'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nb\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">sample</span><span class=\"p\">)).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'{\"system\":\"system\",\"code\":\"c\",\"display\":\"blah\",\"extension\":[{\"url\":\"exturl\",\"valueBoolean\":false}]}'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">exHelpers</span><span class=\"p\">.</span><span class=\"nx\">clearExtension</span><span class=\"p\">(</span><span class=\"nx\">sample</span><span class=\"p\">,</span> <span class=\"s1\">'exturl'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nb\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">sample</span><span class=\"p\">)).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'{\"system\":\"system\",\"code\":\"c\",\"display\":\"blah\"}'</span><span class=\"p\">);</span>\n    <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">exHelpers</span><span class=\"p\">.</span><span class=\"nx\">getExtensionBooleanValue</span><span class=\"p\">(</span><span class=\"nx\">sample</span><span class=\"p\">,</span> <span class=\"s1\">'exturl'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">);</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n<p>this then makes it pretty easy to make helper methods for handling standard extensions from IGs too</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code>    <span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">getHidden</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"o\">?:</span> <span class=\"nx\">QuestionnaireItem</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"kr\">boolean</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">extensionHelpers</span><span class=\"p\">.</span><span class=\"nx\">getExtensionBooleanValue</span><span class=\"p\">(</span><span class=\"nx\">exturl_questionnaire_hidden</span><span class=\"p\">,</span> <span class=\"nx\">item</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">setHidden</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"o\">:</span> <span class=\"nx\">QuestionnaireItem</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"kr\">boolean</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">extensionHelpers</span><span class=\"p\">.</span><span class=\"nx\">setExtension</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"nx\">exturl_questionnaire_hidden</span><span class=\"p\">,</span> <span class=\"nx\">valueBoolean</span><span class=\"o\">:</span> <span class=\"nx\">value</span> <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n</code></pre></div>\n<p>Wondering if anyone else has done something similar already?</p>",
        "id": 269185231,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643065290
    },
    {
        "content": "<p>(I'm hoping to have the code all on github in the next day or so)</p>",
        "id": 269185265,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643065316
    },
    {
        "content": "<p>Ok, so first commit is up there now, still doing more cleanup and docco, but the core routines work fine.<br>\n<a href=\"https://github.com/brianpos/fhir-extension-helpers\">https://github.com/brianpos/fhir-extension-helpers</a></p>",
        "id": 269188751,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643067788
    },
    {
        "content": "<p>Nice! For my usage patterns, I find it's also helpful to have non-mutating versions of these (e.g., an <code>addExtension</code> that returns a new object that's like the old one + an extension).</p>",
        "id": 269201958,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1643078430
    },
    {
        "content": "<p>I've just pushed some updates with more helper methods, and an optional parameter to create the object if it didn't exist already.<br>\nAny suggestions on naming for non mutating versions?<br>\n(or just have another namespace for that?)</p>",
        "id": 269206561,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643082642
    },
    {
        "content": "<p>My goal was for manipulating large objects, rather than re-creating an entire object.<br>\nOr did you think to have something more like:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">let</span> <span class=\"nx\">patient</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nx\">resourceType</span><span class=\"o\">:</span><span class=\"s1\">'Patient'</span><span class=\"p\">}</span>\n<span class=\"nx\">patient</span><span class=\"p\">.</span><span class=\"nx\">_birthDate</span> <span class=\"o\">=</span> <span class=\"nx\">setExtension</span><span class=\"p\">(</span><span class=\"nx\">patient</span><span class=\"p\">.</span><span class=\"nx\">_birthDate</span><span class=\"p\">,</span> <span class=\"s1\">'https://example.org'</span><span class=\"p\">,</span> <span class=\"s1\">'newValue'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">let</span> <span class=\"nx\">patient</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nx\">resourceType</span><span class=\"o\">:</span><span class=\"s1\">'Patient'</span><span class=\"p\">}</span>\n<span class=\"nx\">patient</span> <span class=\"o\">=</span> <span class=\"nx\">setExtension</span><span class=\"p\">(</span><span class=\"nx\">patient</span><span class=\"p\">,</span> <span class=\"s1\">'https://example.org'</span><span class=\"p\">,</span> <span class=\"s1\">'newValue'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Where the first is for a property extension, and the other is for a resource level extension<br>\nDoing this then clones the entire object.</p>",
        "id": 269206687,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643082784
    },
    {
        "content": "<p>So the mutation can be chosen by the caller?</p>",
        "id": 269206699,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643082800
    },
    {
        "content": "<p>And now up on npm too!<br>\n<a href=\"https://www.npmjs.com/package/fhir-extension-helpers\">https://www.npmjs.com/package/fhir-extension-helpers</a></p>",
        "id": 269213056,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643090331
    },
    {
        "content": "<p>Awesome! Re mutations, your latter example was the kind of pattern I tend to use when available. Separate namespaces is a good thought.</p>",
        "id": 269259579,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1643118988
    },
    {
        "content": "<p>I've moved onto the SDC extension package...<br>\nLooking good but considering what to do for extensions that support multiple types?<br>\nI've generated this so far (which is just grabbing the first type)</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"c1\">// ----------------------------------------------------------------------</span>\n<span class=\"c1\">// maxValue</span>\n<span class=\"c1\">// date(0..1) - date, dateTime, time, instant, decimal, integer</span>\n<span class=\"c1\">// The inclusive upper bound on the range of allowed values for the data element.</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">exturl_MaxValue</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://hl7.org/fhir/StructureDefinition/maxValue\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">getMaxValue</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"o\">:</span> <span class=\"nx\">Element</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">string</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">extensionHelpers</span><span class=\"p\">.</span><span class=\"nx\">getExtensionDateValue</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">exturl_MaxValue</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">setMaxValue</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"o\">:</span> <span class=\"nx\">Element</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">extensionHelpers</span><span class=\"p\">.</span><span class=\"nx\">setExtension</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"nx\">exturl_MaxValue</span><span class=\"p\">,</span> <span class=\"nx\">valueDate</span><span class=\"o\">:</span> <span class=\"nx\">value</span> <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I'm thinking that the sensible thing for these cases would be to generate:</p>\n<div class=\"codehilite\"><pre><span></span><code>getMaxValueAsDate,\ngetMaxValueAsDateTime,\ngetMaxValueAsTime,\ngetMaxValueAsInstant,\ngetMaxValueAsDecimal,\ngetMaxValueAsInteger\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"195344\">@Paul Lynch</span> thoughts?<br>\n(there are only 3 of these cases in SDC - but I expect this is likely elsewhere too)</p>",
        "id": 269827105,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643419097
    },
    {
        "content": "<p>This is the current generated code for the SDC IG if anyone wants to have a look at it and make comments before I push it into an npm package...<br>\n<a href=\"https://gist.github.com/brianpos/94500f42591e97d67bcf771689ade0b7\">https://gist.github.com/brianpos/94500f42591e97d67bcf771689ade0b7</a></p>\n<blockquote>\n<p>Note that I'm not happy with the preferred terminology server extraction, I'd like to have a way that grabs either of the 2 URLs... thoughts on that part?</p>\n</blockquote>",
        "id": 269828282,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643420247
    },
    {
        "content": "<p>It looks good <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> </p>\n<p>I just want to mention that there is an alternative way of working with extensions.<br>\nInstead of working with extensions in the runtime by getter/setter pair, you can extract all known extensions to the top level.<br>\nThis approach is used by google <a href=\"https://github.com/google/fhir/blob/master/proto/google/fhir/proto/r4/uscore.proto#L7137\">https://github.com/google/fhir/blob/master/proto/google/fhir/proto/r4/uscore.proto#L7137</a> and aidbox <a href=\"https://docs.aidbox.app/modules-1/first-class-extensions\">https://docs.aidbox.app/modules-1/first-class-extensions</a></p>\n<p>The main advantage is that you will get a strongly typed representation, based on a definition from a profile.</p>",
        "id": 270031562,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1643636219
    },
    {
        "content": "<p>My approach retains the fhir structure so other tools/utilities can work with it and doesn't need to be mutated again to/from the fhir representation.</p>",
        "id": 270105608,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643663535
    },
    {
        "content": "<p>I do like both those approaches, but need to be all in using those. And then do conversions where you need to.<br>\nAnd have care that your profiled extensions don't clash with names.</p>",
        "id": 270106000,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643663705
    },
    {
        "content": "<p>Thanks very much for the feedback too.<br>\nI might link the code whem I eventually do a post about them.</p>",
        "id": 270106093,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643663743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191367\">Brian Postlethwaite</span> <a href=\"#narrow/stream/179169-javascript/topic/extension.20helpers/near/269827105\">said</a>:</p>\n<blockquote>\n<p>I'm thinking that the sensible thing for these cases would be to generate:</p>\n<div class=\"codehilite\"><pre><span></span><code>getMaxValueAsDate,\ngetMaxValueAsDateTime,\ngetMaxValueAsTime,\ngetMaxValueAsInstant,\ngetMaxValueAsDecimal,\ngetMaxValueAsInteger\n</code></pre></div>\n<p><span class=\"user-mention silent\" data-user-id=\"195344\">Paul Lynch</span> thoughts?<br>\n(there are only 3 of these cases in SDC - but I expect this is likely elsewhere too)</p>\n</blockquote>\n<p>It probably will not surprise Brian that my thought about this is that some languages care too much about types.</p>",
        "id": 270733695,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1643990210
    },
    {
        "content": "<p>Lol, it's not just types here, it's the prop name that's being read.</p>",
        "id": 270769352,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1644006989
    },
    {
        "content": "<p>Have pushed a draft of the SDC helpers too!<br>\n<a href=\"https://www.npmjs.com/package/fhir-sdc-helpers\">https://www.npmjs.com/package/fhir-sdc-helpers</a></p>",
        "id": 271074025,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1644288364
    }
]