[
    {
        "content": "<p>Hallo verehrte Kollegen,</p>\n<p>wir arbeiten an der FHIR Schnittstelle die von der KBV definiert ist und auf dem  \"FHIR deutschem basis profile\" basiert ist/sein wird.  Wir haben vor ein Paar Tagen angefangen uns mit dem FHIR zu beschäftigen, sind also ganz neu. Ich suche momentan alle Anhangspunkte womit ich sinnvollerweise anfangen kann. </p>\n<p>Wir entwickeln in Java, somit wollte ich fragen ob es bereits eine Open Source Java Implementierung des Profiles gäbe? Bzw Beispiele, wie mann so ein Profile in Java implementiert. </p>\n<p>für jeden Hinweis vielen Dank und Grüße<br>\nDmitri Ilyin</p>",
        "id": 156697853,
        "sender_full_name": "Dmitri Ilyin",
        "timestamp": 1548257575
    },
    {
        "content": "<p>Hallo und wilkommen zu FHIR!</p>\n<p>Es gibt schon eine zeimlich ausgereifte Java-Implementierung von FHIR (Servers und Clients), HAPI FHIR (<a href=\"http://hapifhir.io/\" target=\"_blank\" title=\"http://hapifhir.io/\">http://hapifhir.io/</a>). Damit kann man auch gegen beliebige Profile validieren und so ein- und ausgegehende Daten entsprechend kontrollieren - <a href=\"http://hapifhir.io/doc_validation.html#_toc_resource_validation_profilestructuredefinition\" target=\"_blank\" title=\"http://hapifhir.io/doc_validation.html#_toc_resource_validation_profilestructuredefinition\">siehe hier</a>. Je nach Usecase reicht das vielleicht aus.  Wenn es um eine \"tiefere einbettung\" von den Profilen gehen sollte kenne ich mich leider nicht so gut aus, aber mit HAPI kann einzelne Module zusammengesetzt und Angepasst werden.</p>",
        "id": 156758975,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1548321421
    },
    {
        "content": "<p>Hallo Morten,</p>\n<p>danke! Ja, wir haben die bereits entdeckt und aufgesetzt. Uns fehlen die Beispiele wie man ein Profil implementiert. <br>\nDa das deutsche profile nicht seit Gestern gibt, würde es mich interessieren ob es eben eine Implementierung bereits gibt. <br>\nDie KBV Profile unterscheiden sich nur geringfügig von den deutschen Profilen. So wir können uns viel Arbeit sparen. <br>\nSo ist mein Verständnis vom ganzen bisher. </p>\n<p>viele Grüße<br>\nDmitri</p>",
        "id": 156762072,
        "sender_full_name": "Dmitri Ilyin",
        "timestamp": 1548325050
    },
    {
        "content": "<p>Hallo Dimitri,</p>\n<p>ah, OK. Ich denke, ich habe misverstanden, was mit \"implementieren\" gemeint war, vielleicht könntest Du etwas mehr dazu sagen? Z.B. welche konkrete Funktionalitäten sollen unterstütz werden (serverseitig und/oder clientseitig)?</p>",
        "id": 156767368,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1548331662
    },
    {
        "content": "<p>nun es muss eine REST Schnittstelle implementiert werden (für uns die Client Seite interessant), die mehrere Resourcen  zum lesen anbietet. Die Resourcen sind als Profile definiert. Darunter sind z.B. Patient, Kostentraeger usw. Die Profile sind von deutschen basis profile abgeleitet. Ich habe es soweit so verstanden, das wir zuerst die Resourcen die in Profilen festgelegt worden sind in Java Klassen (so primitiv gedacht) ausformulieren. Dann können wir diese Resourcen mit HAPI  API lesen. Gehe ich da in richtige Richtung??</p>",
        "id": 156770357,
        "sender_full_name": "Dmitri Ilyin",
        "timestamp": 1548335067
    },
    {
        "content": "<p>HAPI unterstützt automatisch die Basis-Resourcen (bzw. einige von den HAPI Beispiel-Server-Projekte im HAPI GitHub Repo haben schon die nötige Klassen). Da die Profile von den Basis-Resourcen abgeleitet sind, kann HAPI auch Resource-Instanzen lesen und schreiben, die beliebige Profile entsprechen. Für Validierung mit Profile</p>",
        "id": 156786405,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1548347967
    },
    {
        "content": "<p>(Oops, aus Versehen zu früh abgeschickt! ) Für Validierung mit Profilen muss man selber etwas implementieren (s.O.). Für Extensions kann man ggf. die entsprechende Resource-Klassen anpassen, damit die Extensions als normale Felder erscheinen. Aber meines Wissens ist das nicht nötig, man kann auch so mit Extensions arbeiten. (<span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span> lege ich da richtig?)</p>\n<p>Kommt das eine Antwort auf Deiner Frage näher?</p>",
        "id": 156786994,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1548348381
    },
    {
        "content": "<p>Hallo <span class=\"user-mention\" data-user-id=\"200598\">@Dmitri Ilyin</span> du musst in Hapi gar nichts implementieren, ist alles schon da. Profile sind Bestandteile des FHIR Standards, werden als StructureDefinition Ressourcen modelliert/erfasst.<br>\nHAPI bringt bereits alles mit um mit profilierten Ressourcen umzugehen.<br>\nEine profilierter Patient ist auch ein Patienten Ressource + Profil.<br>\nUm die angesprochene read-only FHIR Schnittstelle zu implementieren, würde auf Java Object Seite (Objekte der FHIR Ressourcen) ein Patient erstellt &amp; entsprechend befüllt werden. Das Einzige was man noch hinzufügt ist im meta tag die profile URI</p>",
        "id": 156789439,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1548350431
    },
    {
        "content": "<p>Man kann sich (wie Grahame auch schon im hapi stream anmerkte) eine Facade dafür bauen wenn man mag, muss man aber nicht.</p>",
        "id": 156789487,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1548350504
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span> ,</p>\n<p>\"eine profilierte Resource eine FHIR Resource + Profile\". Heisst es das das Profile (StructureDefinition) in dem Server/Client mit deployed werden muss? Das Profil, das wir zu implementieren haben, gibt es nur in Form von XML Dateien, also nicht online vorhanden. </p>\n<p>Danke!</p>",
        "id": 157015413,
        "sender_full_name": "Dmitri Ilyin",
        "timestamp": 1548670775
    },
    {
        "content": "<p>Noch eine allgemeine Verständnis Frage. Muss bei der Implementierung der profilierten Resource berücksichtigt werden das die von FHIR Clients, die das Profile nicht implementieren, diese Resource trotzdem lesen können? Z.B. der Patient bekommt neue Elemente, diese sind als Properties realisiert. Der Client kennt aber das Profile nicht und kann mit diesen neuen Elementen nichts anfangen. Kann HAPI damit umgehen? werden die neue Elemente dann einfach ignoriert? <br>\nWas ist wenn sich der Type eines Elementen in dem Profil ändert, der Name aber gleich bleibt? </p>\n<p>Danke und Grüße</p>",
        "id": 157015520,
        "sender_full_name": "Dmitri Ilyin",
        "timestamp": 1548670922
    },
    {
        "content": "<p>Diese XML-Dateien kann man i.d.R. auf einen FHIR-Server hochladen, so dass dieser sie verwenden kann. Auf den Testserver meist einfach über den [base]/StructureDefinition Endpoint, ansonsten über entsprechende Admin-Backends.</p>",
        "id": 157015583,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1548670977
    },
    {
        "content": "<p>Ressourcen bekommen technisch betrachtet niemals neue Elemente, bestenfalls Extensions (die inhärenter Bestandteil von FHIR-Profilen sind).<br>\nGrundsätzlich sollen Ressourcen auch ohne das Verständnis der Extensions verarbeitbar sein, weswegen z.B. im Patientenprofil Constraints sind, die trotz getrennter Angabe von Vorsatzwort/Namenszusatz/(Detail-)Nachname auch die Angabe des name.family-Elements mit dem vollständigen Nachnamen erzwingen.</p>",
        "id": 157015710,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1548671144
    },
    {
        "content": "<p>Unbekannte Extensions werden gespeichert, aber (im Produktivsystem) nicht verarbeitet.</p>\n<p>Eine Ausnahme sind Modifier-Extensions, die die Aussage der komplette Ressource verändern würden (z.B. eine Negations-Extension). Deswegen sollten diese extrem sparsam eingesetzt werden und kommen z.B. bei den KBV-Profilen auch nicht vor.</p>",
        "id": 157015835,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1548671264
    },
    {
        "content": "<p>Profile können prinzipiell auch nicht den grundsätzlichen Typ von Elementen verändern. Sie können lediglich auf Profile des ursprünglichen Datentyps beziehen.</p>",
        "id": 157015921,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1548671370
    },
    {
        "content": "<p>Oder eben aus einer erlaubten Auswahl von Typen einen bestimmten festlegen (z.B. Observation.value[x] =&gt; Observation.valueQuantity)</p>",
        "id": 157016005,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1548671445
    },
    {
        "content": "<p>Zum Verhalten bei unbekannten Extensions hilft auch die Spec weiter:<br>\n<a href=\"https://www.hl7.org/fhir/extensibility.html#exchange\" target=\"_blank\" title=\"https://www.hl7.org/fhir/extensibility.html#exchange\">https://www.hl7.org/fhir/extensibility.html#exchange</a></p>",
        "id": 157016290,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1548671836
    },
    {
        "content": "<p>vielen Dank! Jetzt habe ich  erstmals genug Info zum \"verdauen\".</p>",
        "id": 157019881,
        "sender_full_name": "Dmitri Ilyin",
        "timestamp": 1548676363
    },
    {
        "content": "<p>Hallo zusammen, </p>\n<p>HumanName DataType ist im deuschen profile abgeleitet und die abgeleitete Variante ist in Patient und Practitioner  als Element Type verwendet. Ich will HumanName  als CustomDataType implementieren um es in diesen Resourcen zu (wieder)verwenden.  Ich rede von der Implementierung in HAPI. <br>\nWäre es richtiger Einsatz?<br>\nDas KBV Profil beschränkt HumanName bei Verwendung in Practitioner (und in Patient) nochmal zusätzlich. Und hier ist mir nicht klar wie ich vorgehen muss. CustomDatatype nochmals beschränken? Nochmals von Customdatatype ableiten?</p>\n<p>danke für die Hinweise und Grüße</p>",
        "id": 157117480,
        "sender_full_name": "Dmitri Ilyin",
        "timestamp": 1548779809
    },
    {
        "content": "<p>der profilierte \"deutsche\" HumanName  ist immer noch ein HumanName. Somit muss auch hier in hapi nichts verändert werden. Man muss beim Bauen von compliant HumanNames darauf achten, dass man der Struktur des HumanName Profiles folgt. Überprüft werden kann dies dann mittels validate gegen das HumanName Profil bzw. Profile welches den deutschen Basis HumanName enthält.</p>",
        "id": 157121492,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1548782896
    },
    {
        "content": "<p>Als Faustregel gilt: der komplette FHIR Standard ist mittels hapi nutzbar ohne hapi anpassen zu müssen.</p>",
        "id": 157121635,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1548783004
    }
]