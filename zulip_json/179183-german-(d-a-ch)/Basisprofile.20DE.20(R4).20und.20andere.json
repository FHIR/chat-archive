[
    {
        "content": "<p>Hallo allerseits, <br>\nzunächst zum Kontext:</p>\n<p>Ich stehe ganz am Anfang mit FHIR und dem Kontext drumherum, finde es noch sehr verwirrend, und würde mich über eure Hilfe sehr freuen.</p>\n<p>Ich möchte für die Wunddoku eine App programmieren die Patientendaten abrufen, verändern und wieder hochladen kann. <br>\nHierzu möchte ich den TestServer R4 verwenden. (<a href=\"http://hapi.fhir.org/baseR4\">http://hapi.fhir.org/baseR4</a>)<br>\nHierzu hatte ich in einem anderen Stream bereits den Hinweis bekommen, dass es auch für die Wunddokumentation bereits ein Profil gibt, das auf dem Basisprofil R4 aufbaut.</p>\n<p>Meine Frage ist nun folgende, ist es denn grundsätzlich möglich, dass ich ein Profil in meinen Code einpflege und damit mit einem TestServer kommuniziere, oder muss ich hierzu selbst einen FHIR Server aufsetzten, bei dem ich dann z. B. das Basisprofil DE R4 erst installieren muss?</p>\n<p>Habe hierzu gelesen, dass es ein Firely Terminal gibt und man \"fhir install de.basisprofil.r4 1.0.0-alpha1\" für die Installation  verwendet, dies setzt doch aber einen eigenen FHIR Server voraus, auf dem ich dies so installieren kann?<br>\n(Falls ja, geht das auch innerhalb eines Docker Containers?)</p>\n<p>Es gibt wahrscheinlich keine Möglichkeit einfach via z. B. \"import xxx...basisprofil.r4..xxx\" das BasisProfil in meine App mit einzubinden?</p>\n<p>Vielen Dank für eure Hilfe. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 234172537,
        "sender_full_name": "Morris Miltz",
        "timestamp": 1618239094
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"399680\">@Morris Miltz</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>, Profile stellen letztendlich nur Regeln auf, wie bestimmte Resourcen für bestimmt Zwecke aussehen müssen. Wie Du die Regeln erfüllst, darfst Du selber entscheiden. So ist auch völlig OK, einfach \"per Hand\" die Resources in Deiner App korrekt zusammenzustellen, z.B. in JS/TS einfach als JSON oder mit Templates. In Java/Kotlin kann man die Standard Ressource-Klassen von HAPI FHIR benutzen und einfach sicherstellen, dass alles dem Profil entsprechend ausgefüllt ist. Dafür musstest Du auch nichts installieren, die Profile wären in dem fall szs.  in Deinem Code implizit händisch eingepflegt.</p>\n<p>Um zu überprüfen, ob eine Resource tatsächlich einem Profil entspricht, kann man  sie dagegen validieren. Auf dem Command-Line kann man das z.B. mit den <a href=\"https://confluence.hl7.org/display/FHIR/Using+the+FHIR+Validator\">Standard-Validator</a> machen, dem man dann die Profile zuspielen würde.  Wenn man es zur Laufzeit machen möchtet, könnte man per HTTP einen FHIR-Server, der das Profil kennt, bitten, es zu Validieren. Wenn Du selber so einen Server aufsetzen möchtest (z.B. einen HAPI-Server), müsstest Du dann tatsächlich die Profile auch hochladen. Theoretisch könnte man, wenn man sich in einem Java/Kotlin-Umgebung befindet, auch Validierung mit HAPI FHIR direkt in einem App einbauen und müsste dann die Profile (<em>qua</em> StructureDefinition-Resources) bereitstellen. Ich denke aber, Runtime-Checks wäre eher ungewöhnlich für eine App, die nur nur ganz bestimmt Resources zusammensetzt oder ändert. Typischerweise würde man einfach während der Entwicklung sehr genau sicherstellen, dass die App nur Profil-Konforme Resources zusammenbaut (kann man ja auch als Test-Suite machen) und zur Runtime keine Checks machen - man lässt ja auch nicht die Unit-Tests mitlaufen, jedes mal wenn man eine App öffnet <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  </p>\n<p>Wenn im Kontext vom Firely Terminal vom Installieren gesprochen wird, geht es um die sogennante FHIR Packages (siehe <a href=\"https://registry.fhir.org/learn\">hier</a>), grob gesagt einheitlich versionierte Bündel von Profilen, die in einem NPM-ähnlichen Format (also wie Packages für Node.js) verpackt sind &amp; so auchlokal in einem Cache ablegbar. Solche Packages können u.A. von Standard-Validator benutzt werden.</p>",
        "id": 234273242,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1618294095
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"194703\">@Morten Ernebjerg</span> vielen vielen Dank für deine ausführliche Antwort, dies hat mich unglaublich weiter gebracht, jetzt kann ich die ganzen Dinge auch endlich greifen ^^, vielen lieben Dank nochmal :)</p>",
        "id": 234273821,
        "sender_full_name": "Morris Miltz",
        "timestamp": 1618294593
    },
    {
        "content": "<p>Gerne! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 234281899,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1618299581
    }
]