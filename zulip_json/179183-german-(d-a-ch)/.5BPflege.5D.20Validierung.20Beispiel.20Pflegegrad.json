[
    {
        "content": "<p>Liebe Community, <br>\nich habe für den ePflegebericht ein Beispiel für einen Pflegegrad angelegt. Wir verweisen dabei auf das Profil der Basisprofile.</p>\n<ul>\n<li>Link Profil: <a href=\"http://fhir.de/StructureDefinition/observation-pflegegrad\">http://fhir.de/StructureDefinition/observation-pflegegrad</a></li>\n<li>Link Beispiel: <a href=\"https://simplifier.net/epflegebericht/observation-pflegegrad\">https://simplifier.net/epflegebericht/observation-pflegegrad</a></li>\n</ul>\n<p>Wenn ich das Beispiel validiere, bekomme ich folgende Errors:</p>\n<ul>\n<li>Invalid : Element does not match any slice, but the group at 'Observation.effective[x]' is closed. (Observation.effectivePeriod[0])</li>\n<li>Element does not match any slice, but the group at 'Observation.value[x]' is closed. (Observation.valueCodeableConcept[0])</li>\n</ul>\n<p>Die Ursache kann ich jedoch nicht auftreiben, da nach meinem Verständnis das Beispiel passen sollte.<br>\nKann mir jemand helfen? Danke im Voraus.</p>",
        "id": 209289203,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1599481128
    },
    {
        "content": "<p>Für mich sieht das Profil kaputt aus. Statt auf Period zu beschränken und da dann start auf 1..1 zu setzen wird gesliced und ein \"unabhäniges\" start Element auf 1..1 gesetzt <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> <br>\nGleiches bei value. Das CodeableConcept und dei beschränkungen für text und Codung hängen da nebeneinander, eigentlich müsste das doch hierarchisch sein...</p>",
        "id": 209293547,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1599484031
    },
    {
        "content": "<p>Dass es so angezeigt wird, liegt, glaube ich, daran, dass wir vorher die Auswahl haben. Ich habe das Profil einmal angepasst, aber das ändert nichts an den Fehlermeldungen. Wenn ich das Profil erneut erstelle, sieht es aber auch nicht großartig anders aus :-(</p>",
        "id": 209295917,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1599485537
    },
    {
        "content": "<p>Was genau meinst Du mit \"vorher die Auswahl?\"</p>",
        "id": 209296007,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1599485599
    },
    {
        "content": "<p>Die typeChoice. effective[X] hat als Datenntyp in der Grunddefinition dateTime, Period, Timing und instant. Für uns kommt nur die Period in Frage, um festzuhalten, in welchem Zeitraum der Pflegegrad aktuell war. In diesem Zeitraum grenzen wir noch ein, dass wir mindestens einen Startzeitpunkt haben möchten.</p>",
        "id": 209296278,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1599485769
    },
    {
        "content": "<p>Bei value[X] das gleiche: String, boolean etc. Ich liste das mal nicht alles auf.</p>",
        "id": 209296311,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1599485801
    },
    {
        "content": "<p>Wenn ich mir da zB <a href=\"https://simplifier.net/medizininformatikinitiative-modullabor/observationlab\">https://simplifier.net/medizininformatikinitiative-modullabor/observationlab</a> anschaue, wo value auch anhand des Types gesliced wird, wird das anders (und in meinen Augen \"richtig\") gerendert...</p>",
        "id": 209296313,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1599485802
    },
    {
        "content": "<p>Ihr slict auch... Ein slice mit einer Komponente, ist das sinnvoll?</p>",
        "id": 209296389,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1599485849
    },
    {
        "content": "<p>Ahh, ich sehe das Problem... In dem Pflege-profil ist nur Period erlaubt</p>",
        "id": 209296473,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1599485884
    },
    {
        "content": "<p>genau. Aber eigentlich sollte das kein Problem sein!</p>",
        "id": 209296522,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1599485913
    },
    {
        "content": "<p>ich bin immer noch der Meinung, dass das in dem pflege profil falsch aussieht. Ich versuche mal das so zu bauen wie ich es für richtig halte...</p>",
        "id": 209296611,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1599485973
    },
    {
        "content": "<p>Kannst Du mir die xml dann einmal zuschicken? Dann mach ich ein diff und schaue mir die Unterschiede an. Danke!</p>",
        "id": 209296707,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1599486012
    },
    {
        "content": "<p>Lieb von Dir!</p>",
        "id": 209296717,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1599486018
    },
    {
        "content": "<p>Ich finde nämlich auch, dass es komisch aussieht.</p>",
        "id": 209296759,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1599486054
    },
    {
        "content": "<p>Ich hab das mit SUSHI gemacht, da kommt leider nur JSON raus.<br>\nAber hier das differential: (Ich habe mal nur effective und value behandelt, der Rest sieht ja gut aus.)</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"s2\">&quot;differential&quot;</span><span class=\"err\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;element&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.effective[x]&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.effective[x]&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;slicing&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;discriminator&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n              <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">,</span>\n              <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;$this&quot;</span>\n            <span class=\"p\">}</span>\n          <span class=\"p\">],</span>\n          <span class=\"nt\">&quot;ordered&quot;</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n          <span class=\"nt\">&quot;rules&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;open&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;code&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Period&quot;</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.effectivePeriod&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.effectivePeriod&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;min&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;max&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1&quot;</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.effectivePeriod.start&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.effectivePeriod.start&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;min&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.value[x]&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.value[x]&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;slicing&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;discriminator&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n              <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">,</span>\n              <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;$this&quot;</span>\n            <span class=\"p\">}</span>\n          <span class=\"p\">],</span>\n          <span class=\"nt\">&quot;ordered&quot;</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n          <span class=\"nt\">&quot;rules&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;open&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;code&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;CodeableConcept&quot;</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.valueCodeableConcept&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.valueCodeableConcept&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;min&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;max&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1&quot;</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.valueCodeableConcept.coding&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.valueCodeableConcept.coding&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;min&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;max&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1&quot;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 209298755,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1599487238
    },
    {
        "content": "<p>Hier sind die \"Unterconstraints\" halt am \"getypeden\" Element und nicht am generischen [x].</p>",
        "id": 209298832,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1599487290
    },
    {
        "content": "<p>Habe es gerade in die XML-Datei eingefügt und auf meiner privaten Spielwiese bei Simplifier ausprobiert. Sieht wesentlich besser aus. DANKE!!!!!!!</p>",
        "id": 209300436,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1599488166
    },
    {
        "content": "<p>Gerne :)</p>",
        "id": 209300508,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1599488224
    },
    {
        "content": "<p>Wenn wir wieder uns treffen können, erinnere mich daran, dass ich Dir einen ausgebe!</p>",
        "id": 209300534,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1599488249
    }
]