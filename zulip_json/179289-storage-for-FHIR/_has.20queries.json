[
    {
        "content": "<p>Hi, I'm trying (but struggling) to query my HAPI FHIR server across multiple resource types (applying conditions to each of those resource types within the one query), and I think _has is the correct query construction, but I can't find any suitable examples.</p>\n<p>Here are a couple of examples of the sorts of queries I'm trying to do -</p>\n<p>1. Fetch all patient resources of a particular gender who have no associated communication resources<br>\n2. Fetch all patient resources within an age range who have at least one associated observation resource with specific attributes<br>\nIs anyone able to confirm whether this sort of thing is possible using _has (or using some other construction), ideally pointing me at some handy examples?</p>\n<p>Thanks very much!</p>",
        "id": 169204161,
        "sender_full_name": "Andrew Blundell",
        "timestamp": 1561706842
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"228286\">@Andrew Blundell</span> ,</p>\n<p>A bit late, but:</p>\n<ol>\n<li>There is no way in the search mechanism to find missing references (:not can't be combined with _has).</li>\n<li>{{url}}/Patient?birthdate=gt2010-01-01&amp;birthdate=lt2011-01-01&amp;_has:Observation:patient:code=abc<br>\nwhere 'patient' is the reference from the Observation to Patient and 'code' is a searchparameter on Observation.<br>\nYou cannot AND multiple searchparameters on Observation in the way you could in a SQL subquery.<br>\nSo you can't say that Patient must have an Observation with code=abc AND status=final.</li>\n</ol>\n<p>(BTW: This question was probably overlooked because it was in the storage stream - <a class=\"stream\" data-stream-id=\"179166\" href=\"/#narrow/stream/179166-implementers\">#implementers</a> was probably a better fit).</p>",
        "id": 179408812,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1572421262
    }
]