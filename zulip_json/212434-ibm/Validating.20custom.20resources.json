[
    {
        "content": "<p>Does the IBM FHIR code provide support for validating custom resource definitions? Suppose I have <code>MyPatient</code> which puts some extra constraints on the <code>Patient</code> resource. Is it possible to leverage <code>FHIRValidator</code> to validate this resource? If so, are there examples handy anywhere of how to accomplish this?</p>\n<p>I've been trying to do something along the lines of </p>\n<div class=\"codehilite\"><pre><span></span><code> val profiles = ... // Seq(strings containing structure definitions)\nval customResourceString = ... // String containing JSON representation of a custom resource\nval parsedResource = FHIRParser.parser(Format.JSON).parse(IOUtils.toInputStream(resourceString, &quot;UTF-8&quot;)).asInstanceOf[Resource]\nFHIRValidator.validator().validate(resource, true, profiles: _*)\n</code></pre></div>\n\n\n<p>Depending on the 'resourceType' I use in the custom resource string, either the validator runs, but only appears to validate against the base <code>Patient</code> resource, or if I try to use <code>MyPatient</code> as the <code>resourceType</code> then the FHIRParser chokes on the JSON.</p>\n<p>If anyone has advice on how I should try to proceed I would greatly appreciate it. Thanks!</p>",
        "id": 196228685,
        "sender_full_name": "Matt Sargent",
        "timestamp": 1588620556
    },
    {
        "content": "<p>Hi Matt.  Did you have a look at <a href=\"https://ibm.github.io/FHIR/guides/FHIRValidationGuide\" title=\"https://ibm.github.io/FHIR/guides/FHIRValidationGuide\">https://ibm.github.io/FHIR/guides/FHIRValidationGuide</a> ?  Basically, you need to make your constraints available to the validator via conformance artifacts (StructureDefinition in your case) in the FHIRRegistry</p>",
        "id": 196232796,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1588622504
    },
    {
        "content": "<p>the validator will look them up from there by uri and version</p>",
        "id": 196232989,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1588622618
    },
    {
        "content": "<p>as for building those StructureDefinition, we don't really provide any tooling beyond the base fhir model, but there's lots of tools in the community</p>",
        "id": 196233438,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1588622816
    },
    {
        "content": "<p>Thanks for the response. I'll have to dive in deeper to that example, but after a first pass it seems like validation is built with a FHIR server in mind? Is that correct? Or is it also possible to accomplish by hand, but I'd have to tie together the components called out on that page (fhir-model, fhir-validation, fhir-registry, etc.)?</p>",
        "id": 196235786,
        "sender_full_name": "Matt Sargent",
        "timestamp": 1588624121
    },
    {
        "content": "<p>FHIR Validation is written as a standalone component (a set of modules).  It uses a Java ServiceLoader pattern to find <code>RegistryResourceProviders</code> when its initialized.  In the webapp, that is initialized during server startup (via a ServletContextListener) so you'd need to do similar for your app.</p>",
        "id": 196239825,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1588626192
    },
    {
        "content": "<p><a href=\"https://ibm.github.io/FHIR/guides/CreateFHIRValidationAssembly\" title=\"https://ibm.github.io/FHIR/guides/CreateFHIRValidationAssembly\">https://ibm.github.io/FHIR/guides/CreateFHIRValidationAssembly</a> provides some guidance on building an assembly that contains the validator and all related pieces...although I've never actually gone through that part myself.  Let us know if you hit any issues.</p>",
        "id": 196240285,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1588626447
    },
    {
        "content": "<p>Thanks again Lee. Finally have time to circle back to this.</p>\n<p>I'll let you know if I hit any technical issues. So far my main issue is trying to decipher what the actual steps are from the documentation, but they might make more sense once I start trying to code.</p>",
        "id": 197732575,
        "sender_full_name": "Matt Sargent",
        "timestamp": 1589567079
    },
    {
        "content": "<p>I worked with a teammate today to get a very simple validation program running with a custom profile. We were able to enforce that a Period was required, when normally it was optional.</p>\n<p>Our next step is trying to also enforce that the mandatory Period contains a particular extension, but we have not been able to get that working yet.</p>\n<p>Thanks again for the pointers.</p>",
        "id": 197755587,
        "sender_full_name": "Matt Sargent",
        "timestamp": 1589578792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191676\">@Lee Surprenant</span> , does the FHIR validation support more than \"one level\" of validation? For example, should I be able to have a profile that specifies that a resource contains a Period, and that the Period itself contains a particular extension?</p>",
        "id": 197959347,
        "sender_full_name": "Matt Sargent",
        "timestamp": 1589819023
    },
    {
        "content": "<p>HI Matt yes absolutely</p>",
        "id": 197974043,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1589825056
    },
    {
        "content": "<p>Yes, what paul said.  How are you creating the profiles today?  Did you mention you were using FSH?</p>",
        "id": 197974777,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1589825436
    },
    {
        "content": "<p>Irregardless of which tools you are using to produce the profile, I think the result will be 3 structureDefinitions:</p>\n<ol>\n<li>The StructureDefinition of the extension you want to make mandatory on the Period (call it <a href=\"http://example.com/StructureDefinition/my-extension\">http://example.com/StructureDefinition/my-extension</a>)</li>\n<li>The StructureDefinition of the profile for the Period datatype (call it <a href=\"http://example.com/StructureDefintion/period-with-extension\">http://example.com/StructureDefintion/period-with-extension</a> </li>\n<li>The StructureDefinition of the profile for the resource type where you are making the Period required</li>\n</ol>",
        "id": 197975121,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1589825629
    },
    {
        "content": "<p>although #1 may be optional for what you're trying to accomplish</p>",
        "id": 197975189,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1589825645
    },
    {
        "content": "<p>We are using FSH and sushi to generate profiles.</p>\n<p>There are definitions covering items 2 and 3 from the list above, but I did not add a definition for the extension itself yet. I'll add that in and see if the result is any different.</p>",
        "id": 197981572,
        "sender_full_name": "Matt Sargent",
        "timestamp": 1589828619
    },
    {
        "content": "<p>(apologies ahead of time for this wall of text)</p>\n<p>Here's a minimal cut of the FSH files in use.</p>\n<div class=\"codehilite\"><pre><span></span><code>Profile: MyCoverage\nParent: Coverage\nId: my-coverage\n* period 1..1\n* period only PeriodWithMyExtension\n\nProfile: PeriodWithMyExtension\nParent: Period\nTitle: &quot;Period with my extension&quot;\nId: period-with-my-extension\n* extension contains MyExtension named myExtension 1..1\n\nExtension: MyExtension\nTitle: &quot;My Extension&quot;\nId: my-extension\nDescription: &quot;An extension&quot;\n* value[x] only integer\n</code></pre></div>\n\n\n<p>I generated the structure definitions and added them to our project. I also updated .index.json to the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  &quot;index-version&quot;: 1,\n  &quot;files&quot;: [\n    {\n      &quot;filename&quot;: &quot;my-coverage.json&quot;,\n      &quot;resourceType&quot;: &quot;StructureDefinition&quot;,\n      &quot;id&quot;: &quot;my-coverage&quot;,\n      &quot;url&quot;: &quot;http://myurl.org/my-coverage&quot;,\n      &quot;version&quot;: &quot;4.0.1&quot;,\n      &quot;kind&quot;: &quot;resource&quot;,\n      &quot;type&quot;: &quot;Coverage&quot;\n    },\n    {\n      &quot;filename&quot;: &quot;my-extension.json&quot;,\n      &quot;resourceType&quot;: &quot;StructureDefinition&quot;,\n      &quot;id&quot;: &quot;my-extension&quot;,\n      &quot;url&quot;: &quot;http://myurl.org/my-extension&quot;,\n      &quot;version&quot;: &quot;4.0.1&quot;,\n      &quot;kind&quot;: &quot;complex-type&quot;,\n      &quot;type&quot;: &quot;Extension&quot;\n    },\n    {\n      &quot;filename&quot;: &quot;period-with-my-extension.json&quot;,\n      &quot;resourceType&quot;: &quot;StructureDefinition&quot;,\n      &quot;id&quot;: &quot;period-with-my-extension&quot;,\n      &quot;url&quot;: &quot;http://myurl.org/period-with-my-extension&quot;,\n      &quot;version&quot;: &quot;4.0.1&quot;,\n      &quot;kind&quot;: &quot;complex-type&quot;,\n      &quot;type&quot;: &quot;Period&quot;\n    }\n  ]\n}\n</code></pre></div>\n\n\n<p>Finally, I tried running this toy program:</p>\n<div class=\"codehilite\"><pre><span></span><code>package org.myurl.validation\n\nimport com.ibm.fhir.model.`type`.code.CoverageStatus\nimport com.ibm.fhir.model.`type`.{Canonical, Meta, Period, Reference, String =&gt; FHIRString, DateTime =&gt; FHIRDateTime}\nimport com.ibm.fhir.model.resource.Coverage\nimport com.ibm.fhir.validation.FHIRValidator\n\nobject FHIRValidationPgm {\n\n    val validator = FHIRValidator.validator()\n\n    def main(args: Array[String]): Unit = {\n        val coverage = Coverage.builder()\n          .status(CoverageStatus.ACTIVE)\n          .beneficiary(Reference.builder().reference(FHIRString.of(&quot;none&quot;)).build())\n          .payor(Reference.builder().reference(FHIRString.of(&quot;none&quot;)).build())\n//          .period(Period.builder().start(FHIRDateTime.of(&quot;2020-01-01&quot;)).end(FHIRDateTime.of(&quot;2020-01-31&quot;)).build())\n          .meta(Meta.builder()\n              .profile(Canonical.builder().value(&quot;http://myurl.org/my-coverage&quot;).build())\n            .build()\n          )\n          .build()\n\n\n        System.out.println(validator.validate(coverage))\n    }\n\n}\n</code></pre></div>\n\n\n<p>With the <code>period()</code> line commented out, I see that a constraint is violated in the output:</p>\n<div class=\"codehilite\"><pre><span></span><code> &quot;text&quot;: &quot;generated-my-coverage-1: Constraint violation: period.exists()&quot;\n</code></pre></div>\n\n\n<p>However, when I include the Period line, there is no such complaint about a missing extension on the Period. Any thoughts on what might be going wrong? I'm wondering if I have a mistake all the way back in the FSH files, or if I am adding the structure definitions to the project incorrectly. Thanks for any help you can offer.</p>",
        "id": 197991911,
        "sender_full_name": "Matt Sargent",
        "timestamp": 1589833992
    },
    {
        "content": "<p>Unfortunately, I'm not much good with FSH... is it possible for you to share your StructureDefinitions here (or via other means if sensitive at all)?</p>",
        "id": 197994921,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1589835616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192334\">@John Timm</span> fyi ^</p>",
        "id": 197994982,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1589835661
    },
    {
        "content": "<p>specifically what i'm wondering is if <code>* extension contains MyExtension named myExtension 1..1</code> is doing what you expect it to be doing.  extension is a repeating field and so typically the way to \"constrain\" that is via a \"slice\"</p>",
        "id": 197995810,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1589836164
    },
    {
        "content": "<p>so is this line properly identifying that the profile must contain one (and only one) instance of myExtension in the list of extensions?</p>",
        "id": 197995986,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1589836238
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/wLwyL_ypmJh7Ghfoct4WJ12U/my-coverage.json\">my-coverage.json</a> <a href=\"/user_uploads/10155/gywuscwGtkytKawHmcHpld_w/my-extension.json\">my-extension.json</a> <a href=\"/user_uploads/10155/vPGU0-wv6HyVcMB9oc2MYc-Z/period-with-my-extension.json\">period-with-my-extension.json</a></p>",
        "id": 197996870,
        "sender_full_name": "Matt Sargent",
        "timestamp": 1589836715
    },
    {
        "content": "<p>We currently don't support the generation of constraints on complex data types that are specified in the way that FSH has  generated for this example. We need to convince FSH to generate a structure definition that references the extension definition directly as opposed to doing it through an intermediate profiled complex data type (as you have done). For example:</p>\n<p>Coverage.period<br>\nCoverage.period.extension<br>\nCoverage.period.extension:sliceName</p>",
        "id": 197997484,
        "sender_full_name": "John Timm",
        "timestamp": 1589837125
    },
    {
        "content": "<p>Here's what I think needs to happen:</p>\n<ol>\n<li>Figure out how to get FSH to generate what we do support</li>\n<li>Create an enhancement request to look into what it would take to expand what our constraint generator supports</li>\n</ol>",
        "id": 197998590,
        "sender_full_name": "John Timm",
        "timestamp": 1589837780
    },
    {
        "content": "<p><a href=\"https://github.com/IBM/FHIR/issues/1117\">https://github.com/IBM/FHIR/issues/1117</a></p>",
        "id": 197999504,
        "sender_full_name": "John Timm",
        "timestamp": 1589838364
    },
    {
        "content": "<p>Thanks John. Knowing that the FSH files are the place to start tweaking for now is helpful.</p>",
        "id": 198001446,
        "sender_full_name": "Matt Sargent",
        "timestamp": 1589839658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261034\">@Matt Sargent</span> An enhancement to the constraint generator was delivered with this PR:<br>\n<a href=\"https://github.com/IBM/FHIR/pull/1121\">https://github.com/IBM/FHIR/pull/1121</a></p>",
        "id": 198096112,
        "sender_full_name": "John Timm",
        "timestamp": 1589907542
    },
    {
        "content": "<p>Initial testing with 4.2.2 is looking good so far. Thank you for such a quick turnaround on this new feature!</p>",
        "id": 198495312,
        "sender_full_name": "Matt Sargent",
        "timestamp": 1590181752
    }
]