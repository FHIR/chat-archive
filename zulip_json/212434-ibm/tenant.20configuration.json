[
    {
        "content": "<p>i have tenant namely demo1 and demo2 in config folder which will have the schema demo1 and demo2 respectively , in configDropin i tried to add 2 datasources(datasource-demo1.xml and datasource-demo2.xml) whenever is add the 2nd tenant  i get this error <br>\n \"FHIRPersistenceDBConnectException: Failure acquiring datasource\"</p>",
        "id": 236167903,
        "sender_full_name": "Sridhar S",
        "timestamp": 1619441670
    },
    {
        "content": "<p>i'd expect a jndi error if it was unable to find the dropin.  i'd suggest double-checking your connection properties.  and maybe post the full stacktrace if you keep having issues</p>",
        "id": 236179742,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1619446047
    },
    {
        "content": "<p>if i have single datasource.xml either demo1 or demo2 it works fine but when i have both files i am getting this issue</p>",
        "id": 236281273,
        "sender_full_name": "Sridhar S",
        "timestamp": 1619496983
    },
    {
        "content": "<p>javax.naming.NameNotFoundException: jdbc/fhir_demo1_default<br>\n    at com.ibm.ws.jndi.internal.ContextNode.lookup(ContextNode.java:217)<br>\n    at com.ibm.ws.jndi.internal.WSContext.lookup(WSContext.java:308)<br>\n    at com.ibm.ws.jndi.WSContextBase.lookup(WSContextBase.java:61)<br>\n    at org.apache.aries.jndi.DelegateContext.lookup(DelegateContext.java:149)<br>\n    at javax.naming.InitialContext.lookup(InitialContext.java:417)<br>\n    at com.ibm.fhir.persistence.jdbc.connection.FHIRDbTenantDatasourceConnectionStrategy.getConnection(FHIRDbTenantDatasourceConnectionStrategy.java:148)<br>\n    at com.ibm.fhir.persistence.jdbc.impl.FHIRPersistenceJDBCImpl.openConnection(FHIRPersistenceJDBCImpl.java:1651)<br>\n    at com.ibm.fhir.persistence.jdbc.impl.FHIRPersistenceJDBCImpl.search(FHIRPersistenceJDBCImpl.java:634)<br>\n    at com.ibm.fhir.server.util.FHIRRestHelper.doSearch(FHIRRestHelper.java:1026)<br>\n    at com.ibm.fhir.server.util.FHIRRestHelper.doSearch(FHIRRestHelper.java:960)<br>\n    at com.ibm.fhir.server.resources.Search.search(Search.java:71)<br>\n    at com.ibm.fhir.server.resources.Search$Proxy$_$$_WeldClientProxy.search(Unknown Source)<br>\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>\n    at java.lang.reflect.Method.invoke(Method.java:498)<br>\n    at com.ibm.ws.jaxrs20.cdi.component.JaxRsFactoryImplicitBeanCDICustomizer.serviceInvoke(JaxRsFactoryImplicitBeanCDICustomizer.java:342)<br>\n    at com.ibm.ws.jaxrs20.server.LibertyJaxRsServerFactoryBean.performInvocation(LibertyJaxRsServerFactoryBean.java:641)<br>\n    at com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.performInvocation(LibertyJaxRsInvoker.java:160)<br>\n    at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:101)<br>\n    at com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.invoke(LibertyJaxRsInvoker.java:273)<br>\n    at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:205)<br>\n    at com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.invoke(LibertyJaxRsInvoker.java:444)<br>\n    at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:111)<br>\n    at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)<br>\n    at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:96)<br>\n    at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)<br>\n    at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:123)<br>\n    at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:275)<br>\n    at com.ibm.ws.jaxrs20.endpoint.AbstractJaxRsWebEndpoint.invoke(AbstractJaxRsWebEndpoint.java:137)<br>\n    at com.ibm.websphere.jaxrs.server.IBMRestServlet.handleRequest(IBMRestServlet.java:146)<br>\n    at com.ibm.websphere.jaxrs.server.IBMRestServlet.doGet(IBMRestServlet.java:112)<br>\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:686)<br>\n    at com.ibm.websphere.jaxrs.server.IBMRestServlet.service(IBMRestServlet.java:96)<br>\n    at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1257)<br>\n    at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:745)<br>\n    at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:442)<br>\n    at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:182)<br>\n    at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:93)<br>\n    at com.ibm.fhir.server.filter.rest.FHIRRestServletFilter.doFilter(FHIRRestServletFilter.java:142)<br>\n    at javax.servlet.http.HttpFilter.doFilter(HttpFilter.java:127)<br>\n    at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:201)<br>\n    at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:90)<br>\n    at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:1001)<br>\n    at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1139)<br>\n    at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1010)<br>\n    at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:75)<br>\n    at com.ibm.ws.webcontainer40.servlet.CacheServletWrapper40.handleRequest(CacheServletWrapper40.java:83)<br>\n    at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:936)<br>\n    at com.ibm.ws.webcontainer.osgi.DynamicVirtualHost$2.run(DynamicVirtualHost.java:279)<br>\n    at com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink$TaskWrapper.run(HttpDispatcherLink.java:1141)<br>\n    at com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink.wrapHandlerAndExecute(HttpDispatcherLink.java:422)<br>\n    at com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink.ready(HttpDispatcherLink.java:381)<br>\n    at com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:565)<br>\n    at com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.handleNewRequest(HttpInboundLink.java:499)<br>\n    at com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.processRequest(HttpInboundLink.java:359)<br>\n    at com.ibm.ws.http.channel.internal.inbound.HttpICLReadCallback.complete(HttpICLReadCallback.java:70)<br>\n    at com.ibm.ws.channel.ssl.internal.SSLReadServiceContext$SSLReadCompletedCallback.complete(SSLReadServiceContext.java:1824)<br>\n    at com.ibm.ws.tcpchannel.internal.WorkQueueManager.requestComplete(WorkQueueManager.java:504)<br>\n    at com.ibm.ws.tcpchannel.internal.WorkQueueManager.attemptIO(WorkQueueManager.java:574)<br>\n    at com.ibm.ws.tcpchannel.internal.WorkQueueManager.workerRun(WorkQueueManager.java:958)<br>\n    at com.ibm.ws.tcpchannel.internal.WorkQueueManager$Worker.run(WorkQueueManager.java:1047)<br>\n    at com.ibm.ws.threading.internal.ExecutorServiceImpl$RunnableWrapper.run(ExecutorServiceImpl.java:239)<br>\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)<br>\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)<br>\n    at java.lang.Thread.run(Thread.java:823)</p>\n<p>[2021-04-27T04:14:15.982+0000] 00000113 com.ibm.fhir.persistence.jdbc.impl.CacheTransactionSync      I Transaction failed - afterCompletion(status = 4)<br>\n[2021-04-27T04:14:15.982+0000] 00000113 com.ibm.fhir.server.resources.FHIRResource                   E Failure acquiring datasource<br>\ncom.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException: Failure acquiring datasource  [probeId=a-20-0-4-be93ef09-5939-4ea9-85e8-29dd38c318c0]<br>\n    at com.ibm.fhir.persistence.jdbc.connection.FHIRDbTenantDatasourceConnectionStrategy.getConnection(FHIRDbTenantDatasourceConnectionStrategy.java:152)<br>\n    at com.ibm.fhir.persistence.jdbc.impl.FHIRPersistenceJDBCImpl.openConnection(FHIRPersistenceJDBCImpl.java:1651)<br>\n    at com.ibm.fhir.persistence.jdbc.impl.FHIRPersistenceJDBCImpl.search(FHIRPersistenceJDBCImpl.java:634)<br>\n    at com.ibm.fhir.server.util.FHIRRestHelper.doSearch(FHIRRestHelper.java:1026)<br>\n    at com.ibm.fhir.server.util.FHIRRestHelper.doSearch(FHIRRestHelper.java:960)<br>\n    at com.ibm.fhir.server.resources.Search.search(Search.java:71)<br>\n    at com.ibm.fhir.server.resources.Search$Proxy$_$$_WeldClientProxy.search(Unknown Source)<br>\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>\n    at java.lang.reflect.Method.invoke(Method.java:498)<br>\n    at com.ibm.ws.jaxrs20.cdi.component.JaxRsFactoryImplicitBeanCDICustomizer.serviceInvoke(JaxRsFactoryImplicitBeanCDICustomizer.java:342)<br>\n    at com.ibm.ws.jaxrs20.server.LibertyJaxRsServerFactoryBean.performInvocation(LibertyJaxRsServerFactoryBean.java:641)<br>\n    at com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.performInvocation(LibertyJaxRsInvoker.java:160)<br>\n    at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:101)<br>\n    at com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.invoke(LibertyJaxRsInvoker.java:273)<br>\n    at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:205)<br>\n    at com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.invoke(LibertyJaxRsInvoker.java:444)<br>\n    at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:111)<br>\n    at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)<br>\n    at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:96)<br>\n    at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)<br>\n    at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:123)<br>\n    at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:275)<br>\n    at com.ibm.ws.jaxrs20.endpoint.AbstractJaxRsWebEndpoint.invoke(AbstractJaxRsWebEndpoint.java:137)<br>\n    at com.ibm.websphere.jaxrs.server.IBMRestServlet.handleRequest(IBMRestServlet.java:146)<br>\n    at com.ibm.websphere.jaxrs.server.IBMRestServlet.doGet(IBMRestServlet.java:112)<br>\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:686)<br>\n    at com.ibm.websphere.jaxrs.server.IBMRestServlet.service(IBMRestServlet.java:96)<br>\n    at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1257)<br>\n    at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:745)<br>\n    at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:442)<br>\n    at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:182)<br>\n    at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:93)<br>\n    at com.ibm.fhir.server.filter.rest.FHIRRestServletFilter.doFilter(FHIRRestServletFilter.java:142)<br>\n    at javax.servlet.http.HttpFilter.doFilter(HttpFilter.java:127)<br>\n    at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:201)<br>\n    at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:90)<br>\n    at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:1001)<br>\n    at</p>",
        "id": 236281281,
        "sender_full_name": "Sridhar S",
        "timestamp": 1619496992
    },
    {
        "content": "<p>OK, this is the error i'd expect if it cannot find the datasource definition for tenant demo1.  And I have a guess about why you're seeing this.<br>\nEach datasource element must have a unique id (or no id at all).  If your two datasource definitions have the same id then the latter one will overwrite the former.</p>",
        "id": 236318189,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1619522025
    },
    {
        "content": "<p>for example, if you had the following dropins:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;dataSource id=&quot;fhirDefaultDefault&quot; jndiName=&quot;jdbc/fhir_demo1_default&quot;...\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>&lt;dataSource id=&quot;fhirDefaultDefault&quot; jndiName=&quot;jdbc/fhir_demo2_default&quot;...\n</code></pre></div>\n<p>then the latter one would override the former one and the system would be unable to find <code>jdbc/fhir_demo1_default</code></p>",
        "id": 236318360,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1619522140
    },
    {
        "content": "<p>see <a href=\"https://openliberty.io/docs/latest/reference/config/server-configuration-overview.html#_configuration_merging\">https://openliberty.io/docs/latest/reference/config/server-configuration-overview.html#_configuration_merging</a> for more info on this feature</p>",
        "id": 236318505,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1619522205
    },
    {
        "content": "<p>oh ok , thank you  now i am able to access both tenants</p>",
        "id": 236332835,
        "sender_full_name": "Sridhar S",
        "timestamp": 1619528966
    }
]