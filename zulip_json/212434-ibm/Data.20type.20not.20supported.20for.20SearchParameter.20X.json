[
    {
        "content": "<p>In <a href=\"https://github.com/IBM/FHIR/pull/351\" target=\"_blank\" title=\"https://github.com/IBM/FHIR/pull/351\">https://github.com/IBM/FHIR/pull/351</a> I added some validation to the search parameter value extraction process.  I thought it might break things, but all our tests are still passing.  However, now our R4ExamplesDriver is littered with INFO messages similar to these:</p>\n<div class=\"codehilite\"><pre><span></span>Nov 04, 2019 9:28:42 AM com.ibm.fhir.persistence.jdbc.impl.FHIRPersistenceJDBCImpl extractSearchParameters\nINFO: Skipping search parameter &#39;context-quantity&#39;  with id &#39;{\n    &quot;id&quot;: &quot;conformance-context-quantity&quot;\n}&#39; for resource type CapabilityStatement\njava.lang.IllegalArgumentException: Data type &#39;CodeableConcept&#39; is not supported for SearchParameter &#39;context-quantity&#39; of type &#39;quantity&#39;\n    at com.ibm.fhir.persistence.jdbc.util.JDBCParameterBuildingVisitor.invalidComboException(JDBCParameterBuildingVisitor.java:587)\n    at com.ibm.fhir.persistence.jdbc.util.JDBCParameterBuildingVisitor.visit(JDBCParameterBuildingVisitor.java:288)\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Nov 04, 2019 9:28:44 AM com.ibm.fhir.persistence.jdbc.impl.FHIRPersistenceJDBCImpl extractSearchParameters\nINFO: Skipping search parameter &#39;onset-age&#39;  with id &#39;{\n    &quot;id&quot;: &quot;Condition-onset-age&quot;\n}&#39; for resource type Condition\njava.lang.IllegalArgumentException: Data type &#39;DateTime&#39; is not supported for SearchParameter &#39;onset-age&#39; of type &#39;quantity&#39;\n    at com.ibm.fhir.persistence.jdbc.util.JDBCParameterBuildingVisitor.invalidComboException(JDBCParameterBuildingVisitor.java:587)\n    at com.ibm.fhir.persistence.jdbc.util.JDBCParameterBuildingVisitor.visit(JDBCParameterBuildingVisitor.java:153)\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Nov 04, 2019 9:33:31 AM com.ibm.fhir.persistence.jdbc.impl.FHIRPersistenceJDBCImpl extractSearchParameters\nINFO: Skipping search parameter &#39;context&#39;  with id &#39;{\n    &quot;id&quot;: &quot;conformance-context&quot;\n}&#39; for resource type StructureMap\njava.lang.IllegalArgumentException: Data type &#39;Reference&#39; is not supported for SearchParameter &#39;context&#39; of type &#39;token&#39;\n    at com.ibm.fhir.persistence.jdbc.util.JDBCParameterBuildingVisitor.invalidComboException(JDBCParameterBuildingVisitor.java:587)\n    at com.ibm.fhir.persistence.jdbc.util.JDBCParameterBuildingVisitor.visit(JDBCParameterBuildingVisitor.java:487)\n</pre></div>",
        "id": 179838699,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572878454
    },
    {
        "content": "<p>I'm gonna look into this a bit to see why we have so many search parameter expressions that lead to values of the wrong type</p>",
        "id": 179838842,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572878538
    },
    {
        "content": "<p>could it be the example?</p>",
        "id": 179839024,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1572878682
    },
    {
        "content": "<p>my initial guess is that its our handling of choice elements</p>",
        "id": 179839043,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572878703
    },
    {
        "content": "<p><code>Condition.onset.as(Age) | Condition.onset.as(Range)</code></p>",
        "id": 179839082,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572878734
    },
    {
        "content": "<p>thats the expression for Condition-onset-age</p>",
        "id": 179839169,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572878775
    },
    {
        "content": "<p>but the element is allowed to be of other types</p>",
        "id": 179839179,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572878783
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/lP_Wz4-fHF3K81v4suGs3VYl/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/lP_Wz4-fHF3K81v4suGs3VYl/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/lP_Wz4-fHF3K81v4suGs3VYl/pasted_image.png\"></a></div>",
        "id": 179839182,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572878785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192334\">@John Timm</span> should <code>as</code> be returning an empty list when the type doesn't match?</p>",
        "id": 179839226,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572878817
    },
    {
        "content": "<p>If the left operand is a collection with a single item and the second operand is an identifier, this function returns the value of the left operand if it is of the type specified in the second operand, or a subclass thereof. If the identifier cannot be resolved to a valid type identifier, the evaluator will throw an error. If there is more than one item in the input collection, the evaluator will throw an error. Otherwise, this operator returns the empty collection.</p>",
        "id": 179840535,
        "sender_full_name": "John Timm",
        "timestamp": 1572879680
    },
    {
        "content": "<p>These are the semantics of the <code>as</code> operator. AFAIK, the <code>as</code> function works the same way.</p>",
        "id": 179840655,
        "sender_full_name": "John Timm",
        "timestamp": 1572879752
    },
    {
        "content": "<p>ok, so Condition.onset should be a single element in this case</p>",
        "id": 179840741,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572879829
    },
    {
        "content": "<p>help me parse:</p>\n<blockquote>\n<p>If the identifier cannot be resolved to a valid type identifier, the evaluator will throw an error.</p>\n</blockquote>",
        "id": 179840746,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572879835
    },
    {
        "content": "<p>i guess thats specifically about the argument being passed (e.g. Age)</p>",
        "id": 179840814,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572879863
    },
    {
        "content": "<p>yep, exactly</p>",
        "id": 179840826,
        "sender_full_name": "John Timm",
        "timestamp": 1572879871
    },
    {
        "content": "<p>and Age should be a valid identifier, so I think I'm right to expect that this should be returning an empty list</p>",
        "id": 179840851,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572879889
    },
    {
        "content": "<p>yes, i agree. i think empty collection is what we would expect</p>",
        "id": 179840904,
        "sender_full_name": "John Timm",
        "timestamp": 1572879933
    },
    {
        "content": "<p>our fhirpath unit tests are pretty deep.  do we have a simple \"create fhir resource and select something with fhirpath\" example?</p>",
        "id": 179841232,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572880110
    },
    {
        "content": "<p>i guess its just</p>\n<div class=\"codehilite\"><pre><span></span>    @Test\n    void testSelectAs() throws Exception {\n        Resource resource = TestUtil.readExampleResource(&quot;json/ibm/complete-mock/Patient-1.json&quot;);\n        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n        evaluator.evaluate(resource, fhirpath);\n    }\n</pre></div>\n\n\n<p>any need for EvaluationContext?</p>",
        "id": 179841564,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572880350
    },
    {
        "content": "<p>yes, interesting so... we run through extractParameterValues</p>",
        "id": 179841626,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1572880397
    },
    {
        "content": "<p>if it's in the fhir-examples, we run through the correlated expressions, if as is one of them, we run through it</p>",
        "id": 179841663,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1572880424
    },
    {
        "content": "<p>EvaluationContext would be used if / when you want to reuse the same FHIRPath tree and improve performance. The signature without EvaluationContext creates a new one every time.</p>",
        "id": 179841958,
        "sender_full_name": "John Timm",
        "timestamp": 1572880619
    },
    {
        "content": "<p>ok, makes sense</p>",
        "id": 179841981,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572880636
    },
    {
        "content": "<p>some javadoc to that effect would go long way :-)</p>",
        "id": 179842007,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572880654
    },
    {
        "content": "<p>anyway, i confirmed the issue</p>",
        "id": 179842014,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572880661
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    @Test\n    void testSelectAs() throws Exception {\n        Resource resource = TestUtil.readExampleResource(&quot;json/ibm/complete-mock/Patient-1.json&quot;);\n        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n\n        Collection&lt;FHIRPathNode&gt; result = evaluator.evaluate(resource, &quot;Patient.deceased as dateTime&quot;);\n        assertEquals(result.size(), 1, &quot;Number of selected nodes&quot;);\n    }\n</pre></div>",
        "id": 179842018,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572880663
    },
    {
        "content": "<p>I thought all of the FHIRPathEvaluator public methods already had Javadoc</p>",
        "id": 179842077,
        "sender_full_name": "John Timm",
        "timestamp": 1572880688
    },
    {
        "content": "<p>not in master</p>",
        "id": 179842106,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572880716
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/VM-j1gbpSb3dx2WL01sUzzAF/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/VM-j1gbpSb3dx2WL01sUzzAF/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/VM-j1gbpSb3dx2WL01sUzzAF/pasted_image.png\"></a></div>",
        "id": 179842109,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572880718
    },
    {
        "content": "<p>guess not</p>",
        "id": 179842116,
        "sender_full_name": "John Timm",
        "timestamp": 1572880722
    },
    {
        "content": "<p>weird</p>",
        "id": 179842118,
        "sender_full_name": "John Timm",
        "timestamp": 1572880725
    },
    {
        "content": "<p>anywya, i'll open a new issue for this one (the <code>as</code>issue, not the missing javadoc)</p>",
        "id": 179842156,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572880763
    },
    {
        "content": "<p><a href=\"https://github.com/IBM/FHIR/issues/355\" target=\"_blank\" title=\"https://github.com/IBM/FHIR/issues/355\">https://github.com/IBM/FHIR/issues/355</a></p>",
        "id": 179843131,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572881426
    },
    {
        "content": "<p>ok, john and i tag-teamed this one and its now addressed</p>",
        "id": 179930611,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572960099
    },
    {
        "content": "<p>however, we still see the message showing up in a few places.  i traced these down to:</p>\n<ol>\n<li>issues with the spec (see <a href=\"#narrow/stream/179166-implementers/topic/data.20type.20vs.20search.20parameter.20type/near/179929756\" title=\"#narrow/stream/179166-implementers/topic/data.20type.20vs.20search.20parameter.20type/near/179929756\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/data.20type.20vs.20search.20parameter.20type/near/179929756</a>); and</li>\n<li>issues with our JDBCSearch tests (where I was purposefully mismatching data types and search parameter types to see what would happen)</li>\n</ol>",
        "id": 179930748,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572960197
    },
    {
        "content": "<p>for #2, we should probably just move those tests into the ParameterExtractionTest since it will be easier to verify an IllegalArgumentException from there</p>",
        "id": 179930770,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572960229
    },
    {
        "content": "<p>#2 has been addressed simply by removing the unnecessary data elements from the Basic examples; now we should only see these for the bad spec searchparameters</p>",
        "id": 180176385,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573161071
    }
]