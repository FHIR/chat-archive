[
    {
        "content": "<p>Hi everyone,<br>\ni'm facing the following problem with my dockerized IBM FHIR Server:<br>\nChanging the password of <code>fhirKeyStore.p12</code> works well, as this keystore is mounted from the host machine (containing the local https-certificate). <br>\nWhen changing the password of <code>fhirTrustStore.p12</code> in <code>server.xml</code> (as this is the only place where i can find the password-configuration) accessing the keystore fails.</p>\n<p>Is it really necessary to mount a <code>fhirTrustStore.p12</code> with the updated password or is there another password-configuration anywhere?</p>",
        "id": 219812106,
        "sender_full_name": "Cornelius Erbelding",
        "timestamp": 1607934966
    },
    {
        "content": "<p>Hi Cornelius,  one option you can mount a configDrops/override that has the updated details, it might not do exactly what you want, however, it should override the server.xml behavior for the keystore</p>",
        "id": 220008937,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1608051602
    },
    {
        "content": "<p>Otherwise, I don't think you can as part of the image update the fhirtTrustStore.p12 password in the image itself</p>",
        "id": 220009041,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1608051631
    },
    {
        "content": "<p>Thinking about this some more - maybe we could make an enhancement to externalize it? <span class=\"user-mention\" data-user-id=\"191676\">@Lee Surprenant</span> when you get a second what do you think?</p>",
        "id": 220013832,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1608053608
    },
    {
        "content": "<blockquote>\n<p>Is it really necessary to mount a fhirTrustStore.p12 with the updated password or is there another password-configuration anywhere?</p>\n</blockquote>\n<p>the configured trustStore password (in server.xml or a configDropin) really does need to match the actual password of the configured truststore.<br>\nthis truststore is used for two main things:</p>\n<ul>\n<li>designating which client certs the server should trust (we enable mutual TLS by default, but with these sample certs)</li>\n<li>security the connection of outbound TLS (although the db connection may use a different one...i know postgresql does)</li>\n</ul>\n<p>are you using mTLS?<br>\nif not, you can decide how tight to make your truststore.  one thing I'd like to do is update the server to use the default java truststore by default (e.g. by setting the following env property which is supported by liberty: <br>\n SEC_TLS_TRUSTDEFAULTCERTS=true).  the only thing stopping me is that currently we ship with that sample mTLS setup and so we still need our self-signed client cert in the truststore for that to work.</p>",
        "id": 220019875,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1608056231
    },
    {
        "content": "<blockquote>\n<p>maybe we could make an enhancement to externalize it?</p>\n</blockquote>\n<p>sounds reasonable to me. is there a keytool command for changing the password of an existing store?  or do you need to create a new one and copy over the entries?</p>",
        "id": 220019975,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1608056272
    },
    {
        "content": "<blockquote>\n<p>sounds reasonable to me. is there a keytool command for changing the password of an existing store? or do you need to create a new one and copy over the entries?</p>\n</blockquote>\n<p>Yes, there is one: <code>keytool -storepasswd -keystore fhirTrustStore.p12</code></p>",
        "id": 220081321,
        "sender_full_name": "Cornelius Erbelding",
        "timestamp": 1608099348
    },
    {
        "content": "<blockquote>\n<p>one option you can mount a configDrops/override that has the updated details, it might not do exactly what you want, however, it should override the server.xml behavior for the keystore<br>\n Otherwise, I don't think you can as part of the image update the fhirtTrustStore.p12 password in the image itself</p>\n</blockquote>\n<p>I've copied the <code>fhirTrustStore.p12</code> from the Docker-Container, changed the password and mounted it directly to <code>./resources/security/fhirTrustStore.p12</code>.<br>\nMy keystore credentials (for <code>fhirTrustStore</code> and <code>fhirKeyStore</code>) are passed as environment variables, therefore, the <code>server.xml</code> contains the <code>${variable}</code> part.<br>\nHowever, it does work for the <code>fhirKeyStore</code> containing my local SSL certificate, but not for the <code>fhirTrustStore</code>.<br>\n The Error is <code>keytool error: java.io.FileNotFoundException: resources/security/fhirTrustStore.p12 (Permission denied)</code> (when trying to import Keycloaks realm- &amp; instance-certificate)<br>\nDirect access to the keystore (via <code>docker exec -it CONTAINER /bin/bash</code> &amp; <code>keytool --list -v -keystore fhirTrustStore.p12</code>) works with the same password.<br>\nWhen accessing the running FHIR-Server, the JWT-Tokens can't be validated as the Token-Signer can't be found within the <code>fhirTrustStore.p12</code></p>",
        "id": 220081386,
        "sender_full_name": "Cornelius Erbelding",
        "timestamp": 1608099415
    }
]