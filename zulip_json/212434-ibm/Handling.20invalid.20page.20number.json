[
    {
        "content": "<p>I recently added PersistenceLayer (PL) test cases for handling invalid page numbers (AbstractPagingTest.testInvalidPage0 and AbstractPagingTest.testInvalidPage4)</p>",
        "id": 179348128,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367435
    },
    {
        "content": "<p><a href=\"https://github.com/IBM/FHIR/pull/330\" target=\"_blank\" title=\"https://github.com/IBM/FHIR/pull/330\">https://github.com/IBM/FHIR/pull/330</a> updates the JDBC impl so that it doesn't throw when we get an invalid page number</p>",
        "id": 179348259,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367510
    },
    {
        "content": "<p>but its causing the test to fail because its expecting an exception</p>",
        "id": 179348277,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367527
    },
    {
        "content": "<p>what is the proper behavior for a Persistence implementation when we receive a search with an invalid page number?</p>",
        "id": 179348360,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367568
    },
    {
        "content": "<p>what type of invalid number?</p>",
        "id": 179348394,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1572367595
    },
    {
        "content": "<p>two examples</p>",
        "id": 179348398,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367603
    },
    {
        "content": "<p>negative, zero... <br>\npostivie?</p>",
        "id": 179348400,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1572367603
    },
    {
        "content": "<p>negative / zero is one<br>\nmore than the number of pages is the other</p>",
        "id": 179348446,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367635
    },
    {
        "content": "<p>so lets call them 0, and 4  (the test expects 3)</p>",
        "id": 179348467,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367646
    },
    {
        "content": "<p>more than ... empty page</p>",
        "id": 179348481,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1572367655
    },
    {
        "content": "<p>in both cases, it is a client error</p>",
        "id": 179348488,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367662
    },
    {
        "content": "<p>less than it should throw some loose exception / outcome or return the first page</p>",
        "id": 179348509,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1572367671
    },
    {
        "content": "<p>once again.... my 1000 cents</p>",
        "id": 179348566,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1572367686
    },
    {
        "content": "<p>in <a href=\"https://github.com/IBM/FHIR/issues/194\" target=\"_blank\" title=\"https://github.com/IBM/FHIR/issues/194\">https://github.com/IBM/FHIR/issues/194</a> we define a rule-of-thumb...that PL shouldn't throw for client errors</p>",
        "id": 179348636,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367733
    },
    {
        "content": "<p>...but one that our impl doesn't actually follow</p>",
        "id": 179348670,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367749
    },
    {
        "content": "<p>so this is an interesting test for that...</p>",
        "id": 179348695,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367759
    },
    {
        "content": "<p>what if we have the PL return an empty result along with an OperationOutcome with a warning that the page number was invalid?</p>",
        "id": 179348841,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367824
    },
    {
        "content": "<p>then, for the server, the REST layer can decide what to do with that (based on the passed Prefer \"return\" preference or the server config)</p>",
        "id": 179348883,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367863
    },
    {
        "content": "<p>and for the test, we could verify that:</p>\n<ol>\n<li>no results came back; and</li>\n<li>the response contains the warning</li>\n</ol>",
        "id": 179348925,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572367886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192632\">@Paul Bastide</span> thoughts on this proposal?  or you still prefer throwing in the page 0 case?</p>",
        "id": 179349171,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572368013
    },
    {
        "content": "<p>I like the idea.  I think that makes sense</p>",
        "id": 179349260,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1572368046
    },
    {
        "content": "<p>it's a parseable result</p>",
        "id": 179349275,
        "sender_full_name": "Paul Bastide",
        "timestamp": 1572368053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246296\">@Albert(Xu) Wang</span> <span class=\"user-mention\" data-user-id=\"192334\">@John Timm</span> ? ^</p>",
        "id": 179349296,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572368071
    },
    {
        "content": "<p>i also kind of like paul's idea of returning page 1 if they ask for a negative or 0 page.  any objections to this?</p>",
        "id": 179349410,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572368133
    },
    {
        "content": "<p>something totally unexpected, but potentially handy, would be to interpret negative pages as index number from the back (like negative python array indices) :-)</p>",
        "id": 179349516,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572368176
    },
    {
        "content": "<p>I support the option of using 1 if the page number is negative or zero</p>",
        "id": 179353609,
        "sender_full_name": "John Timm",
        "timestamp": 1572370609
    },
    {
        "content": "<p>and in the case of page number &gt; last page, we just return 0 results?</p>",
        "id": 179353986,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572370861
    },
    {
        "content": "<p>The reason why we no longer see an exception is because pagination happens on a List of resource ids, previously, we had a problem where when the list was empty, it was generating invalid SQL and ultimately throwing a FHIRPersistenceException. Now an empty list is returned if there are no resource ids for a given page (i.e. an invalid offset).</p>",
        "id": 179354260,
        "sender_full_name": "John Timm",
        "timestamp": 1572371027
    },
    {
        "content": "<p>should we have logic like this:<br>\nif (page &lt; min) page = min<br>\nif (page &gt; max) page = max<br>\n?</p>",
        "id": 179354331,
        "sender_full_name": "John Timm",
        "timestamp": 1572371061
    },
    {
        "content": "<p>i like the page&lt;min check</p>",
        "id": 179354645,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572371269
    },
    {
        "content": "<p>i think we're in a greement there</p>",
        "id": 179354664,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572371278
    },
    {
        "content": "<p>for page &gt; max, I think we're better off returning empty</p>",
        "id": 179354725,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572371303
    },
    {
        "content": "<p>but i don't feel that strongly</p>",
        "id": 179354733,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572371311
    },
    {
        "content": "<p>That's fair</p>",
        "id": 179354741,
        "sender_full_name": "John Timm",
        "timestamp": 1572371320
    },
    {
        "content": "<p>it would enable lazy folks to just keep incrementing page number til they don't get anything</p>",
        "id": 179354766,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572371341
    },
    {
        "content": "<p>(as opposed to checking either the total or the lastpage like they should)</p>",
        "id": 179354795,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572371360
    },
    {
        "content": "<p>Have we decided the best place to put the logic? I can add the change to my PR. Also, we will need to tweak the unit tests accordingly.</p>",
        "id": 179354804,
        "sender_full_name": "John Timm",
        "timestamp": 1572371366
    },
    {
        "content": "<p>no, we havn't determined where yet.  yes, if you can add to your PR that would be ideal</p>",
        "id": 179354848,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572371394
    },
    {
        "content": "<p>sure, i'll dig in and figure out where to put it</p>",
        "id": 179355012,
        "sender_full_name": "John Timm",
        "timestamp": 1572371465
    },
    {
        "content": "<p>so then on the search result bundle what do we put for prev / next if page &gt; max = no results</p>",
        "id": 179355160,
        "sender_full_name": "John Timm",
        "timestamp": 1572371531
    },
    {
        "content": "<p>will we just keep reporting imaginary pages?</p>",
        "id": 179355175,
        "sender_full_name": "John Timm",
        "timestamp": 1572371542
    },
    {
        "content": "<p>I guess it would keep things consistent</p>",
        "id": 179355253,
        "sender_full_name": "John Timm",
        "timestamp": 1572371596
    },
    {
        "content": "<p>but it seems a bit odd to have self = 5000, pref = 4999 and next = 5001 when we are already way out of range of the actually paged data</p>",
        "id": 179355289,
        "sender_full_name": "John Timm",
        "timestamp": 1572371623
    },
    {
        "content": "<p>good question.  i was mostly focused on whats the proper response from the Persistence Layer's perspective</p>",
        "id": 179355412,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572371685
    },
    {
        "content": "<p>if we want, we return success=false</p>",
        "id": 179355469,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572371720
    },
    {
        "content": "<p>and REST layer could map the OperationOutcome to a 400 error</p>",
        "id": 179355511,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572371743
    },
    {
        "content": "<p>I'd be tempted to do that for all invalid page numbers... negative, zero, &gt; max, etc.</p>",
        "id": 179355651,
        "sender_full_name": "John Timm",
        "timestamp": 1572371819
    },
    {
        "content": "<p>I'm just trying to make sure things are (mostly) consistent across the board</p>",
        "id": 179355680,
        "sender_full_name": "John Timm",
        "timestamp": 1572371834
    },
    {
        "content": "<p>yeah</p>",
        "id": 179355717,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572371859
    },
    {
        "content": "<p>does spec define behavior for invalid page numbers?</p>",
        "id": 179355801,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572371897
    },
    {
        "content": "<p><a href=\"https://www.hl7.org/fhir/http.html#paging\" target=\"_blank\" title=\"https://www.hl7.org/fhir/http.html#paging\">https://www.hl7.org/fhir/http.html#paging</a></p>",
        "id": 179356032,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572372012
    },
    {
        "content": "<p>doesn't really help</p>",
        "id": 179356295,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572372133
    },
    {
        "content": "<p>there is no official <code>_page</code> parameter</p>",
        "id": 179356307,
        "sender_full_name": "John Timm",
        "timestamp": 1572372138
    },
    {
        "content": "<p>only <code>_count</code></p>",
        "id": 179356319,
        "sender_full_name": "John Timm",
        "timestamp": 1572372143
    },
    {
        "content": "<p>and if <code>_count=0</code> then it should be interpreted as <code>_summary=count</code></p>",
        "id": 179356371,
        "sender_full_name": "John Timm",
        "timestamp": 1572372181
    },
    {
        "content": "<p>yeah, i guess the _page parameter was our invention</p>",
        "id": 179356562,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572372288
    },
    {
        "content": "<p>and what matters is the links in the response</p>",
        "id": 179356577,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572372295
    },
    {
        "content": "<p>anyway, i think the cop-out on this issue is <a href=\"https://github.com/IBM/FHIR/issues/254\" target=\"_blank\" title=\"https://github.com/IBM/FHIR/issues/254\">https://github.com/IBM/FHIR/issues/254</a> :-)</p>",
        "id": 179356604,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572372310
    },
    {
        "content": "<p>lenient:  <code>&lt; 1</code> -&gt; 1; <code>&gt; last</code> -&gt; last<br>\nstrict:  <code>&lt; 1 or &gt; last</code> -&gt; 400 error</p>",
        "id": 179356702,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572372362
    },
    {
        "content": "<p>we already hide <code>prev</code> and <code>next</code> links for the first/last entry.  so on that front we could just exclude them both if we have an invalid page number</p>",
        "id": 179356889,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572372446
    },
    {
        "content": "<p>we need the lenient/strict behavior for invalid count as well</p>",
        "id": 179357085,
        "sender_full_name": "John Timm",
        "timestamp": 1572372529
    },
    {
        "content": "<p>and also we need _count=0 to invoke _summary=count</p>",
        "id": 179357103,
        "sender_full_name": "John Timm",
        "timestamp": 1572372545
    },
    {
        "content": "<p>I think 254 can cover _count validation, but wanna open new related issue for handling _count=0 ?</p>",
        "id": 179357187,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572372592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191676\">@Lee Surprenant</span><br>\n254 can cover page and new issue for count or vice versa?</p>",
        "id": 179357405,
        "sender_full_name": "John Timm",
        "timestamp": 1572372692
    },
    {
        "content": "<p>sorry, i just meant 254 can cover the \"validation\" (and use of handling pref) for all parameters  (_count, _page, and all others)</p>",
        "id": 179362930,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572375777
    },
    {
        "content": "<p>so open a new issue for handling _count=0</p>",
        "id": 179363005,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1572375835
    }
]