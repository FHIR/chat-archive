[
    {
        "content": "<p>On the page describing the Subscription resource it states that the client should delete the Subscription when it is done. I am not 100% sure how I should interpret that. If I have an app that subscribes to something, does that mean when the app quits, I shall delete the subscription, or is that only the case when the app will never restart? The app could update the subscription to turn it from active to off, save the subscription logical id, exit, and on restart update the subscription to make it active (or requested, if active is not allowed to be set by the client).</p>\n<p>What is the exact procedure?</p>",
        "id": 176417213,
        "sender_full_name": "Brian Reinhold",
        "timestamp": 1569279457
    },
    {
        "content": "<p>Interesting. In connectathons, we've had the client set it to off - not delete. <span class=\"user-mention\" data-user-id=\"192228\">@Brian Reinhold</span>  That type of behavior may depend on the app. In the spec, it calls out that the server may set it to off if it fails to deliver too many times as well. If the endpoint to notify goes away when a specific instance of the app is closed, you would likely want to control the lifecycle on the app side (otherwise you'll have to check if the server shut it off anyway due to errors)</p>",
        "id": 176467726,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1569334646
    },
    {
        "content": "<p>Most of the apps in the tests have been server side that can then deliver to specific instances - so the server was always there.</p>",
        "id": 176467858,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1569334717
    },
    {
        "content": "<p>That text was added in an effort to reduce orphaned subscriptions.  If a client will no longer need notifications (e.g., the user is removing an account, the app is being removed, etc.), it should remove the subscription.  This is probably just wishful thinking, as apps will likely be deleted without being given the opportunity.</p>\n<p>In the case that the app will just be offline (and the endpoint will either be offline or cannot queue messages for the client), then setting to off would be more appropriate since the app will want to re-enable it when it comes alive again.</p>\n<p>We have not discussed the fine-grained process for re-enabling a subscription which is off.  I can see arguments for either status (requested or active directly).  Do server implementers have a preference?</p>",
        "id": 176472777,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1569337618
    },
    {
        "content": "<p>servers should probably clean out subscriptions over time. Especially app added ones, though I'm not sure how that differentiation would be made</p>",
        "id": 176510743,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569362412
    },
    {
        "content": "<p>There is an <code>end</code> (<code>instant</code>) field which should be filled out (and extended if needed).  It is optional, but I can see servers requiring it for that reason.</p>",
        "id": 176511236,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1569362776
    },
    {
        "content": "<p>In the Argonaut encounters IG (for instance), we've discussed wherever we should require clients to set an end date (and requiring that it be no more than xx months in the future).</p>",
        "id": 176601281,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1569442210
    },
    {
        "content": "<p>I like that idea of an end date. (A)live apps can just update the date as they periodically check their subscriptions' statuses.</p>",
        "id": 176787913,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1569619903
    },
    {
        "content": "<p>We use end date for that reason in current implementations, and default it if not set via a business rule.  There's a process that cleans them out periodically based on end date.</p>",
        "id": 177909272,
        "sender_full_name": "Keith Boone",
        "timestamp": 1570802509
    }
]