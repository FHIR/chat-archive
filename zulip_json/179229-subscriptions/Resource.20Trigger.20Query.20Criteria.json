[
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> yet another question:<br>\n<a href=\"/user_uploads/10155/grnjZL3-mefPavhT_IpuVHJk/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/grnjZL3-mefPavhT_IpuVHJk/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/grnjZL3-mefPavhT_IpuVHJk/image.png\"></a></div>",
        "id": 209697055,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599766088
    },
    {
        "content": "<p>I don't understand requireBoth.</p>",
        "id": 209697085,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599766100
    },
    {
        "content": "<p>if previous is present, isn't it required?</p>",
        "id": 209697123,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599766111
    },
    {
        "content": "<p>if previous is not present, what does it mean if 'requireBoth' is true?</p>",
        "id": 209697159,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599766132
    },
    {
        "content": "<p>is it actually about and/or and only applivable if both current and previous are present?</p>",
        "id": 209697224,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599766161
    },
    {
        "content": "<p>oh it is. duh</p>",
        "id": 209697266,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599766185
    },
    {
        "content": "<p>I guess I'm wanting an explicit statement that previous = absent means true. but what if there isn't a previous (create) and requireBoth = true?</p>",
        "id": 209697385,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599766218
    },
    {
        "content": "<p>I'd need to think on that.</p>",
        "id": 209697848,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1599766431
    },
    {
        "content": "<p>well, here's my code to help your thinking:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"nc\">TSubscriptionManagerR4</span><span class=\"o\">.</span><span class=\"nf\">MeetsTopicQueryCriteria</span><span class=\"p\">(</span><span class=\"n\">topic</span> <span class=\"o\">:</span> <span class=\"n\">TFHIRSubscriptionTopicResourceTrigger</span><span class=\"o\">;</span> <span class=\"n\">newRes</span><span class=\"o\">,</span> <span class=\"n\">oldRes</span> <span class=\"o\">:</span> <span class=\"n\">TFHIRResource</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"kt\">boolean</span><span class=\"o\">;</span>\n<span class=\"k\">var</span>\n  <span class=\"n\">prev</span><span class=\"o\">,</span> <span class=\"n\">curr</span> <span class=\"o\">:</span> <span class=\"kt\">boolean</span><span class=\"o\">;</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"o\">.</span><span class=\"n\">queryCriteria</span> <span class=\"o\">=</span> <span class=\"k\">nil</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n    <span class=\"bp\">result</span> <span class=\"o\">:=</span> <span class=\"k\">true</span>\n  <span class=\"k\">else</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">if</span> <span class=\"n\">topic</span><span class=\"o\">.</span><span class=\"n\">queryCriteria</span><span class=\"o\">.</span><span class=\"n\">previous</span> <span class=\"o\">=</span> <span class=\"s\">&#39;&#39;</span> <span class=\"k\">then</span>\n      <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"k\">true</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">oldRes</span> <span class=\"o\">=</span> <span class=\"k\">nil</span> <span class=\"k\">then</span>\n      <span class=\"n\">prev</span> <span class=\"o\">:=</span> <span class=\"k\">false</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">prev</span> <span class=\"o\">:=</span> <span class=\"n\">meetsCriteria</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"o\">.</span><span class=\"n\">queryCriteria</span><span class=\"o\">.</span><span class=\"n\">previous</span><span class=\"o\">,</span> <span class=\"n\">oldRes</span><span class=\"p\">)</span><span class=\"o\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">topic</span><span class=\"o\">.</span><span class=\"n\">queryCriteria</span><span class=\"o\">.</span><span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"s\">&#39;&#39;</span> <span class=\"k\">then</span>\n      <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"k\">true</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">newRes</span> <span class=\"o\">=</span> <span class=\"k\">nil</span> <span class=\"k\">then</span>\n      <span class=\"n\">curr</span> <span class=\"o\">:=</span> <span class=\"k\">false</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">curr</span> <span class=\"o\">:=</span> <span class=\"n\">meetsCriteria</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"o\">.</span><span class=\"n\">queryCriteria</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"o\">,</span> <span class=\"n\">newRes</span><span class=\"p\">)</span><span class=\"o\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">topic</span><span class=\"o\">.</span><span class=\"n\">queryCriteria</span><span class=\"o\">.</span><span class=\"n\">requireBoth</span> <span class=\"k\">then</span>\n      <span class=\"bp\">result</span> <span class=\"o\">:=</span> <span class=\"n\">prev</span> <span class=\"k\">and</span> <span class=\"n\">curr</span>\n    <span class=\"k\">else</span>\n      <span class=\"bp\">result</span> <span class=\"o\">:=</span> <span class=\"n\">prev</span> <span class=\"k\">or</span> <span class=\"n\">curr</span><span class=\"o\">;</span>\n  <span class=\"k\">end</span><span class=\"o\">;</span>\n<span class=\"k\">end</span><span class=\"o\">;</span>\n</code></pre></div>",
        "id": 209697942,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599766463
    },
    {
        "content": "<p>Yes, but I'm thinking about saying that defining a 'previous' on Create or 'current' on Delete should just be invalid.  I'm not sure what someone would be expecting by filling it out (e.g., user just filled out the wrong field)</p>",
        "id": 209698279,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1599766604
    },
    {
        "content": "<p>well, it would really arise if you didn't fill out the methodCriteria at all. Which I assume means 'any method'</p>",
        "id": 209698539,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599766721
    },
    {
        "content": "<p>In those situations, wouldn't a default of 'false' make more sense?  E.g., if I have no method, but a previous and current that are required those methods do NOT meet the requirements.</p>",
        "id": 209698880,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1599766859
    },
    {
        "content": "<p>I think that's what my code does</p>",
        "id": 209699278,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599767029
    },
    {
        "content": "<p>One goal of these is to be able to explicitly capture certain transitions. Often it's enough just to identify that something changed into a state (e.g., \"any time an Encounter enters the <code>in-progress</code> state\", send a notification). But if you want to detect a specific transition (e.g. \"any time an Encounter goes from <code>in-progress</code> directly to <code>cancelled</code>, send a notification\") then you don't want to match <code>null</code> as a previous state.</p>\n<p>So when we're talking about <code>requireBoth</code>, then </p>\n<p>1) The topic had better populate filters for <code>.previous</code> and <code>.current</code> (this can be expressed in a constraint, so that <code>requireBoth implies previous and current</code>, more or less)<br>\n2) A resource instance that was null before a transition would only satisfy <code>.previous</code> if a null resource fits the logic (e.g.,  from my first example above<code>status:not=in-progress</code> could match a <code>null</code> previous value, but from my second example <code>status=in-progress</code> would never match a <code>null</code> previous value)</p>",
        "id": 209699519,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599767138
    },
    {
        "content": "<p>Ahh, I read the original as in if the resource was missing, not if the field was missing</p>",
        "id": 209699563,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1599767162
    },
    {
        "content": "<p>Yes, the code looks right to me</p>",
        "id": 209699624,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1599767170
    },
    {
        "content": "<p>Gino, I have to handle both cases</p>",
        "id": 209699633,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599767176
    },
    {
        "content": "<blockquote>\n<p>status:not=in-progress could match a null previous value</p>\n</blockquote>\n<p>please no. That's really really hard</p>",
        "id": 209699702,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599767212
    },
    {
        "content": "<p>That's what the Argonaut Encounter IG has <a href=\"https://github.com/argonautproject/subscriptions/blob/master/canonical/subscriptiontopic-encounter-start.json#L21-L25\">said all along</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>    &quot;queryCriteria&quot;: {\n      &quot;previous&quot;: &quot;status:not=in-progress&quot;,\n      &quot;current&quot;: &quot;status=in-progress&quot;,\n      &quot;requireBoth&quot;: true\n    }\n</code></pre></div>",
        "id": 209699837,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599767282
    },
    {
        "content": "<p>What's your preferred way to express this?</p>",
        "id": 209699890,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599767299
    },
    {
        "content": "<p>Yeah, that slipped my mind.... only negative tests can result, so it may not be <em>terrible</em> though...</p>",
        "id": 209700799,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1599767721
    },
    {
        "content": "<p>Hmm... it may be clearer to add an explicit null check to our syntax.  Testing against null is overly complicated (e.g., does no value satisfy a '&lt;' test?).</p>",
        "id": 209701644,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1599768088
    },
    {
        "content": "<p>yes. I decided that the only way I could really grasp how hard that would be is to program it. Starting to work on it now</p>",
        "id": 209701783,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599768141
    },
    {
        "content": "<p>That's what I was doing - my pascal is a bit rusty, but I started modifying your snippet.... it got ugly <em>fast</em>.</p>\n<ul>\n<li>check for <code>:not</code></li>\n<li>check for <code>ne</code></li>\n<li>check for <code>lt</code><br>\n...</li>\n</ul>",
        "id": 209702018,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1599768266
    },
    {
        "content": "<p>But we'd want something like <code>requireBoth</code> vs <code>requireBothOrTrueWhenNull</code> (not a real name proposal).</p>\n<p><code>requireBoth</code> logic would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>(\n  (previous state exists and matches previous query)\n  AND\n  (current exists and matches current query)\n)\n</code></pre></div>\n\n\n<p><code>requireBothOrTrueWhenNull</code> logic would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>(\n  ((previous state exists and matches previous query)\n     OR\n    (previous state does not exist))\n  AND\n  (( current exists and matches current query)\n    OR\n    (current state does not exist))\n)\n</code></pre></div>",
        "id": 209702108,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599768305
    },
    {
        "content": "<p>I was just thinking of something like <code>SubscriptionTopic.resourceTrigger.queryCriteria.previousNotFoundPasses</code>=<code>true|false</code> (also not a suggestion for the name) so that it's up to the topic to explicitly define what the behavior is.</p>",
        "id": 209702431,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1599768467
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> Yes, we're on the same page here. I like yours better for being decomposed into more separate properties.</p>",
        "id": 209702639,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599768578
    },
    {
        "content": "<p>it's easier to do this that indulge in speculative evaluation against a missing resource</p>",
        "id": 209706806,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599770794
    },
    {
        "content": "<p>Agreed!</p>",
        "id": 209707125,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599770952
    },
    {
        "content": "<p>Adding to my notes - do we need to do anything on the FhirPath definitions for the same issue?</p>",
        "id": 209707372,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1599771088
    },
    {
        "content": "<p>I think you can check for null explicitly in the fhirpath...</p>",
        "id": 209708431,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599771612
    }
]