[
    {
        "content": "<p>One of the discussions we had at the table during the connectathon was around the awkwardness of the Subscription resource to subscriber. A basic summary:</p>\n<ul>\n<li>For email, SMS, and resHook, it is clearly a subscription:subscriber (many:1) relationship because the subscription has data that is obviously specific to the subscriber. </li>\n<li>for WebSockets, there was some confusion around this. The websocket endpoint is common to all subscribers - though there are other details on subscription that definitely define the subscriber. It feels interesting to require every websocket to be unique even if the criteria is the same.</li>\n</ul>",
        "id": 164923647,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557069364
    },
    {
        "content": "<p>In the first case, the server can still fan out - essentially gather the same subscriptions behind the scenes and send the message to all interested parties</p>",
        "id": 164923656,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557069394
    },
    {
        "content": "<p>The websocket modality is a little different. We're requiring different binds when technically, the server should be able to handle the common subscriptions on the same bind when the criteria are the same</p>",
        "id": 164923856,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557069766
    },
    {
        "content": "<p>This gets closer to the topic conversation that came up during our Event conversations</p>",
        "id": 164923860,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557069782
    },
    {
        "content": "<p>I'm leaving this conversation here for others to add or extend... :)</p>",
        "id": 164923870,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557069796
    },
    {
        "content": "<p>I haven't really understood this thread - the fact that there is one websocket end-point doesn't mean that you run more than one subscription per web-socket connection?</p>",
        "id": 164924131,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557070261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  The general opinion here is that a server would likely (if subscriptions wasn't defined like this) have all subscribers that have the same criteria bind to the same \"topic\" vs binding to each subscription uniquely</p>",
        "id": 164924336,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557070642
    },
    {
        "content": "<p>eg: if 1000 people want Observation?category=laboratory, they would all have the same bind</p>",
        "id": 164924339,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557070666
    },
    {
        "content": "<p>but today, they would bind to 1000 different messages</p>",
        "id": 164924383,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557070694
    },
    {
        "content": "<p>that is, if the were only a few topics</p>",
        "id": 164924384,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557070696
    },
    {
        "content": "<p>no, even if the server was really amazingly scalable and had a whole compute stack ;)</p>",
        "id": 164924390,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557070721
    },
    {
        "content": "<p>IE the server behind the scenes is finding the commonalities anyway today for scale/sanity</p>",
        "id": 164924408,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557070762
    },
    {
        "content": "<p>Requiring different binds for web socket means also that the same client will generate new subscriptions every time it re-starts (assuming it does not go through the trouble of deleting the old one - that for a browser-based client is difficult)</p>",
        "id": 164924608,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1557071107
    },
    {
        "content": "<p>But sharing bindings is not really possible because if the client actually _do_ delete the subscription it will break it for everyone</p>",
        "id": 164924661,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1557071165
    },
    {
        "content": "<p>the way the current subscription works, the client can subscribe to whatever it can describe. given that, I don't find the idea of 1000 clients subscribing to the same thing very compelling</p>",
        "id": 164925163,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557072030
    },
    {
        "content": "<p>are we saying that we think the current method is jsut crap and we want to toast it in the interests of scaling the implementations?</p>",
        "id": 164925169,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557072058
    },
    {
        "content": "<p>If you have 1000 patients all using the same client application, it would be much more efficient if they all listened to the same subscription</p>",
        "id": 164925259,
        "sender_full_name": "Brandon Pollett",
        "timestamp": 1557072187
    },
    {
        "content": "<p>The server could realize it needs to ping all these websocket connections given this single subscription fired.</p>",
        "id": 164925316,
        "sender_full_name": "Brandon Pollett",
        "timestamp": 1557072252
    },
    {
        "content": "<p>1000 patients would have to listening to differnet subscriptions, since it's different patients. No?</p>",
        "id": 164925413,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557072387
    },
    {
        "content": "<p>Depends on the criteria.</p>",
        "id": 164925439,
        "sender_full_name": "Brandon Pollett",
        "timestamp": 1557072441
    },
    {
        "content": "<p>well, I presume you don't mean 1000 patients all listening to the same patient results - I presume you mean that somehow the patient-ness of the subscription is... implicit....</p>",
        "id": 164925489,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557072491
    },
    {
        "content": "<p>Or not required... something like the application wants to know when a slot becomes available.</p>",
        "id": 164925516,
        "sender_full_name": "Brandon Pollett",
        "timestamp": 1557072558
    },
    {
        "content": "<p>sounds like a fun auction.... but ok</p>",
        "id": 164925523,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557072588
    }
]