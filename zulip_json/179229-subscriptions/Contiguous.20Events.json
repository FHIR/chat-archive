[
    {
        "content": "<p>Is there anywhere in the spec that says the events referenced in a subscriptionStatus need to be contiguous? In all the example scenarios/payloads I've seen that has been the case, but I'm wondering if we need to make that explicit somewhere. </p>\n<p>The reason this has come up is that the addition of the <code>notificationEvent</code> element provides the flexibility to include discontiguous events (I can put 38 and 36 in the list, but not 37) and that this might break clients that were relying on <code>eventsSinceSubscriptionStart</code> and <code>eventsInNotification</code> to tell them which events were included before even parsing <code>notificationEvent</code>.</p>\n<p>In the example of sending 38 and 36, the current spec would say the <code>eventsSinceSubscriptionStart</code> is 38 and <code>eventsInNotification</code> is 2, and the client may conclude that you've sent events 38 and 37. If the client already received those events (but not 36), it may not realize you've included an event it is interested in.</p>\n<p>If others agree this is an issue, then I think the solution is to make a rule saying <code>notificationEvent</code> should be contiguous (I have an idea for a FHIRPath query for this), and that it's length should equal to <code>eventsInNotification</code>.</p>\n<p>I think the story for $events and $status is a bit more complicated, but before going into that I'd like some feedback on the above. I've run into the above issue and more while trying to write a generic state machine for a subscription client that covers the lastReceived event, the current connection status and any known (but missing) events.</p>",
        "id": 253101906,
        "sender_full_name": "adam strickland",
        "timestamp": 1631544430
    },
    {
        "content": "<p>This touches on our \"reliable delivery\" discussion from last week's call. I agree <span class=\"user-mention\" data-user-id=\"372206\">@adam strickland</span> that for all of the channels we have defined in the spec, and for all future channels that don't assume reliable delivery, notification events should be contiguous.</p>",
        "id": 253113629,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1631548484
    },
    {
        "content": "<p>I don't know how to formalize that as a constraint without enumerating channel types that it applies to as part of a constraint expression -- but even without that detail, I'm curious about your fhirpath expression idea; it's a cool puzzle and may well turn out to be useful!)</p>",
        "id": 253113846,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1631548566
    },
    {
        "content": "<p>Thanks Josh, I was thinking something like this:<br>\neventsInNotification.exists() implies contiguous..., where contiguous means: </p>\n<ol>\n<li>Select a collection of  event numbers from eventsInNotification</li>\n<li>Create a collection of expected numbers based on max value in event numbers and eventsInNotification</li>\n<li>Insist the events numbers collection is a superset and subset of expected numbers</li>\n</ol>\n<p>If we wanted to be more strict and say that eventsInNotification is contiguous and descending order, we could probably streamline this. I think that would be worth doing.</p>",
        "id": 253121295,
        "sender_full_name": "adam strickland",
        "timestamp": 1631551300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"359703\">@Steve Atwood</span>  what do you think about the above? Before putting a restriction on <code>notificationEvent.eventNumber</code> I wanted to make sure that doesn't conflict with your use case. If it doesn't, then it makes defining this much easier.</p>",
        "id": 253135385,
        "sender_full_name": "adam strickland",
        "timestamp": 1631557055
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"372206\">@adam strickland</span> .  I think Gino's recommended workaround for my \"reliable distributed channel\" use case was just to assign relative sequential eventNumbers in the notificationEvent element, so I believe that would still be compatible with the constraint you are outlining.  For example, if I have a notification with three events, I guess I would set eventsInNotification=3, eventsSinceSubscriptionStart=3, and notificationEvent.eventNumber=[1,2,3].  The event numbers in this case would obviously be meaningless outside the context of that particular notification but I think it would satisfy the constraint.</p>",
        "id": 253137515,
        "sender_full_name": "Steve Atwood",
        "timestamp": 1631557924
    },
    {
        "content": "<p>Oh that's even better, Steve. Keeps the numbers consistent with our existing scheme at least within a message, even if they're don't have all the same behaviors across messages arriving within a short timespan.</p>",
        "id": 253153241,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1631564176
    },
    {
        "content": "<p>And that means we don't need to insert channel type logic into Adam 's  fhirpath expression.</p>",
        "id": 253153297,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1631564205
    }
]