[
    {
        "content": "<p>Hello everybody. Can we make a new topic-based subscription compatible with the old one? :) The simplest way to do it - just give it another name <code>TopicSubscription</code> or something like this (and keep old one, maybe with deprecation warn). We should grow non-breaking culture in the FHIR community!</p>",
        "id": 183950717,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576859421
    },
    {
        "content": "<p>It would still be breaking - as the old Subscription wouldn't be part of R5.  We <em>expect</em> things to break occasionally pre-STU.  We don't want to be bound to compatibility with design decisions that turn out to have been wrong once we try to implement them.</p>",
        "id": 183950932,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1576859614
    },
    {
        "content": "<p>At least for implementers, it would be easy to migrate users from old subscriptions to new one - if they can coexists</p>",
        "id": 183953011,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576861193
    },
    {
        "content": "<p>I would suggest publishing obsolete resources at least one or two next versions with deprecation notes.  That's how backward/forward compat works :)</p>",
        "id": 183953169,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576861289
    },
    {
        "content": "<p>Here is an example of deprecation from guys who know how to be backward compatible  - <a href=\"http://openjdk.java.net/jeps/277\" target=\"_blank\" title=\"http://openjdk.java.net/jeps/277\">http://openjdk.java.net/jeps/277</a></p>",
        "id": 183953317,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576861384
    },
    {
        "content": "<p>Probably we can introduce \"deprication\" elements into SD and ED like deprecated, shutdownDate etc. <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  what do you think?</p>",
        "id": 183953725,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576861690
    },
    {
        "content": "<p>And simple rule - never delete, rename etc resources and elements - just depreciate them!</p>",
        "id": 183953762,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576861727
    },
    {
        "content": "<p>Here is how Kubernetes handles this <a href=\"https://kubernetes.io/docs/reference/using-api/deprecation-policy/\" target=\"_blank\" title=\"https://kubernetes.io/docs/reference/using-api/deprecation-policy/\">https://kubernetes.io/docs/reference/using-api/deprecation-policy/</a></p>",
        "id": 183954160,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576861992
    },
    {
        "content": "<p>The point is that there's no expectation of forward/backward compatibility for STU content.  That's why we <em>have</em> STU instead of jumping right to normative.  We don't want implementers of R5 using the old subscription (or the old anything).  We do follow the approach of deprecation once artifacts hit normative.  And we do seek implementer feedback on resources that are FMM4+.  But for low maturity resources, if we need to turn the resource inside out, we will.  Implementers of low maturity resources need to recognize the risk of change and have plans in place for it going forward.</p>",
        "id": 183954376,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1576862101
    },
    {
        "content": "<p>Can we ask  \"real FHIR users\" - do they really understand and agree with this strategy? Most of them claiming \"version hell\"  because of incompatibility :(  Or they should wait couple of years for normative features - this will slow down adoption?</p>",
        "id": 183954887,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576862410
    },
    {
        "content": "<p>What we see from \"other industries experience\" - you can be agile and flexible if you handle changes as first class.</p>",
        "id": 183954973,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576862473
    },
    {
        "content": "<p>I'm generally quite in favor for non-breaking changes.  That said, I think having two mechanisms in the same release that do the same thing but act differently feels like it would be very confusing for adopters.</p>\n<p>In my mind, it's weighing the pain in forcing early adopters to move over at R5 (deprecation gives more flexibility for timing, but they still have to do it), vs pain for everyone else has in having both (e.g., if a client is based on R5, they will have some servers one way and some the other).</p>",
        "id": 183955007,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576862511
    },
    {
        "content": "<blockquote>\n<p>I'm generally quite in favor for non-breaking changes.  That said, I think having two mechanisms in the same release that do the same thing but act differently feels like it would be very confusing for adopters.</p>\n<p>In my mind, it's weighing the pain in forcing early adopters to move over at R5 (deprecation gives more flexibility for timing, but they still have to do it), vs pain for everyone else has in having both (e.g., if a client is based on R5, they will have some servers one way and some the other).</p>\n</blockquote>\n<p>That's how compatibility works!  If jvm would not do this or your hardware and OS  (32 =&gt; 64)- you would throw it away :)</p>",
        "id": 183955103,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576862602
    },
    {
        "content": "<p>The rule of thumb - it's better to have a redundancy in features and some garbage than force users upgrade immediately in one transaction</p>",
        "id": 183955229,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576862714
    },
    {
        "content": "<p>By providing the mechanism of the coexistence for new and old features you give \"such a critical room for maneuver\"  to seamlessly migrate/upgrade!</p>",
        "id": 183955545,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576862976
    },
    {
        "content": "<p>FHIR is gonna be a distributed system standard - you just could not \"stop the world\" and install newer version!</p>",
        "id": 183955617,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863018
    },
    {
        "content": "<p>Yes, but if it was marked beta, you'd accept a breaking change - which is what &lt; Normative is</p>",
        "id": 183955624,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576863025
    },
    {
        "content": "<p>Normative looks \"too slow\"!?</p>",
        "id": 183955682,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863083
    },
    {
        "content": "<p>How much \"normative\" FHIR do we have now?</p>",
        "id": 183955773,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863130
    },
    {
        "content": "<p>Yes it does feel slow.. and if building up to normative requires those additional processes, it will be even slower.</p>",
        "id": 183955871,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576863207
    },
    {
        "content": "<p>Why?</p>",
        "id": 183955896,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863234
    },
    {
        "content": "<p>Normative is slow - because people are scared to make a mistake in the decision, they could not change later.</p>",
        "id": 183956021,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863307
    },
    {
        "content": "<p>With a depreciation, backward and forward compat practices  - this fear will go away.</p>",
        "id": 183956061,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863357
    },
    {
        "content": "<p>Because that's the cost of process?  Finding the line of where to do it is mental load if nothing else.  During the redesign, we've renamed resources, fields, etc.  But, there have been times when it was unchanged for months - what would be the decision there?</p>",
        "id": 183956120,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576863371
    },
    {
        "content": "<p>Let's imagine how it can be done with Subscription. You froze and deprecate current Subscription - no work to do this - just keep it.</p>",
        "id": 183956184,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863441
    },
    {
        "content": "<p>Also, I'm not advocating that this shouldn't be considered in general - just that it would need to be defined before it could be adopted (and Subscription has already been walked down this path).</p>",
        "id": 183956203,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576863465
    },
    {
        "content": "<p>You design new  TopicSubscription from scratch and publish in R5</p>",
        "id": 183956216,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863475
    },
    {
        "content": "<p>It's not yet published. So it is not too late</p>",
        "id": 183956285,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863506
    },
    {
        "content": "<p>Or we can add new elements to old Subscriptions to upgrade them to new one - mark obsolete elements</p>",
        "id": 183956375,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863590
    },
    {
        "content": "<p>There only few naming clashes.</p>",
        "id": 183956436,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863609
    },
    {
        "content": "<p>There is work, and a lot of it is procedural.  What happens to deprecated resources re: technical corrections?  What happens if a related resource/dependency/etc changes?<br>\nIn the case of Subscription, a lot of behavior is changed, so clients also need to be aware of this (e.g., an endpoint/websocket/etc will receive different data)</p>",
        "id": 183956492,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576863663
    },
    {
        "content": "<p>And for us as implementers - it would be much nicer to support both of them - than forking implementation between R4 and R5</p>",
        "id": 183956498,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863666
    },
    {
        "content": "<blockquote>\n<p>And for us as implementers - it would be much nicer to support both of them - than forking implementation between R4 and R5</p>\n</blockquote>\n<p>But it forces generic R5 clients to support both - since some servers will continue to use the 'deprecated' version</p>",
        "id": 183956538,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576863702
    },
    {
        "content": "<p>Just create an element Subscription.version</p>",
        "id": 183956548,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863712
    },
    {
        "content": "<p>Do you expect this behavior from your browser?</p>",
        "id": 183956607,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863734
    },
    {
        "content": "<p>Handle old html documents? :)</p>",
        "id": 183956620,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863745
    },
    {
        "content": "<p>If client implementation does not support this  - users of these clients will do it anyway, because they have to connect to two systems with different versions :)</p>",
        "id": 183956677,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863795
    },
    {
        "content": "<p>I support a couple of clients - users ask for multi-version support all the time</p>",
        "id": 183956699,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863821
    },
    {
        "content": "<p>You do not solve the problem, you make it worse this way</p>",
        "id": 183956713,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863835
    },
    {
        "content": "<p>Other way around - if I am implementing an R5 Subscription client, I only implement the new version.  Then I go to an R5 server, and it has the deprecated one.  I'm out of luck until the server updates, which could be R6 or R7 (using a 2 release example).</p>",
        "id": 183956718,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576863838
    },
    {
        "content": "<p>All existing clients talking to R4 servers (which they are R4 now) will continue to work</p>",
        "id": 183956788,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576863871
    },
    {
        "content": "<p>That's forward compatibility - a little bit harder :)</p>",
        "id": 183956801,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863885
    },
    {
        "content": "<p>Use case: I have to subscribe to epic  (R4) and cerner  (R5) and aidbox (R6) - what should i do?</p>",
        "id": 183956847,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863926
    },
    {
        "content": "<p>For example, if all of them backward compatible i can do it with R4 client</p>",
        "id": 183956944,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576863973
    },
    {
        "content": "<p>If none of them - I need 3 clients and understand, which server on which version</p>",
        "id": 183956969,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576864002
    },
    {
        "content": "<p>If my client is  multi-version(R4,R5,R6)  - I'm lucky as well</p>",
        "id": 183957007,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576864040
    },
    {
        "content": "<p>A good example is Browsers and HTTPs</p>",
        "id": 183957045,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576864075
    },
    {
        "content": "<p>I don't follow.  If the old subscriptions mechanism is deprecated, the odds of an R6 server supporting them are minuscule (especially given that one of the primary drivers of the redesign was <em>because</em> servers weren't able to implement it).</p>",
        "id": 183957102,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576864091
    },
    {
        "content": "<p>Same would be true of a new R5 server - they wouldn't implement the deprecated version, so your client would still need both the R4 version and the newer one.</p>",
        "id": 183957146,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576864132
    },
    {
        "content": "<p>In an ideal world, clients are multi-version and servers are backward compatible</p>",
        "id": 183957147,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576864134
    },
    {
        "content": "<p>So new servers need to implement the deprecated version as well?</p>",
        "id": 183957203,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576864182
    },
    {
        "content": "<p>this is a problem that is caused by people deploying STU ... Normative status is the answer. Trying to solve non-normative as if it was normative is folly</p>",
        "id": 183957214,
        "sender_full_name": "John Moehrke",
        "timestamp": 1576864198
    },
    {
        "content": "<blockquote>\n<p>So new servers need to implement the deprecated version as well?</p>\n</blockquote>\n<p>Users are more important than servers and clients :)</p>",
        "id": 183957285,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576864228
    },
    {
        "content": "<p>that is to say.. your client, because it chooses to support multiple versions, must deal with multiple versions</p>",
        "id": 183957292,
        "sender_full_name": "John Moehrke",
        "timestamp": 1576864233
    },
    {
        "content": "<p>Again take a look at Browser and HTTP versions</p>",
        "id": 183957441,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576864375
    },
    {
        "content": "<blockquote>\n<p>In an ideal world, clients are multi-version and servers are backward compatible</p>\n</blockquote>\n<p>Yes, that would be ideal.  But implementing the old version of subscriptions for production falls somewhere between non-trivial and not-possible (depending on architecture).  Asking servers to implement it, even though it was agreed to be broken doesn't seem like a path forward.</p>\n<p>So, even if the old version was left in, any client for R5 or higher would need the new version, because servers won't do the old one.</p>",
        "id": 183957719,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576864596
    },
    {
        "content": "<blockquote>\n<p>Again take a look at Browser and HTTP versions</p>\n</blockquote>\n<p>that is not the same, as those are formal versions. Normative versions. Thus, yes once a portion of FHIR goes normative (e.g. Patient, Observation) then no breaking changes can be made... but resources that are not yet normative MUST be expected to have breaking changes between versions.</p>",
        "id": 183958960,
        "sender_full_name": "John Moehrke",
        "timestamp": 1576865566
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>In an ideal world, clients are multi-version and servers are backward compatible</p>\n</blockquote>\n<p>Yes, that would be ideal.  But implementing the old version of subscriptions for production falls somewhere between non-trivial and not-possible (depending on architecture).  Asking servers to implement it, even though it was agreed to be broken doesn't seem like a path forward.</p>\n<p>So, even if the old version was left in, any client for R5 or higher would need the new version, because servers won't do the old one.</p>\n</blockquote>\n<p>:) We implement server</p>",
        "id": 183959076,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576865658
    },
    {
        "content": "<p>Yes, and was it trivial?  :-)</p>",
        "id": 183959097,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576865674
    },
    {
        "content": "<p>Yes :) couple of days and month of bug fixing</p>",
        "id": 183961544,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576867487
    },
    {
        "content": "<p>But now i do not know - what to do? Make configuration with the version of subscriptions or fork the project. You do not give me options keep my code base together and gracefully migrate my users :(</p>",
        "id": 183961760,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576867685
    },
    {
        "content": "<p>We're trying - it's hard to balance the needs of a large community.  I feel like Subscriptions are particularly painful because they didn't move (forward or backward) for a while.</p>",
        "id": 183962633,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576868355
    },
    {
        "content": "<p>Having two different ways to do subscription just creates a longer period of non-interoperability.  It's no longer enough to know \"do you do subscriptions in R5\", but now you have to worry about \"do you do new subscriptions or old subscriptions\"?  When you have deprecated content and new content, you're imposing a burden on implementers.  They either have to support both approaches or they have to deal the the problem that they can't talk to systems that - based on version and use-case, they should be able to.  Deprecation really just means \"slower migration\" - which in turn means slower ability to actually lock down the standard.  Because to lock down the standard, we need significant implementation of the <em>new</em> approach.  Systems hanging onto a 'deprecated' approach doesn't help us achieve that.</p>\n<p>HL7 has significant experience with maintaining backwards compatibility with stuff that got locked down as 'normative' without much implementation experience and turned out to be broken/sub-optimal.  The result is greater implementer inconsistency, increased specification complexity and awkward implementation of use-cases.  The notion of STU exists specifically to avoid that issue.  With STU, we don't make breaking changes 'for fun'.  But if making a breaking change makes the specification more implementable/useable for future users, we'll typically make it.  If it's content that's level 4/5, existing implementers can indicate their disagreement/concerns and those will be taken into account.</p>\n<p>From an implementer side of things, implementers want everything that works to stay frozen for ever and everything that doesn't work to be changed yesterday.  The standards process of draft -&gt; STU -&gt; Normative is the mechanism HL7 has to try to balance those desires.  Yes, it takes longer than we'd like.  Get something designed, agreed to and implemented across the range of use-cases and jurisdictions our specifications are intended to cover (which for HL7 Int'l is very wide) takes significant time.  Consensus and implementation experience are hard work.</p>\n<p>We've tried to be very clear and up front about what STU means.  In fact, for the first couple of release of FHIR, the section of the spec that talked about STU and the potential for breaking change was the only link in the spec that was bolded.  If you think there are ways we can make the risk of change even more obvious, please suggest.  But, in my opinion,  locking into backward compatibility too soon costs more than the benefit it provides.</p>",
        "id": 183967419,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1576871624
    },
    {
        "content": "<p>Lloyd do you know how http was evolved  and how browsers and web servers work?</p>",
        "id": 183968483,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576872451
    },
    {
        "content": "<p>in terms of versions?</p>",
        "id": 183969455,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576873179
    },
    {
        "content": "<p>Just imagine you open google and browser says  - i can not open this page - server is R4 but I'm R5 - please wait until google migrate to R5. Then you go to Facebook and got server is R6 - could not open ;(</p>",
        "id": 183970165,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576873744
    },
    {
        "content": "<p>What is better?  Non-perfect working interop with multiple coexisting versions, or partially working interop with incompatible versions?</p>",
        "id": 183970758,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576874253
    },
    {
        "content": "<p>Or example from java world. You are using library \"a\", which works on jvm R4. Now you want to use library \"b\", which works only with jvm R5? If jvm is not backward compat - you are in trouble.  But jvm is usually compatible 5-10 years back - so no problem.</p>",
        "id": 183971156,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576874538
    },
    {
        "content": "<p>You can use \"a\" and \"b\" together.  And eventualy migrate to \"a2\" for R5.</p>",
        "id": 183971231,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576874631
    },
    {
        "content": "<p>But FHIR is \"working standard\". r2, r3, r4 are already in production</p>",
        "id": 183971345,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576874728
    },
    {
        "content": "<p>Nicola, I think Lloyd's point is that between HTTP 1.0 an 1.1 (for instance), there were many features which were tried.  Some worked, some didn't.  What made it into 1.1 had no promise of compatibility with any particular feature in the intermediate time - that's their release process.</p>\n<p>The same is true in FHIR, compatibility is preserved once something becomes Normative.  Before it is Normative, it is beta and subject to changes.  Otherwise, there can be an arbitrary line, but the same will continue to be true (e.g., I don't think you're arguing items at FMM 0 cannot be broken).</p>",
        "id": 183971357,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576874739
    },
    {
        "content": "<p>I would argue that we (as a community) should be vigilant in making sure things move (e.g., can't sit at FMM 3 for multiple releases).  I feel like specs should either move upwards (because they are good) or decay out (because there isn't adoption).</p>\n<p>That said, it takes the people involved to make those decisions... and people involved are unlikely to say there isn't enough traction to standardize.</p>\n<p>What would be your proposal on when something no longer allows breaking changes (generally, not specific to Subscriptions)?</p>\n<p>Note: I will be away from this discussion for a bit, but will check in as able.</p>",
        "id": 183971959,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576875216
    },
    {
        "content": "<p>There are countries,  which commited R2 and R4. Isn't this enough to care about compatibility?</p>",
        "id": 183972041,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576875258
    },
    {
        "content": "<p>My proposal is simple - keep non perfect resources unbroken (just deprecate them). Add new versions with new names.</p>",
        "id": 183972229,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576875389
    },
    {
        "content": "<p>It's not so hard to do</p>",
        "id": 183972246,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576875401
    },
    {
        "content": "<p>I'm a user of clojure language  - no one breaking change in 10 years,  even in betta.</p>",
        "id": 183972309,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576875449
    },
    {
        "content": "<p><a href=\"https://youtu.be/oyLBGkS5ICk\" target=\"_blank\" title=\"https://youtu.be/oyLBGkS5ICk\">https://youtu.be/oyLBGkS5ICk</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"oyLBGkS5ICk\" href=\"https://youtu.be/oyLBGkS5ICk\" target=\"_blank\" title=\"https://youtu.be/oyLBGkS5ICk\"><img src=\"https://i.ytimg.com/vi/oyLBGkS5ICk/default.jpg\"></a></div>",
        "id": 183972425,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576875501
    },
    {
        "content": "<p>I actually agree with Nicola here on this one. Striking the right balance between breaking changes and other wyas of making changes is a delicate balance. </p>\n<p>In this case, we are not 'fixing' something. We are saying 'we don't like the old way subscriptions worked, and we're going to make a new way'. Except that the way we've gone about it also means 'we believe that the old way is so wrong we're eliminating it'. </p>\n<p>Yet people are actually using it now, and it works for them. So why eliminate at? We don't <em>need</em> to. We can just define a new kind of subscription, for a new approach, and say, you can keep using the old one.</p>\n<p>That obviously raises the concern about supporting 2 different mechanisms going forward, and more work for servers - and it is more work for servers that don't yet exist or haven't yet implemented the old way. Servers that have already implemented the old way, it's little more work to keep the old way about and just build a new one. For servers that haven't yet implemented... that's valid question.</p>\n<p>We don't need to deprecate something that's not normative. We can just take it away. but I don't think that's the wise course of action this time.</p>",
        "id": 183981883,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576882809
    },
    {
        "content": "<p>Around minute 34 in the video posted above - how is <code>R5/Subscription</code> different from <code>new-ns/foo</code> from the example given?</p>",
        "id": 183982554,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1576883371
    },
    {
        "content": "<p>If the decision is made that we need to support two styles of subscriptions because there are two parallel business cases, that's fine.  That's not a question of backwards compatibility, that's a question of two resources for two different purposes.  But if we decided to refactor how Questionnaire is organized and some folks liked the way the old one was organized, we <em>can't</em> keep both of them because that would break interoperability - same business case handled two different ways.</p>\n<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> is correct.  When W3C was working on HTTP 2.0, they went through several candidate releases.  People wrote code against and implemented those.  But they were under no illusion that the final official HTTP 2.0 would necessarily be compatible across all candidate releases.  That's what the STU process is for FHIR.</p>",
        "id": 183985290,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1576886200
    },
    {
        "content": "<p>I would disagree about “fixing” or not.  Based on my understanding, many implementers found the old mechanism un-implementable. There were also several used cases not addressed (e.g., delete operations).</p>\n<p>There are use cases it works for, but I could draft a Patient resource that works for just my use case too.</p>\n<p>I’m open to trying to find a way to map them (e.g., a SubscriptionTopic that indicates old behavior), but the existing servers would still need to come forward with Payloads, etc. to be compliant for clients.</p>",
        "id": 183987527,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576889099
    },
    {
        "content": "<blockquote>\n<p>Based on my understanding, many implementers found the old mechanism un-implementable.</p>\n</blockquote>\n<p>Sure. that's why we made a new one. There's no discussion about that. the question is about the people who did find that it met their use cases. </p>\n<blockquote>\n<p>People wrote code against and implemented those. But they were under no illusion that the final official HTTP 2.0 would necessarily be compatible across all candidate releases</p>\n</blockquote>\n<p>that's true too, but they didn't release 1.0-&gt;4.0 before deciding. I'm not saying we can't, procedurally, because we can. But I do believe we shouldn't dismiss existing implementers so summarily.</p>",
        "id": 183988798,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576890903
    },
    {
        "content": "<p>If the new one addresses all of the use-cases the old one supported, then the old one shouldn't be carried over.  Doing so creates two ways of doing things in the same release and creates pain for everyone (new implementers and old).  Yanking the old one only creates pain for old implementers.</p>\n<p>If the new one doesn't address all of the old use-cases (and can't be adjusted to do so), then it should be adjusted (as much as feasible) to support only the distinct use-cases and should be retained.</p>",
        "id": 183992494,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1576897324
    },
    {
        "content": "<p>I can describe history of subscriptions (as i see it outside). First version was hard to implement for fhir facades like epic and cerner, because it's too \"fhirish\", but there was no problems in implementation for generic fhir servers. Topic based subscriptions, moved all fhir dependency to topic (which supposed to be hardcoden in fhir facades) and made subscriptions just channel specification and key/value filter (which can be implemented on any existing queues).  For FHIR server and its clients this  almost does not add new value (there are some new features, which can be handled in compatible way).</p>",
        "id": 183996630,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576906139
    },
    {
        "content": "<p>Does the old way offer capability the new way does not?  If not, the old way needs to go away.  The initial solution may have satisfied an initial subset of the stakeholders but didn't work for the complete set.  To support interoperability, everyone needs to move to the solution that can actually work for everyone.  If the old implementers choose to stick with the old approach and those that couldn't use the old approach use the new one, then we lose the interoperability the standard is supposed to achieve.</p>",
        "id": 183996900,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1576906629
    },
    {
        "content": "<p>I understand Lloyd concerns about many ways to do same things,  but with deployed to production different FHIR versions this problem does not go away,  it just becomes responsibility of users.</p>",
        "id": 183996902,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576906660
    },
    {
        "content": "<p>In kubernetes designers make possible multiple versions coexisting  in same runtime and it works</p>",
        "id": 183996963,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576906801
    },
    {
        "content": "<p>You can migrate to latest version to be \"interoperable\" in a safe way</p>",
        "id": 183997012,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576906862
    },
    {
        "content": "<p>In FHIR clash on resource names makes it tricky</p>",
        "id": 183997019,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576906894
    },
    {
        "content": "<p>Even after you do something \"normative\" - in future you will find the \"better ways\" doing this.</p>",
        "id": 183997073,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576906994
    },
    {
        "content": "<p>and you should be able introduce it in FHIR</p>",
        "id": 183997074,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907019
    },
    {
        "content": "<p>I would say - there should be \"one\" in a specific point in time recommended \"way\" to do something.</p>",
        "id": 183997120,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907111
    },
    {
        "content": "<p>And this can change. In few years we can discover another \"one recommend way\" and deprecate previous</p>",
        "id": 183997165,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907195
    },
    {
        "content": "<p>What matters is that a client system can talk to a single interface.  When we go normative, we stabilize that interface (at the cost that adding new features/mechanisms may sometimes be clunky).  Prior to normative, the interface isn't stable, which means we don't incur the cost of clunkiness for an initial attempt that didn't satisfy the community.  Over time, it's possible the klunkiness will build up to the point that the community will say \"give us a new clean resource and we'll deprecate the old one\".  But that's not a place we're in yet.</p>",
        "id": 183997171,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1576907252
    },
    {
        "content": "<p>(And given the cost of the change, the resource would need to have become klunky indeed - for the vast majority of implementers - for an agreement on replacement to occur.)</p>",
        "id": 183997217,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1576907310
    },
    {
        "content": "<p>Ups, this is a problem of point of view  - if we consider fhir as a \"working\" standard - if R4 published and used isn't this our responsibility to provide smooth migration for our users/early adopters to R5?</p>",
        "id": 183997278,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907486
    },
    {
        "content": "<p>This people does not really care about status of standard  - they use it</p>",
        "id": 183997318,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907528
    },
    {
        "content": "<p>actually, it's not a big upgrade from the old to the new - pull the query out into a topic....</p>",
        "id": 183997319,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576907538
    },
    {
        "content": "<p>But imagine a working system on top of generic fhir server</p>",
        "id": 183997326,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907582
    },
    {
        "content": "<p>you have to in sync deploy new version of service and fhir server</p>",
        "id": 183997332,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907624
    },
    {
        "content": "<p>and say you have external users of subscription api</p>",
        "id": 183997372,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907648
    },
    {
        "content": "<p>umm. yes. you have to anyway, at the moment</p>",
        "id": 183997373,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576907648
    },
    {
        "content": "<p>unless the server offers both R4 and R5 services</p>",
        "id": 183997375,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576907665
    },
    {
        "content": "<p>That's mmy point</p>",
        "id": 183997377,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907688
    },
    {
        "content": "<p>Can  we design with this in mind?</p>",
        "id": 183997385,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907724
    },
    {
        "content": "<p>what's your point? A general thing about FHIR, or something specific to subscription?</p>",
        "id": 183997388,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576907737
    },
    {
        "content": "<p>Real servers should be able to serve multiple versions</p>",
        "id": 183997440,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907842
    },
    {
        "content": "<p>real servers can. I'll check in with an implemenation before the January meeting, but I don't right now see any reason why I couldn't run a dual version server</p>",
        "id": 183997483,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576907888
    },
    {
        "content": "<p>(feb meeting this time)</p>",
        "id": 183997484,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576907897
    },
    {
        "content": "<p>No one did it in a proper way ;)</p>",
        "id": 183997487,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907922
    },
    {
        "content": "<p>?</p>",
        "id": 183997492,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576907938
    },
    {
        "content": "<p>Such breaking changes in FHIR make it a real challenge</p>",
        "id": 183997499,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907963
    },
    {
        "content": "<p>to serve multiple versions</p>",
        "id": 183997500,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576907975
    },
    {
        "content": "<p>How to make R4 subscriptions work with R5 patient?</p>",
        "id": 183997587,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576908110
    },
    {
        "content": "<p>or R5 subscriptions with R4 patient?</p>",
        "id": 183997632,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576908165
    },
    {
        "content": "<p>We are programmers,  we can solve this somehow</p>",
        "id": 183997699,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576908312
    },
    {
        "content": "<p>but isn't this multiversion reality should be part of fhir design?</p>",
        "id": 183997739,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576908370
    },
    {
        "content": "<p>Again i don't see essential difference between  JVM and FHIR</p>",
        "id": 183997752,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576908444
    },
    {
        "content": "<p>Java guys grew the culture of compatibility.</p>",
        "id": 183997796,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576908495
    },
    {
        "content": "<p>If you ever encounter python 2=&gt;3 hell</p>",
        "id": 183997802,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576908532
    },
    {
        "content": "<p>or ruby 1.8=&gt;1.9, vb 6=&gt;.net</p>",
        "id": 183997814,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576908556
    },
    {
        "content": "<p>you know \"the wrong way\" of making changes</p>",
        "id": 183997863,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576908610
    },
    {
        "content": "<p>I think,  version migration problem should be responsibility of \"breaking changes\" makers.</p>",
        "id": 183997877,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576908670
    },
    {
        "content": "<p>if r5 for example will deprecate but keep r4 subscriptions  - it would be straight forward to do fhir server with (r4, r5) support</p>",
        "id": 183997932,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576908810
    },
    {
        "content": "<p>Make old stuff living deprecated in same place with new looks like right balance/tradeoff</p>",
        "id": 183998306,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576909610
    },
    {
        "content": "<p>@Lloyd In case of Questionnaire redesign it is the same problem - imagine a FHR CDR hosted by some provider and dozens of external and internal apps reporting R4 Questionnaire. Now R5 released? How to migrate all of this systems?</p>",
        "id": 183998408,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576909853
    },
    {
        "content": "<p>Whose is this problem?</p>",
        "id": 183998467,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576909992
    },
    {
        "content": "<p>if we have Q1 (deprecated) and Q2 both in R5 - we can upgrade CDR</p>",
        "id": 183998524,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576910119
    },
    {
        "content": "<p>Apps will migrate one by one during the year</p>",
        "id": 183998532,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576910155
    },
    {
        "content": "<p>until R6 with Q3 will come :)</p>",
        "id": 183998572,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576910190
    },
    {
        "content": "<p>If you don't do this in a standard,  implementers still have to do it, because of users.</p>",
        "id": 183998682,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576910480
    },
    {
        "content": "<p>Everybody love to design from scratch  ....</p>",
        "id": 183998684,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576910502
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 183999046,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576911253
    },
    {
        "content": "<blockquote>\n<p>Around minute 34 in the video posted above - how is <code>R5/Subscription</code> different from <code>new-ns/foo</code> from the example given?</p>\n</blockquote>\n<p>the difference is small but important,  two namespaces can coexist in one library or runtime.  If fhir would make R4/Subscription and R5/Subscription part of R5 then it would be the same. But we drop R4/Sub from R5  as designers ;(  and pushing it back (R4/Subscriptions into R5 Server)  somehow as implementers</p>",
        "id": 183999108,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576911425
    },
    {
        "content": "<p>I have to say I find the fact that \"old subscriptions\" are going away kind of troubling too.</p>\n<p>I know of many, many production solutions that have taken heavy advantage of the current subscription functionality.</p>\n<p>There is a workaround for these people, which is to create a contained topic inside the subscription that keeps their old criteria and nothing else.. But what an ugly workaround.</p>\n<p>Personally I don't see why it needs to be either/or. You could keep the \"old way\" alive in Subscriptions and still support the new way. Nobody is forcing servers to actually support both.</p>",
        "id": 184009471,
        "sender_full_name": "James Agnew",
        "timestamp": 1576932204
    },
    {
        "content": "<p>I've been mulling this overnight and wanted to consolidate/verify things, if everyone will bear with me..</p>\n<p>1) There can be a path from R4 Subscriptions to topic-based, but even then the resources include breaking changes (e.g., what they send as a notification, etc.).  Supporting both will require more work than supporting either one.</p>\n<p>2) People that have implemented the existing behavior don't want to change their code (which works for them)</p>\n<p>3) Outside of the basic \"is this implementable for my architecture\", several issues/limitations were identified (e.g., resource deletion vs falling out of criteria, content of notifications, etc.) for the wider community - some of these alone are also breaking changes.</p>\n<p>4) Subscription sat at FMM 3 for a while, and people don't look at maturity levels, so they used it in production with the expectation of it remaining stable.</p>\n<p>--</p>\n<p>a) Even if topic-based subscriptions were implemented side-by-side to the existing model, they are inherently incompatible (notifications are different things) - an R5 client would then need to figure out version an R5 sever supports, and expect to implement both for broad compatibility.</p>\n<p>b) Versioning resources is a possible design - but moves version hell from the release version to the resource version (e.g., R5 servers support v1/v2/v3 of any given resource/behavior and my client needs to sort it out by supporting the one I want and all the ones below it).</p>\n<p>c) If this is the design paradigm we want, it needs to be defined - what is the rule we are looking for?  Every resource included in a release needs to embrace backwards compatibility?  'Beta' releases alongside the existing ones so people can test things outside this behavior?  Prepend the word 'Draft' to a resource name for testing? etc.</p>\n<p>--</p>\n<p>So, it will be painful: for people who have implemented the existing resources , for clients trying to connect to servers of a particular release, or for everyone defining specs moving forward (plus one of the other groups).</p>",
        "id": 184012375,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1576937958
    },
    {
        "content": "<p>I'm catching up on the robust discussion here after being totally heads down in SMART documentation yesterday. Wow!</p>",
        "id": 184014270,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1576941489
    },
    {
        "content": "<p>I don't have an opinion on \"replace vs augment\" yet, but I wanted to make a couple of comments:</p>\n<p>@nicola said:</p>\n<blockquote>\n<p>First version was hard to implement for fhir facades like epic and cerner, because it's too \"fhirish\", but there was no problems in implementation for generic fhir servers.</p>\n</blockquote>\n<p>This wasn't the case -- we received specific feedback from \"generic FHIR server\" teams (from Google, Microsoft; also <span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span>) that Topic-based subscriptions would give them a scalable path to implementing support, e.g., by taking advantage of existing cloud based queueing services. So we've been thinking of Topic-based Subscriptions as an improvement across architectures.</p>",
        "id": 184014445,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1576941852
    },
    {
        "content": "<p>Second comment is about timing: I wish we were having this conversation earlier. We've done WGM seasons and connectathons and Dev Days meetings and webinars and so on. (Heck, <span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span> I came to St Petersburg and presented this plan to you two months ago.) It's always harder to process this kind of feedback later in the revision process -- which isn't an argument one way or another, it's just a \"here's what I'm feeling\" comment.</p>",
        "id": 184014525,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1576942024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> that was my fault,  i didn't put  \"right\" attention in \"right\" time.  I think this discussion not only about Subscriptions, but about how do we handle \"breaking changes\" in FHIR in general. Some time ago same happened with include:recursive.</p>",
        "id": 184015270,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576943420
    },
    {
        "content": "<p>I think,  we need a mind shift  to honor \"backward\" and even \"forward\" compatibility in FHIR community,  because FHIR already in production!</p>",
        "id": 184015329,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576943564
    },
    {
        "content": "<p>And users are really concerned about this.</p>",
        "id": 184015339,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576943594
    },
    {
        "content": "<p>I will try to put my thoughts  about this to more structured post.</p>",
        "id": 184015396,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576943726
    },
    {
        "content": "<p>Maybe I am missing something, but can we make sure we understand why R4/Subscription being different from R5/Subscription is worse than having  R5/Subscription and R5/NewSubscription? Is it because R4/Subscription cannot reference R5/Observation (for example)? And yes, I understand that R4 and R5 are not really namespaces, but for the purposes of of this discussions, they seem to serve the same purpose.</p>",
        "id": 184016773,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1576946149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192685\">@Vassil Peytchev</span> with NewSubscription you can deprecate but keep R4/Subscription in R5. Like in your library you preserve deprecated code for some time to help your users start with a new version right now and gradually refactor codebase to new API.</p>",
        "id": 184017327,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576947230
    },
    {
        "content": "<p>That's what I don't understand. R4/Subscription is not going anywhere - it's still there, and it can be used. What is the exact problem caused by R4/Subscription and R5/Subscription coexisting?</p>",
        "id": 184017711,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1576947884
    },
    {
        "content": "<p>Name clash of the resource name.</p>",
        "id": 184017844,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576948145
    },
    {
        "content": "<p>I would call it Homonym problem</p>",
        "id": 184017855,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576948195
    },
    {
        "content": "<p>Imagine you have FHIR server and spent one year and implemented dozen of services which use of R4/Subscriptions  - now you want to migrate to R5. FHIR server vendor says you can install R5 and migrate all the data with small downtime, but R5/Subscriptions are different from R4 - so all of your services will be broken (what if you made R4/Subscriptions your public API and some external services use it and they out of your control?).</p>",
        "id": 184018259,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576948866
    },
    {
        "content": "<p>You will definitely do some workaround, keep old API, install new API on new URL, make synchronization between R4 and R5 servers, deprecate old API,  AND  \"blame the standard\"!</p>",
        "id": 184018469,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576949276
    },
    {
        "content": "<p>If you ever did such upgrades - you understand the \"pain\" of incompatibility. I claim by simple rules we can make the standard more friendly to upgrades/changes - just don't do breaking changes - only \"add\" and \"deprecate\".</p>",
        "id": 184018600,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576949486
    },
    {
        "content": "<p>Would you apply this reasoning to changes in resource definitions/models as well? in other words for non-normative resources would you propose that we avoid changing the structure in a breaking way, and instead define new versions of them that can overlap in time? Or do you see this as a different sort of case because it's about API definition rather the data modeling?</p>",
        "id": 184018908,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1576950034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> :</p>\n<blockquote>\n<p>Even if topic-based subscriptions were implemented side-by-side to the existing model, they are inherently incompatible (notifications are different things) - an R5 client would then need to figure out version an R5 sever supports, and expect to implement both for broad compatibility.</p>\n</blockquote>\n<p>I don't think that's how clients have worked in the past - it's servers who've done both, and clients just don't work. But yes, if you want general purpose clients and servers, they would do both.  if we keep both. The question is where we keep the pain. </p>\n<blockquote>\n<p>If this is the design paradigm we want, it needs to be defined - what is the rule we are looking for? Every resource included in a release needs to embrace backwards compatibility? </p>\n</blockquote>\n<p>That is probably what Nicola is looking for - but that's not what we're going to do as a general rule and we shouldn't be debating a general rule, only what we're going to do here.</p>",
        "id": 184021718,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576954920
    },
    {
        "content": "<blockquote>\n<p>do you see this as a different sort of case because it's about API definition rather the data modeling?</p>\n</blockquote>\n<p>I think it is different in degree of impact</p>",
        "id": 184021765,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576954959
    },
    {
        "content": "<p>I'm still not sure that this is quite that big an issue. We've been clear that there is the possibility of breaking changes on the API. So here's an existing R4 subscription:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;resourceType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Subscription&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;example&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;text&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;status&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;generated&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;div&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&lt;div xmlns=\\&quot;http://www.w3.org/1999/xhtml\\&quot;&gt;[Put rendering here]&lt;/div&gt;&quot;</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">&quot;status&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;requested&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;contact&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;system&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;phone&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ext 4123&quot;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">&quot;end&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2021-01-01T00:00:00Z&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;reason&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Monitor new neonatal function&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;criteria&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation?code=http://loinc.org|1975-2&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;channel&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;rest-hook&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;endpoint&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;https://biliwatch.com/customers/mount-auburn-miu/on-result&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;payload&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;application/fhir+json&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;header&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"s2\">&quot;Authorization: Bearer secret-token-abc-123&quot;</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 184021853,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576955143
    },
    {
        "content": "<p>here's the R5 equivalent that has exactly the same functionality, I think:</p>",
        "id": 184021859,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576955159
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;resourceType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Subscription&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;example&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;contained&quot;</span> <span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"nt\">&quot;resourceType&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;Topic&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;status&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;active&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;resourceTrigger&quot;</span> <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;queryCriteria&quot;</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;current&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;Observation?code=http://loinc.org|1975-2&quot;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}]</span>\n  <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;requested&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;topic&quot;</span> <span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nt\">&quot;reference&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;#topic&quot;</span><span class=\"p\">},</span>\n  <span class=\"nt\">&quot;contact&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;system&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;phone&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ext 4123&quot;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">&quot;end&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2021-01-01T00:00:00Z&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;reason&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Monitor new neonatal function&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;channel&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;rest-hook&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;endpoint&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;https://biliwatch.com/customers/mount-auburn-miu/on-result&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;payload&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"nt\">&quot;contentType&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;application/fhir+json; fhir-version: 4.0&quot;</span><span class=\"p\">,</span>\n       <span class=\"nt\">&quot;content&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;full=resource&quot;</span><span class=\"p\">,</span>\n     <span class=\"p\">}</span>\n    <span class=\"s2\">&quot;header&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"s2\">&quot;Authorization: Bearer secret-token-abc-123&quot;</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 184022085,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576955420
    },
    {
        "content": "<p>given the other kinds of changes that will happen with R5, I don't think this will be particularly noticeable</p>",
        "id": 184022107,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576955487
    },
    {
        "content": "<ul>\n<li>if, that is, the server supports the fhir-version paraemter on the payload</li>\n</ul>",
        "id": 184022115,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576955511
    },
    {
        "content": "<p>If I'm right that this is the same functionality, we should add this as an example and make a note on the page about this <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span></p>",
        "id": 184023384,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576957775
    },
    {
        "content": "<p>A difference is on a client side, a client  will need to be prepared to handle a bundle, and to receive all posts at the specified endpoint (rather than sub-paths), etc. In other words receiving notifications (not just creating a subscription) requires breaking changes for the client. I think this is part of what Nicola would like to avoid.</p>",
        "id": 184025267,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1576961307
    },
    {
        "content": "<blockquote>\n<p>\"contentType\" : \"application/fhir+json; <strong>fhir-version: 4.0</strong>\",</p>\n</blockquote>\n<p>Asking for R4 subscription notification means you get what you used to get</p>",
        "id": 184025285,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576961386
    },
    {
        "content": "<p>That's an interesting way to interpret :) I would have expected R4 resource content (i.e.,the payload content type would be defined this field) with R5 delivery semantics.</p>",
        "id": 184025485,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1576961753
    },
    {
        "content": "<p>If we <em>were</em> going to support multiple kinds of delivery semantics with a client-settable switch, I might propose using a distinct field for that switch</p>",
        "id": 184025527,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1576961793
    },
    {
        "content": "<p>but R5 delivery semantics are not possible in R4. Further, the document for fhir-version says that it specifies the exchange semantics</p>",
        "id": 184025528,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576961798
    },
    {
        "content": "<p>Can you clarify which document?</p>",
        "id": 184025544,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1576961834
    },
    {
        "content": "<p>from <a href=\"http://hl7.org/fhir/R4/http.html#version-parameter\" target=\"_blank\" title=\"http://hl7.org/fhir/R4/http.html#version-parameter\">http://hl7.org/fhir/R4/http.html#version-parameter</a></p>\n<blockquote>\n<p>When used in an HTTP request, the version parameter may be used on either the Content-Type header, or the Accept header, or both, and applies to the entire interaction (the behavior of the interactions as described on ths page, the search parameters and functionality, and the accompanying conformance resources)</p>\n</blockquote>",
        "id": 184025595,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576961928
    },
    {
        "content": "<p>Thanks! I'm interested to get <span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span>'s  take on this approach. It seems to split the difference and between \"replace vs augment\", but I'm not sure it addresses Nicola's concern.</p>",
        "id": 184025606,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1576961955
    },
    {
        "content": "<p>no but in the sense that it doesn't, that's the bigger question.  We aren't going to start enforcing backwards compatibility until we call things normative. Our main focus for R5 is to move things to that state. People can be impatient,  but it's a big challenge to get to that state. Compared to other things that are going to  change, this is not a big deal. </p>\n<p>Otherwise, a lot of people will just stick with R4 completely</p>",
        "id": 184025746,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576962183
    },
    {
        "content": "<blockquote>\n<p>Would you apply this reasoning to changes in resource definitions/models as well? in other words for non-normative resources would you propose that we avoid changing the structure in a breaking way, and instead define new versions of them that can overlap in time? Or do you see this as a different sort of case because it's about API definition rather the data modeling?</p>\n</blockquote>\n<p>Yes - to all released resources and APIs. That's how the \"compatibility\" mindset can be cultivated.</p>",
        "id": 184025807,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576962291
    },
    {
        "content": "<blockquote>\n<p>no but in the sense that it doesn't, that's the bigger question.  We aren't going to start enforcing backwards compatibility until we call things normative. Our main focus for R5 is to move things to that state. People can be impatient,  but it's a big challenge to get to that state. Compared to other things that are going to  change, this is not a big deal. </p>\n<p>Otherwise, a lot of people will just stick with R4 completely</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> do you know a success story with such approach in any industry? We will always find a better way, even for normative parts. You recommended book - \"In the Land of Invented Languages\" - following mainline from this book - only real users will make language work, but you will not get them until 'normative' version :)</p>",
        "id": 184026111,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576962838
    },
    {
        "content": "<p>You were talking about \"working\" standard - where normative status is less important than real usage?</p>",
        "id": 184026165,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576962914
    },
    {
        "content": "<p>Or I didn't get you right?</p>",
        "id": 184026171,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576962927
    },
    {
        "content": "<p>What is the problem to treat all FHIR releases as 'Normative'?</p>",
        "id": 184026223,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576963010
    },
    {
        "content": "<p>Or let say 'working'</p>",
        "id": 184026229,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1576963029
    },
    {
        "content": "<p>Implementers are a creative bunch.  In the right space, pretty much anything can be made to work.  Our objective in the STU phase is to move from our first theoretical stab at what might be workable to something we're pretty confident will be workable long-term.  That doesn't mean that we won't occasionally learn things 5 years down the road that will make us wish we'd taken a different approach, but we can significantly reduce the likelihood.  We <em>don't</em> want to be in a situation where we have to align forever with the very first (and possibly quite mistaken) initial first try of a spec because a group of implementers happen to have found a way to make it work for a portion of the problem space.  We need to keep in mind what's going to be best long term.  As implementers increase and the specification matures (level 4/5) we start considering impact of change on those who've already rolled out.  And, once we have a degree of confidence in the solution across the breadth of the space, we can lock it down.  Placing too high a premium on impact on initial developers (who were warned to prepare for breaking change) rather than on long-term breadth of coverage and ease of use is a trade-off we need to be wary of.</p>",
        "id": 184028337,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1576967049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span> sorry for the delay.. I'm having a life prior to Xmas</p>",
        "id": 184085789,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1577082061
    },
    {
        "content": "<p>I thnk that your concerns are very important, but I also think that you're looking at it from the wrong point of view.</p>",
        "id": 184085796,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1577082083
    },
    {
        "content": "<p>we could indeed maintain backwards compatibility in the API by duplicating things. Yes, we could have Patient1, Patient2, etc. At least for a couple of resources, we'd be up to #3. </p>\n<p>I don't know, on the other hand, how that would work at all for some of the API things... we've just made breaking changes to everything. In practice, systems maintain backward compatibility by still maintaining older APIs for those things.... in fact, hold that thought.</p>",
        "id": 184085857,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1577082207
    },
    {
        "content": "<p>If we did clone resources when their design changes, so that we have Patient1 and Patient2, which are inconsistent with each other... would a client addressing Patient1 see the same set of patients as a client working with Patient2? Or would they be disjoint subsets? </p>\n<p>Would an AllergyIntolerance resource reference Patient1? or Patient2? How would that work?</p>",
        "id": 184085907,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1577082303
    },
    {
        "content": "<p>Early on, we decided that the set of questions that brings up were places we just didn't want to go - supremely messy. If servers want to be backwards compatible, they can do it using the API as a group.</p>",
        "id": 184085924,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1577082364
    },
    {
        "content": "<p>And, in fact, that's exactly what is happening - we define a new spec, but most servers go on supporting the older versions as well as the new versions.</p>",
        "id": 184085955,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1577082398
    },
    {
        "content": "<p>your concern is a software concern, not an API spec concern, and all our tools support releases 2,3, and 4, and I still make bug fixes for R2 (made one yesterday). And the reference implementations all support R2 - R4 as well. Further, we provide bi-directional conversion code</p>",
        "id": 184085966,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1577082471
    },
    {
        "content": "<p>so I think that we do take backwards compatibility extremely seriously. Just like other infrastructure providers. But we do restrict the chaos by limiting the compatability by major version. Maybe an infrastructure software provider like kubernetes has an easier task than we do - I don't know. But I know that FHIR is not an application development framework, it's an interoperability standard, and so it's a different beast</p>",
        "id": 184086017,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1577082580
    },
    {
        "content": "<p>but I do think that the place at which to ask about compatibility is <em>software</em>. And so if you think that supporting both the different ways of doing subscriptions is a problem for software (servers), then I'm all ears. But I think that the conversion example above shows that it won't be too hard (though I will implement it and check!)</p>",
        "id": 184086080,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1577082680
    },
    {
        "content": "<p>Thank you Grahame. I will try to incorporate this vision into our \"software\". We and  many people look at FHIR broader than just interop standard,  but as \"software platform specification\" , that's why expectations are so high. I haven't seen yet \"true\" multiversion FHIR server implemented  - but challenge is accepted! ;)</p>",
        "id": 184089650,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1577088807
    },
    {
        "content": "<blockquote>\n<p>If I'm right that this is the same functionality, we should add this as an example and make a note on the page about this <span class=\"user-mention silent\" data-user-id=\"222054\">Gino Canessa</span></p>\n</blockquote>\n<p>Hopefully in my branch today, otherwise next week.  I will need people more familiar with R4 to review it then, but in broad strokes:</p>\n<p>R4-REST:<br>\n<em>Ping</em> was requested by leaving off the <code>payload</code> field, which I believe maps to <code>contentType=\"application/fhir+json; fhir-version: 4.0\"</code> with <code>content=\"empty\"</code>.  This will be different for the receiver, as the POST is a bundle instead of empty body (will note).</p>\n<p><em>Full Resource</em> was requested by setting the <code>payload</code> field to a valid content-type, which I believe now maps to <code>contentType=\"application/fhir+json; fhir-version: 4.0\"</code> with <code>content=\"full-resource\"</code>.  This will be different for the receiver as well, since the POST will be a bundle instead of a resource (will note).</p>\n<p>ID-only is not available in R4, so there is no mapping for it.</p>\n<p>R4-WebSockets:<br>\nWe are still fleshing out WebSockets in R5 - is there any concern about backwards compatibility/mapping for the protocol here (e.g., the requests I've had were to bring functionality up to par with REST, which makes it generally incompatible)?</p>",
        "id": 184331101,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1577465161
    },
    {
        "content": "<p>The issue of how and whether to continue supporting R4 Subscriptions is very relevant and unresolved for the Google Cloud implementation. We have something like a multi-version FHIR server - you can't intermingle resources from different versions in one store, but the server is the same. In a DSTU2 store with DSTU2 resources, you can do STU3/R4 API things like PATCH, Patient/$everything with _since, search with _has, etc. Any functionality will typically be available across versions if it doesn't directly conflict with other versions (e.g. DSTU2's conformance statement and _sort syntax).</p>\n<p>Our subscriptions support has been sitting in alpha for quite a while, in part because we're not sure if it would be more useful to our users to have an R4 implementation with arbitrary limitations on active subscriptions per store, or force everyone into an R5 style API that we are more comfortable scaling up, or find a way for them to co-exist. So I am definitely sympathetic to Nicola's concerns, because our end goal is to offer a consistent level of API functionality regardless of what resources are being used. But that level has to satisfy certain use cases, and R4 subscriptions don't.</p>\n<p>(As a side note, occasionally I get asked to support true multi-version stores with mixed resources. This is technically feasible but we have chosen not to do it - I don't think people asking for it have really considered how difficult it would be to use and how weird it would get.)</p>",
        "id": 184337433,
        "sender_full_name": "Paul Church",
        "timestamp": 1577472942
    },
    {
        "content": "<p>what weirdness have you identified?</p>",
        "id": 184349269,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1577488686
    },
    {
        "content": "<p>Having searchset bundles containing a mix of versions presents functional challenges even if the client is capable of parsing such a bundle - we'd have to put the version somewhere in entry. If I'm searching for MedicationAdministration on a patient, can I _include both MedicationOrder and MedicationRequest?</p>\n<p>References between versions - you can have an R4 Patient referenced by an STU3 Observation and referencing a DSTU2 Practitioner, that's probably easy to handle because those relationships were stable. Can I have a Reference(Any) field or a typed reference extension on an R4 resource that refers to a resource type that does not exist in R4? If I have a <code>0..*</code> reference field, it could also contain a mix of versions.</p>",
        "id": 184350704,
        "sender_full_name": "Paul Church",
        "timestamp": 1577491147
    },
    {
        "content": "<p>Can I have a contained resource of a different version than its container? What does my capability statement say I support? How do I $export a mix of resources?</p>",
        "id": 184350907,
        "sender_full_name": "Paul Church",
        "timestamp": 1577491443
    },
    {
        "content": "<p>There are so many details that haven't been explored. Really what people are saying is \"I am getting data from sources in a variety of FHIR versions, how should I deal with it?\"</p>",
        "id": 184350925,
        "sender_full_name": "Paul Church",
        "timestamp": 1577491543
    }
]