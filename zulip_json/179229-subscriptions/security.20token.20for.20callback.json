[
    {
        "content": "<p>Has there been discussion on how the subscription carries a security token for the callback?</p>",
        "id": 153905993,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505078465
    },
    {
        "content": "<p>no. there's been no discussion</p>",
        "id": 153906007,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505084416
    },
    {
        "content": "<p>In a project I was on, we used Subscription on DocumentReference as a way to produce a RESTful (FHIR) API that was asynchronous. We found that he callback needed some kind of security token. Initially we were thinking of adding an extension to carry this token. But what we were able to do is just do the callback without security token, given very constrained environment.   Having a way to put a security token into the subscription might be a useful feature. Seems this would also be a good way to deal with this similar problem in cds-hooks. Where this security token is just for the 'next' call (callback in subscription, but call forward for cds-hooks). WHere as the http auth token is then focused only on if the subscription requiest is authorized... sound reasonable?</p>",
        "id": 153906012,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505085762
    },
    {
        "content": "<p>follow the logic of conforming to cds-hooks, but there's a much wider range of implementation contexts for subscription (as opposed to cds-hooks)</p>",
        "id": 153906013,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505085927
    },
    {
        "content": "<p>didn't follow the 'next' bit</p>",
        "id": 153906014,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505085939
    },
    {
        "content": "<p>sorry. I am discussing cds-hooks and subscription as if they are the same thing... but they are only the same thing in that Party ONE is asking Party TWO to have a transaction with Party THREE.. where Party TWO needs to have some security token when communicating with Party THREE. In subscrption the Party THREE is the callback service endpoint, in cds-hooks it is the prefetch target server... right? Are there others that need this kind of an interaction model, so that we can look to a pattern?  The main point is that security token for TWO--&gt;THREE does not need to be (and should not be) the same securty token used b ONE--&gt; TWO.</p>",
        "id": 153906015,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505086803
    },
    {
        "content": "<p>and where the security token is only usable by TWO for the purpose of transaction with THREE.</p>",
        "id": 153906016,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505086911
    },
    {
        "content": "<p>I'm not sure if I'm following this conversation (not having worked on Subscriptions this weekend) or the analogies, but I believe the Party THREE you are referring to in CDS Hooks is the EHR FHIR Server.</p>",
        "id": 153906018,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1505087826
    },
    {
        "content": "<p>I'd be interested to chat with you both on this further. It may be beneficial to discuss offline - perhaps at the bar later :-)</p>",
        "id": 153906020,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1505087901
    },
    {
        "content": "<p>in the FHIR subscription model, it <em>may</em> also be the EHR FHIR server. but it may be all sorts of other things as well.</p>",
        "id": 153906021,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505087939
    },
    {
        "content": "<p>for now, there is no security arrangements on subscription for the push at all. You can do a push without any content, if there's no security arrangements. or else, the system may now the appropriate arrangements out band. The space in the middle is punted to the future</p>",
        "id": 153906026,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505088279
    },
    {
        "content": "<p>each of the channels has it's own security token requirements/options</p>",
        "id": 153906027,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505088303
    },
    {
        "content": "<p>sms: no security<br>\nemail: security by direct, or none. For direct, there's nothing to say in the subscription resource<br>\nmessage: what security applies depends on the delivery method. We describe a HTTP post method, but indicate that MLLP, MQ series etc could be used. All these have different tokens</p>",
        "id": 153906028,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505089295
    },
    {
        "content": "<p>Hey Guys,</p>\n<p>Interesting conversation. <span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> - I'd love to hear more about your experience using Subscriptions with Document Reference.</p>",
        "id": 153906029,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1505089312
    },
    {
        "content": "<p>websockets - has it's own model that isn't replicated into the subscription resource</p>",
        "id": 153906030,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505089329
    },
    {
        "content": "<p>rest-hook- either a bearer token or a user name and password, and potentially a certificate identity</p>",
        "id": 153906031,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505089355
    },
    {
        "content": "<p>In addition to Grahame's points, note that the current spec's optional Subscription.channel.payload element. Lack of a specified payload in the Subscription causes the server to simply \"ping\" the subscribed client, such that there's no data in the notification's body and the client must query the FHIR server to understand the recent change. (This neatly sidesteps the exact security need you're describing).</p>",
        "id": 153906032,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1505089445
    },
    {
        "content": "<p>yes that's why it exists as an option</p>",
        "id": 153906033,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505089523
    },
    {
        "content": "<p>For the rest-hook specifically, <span class=\"user-mention\" data-user-id=\"194360\">@Niklas Svenz√©n</span> and I had briefly talked through the use of the  OAuth access_token created either via an actual \"front-end\" SMART app integration and/or via the OAuth client credentials / SMART Backend Services flow.</p>",
        "id": 153906034,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1505089558
    },
    {
        "content": "<p>that's one logical option, yes</p>",
        "id": 153906035,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505089637
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  :)</p>\n<p>Lastly, </p>\n<blockquote>\n<p>in that Party ONE is asking Party TWO to have a transaction with Party THREE.. </p>\n</blockquote>\n<p>in the case where ONE is the FHIR Server, TWO is the EHR (or other clinical workflow system) and THREE is the subscribing FHIR client -- </p>\n<p>It's not obvious to me that FHIR Subscriptions actually requires TWO at all. Right?</p>",
        "id": 153906036,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1505089884
    },
    {
        "content": "<p>well, there's 3 logical parties, but one actual party could play two of the roles - or even all 3</p>",
        "id": 153906037,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505089929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> - <span class=\"user-mention\" data-user-id=\"192646\">@Bill Harty</span> walked through a scenario this morning, where his system  was both the subscribing client and the cause of the change that he was notified of (I'm pretty sure that he was even testing against your server).</p>\n<p>While, sure, you can argue that there are three parties in this case, I'm pretty sure that we all agree that notifications come from the FHIR Server that holds the Subscription -- party ONE.</p>",
        "id": 153906038,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1505090338
    },
    {
        "content": "<p>I have uses for my server arranging for it to notify itself of a change. that's just reusing the infrastructure for internal usage</p>",
        "id": 153906039,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505090859
    },
    {
        "content": "<p>Webhooks are generally an unsolved problem as far as authentication/authorization go. By unsolved I mean no IETF standard that covers them. In fact, authentication and authorization aren't necessarily that important as verifying that sender is who they say they are. That's the model behind github webhooks - they provide a HMAC signature of the body of the payload, hashed using a secret that the subscriber provides. Of course Oauth works fine too, but moreso 2-legged bearer token style.</p>",
        "id": 153906048,
        "sender_full_name": "Nick Hatt",
        "timestamp": 1505099970
    },
    {
        "content": "<p>I fully expect there are solutions in the general IT market. We should not have to invent something special in FHIR. What I think we could do is help identify patterns, so that parties can indicate their alignment on the same pattern. The security wg might get some time to talk about this on Wednesday Q3.</p>",
        "id": 153906113,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505144467
    },
    {
        "content": "<p>The examples for <code>criteria</code> don't include a URL. We would hypothetically be a subscription aggregator, one endpoint to manage subscriptions to various FHIR servers, and some kind of identification of which resource owner should get the subscription would be essential.</p>",
        "id": 153906257,
        "sender_full_name": "Nick Hatt",
        "timestamp": 1505150244
    },
    {
        "content": "<p>hmm. sounds like a different element to me</p>",
        "id": 153906260,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505150507
    },
    {
        "content": "<blockquote>\n<p>... subscription aggregator, ... which resource owner should get the subscription would be essential.</p>\n</blockquote>\n<p>Hey <span class=\"user-mention\" data-user-id=\"194031\">@Nick Hatt</span> ! In your aggregator scenario, note that a lot of the time, the authenticiation mechanisms (probably OAuth access_token) will also be specific to the FHIR server/tenant as well. So an aggregator would definitely be managing endpoints and other information already.</p>",
        "id": 153906262,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1505150780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191864\">@Isaac Vetter</span>  We manage tokens as well, so people log into our site and setup OAuth through our platform. It lets people offload the complexity of refresh tokens, monitoring, and troubleshooting. In other words, our customers authenticate to us once, so they need some kind of content-level flag to indicate which FHIR server/tenant/EHR/deployment they care about. But as <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> suggests it can just be an extension, or even a custom HTTP header on subscription create.</p>",
        "id": 153906278,
        "sender_full_name": "Nick Hatt",
        "timestamp": 1505153102
    }
]