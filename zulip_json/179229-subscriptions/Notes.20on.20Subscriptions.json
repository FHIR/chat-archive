[
    {
        "content": "<p>Subscription.eventCount a does not look like a good element for definition resource - it's part of something like SubscriptionStatus. Logical check - when I PUT Subscription with eventCount=0 - what does it mean? The same about Subscription.error. Do you consider introduce SubscriptionStatus resource or at least move all these status attributes in complex element like <code>Subscription.status = {error, count}</code>?</p>",
        "id": 185581308,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1578996969
    },
    {
        "content": "<p>We can use same pattern as k8s - <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-and-container-status\" target=\"_blank\" title=\"https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-and-container-status\">https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-and-container-status</a></p>",
        "id": 185581377,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1578997034
    },
    {
        "content": "<p>Subscription.channel.type is CodeableConcept! Do you expect such a complicated classification? Why code is not enough (or  Coding)?</p>",
        "id": 185581515,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1578997136
    },
    {
        "content": "<p>For elements like contact, reason, name etc - can we keep Sub elements at a minimum required? Such meta-info can be added by extensions - if extensions will become popular - after couple of years - move it to the core.</p>",
        "id": 185581816,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1578997394
    },
    {
        "content": "<p>Element heartbeatPeriod is very implementation-specific (80/20?). I would suggest publishing official extensions for such  cases</p>",
        "id": 185581951,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1578997515
    },
    {
        "content": "<p>Structure of filterBy looks kinda naive - I can imagine a lot of different filter engines - can we make it extensible by design?</p>",
        "id": 185582117,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1578997676
    },
    {
        "content": "<p>Something like: filter: { type: code, expression: any, ....};</p>",
        "id": 185582253,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1578997781
    },
    {
        "content": "<p>Instead of playing this \"bundle reuse game\" why not use specialized envelope:</p>\n<div class=\"codehilite\"><pre><span></span>type: handshake | notification | heartbit\nevent: created\ntimestamp: ......\nresource:\n  resourceType: Patient\n  id: pt-1\n  .....\n</pre></div>",
        "id": 185583279,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1578998581
    },
    {
        "content": "<p>For web-hooks as we know <code>timeout</code> parameter is quite important</p>",
        "id": 185595847,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1579009064
    },
    {
        "content": "<p>It would be nice to be able to \"inject\" constant context data into payload for multi-service subscribers.</p>",
        "id": 185596145,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1579009290
    },
    {
        "content": "<blockquote>\n<p>Subscription.eventCount a does not look like a good element for definition resource - it's part of something like SubscriptionStatus. Logical check - when I PUT Subscription with eventCount=0 - what does it mean? The same about Subscription.error. Do you consider introduce SubscriptionStatus resource or at least move all these status attributes in complex element like <code>Subscription.status = {error, count}</code>?</p>\n</blockquote>\n<p>Indeed, now that we're adding SubscriptionStatus, these will migrate to SubscriptionStaus</p>",
        "id": 185598040,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579010577
    },
    {
        "content": "<blockquote>\n<p>Subscription.channel.type is CodeableConcept! Do you expect such a complicated classification? Why code is not enough (or  Coding)?</p>\n</blockquote>\n<p>Agreed -- needs to be Coding to allow for extensibility, but not CodeableConcept.</p>",
        "id": 185598188,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579010670
    },
    {
        "content": "<blockquote>\n<p>For elements like contact, reason, name etc - can we keep Sub elements at a minimum required? Such meta-info can be added by extensions - if extensions will become popular - after couple of years - move it to the core.</p>\n</blockquote>\n<p>Gino and I would have left all these out. <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> has kind of insisted that these be included \"because the definition pattern requires them\" (not a verbatim quote). I'd happily trim these...</p>",
        "id": 185598264,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579010753
    },
    {
        "content": "<p>Heartbeat is an interesting one: the details change but the concept is relevant for many channel types including our most important ones today (rest hook, web socket), so I'm not sure I like the idea of taking it away from the core design.</p>",
        "id": 185598373,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579010837
    },
    {
        "content": "<p>Regarding, FilterBy: the super flexible \"code, expression\" -- is your comment here just about Subscription.filterBy, or also about SubscriptionTopic.canFilterBy? (There, we avoided the totally generic approach, because it didn't let us express the things we actually wanted, like</p>\n<div class=\"codehilite\"><pre><span></span>queryCriteria&quot;: { &quot;previous&quot;: &quot;status:not=in-progress&quot;, &quot;current&quot;: &quot;status=in-progress&quot;, &quot;requireBoth&quot;: true },\n</pre></div>",
        "id": 185598901,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579011139
    },
    {
        "content": "<p>As for a specialized envelope type, I'm sort of ambivalent. It's kind of charming that FHIR only has one resource that directly embeds others (\"contained\" shenanigans aside). What would the main gain be, over defining a Bundle.type of \"subscription\"?</p>",
        "id": 185599109,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579011268
    },
    {
        "content": "<p>BTW Nicola, thanks much for the comments and close read!</p>",
        "id": 185599143,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579011290
    },
    {
        "content": "<p>Bundle.type may work with  subs-handshake |  subs-heartbeat  | subs-notification</p>",
        "id": 185599229,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1579011356
    },
    {
        "content": "<p>I would like to see event name like 'created', 'updated', 'deleted' instead of parsing HTTP string</p>",
        "id": 185599354,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1579011422
    },
    {
        "content": "<p>But that's probably can be done as an extension of Bundle.entry</p>",
        "id": 185599375,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1579011442
    },
    {
        "content": "<p>Do we specify that this bundle should always contain one resource? Or it can be batch notification?</p>",
        "id": 185599483,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1579011503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> what do you think about <code>channel.timeout</code> - as we see from our trial it's quite important for server and client. Otherwise, it's hard to find the implicit configuration without confusing one of them</p>",
        "id": 185599744,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1579011646
    },
    {
        "content": "<p>As well unique id of the notification may be helpful for tracking duplicates (\"exactly one\" semantic is hard to make work)</p>",
        "id": 185600015,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1579011835
    },
    {
        "content": "<p>I'm pretty sure Lloyd didn't insist on adding those.  Following the Definition pattern is expected for resources that are defining what kinds of activities are possible to occur.  Of the various resources in the subscription space that might meet that intention, only 'Topic' really meets that definition.  Subscription is an event, not a definition.  (It would be nice if you considered alignment with the Event pattern there - though as usual, alignment with a pattern is \"consider these elements, either as core or as extensions and consider aligning with these names\".  Patterns never <em>force</em> a resource to include anything.</p>",
        "id": 185607585,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1579016486
    },
    {
        "content": "<p>Ok, think I'm catching up.. some of my comments will echo Josh's, but I need to consolidate for sanity.  First, <span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span>, thanks for the feedback!  I have a few questions on items below, if you wouldn't mind clarifying/giving context.  If there's anything I missed or have wrong, please let me know as well.</p>\n<ul>\n<li>\n<p>re: <code>Subscription.eventCount</code>: Yes, <code>eventCount</code> will to move into the <code>SubscriptionStatus</code> resource (drafting in progress).  As a note, both the <code>eventCount</code> and <code>status</code> fields had (or would have) guidance regarding what values acceptable to PUT/POST (e.g., initial requests, resetting from errors, etc.).  Beyond that, it would be up to the server implementer to decide what to do (e.g., reject, accept modified, etc.).</p>\n</li>\n<li>\n<p>re: data type of <code>Subscription.channel.type</code>: <code>Code</code> is an issue because of extensibility.  I do like moving it to <code>Coding</code>  though.  I will ask to see if anyone has a reason for not changing it.</p>\n</li>\n<li>\n<p>re: general fields: Echoing Josh, many of these fields have been requested for resources in general (from knowledge gained in other areas).  <strong>They are optional and not too many, so what is the driving concern to oppose them?</strong></p>\n</li>\n<li>\n<p>re: <code>Subscription.channel.heartbeatPeriod</code>: Josh discussed, but to summarize: we've felt this is core to the spec and useful across all channel types.</p>\n</li>\n<li>\n<p>re: <code>Subscription.filterBy</code>: These are paired with <code>SubscriptionTopic.canFilterBy</code> elements.  We've (so far) found that using Search parameters and modifiers allow for powerful filtering, while not over-committing servers.  <strong>What use case do you have that doesn't fit this?</strong></p>\n</li>\n<li>\n<p>re: \"bundle reuse game\": Current feedback is to define a new bundle type and include the new (coming soon) <code>SubscriptionStatus</code> resource as the first <code>entry</code> in the bundle (similar in concept to a message header).  This allows for those types to be first-class members and should clean all that up.  <strong>Does that work, or do you still have concerns?</strong></p>\n</li>\n<li>\n<p>re: <code>timeout</code> parameter: Is that important for a client to be able to set?  I've always felt it was a server concern (e.g., what I will allow for a timeout on http calls).  I'm not opposed to proposing the add, but would like to understand more context around why you feel so strongly, if possible.  Ahh, looks like this is from another area that it became important (leaving original notes for myself).  I'll put it on the list to add.</p>\n</li>\n<li>\n<p>re: event types: you don't need an extension (why we used <code>history</code> and will also be allowed in the new bundle type), you can just use <code>Bundle.request.method</code> and include the <code>HTTPVerb</code></p>\n</li>\n</ul>\n<p>Edit: fixed formatting, bolded questions for Nicola</p>",
        "id": 185616580,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1579021792
    },
    {
        "content": "<p>Missed one, the server is allowed to batch notifications together. That is part of justification for bundleEventCount, so that empty notifications can represent multiple events.</p>",
        "id": 185618278,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1579022730
    },
    {
        "content": "<p>re patterns and Lloyd insisting...  I insisted on the pattern elements in Topic but for  Subscriptions I don't see any pattern. in fact seems more like a request than event.  Those elements were inherited from the R4 subscriptions and we added name.</p>",
        "id": 185624725,
        "sender_full_name": "Eric Haas",
        "timestamp": 1579026768
    },
    {
        "content": "<p>I think what @nicola is asking for in the Bundle game comment is more that  a subscription type, but a whole heirarchy of types .... e.g subscription-event, subs-handshake | subs-heartbeat | subs-notification</p>",
        "id": 185625208,
        "sender_full_name": "Eric Haas",
        "timestamp": 1579027053
    },
    {
        "content": "<p>and I am not understand how bundleEnevtCount,  = batch notification if the notification is not empty.</p>",
        "id": 185625404,
        "sender_full_name": "Eric Haas",
        "timestamp": 1579027167
    },
    {
        "content": "<p>and @nicola asked for a \"event trigger code\"<br>\n in SubscriptionHeader</p>\n<blockquote>\n<p>I would like to see event name like 'created', 'updated', 'deleted' instead of parsing HTTP string</p>\n</blockquote>\n<p>is that something that is being considered?</p>",
        "id": 185625770,
        "sender_full_name": "Eric Haas",
        "timestamp": 1579027344
    },
    {
        "content": "<blockquote>\n<p>and I am not understand how bundleEventCount,  = batch notification if the notification is not empty.</p>\n</blockquote>\n<p>The issue we discovered was if you have <code>Subscription.channel.payload.content</code> set to <code>empty</code>, there are no contents to index from.  So, a bundle representing a single event and one batched to include 10 would look identical.  Adding the field <code>bundleEventCount</code> makes it so the server can communicate how many events are included in the notification, which clears that up.</p>\n<p>Edit: In the cases of <code>id-only</code> or <code>full-resource</code> payloads, batching is detectable without the <code>bundleEventCount</code> (since each entry would represent one notification), but the group felt the count was still useful in those cases.</p>\n<p>Edit #2: I'll also note that there has been discussion about how to describe server batching and/or responsibilities (e.g., if a server wants to batch per second, that's within general expectations - if a server wants to batch per day, that wouldn't be).  I don't think anything more concrete than \"yeah, that should be addressed\" has come out of it yet.</p>",
        "id": 185626007,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1579027465
    },
    {
        "content": "<blockquote>\n<p>and @nicola asked for a \"event trigger code\"<br>\n in SubscriptionHeader</p>\n<blockquote>\n<p>I would like to see event name like 'created', 'updated', 'deleted' instead of parsing HTTP string<br>\nis that something that is being considered?</p>\n</blockquote>\n</blockquote>\n<p>Right now, we have been assuming <code>Bundle.request.method</code> and <code>Bundle.response.status</code> can be used to clarify anything ambiguous from the topic.</p>\n<p>Re-reading, I guess the ask is for another field for specific FHIR interactions (e.g., update, patch, create, etc.)?  I'm not sure how I feel about that given how much discussion we're having about reducing the number of fields.</p>",
        "id": 185626709,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1579027898
    },
    {
        "content": "<blockquote>\n<p>and @nicola asked for a \"event trigger code\"<br>\n in SubscriptionHeader</p>\n<blockquote>\n<p>I would like to see event name like 'created', 'updated', 'deleted' instead of parsing HTTP string<br>\nis that something that is being considered?</p>\n</blockquote>\n</blockquote>\n<p>Splitting this up for my sanity (re: response codes above), there is a separate discussion (short, in the <a href=\"#narrow/stream/179229-subscriptions/topic/State.20Changes.20Blog\" title=\"#narrow/stream/179229-subscriptions/topic/State.20Changes.20Blog\">State Changes Blog</a> thread) about adding to triggers around this (for SubscriptionTopic definitions).</p>\n<p>Probably buried enough that I'll start a new thread about just that.</p>",
        "id": 185628411,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1579028839
    },
    {
        "content": "<p>Can we discuss extensibility on the channel type element? The current channel list is <code>rest-hook | websocket | email | message</code>. What additional channels would be considered as grounds for extensibility, and able to be added using the existing elements?</p>",
        "id": 185630270,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579029896
    },
    {
        "content": "<p>also, Subscription.channel.payload seems like a pointless element. we should collapse it's children into the parent</p>",
        "id": 185630321,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579029921
    },
    {
        "content": "<p>re: extensible channel types - we'll support Google Cloud Pub/Sub, the channel.endpoint is the pubsub topic. It's not a full URL, just a GCP resource path like \"projects/X/topics/Y\". There might be a similar pattern for Kafka and other message queues.</p>",
        "id": 185631217,
        "sender_full_name": "Paul Church",
        "timestamp": 1579030385
    },
    {
        "content": "<p>you'll have to define some scheme prefix for the GC Pub/sub</p>",
        "id": 185631400,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579030454
    },
    {
        "content": "<p>or put it in an extension</p>",
        "id": 185631625,
        "sender_full_name": "Paul Church",
        "timestamp": 1579030569
    },
    {
        "content": "<p>... maybe. but it's surprising that it doesn't already have a scheme to me</p>",
        "id": 185631859,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579030707
    },
    {
        "content": "<blockquote>\n<p>Can we discuss extensibility on the channel type element? The current channel list is <code>rest-hook | websocket | email | message</code>. What additional channels would be considered as grounds for extensibility, and able to be added using the existing elements?</p>\n</blockquote>\n<p>Off the bat, I can see something like a message-queue channel (for reliable delivery on servers that want to support it).  Similarly, things like Azure Event Hub (or their AWS or GCP equivalents) would be useful to people building on those platforms.</p>\n<p>In most of the cases people have discussed with me, the fields we have are good for the base but they will probably need an extension or two (e.g., a public key, etc.).</p>",
        "id": 185631867,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1579030715
    },
    {
        "content": "<blockquote>\n<p>also, Subscription.channel.payload seems like a pointless element. we should collapse it's children into the parent</p>\n</blockquote>\n<p>Works for me.</p>",
        "id": 185631948,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1579030770
    },
    {
        "content": "<p>(re: type extensibility) Or, are you suggesting changing<code>Subscription.channel.type</code> to <code>Coding</code>?</p>",
        "id": 185632265,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1579030986
    },
    {
        "content": "<p>Hmm, I guess it's just <a href=\"https://pubsub.googleapis.com/v1/projects/X/topics/Y\" target=\"_blank\" title=\"https://pubsub.googleapis.com/v1/projects/X/topics/Y\">https://pubsub.googleapis.com/v1/projects/X/topics/Y</a>.</p>",
        "id": 185632279,
        "sender_full_name": "Paul Church",
        "timestamp": 1579030998
    },
    {
        "content": "<p>there's 4 ways to handle channel:</p>\n<ul>\n<li>not to be extensible (my preference but I can see that won't win)</li>\n<li>to make it a <code>code</code> and use some external system (a la mime type)</li>\n<li>make it a coding and define our own codes </li>\n<li>make it a CodeableConcept (worst option)</li>\n</ul>",
        "id": 185632677,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579031223
    },
    {
        "content": "<p>is there a vocabulary from some other external rfc on this matter?</p>",
        "id": 185632693,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579031234
    },
    {
        "content": "<blockquote>\n<p>What additional channels would be considered as grounds for extensibility,</p>\n</blockquote>\n<p>We've also discussed messaging systems like kafka, and additional web standards like Server-Sent Events.</p>",
        "id": 185632725,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579031255
    },
    {
        "content": "<p>I think it really should be extensible. Honestly I think our approach to MIME is not super great, because it makes validation harder. <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> do you prefer <code>code</code> (extensible) to <code>coding</code>? If so, why?</p>",
        "id": 185632838,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579031310
    },
    {
        "content": "<p>I don't know of any relevant pre-existing vocabularies.</p>",
        "id": 185632859,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579031322
    },
    {
        "content": "<p>(other than <a href=\"http://hl7.org/fhir/subscription-channel-type\" target=\"_blank\" title=\"http://hl7.org/fhir/subscription-channel-type\">http://hl7.org/fhir/subscription-channel-type</a> ;-))</p>",
        "id": 185632884,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579031341
    },
    {
        "content": "<p>I can't find any RFC that matches... the closest thing I can think of is URL protocols, but there would be collisions (in this thread already from rest-hook to GC pub/sub).</p>",
        "id": 185633048,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1579031414
    },
    {
        "content": "<blockquote>\n<p>our approach to MIME is not super great, because it makes validation harde</p>\n</blockquote>\n<p>hmm. in what respect? I'm thinking about that and not sure how</p>",
        "id": 185633156,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579031507
    },
    {
        "content": "<blockquote>\n<p>do you prefer code (extensible) to coding</p>\n</blockquote>\n<p>I prefer code over Coding when there's an existing grammar from an RFC to use that saves us from doing definitions, yes. I don't prefer code over coding if we're going to do the definitions</p>",
        "id": 185633252,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579031554
    },
    {
        "content": "<p>Re: MIME, I just mean that we publish valuests for MIME types liek: <a href=\"http://hl7.org/fhir/valueset-mimetypes.html\" target=\"_blank\" title=\"http://hl7.org/fhir/valueset-mimetypes.html\">http://hl7.org/fhir/valueset-mimetypes.html</a>, which leads to:</p>\n<p><a href=\"/user_uploads/10155/n-_AtsSwyt90K3ugYjPF2Jsd/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/n-_AtsSwyt90K3ugYjPF2Jsd/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/n-_AtsSwyt90K3ugYjPF2Jsd/pasted_image.png\"></a></div>",
        "id": 185633593,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579031754
    },
    {
        "content": "<p>This causes developers not to do as much validation as they might if an off-the-shelf valuset was bound to these fields (like we'd presumably want to do for channel types).</p>",
        "id": 185633708,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579031810
    },
    {
        "content": "<p>from a methodology view point, we could specify a listed set, but mime types don't actually work like that</p>",
        "id": 185633885,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579031903
    },
    {
        "content": "<p>I agree, and FHIR's approach to MIME types isn't the wrong call. I'm just saying it's a pain point for developers; I wouldn't want to cause that pain for channel types if we can reasonably avoid it.</p>",
        "id": 185633963,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1579031977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> explicit timeout is important because otherwise, the server wants to set a timeout, but it does not know which. If it's small - the client may have problems, if it's too long - the server spends resources. It's definitely \"recommended by client\" timeout which server can override.</p>",
        "id": 185685746,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1579084357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span> Yes, that is what I ended up with in my notes.  I don't necessarily agree in practice - from the server side I have a timeout for HTTP connections and I would not change it based on what a client requests.  But, I can see the general usefulness and agree that other people are nicer than me  :-)</p>",
        "id": 185712138,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1579104349
    },
    {
        "content": "<p>Can we flatten out Subscription even more,  why do we need channel object.  its all max = 1 so could these all be first class elements :<br>\n...<br>\nchannelType (codeable)<br>\nendpoint<br>\netc<br>\n...</p>",
        "id": 188584416,
        "sender_full_name": "Eric Haas",
        "timestamp": 1582145742
    },
    {
        "content": "<p>Looks like it works.</p>\n<ul>\n<li>Pro: simpler</li>\n<li>Con: loses logical grouping</li>\n</ul>\n<p>Any strong feelings?</p>",
        "id": 188585254,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1582146359
    },
    {
        "content": "<p>I actually like the backbone element that gives logical grouping.</p>",
        "id": 188595568,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1582153541
    },
    {
        "content": "<p>General recommendation in FHIR resource design is to not use grouping unless:</p>\n<ul>\n<li>the group repeats</li>\n<li>it makes sense to mark the group as optional or required as a collection</li>\n<li>the group represents a logical context for extensions</li>\n</ul>",
        "id": 188597286,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1582155409
    },
    {
        "content": "<p>(though I don't think that last bullet is actually written down anywhere...)</p>",
        "id": 188597293,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1582155423
    },
    {
        "content": "<p>second bullet makes no sense to me.  </p>\n<p>group 0..1 and all children 1..1<br>\ngroup 1..1 and all children 0..1 </p>\n<p>?</p>",
        "id": 188598180,
        "sender_full_name": "Eric Haas",
        "timestamp": 1582156287
    },
    {
        "content": "<p>Second bullet doesn't place cardinality constraints on the children, it just says that it makes sense to turn them on or off as a group.  E.g. CapabilityStatement.software - none of the elements are mandatory, but it does make sense to turn them off as a group if you're dealing with an IG-level CapabilityStatement.</p>",
        "id": 188599343,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1582157409
    },
    {
        "content": "<p>If we wound up getting rid of the grouping, we would probably need to push the name \"channel\" down from the grouping level into a prefix for each of the individual property names.</p>",
        "id": 188607382,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1582169066
    },
    {
        "content": "<p>I think the grouping is actually pretty useful.</p>",
        "id": 188607383,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1582169073
    },
    {
        "content": "<p>I only see channelType as being necessary everything else could stay the same since your context is that channel type.   There is no functional reason for nesting only to make it pretty and neat from a modeling perspective.   Its a pretty simple resource so I think is make it look more complex than it is</p>",
        "id": 188609713,
        "sender_full_name": "Eric Haas",
        "timestamp": 1582173296
    },
    {
        "content": "<p>Agreed there is no functional reason for nesting.</p>",
        "id": 188611037,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1582175602
    },
    {
        "content": "<p>Looking back through all the subelement names, I think I agree that channel type is the only really critical one to include the word \"channel\" in. So I think you've convinced me :-)</p>",
        "id": 188611100,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1582175712
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/m42QPKxaJKaiqbDHWl9OEqqr/darth-vader-nooooo.jpg\" target=\"_blank\" title=\"darth-vader-nooooo.jpg\">darth-vader-nooooo.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/m42QPKxaJKaiqbDHWl9OEqqr/darth-vader-nooooo.jpg\" target=\"_blank\" title=\"darth-vader-nooooo.jpg\"><img src=\"/user_uploads/10155/m42QPKxaJKaiqbDHWl9OEqqr/darth-vader-nooooo.jpg\"></a></div>",
        "id": 189235295,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1582824618
    },
    {
        "content": "<p>Ok fine <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 189235311,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1582824634
    }
]