[
    {
        "content": "<p>I am about to release a new version of the Java validator which contains a significant bug fix:</p>\n<p>If a profile specifies a fixed value, and it had a null for any element in the fixed value (in the profile), then the validator would ignore any provided value for the specified element in any instances that were supposed to conform to the profile. </p>\n<p>Note that it's not valid, if you have a fixed value, and it has a null, for the instance not to have null, but this wasn't being checked. It will be now. Resources previously wrongly validating ok will now be picked up as an error</p>",
        "id": 172009761,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564468671
    },
    {
        "content": "<p>I find these kind of bugs in my validator to be some of the worst.  Fixing them is really a breaking change, and requires a major version update of the library - but still people may find that hundreds or thousands of entries in their database are now invalid.  So far, whenever I have tried to tighten up validation like this, I had so much pushback, that I had to add another option in the settings to disable the checks again.  I know this will not help interop, but I understand the practicalities for my users.   I wonder what others think on how to deal with these kind of issues.....</p>",
        "id": 173017196,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1565611100
    },
    {
        "content": "<p>It's a tough thing. <a href=\"https://doc.rust-lang.org/edition-guide/editions/index.html#compatibility\" target=\"_blank\" title=\"https://doc.rust-lang.org/edition-guide/editions/index.html#compatibility\">https://doc.rust-lang.org/edition-guide/editions/index.html#compatibility</a> is one example of a model where users (in their case: library authors) explicitly options in to a specific edition of the language, but each new compiler release supports all editions.</p>",
        "id": 173020249,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1565614420
    },
    {
        "content": "<p>In FHIR validation terms, this is basically like producing a validator that supports all previous behaviors, so a piece of software using this validator can validate at different levels In different contexts. To take your example <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> , they may opt into older rules when validating historical database entries, but opt into the newest rules when processing new resources to be stored in the database.</p>",
        "id": 173020315,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1565614457
    },
    {
        "content": "<p>Er, moving this discussion to <a class=\"stream\" data-stream-id=\"179166\" href=\"/#narrow/stream/179166-implementers\">#implementers</a></p>",
        "id": 173020338,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1565614488
    },
    {
        "content": "<p>Well, I am yet again releasing a validator with significant bug fixes:</p>\n<ul>\n<li>I found that my fixed value fix from before was not always effective (false postives)</li>\n<li>pattern matching wasn't really working (false negatives and false positives)</li>\n<li>Invariants on elements other than the root resource weren't being checked (false positives)</li>\n</ul>\n<p>(where false positive = falsely calling a resource ok)</p>",
        "id": 182155899,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575012128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Does the validator support the feature of comparing two profiles, as you demonstrated at the last WG meeting? Is there code in there capable of merging two StructureDefinitions to create another explicit StructureDefinition with the combined constraints (e.g., intersection of cardinality)?</p>",
        "id": 182665098,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1575557048
    },
    {
        "content": "<p>follow up here: <a href=\"#narrow/stream/179177-conformance/topic/New.20Validator.20Release.20with.20Significant.20Bug.20Fix\" title=\"#narrow/stream/179177-conformance/topic/New.20Validator.20Release.20with.20Significant.20Bug.20Fix\">https://chat.fhir.org/#narrow/stream/179177-conformance/topic/New.20Validator.20Release.20with.20Significant.20Bug.20Fix</a></p>",
        "id": 182686244,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575569365
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 182713074,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1575586023
    },
    {
        "content": "<p>yes please do not ask questions like this in Announcements. Ask on <a class=\"stream\" data-stream-id=\"179252\" href=\"/#narrow/stream/179252-IG-creation\">#IG creation</a></p>",
        "id": 182713315,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575586230
    },
    {
        "content": "<p>Yet another announcement of a significant bug fix in the validator: for properties that have a primitive type which are a list, it has not been checking that the JsonElement is an array. E.g. for Resource.meta.profile, which is a string with <code>cardinality 0..*</code>, the right format is this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;resourceType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;XX&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;meta&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;profile&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;YY&quot;</span><span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n</pre></div>\n\n\n<p>but the validator has also been accepting this as valid:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;resourceType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;XX&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;meta&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;profile&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;YY&quot;</span>\n  <span class=\"p\">},</span>\n</pre></div>\n\n\n<p>This is true for <em>all</em> properties, not just Meta.profile. The next release of the validator fixes this, and it will now flag this as an error</p>",
        "id": 189932020,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583527405
    },
    {
        "content": "<p>I expect the next version to be released sometime in the next 48 hours</p>",
        "id": 189932144,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583527470
    }
]