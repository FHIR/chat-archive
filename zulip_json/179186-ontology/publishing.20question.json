[
    {
        "content": "<p>ok, back to the question of where to publish this. Publishing the RDF form in a different specification will be a problem because as time passes, we will do one of two things: we will see the ontology of FHIR as a peripheral thing that isn't really important, or we will have to release a new version of the ontology details every time we release a new version of FHIR - which is 3 times a year.</p>",
        "id": 153817946,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458848579
    },
    {
        "content": "<p>I strongly believe that either of those is a mistake</p>",
        "id": 153817947,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458848600
    },
    {
        "content": "<p>and that the ontology should be a core thing of FHIR</p>",
        "id": 153817948,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458848631
    },
    {
        "content": "<p>hence, we should be working on bring rdf.html in the specification up to date. </p>",
        "id": 153817949,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458848660
    },
    {
        "content": "<p>so I think we should merge the content from <a href=\"http://w3c.github.io/hcls-fhir-rdf/spec/rdf.html\" target=\"_blank\" title=\"http://w3c.github.io/hcls-fhir-rdf/spec/rdf.html\">http://w3c.github.io/hcls-fhir-rdf/spec/rdf.html</a> into <a href=\"https://hl7-fhir.github.io/rdf.html\" target=\"_blank\" title=\"https://hl7-fhir.github.io/rdf.html\">https://hl7-fhir.github.io/rdf.html</a></p>",
        "id": 153817950,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458848717
    },
    {
        "content": "<p>Yes, we absolutely plan to merge it in.  We're just trying to get it to a more coherent state before doing so.  The content currently at <a href=\"http://w3c.github.io/hcls-fhir-rdf/spec/rdf.html\" target=\"_blank\" title=\"http://w3c.github.io/hcls-fhir-rdf/spec/rdf.html\">http://w3c.github.io/hcls-fhir-rdf/spec/rdf.html</a>  was merely copied wholesale from Tony Mallia's \"Side by Side\" document (as a placeholder), which is not the content that it should have.  Eric is now doing major editing on it to bring it closer to being mergeable with the page at <a href=\"https://hl7-fhir.github.io/rdf.html\" target=\"_blank\" title=\"https://hl7-fhir.github.io/rdf.html\">https://hl7-fhir.github.io/rdf.html</a> .</p>",
        "id": 153817963,
        "sender_full_name": "David Booth",
        "timestamp": 1458857058
    },
    {
        "content": "<p>Ok. What's the timeline? I have a freeze on 5 days time. If I can merge the content in before that, we'll have something solid to test to - the Montreal connectathon version</p>",
        "id": 153817993,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458861444
    },
    {
        "content": "<p>we could run a mini rdf connectathon </p>",
        "id": 153817994,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458861458
    },
    {
        "content": "<p>Eric said on Tuesday that he wanted a week to work on it.  Your freeze sounds like a good forcing function.  :)  We'll have to check with Eric to see if that's doable.</p>",
        "id": 153817997,
        "sender_full_name": "David Booth",
        "timestamp": 1458861566
    },
    {
        "content": "<p>Ok. Cool</p>",
        "id": 153817999,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458861640
    },
    {
        "content": "<p>I hope I can join the turtle connecthathon!</p>",
        "id": 153818086,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458920452
    },
    {
        "content": "<p>Hi gang, I'm overhauling <a href=\"http://w3c.github.io/hcls-fhir-rdf/spec/rdf\" target=\"_blank\" title=\"http://w3c.github.io/hcls-fhir-rdf/spec/rdf\">http://w3c.github.io/hcls-fhir-rdf/spec/rdf</a>  which is currently  based on the XML rather than structure definitions or their html representation, logical tables.</p>",
        "id": 153818489,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459200190
    },
    {
        "content": "<p>using the logical tables would be better</p>",
        "id": 153818491,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459200239
    },
    {
        "content": "<p>that was my intuition</p>",
        "id": 153818492,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459200259
    },
    {
        "content": "<p>i've been using logical tables in examples and vocabulary (name, path) from structure definitions</p>",
        "id": 153818495,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459200313
    },
    {
        "content": "<p>what are the corresponding documents for XML or JSON? how formally does one map from logical structure to format-specific structure? </p>",
        "id": 153818496,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459200347
    },
    {
        "content": "<p><a href=\"http://hl7-fhir.github.io/xml.html\" target=\"_blank\" title=\"http://hl7-fhir.github.io/xml.html\">http://hl7-fhir.github.io/xml.html</a> and <a href=\"http://hl7-fhir.github.io/json.html\" target=\"_blank\" title=\"http://hl7-fhir.github.io/json.html\">http://hl7-fhir.github.io/json.html</a> so the mapping</p>",
        "id": 153818499,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459200846
    },
    {
        "content": "<p>is there anything which says that e.g. a BackboneElement begets an XML element with the tag name coming from the last segement of the path, and that new elements is the parent element for everything with a path equal to that path plus one more segment?</p>",
        "id": 153818517,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459201582
    },
    {
        "content": "<p>umm, what? </p>",
        "id": 153818518,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459201611
    },
    {
        "content": "<p>e.g. MedicationOrder.dosageInstruction -&gt; &lt;dosageInstruction&gt;&lt;text&gt;...&lt;/text&gt;&lt;timing&gt;...&lt;/timing&gt;...</p>",
        "id": 153818520,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459201675
    },
    {
        "content": "<p>we see MedicationOrder.dosageInstruction and we guess from the examples that the XML representation of that is an element with the name &lt;dosageInstruction/&gt;, but is that stated?</p>",
        "id": 153818521,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459201742
    },
    {
        "content": "<p>Is there a defined relationship between \"Element Name\" and \"Path\". Kind of touches on this <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9421&amp;start=0\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9421&amp;start=0\">http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9421&amp;start=0</a></p>",
        "id": 153818522,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1459201800
    },
    {
        "content": "<p>yeah, that's the sort of specification i'm looking to emulate in the RDF</p>",
        "id": 153818523,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459201927
    },
    {
        "content": "<p>i'll look back here in the AM. gonna lay this jet-lagged body on the slab for a few hours.</p>",
        "id": 153818524,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459201990
    },
    {
        "content": "<p>well, the path is constructed from the element names. I'm not quite sure what you're asking</p>",
        "id": 153818525,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459202029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, there appear to be n rules for representing data in XML</p>\n<p>* start with a resource structure defn R<br>\n  * type2struct = map from type to profile structure defn # \"CodeableConcept\" -&gt; [@resourceType=\"StructureDefinition\",name=\"CodeableConcept\"]/snapshot/element<br>\n  * curElement = XML element with the Resource name # MedicationOrder<br>\n  * for each element in R/snapshot/element, curElement.appendChild(<a href=\"http://D.name\" target=\"_blank\" title=\"http://D.name\">D.name</a>)<br>\n  ** if (D.type includes BackboneElement) .. # Observation.referenceRange<br>\n  ** if (D.type includes type T and T in type2struct ... # Observation.code<br>\n  ** if (D.type includes type \"code\" ... # Observation.status<br>\n  ...<br>\nThis sort of spec clarifies a bunch of stuff we otherwise guess at:</p>\n<p>* iterate across snapshot/element vs. differential/element<br>\n  * names like T[x] do not appear in the payload, instead their nested choices do.<br>\netc</p>",
        "id": 153818663,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459233005
    },
    {
        "content": "<p>all the rules that we've ever needed are here: </p>",
        "id": 153818664,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459233164
    },
    {
        "content": "<p><a href=\"http://hl7-fhir.github.io/xml.html\" target=\"_blank\" title=\"http://hl7-fhir.github.io/xml.html\">http://hl7-fhir.github.io/xml.html</a></p>",
        "id": 153818665,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459233201
    },
    {
        "content": "<p>I'm not understanding what you're missing, or why it's so complex</p>",
        "id": 153818666,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459233214
    },
    {
        "content": "<p>how does this tell me what to do with asNeeded[x]?</p>",
        "id": 153818674,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459235564
    },
    {
        "content": "<p>(I believe i know what to do because the 7th example down includes asNeededBoolean, which indicates that forms like &lt;nameB[x]&gt; don't include the [x] but instead include one of the choices of element name, but that takes some digging and isn't explicit.)</p>",
        "id": 153818675,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459235683
    },
    {
        "content": "<p>one can use name similarity to guess the relationship with the data model as expressed in structure definitions or logical tables</p>",
        "id": 153818676,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459235855
    },
    {
        "content": "<p>but sooner or later, folks will want an explicit binding between the data model and the serializations</p>",
        "id": 153818677,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459235914
    },
    {
        "content": "<p>you know, I'm sure those sentences used to explicitly say what to do with [x]. how can they not? </p>",
        "id": 153818678,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459235990
    },
    {
        "content": "<p>because it's here: <a href=\"http://hl7-fhir.github.io/formats.html#choice\" target=\"_blank\" title=\"http://hl7-fhir.github.io/formats.html#choice\">http://hl7-fhir.github.io/formats.html#choice</a></p>",
        "id": 153818679,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459236031
    },
    {
        "content": "<p>i'm trying to figure out what that tells the person reading the XML doc.</p>",
        "id": 153818680,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459236527
    },
    {
        "content": "<p>i guess the interpretation is that the FHIR data model permits either MedicationOrder.asNeededBoolean or MedicationOrder.asNeededCodeableConcept , nothing called MedicationOrder.asNeeded[x]</p>",
        "id": 153818681,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459236620
    },
    {
        "content": "<p>that's one way to interpret-  an xs:choice. or you can treat it as polymorphic with constraints on the type </p>",
        "id": 153818682,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459236662
    },
    {
        "content": "<p>RDF, it's 2 properties with a choice rule </p>",
        "id": 153818683,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459236671
    },
    {
        "content": "<p>RDF isn't different from XML or JSON in this regard, right?</p>",
        "id": 153818684,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459236732
    },
    {
        "content": "<p>no</p>",
        "id": 153818686,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459236747
    },
    {
        "content": "<p>actually. hang on</p>",
        "id": 153818687,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459236773
    },
    {
        "content": "<p>fhir:Observation.value [<br>\n     a fhir:Quantity;</p>",
        "id": 153818688,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459236799
    },
    {
        "content": "<p>yes, it's different. We make it a single property and say it can have multiple types</p>",
        "id": 153818689,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459236816
    },
    {
        "content": "<p>is that delta from XML and JSON useful?</p>",
        "id": 153818690,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459236986
    },
    {
        "content": "<p>yes, I think it is. </p>",
        "id": 153818691,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459237093
    },
    {
        "content": "<p>so far the ITS/COI task force has said you only need a type arc on the resource; that the rest of the type arcs can be inferred from RDFS</p>",
        "id": 153818692,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459237137
    },
    {
        "content": "<p>none of that sentence made any sense to me</p>",
        "id": 153818693,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459237163
    },
    {
        "content": "<p>DiagnosticOrder.specimen and DiagnosticReport.specimen are the same thing and could easily be the same property.</p>",
        "id": 153818694,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459237359
    },
    {
        "content": "<p>There are a whole lot of properties in different resources that could be considered to be the same property, but the current authoring mechanism doesn't capture that info. Lloyd said he'd like to extend that in the future. We can use the same mechanism to say that asNeededBoolean and asNeeded are subproperties of asNeeded.</p>",
        "id": 153818695,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459237415
    },
    {
        "content": "<p>DiagnosticOrder.specimen and DiagnosticReport.specimen - maybe, but there's no way to know that, even in principle, that's a hard thing to determine, unless we tie their definitions together. which the tooling exists to do, but hasn't been done</p>",
        "id": 153818698,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459241145
    },
    {
        "content": "<p>I'm not familiar with the notion of sub-property</p>",
        "id": 153818699,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459241170
    },
    {
        "content": "<p>the notion that it's better to have a single property rather than a choice of multiple properties.... I guess it's a question of how easy it is to select between different properties</p>",
        "id": 153818702,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459242783
    },
    {
        "content": "<p>as it is, if you want to know whether an observation has a value, it's a queery for whether there's a value. but if you go for multiple properties, then it's multiple queries. </p>",
        "id": 153818703,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459242834
    },
    {
        "content": "<p>how could you capture that currently and would it be sufficient to make ontological assertions, such as A samePropertyAs B or A subPropertyOf C. B subPropertyOf C?</p>",
        "id": 153818704,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459242838
    },
    {
        "content": "<p>I kind of figured that sparql the balance was weighted to  single property with types. </p>",
        "id": 153818705,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459242856
    },
    {
        "content": "<p>but how does json-ld handle poly-morphism? I bet it doesn't...</p>",
        "id": 153818706,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459242868
    },
    {
        "content": "<p>what's a sub-property?</p>",
        "id": 153818707,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459242880
    },
    {
        "content": "<p>not really, you end up doing a bit of extra writing with the same property</p>",
        "id": 153818708,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459242890
    },
    {
        "content": "<p>Pchild rdfs:subPropertyOf Pparent means if (X Pchild Y) then X Pparent Y<br>\nx:hasMother rdfs:subPropertyOf x:hasParent + X x:hasMother Y =&gt; X x:hasParent Y</p>",
        "id": 153818710,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459243081
    },
    {
        "content": "<p>ontologists prefer generic properties; SPARQL queries are a little easier with specific properties (saves a little typing). ultimately, i prefer using MedicationOrder.asNeededBoolean because it's less of a cognitive burden to translate between formats</p>",
        "id": 153818711,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459243457
    },
    {
        "content": "<p>and it's how we've been doing it so far so everyone's bought into having discriminating properties</p>",
        "id": 153818712,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459243541
    },
    {
        "content": "<p>it's a worry when searching for 'json polymorphism' leads you to your own blog</p>",
        "id": 153818713,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459243562
    },
    {
        "content": "<p>doncha hate finding out you're the expert?</p>",
        "id": 153818714,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459243589
    },
    {
        "content": "<p>umm, I'm not the expert </p>",
        "id": 153818715,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459243604
    },
    {
        "content": "<p>anyway, since json-ld doesn't do polymorphic types, we shouldn't do them in rdf either</p>",
        "id": 153818716,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459243631
    },
    {
        "content": "<p>JSON doesn't have polymorphic types, but JSON-LD does</p>",
        "id": 153818718,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459243881
    },
    {
        "content": "<p>how?</p>",
        "id": 153818719,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459243902
    },
    {
        "content": "<p>JSON-LD is just an RDF format. you can stick whatever inference you want on top.</p>",
        "id": 153818720,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459243946
    },
    {
        "content": "<p>I think it's not quite so simple. </p>",
        "id": 153818721,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459243969
    },
    {
        "content": "<p>how would you do a polymorphic type in json-ld?</p>",
        "id": 153818722,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459243981
    },
    {
        "content": "<p>it's exactly the same as in Turtle or OWL Manchester syntax or whatever.</p>",
        "id": 153818723,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459244021
    },
    {
        "content": "<p>people don't tend to write ontologies in json-ld but they certainly could. typically, instance data is separate from the ontology/schema/whatever you want to call it.</p>",
        "id": 153818724,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459244109
    },
    {
        "content": "<p>I thinky you'll find that there isn't a way to do polymoprhism in json-ld. In spite of what you say about this </p>",
        "id": 153818725,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459244136
    },
    {
        "content": "<p>because it's not actually the same in the specific syntax </p>",
        "id": 153818726,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459244157
    },
    {
        "content": "<p>if i'm feeding data to e.g. StarDog or GraphDB, i feed it the schema and some data and start doing queries. it doesn't matter whether that data came in as Turtle or JSON-LD.</p>",
        "id": 153818727,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459244296
    },
    {
        "content": "<p>no. but that means that json-ld is a subset of rdf, not that json-ld does everything rdf does</p>",
        "id": 153818728,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459244323
    },
    {
        "content": "<p>once you parse JSON-LD into RDF, there's no way the graph even knows it came from JSON-LD</p>",
        "id": 153818729,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459244357
    },
    {
        "content": "<p>so?</p>",
        "id": 153818731,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459244380
    },
    {
        "content": "<p>none of Turtle, RDF/XML, JSON-LD, RDFa do any inference. they're just parsers. the inference is orthogonal. once it's a graph, you can do RDFS or OWL reasoning but the origin format of that graph doesn't matter.</p>",
        "id": 153818732,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459244529
    },
    {
        "content": "<p>so?</p>",
        "id": 153818734,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459244603
    },
    {
        "content": "<p>i thought you were arguing that we couldn't benefit from subPropertyOf inferences in JSON-LD</p>",
        "id": 153818744,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459246186
    },
    {
        "content": "<p>I'm not sure whether you can do subPropertyOf in json-ld</p>",
        "id": 153818745,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459246221
    },
    {
        "content": "<p>what I was saying is that I'm sure that you can't have one property that can have different types in json</p>",
        "id": 153818747,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459246295
    },
    {
        "content": "<p>I mean, json-ld</p>",
        "id": 153818748,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459246311
    },
    {
        "content": "<p>i disagree, but i'm happy to disagree because i think we are both concluding that we want to use MedicationOrder.asNeededBoolean instead of MedicationOrder.asNeeded</p>",
        "id": 153818749,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459246407
    },
    {
        "content": "<p>happy to agree to disagree</p>",
        "id": 153818750,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459246416
    },
    {
        "content": "<p>I'm happy to be educated...</p>",
        "id": 153818751,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459246557
    },
    {
        "content": "<p>Looking at the last message from Eric... Do I see it right that we are aligning xml/json and rdf now? So we will add the typename to the propertyname?</p>",
        "id": 153818752,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1459246610
    },
    {
        "content": "<p>for the ones that end in [x] yes</p>",
        "id": 153818753,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459246624
    },
    {
        "content": "<p>that's my goal</p>",
        "id": 153818754,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459246625
    },
    {
        "content": "<p>it sounds like it </p>",
        "id": 153818755,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459246627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> re property with different types, i'll describe a bit of what you can/can't do and what's nice/non nice in OWL in a couple hours. gonna try to sleep a bit so i can keep my timezone in flux for the two days i'll be in europe.</p>",
        "id": 153818756,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459246737
    },
    {
        "content": "<p>ok</p>",
        "id": 153818757,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459246863
    },
    {
        "content": "<p>ok, committed an update to the rdf format - should be up on the site in 40min</p>",
        "id": 153818762,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459250869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> What did you update? Are you talking about <a href=\"https://hl7-fhir.github.io/rdf.html\" target=\"_blank\" title=\"https://hl7-fhir.github.io/rdf.html\">https://hl7-fhir.github.io/rdf.html</a>?</p>",
        "id": 153818800,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1459260895
    },
    {
        "content": "<p>i think he updated examples</p>",
        "id": 153818801,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459260914
    },
    {
        "content": "<p>(guessing -- didn't verify)</p>",
        "id": 153818803,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459260934
    },
    {
        "content": "<p>yes</p>",
        "id": 153818910,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459275505
    },
    {
        "content": "<p>Ok. Thanks. Have you had a chance to look at my generated ttl?</p>",
        "id": 153818945,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1459286533
    },
    {
        "content": "<p>not yet. too much going on</p>",
        "id": 153818946,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459286551
    },
    {
        "content": "<p>Nop problem. Was just curious. Have to do some changes per above discussion still</p>",
        "id": 153818947,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1459286594
    },
    {
        "content": "<p>michael, want to join the FHIR RDF call now?  Tuesdays 5:00pm Eastern US (Boston) time zone<br>\nWebex: <a href=\"https://mit.webex.com/mit/j.php?MTID=m5cd1bd8bb36825b9c4b369fd664bbb62\" target=\"_blank\" title=\"https://mit.webex.com/mit/j.php?MTID=m5cd1bd8bb36825b9c4b369fd664bbb62\">https://mit.webex.com/mit/j.php?MTID=m5cd1bd8bb36825b9c4b369fd664bbb62</a><br>\nTeleconference: +1-617-324-0000 Access code: 645 777 110<br>\nMeeting password: 4257 (\"HCLS\")<br>\nIRC: <a href=\"http://irc.w3.org\" target=\"_blank\" title=\"http://irc.w3.org\">irc.w3.org</a> port 6665 channel #HCLS </p>",
        "id": 153818948,
        "sender_full_name": "David Booth",
        "timestamp": 1459286610
    },
    {
        "content": "<p>Sorry. Getting ready to go to bed now (almost midnight here). Will join sometime.</p>",
        "id": 153818949,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1459286655
    },
    {
        "content": "<p>ok :)</p>",
        "id": 153818950,
        "sender_full_name": "David Booth",
        "timestamp": 1459286685
    },
    {
        "content": "<p>Quickly looked at the example. <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Why is the \"a fhir:Quantity\" removed with e.g. Observation.valueQuantity?</p>",
        "id": 153818951,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1459286778
    },
    {
        "content": "<p>TTYL</p>",
        "id": 153818952,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1459286781
    },
    {
        "content": "<p>because we changed to use valueQuantity instead of just value </p>",
        "id": 153818953,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459286803
    },
    {
        "content": "<p>we no longer need to say what the type of it is</p>",
        "id": 153818954,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459286815
    }
]