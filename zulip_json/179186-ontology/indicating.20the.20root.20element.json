[
    {
        "content": "<p>On today's call we re-visited fhir:resourceType and discussed how we could indicate the root node:<br>\n<a href=\"https://www.w3.org/2016/03/22-hcls-minutes.html#item03\" target=\"_blank\" title=\"https://www.w3.org/2016/03/22-hcls-minutes.html#item03\">https://www.w3.org/2016/03/22-hcls-minutes.html#item03</a></p>",
        "id": 153817511,
        "sender_full_name": "David Booth",
        "timestamp": 1458701886
    },
    {
        "content": "<p>I had hoped to join the call, but was otherwise detained. </p>",
        "id": 153817512,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458701973
    },
    {
        "content": "<p>that doesn't seem conclusive...?</p>",
        "id": 153817513,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458701980
    },
    {
        "content": "<p>but I did miss the difference between resourceType and rdf:type. I agree that there's no need for resourceType in turtle - which is why it's not a good name - I agree with fhir:root or fhir:entryPoint or something. the real semantics of the entry point are about focus/focal, so maybe that's what it should be?</p>",
        "id": 153817517,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458704271
    },
    {
        "content": "<p>We have resource definitions that have a root, but we also have instances that have a root. Is that actually the same thing?</p>",
        "id": 153817559,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458721236
    },
    {
        "content": "<p>not the same thing</p>",
        "id": 153817560,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458721323
    },
    {
        "content": "<p>So is fhir:root for the definition or the instance?</p>",
        "id": 153817561,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458721383
    },
    {
        "content": "<p>well, actually, it depends what you are asking. Which definition? you know that there's 2 different definitions, right? </p>",
        "id": 153817562,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458721411
    },
    {
        "content": "<p>are you asking about fhir.ttl? </p>",
        "id": 153817563,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458721415
    },
    {
        "content": "<p>I am working on the instance data, so at the present not fhir.ttl.</p>",
        "id": 153817564,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458721454
    },
    {
        "content": "<p>so what definition are you referring to then?</p>",
        "id": 153817565,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458721481
    },
    {
        "content": "<p>I assume there will be ttl for<br>\n1. the fhir core stuff <br>\n2. for resource definitions <br>\n3. ttl for actual data. <br>\nSo there is a definition e.g. Observation and an instance e.g. Bloodpressure for patient xyz.</p>",
        "id": 153817566,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458721587
    },
    {
        "content": "<p>I was wondering if we need a different way to express the root node for 1+2 and 3.</p>",
        "id": 153817567,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458721708
    },
    {
        "content": "<p>I'm shipping 1+2 together in fhir.ttl, but I'm not defining a single entry for that. it's just a collection of statements</p>",
        "id": 153817568,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458721742
    },
    {
        "content": "<p>But then you cannot do round trips for 1+2 to xml/json right?</p>",
        "id": 153817569,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458721765
    },
    {
        "content": "<p>the actual data references the relevant spot in the definitions</p>",
        "id": 153817570,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458721767
    },
    {
        "content": "<p>I'm not sure what you mean about round trips - you can round trip #3. #1 and #2 aren't round-trippable. It's a lossy transform to RDF</p>",
        "id": 153817571,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458721802
    },
    {
        "content": "<p>but there's no need to round trip 1+2</p>",
        "id": 153817572,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458721824
    },
    {
        "content": "<p>I can only round trip #3 if I know what the entry piont is.</p>",
        "id": 153817573,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458721829
    },
    {
        "content": "<p>though are you aware of the near/far form dichotomy</p>",
        "id": 153817574,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458721844
    },
    {
        "content": "<p>Ok. I get 1+2, it is just an observation.</p>",
        "id": 153817575,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458721854
    },
    {
        "content": "<p>What is \"dichotomy\" ?</p>",
        "id": 153817576,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458721867
    },
    {
        "content": "<p>but you don't need to know an entry point in #1 or #2 to round trip #3. in fact you don't need to know them at all to round trip from RDF and back. What you need to know about thme will be stated explicitly </p>",
        "id": 153817577,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458721896
    },
    {
        "content": "<p>dichotomy = choice of one or the other. sorry</p>",
        "id": 153817578,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458721917
    },
    {
        "content": "<p>N.P.</p>",
        "id": 153817579,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458721922
    },
    {
        "content": "<p>there's a few things you need to know about 1+2 to do #3, but we'll just say what they are explicitly in the documentation, so you don't need to look in #1 + #2 unless you want to reason</p>",
        "id": 153817580,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458721964
    },
    {
        "content": "<p>So we only need to know the entrypoint for #3. That is clear.</p>",
        "id": 153817581,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458721965
    },
    {
        "content": "<p>btw, #1 + #2 includes #1a - the RIM as an ontology </p>",
        "id": 153817582,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458721980
    },
    {
        "content": "<p>:-)</p>",
        "id": 153817583,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458721987
    },
    {
        "content": "<p>and kowing the entry point - we've agreed, pretty much, that  it's going to be a special property that you look for. (see discussion above and in David's link). All we need to agree on is an arbitrary URL with a useful name. I'm preferring 'focal-point' or something, but waiting to see what David says</p>",
        "id": 153817584,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458722055
    },
    {
        "content": "<p>Yes.</p>",
        "id": 153817585,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458722101
    },
    {
        "content": "<p>k. gotta go. hopefully we can nail this down in the next 12 hours </p>",
        "id": 153817586,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458722123
    },
    {
        "content": "<p>One more question. It is like fhir:index, right? We only need that because xml and json need it.</p>",
        "id": 153817587,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458722124
    },
    {
        "content": "<p>ttyl</p>",
        "id": 153817588,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458722131
    },
    {
        "content": "<p>no we need taht period. because the lists always have a stated order, and it's often meaningful</p>",
        "id": 153817589,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458722149
    },
    {
        "content": "<p>and that's the only way to know what it is in RDF </p>",
        "id": 153817590,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458722158
    },
    {
        "content": "<p>But rdf has ordered lists.</p>",
        "id": 153817591,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458722194
    },
    {
        "content": "<p><a href=\"https://www.w3.org/TR/rdf-schema/#ch_collectionvocab\" target=\"_blank\" title=\"https://www.w3.org/TR/rdf-schema/#ch_collectionvocab\">https://www.w3.org/TR/rdf-schema/#ch_collectionvocab</a></p>",
        "id": 153817592,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458722252
    },
    {
        "content": "<p>or in turtle: <a href=\"https://www.w3.org/TR/turtle/#object-lists\" target=\"_blank\" title=\"https://www.w3.org/TR/turtle/#object-lists\">https://www.w3.org/TR/turtle/#object-lists</a></p>",
        "id": 153817593,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458722302
    },
    {
        "content": "<p>Michael, RDF's order lists are woefully inconvenient to work with.  We explored various options <a href=\"https://goo.gl/DKcm0U\" target=\"_blank\" title=\"https://goo.gl/DKcm0U\">https://goo.gl/DKcm0U</a> and decided that fhir:index seemed like the best option.</p>",
        "id": 153817666,
        "sender_full_name": "David Booth",
        "timestamp": 1458745609
    },
    {
        "content": "<p>Grahame, that's correct that the discussion yesterday <a href=\"https://www.w3.org/2016/03/22-hcls-minutes.html#item03\" target=\"_blank\" title=\"https://www.w3.org/2016/03/22-hcls-minutes.html#item03\">https://www.w3.org/2016/03/22-hcls-minutes.html#item03</a> was not conclusive.  We agreed that we should not use fhir:resourceType to indicate the root node, because that serves a different purpose in JSON and would be too confusing.  We agreed that we should use rdf:type to indicate the type of the resource, but a *separate* property to indicate the root node.  But we did not yet agree on the property to use to indicate the root node.  The two proposals were ':myAllergyIntolerance fhir:rootNode true' or ':myAllergyIntolerance a fhir:RootNode'.  We did not feel like we had enough people on the call to make the choice.  </p>",
        "id": 153817667,
        "sender_full_name": "David Booth",
        "timestamp": 1458746109
    },
    {
        "content": "<p>fwiw I would vote for the property fhir:rootNode true</p>",
        "id": 153817691,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458752713
    },
    {
        "content": "<p>in what sense is it a 'root node'? To me, the definition is 'this concept is that one that is our focus in this concept' - e.g. it's the one we are sending you in response to your question for information about the patient. Always, these things are just windows into a wider graph of information about the world. You could do a series of queries and graduallly build up information about the context of inteest (say a patient) by aggregating the response you get into a single RDF graph. Whether something is the focus or not is about the exchange, not a property that has any meaning in the aggregated graph</p>",
        "id": 153817708,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458760152
    },
    {
        "content": "<p>Grahame, it is a 'root node' in the sense that if you round trip it to/from FHIR JSON or FHIR XML, it should appear as the root element of those serializations.  Its purpose is to enable round tripping.</p>",
        "id": 153817715,
        "sender_full_name": "David Booth",
        "timestamp": 1458760560
    },
    {
        "content": "<p>whatever we call it, you'd either need to strip it or ignore it in the aggregation, yes?</p>",
        "id": 153817720,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458760640
    },
    {
        "content": "<p>What do you mean by 'the aggregation'?</p>",
        "id": 153817723,
        "sender_full_name": "David Booth",
        "timestamp": 1458760665
    },
    {
        "content": "<p>if I'm doing a series of queries and adding all the responses together into a single RDF graph</p>",
        "id": 153817724,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458760700
    },
    {
        "content": "<p>Right, then you would just ignore it for RDF processing.  It's completely normal in RDF to ignore things that you don't care about.</p>",
        "id": 153817725,
        "sender_full_name": "David Booth",
        "timestamp": 1458760749
    },
    {
        "content": "<p>so should be a 'type' - I don't think so; it's not an inherent property of the object, it's a piece of information about how it is used</p>",
        "id": 153817727,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458760986
    },
    {
        "content": "<p>so  ':myAllergyIntolerance fhir:rootNode true' is right, and  ':myAllergyIntolerance  a fhir:RootNode' is not</p>",
        "id": 153817728,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458761022
    },
    {
        "content": "<p>I somewhat prefer the ':myAllergyIntolerance a fhir:RootNode' style, because it's briefer, but I don't have strong feelings either way.  At the end of the day they're very similar.</p>",
        "id": 153817730,
        "sender_full_name": "David Booth",
        "timestamp": 1458761147
    },
    {
        "content": "<p>so should we not \"a use owl:Ontology\"? It's not clear to me whether we should allow  it, require it, or ban it? </p>",
        "id": 153817732,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458761281
    },
    {
        "content": "<p>and if you want brief:<br>\n\"fhir:root true\"</p>",
        "id": 153817734,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458761316
    },
    {
        "content": "<p>AFAICT Tony's the only one who's been wanting it, and only because he's married to protege.  :)</p>",
        "id": 153817735,
        "sender_full_name": "David Booth",
        "timestamp": 1458761343
    },
    {
        "content": "<p>so that means not to require it. But leaves open ban vs allow. Does adding additional ontological mark up matter? is there a conformance issue around it? </p>",
        "id": 153817738,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458761426
    },
    {
        "content": "<p>But I think we're convincing him that putting owl:Ontology on RDF *instance* data is quite a peculiar thing to do.  Eric sent him an example yesterday of how to make protege work without it, and if Tony gets that to work then I think we can drop it.</p>",
        "id": 153817739,
        "sender_full_name": "David Booth",
        "timestamp": 1458761438
    },
    {
        "content": "<p>we should not ban it, but we also should not make any special efforts to round-trip it.</p>",
        "id": 153817743,
        "sender_full_name": "David Booth",
        "timestamp": 1458761532
    },
    {
        "content": "<p>ok. well, I just committed fhir:root true to the build. </p>",
        "id": 153817745,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458761565
    },
    {
        "content": "<p>:)</p>",
        "id": 153817746,
        "sender_full_name": "David Booth",
        "timestamp": 1458761578
    },
    {
        "content": "<p>but there's still some differences between the turtle I am generating and <span class=\"user-mention\" data-user-id=\"192267\">@Eric Prud'hommeaux</span>  is generating. I haven't seen Michael's turtle. </p>",
        "id": 153817750,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458761608
    },
    {
        "content": "<p>what difference should we work on next? </p>",
        "id": 153817751,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458761625
    },
    {
        "content": "<p>we should treat owl:Ontology the same as any other extra assertions that someone may include in their RDF: they're free to merge in any other triples they want in RDF, but they cannot expect those triples to be automagically serialized to FHIR JSON or XML.</p>",
        "id": 153817752,
        "sender_full_name": "David Booth",
        "timestamp": 1458761634
    },
    {
        "content": "<p>what are the other differences you're still seeing?</p>",
        "id": 153817753,
        "sender_full_name": "David Booth",
        "timestamp": 1458761664
    },
    {
        "content": "<p>k that makes sense. we should write that up</p>",
        "id": 153817754,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458761673
    },
    {
        "content": "<p>other differences - Eric is sometimes including the type on non-resource elements. it is not necessary. Is that allowed, required, prohibited?</p>",
        "id": 153817755,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458761814
    },
    {
        "content": "<p>Eric has this:  fhir:MedicationOrder.dateWritten  \"2000-11-21T15:00:00\"^^xsd:dateTime ;<br>\nI never generate the ^^xsd: bit. Why would we?</p>",
        "id": 153817756,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458761841
    },
    {
        "content": "<p>Allowed, and won't be round-tripped.</p>",
        "id": 153817757,
        "sender_full_name": "David Booth",
        "timestamp": 1458761850
    },
    {
        "content": "<p>other differences,. I think Eric has just not adjusted after our dsicussion</p>",
        "id": 153817758,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458761885
    },
    {
        "content": "<p>Regarding ^^xsd:dateTime, we discussed this a bit, but I don't think we came to resolution.  Looking for minutes ...</p>",
        "id": 153817760,
        "sender_full_name": "David Booth",
        "timestamp": 1458762393
    },
    {
        "content": "<p><a href=\"https://www.w3.org/2016/03/01-hcls-minutes.html#item06\" target=\"_blank\" title=\"https://www.w3.org/2016/03/01-hcls-minutes.html#item06\">https://www.w3.org/2016/03/01-hcls-minutes.html#item06</a>  Eric wants to use ^^xsd:dateTime , but there is some subtlety to that, and I'm not entirely comfortable with it.  The problem is that the FHIR type is a union of 4 types, and xsd:dateTime is only one of those possibilities.  This means that a FHIR XML/JSON --&gt; FHIR RDF translator would be burdened with attempting to parse the data as each one of those possibilities, and select the most detailed one that succeeds.  The benefit of this is that SPARQL queries are easier, because we are using standard types.  (The FHIR union is not a standard type to the RDF world.)</p>",
        "id": 153817769,
        "sender_full_name": "David Booth",
        "timestamp": 1458762924
    },
    {
        "content": "<p>so this is a specific date issue, then. </p>",
        "id": 153817772,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458763104
    },
    {
        "content": "<p>On further consideration, I think Eric's argument is pretty good, even though it does place that burden on the translator.  But better there than on all of the query authors.</p>",
        "id": 153817773,
        "sender_full_name": "David Booth",
        "timestamp": 1458763105
    },
    {
        "content": "<p>yes, unless FHIR has other union types, this is a date issue only.</p>",
        "id": 153817774,
        "sender_full_name": "David Booth",
        "timestamp": 1458763131
    },
    {
        "content": "<p>so you would have to use xsd:date or xsd:yearMonth etc depending on the instance? </p>",
        "id": 153817775,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458763166
    },
    {
        "content": "<p>exactly</p>",
        "id": 153817776,
        "sender_full_name": "David Booth",
        "timestamp": 1458763174
    },
    {
        "content": "<p>does RDF really not have a type that has flexible precision with regard to date? I find that hard to believe</p>",
        "id": 153817777,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458763183
    },
    {
        "content": "<p>RDF just uses the XSD types</p>",
        "id": 153817778,
        "sender_full_name": "David Booth",
        "timestamp": 1458763202
    },
    {
        "content": "<p>stinking XSD. It's my biggest problem - their hard ass approach to dates. Doesn't match the real world at all</p>",
        "id": 153817780,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458763249
    },
    {
        "content": "<p>But SPARQL does provide coercions between those types, which is why the SPARQL queries are easier using the standard XSD types.</p>",
        "id": 153817781,
        "sender_full_name": "David Booth",
        "timestamp": 1458763257
    },
    {
        "content": "<p>so If I was doing a sparql query against this, and my target elements had variable types, how does that work? </p>",
        "id": 153817782,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458763277
    },
    {
        "content": "<p>I'm not finding the dateTime coercion rules, so now I'm not sure whether it is a standard part of SPARQL or XSD or merely commonly implemented.  I think Eric may know.</p>",
        "id": 153817789,
        "sender_full_name": "David Booth",
        "timestamp": 1458764632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192267\">@Eric Prud'hommeaux</span> - please clarify</p>",
        "id": 153817791,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458764763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"grahame@healthintersections.com.au\">@Grahame Grieve</span> Ok. I will put up some examples and let you know were they are.</p>",
        "id": 153817914,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458814175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> here I will put my examples: <a href=\"https://app.box.com/s/pvuzghem0nswwq5hrnn1x4m44abjv6h9\" target=\"_blank\" title=\"https://app.box.com/s/pvuzghem0nswwq5hrnn1x4m44abjv6h9\">https://app.box.com/s/pvuzghem0nswwq5hrnn1x4m44abjv6h9</a>  There is one there now. It needs some work.<br>\n1. The name of the datatype is not right. 2. There is something different with the array. 3. Don't know why, but the used rdf api sorts the properties.</p>",
        "id": 153818142,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458935251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I updated my example on the link above. <br>\nI miss \"fhir:root\" property in your examples: <a href=\"https://hl7-fhir.github.io/observation-example-bloodpressure.ttl.html\" target=\"_blank\" title=\"https://hl7-fhir.github.io/observation-example-bloodpressure.ttl.html\">https://hl7-fhir.github.io/observation-example-bloodpressure.ttl.html</a>, but see fhir:nodeRole fhir:treeRoot;</p>",
        "id": 153819315,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1459408934
    },
    {
        "content": "<p>yes we changed that overnight! just as you catch up. you're behind again! - but we're frozen now</p>",
        "id": 153819319,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459410605
    },
    {
        "content": "<p>Excelent. I think there is a typo on the rdf page:<br>\n1.17.3.1.3 fhir:index \"[value]\"^^xs:type should be: fhir:*value* \"[value]\"^^xs:type</p>",
        "id": 153819435,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1459447438
    }
]