[
    {
        "content": "<p>I have been working with <span class=\"user-mention\" data-user-id=\"191574\">@David Booth</span> <span class=\"user-mention\" data-user-id=\"192267\">@Eric Prud'hommeaux</span> and Gregg Kellogg on the json-ld representation for FHIR. </p>",
        "id": 153866331,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484087089
    },
    {
        "content": "<p>we are currently working through issues identified by the quality test, which is:<br>\n- load the ttl format<br>\n- load the json-ld format<br>\n- require that both lead to the same set of triples</p>",
        "id": 153866332,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484087132
    },
    {
        "content": "<p>note that this a decision that we made: we could, for instance, require that the 'triples mean the same thing', but instead, we've chosen for a higher level criteria: 'that they lead to the same triples'. This implies that we believe that it must be acceptable to process the json-ld as pure RDF; there can be no dependency on reading hte json-ld directly (though people can do that if they want)</p>",
        "id": 153866333,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484087236
    },
    {
        "content": "<p>what this means is that some decisions we made for the turtle format have to be revisited. Presently, there are 2 significant areas of difference:</p>\n<p>- we defined a nodeRole property to identify the root node. In JSON-LD, the root node is explicit, but that explicit-ness is lost once the json-ld is processed to RDF. we could remove it from the turtle format, and leave everyone guessing as to the root, or we can define nodeRole in the json-ld as well</p>\n<p>- for the turtle, we chose not to use the RDF list format, and instead, to put a fhir:index property on each property what has cardinality &gt; 1, so that order could be reasoned with. In json-ld, we have to make a decision about this: either we label all the nodes explicit with an index (which is redundant when you look at the json-ld directly), or we use @container : @list in the FHIR context (which means that we would have to change the turtle format too)</p>",
        "id": 153866334,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484087501
    },
    {
        "content": "<p>this kind of implies that the conformance criteria for json-ld is : any json-ld that leads to the correct set of triples once processed to rdf is acceptable. </p>",
        "id": 153866335,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484087550
    },
    {
        "content": "<p>that has some benefits... but it highly constrains the set of things that are valid json-ld. In particular, I think you can forget about taking the 'json you already use', annotating it with a context, and getting valid FHIR content out of that. </p>",
        "id": 153866336,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484087620
    },
    {
        "content": "<p>perhaps this might be possible for json-ld v2, with a greatly enhanced ability to do things in the @context - .e.g redefining context by type, injecting data into the triples from the context, some restructuring/mapping features in the context</p>",
        "id": 153866337,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484087696
    },
    {
        "content": "<p>My question at this point is: who is the audience for JSON-LD, and who is the audience for turtle? Do we have distinct developers asking for each of these? I'd be worried about making changes that make *both formats* harder to work with, just in the name of unity.</p>",
        "id": 153866360,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1484108216
    },
    {
        "content": "<p>That's an extremely good question. I think JSON-Ld is a fail, myself. The idea I that you can use your existing JSON, and mark it up,with a context so that it magically turns into rdf. Well, the problem with magic happens here is that there is no magic. The jsonld context is simple, which means that the JSON itself is highly constrained. Complicating the jsonld context so it can value add would make the json much more flexible, but the processing would be very complicated</p>",
        "id": 153866375,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484159380
    },
    {
        "content": "<p>so who would use what? I suspect that the jsonld complexity would scare anyone doing json away, while anyone doing rdf is going to need turtle somewhere anyway</p>",
        "id": 153866376,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484159448
    },
    {
        "content": "<p>but the committee decided to keep jsonld as an option, so here were are</p>",
        "id": 153866377,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484159479
    },
    {
        "content": "<p>my belief that the requirement make them the same triples adds 10% complexity, though since it's all redundant elements that it adds, it'll feel like more than that </p>",
        "id": 153866378,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484159548
    },
    {
        "content": "<p>People who know they want to treat it as RDF will be able to consume it either as JSON-LD or Turtle.  It won't make much difference to them.  So from that perspective supporting both is unnecessary.   </p>\n<p>However, Turtle and JSON-LD each have their own pros and cons.  I think Turtle is nicer for concisely expressing the desired RDF triples -- for expository purposes.  But for interchange I like to encourage the use of JSON-LD as an RDF format because I think it provides better outreach to the existing developer community, since developers already know JSON but typically not Turtle.  That motivation is not specific to FHIR.  </p>\n<p>But specific to FHIR, I also harbor the hope that the unambiguous property names in JSON-LD -- fully qualified, independent of nesting context -- will appeal to a segment of developers who prefer a coding style that make use of them.  I don't have any proof of this though.</p>",
        "id": 153866540,
        "sender_full_name": "David Booth",
        "timestamp": 1484333383
    },
    {
        "content": "<p>nesting context is always important, unfortunately. There is only a few places in FHIR where we nest unless the cardinality is 0..*, and once the cardinality is 0..*, you cannot ignore the nesting context</p>",
        "id": 153866543,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484339746
    }
]