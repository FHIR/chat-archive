[
    {
        "content": "<p>welcome. Notification to people that I have updated the turtle resources, but there is still one problem with them </p>",
        "id": 153815750,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458093622
    },
    {
        "content": "<p>the names of the inner elements aren't right yet. </p>",
        "id": 153815751,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458093631
    },
    {
        "content": "<p>maybe I can address this later tonight</p>",
        "id": 153815752,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458093637
    },
    {
        "content": "<p>done. Here's a sample: </p>",
        "id": 153815802,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458128242
    },
    {
        "content": "<div class=\"codehilite\"><pre>&lt;http://hl7.org/fhir/AllergyIntolerance/example&gt; a fhir:AllergyIntolerance;\n  a owl:Ontology;\n  fhir:Resource.id [ fhir:value &quot;example&quot;];\n</pre></div>",
        "id": 153815803,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458128272
    },
    {
        "content": "<p>...</p>",
        "id": 153815804,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458128276
    },
    {
        "content": "<div class=\"codehilite\"><pre>  fhir:AllergyIntolerance.reaction [\n     fhir:index 0;\n     fhir:AllergyIntolerance.reaction.substance [\n       fhir:CodeableConcept.coding [\n         fhir:index 0;\n</pre></div>",
        "id": 153815805,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458128292
    },
    {
        "content": "<p>This is what it should be - the element is a direct reference to a defined data element</p>",
        "id": 153815806,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458128369
    },
    {
        "content": "<p>and the json-ld version </p>",
        "id": 153815807,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458128386
    },
    {
        "content": "<div class=\"codehilite\"><pre>  &quot;@context&quot;: &quot;http://hl7.org/fhir/jsonld/AllergyIntolerance&quot;,\n  &quot;resourceType&quot;: &quot;AllergyIntolerance&quot;,\n  &quot;Resource.id&quot;: {\n    &quot;value&quot;: &quot;example&quot;\n  },\n</pre></div>",
        "id": 153815808,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458128416
    },
    {
        "content": "<div class=\"codehilite\"><pre>  &quot;AllergyIntolerance.reaction&quot;: [\n    {\n      &quot;AllergyIntolerance.reaction.substance&quot;: {\n        &quot;CodeableConcept.coding&quot;: [\n          {\n            &quot;Coding.system&quot;: {\n              &quot;value&quot;: &quot;http://www.nlm.nih.gov/research/umls/rxnorm&quot;\n            },\n</pre></div>",
        "id": 153815810,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458128448
    },
    {
        "content": "<p>Why the \"fhir:value\"`in the turtle? It looks like it has no function. </p>\n<div class=\"codehilite\"><pre>fhir:Resource.id [ fhir:value &quot;example&quot;];\n</pre></div>\n\n\n<p>could just be </p>\n<div class=\"codehilite\"><pre>fhir:Resource.id &quot;example&quot;;\n</pre></div>",
        "id": 153815841,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458130855
    },
    {
        "content": "<p>Ah. Sometimes the rdf:type is needed. E.g. for Observation.effective. You need the type dateTime or Period, but this is an exception. For most instances it is not needed.</p>",
        "id": 153815872,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458150205
    },
    {
        "content": "<p>well, it's also where id and extensions go as well </p>",
        "id": 153815880,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458160756
    },
    {
        "content": "<p>it's not used often, so in the normal json format, we split that into attribute : primitive and  and _attribute : {} but this complicates general reasoning. The RDF model should follow the abstract model, not a serialisation optimization</p>",
        "id": 153815881,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458160822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192267\">@Eric Prud'hommeaux</span> - on the subject of extensions, I have an idea. Let's stick to turtle/rdf for now. </p>",
        "id": 153815961,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458179062
    },
    {
        "content": "<p>here's an extension as I build them today</p>",
        "id": 153815963,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458179069
    },
    {
        "content": "<div class=\"codehilite\"><pre>  fhir:DomainResource.extension [\n     fhir:index 0;\n     fhir:Extension.url [ fhir:value &quot;http://example.org/StructureDefinition/trials&quot; ];\n     fhir:Extension.value [\n       a fhir:code;\n       fhir:value &quot;renal&quot;     ]\n  ];\n</pre></div>",
        "id": 153815964,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458179097
    },
    {
        "content": "<p>but we could change that around. How about something like this:</p>",
        "id": 153815965,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458179114
    },
    {
        "content": "<div class=\"codehilite\"><pre>  &lt;http://example.org/StructureDefinition/trials&gt; [\n    a fhir:Extension\n     fhir:index 0;\n     a fhir:code;\n     fhir:value &quot;renal&quot;     ]\n  ];\n</pre></div>",
        "id": 153815966,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458179191
    },
    {
        "content": "<p>of course, you'd prefix them. so </p>",
        "id": 153815967,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458179242
    },
    {
        "content": "<div class=\"codehilite\"><pre>prefix ext1  &lt;http://example.org/StructureDefinition/&gt; .\n\n  ext1:trials [\n    a fhir:Extension\n     fhir:index 0;\n     a fhir:code;\n     fhir:value &quot;renal&quot;     ]\n  ];\n</pre></div>",
        "id": 153815968,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458179277
    },
    {
        "content": "<p>I think I'm ok with that.  That's sort of inline with how I'd originally envisioned it.</p>",
        "id": 153815969,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1458179754
    },
    {
        "content": "<p>the most interesting and potentially serious change is that it changes the meaning of the fhir:index property</p>",
        "id": 153815970,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458180417
    },
    {
        "content": "<p>but I don't think it works at all in json-ld. </p>",
        "id": 153815971,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458180455
    },
    {
        "content": "<p>It's true that the index would have to be interpreted across all extensions, though we could document that as convention</p>",
        "id": 153815973,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1458180786
    },
    {
        "content": "<p>but I don't know that you could do that very easily. And why would you do that?</p>",
        "id": 153815976,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458181170
    },
    {
        "content": "<p>To retrain roundtripability - you'd want to retrain the order of the extensions among all extensions, not just within repetitions of the same one.</p>",
        "id": 153815988,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1458182310
    },
    {
        "content": "<p>Don't see why it would be challenging to do</p>",
        "id": 153815989,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1458182322
    },
    {
        "content": "<p>why do you need to retain order in all the extensions? we've said it's not relevant</p>",
        "id": 153815990,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458182493
    },
    {
        "content": "<p>I'm thinking about signatures, though I guess if the canonicalization doesn't care, we don't have to care either</p>",
        "id": 153816001,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1458188167
    },
    {
        "content": "<p>it would break signatures yes</p>",
        "id": 153816004,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458189393
    },
    {
        "content": "<p>I was working on roundtripping xml-&gt;turtle-&gt;xml and ran into the problem that I needed the \"root\" triple.</p>",
        "id": 153816090,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458219267
    },
    {
        "content": "<p>Turtle translates into a set of triples. For now I determine the \"root\" triple by looking for the triple with a subject that is never used as object.</p>",
        "id": 153816091,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458219356
    },
    {
        "content": "<p>I need the root triple for the resourceType. Does this make sense or am I on the wrong page?</p>",
        "id": 153816092,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458219379
    },
    {
        "content": "<p>Michael, we decided to explicitly indicate the root using fhir:resourceType as described here: <a href=\"https://github.com/w3c/hcls-fhir-rdf/issues/8\" target=\"_blank\" title=\"https://github.com/w3c/hcls-fhir-rdf/issues/8\">https://github.com/w3c/hcls-fhir-rdf/issues/8</a></p>",
        "id": 153816093,
        "sender_full_name": "David Booth",
        "timestamp": 1458220837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191574\">@David Booth</span>  Thanks. Is anyone updating the rdf page with all these decisions? <a href=\"https://hl7-fhir.github.io/rdf\" target=\"_blank\" title=\"https://hl7-fhir.github.io/rdf\">https://hl7-fhir.github.io/rdf</a><br>\nWhy use a string value for this and not just a URI?</p>",
        "id": 153816094,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458221205
    },
    {
        "content": "<p>Grahame is currently maintaining <a href=\"https://hl7-fhir.github.io/rdf\" target=\"_blank\" title=\"https://hl7-fhir.github.io/rdf\">https://hl7-fhir.github.io/rdf</a> but the intent is that <a href=\"http://w3c.github.io/hcls-fhir-rdf/spec/rdf.html\" target=\"_blank\" title=\"http://w3c.github.io/hcls-fhir-rdf/spec/rdf.html\">http://w3c.github.io/hcls-fhir-rdf/spec/rdf.html</a> will replace it once the latter is far enough along.</p>",
        "id": 153816104,
        "sender_full_name": "David Booth",
        "timestamp": 1458225844
    },
    {
        "content": "<p>The reason it is a string value is that Lloyd thought it would be easier in round-tripping, and nobody else came up with a reason why a URI would be better.  If you think of a use case where a URI would be better then let us know.</p>",
        "id": 153816106,
        "sender_full_name": "David Booth",
        "timestamp": 1458226000
    },
    {
        "content": "<p>Ok. I interpret fhir:resourceType as kind of a rdf:type which has a uri as object. </p>",
        "id": 153816110,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1458226526
    },
    {
        "content": "<p>David you said \"the intent is that <a href=\"http://w3c.github.io/hcls-fhir-rdf/spec/rdf.html\" target=\"_blank\" title=\"http://w3c.github.io/hcls-fhir-rdf/spec/rdf.html\">http://w3c.github.io/hcls-fhir-rdf/spec/rdf.html</a> will replace it\" - I absoutely disagree with this approach completely</p>",
        "id": 153816175,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458238275
    },
    {
        "content": "<p>that's a very bad idea for version control reasons </p>",
        "id": 153816176,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458238298
    },
    {
        "content": "<p>further, this: \" we decided to explicitly indicate the root using fhir:resourceType \" is a bad idea. Any time a resource is included - whether it is contained or not, it will have a fhir:resourceType</p>",
        "id": 153816177,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458238374
    },
    {
        "content": "<p>at present, the only reliable indicator for what Michael is looking for is the presence of an owl:Ontology assertion</p>",
        "id": 153816178,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458238437
    },
    {
        "content": "<p>Grahame, I'll put these questions on the agenda for re-discussion.  Forhttps://hl7-fhir.github.io/rdf , what mechanism would you suggest for updating it to the group's current thinking?</p>",
        "id": 153817014,
        "sender_full_name": "David Booth",
        "timestamp": 1458587134
    },
    {
        "content": "<p>well, we can edit it. I'm assuming that we will. It's just an html page, so anyone who can edit the html can edit it</p>",
        "id": 153817031,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458590919
    },
    {
        "content": "<p>It's a question of how easy it is to make those edits.  We wanted to be able to edit on github collaboratively.</p>",
        "id": 153817048,
        "sender_full_name": "David Booth",
        "timestamp": 1458592469
    },
    {
        "content": "<p>Anyone with commit privileges can edit and xhtml merges pretty easily.</p>",
        "id": 153817052,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1458593264
    },
    {
        "content": "<p>it's not as smooth as editing on github. no. </p>",
        "id": 153817053,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458593476
    },
    {
        "content": "<p>but it's the right place for the content to live long term, else it creates version tension. </p>",
        "id": 153817054,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458593502
    },
    {
        "content": "<p>and it's a wrong value proposition to make things harder for the implemeters because it's easier for the editors </p>",
        "id": 153817055,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458593524
    },
    {
        "content": "<p>hah. going through the RDF page, I have some questions</p>",
        "id": 153818970,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459292733
    },
    {
        "content": "<p>the section in the RDF page on default values.... do we want default values represented explicitly in the RDF? </p>",
        "id": 153818971,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459292754
    },
    {
        "content": "<p>Yes!</p>",
        "id": 153819007,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459309153
    },
    {
        "content": "<p>Open-world assumption plays poorly with defaults.</p>",
        "id": 153819008,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459309173
    },
    {
        "content": "<p>well, in the rdf sense, the value is not present in the instance, so it falls back to the value provided in the definitions </p>",
        "id": 153819009,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459310073
    },
    {
        "content": "<p>is that workable, or must the instance provide the value?</p>",
        "id": 153819010,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459310092
    },
    {
        "content": "<p>Most people working with RDF use the \"<a href=\"https://en.wikipedia.org/wiki/Open-world_assumption\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Open-world_assumption\">open world assumption</a>\", where the <strong>absence</strong> of a statement doesn't mean anything. This clearly is a poor fit for the notion of defaults. And it would be very strange, in my opinion, for FHIR not to design for OWA.</p>",
        "id": 153819011,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459311864
    },
    {
        "content": "<p>It's not illegal or invalid or anything, but it would be <strong>very</strong> surprising in the RDF community.</p>",
        "id": 153819012,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459311894
    },
    {
        "content": "<p>Let's see if others agree with me though!</p>",
        "id": 153819013,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459311942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192267\">@Eric Prud'hommeaux</span> ?</p>",
        "id": 153819014,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459311949
    },
    {
        "content": "<p>i didn't dispute that. I merely asked whether taking the default value out of the type definitions because it's not in the instance content was a reasonable approach, or whether it must be repeated explicitly in the instance data</p>",
        "id": 153819015,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459312011
    },
    {
        "content": "<p>How would you \"take it out of the type definitions\"?</p>",
        "id": 153819016,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459312033
    },
    {
        "content": "<p>on the other hand, not supporting defaults would be... very surprising... to must communities</p>",
        "id": 153819017,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459312034
    },
    {
        "content": "<p>well, let's assume that Observation.status had a default value (it doesn't, but it'll do for me):</p>\n<p>ResA a fhir:Observation</p>\n<p>fhir:Observation a fhir:Resource [<br>\n  fhir:Observation.status a rdfs:property [<br>\n    rdfs:default \"final\"<br>\n  ]<br>\n]</p>",
        "id": 153819018,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459312150
    },
    {
        "content": "<p>something like that, anyway</p>",
        "id": 153819019,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459312161
    },
    {
        "content": "<p>Right, and then ?</p>",
        "id": 153819020,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459312185
    },
    {
        "content": "<p>The normal way to join instance data with definitions in RDF is through a \"reasoner\".</p>",
        "id": 153819021,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459312190
    },
    {
        "content": "<p>The reasoner takes what's known about the data, and derives conclusions from the definitions/ontology.</p>",
        "id": 153819022,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459312211
    },
    {
        "content": "<p>because resA is a fhir:observation, and because fhir:observation has a property Observation.status, and because Observation.status is a property with a default value, then the default value will apply to resA since it doesn't specify an alternative value</p>",
        "id": 153819023,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459312226
    },
    {
        "content": "<p>But the <strong>absence</strong> of data isn't something \"known\", so it can't drive reasoning.</p>",
        "id": 153819024,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459312246
    },
    {
        "content": "<blockquote>\n<p>since it doesn't specify an alternative value</p>\n</blockquote>\n<p>this the part we can't detect under an open-world assumption</p>",
        "id": 153819025,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459312275
    },
    {
        "content": "<p>ok. so the instance has to render the defaults. interesting challenge...</p>",
        "id": 153819026,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459312324
    },
    {
        "content": "<p>That's my position. But would be good to hear from <span class=\"user-mention\" data-user-id=\"191574\">@David Booth</span> , <span class=\"user-mention\" data-user-id=\"192267\">@Eric Prud'hommeaux</span>, and others.</p>",
        "id": 153819027,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459312361
    },
    {
        "content": "<p>this applies to json-ld, too, as far as I can see.</p>",
        "id": 153819028,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459312492
    },
    {
        "content": "<p>sparql (for example) is not bound to open world reasoning though. We could also treat this as a post-processing problem to prepare the content for an open world reasoner, rather than inherently required in the RDF</p>",
        "id": 153819029,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459312768
    },
    {
        "content": "<p>There are two issues around defaults and OWA:<br>\n 1 \"Erasure\" says that if you \"conclude\" something looking at a portion of the data, you shouldn't conclude something contrary when looking at more data. DL-query (probably the most direct to query what  OWL \"knows\") is sensitive to that and won't give an answer that will be contradicted by further information (note that further information can create an inconsistent system).<br>\n2 Inferred defaults will be different depending on the level of inference which is usually a no-no in RDF.<br>\n   {:Foo my:defaultP1Value 7 . &lt;X&gt; a :Foo.} implies { &lt;X&gt; :p1 7 . }<br>\n   {:Foo my:defaultP1Value 7 . &lt;X&gt; a :Foo; :p1 8.} does not imply { &lt;X&gt; :p1 7 . }<br>\nbut with some RDFS, we will get different values if we don't support RDFS or if we do:<br>\n   {x:defaultP1Value rdfs:subPropertyOf my:defaultValue . :Foo x:defaultP1Value 7 . &lt;X&gt; a :Foo.} implies { &lt;X&gt; :p1 7 . }<br>\nonly if you understand rdfs:subPropertyOf<br>\n   { x:p1 rdfs:subPropertyOf :p1 . :Foo my:defaultP1Value 7 . &lt;X&gt; a :Foo; x:p1 8.} does not imply { &lt;X&gt; :p1 7 . }<br>\nunless you don't understand rdfs:subPropertyOf</p>",
        "id": 153819031,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459314344
    },
    {
        "content": "<p>(oof, what a hairball)</p>",
        "id": 153819032,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459314401
    },
    {
        "content": "<p>Anyways, all of that said, i'm not particularly opposed to defaults.<br>\nYou can put guards around issue 2 (don't subProperty either properties that have defaults nor the expression of a default).<br>\nFor issue 1, it's sort of a cost of doing business in an efficient world.</p>",
        "id": 153819033,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459314528
    },
    {
        "content": "<p>I think that's called a dollar each wayt</p>",
        "id": 153819035,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459316793
    },
    {
        "content": "<p>Do we know anyone in this community who actually wants to do reasoning Based on fhir data and rdf? It would be good too hear from such people :-)</p>",
        "id": 153819109,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459349630
    },
    {
        "content": "<p>fair point. i got some good bites at my amia talk; i'll ping them.</p>",
        "id": 153819110,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459349689
    },
    {
        "content": "<p>Tony is certainly focused on reasoning.</p>",
        "id": 153819111,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459349699
    },
    {
        "content": "<p>I should squeeze claude nanjo for use cases</p>",
        "id": 153819112,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459349874
    },
    {
        "content": "<p>or someone else can. i haven't talked to him in ages.</p>",
        "id": 153819113,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459349893
    },
    {
        "content": "<p>Gopikrishnan Chandrasekharan (Gopi) wants to do clinical decision support with FHIR RDF.  He joined the weekly Yosemite teleconferences the last two weeks.  He's based in London, doing a PhD in medical informatics.  Formerly a dentist.  I'm trying to connect him with Claude.</p>",
        "id": 153819114,
        "sender_full_name": "David Booth",
        "timestamp": 1459350059
    },
    {
        "content": "<p>as far as i can tell, claude's todo pile eclipses everything he wants to do, but worth a shot</p>",
        "id": 153819127,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1459353569
    },
    {
        "content": "<p>My leaning on defaults is to say they are *not* populated in instances because it's too hard to retain a consistent round-trip.  The only way I could be comfortable including them is if the canonicalization process for signatures involved stripping out default values.</p>",
        "id": 153819243,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459380339
    },
    {
        "content": "<p>The alternative is to require applying a standard SPARQL update that sets defaults before reasoning.</p>",
        "id": 153819244,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459380359
    },
    {
        "content": "<p>why do we care about signatures? </p>",
        "id": 153819252,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459381131
    },
    {
        "content": "<p>Because data may come in as JSON or XML with a signature, get turned into RDF and stored as triples and regurgitated as XML or JSON.  The signature needs to be retained.</p>",
        "id": 153819258,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459383243
    },
    {
        "content": "<p>That's what round-tripping means - which has been one of our base requirements from the start.</p>",
        "id": 153819259,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459383258
    },
    {
        "content": "<p>I think you're asking for too much. personally. If you want to validate the signature, keep the original. </p>",
        "id": 153819260,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459383286
    },
    {
        "content": "<p>I think rdf is a different thing....</p>",
        "id": 153819261,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459383299
    },
    {
        "content": "<p>RDF is supposed to be a syntax like any other.  If it's not as reliable as XML and JSON, that'll be a reason for servers to not support it.</p>",
        "id": 153819262,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459383329
    },
    {
        "content": "<p>And, with the exception of defaults, there should be no issue round-tripping so far.</p>",
        "id": 153819263,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459383361
    },
    {
        "content": "<p>you do like your absolutes. It's a matter of perspective which is more reliable or not ;-)</p>",
        "id": 153819264,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459383362
    },
    {
        "content": "<p>I do indeed like absolutes :)</p>",
        "id": 153819265,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459383375
    },
    {
        "content": "<p>What is use case for round-tripping? Sorry, coming later to this :-(</p>",
        "id": 153819266,
        "sender_full_name": "Zoran Milosevic",
        "timestamp": 1459383444
    },
    {
        "content": "<p>If data comes in as XML and you convert it to RDF for storage, a client might ask for it back out in XML again.  And the signature should be valid.  Same if they send RDF in and you store as XML.  (Or for that matter store in a relational format.)</p>",
        "id": 153819267,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459383602
    },
    {
        "content": "<p>how much are you prepared to pay for that absolute right? how much is it worth? I do think it's a corner case, where as dealing with default values is not a corner case</p>",
        "id": 153819268,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459383660
    },
    {
        "content": "<p>One of our base tests for XML and JSON is that you can round trip from one to the other and back again and have a canonically identical instance.  If RDF is to be treated as \"equal\" to those two, then roundtripping would be expected there too.  And aside from the defaulting issue, it's achievable.</p>",
        "id": 153819269,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459383671
    },
    {
        "content": "<p>... just a small aside...</p>",
        "id": 153819270,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459383689
    },
    {
        "content": "<p>Default values are necessary for reasoning.  But pre-processing is going to be needed for reasoning anyhow.</p>",
        "id": 153819271,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459383696
    },
    {
        "content": "<p>though we could mark defaults that are being undefaulted so you can have your round-trip magic</p>",
        "id": 153819272,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459383711
    },
    {
        "content": "<p>You're going to want to pre-process to assert concept ids too.</p>",
        "id": 153819273,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459383712
    },
    {
        "content": "<p>they don't affect round-trip-ability</p>",
        "id": 153819274,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459383749
    },
    {
        "content": "<p>Yes, that's an alternative.  But it imposes quite a bit on the conversion process.  The question is where that complexity should lie.</p>",
        "id": 153819275,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459383751
    },
    {
        "content": "<p>Well, nice to have indeed, but am asking is this 80/20 rule?</p>",
        "id": 153819276,
        "sender_full_name": "Zoran Milosevic",
        "timestamp": 1459383769
    },
    {
        "content": "<p>adding fhir:default fhir:just-because-lloyd when you add them is hardly an imposition</p>",
        "id": 153819277,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459383782
    },
    {
        "content": "<p>Oh, agree concept ids don't impact roundtripability.  My point is that if you have to pre-process anyhow, asserting defaults as part of that step is reasonable.</p>",
        "id": 153819278,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459383792
    },
    {
        "content": "<p>80/20 generally doesn't apply at the infrastructure level</p>",
        "id": 153819279,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459383812
    },
    {
        "content": "<p>it's about requirements. </p>",
        "id": 153819280,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459383822
    },
    {
        "content": "<p>80/20 isn't relevant here.  Because if we break round-tripability, it's broken for everyone, period.  The 80% rule applies to inclusion of elements that could be handled by extensions.</p>",
        "id": 153819281,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459383829
    },
    {
        "content": "<p>Ok - got it; thanks </p>",
        "id": 153819282,
        "sender_full_name": "Zoran Milosevic",
        "timestamp": 1459383852
    },
    {
        "content": "<p>it's not broken for everyone, period. puleease... and if pre-processing breaks it anyway.... it's not really pre-processing.... </p>",
        "id": 153819283,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459383867
    },
    {
        "content": "<p>If round-tripping can't be relied upon, then it's broken.  Even if it happens to work on an arbitrary server, you can't count on it working.   And I don't understand what you mean about pre-processing not being pre-processing.</p>",
        "id": 153819285,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459384473
    },
    {
        "content": "<p>if pre-processing breaks the round-trippability, then it becomes really hard to decide when to do it. In fact, you only do it as late as you can because you don't want to break things. Voila, it turns into nearly-post-processing</p>",
        "id": 153819286,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459384556
    },
    {
        "content": "<p>easier to say that the processing step includes injection of defaults, labelled with a tag so that reasoners and round-trippers know which were introduced in the pre-processing step</p>",
        "id": 153819287,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459384597
    },
    {
        "content": "<p>and let's servers do as much pre-processing as they can</p>",
        "id": 153819288,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459384612
    },
    {
        "content": "<p>cause you don't want them to be forced not to</p>",
        "id": 153819289,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459384622
    },
    {
        "content": "<p>Post-processing would mean that you'd run it before you did analysis.  It wouldn't be done on the data before persisting it - at least not without adding a flag to allow it to be removed</p>",
        "id": 153819290,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1459386149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> and others, I'm actually okay with not serializing the default values in the RDF, because as Eric and Lloyd pointed out, there will need to be a post-processing step anyway to \"enhance\" the RDF before it is used for significant analysis (to work around non-monotonic things like modifier extensions).  But to simplify round tripping, I think we'll want to keep a clean and simple separation between the basic round-tripping vocabulary and the enhancements, perhaps by putting them in a different namespace.  Thoughts?</p>",
        "id": 153819379,
        "sender_full_name": "David Booth",
        "timestamp": 1459436684
    },
    {
        "content": "<p>Actually a different namespace might be confusing.  (Nightmares of rdf: versus rdfs: come to mind.)  But somehow we'll need to distinguish between them.</p>",
        "id": 153819383,
        "sender_full_name": "David Booth",
        "timestamp": 1459437264
    },
    {
        "content": "<p>OK --- glad to hear that there's something like consensus about the need for post-processing! And certainly leaving defaults \"as in JSON\" will make round-tripping easier.</p>",
        "id": 153819426,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459443820
    },
    {
        "content": "<p>Finally found on zulip all the conversation I was missing.</p>",
        "id": 153819438,
        "sender_full_name": "Tony Mallia",
        "timestamp": 1459449832
    },
    {
        "content": "<p>I am using a reasoner to complete the navigation. So when I have a reference from a resource e.g. AllergyIntolerance to a Patient then I construct an inverse object property that points from the Patient to the Allergy Intolerance. When I load the Allergy Intolerance and Patient instance RDF, the reasoner infers the inverse property which allows me to navigate over the graph of the patient record. I am also using the reasoned to infer the type from a terminology (particularly SNOMED) given the system and code properties inside a coding.</p>",
        "id": 153819441,
        "sender_full_name": "Tony Mallia",
        "timestamp": 1459450233
    },
    {
        "content": "<p>the reverse reference - do you keep track fo the context of the reference, or just that there is one?</p>",
        "id": 153819444,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459453186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192267\">@Eric Prud'hommeaux</span> - have you looked at the ShEx template thing for me yet? can we work on this over the next few days?</p>",
        "id": 153820355,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460059530
    },
    {
        "content": "<p>There is a Property chain AllergyIntolerance.patient.link which chains AllergyIntolerance.patient with Reference.link. Patient.allergy is the inverse of AllergyIntolerance.patient.link so it is context and knows to get back to the allergy and not some other resource.</p>",
        "id": 153820528,
        "sender_full_name": "Tony Mallia",
        "timestamp": 1460144099
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 153820529,
        "sender_full_name": "Tony Mallia",
        "timestamp": 1460144940
    },
    {
        "content": "<p>but does it say where in the allergy? or just identify the resource as a whole?</p>",
        "id": 153820569,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460238404
    },
    {
        "content": "<p>It points to the Allergy as a whole since it is the named individual. I suppose we could reverse back to the Reference if it were named but so far References are blank nodes.</p>",
        "id": 153821219,
        "sender_full_name": "Tony Mallia",
        "timestamp": 1460468894
    },
    {
        "content": "<p>ok thanks. I think that it makes sense to point to the source resource as a whole</p>",
        "id": 153821282,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460488207
    },
    {
        "content": "<p>if \"context of the reference\" means \"subject of the referring property\" then yes; any inferred inverse property will simply swap the subject and object, e.g.<br>\naxiom: { fam:hasChild owl:inverseProperty fam:hasParent . }<br>\ndata: { ex:Sue fam:hasParent ex:Mary . }<br>\nimplication: { ex:Mary fam:hasChild ex:Sue . }</p>",
        "id": 153822088,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1460808485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Will there be some \"mini\" RDF Connecthaton? Or will we just discuss in the ITS Tue Q2 session?</p>",
        "id": 153822579,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1461141868
    },
    {
        "content": "<p>we sort of planned to have a virtual validation connectathon - that by the end of the week in montreal, we're able to validate all the generated turtle resources using the ShEx that Harold and I are generating</p>",
        "id": 153822602,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461153517
    },
    {
        "content": "<p>It would be great to also test my generated turtle. I know for sure I have some differences with yours. I will make the slides to summarize the differences and the reasons.</p>",
        "id": 153822605,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1461156114
    },
    {
        "content": "<p>Hmmm ... so I thought it was about time I got back into the RDF space and so I tried to upload the latest turtle file into Protege.  I got 3474 errors mostly looking like this:</p>",
        "id": 153825788,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1462777653
    },
    {
        "content": "<p>Level:       ERROR<br>\nTime:        1462777334440<br>\nMessage:     Entity not properly recognized, missing triples in input? </p>",
        "id": 153825789,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1462777669
    },
    {
        "content": "<p>Any ideas?</p>",
        "id": 153825790,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1462777673
    },
    {
        "content": "<p>which file? </p>",
        "id": 153825793,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462782536
    },
    {
        "content": "<p>fhir.ttl</p>",
        "id": 153826191,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1462832352
    },
    {
        "content": "<p>The turtle ontology currently at: <a href=\"https://hl7-fhir.github.io/fhir.ttl\" target=\"_blank\" title=\"https://hl7-fhir.github.io/fhir.ttl\">https://hl7-fhir.github.io/fhir.ttl</a><br>\ngenerates significant numbers of errors using Protege V5.0.0 (Build RC1)</p>\n<p>When you look at the source, starting at around line 49,317 up to line 54,062,  there are a hundreds of ex:birthplace individuals.</p>\n<p>So it looks like there is a “hiccup” in the auto-generation of the turtle file?</p>",
        "id": 153827638,
        "sender_full_name": "Renato Iannella",
        "timestamp": 1463106866
    },
    {
        "content": "<p>Just found the \"bug\" that generates the errors in Protege (and TopBraid).<br>\nThroughout the turtle file, the following is used:<br>\n\"1^^xs:nonNegativeInteger”<br>\nwhen it should be:<br>\n\"1\"^^xsd:nonNegativeInteger</p>",
        "id": 153827670,
        "sender_full_name": "Renato Iannella",
        "timestamp": 1463126102
    },
    {
        "content": "<p>This also occurs in the RIM turtle file</p>",
        "id": 153827671,
        "sender_full_name": "Renato Iannella",
        "timestamp": 1463126190
    },
    {
        "content": "<p>fixed. will take some time for the update to build</p>",
        "id": 153827681,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463127381
    },
    {
        "content": "<p>thansk</p>",
        "id": 153827682,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463127387
    },
    {
        "content": "<p>of course there are many other issues to deal with there</p>",
        "id": 153827683,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463127425
    },
    {
        "content": "<p>renato, is the xs prefix declared?</p>",
        "id": 153827685,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463127457
    },
    {
        "content": "<p>there's some incentive to use xs over xsd. xs is the datatypes and xsd is the structure defintions</p>",
        "id": 153827686,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463127515
    },
    {
        "content": "<p>yes xs: is declared. I didn't even notice that bit - I'm still using xs</p>",
        "id": 153827688,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463127605
    },
    {
        "content": "<p>(to the extend that \"xs\" is a mnemonic for \"XML Schema\" and \"xsd\" is a mnemonic for \"XML Schema Datatypes (i.e. XS part two))</p>",
        "id": 153827689,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463127627
    },
    {
        "content": "<p>which would argue that xsd is correct, since these are references into part 2 </p>",
        "id": 153827690,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463127651
    },
    {
        "content": "<p>yeah, fair point.</p>",
        "id": 153827691,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463127682
    },
    {
        "content": "<p>though the fact that we have to work around hard-coded prefixes in their implementations really irks me.</p>",
        "id": 153827692,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463127728
    },
    {
        "content": "<p>I think you should regard it as an inevitable consequence of the goofy syntax in this case - implementers find it hard to think about in a structured format</p>",
        "id": 153827693,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463127775
    },
    {
        "content": "<p>they already have to deal with arbitrary prefixes for everything else or they wouldn't get off the ground</p>",
        "id": 153827694,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463127861
    },
    {
        "content": "<p>so why such a different codepath for xsd?</p>",
        "id": 153827695,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463127905
    },
    {
        "content": "<p>right. because ^^:xs: looks like some goofy literal. </p>",
        "id": 153827696,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463127927
    },
    {
        "content": "<p>it's only the diff between PREFIX xs: &lt;...&gt; &lt;s&gt; &lt;p&gt; \"...\"^^xs:float  and PREFIX xsd: &lt;...&gt; &lt;s&gt; &lt;p&gt; \"...\"^^xsd:float</p>",
        "id": 153827697,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463128023
    },
    {
        "content": "<p>but actually, you're writing everything in turtle, so you can just use a bareword for integers</p>",
        "id": 153827698,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463128062
    },
    {
        "content": "<p>that's a well-trod path for protege</p>",
        "id": 153827699,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463128082
    },
    {
        "content": "<p>I don't know what you mean there?</p>",
        "id": 153827700,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463128099
    },
    {
        "content": "<p>instead of writing some triple:<br>\n  &lt;s&gt; &lt;p&gt; \"1\"^^xsd:nonNegativeInteger .<br>\nyou can just write<br>\n  &lt;s&gt; &lt;p&gt; 1 .</p>",
        "id": 153827701,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463128169
    },
    {
        "content": "<p>and reading back, i see the issue was probably not about xs vs. xsd, but instead where the \"\"s were</p>",
        "id": 153827702,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463128213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192267\">@Eric Prud'hommeaux</span> Looking through the ttl tests, I found this: </p>\n<div class=\"codehilite\"><pre><span></span>[ &lt;http://a.example/p&gt; &lt;http://a.example/o&gt; ] &lt;http://a.example/p2&gt; &lt;http://a.example/o2&gt; .\n</pre></div>",
        "id": 153827703,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463132221
    },
    {
        "content": "<p>I had no idea that was allowed. Should we use this form for anonymous resources - that is, ones that have no assigned identity?</p>",
        "id": 153827704,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463132248
    },
    {
        "content": "<p>there's no semantic diff between<br>\n  [ &lt;<a href=\"http://a.example/p\" target=\"_blank\" title=\"http://a.example/p\">http://a.example/p</a>&gt; &lt;<a href=\"http://a.example/o\" target=\"_blank\" title=\"http://a.example/o\">http://a.example/o</a>&gt; ; &lt;<a href=\"http://a.example/p2\" target=\"_blank\" title=\"http://a.example/p2\">http://a.example/p2</a>&gt; &lt;<a href=\"http://a.example/o2\" target=\"_blank\" title=\"http://a.example/o2\">http://a.example/o2</a>&gt; ] .<br>\nand<br>\n  [ &lt;<a href=\"http://a.example/p\" target=\"_blank\" title=\"http://a.example/p\">http://a.example/p</a>&gt; &lt;<a href=\"http://a.example/o\" target=\"_blank\" title=\"http://a.example/o\">http://a.example/o</a>&gt; ] &lt;<a href=\"http://a.example/p2\" target=\"_blank\" title=\"http://a.example/p2\">http://a.example/p2</a>&gt; &lt;<a href=\"http://a.example/o2\" target=\"_blank\" title=\"http://a.example/o2\">http://a.example/o2</a>&gt; .<br>\nand<br>\n  []  &lt;<a href=\"http://a.example/p\" target=\"_blank\" title=\"http://a.example/p\">http://a.example/p</a>&gt; &lt;<a href=\"http://a.example/o\" target=\"_blank\" title=\"http://a.example/o\">http://a.example/o</a>&gt; ; &lt;<a href=\"http://a.example/p2\" target=\"_blank\" title=\"http://a.example/p2\">http://a.example/p2</a>&gt; &lt;<a href=\"http://a.example/o2\" target=\"_blank\" title=\"http://a.example/o2\">http://a.example/o2</a>&gt; .<br>\nbut I find the 1st the clearest and easiest to exploit in bracket-balancing editors</p>",
        "id": 153827705,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463132398
    },
    {
        "content": "<p>but we haven't used any of these for unidentified resources. should we?</p>",
        "id": 153827706,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463132443
    },
    {
        "content": "<p>eg. we haven't said to start with a bnode</p>",
        "id": 153827707,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463132463
    },
    {
        "content": "<p>unidentified objects in resources, yes, but i don't know how many examples of anon resources we've done in the text.</p>",
        "id": 153827708,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463132495
    },
    {
        "content": "<p>the xslt that josh, harold and i worked on gives you<br>\n  [] a fhir:foo ...<br>\nif you don't supply it with a docURL parameter</p>",
        "id": 153827709,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463132571
    },
    {
        "content": "<p>well, ok, we better write that up then</p>",
        "id": 153827710,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463132596
    },
    {
        "content": "<p>agreed. and for syntax, i'd say that { [ all the statements ] . } is nicest for consumers and { [] all the statements . } is easiest to generate. the mix of the two is rarely helpful.</p>",
        "id": 153827711,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1463132748
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 153827712,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463132847
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 153827713,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463132848
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 153827714,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463132861
    },
    {
        "content": "<p>There is a specific namespace URI for XML datatypes (part 2): <a href=\"https://www.w3.org/TR/xmlschema11-2/#namespaces\" target=\"_blank\" title=\"https://www.w3.org/TR/xmlschema11-2/#namespaces\">https://www.w3.org/TR/xmlschema11-2/#namespaces</a><br>\nBut <a href=\"http://www.w3.org/2001/XMLSchema\" target=\"_blank\" title=\"http://www.w3.org/2001/XMLSchema\">http://www.w3.org/2001/XMLSchema</a> also applies to built-in datatypes.<br>\nWhich is recommended: <a href=\"https://www.w3.org/TR/swbp-xsch-datatypes/\" target=\"_blank\" title=\"https://www.w3.org/TR/swbp-xsch-datatypes/\">https://www.w3.org/TR/swbp-xsch-datatypes/</a></p>",
        "id": 153827717,
        "sender_full_name": "Renato Iannella",
        "timestamp": 1463141057
    },
    {
        "content": "<p>Yes <span class=\"user-mention\" data-user-id=\"192267\">@Eric Prud'hommeaux</span> the issue was just the double-quotes (not the namespace prefix)</p>",
        "id": 153827718,
        "sender_full_name": "Renato Iannella",
        "timestamp": 1463141108
    },
    {
        "content": "<p>From Renato's reference:</p>\n<div class=\"codehilite\"><pre>@prefix xsd: &lt;http://www.example.org/&gt; .\n@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .\n@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .\n@prefix owl: &lt;http://www.w3.org/2002/07/owl#&gt; .\n@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .\n</pre></div>",
        "id": 153827719,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463141196
    },
    {
        "content": "<p>I'm not sure much clarity that brings around the xsd prefix ;-)</p>",
        "id": 153827720,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463141214
    },
    {
        "content": "<p>I think that first xsd prefix is a mistake!</p>",
        "id": 153827721,
        "sender_full_name": "Renato Iannella",
        "timestamp": 1463141248
    },
    {
        "content": "<p>I think it might be, yes </p>",
        "id": 153827722,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463141275
    },
    {
        "content": "<p>I've got a couple more minor things to cover in the ShEx, but we're proposing a few tweaks in tht ttl as well</p>",
        "id": 153827794,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463155612
    },
    {
        "content": "<p>I think I should get back to testing the ShEx validation as well. I'll try and close the loop on this stuff next week.</p>",
        "id": 153827805,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463156798
    },
    {
        "content": "<p>Good.  Will have everything ready to go by then...</p>",
        "id": 153827870,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463239310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"grahame@healthintersections.com.au\">@Grahame Grieve</span> -- proposed changes to the RDF:<br>\n@prefix sct: &lt;<a href=\"http://snomed.info/id/\" target=\"_blank\" title=\"http://snomed.info/id/\">http://snomed.info/id/</a>&gt; .    &lt;-- instead of .../sct/.  This matches the IHTSDO URI spec</p>\n<hr>\n<p>uri references in angle brackets rather than quotes:<br>\nCoding.system [ fhir:value &lt;<a href=\"http://hl7.org/fhir/observation-category\" target=\"_blank\" title=\"http://hl7.org/fhir/observation-category\">http://hl7.org/fhir/observation-category</a>&gt; ];</p>\n<hr>\n<p>References:<br>\nfhir:link &lt;uri&gt;  rather than fhir:reference \"uri\". <br>\nNo \"Reference\" suffix on predicate (subjectReference --&gt; subject)<br>\nAdd a type arc</p>\n<p>example:<br>\nfhir:Observation.subject [<br>\n     a fhir:PatientReference;<br>\n     fhir:link &lt;<a href=\"http://hl7.org/fhir/Patient/example\" target=\"_blank\" title=\"http://hl7.org/fhir/Patient/example\">http://hl7.org/fhir/Patient/example</a>&gt;;<br>\n     fhir:Reference.reference [ fhir:value \"Patient/example\" ]<br>\n  ];</p>\n<hr>\n<p>concept codes:<br>\nRemove fhir:concept entries directly underneath CodedConcept -- only put them on the coding entries.</p>\n<p>fhir:Observation.code [<br>\n     fhir:concept loinc:29463-7;   &lt;-- Remove<br>\n     fhir:concept loinc:3141-9;    &lt;-- Remove<br>\n     fhir:concept sct:27113001;   &lt;-- Remove<br>\n     fhir:CodeableConcept.coding [<br>\n       fhir:index 0;<br>\n       fhir:concept loinc:29463-7;    &lt;-- Keep</p>\n<p>We've still got an issue with xs: data types in the validator, but should get it resolved today.</p>",
        "id": 153828686,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463679049
    },
    {
        "content": "<p>(be happy to give it a shot if you don't mind me messing with your code...)</p>",
        "id": 153828687,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463679338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191660\">@Harold Solbrig</span>  who proposes these changes? They differ from previous committee dispositions. </p>",
        "id": 153828707,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463688411
    },
    {
        "content": "<p>I made the snomed change. </p>",
        "id": 153828708,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463688452
    },
    {
        "content": "<p>with regard to the URIs, what we decided in Montreal is that we would only use URIs for fhir:reference and fhir:concept, and any fields that are have a type URI would be \"\" literals. </p>",
        "id": 153828709,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463688537
    },
    {
        "content": "<p>why rename fhir:reference to fhir:link? </p>",
        "id": 153828710,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463688555
    },
    {
        "content": "<p>I don't know what this \"No \"Reference\" suffix on predicate (subjectReference --&gt; subject)\" means</p>",
        "id": 153828711,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463688588
    },
    {
        "content": "<p>nor what this is: a fhir:PatientReference;</p>",
        "id": 153828712,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463688597
    },
    {
        "content": "<p>as for removing fhir:concept from CodeableConcept - Lloyd assured the committee with utter certainty that reasoners would be completely unable to reason with fhir:concept on the CodeableConcept, and the committee agreed with that</p>",
        "id": 153828713,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463688670
    },
    {
        "content": "<p>fhir:reference to fhir:link was a decision in a meeting a couple of weeks back.  Some how the other decision on uri's didn't get forwarded ...</p>",
        "id": 153828714,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463688689
    },
    {
        "content": "<p>you were in the room..</p>",
        "id": 153828715,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463688756
    },
    {
        "content": "<p>You sure?   In any case, fhir subject type Reference --&gt; fhir:subject @&lt;PatientReference&gt;  instead of fhir:subjecReference @&lt;PatientReference&gt;</p>",
        "id": 153828716,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463688819
    },
    {
        "content": "<p>wrt. concept in CodeableConcept -- it is still there.</p>",
        "id": 153828718,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463688870
    },
    {
        "content": "<p>I don't understand the reference bit</p>",
        "id": 153828719,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463688891
    },
    {
        "content": "<p>I can easily remove fhir:concept from CodeableConcept. I'll do that now, but Lloyd will flip. </p>",
        "id": 153828720,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463688913
    },
    {
        "content": "<p>fhir:Observation.subjectReference [<br>\n     fhir:reference &lt;<a href=\"http://hl7.org/fhir/Patient/example\" target=\"_blank\" title=\"http://hl7.org/fhir/Patient/example\">http://hl7.org/fhir/Patient/example</a>&gt;;<br>\n     fhir:Reference.reference [ fhir:value \"Patient/example\" ]<br>\n  ];  --&gt;   should read \"fhir:Observation.subject [\"</p>",
        "id": 153828721,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463689030
    },
    {
        "content": "<p>\"Lloyd assured the committee with utter certainty that reasoners would be completely unable to reason with fhir:concept...\"</p>",
        "id": 153828722,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463689070
    },
    {
        "content": "<p>Did you mean \"without\"?</p>",
        "id": 153828723,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463689086
    },
    {
        "content": "<p>Did you mean something different than \"Lloyd assured the committee with utter certainty that reasoners would be completely unable to reason with fhir:concept on the CodeableConcept, and the committee agreed with that\"? - because, if I'm reading it correctly, that sounds like a good reason to remove fhir:concept from CodeableConcept</p>",
        "id": 153828724,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1463689103
    },
    {
        "content": "<p>I did mean without, yes. </p>",
        "id": 153828725,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463689103
    },
    {
        "content": "<p>ok</p>",
        "id": 153828726,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1463689107
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 153828727,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463689112
    },
    {
        "content": "<p>Ok - will fix the ShEx accordingly.</p>",
        "id": 153828728,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463689125
    },
    {
        "content": "<p>I've figured out the subjectReference thing. Clear bug in my code </p>",
        "id": 153828729,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463689131
    },
    {
        "content": "<p>Will type \"uri\" to xsd:string rather than IRI.</p>",
        "id": 153828730,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463689180
    },
    {
        "content": "<p>ok</p>",
        "id": 153828732,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463689198
    },
    {
        "content": "<p>I'm not sure it's true that \"reasoners would be completely unable to reason with fhir:concept on the CodeableConcept\" - particulary if we use a bridging ontology</p>",
        "id": 153828733,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1463689312
    },
    {
        "content": "<p>I'm happy to leave them in.  I just thought there were there in error.</p>",
        "id": 153828734,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463689357
    },
    {
        "content": "<p>it sounded like a stupid claim to me. If reasoners are actually supposed to be able to reason, as their name suggests, then reasoners should be able to reason some thing as simple as elevating the level of fhir:concept by one. But <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> was sure that it was impossible</p>",
        "id": 153828736,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463689407
    },
    {
        "content": "<p>not in error. very deliberate. I'd rather not have them</p>",
        "id": 153828737,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463689434
    },
    {
        "content": "<p>Not a battle worth fighting, imo.</p>",
        "id": 153828738,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463689447
    },
    {
        "content": "<p>so you confirm that the committee wants fhir:link not fhir:reference? </p>",
        "id": 153828739,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463689452
    },
    {
        "content": "<p>I'm with you on that, Grahame - we should do some testing</p>",
        "id": 153828740,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1463689453
    },
    {
        "content": "<p>grahame, from the 4/26 minutes: \"AGREED: Change fhir:reference to fhir:link to avoid confusion.\"</p>",
        "id": 153828741,
        "sender_full_name": "David Booth",
        "timestamp": 1463689553
    },
    {
        "content": "<p><a href=\"https://www.w3.org/2016/04/26-hcls-minutes.html#item07\" target=\"_blank\" title=\"https://www.w3.org/2016/04/26-hcls-minutes.html#item07\">https://www.w3.org/2016/04/26-hcls-minutes.html#item07</a></p>",
        "id": 153828742,
        "sender_full_name": "David Booth",
        "timestamp": 1463689663
    },
    {
        "content": "<p>ok thanks. done</p>",
        "id": 153828743,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463689913
    },
    {
        "content": "<p>grahame and harold, from harold's list above, which items still need to be resolved?</p>",
        "id": 153828744,
        "sender_full_name": "David Booth",
        "timestamp": 1463689959
    },
    {
        "content": "<p>One other topic -- lower priority, but we'd like to add an RDF url to the primitive type code extension.  Doing way to much translation from XML to be reasonable.</p>",
        "id": 153828745,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463689969
    },
    {
        "content": "<p>\"url\": \"<a href=\"http://hl7.org/fhir/StructureDefinition/structuredefinition-rdf-type\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/structuredefinition-rdf-type\">http://hl7.org/fhir/StructureDefinition/structuredefinition-rdf-type</a>\", ...</p>",
        "id": 153828746,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463690004
    },
    {
        "content": "<p>I don't know what you mean, Harold. what 'primitive type code extension'?</p>",
        "id": 153828747,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463690094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191574\">@David Booth</span>  - I think they're all resolved but I predict that the fhir:concept thing will come back to life</p>",
        "id": 153828749,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463690214
    },
    {
        "content": "<p>If you look at, say, dateTime you will find a \"_code\" entry with a JSON mapping and a XML mapping.</p>",
        "id": 153828751,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463690277
    },
    {
        "content": "<p>Not sure I completely understand the xml entries -- example: \"xs:string+\"  and \"anyURI\"  (without xs), but we're using them to generate the ShEx.</p>",
        "id": 153828752,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463690316
    },
    {
        "content": "<p>umm? I don't see a _code anywhere?</p>",
        "id": 153828753,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463690383
    },
    {
        "content": "<p>are you referring to the <a href=\"http://hl7.org/fhir/StructureDefinition/structuredefinition-xml-type\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/structuredefinition-xml-type\">http://hl7.org/fhir/StructureDefinition/structuredefinition-xml-type</a> extension? </p>",
        "id": 153828754,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463690421
    },
    {
        "content": "<p>id.profile.json:</p>",
        "id": 153828755,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463690421
    },
    {
        "content": "<p>\"type\": [<br>\n          {<br>\n            \"fhir_comments\": [<br>\n              \"Note: primitive values do not have an assigned type\\r\\n      e.g. this is compiler magic\\r\\n      XML and JSON types provided by extension\"<br>\n            ],<br>\n            \"extension\": [<br>\n              {<br>\n                \"url\": \"<a href=\"http://hl7.org/fhir/StructureDefinition/structuredefinition-regex\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/structuredefinition-regex\">http://hl7.org/fhir/StructureDefinition/structuredefinition-regex</a>\",<br>\n                \"valueString\": \"[A-Za-z0-9\\\\-\\\\.]{1,64}\"<br>\n              }<br>\n            ],<br>\n            \"_code\": {<br>\n              \"extension\": [<br>\n                {<br>\n                  \"url\": \"<a href=\"http://hl7.org/fhir/StructureDefinition/structuredefinition-json-type\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/structuredefinition-json-type\">http://hl7.org/fhir/StructureDefinition/structuredefinition-json-type</a>\",<br>\n                  \"valueString\": \"string\"<br>\n                },<br>\n                {<br>\n                  \"url\": \"<a href=\"http://hl7.org/fhir/StructureDefinition/structuredefinition-xml-type\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/structuredefinition-xml-type\">http://hl7.org/fhir/StructureDefinition/structuredefinition-xml-type</a>\",<br>\n                  \"valueString\": \"xs:string+\"<br>\n                }<br>\n              ]<br>\n            }<br>\n          }</p>",
        "id": 153828756,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463690425
    },
    {
        "content": "<p>Yes.</p>",
        "id": 153828757,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463690447
    },
    {
        "content": "<p>they should be proper xs: types. I'll investigate. </p>",
        "id": 153828758,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463690465
    },
    {
        "content": "<p>Would like to add structuredefinition-rdf-type</p>",
        "id": 153828759,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463690469
    },
    {
        "content": "<p>but what would we put there for RDF? </p>",
        "id": 153828760,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463690477
    },
    {
        "content": "<p>xs:string for uri, xs:date OR xs:time OR ... for dateTime</p>\n<p>Get rid of this code snippet:<br>\n  // TODO: Remove the next three lines when id.profile, etc gets fixed<br>\n      xt = xt.replace(\"+\", \"\");<br>\n      if(!xt.contains(\"xs:\"))<br>\n        xt = \"xs:\" + xt;<br>\n      return tmplt(PRIMITIVE_ELEMENT_TEMPLATE).add(\"typ\",<br>\n              xt.replaceAll(\",\\\\s*\", \" OR \").replaceAll(\"xs:\", \"xsd:\").replaceAll(\"xsd:anyURI\", \"xsd:string\").replace(\"xsd:token\", \"xsd:string\")).render();</p>",
        "id": 153828761,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463690593
    },
    {
        "content": "<p>Which I anticipate will continue to grow.</p>",
        "id": 153828762,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463690608
    },
    {
        "content": "<p>the xs/xsd is irrelvant, obviously, but I'm expecting more regex to be introduced.</p>",
        "id": 153828763,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463690658
    },
    {
        "content": "<p>with regard to the +, the + signifies that the regex contains additional information to the schema type. because in some cases, there's a regex but the schema type represents that inherently. </p>",
        "id": 153828778,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463692835
    },
    {
        "content": "<p>If I remove the + - which I should, then when you are generating the ShEx, you will not know which regexes are restating in built XSD constraints, and which are extra</p>",
        "id": 153828779,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463692880
    },
    {
        "content": "<p>I don't think this matters for you </p>",
        "id": 153828780,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463692886
    },
    {
        "content": "<p>next commit, I am standardising on xsd: for the data types, not xs:</p>",
        "id": 153828781,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463692909
    },
    {
        "content": "<p>including in the structure definitions</p>",
        "id": 153828782,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463692918
    },
    {
        "content": "<p>ok. I am going to generate an RDF extension. It will contain exactly what is in the XML extension, except I will replace anyURI with string. </p>",
        "id": 153828783,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463693024
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 153828785,
        "sender_full_name": "Harold Solbrig",
        "timestamp": 1463693654
    },
    {
        "content": "<p>ok comitteed</p>",
        "id": 153828797,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463694983
    },
    {
        "content": "<p>Lloyd never said that fhir:concept should appear in instances.  In fact, I don't want it in instances.  My concern was about the ability to *infer* the concept at different levels - sometimes the concept should appear at the CodeableConcept level, sometimes at the Coding level and sometimes at the code level, depending on the data type - and I was concerned that wasn't going to work - which is why I proposed treating all code representations as if they were constraints on CodeableConcept.  However, Tony's tests have subsequently suggested this should work.  The key thing that matters for me is that the Concept is inferred to be at the attribute level regardless of which data type was used.  I.e. If you have a CodeableConcept on Observation.code with 3 codings, the concepts associated with those codings needs to be asserted at the Observation.code level not (or at least not only) at the Observation.code.coding level.</p>",
        "id": 153829112,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463930996
    },
    {
        "content": "<p>very confusing response, Lloyd. if you don't want it in instances, then none of this matters. but I think you do. </p>",
        "id": 153829116,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463933868
    },
    {
        "content": "<p>and the key thing that matters to you is what the question is about. We're proposing that it be asserted on the Coding, not the CodeableConcept, since that's where the concept is actually established</p>",
        "id": 153829117,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463933954
    },
    {
        "content": "<p>at least, that's what the committee decided. So the onus is on you to explain why the most simple of reasoning steps can't be done</p>",
        "id": 153829118,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463934007
    },
    {
        "content": "<p>I don't want it in the instances.  It can't be depended on because it can't be inferred from the XML or JSON without external knowledge of the terminology.  I.e. It can't be dependably populated when round-tripping.  If it's going to be present, it should be from pre-processing the instance before analysis.</p>",
        "id": 153829120,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463939133
    },
    {
        "content": "<p>The concept absolutely *must* exist at the CodeableConcept level - because that's the semantic.</p>",
        "id": 153829121,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463939152
    },
    {
        "content": "<p>Multiple codings are alternative representations of the same concept</p>",
        "id": 153829122,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463939164
    },
    {
        "content": "<p>It's the Observation.code or the Procedure.code that the concepts apply to.</p>",
        "id": 153829123,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463939197
    },
    {
        "content": "<p>And all of them (from all translations) apply simultaneously.</p>",
        "id": 153829124,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463939212
    },
    {
        "content": "<p>If you have two codings on a CodeableConcept that represent concepts that are mutually exclusive, then that's a coding error.</p>",
        "id": 153829125,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463939246
    },
    {
        "content": "<p>anyway, I believe that the generated turtle examples and the generated turtle templates are all now correct. </p>",
        "id": 153829153,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463966439
    },
    {
        "content": "<p>it's time to review them, for anyone who's interested. The validator will validate turtle examples too now. </p>",
        "id": 153829154,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463966464
    },
    {
        "content": "<p>I'm now going to work on updating rdf.html to say what I think it should say. </p>",
        "id": 153829155,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463966481
    },
    {
        "content": "<p>Will there be a RDF track on the FHIR DevDays in november?</p>",
        "id": 153829277,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1464011509
    },
    {
        "content": "<p>Excellent point <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> ; would be great to see good use cases for the use of RDF representation of FHIR for reasoning purpose; do we have use cases already stated somewhere? </p>",
        "id": 153831666,
        "sender_full_name": "Zoran Milosevic",
        "timestamp": 1465000410
    },
    {
        "content": "<p>what comment is this about?</p>",
        "id": 153831717,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1465128912
    },
    {
        "content": "<p>Oops ...was a quite old comment of Josh asking 'Do we know anyone in this community who actually wants to do reasoning Based on fhir data and rdf? It would be good too hear from such people :-)'  ... sorry ... hope it was answered by now </p>",
        "id": 153831730,
        "sender_full_name": "Zoran Milosevic",
        "timestamp": 1465131169
    },
    {
        "content": "<p>we do know people, though I don't know whether there's any formal collection of their requirements</p>",
        "id": 153831735,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1465132176
    },
    {
        "content": "<p>How do I know a server supports turtle? I expected to find that here: <a href=\"http://hl7-fhir.github.io/http.html\" target=\"_blank\" title=\"http://hl7-fhir.github.io/http.html\">http://hl7-fhir.github.io/http.html</a></p>",
        "id": 153832395,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1465580491
    },
    {
        "content": "<p>Conformance.format</p>",
        "id": 153832409,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1465589620
    },
    {
        "content": "<p>Got it, but Conformance.format doesnot mention turtle.</p>",
        "id": 153832458,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1465729880
    },
    {
        "content": "<p>right. do you want to create a task to change that</p>",
        "id": 153832461,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1465767220
    },
    {
        "content": "<p>Yep</p>",
        "id": 153832517,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1465814228
    }
]