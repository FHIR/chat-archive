[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"*\">@all</span> A quick and now urgent question around the stated version for R4B, because I don't see that we ever formally resolved this</p>",
        "id": 228830164,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614884379
    },
    {
        "content": "<p>As in, will 4.6 work?<br>\nAnd is this about npm packaging mostly, or are there other considerations?</p>",
        "id": 228830963,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1614884662
    },
    {
        "content": "<p>we have published R4 as 4.0.0 and 4.0.1, and one could imagine a 4.0.2 coming.</p>\n<p>We have published R5 drafts as 4.2.0, 4.4.0, and 4.5.0. This is following our current documented practice, though there is a proposal to change this so that would have called them 5.0.0-preview1, 5.0.0-preview2, and 5.0.0-preview3</p>\n<p>So what should we do with R4B ballot #1? I see the following options:</p>\n<ul>\n<li>4.0.5, intending to publish as 4.1.0</li>\n<li>4.1.0-ballot1 (pre-adopt proposal above, though it is not even written up for FMG approval)</li>\n<li>4B.0.1  - break from semver completely (what we have now is a variant on semver, constrained by HL7 publication cycles), with a final being... 4B.1.0?</li>\n<li>4B.0.0-ballot1, which would be dollar each way </li>\n<li>4.6, which would mean R4 versions interlace with R5 versions (next R5 ballot would be 4.7)</li>\n</ul>",
        "id": 228831051,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614884706
    },
    {
        "content": "<p>it's not really about npm packaging, though whatever we choose has to be legal there, and work</p>",
        "id": 228831122,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614884728
    },
    {
        "content": "<p>4.0.5/4.1.0 makes the most sense to me.  There are far more changes in 5 so I'd not want to make the market feel this is what to expect with R5 comes out</p>",
        "id": 228831266,
        "sender_full_name": "David Pyke",
        "timestamp": 1614884773
    },
    {
        "content": "<p>What does the preview number indicate?</p>",
        "id": 228831355,
        "sender_full_name": "Catherine Hosage Norman",
        "timestamp": 1614884811
    },
    {
        "content": "<p>just the sequence of publishing previews</p>",
        "id": 228831617,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614884895
    },
    {
        "content": "<p>the big problem with the 4.0.5/4.1.0 option is that I expect that there'll be an R5C coming at us, though that's certainly not a sure thing</p>",
        "id": 228831769,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614884943
    },
    {
        "content": "<p>I think I prefer 4.1.0-ballot1</p>",
        "id": 228831808,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614884955
    },
    {
        "content": "<p>As long as we end up at 4.1.0, I think that would make the market understand what's being released.</p>",
        "id": 228831894,
        "sender_full_name": "David Pyke",
        "timestamp": 1614884995
    },
    {
        "content": "<p>though <code>4.1.0-ballot1</code> doesn't solve for 4C.</p>",
        "id": 228832080,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614885040
    },
    {
        "content": "<p>I think that R4B should become 4.1.0. so 4.1.0-preview1, 4.1.0-ballot1 makes sense to me.<br>\nR4C would be 4.2.0 so 4.2.0-preview1, 4.2.0-ballot1, etc. makes sense for that.</p>",
        "id": 228832389,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614885147
    },
    {
        "content": "<p>but we have already published 4.2.0</p>",
        "id": 228832430,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614885165
    },
    {
        "content": "<p>ah, i missed that in your initial post above.  dang, we shot ourselves in our foot</p>",
        "id": 228832516,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614885196
    },
    {
        "content": "<p>Can we do it as 4.5.1?  It is built off 4.5</p>",
        "id": 228832653,
        "sender_full_name": "David Pyke",
        "timestamp": 1614885245
    },
    {
        "content": "<p>indeed. might be more significant than the foot</p>",
        "id": 228832659,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614885246
    },
    {
        "content": "<p>4.5.1 is R5. It's not built off 4.5.0 at all</p>",
        "id": 228832702,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614885261
    },
    {
        "content": "<p>Right.  We have shot ourselves quite badly with our versioning to date</p>",
        "id": 228832896,
        "sender_full_name": "David Pyke",
        "timestamp": 1614885335
    },
    {
        "content": "<p>do we have the ability to change our R5 versions?  get them off the 4.x.x scheme?</p>",
        "id": 228832946,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614885356
    },
    {
        "content": "<p>So move R5 to 5.0-preview1 and have 4.6 be R4B?</p>",
        "id": 228833087,
        "sender_full_name": "David Pyke",
        "timestamp": 1614885401
    },
    {
        "content": "<p>That seems like it will break a bunch of things</p>",
        "id": 228833237,
        "sender_full_name": "David Pyke",
        "timestamp": 1614885460
    },
    {
        "content": "<p>go back and retrospectively reversion things? scary idea</p>",
        "id": 228833344,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614885496
    },
    {
        "content": "<p>Maybe move R5 to 4.9.x and then have R4B be 4.something?</p>",
        "id": 228833393,
        "sender_full_name": "David Pyke",
        "timestamp": 1614885517
    },
    {
        "content": "<p>IF 4.2 becomes 4.9.2 and 4.4 becomes 4.9.4 that gives us back 4.1</p>",
        "id": 228833585,
        "sender_full_name": "David Pyke",
        "timestamp": 1614885597
    },
    {
        "content": "<p>REversioning still is scary but we're not changing the major version in that case</p>",
        "id": 228833674,
        "sender_full_name": "David Pyke",
        "timestamp": 1614885617
    },
    {
        "content": "<p>It also sets a new precedent for R5 if we need to do this again</p>",
        "id": 228833758,
        "sender_full_name": "David Pyke",
        "timestamp": 1614885650
    },
    {
        "content": "<p>if you're going to re-version, I would re-version properly</p>",
        "id": 228833946,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614885723
    },
    {
        "content": "<p>So, 5.0a1, 5.0b1, etc?</p>",
        "id": 228834570,
        "sender_full_name": "David Pyke",
        "timestamp": 1614885966
    },
    {
        "content": "<p>i liked Grahame's 5.0.0-preview1, 5.0.0-preview2, and 5.0.0-preview3</p>",
        "id": 228834658,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614886001
    },
    {
        "content": "<p>If we've already broken with semver, why not call it what we've already been calling it? 4B.0.0?</p>",
        "id": 228835987,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1614886495
    },
    {
        "content": "<p>well, we haven't broken with semver. And that'll be a problem with npm</p>",
        "id": 228836075,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614886530
    },
    {
        "content": "<p>does 5.0.0-preview1 break semver?</p>",
        "id": 228836315,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614886619
    },
    {
        "content": "<p>no. the -xxxx is part of semver</p>",
        "id": 228836354,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614886638
    },
    {
        "content": "<p>that's what I thought</p>",
        "id": 228836375,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614886648
    },
    {
        "content": "<blockquote>\n<p>go back and retrospectively reversion things? scary idea</p>\n</blockquote>\n<p>But 4.2 to 4.5 are versions that are meant to exist ephemerally, in terms of actual implementations. Is moving them to 5.0-previewN going to significantly impact tooling?</p>",
        "id": 228836554,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1614886731
    },
    {
        "content": "<p>i really think we bite the bullet and unshoot ourselves (sorry for mixing metaphors):<br>\nrename the R5 preview builds to 5.0.0-previewX<br>\nreuse the 4.x.0 builds as needed<br>\nuse 4.1.0 for R4B and 4.2.0 for R4C, etc.</p>",
        "id": 228836649,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614886778
    },
    {
        "content": "<p>if we're lucky, there won't be a R4C and we won't need to re-use 4.1.0</p>",
        "id": 228837067,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614886932
    },
    {
        "content": "<blockquote>\n<p>Is moving them to 5.0-previewN going to significantly impact tooling?</p>\n</blockquote>\n<p>No. None of the reference implementations adopted them. So it's technically possible to do that without breaking anything, I think. Just work for me to deal with it</p>",
        "id": 228837277,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614887035
    },
    {
        "content": "<p>Hate to put a spanner in the works, but there is an R5 version of the C# library <a href=\"https://github.com/FirelyTeam/firely-net-sdk/tree/release/3.0.0-r5\">https://github.com/FirelyTeam/firely-net-sdk/tree/release/3.0.0-r5</a> - although I'm not sure how widely implemented that is - <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> ?</p>",
        "id": 228840541,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1614888137
    },
    {
        "content": "<p>java has one too, but it will roll forward with the R5 build. So I can't simply fix 4.5.0 immediately</p>",
        "id": 228844077,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614889475
    },
    {
        "content": "<p>EMA may go live with R5 Preview 2 (4.4.0) because that is the most recent tooling available. So we <em>don't</em> want that to get re-versioned.</p>",
        "id": 228852142,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614892744
    },
    {
        "content": "<p>what tooling?</p>",
        "id": 228853046,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614893116
    },
    {
        "content": "<p>The Microsoft FHIR server</p>",
        "id": 228854671,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614893767
    },
    {
        "content": "<p>i don't completely understand how changing the version number of some things would break existing implementations unless they were very dependent on the NPM packages of those versions.</p>",
        "id": 228854726,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614893792
    },
    {
        "content": "<p>We know that all sorts of problems and confusion are caused by clashing version numbers, or we wouldn't be having this thread</p>",
        "id": 228854877,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614893879
    },
    {
        "content": "<p>i get that, but no matter what we do, we're going to have confusion.  It makes the most sense to me to make our go-forward path make the most sense and then determine how we can get there.</p>",
        "id": 228855102,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614893969
    },
    {
        "content": "<p>There are lots of unique strings to go at without re-using old ones.</p>",
        "id": 228855278,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614894027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191651\">Rik Smithies</span> <a href=\"#narrow/stream/250700-R4A.2FB.2FR5-Discussion/topic/Version/near/228855278\">said</a>:</p>\n<blockquote>\n<p>There are lots of unique strings to go at without re-using old ones.</p>\n</blockquote>\n<p>Sure, except that R4C being 4.2.0 makes the most sense.</p>",
        "id": 228855343,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614894059
    },
    {
        "content": "<p>It matters less what the sequence is, other than aesthetics. Having clashes is very bad.</p>",
        "id": 228855524,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614894130
    },
    {
        "content": "<p>No one puts the sequences into software, but the actual numbers do get implemented.</p>",
        "id": 228855636,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614894195
    },
    {
        "content": "<p>I think that there is an inherent understand of the sequence.  When I tell people today that R5 is 4.2,  4.4, and 4.5, they think we don't understand how semantic versioning is supposed to work.</p>\n<p>i think that you could, in the interim, do the following:<br>\na) re-publish 4.5.0 as 5.0.0-preview3<br>\nb) use 5.0.0-previewX and 5.0.0-ballotX going forward<br>\nc) publish R4B as 4.1.0-preview1 and then 4.1.0-ballot1 (or just skip the preview, I suppose)<br>\nd) publish the final R4B as 4.1.0<br>\ne) leave everything else as is</p>\n<p>This avoids the renaming problem (since we're not changing 4.5.0, just republishing with a different version number) and gets us on the right track going forward.</p>\n<p>If an R4C comes along (which I don't see how, given the timeline for R5), then we can figure out what to do with that.</p>",
        "id": 228855706,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614894239
    },
    {
        "content": "<p>Having an ugly pattern is not good but re-issuing a version is very obviously bad practice. It is already bad that 5 is 4.x yes. I don't see 4C happening either.</p>",
        "id": 228856135,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614894377
    },
    {
        "content": "<p>I'll note that (a) could actually be \"publish the next R5 preview as 5.0.0-preview4\".  You could also add (a.1) eventually republish 4.2, 4.4, 4.5 as 5.0.0-preview1,2,3 when we have time and resources.</p>",
        "id": 228856416,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614894495
    },
    {
        "content": "<p>why is there a need to republish things?</p>",
        "id": 228856722,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614894609
    },
    {
        "content": "<p>that will also be confusing, with two numbers for the same thing</p>",
        "id": 228856879,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614894681
    },
    {
        "content": "<p>because the current numbers are wrong according to the about-to-be-agreed-upon scheme</p>",
        "id": 228859426,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614895662
    },
    {
        "content": "<blockquote>\n<p>about-to-be-agreed-upon scheme</p>\n</blockquote>\n<p>Since it hasn't even got a task created for it yet, it's a bit premature to say it's about to be agreed on</p>",
        "id": 228859518,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614895693
    },
    {
        "content": "<p>i like it and you thumbed it, so that's good enough for me!</p>",
        "id": 228859565,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614895713
    },
    {
        "content": "<p>but I dont see that as a big problem and any benefit would be far outweighed by having two numbers for the same thing</p>",
        "id": 228859574,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614895718
    },
    {
        "content": "<p>you don't see it as a big problem, but I do, so...</p>",
        "id": 228859607,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614895732
    },
    {
        "content": "<p>:-) who is affected by having a not very nice pattern in an old version number that we have moved on from?</p>",
        "id": 228859742,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614895781
    },
    {
        "content": "<p>but I call something X and you call it Y, surely that is going to confuse, not just be ugly</p>",
        "id": 228859917,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614895846
    },
    {
        "content": "<p>when I teach FHIR and explain the versions, I always get \"why is R5 still version 4?\" and \"what happened to 4.1?\"</p>",
        "id": 228859919,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614895848
    },
    {
        "content": "<p>so it would be better to improve that, going forward. But not in such a way so that things actually clash, or have duplicate numbers.</p>",
        "id": 228860261,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614895991
    },
    {
        "content": "<p>+1 to resetting so that we don't interlace version numbers. To go from 4.1 to 4.6 with interim 4.2 and 4.5 that are really 5 is really confusing.</p>",
        "id": 228861665,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1614896540
    },
    {
        "content": "<p>Having said that, we could just go with 4.0.2 and 4.0.3 indefinitely, on the grounds that the '4.0' bit applies to the normative aspects of the specification...</p>",
        "id": 228862048,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1614896725
    },
    {
        "content": "<p>I would say that the golden rules of versioning are: Don't re-use numbers. Don't re-number things. Use a nice semantic meaningful number. In that order. #3 is important but not at the expense of 1 and 2.</p>",
        "id": 228862236,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614896792
    },
    {
        "content": "<blockquote>\n<p>we could just go with 4.0.2 and 4.0.3</p>\n</blockquote>\n<p>There's lots of code out there that assumes that 4.0.x and 4.0.x are compatible</p>",
        "id": 228862953,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614897181
    },
    {
        "content": "<p>Since it is preview 3,  would it not be 4.5.3 ?</p>",
        "id": 228863533,
        "sender_full_name": "Catherine Hosage Norman",
        "timestamp": 1614897485
    },
    {
        "content": "<p>no, the third number is intended (in Semver) to be the patch number.  So that would imply that 4.5 had three fix releases.  that's different from a preview which occurs before the official release of 4.5 or 4.1 or 5.0</p>",
        "id": 228865763,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614898762
    },
    {
        "content": "<p>Maybe<br>\nKeep R4 and R4B and R4C using 4-series numbers<br>\nMake all future R5 versions 5-series numbers<br>\nSo <br>\n4.0.1, 4.0.2, are R4</p>\n<p>4.2.0, 4.4.0, 4.5.0, 5.0.0-preview1 etc are R5</p>\n<p>4.1.0 is kept as space for any nasty change to R4</p>\n<p>4.6.0-preview1 is R4B</p>\n<p>4.7.0-preview1 is for R4C</p>",
        "id": 228869303,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1614900580
    },
    {
        "content": "<p>I agree with Rik, a reset would be disastrous.</p>",
        "id": 228908169,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1614929027
    },
    {
        "content": "<p>In general I think divorcing the marketing version number (R4, R4B, R4C, R5) from the underlying software version number (1.2.3) is a good solution.</p>\n<p>So you can keep clean semver version numbers under the hood and respect:</p>\n<ul>\n<li>Up the major version number on any breaking/not backwards compatible change</li>\n<li>Up de minor when major features are added, no breaking changes</li>\n<li>Up the patch for any back minor corrections.</li>\n</ul>\n<p>Perhaps we can do that starting at R5?</p>",
        "id": 228922091,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1614935845
    },
    {
        "content": "<p>For R4B we can't go lower than 4.0.3.<br>\nAnd to have it be some reflection of what it was build on I would want to go any higher than the first R5 release numbers (4.2.0 it seems <a href=\"http://build.fhir.org/history.html\">http://build.fhir.org/history.html</a>)</p>\n<p>So I'd agree with Grahame go for 4.1.0-preview1 -&gt; 4.1.0-preview2 -&gt; 4.1.0</p>\n<p>Should I conclude from <a href=\"http://build.fhir.org/history.html\">http://build.fhir.org/history.html</a> that 4.1.0 also already has a meaning? Or hasn't that been released?</p>\n<p>The build version als doesn't acknowledge the existence 4.0.0 and 4.0.1, hope that will change too <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 228923700,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1614936614
    },
    {
        "content": "<p>The base issue is that SemVer isn't designed to support forking - which is what we're doing.</p>",
        "id": 228964369,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614955412
    },
    {
        "content": "<p>I agree with Lloyd's diagnosis, though I'd note that our proposed \"forking\"' structure isn't a general-case forking paradigm, because (for instance) the \"fork\" of R4B-&gt;R4C-&gt;... would never lead to an incompatible release. So we're discussing  a kind of \"partial forking\" or \"continued development on old releases\" model. I'm not familiar with other projects or standards that work this way (are there example?)</p>",
        "id": 228972932,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614958534
    },
    {
        "content": "<p>I don't know if I agree about issues with \"forking\".  SemVer works perfectly well for things like having a 4.1.3 branch separate from a 4.0.6 branch.  Many projects do this in production for long-term security updates.</p>\n<p>I think the biggest challenge is that we mangle the numbers with the pre-releases of the 'next' (e.g., R5 being 4.5).  If R5 were using 5.x, then I don't think we'd even be having this conversation (R4B would just be 4.1.0).</p>\n<p>It would be great if we could fix this.  I agree that re-using numbers is <strong>problematic</strong> (e.g., many systems have things that specify 4.5 as R5, <em>all</em> of those systems would need to be updated in order not to break), so I would personally like to see something like 4.6.0 (or even a jump to something like 4.10.0).  I would also move R5 out from 4.x (leave anything there as historical, just start building with the new numbers).</p>",
        "id": 228975454,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1614959502
    },
    {
        "content": "<blockquote>\n<p>SemVer works perfectly well for things like having a 4.1.3 branch separate from a 4.0.6 branch</p>\n</blockquote>\n<p>Yes, for security updates as you say. These historical release versions aren't generally used as a basis for new feature development though (in my experience anyway).</p>",
        "id": 228975633,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614959577
    },
    {
        "content": "<p>Like, I think Lloyd's right that we're trying to use semver outside of the usual paradigm -- but I'm not sure it's unworkably far outside. I'd feel better if we knew other projects doing something roughly similar.</p>",
        "id": 228975825,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614959657
    },
    {
        "content": "<p>Is there more to SemVer to be used for our needs than as follows:</p>\n<ul>\n<li>maj.min.x versions are always backwards compatible, basically fixes only</li>\n<li>maj.min versions can have breaking changes in FMM Z and lower (Z=3?4?), but backwards compatible for everything FMM Z+1 and above, no promotions to normative </li>\n<li>maj versions can have breaking changes, and all new normative changes.</li>\n</ul>\n<p>Not sure if there are special cases to be considered for datatypes, or other infrastructure changes.</p>",
        "id": 228976857,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1614960076
    },
    {
        "content": "<p>And I agree that forking is unrelated to this. Given that we are publishing versioned releases, I think <a href=\"https://nvie.com/posts/a-successful-git-branching-model/\">Git-flow</a> fits well. The only question is whether the CI infrastructure we have needs to be beefed up...</p>",
        "id": 228977824,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1614960439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191315\">Josh Mandel</span> <a href=\"#narrow/stream/250700-R4A.2FB.2FR5-Discussion/topic/Version/near/228975633\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>SemVer works perfectly well for things like having a 4.1.3 branch separate from a 4.0.6 branch</p>\n</blockquote>\n<p>Yes, for security updates as you say. These historical release versions aren't generally used as a basis for new feature development though (in my experience anyway).</p>\n</blockquote>\n<p>I don't think that's a failing of SemVer - if you have active development on two \"forks\" like that, everyone working on it needs to double their work to prevent divergence.  The numbering issue is tangential to that.</p>\n<p>I don't know of a development process that includes a method for working on two different bases at the same time, other than someone applying their changes to both branches.  In the context of FHIR, this is one of the items I think needs to be addressed in the release process.  What 'major' changes are causing us to even <em>have</em> an R5 branch yet - shouldn't we be assuming a 4.x by default?</p>",
        "id": 228980237,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1614961183
    },
    {
        "content": "<p>R4B isn't technically backward compatible with R4.  It's just that we're only breaking things we believe no-one cares about in R4.  If we do an R4C (rather than just a x.x.1 technical correction), there's no guarantee it would have full compatibility either.</p>",
        "id": 228981915,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614961763
    },
    {
        "content": "<p>We're really doing a Git-ish thing where we fork and then merge things back together into a future release.  I.e. R5 will end up incorporating stuff from R4B as well as the R5 development branches.  In theory, R4C changes might end up getting merged into R6...</p>",
        "id": 228984625,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614962665
    },
    {
        "content": "<p>Fair enough, but I think it means it's even more important to update the release process, e.g.:</p>\n<ul>\n<li>only breaking changes in Normative or at least FMM 'x' matter for changing the major release, or</li>\n<li>split the release into a 'core' and an 'extended' set.</li>\n</ul>\n<p>I bring it up because I don't think it is sustainable to develop in the way we're talking about here.  Adding new content in multiple divergent branches will not result in a stable specification.</p>",
        "id": 228986144,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1614963232
    },
    {
        "content": "<p>Agree that we should explore alternatives for going forward, but that should be a separate thread</p>",
        "id": 228987631,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614963726
    },
    {
        "content": "<blockquote>\n<p>R4B isn't technically backward compatible with R4. It's just that we're only breaking things we believe no-one cares about in R4. If we do an R4C (rather than just a x.x.1 technical correction), there's no guarantee it would have full compatibility either.</p>\n</blockquote>\n<p>So it fits 4.N as described, doesn't it? The incompatible changes are all at FMM-2 or lower, I think.</p>",
        "id": 228987763,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1614963773
    },
    {
        "content": "<p>I'm not sure Vassil.  I am having some difficulty reducing the <a href=\"http://hl7.org/fhir/versions.html\">versions page</a> to actual rules.</p>\n<ul>\n<li>Anything with a \"breaking change\" is supposed to increment the major version<ul>\n<li>In one sentence, a breaking change is anything that would make an application not compatible.</li>\n<li>In another, anything \"Draft\" or \"Trial Use\" (specifically including breaking changes) can change from \"version to version\", with no expectation of compatibility.</li>\n</ul>\n</li>\n</ul>\n<p>My current interpretation is that R4B is a minor revision (4.x.0), but also that there's no reason not to include a lot of items that were pushed \"out of scope\" for R4B.</p>",
        "id": 228990202,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1614964631
    },
    {
        "content": "<p>There is a <a href=\"http://hl7.org/fhir/versions.html#change\">whole discussion</a> on the distinction between breaking changes and substantive changes:</p>\n<blockquote>\n<p>The intent of these rules is to ensure that applications that are conformant to an existing specification are also conformant to subsequent versions. In practice, there are many subtle issues around inter-version change, and the exact rules are subject to further clarification based on feedback from implementers.</p>\n</blockquote>\n<p>I think the interpretation that non-breaking change applies to FMM  Z+1 for some value of Z&lt;5 does not contradict what is currently specified. In other words, it might be <code>substantive</code> but not <code>breaking</code> to adopt such an interpretation.</p>",
        "id": 228991754,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1614965216
    },
    {
        "content": "<p>Major versions \"Increments every time a breaking change is made\"</p>\n<p>and</p>\n<blockquote>\n<p>Breaking changes are changes that mean that previously conformant applications are no longer conformant to the updated specification</p>\n</blockquote>\n<p>... so any time we have a publication with breaking changes (irrespective of the FMM of the resources where the changes occur), that requires a major version increment. But we should be willing to do that as often as needed to support the community.</p>",
        "id": 228997029,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614967264
    },
    {
        "content": "<p>And we're certainly not wanting to increment major version for R4B - but it's absolutely got breaking changes (renaming resources, restructuring resources, dropping resources, etc.)</p>",
        "id": 228999001,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614968002
    },
    {
        "content": "<blockquote>\n<p>And we're certainly not wanting to increment major version for R4B - but it's absolutely got breaking changes</p>\n</blockquote>\n<p>Uh, that seems to violate the rules.</p>",
        "id": 228999814,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614968328
    },
    {
        "content": "<p>Yup.  But if we increment, then R4B gets a label of 5.0.0 and R5 becomes 6.0.0 - and that's true craziness...</p>",
        "id": 229000325,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614968528
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>And we're certainly not wanting to increment major version for R4B - but it's absolutely got breaking changes</p>\n</blockquote>\n<p>Uh, that seems to violate the rules.</p>\n</blockquote>\n<p>Not if we follow the blurb I quoted and clarify that \"breaking changes\" apply to certain FMM and higher. I think that is consistent with \"the exact rules are subject to further clarification based on feedback from implementers\". All the breaking change in R4B are things that even if they were implemented, it is fully expected that such implementation will break. We are just clarifying where major version breakage boundaries apply.</p>",
        "id": 229001138,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1614968820
    },
    {
        "content": "<p>for the Medication Definition changes they were FMM level 0 before, so it could be argued that they were not even resources ...</p>",
        "id": 229002256,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614969224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/250700-R4A.2FB.2FR5-Discussion/topic/Version/near/229000325\">said</a>:</p>\n<blockquote>\n<p>Yup.  But if we increment, then R4B gets a label of 5.0.0 and R5 becomes 6.0.0 - and that's true craziness...</p>\n</blockquote>\n<p>Or we get FHIR R4 v5.0, v6.0, etc.  Like HL7v2 version 10.5, DICOM3 version 2021a, etc.  Seems like a common thing, actually.</p>",
        "id": 229002917,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1614969474
    },
    {
        "content": "<p>Difference is that I don't think we're prepared to say that future versions of FHIR will all be backward compatible with R4 - and that's an expectation in the v2 and DICOM space</p>",
        "id": 229003797,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614969839
    },
    {
        "content": "<p>Gino had convinced me that this wasn't the firm expectation for DICOM (just a strong community preference -- though I may have misunderstood).</p>",
        "id": 229020544,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614976627
    },
    {
        "content": "<p>It depends on your definition of compatible.</p>\n<p>One example from DICOM is retiring SOP Classes (typically when replaced by a newer version, e.g., a new, incompatible version of \"Ultrasound data\").  Once retired, future implementations aren't likely to accept/process the old one.</p>\n<p>It doesn't grant any sort of 'magic' compatibility, but the protocol defines how nodes negotiate <em>what</em> is supported by each, and the definitions of <em>those</em> items need to remain compatible.  Because of the naming conventions in FHIR, the concept doesn't map exactly.  It would be as if each resource had its own versioning - servers would indicate that they support <code>Patient v3</code>, <code>Patient v4</code>, etc..</p>\n<p>As for v2, I don't know the process for adding/changing content.  But I believe version 2.8.2 has additional content over 2.2 (e.g., new messages/segments).  I assume that new content is not perfect every time it is proposed, so I also assume there is some process where those changes are added, tested, and revised (and there is probably no expectation of compatibility during that process).</p>\n<p>Right now, FHIR is developed by including those new/experimental/exploratory/under development resources in the same bucket as the <code>Normative</code> safe-to-use things.  The current release problems are because of that, and the versioning issue is just a symptom.</p>",
        "id": 229026312,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1614979022
    },
    {
        "content": "<blockquote>\n<p>retiring SOP Classes</p>\n</blockquote>\n<p>Retirement is a good example of how to manage changes without breaking compatibility; it introduces a new feature and deprecates an old one without breaking anything. I thought you were telling me yesterday that it's also allowable in DICOM to break things, but I may have misunderstood.</p>",
        "id": 229031439,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614981568
    },
    {
        "content": "<p>I think asserting that only normative is \"safe to use\" isn't the right description.  I don't think AllergyIntolerance or Encounter have been unsafe to use.  But they still could change in breaking ways.  And stuff like Medication governance stuff has been completely refactored (and could end up getting refactored further).  If we published R4 with only normative stuff, it would have been useless.  Even with R5, certain essential things might not hit normative.  (E.g. PA is nervous about locking down Practitioner)</p>",
        "id": 229031441,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614981570
    },
    {
        "content": "<p>Josh, I apologize for any confusion.  Retirement is the term for obsoleting in DICOM - one of the examples we talked through live was 'retiring' the WADO-WS protocol.  It's a breaking change because that protocol is no longer defined.  I think of the two interchangeably, but perhaps that is a better example.</p>",
        "id": 229034324,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1614982818
    },
    {
        "content": "<p>Lloyd, I meant \"safe to use\" as shorthand for \"you can be confident that this area of the specification is unlikely to have breaking changes, so you can feel safe in the stability of the definition\", sorry if that wasn't clear from context.  Hopefully any resource in any published version is 'safe' in that it won't cause harm to use it.</p>\n<p>If <code>AllergyIntolerance</code> or <code>Encounter</code> are supposed to be in that bucket, it is a problem that they are still low FMM (e.g., 2/3) and we (as a community) should focus on advancing them.</p>\n<p>In part, I think the long release cycles are contributing to this.  I can't speak to those two resources in particular, but I can speak somewhat authoritatively on the recent history of <code>Subscription</code>.  The bulk of the work for the redesign was done in 2019, with many refinements in 2020 (particularly early in the year).  For the past... 9-ish months, most of the changes have been related to either documentation (add more) or channels which had not been exercised in the previous years (specifically websockets).</p>\n<p>As far as I know R5 is still at least a year out, so <em>optimistically</em>, we're looking at 2022 for publication.  We cannot advance the FMM level on anything before then, since there will not be production implementations of resources that haven't been published.  By the time those production implementations are out for feedback (2023-2024?), I don't know who is going to be invested enough to push on getting the FMM increased.  For reference, we have already had a lot of core participants move on to other projects during the past couple of years.</p>\n<p>I also don't expect to see much in the way of changes to the resources in the meantime, because we need more real-world experience to go further and we can't get that without a release.</p>",
        "id": 229037696,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1614984622
    },
    {
        "content": "<p>Continuing the discussion here: <a href=\"#narrow/stream/250700-R4A.2FB.2FR5-Discussion/topic/Managing.20change\">https://chat.fhir.org/#narrow/stream/250700-R4A.2FB.2FR5-Discussion/topic/Managing.20change</a></p>",
        "id": 229041429,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614986595
    },
    {
        "content": "<p>the way that the version numbering works at the moment is that we have, instead of major.minor.path, publication.major.minor. </p>\n<p>4.x.x means R4, and anything derived from R4 until we publish R5. <br>\n4.0.0 and 4.0.1 means that there were minor changes but nothing that changed systems that implement the specification (though systems that use metadata from the spec were all broken)<br>\n4.0.0 and 4.1.x means that there are breaking changes, but still in the R4 space.</p>",
        "id": 229533924,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1615316768
    },
    {
        "content": "<p>the format looks like semver, but isn't. I don't think we can get closer, and I would strongly oppose separating the stated version and the technical version. R4 should be 4.x.x - that makes life simple for many implementers.</p>",
        "id": 229534121,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1615316843
    },
    {
        "content": "<p>I don't think that the system works well once we start balloting the next major version - it's no longer meaningfully R4. So that's the change I think we should consider, but I don't think I can pre-adopt for a balloted version right now. I've mulled over this for 48 hours while distracted by technical issues in the content to be balloted, and now I have to make the change</p>",
        "id": 229534531,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1615316983
    },
    {
        "content": "<p>so the ballot will be 4.1.0</p>",
        "id": 229534552,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1615316993
    },
    {
        "content": "<p>that leaves hanging the question of what the final version of R4B will be :-( but we have time to consider that</p>",
        "id": 229535036,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1615317167
    },
    {
        "content": "<p>Are we constrained to the space of <em>real</em> numbers? :)</p>",
        "id": 229542550,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615319857
    },
    {
        "content": "<p>4.1-1i does have a certain ring to it</p>",
        "id": 229542914,
        "sender_full_name": "David Pyke",
        "timestamp": 1615319990
    },
    {
        "content": "<p>4.1.0,-1i</p>",
        "id": 229546334,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1615321230
    },
    {
        "content": "<p><a href=\"http://sentimentalversioning.org/\">http://sentimentalversioning.org/</a></p>",
        "id": 229547152,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1615321545
    },
    {
        "content": "<p>Actually, a lot of information can be conveyed even restricting ourselves to reals if we allow expressions for each term.  4.2^2.3^7.  =)</p>",
        "id": 229547164,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1615321552
    },
    {
        "content": "<p>I hope to be retired before we have that many versions</p>",
        "id": 229550998,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1615322904
    },
    {
        "content": "<p>Following 5.0.0-preview1 logic (which is what I always thought it would be and caught off guard with when it wasn't), I'd expect 4.1.0-ballot1 with intent to publish as 4.1.0. Since this version adds functionality in semver terms it makes sense to go with a higher minor version.</p>\n<p>I've come to hate and love semver for its labeling rigidity around backward incompatible changes as a major. All vendors I know though are diehard fans of semver (maybe except when they produce versions themselves :-)</p>",
        "id": 229723707,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1615403172
    },
    {
        "content": "<p>As a more <a class=\"stream\" data-stream-id=\"179160\" href=\"/#narrow/stream/179160-social\">#social</a> note: <span class=\"user-mention\" data-user-id=\"198646\">@Niek van Galen</span> took it upon himself to translate <a href=\"http://semver.org\">semver.org</a> rules to Dutch and with review of myself and some others it actually came to be: <a href=\"https://semver.org/lang/nl/\">https://semver.org/lang/nl/</a></p>",
        "id": 229763470,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1615417505
    },
    {
        "content": "<blockquote>\n<p>that leaves hanging the question of what the final version of R4B will be :-( but we have time to consider that</p>\n</blockquote>\n<p>Is there current thinking about what r4b will be (and where/how we'd support version numbering for such a thing as r4c, if we didn't intend to rule that out, at the level of our versioning conventions)?</p>\n<p>(TSC is taking up related discussion, and ok hoping to tie this back to our plans in FHIR.)</p>",
        "id": 242616035,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1623684981
    },
    {
        "content": "<p>discussion on FMG this week, I hope</p>",
        "id": 242627451,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1623689573
    }
]