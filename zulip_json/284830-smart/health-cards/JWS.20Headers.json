[
    {
        "content": "<p>Here's another question for the group.  When I look at the JWS examples you provide, the header values for zip and type  show up when I planainly parse the JWT.  When I create the JWS in my code, these headers are \"protected\" meaningin they only show up if I validate the JWS.  IS this a problem?</p>",
        "id": 236278968,
        "sender_full_name": "Richard Braman (FLY.HEALTH)",
        "timestamp": 1619494802
    },
    {
        "content": "<p>The term \"protected\" in the JWS spec means <em>authenticated</em> -- i.e., data that feeds into the digest that's used for creating a signature.</p>",
        "id": 236279173,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1619495011
    },
    {
        "content": "<p>SMART Health Cards uses the JWS compact serialization (those three b64url-encoded strings separated by dots...), and in that serialization <em>all headers</em> are protected. That doesn't mean encrypted or anything -- just \"signed over\". It sounds like maybe your library is helping you avoid trouble by only showing you the decoded header after validation, to prevent your accidentally \"trusting\" header fields that haven't been validated. That's fair, but a verifier does need to peek into the headers (and payload!) before validating a Health Card, to extract the key id and issuer.</p>",
        "id": 236279227,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1619495049
    },
    {
        "content": "<p>For reference, <a href=\"https://tools.ietf.org/html/rfc7515#section-3.1\">https://tools.ietf.org/html/rfc7515#section-3.1</a> is the source of truth:</p>\n<blockquote>\n<p>In the JWS Compact Serialization, no JWS Unprotected Header is used.<br>\n  In this case, the JOSE Header and the JWS Protected Header are the<br>\n  same.</p>\n</blockquote>",
        "id": 236279256,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1619495090
    },
    {
        "content": "<p>so, I have a shc that's passing all the validation exercises except for the JWS zip header, because as this post indicates, the zip header is protected.  Is this a bug in the validator?<br>\nHere is my shc:</p>\n<div class=\"codehilite\"><pre><span></span><code>shc:/56762959532654603460292540772804336028702864716745222809286555723727457252633606564212243706667139775528376455295524257255600461382512334542083442422807532608753442593654622460573601064129336112327424350369044321331110425927776571536726202203307410204304072361397572223576275338636343003475090622077203282009541122650573355764774570117423400605723537365003453472121041055745074321282304566770577270772871417560050568310458036441612054635720572728412211753269442922345658506227625227065228453400220630090540255531326860766873637676682162403512203510400704335339612769770938403212720925005731652210400705571061033577215362656341036510230452290774342168660339056222566903555522723732215255263877277212583731664362075822076239306662402822664424122141712156452376620840211132607311742107732374615029080824575803326333072564253076302027120353353558740374334009203545603724063906773807773073747062635934074067267525385632401122375369373927356006632961390326630345254243557627703265662629225972312808242032047220606912313752277172716977562476366345583023281223210530117453525467564353300770123973634168033428537274396435353423607727382300267561434407257566066766033006313722100612043964703542005062327308587131273260395361077724281132602432630037033639093810393777580771527331055523322145235857532275375765552265384330642625344450416655114468713324310712084462647625097642613355065453645273405233635473532672250807296426607340616106740568283869621145397472743931507731215473057324047537443669653474014569403458115533303356072344263276283459642100507271410403222466611131101136642528412043114370743908731069603629086804331208665275763056401141375424110634716229533803712274\n</code></pre></div>\n<p>here is the error as shown in the validator:</p>\n<div class=\"codehilite\"><pre><span></span><code>{&quot;message&quot;:&quot;JWS header missing &#39;zip&#39; property.&quot;,&quot;code&quot;:107,&quot;level&quot;:3}\n</code></pre></div>",
        "id": 239372259,
        "sender_full_name": "Richard Braman (FLY.HEALTH)",
        "timestamp": 1621405360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"396697\">@Richard Braman (FLY.HEALTH)</span> the example you provided appears to be missing the <code>\"zip\": \"DEF\"</code> header.</p>\n<p>If we take just the numeric segment of your QR code (<code>56762959...</code>) and reconstruct the JWS</p>\n<p>e.g. in node.js</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">const</span> <span class=\"nx\">numeric</span> <span class=\"o\">=</span> <span class=\"s1\">'56762959...'</span>\n<span class=\"kd\">const</span> <span class=\"nx\">decoded</span> <span class=\"o\">=</span> <span class=\"nx\">numeric</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"sr\">/(..?)/g</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"p\">=&gt;</span> <span class=\"nb\">String</span><span class=\"p\">.</span><span class=\"nx\">fromCharCode</span><span class=\"p\">(</span><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">,</span> <span class=\"mf\">10</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mf\">45</span><span class=\"p\">)).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">)</span> <span class=\"c1\">// Split into groups of 2 numeric characters each of which represent a single JWS char</span>\n<span class=\"kd\">const</span> <span class=\"nx\">header</span> <span class=\"o\">=</span> <span class=\"nx\">decoded</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)[</span><span class=\"mf\">0</span><span class=\"p\">]</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">header</span><span class=\"p\">)</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">Buffer</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">(</span><span class=\"nx\">header</span><span class=\"p\">,</span> <span class=\"s1\">'base64'</span><span class=\"p\">).</span><span class=\"nx\">toString</span><span class=\"p\">(</span><span class=\"s1\">'utf8'</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>You'll find that the header is <code>eyJhbGciOiJFUzI1NiIsImtpZCI6InduRHZualQ3eW9ER3otTzdIRmdJdEFudi1jSF9NZW5OWWI4bG5xOWhQckEifQ</code></p>\n<p>Base64 decoding this gives: <code>{\"alg\":\"ES256\",\"kid\":\"wnDvnjT7yoDGz-O7HFgItAnv-cH_MenNYb8lnq9hPrA\"}</code></p>\n<p>You can contrast this with the <a href=\"https://smarthealth.cards/examples/example-00-d-jws.txt\">Example 0 JWS from the spec</a> where the JWS header is <code>eyJ6aXAiOiJERUYiLCJhbGciOiJFUzI1NiIsImtpZCI6IjNLZmRnLVh3UC03Z1h5eXd0VWZVQUR3QnVtRE9QS01ReC1pRUxMMTFXOXMifQ</code> and is Base64 decoded to <code>{\"zip\":\"DEF\",\"alg\":\"ES256\",\"kid\":\"3Kfdg-XwP-7gXyywtUfUADwBumDOPKMQx-iELL11W9s\"}</code></p>",
        "id": 239407901,
        "sender_full_name": "Reece Adamson",
        "timestamp": 1621424580
    },
    {
        "content": "<p>I also reconstructed the payload and didn't see the <code>\"DEF\": \"zip\"</code> header there either (but it shouldn't be in the payload anyways)</p>\n<p>e.g.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Reconstructed Payload</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">const</span> <span class=\"nx\">payload</span> <span class=\"o\">=</span> <span class=\"nx\">decoded</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)[</span><span class=\"mf\">1</span><span class=\"p\">]</span>\n<span class=\"kd\">const</span> <span class=\"nx\">decompayload</span> <span class=\"o\">=</span> <span class=\"nx\">zlib</span><span class=\"p\">.</span><span class=\"nx\">inflateRawSync</span><span class=\"p\">(</span><span class=\"nx\">Buffer</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">,</span> <span class=\"s1\">'base64'</span><span class=\"p\">))</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">decompayload</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">(</span><span class=\"s1\">'utf8'</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://www.w3.org/2018/credentials/examples/v1\"],\"iss\":\"https://cert.health\",\"nbf\":1621404754,\"vc\":{\"type\":[\"https://smarthealth.cards#health-card\"],\"credentialSubject\":{\"fhirVersion\":\"4.0.1\",\"fhirBundle\":{\"resourceType\":\"Bundle\",\"type\":\"collection\",\"entry\":[{\"fullUrl\":\"resource:0\",\"resource\":{\"resourceType\":\"Patient\",\"name\":[{\"family\":\"Von Rueden39\",\"given\":[\"Abe704\",\"C.\"]}],\"birthDate\":\"1961-01-20\",\"telecom\":[{\"system\":\"email\",\"value\":\"abe604.vonrueden37@gmail.com\",\"use\":\"work\"}]}},{\"fullUrl\":\"resource:1\",\"resource\":{\"resourceType\":\"Immunization\",\"status\":\"completed\",\"vaccineCode\":{\"coding\":[{\"system\":\"http://hl7.org/fhir/sid/cvx\",\"code\":\"208\"}]},\"patient\":{\"reference\":\"resource:0\"},\"occurrenceDateTime\":\"2021-01-01\",\"performer\":[{\"actor\":{\"display\":\"ABC General Hospital\"}}],\"lotNumber\":\"0000002\"}},{\"fullUrl\":\"resource:2\",\"resource\":{\"resourceType\":\"Immunization\",\"status\":\"completed\",\"vaccineCode\":{\"coding\":[{\"system\":\"http://hl7.org/fhir/sid/cvx\",\"code\":\"208\"}]},\"patient\":{\"reference\":\"resource:0\"},\"occurrenceDateTime\":\"2021-01-29\",\"performer\":[{\"actor\":{\"display\":\"ABC General Hospital\"}}],\"lotNumber\":\"0000008\"}}]}}}}</p>\n</div></div>",
        "id": 239408187,
        "sender_full_name": "Reece Adamson",
        "timestamp": 1621424741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396697\">Richard Braman (FLY.HEALTH)</span> <a href=\"#narrow/stream/284830-smart.2Fhealth-cards/topic/JWS.20Headers/near/239372259\">said</a>:</p>\n<blockquote>\n<p>so, I have a shc that's passing all the validation exercises except for the JWS zip header, because as this post indicates, the zip header is protected.  Is this a bug in the validator?<br>\nHere is my shc: [...]</p>\n</blockquote>\n<p>You are indeed missing the zip header, as you can see when running the validator on the command line:<br>\n<code>node . -p qrnumeric.txt -t qrnumeric -l debug</code><br>\n(where qrnumeric.txt contains the code your provided)</p>\n<div class=\"codehilite\"><pre><span></span><code>JWS-compact\n         │\n         ├─ Debug\n         │    · JWS.header = {&quot;alg&quot;:&quot;ES256&quot;,&quot;kid&quot;:&quot;wnDvnjT7yoDGz-O7HFgItAnv-cH_MenNYb8lnq9hPrA&quot;}\n</code></pre></div>",
        "id": 239421306,
        "sender_full_name": "Christian Paquin",
        "timestamp": 1621430077
    },
    {
        "content": "<p>I wonder if we should just make zip compression implicit, so it'd be okay for issuers to omit the header. It's not like we provide a way to create a health card <em>without</em> compressing the payload, so the header isn't really communicating information.(In future, if we ever need to describe different encoding options we could add a header like <code>smw: 2</code> or whatever)</p>",
        "id": 239425453,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1621431566
    },
    {
        "content": "<p>I got it working .  it was some delicacy in the node-jose library.  It works now. </p>\n<div class=\"codehilite\"><pre><span></span><code>shc:/5676290952432060346029243740446031222959532654603460292540772804336028702864716745222809286555723727457252633606564212243706667139775528376455295524257255600461382512334542083442422807532608753442593654622460573601064131315359332124357641683164721205433161770363323729743636592231672435701033715605205668066470535231125509532723583667282009546433353455254104555740007461400605723537365032205600121004753925074323282312355405250437631242760721441004250774094468595872767358275962686756442629703259273536502221767123105728083300270041037207426464715741533168546970663221581033285059396111127134544270350833767764776543670373241067366108507135074305220629353071721270355566653920092667616345400739033471710329042474635903296360345509626143206945753625742805414028074032445833106069526054672376700840371132377376585907726974585028250824576203326333072564253076305827120345575736740374273641203970756630536753046754633135077070085932114467427525395632031122415269563940676803633361390426630344634243557627723265662629227572312045222026520625567773312152277172716961562438366545585321245659581025544433003444733959631256546706766241713561263166240877067574304053092839750576361065367235525524642164031066065250345256047509067208382311445352757466607307542874223523265931675562332835002464057670034231646974120603742426540923393843301003096670033855326075676921107104636025336563590621713162670474734238036767735312554053042660457327676943221111627723384368397510073368603667633461431131702709730376744373066921295540263435082358013966744233703311673267701263207363746654436657302024660028770339323033202265225523764076720930105326283128430865526074596137753954684168533862550359522142430758445552587158\n</code></pre></div>",
        "id": 239459637,
        "sender_full_name": "Richard Braman (FLY.HEALTH)",
        "timestamp": 1621443360
    }
]