[
    {
        "content": "<p>This operation doesn't have a formal definition anywhere yet?</p>",
        "id": 252036703,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630801588
    },
    {
        "content": "<p>It has a JSON operation definition</p>",
        "id": 252037770,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630802790
    },
    {
        "content": "<p>Here in the optimistically pluralized and not widely advertised artifacts directory <a href=\"https://github.com/smart-on-fhir/health-cards/tree/main/docs/artifacts\">https://github.com/smart-on-fhir/health-cards/tree/main/docs/artifacts</a></p>",
        "id": 252037811,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630802840
    },
    {
        "content": "<p>(I don't know if anyone is using this to directly drive any kind of behavior, so I expect it'll turn out to be broken some ways.)</p>",
        "id": 252037890,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630802941
    },
    {
        "content": "<p>so this will live in the IG eventually, right? The canonical URL will be <code>http://hl7.org/fhir/uv/shc-vaccination/OperationDefinition/health-cards-issue</code> ?</p>",
        "id": 252038217,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630803339
    },
    {
        "content": "<p>I just decided not to generate from it too ;-)  (which means I just want the canonical URL, though I can always make a temporary one)</p>",
        "id": 252038281,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630803392
    },
    {
        "content": "<p>The Vaccination/Testing IG is particular to the data profiling, so it's not where we <em>think</em> a general purpose issuance operation belongs. We still need to bring the core framework through HL7 process.</p>",
        "id": 252038824,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630804018
    },
    {
        "content": "<p>ok. well, I can change it later.</p>",
        "id": 252039211,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630804467
    },
    {
        "content": "<p>this is a bit odd for me:</p>",
        "id": 252039215,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630804472
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">\"resourceType\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Parameters\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"parameter\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"verifiableCredential\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"valueString\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;&lt;Health Card as JWS&gt;&gt;\"</span>\n  <span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"resourceLink\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"part\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"vcIndex\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"valueInteger\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n      <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bundledResource\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"valueUri\"</span><span class=\"p\">:</span> <span class=\"s2\">\"resource:2\"</span>\n      <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hostedResource\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"valueUri\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://fhir.example.org/Immunization/123\"</span>\n    <span class=\"p\">}]</span>\n  <span class=\"p\">}]</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 252039217,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630804477
    },
    {
        "content": "<p>wouldn't this be better:</p>",
        "id": 252039220,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630804483
    },
    {
        "content": "<p>this seems more natural:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">\"resourceType\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Parameters\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"parameter\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"verifiableCredential\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"part\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"signedCredential\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"valueString\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;&lt;Health Card as JWS&gt;&gt;\"</span>\n      <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"resourceLink\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"part\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n          <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bundledResource\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"valueUri\"</span><span class=\"p\">:</span> <span class=\"s2\">\"resource:2\"</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hostedResource\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"valueUri\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://fhir.example.org/Immunization/123\"</span>\n      <span class=\"p\">}]</span>\n    <span class=\"p\">}]</span>\n  <span class=\"p\">}]</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 252039319,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630804616
    },
    {
        "content": "<p>group the card with the links, and get rid of vcIndex</p>",
        "id": 252039344,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630804666
    },
    {
        "content": "<p><a href=\"https://github.com/smart-on-fhir/health-cards/issues/88\">https://github.com/smart-on-fhir/health-cards/issues/88</a> has discussion; short answer is we didn't want to break our API at the point when we introduced these properties</p>",
        "id": 252039629,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630805035
    },
    {
        "content": "<p>If no results are available, a Parameters resource without any parameter is returned:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">\"resourceType\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Parameters\"</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 252040599,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630806271
    },
    {
        "content": "<p>That's what we say... is this not kosher?</p>",
        "id": 252040830,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630806584
    },
    {
        "content": "<p>I think it is, and I'm sure we've specifically discussed this before - it's the only circumstance where you have an empty resource. But it feels to me like it would be appropriate for the server side to return some string message in these cases, so that a user can be communicated with concerning why. And if the server doesn't want to say anything of substance, it can pick it's own non-descript wording to present to the user.</p>",
        "id": 252040997,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630806809
    },
    {
        "content": "<p>I'm thinking this will minimise human support needed. (\"I don't get any cards, just a message that 'there's no results' - I didn't want any results, just my card!\")</p>",
        "id": 252041086,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630806902
    },
    {
        "content": "<p>It's analogous to an empty search result in my thinking; if the system has no data, it's not necessarily something that needs explaining. But for sure we could add an optional param</p>",
        "id": 252041119,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630806937
    },
    {
        "content": "<p>Users aren't going to be calling this API any more than they call a search API. Health apps will ask for data of all kinds on behalf of the user without explicitly showing the user anything if there's no data.</p>",
        "id": 252041222,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630807059
    },
    {
        "content": "<p>me, I'm thinking that's not so true. Users will <em>want</em> their cards. They'll really need them. I'm imagining it will be a specific operation, not just something done in the background by the app. \"Get me my cards.\" Perhaps I'm wrong.</p>",
        "id": 252042510,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630808501
    },
    {
        "content": "<p>That's fair; most experience today with users explicitly requesting health cards has been downloading via state public health portals rather than connecting an app to call this operation via SMART on FHIR. For cases where the API is supported, It has been as part of generic patient APIs from healthcare providers (who may have all kinds of USCDI data and won't necessarily be expected to have health cards for most patients, unlike the state portals which can offer cards to the whole population).</p>",
        "id": 252044229,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630810540
    },
    {
        "content": "<p>I'm not sure what kind of message would really cut down on support calls if a user was expecting their health app to fetch a card and it couldn't, but I'm certainly in favor of adding optional response properties to ensure issuers can pass back a message if they want to. (As an alternative or additionally, I'd  think about having issuers statically advertise a URL for health cards support.)</p>",
        "id": 252044428,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630810760
    },
    {
        "content": "<p>more that it might cut down the difficulty of resolving the support call, rather than their frequency. But: yes, search can return messages that inform about issues, and I think this could too</p>",
        "id": 252050846,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630818481
    },
    {
        "content": "<p>and agree about support info - in the .well-known?</p>",
        "id": 252050887,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630818499
    },
    {
        "content": "<p>Field in [FHIRServer base].well-known/smart-configuration would work for API based issuers, We might want to provide an \".healthCardIss\" property in that file, and then push other health cards issuer data into a file that's discoverable relative to the health card iss url, so the same format could be used for issuers that don't support the API. Some discussion at <a href=\"https://github.com/the-commons-project/vci-directory/issues/52\">https://github.com/the-commons-project/vci-directory/issues/52</a> (<code>website</code> field for example) about what these metadata might be.  (That conversation is about metadata in the directory, but as Paul points out it could just as well apply to metadata published by issuers.)</p>",
        "id": 252079180,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630851107
    },
    {
        "content": "<p>with regard to credential types, I can't currently request both immunization and lab test covid cards, right? I can say 'all covid cards', but not more than one type of covid card?</p>",
        "id": 252100781,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630874680
    },
    {
        "content": "<p>One of the things that's come up a lot with search is unrecognised parameter values. Given that the health-cards operation is taking a Parameters resource as a post, there's no reason for it to contain added parameters from the stack anywhere, and so unrecognised parameters should cause an error. Or at least, the expected behavior should be clarified somewhere</p>",
        "id": 252101105,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630875105
    },
    {
        "content": "<p>In a single API call, you supply a list of types that the server ANDs together. If you need other cards, you make another API call. (You can always just ask the server for all health cards it has by passing a generic type like <code>#health-card</code>.)</p>",
        "id": 252105847,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630880603
    },
    {
        "content": "<p>I can. The idea that the card meanings intersect, while having different and orthogonal granularities... it's kind of screwy, really. if there's another type added (like conditions) the logic will suddenly get much more intricate. I don't have any suggestions, but if more sub-types are added, we'll need to be more specific about groupings and logic</p>",
        "id": 252114135,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630890194
    },
    {
        "content": "<p>Are you thinking from the issuance perspective or the sharing perspective? The aim has been to get issuers to classify cards up front so that downstream selection logic can work even for wallet apps without a deep understanding of FHIR (i.e., all they need to know is that every card has types). If we relax this goal, we could just have queries written as fhirpath expressions over bundles and ask wallets to evaluate those against all cards stored, to figure out what matches.</p>",
        "id": 252114811,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630891074
    },
    {
        "content": "<p>I was just thinking in terms of responding to the operation. The logic is a bit screwy. Her'</p>",
        "id": 252115156,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630891502
    },
    {
        "content": "<p>here's my pseudo-code:</p>",
        "id": 252115168,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630891511
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>boolean covid = is https://smarthealth.cards#covid19 in credentials?\nif (https://smarthealth.cards#health-card or https://smarthealth.cards#immunization) and not (https://smarthealth.cards#laboratory) then\n  makeImmunizationCard(...)\nif (https://smarthealth.cards#health-card or https://smarthealth.cards#immunization) and not (https://smarthealth.cards#immunization) then\n  makeLmmunizationCard(...)\n</code></pre></div>",
        "id": 252116249,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630892884
    },
    {
        "content": "<p>unless I have it wrong. But I don't think I do. But each new credentialType is going to complicate that logic significantly.</p>",
        "id": 252116260,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630892917
    },
    {
        "content": "<p>I thoroughly endorse making wallet apps simple, and the credential type is fine. it's just the weird mix in the request that will be difficult to manage going forward</p>",
        "id": 252116288,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630892965
    },
    {
        "content": "<p>I don't think you need to explicitly check for the #health-card type in your logic, since all health cards will have it. otherwise looks right to me (and if we wind up having loads more types, let's think about how to structure more cleanly.)</p>",
        "id": 252116476,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630893163
    },
    {
        "content": "<blockquote>\n<p>since all health cards will have it</p>\n</blockquote>\n<p>But not all requests to $health-cards-issue will have it? I wasn't sure how to think about that.</p>",
        "id": 252116508,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630893241
    },
    {
        "content": "<p>Requests can omit this if they're supplying a subtype like #imnunization becsuse the supertype is logically implied</p>",
        "id": 252116565,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630893293
    },
    {
        "content": "<p>(the other thing you can do is to always pregenerate cards for the types you support whenever new data arrives, and at issuance API call time just select among them the same way a wallet would.)</p>",
        "id": 252116566,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630893295
    },
    {
        "content": "<blockquote>\n<p>Requests can omit this if they're supplying a subtype like #imnunization becsuse it's logically implies.</p>\n</blockquote>\n<p>What does it mean if you don't specify it, and just specify https://smarthealth.cards#covid19? Nothing will be returned?</p>",
        "id": 252116599,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630893352
    },
    {
        "content": "<p>If you ask for #covid19 as your only request type, that's equivalent to asking for #covid19 and #health-card together. You should receive any Covid immunization cards and any Covid lab result cards that the server can provide.</p>",
        "id": 252116702,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630893462
    },
    {
        "content": "<p><a href=\"https://spec.smarthealth.cards/vocabulary\">https://spec.smarthealth.cards/vocabulary</a> describes the types/subtypes</p>",
        "id": 252116768,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630893515
    },
    {
        "content": "<p>so asking for https://smarthealth.cards#health-card or not is irrelevant? It's a useless parameter, even though the example says you provide it</p>",
        "id": 252116772,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630893527
    },
    {
        "content": "<p>I think it's useless if you're already supplying another type that's a subtype, since \"A intersect with B\" is the same as \"B\" if B is a subset of A.</p>",
        "id": 252116851,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630893606
    },
    {
        "content": "<p>well, I think that should be documented, since it's not obvious.</p>",
        "id": 252116921,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630893646
    },
    {
        "content": "<p>(It's arguably useless also if it's the only parameter, but it's explicit, and allows for a future where we change up the type system.)</p>",
        "id": 252116944,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630893677
    },
    {
        "content": "<p>the other issue is that correct processing of the request requires for you to not ignore credentialTypes you do not recognise</p>",
        "id": 252116950,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630893687
    },
    {
        "content": "<p>That's certainly true (it's an \"issue\" to make sure that's documented/understood, but I don't think it's a design problem - agreed?)</p>",
        "id": 252117053,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630893751
    },
    {
        "content": "<p>(understanding all requested types is implied, since every card you return needs to include all of the requested types.)</p>",
        "id": 252117098,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630893815
    },
    {
        "content": "<p>well, I feel like it's both. Sure, we could call ourselves happy with that design, but it feels fragile to me - resistant to graceful forward change</p>",
        "id": 252117109,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630893833
    },
    {
        "content": "<p>You can't satisfy the request if you don't understand it.</p>",
        "id": 252117184,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630893861
    },
    {
        "content": "<p>generally, we aim for you satisfy the request to the degree you do understand it. That's not always safe, but it's must more robust if things can be designed that way. This piece of API doesn't have that resilience to my way of thinking</p>",
        "id": 252117222,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630893910
    },
    {
        "content": "<p>Advertising supported types (per the VCI modeling issue linked above) and failing if a client requests something unsupported shouldn't (?) be fragile.</p>",
        "id": 252117226,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630893913
    },
    {
        "content": "<p>Clients can always just ask for \"all health cards\" and generally do/should just do that.</p>",
        "id": 252117306,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630893975
    },
    {
        "content": "<p>All this fancy issuance-time type specificity is already in \"do we need it\" territory IMO.</p>",
        "id": 252117347,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630894038
    },
    {
        "content": "<p>well, it's for privacy reasons, right?</p>",
        "id": 252117424,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630894098
    },
    {
        "content": "<p>I just don't like the intersection part. Just make the client list the card-types they want, with fully coordinated codes that are specific. Then it's simple for both client and server</p>",
        "id": 252117462,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630894149
    },
    {
        "content": "<blockquote>\n<p>privacy reasons</p>\n</blockquote>\n<p>No, health apps are generally running under a user's control and in any case are limited by their authz scopes.</p>\n<blockquote>\n<p>Fully coordinated codes</p>\n</blockquote>",
        "id": 252117479,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630894166
    },
    {
        "content": "<p>Fair enough, re: intersections. Might be overkill to have two axes (I just think intersections <em>are</em> simple -- I realize I'm not in the mainstream on this.)</p>",
        "id": 252117595,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1630894255
    },
    {
        "content": "<p>I was getting to the interplay around authz scopes. I'd be perfectly happy with we simplified to just use authz scopes, but I'm trying not to comment on requirements, since I don't have real world ones, I'm just exercising the API.</p>",
        "id": 252117694,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630894351
    },
    {
        "content": "<p>and regarding intersections: sure, testing intersections is ok. It's the process around them that complicates things</p>",
        "id": 252117705,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1630894374
    }
]