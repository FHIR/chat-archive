[
    {
        "content": "<p>Hey folks - a question came up on the SMART Web Messaging call today. </p>\n<p>Would we say, if a clinician places an order in an EHR, but hasn't signed it, then that order still is expected to show on a FHIR Search with status of draft? Am I incorrect if I say the order not showing up is an EHR \"implementation detail\", but according to the specification, the unsigned order / unfiled information should ideally be showing up? </p>\n<p>And corollary to that, will SMART Web Messaging making a \"holding tank\" for unfiled information that does not show up on the FHIR server even with a draft status be in line with the FHIR specification, or will it be a divergence from the FHIR specification? </p>\n<p>(<span class=\"user-mention\" data-user-id=\"233081\">@Carl Anderson</span>  , <span class=\"user-mention\" data-user-id=\"191358\">@Dennis Patterson</span> , <span class=\"user-mention\" data-user-id=\"192613\">@Chuck Feltner</span> , <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> , <span class=\"user-mention\" data-user-id=\"191864\">@Isaac Vetter</span> )</p>",
        "id": 226175055,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613153416
    },
    {
        "content": "<p>To be clear, SMART Web Messaging contemplates an in-memory scratchpad for data aren't yet in a state to persist in a FHIR server (e.g., \"someone started writing a prescrition for hypertension but hasn't picked a drug yet\", or \"someone is completing an order signing process\"). We have these same use cases in CDS Hooks, where we also don't expect/require data to have been persisted in a FHIR server prior to being shared with an external CDS system for decision support.</p>",
        "id": 226177742,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613154760
    },
    {
        "content": "<p>i.e., a CDS Hooks \"actions\" response interacts with in-memory objects just the same way a SMART Web Messaging \"scratchpad\" request does. These are designed against the same interaction model.</p>",
        "id": 226178006,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613154900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191358\">@Dennis Patterson</span> and <span class=\"user-mention\" data-user-id=\"192613\">@Chuck Feltner</span>  I expect this makes sense from your perspective too, given what I understand.</p>",
        "id": 226178047,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613154930
    },
    {
        "content": "<p>Are we saying that even in CDS Hooks, the suggestions from CDS Hooks are not expected to be showing up on the FHIR server when they are taken? To me that feels very wrong.. </p>\n<p>In my understanding, if data was not finalized, FHIR allows for it through draft statuses. </p>\n<p>Whether an implementation actually exposes the unfinalized data using those draft statuses is an implementation detail of the particular implementation. </p>\n<p>Or is my understanding incorrect?</p>",
        "id": 226179347,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613155639
    },
    {
        "content": "<p>SMART apps today have the ability to allow the user to persist resources via a FHIR url.  SMART Web Messages allow additional assistance as the user works through the stages of creation in their native EHR, whether or not that EHR chooses to use a FHIR server as their intermediate data store for draft resources (where that status exists).  The scratchpad concept is storage agnostic, but the term covers the period of user-&gt;EHR interactions.  </p>\n<p>For CDS Hooks, take the order-select workflow.  Just because an orderable is selected, doesn't necessarily require that it's persisted to FHIR.  The user is in the process of editing that order.  If the EHR choses to persist each updated field to FHIR, it certainly can.  But the intent wasn't to preclude an editing process prior to pushing to a more permanent data store.</p>",
        "id": 226180413,
        "sender_full_name": "Dennis Patterson",
        "timestamp": 1613156171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191358\">@Dennis Patterson</span> , this what you say is really the question I am asking:</p>\n<blockquote>\n<p>Just because an orderable is selected, doesn't necessarily require that it's persisted to FHIR</p>\n</blockquote>\n<p>Is this according to the FHIR spec? </p>\n<p>Or should these be on the FHIR server according to spec, and their not being on the FHIR server is an EHR implementation detail?</p>",
        "id": 226180655,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613156303
    },
    {
        "content": "<p>There's no expectation that orders in the process of being created will be available on the FHIR server  That's one of the reasons the hook passes the whole resources rather than just the ids for them.  They <em>could</em> be available (as draft), but it's entirely possible they exist only in memory and aren't visible to the persistence layer at all yet.</p>",
        "id": 226183327,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613157724
    },
    {
        "content": "<p>I understand there is no expectation. However, there is already a FHIR way of doing this (what I am asking to confirm in my original post). <br>\nSo is it appropriate to make another scratchpad in SMART Web Messaging?</p>",
        "id": 226183504,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613157818
    },
    {
        "content": "<p>For anyone observing this without the context of the earlier call - there are detailed minutes here:<br>\n<a href=\"https://confluence.hl7.org/pages/viewpage.action?pageId=104563953#SMARTWebMessagingBallotReconciliationCC20210212-Matt-DiscussScratchpadReplacementProposal\">https://confluence.hl7.org/pages/viewpage.action?pageId=104563953#SMARTWebMessagingBallotReconciliationCC20210212-Matt-DiscussScratchpadReplacementProposal</a></p>",
        "id": 226184975,
        "sender_full_name": "Carl Anderson",
        "timestamp": 1613158523
    },
    {
        "content": "<blockquote>\n<p>it appropriate to make another scratchpad in SMART Web Messaging?</p>\n</blockquote>\n<p>I think this is not \"another\" scratchpad so much as... the implicit place where data in CDS Hooks also/already live. We're just giving a name to it so developers understand it's a thing (a place / state in which ephemeral resources can exist).</p>",
        "id": 226186440,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613159256
    },
    {
        "content": "<p>SMART Web Messaging describes the concept of an EHR scratchpad, which is conceptually, out-of-FHIR-server memory to hold a resource until it is ready to be created inside a FHIR server.  A common analogue is a shopping cart in an online retail site, but in the EHR - the common use case is with an order that a clinician is assembling for a patient.</p>\n<p>Several of the defined SMART Web Messaging messages manipulate objects in the scratchpad with CRUD operations (<code>scratchpad.create</code>, <code>scratchpad.update</code>, etc).</p>\n<p>I think Matt's main objections are 1) that this functionality could conceptually be done entirely inside a FHIR server using draft states for resources and 2) that by defining the scratchpad in the spec - EHRs are expected to implement things a certain way.</p>",
        "id": 226186537,
        "sender_full_name": "Carl Anderson",
        "timestamp": 1613159291
    },
    {
        "content": "<p>My problem with this argument is that it can be completely turned around.</p>\n<p>For example, even with a message like <code>scratchpad.create</code> - an implementing EHR is free to insert a draft resource into the FHIR server and maintain the illusion that there's an in-memory object somewhere.  I just don't see how defining and using <code>scratchpad.*</code> messages is forcing anyone's hand - or running counter to the spirit of the FHIR spec.</p>",
        "id": 226186848,
        "sender_full_name": "Carl Anderson",
        "timestamp": 1613159421
    },
    {
        "content": "<p>I think the primary thing I am saying is that the \"scratchpad\" (1) may or may not exist per EHR and per resource type (2) is something that should be inside the black box of the EHR, and should not be baked into the SMART Web Messaging specification. FHIR specification hasn't baked this into it - it allows for it by staying silent about it, and the same is what SMART Web Messaging must do.</p>\n<p>There is already mechanisms in FHIR to allow the contents of the \"in memory holding tank\" to be exposed if an EHR chooses to. And so we should not invent additional mechanisms in SMART Web Messaging that do the same thing?</p>",
        "id": 226186886,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613159441
    },
    {
        "content": "<blockquote>\n<p>(1) may or may not exist per EHR and per resource type</p>\n</blockquote>\n<p>Yes, and this is good: EHRs can support or not support it, explicitly accepting or failing requests</p>",
        "id": 226187163,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613159568
    },
    {
        "content": "<blockquote>\n<p>(2) is something that should be inside the black box of the EHR, </p>\n</blockquote>\n<p>Scratchpad API does hide it in a black box; apps don't care how the scratchpad works, whether it's the same or different rom the FHIR server, etc. They just know \"here's where my ephemeral session data can be found.\"</p>",
        "id": 226187229,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613159604
    },
    {
        "content": "<p>Note also that, otherwise, we'll now have to create all CRUD operations for scratchpad, and it becomes unclear to an App whether what's in the scratchpad query responses is same or different from what it got in the FHIR server query responses for draft status resource etc.. We'll essentially be making another fhir endpoint for unfiled information, in addition to the existing one for finalized information..</p>",
        "id": 226187243,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613159611
    },
    {
        "content": "<p>This is how CDS Hooks already works; it's what's missing for apps launched via App Link cards.</p>",
        "id": 226187510,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613159737
    },
    {
        "content": "<p>We can't reasonable force EHRs to expose their scratchpad content via their 'standard' FHIR interface - because there are technical designs where that would be impossible.  However, we're not saying they <em>can't</em> do that in defining the scratchpad mechanism.</p>",
        "id": 226187639,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613159790
    },
    {
        "content": "<p>Exactly <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> -- that's what making scratchpad a \"black box\" accomplishes.</p>",
        "id": 226187825,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613159881
    },
    {
        "content": "<p>There does not seem to be an existing FHIR mechanism to support this. How would one query for all of the draft orders for a specific user UI session?  Doesn't it also seem that sending the in-progress FHIR resources  within the SMART Web Messaging would make for a faster interaction between the EHR and the SMART App?</p>",
        "id": 226191730,
        "sender_full_name": "Chuck Feltner",
        "timestamp": 1613161634
    },
    {
        "content": "<p>What is the purpose behind the need to \"query for all of the draft orders for a specific user UI session\"?</p>",
        "id": 226192818,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1613162190
    },
    {
        "content": "<p>So that a decision support app can give you advice about things like duplicate orders, missing orders, etc.</p>",
        "id": 226192996,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613162299
    },
    {
        "content": "<p>The CDS Hooks <code>order-sign</code> use case (<a href=\"https://cds-hooks.org/hooks/order-sign/\">https://cds-hooks.org/hooks/order-sign/</a>)  is one example; or any apps you'd attach at a similar point in workflow.</p>",
        "id": 226193087,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613162359
    },
    {
        "content": "<blockquote>\n<p>So that a decision support app can give you advice about things like duplicate orders, missing orders, etc.</p>\n</blockquote>\n<p>Doesn't the DS app need ALL draft orders for the patient, not just from the current user session? Multiple orders can be entered by multiple users at the same time...</p>",
        "id": 226193545,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1613162609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192613\">@Chuck Feltner</span> I'm not sure I follow this comment</p>\n<blockquote>\n<p>There does not seem to be an existing FHIR mechanism to support this.</p>\n</blockquote>\n<p>As I understand, the EHR has the option to expose draft orders on the FHIR Server.</p>",
        "id": 226194457,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613163127
    },
    {
        "content": "<blockquote>\n<p>Doesn't the DS app need ALL draft orders for the patient,</p>\n</blockquote>\n<p>No, just orders that the user is responsible for -- i.e., the orders they're signing off on in their session</p>",
        "id": 226194725,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613163292
    },
    {
        "content": "<p>Also, I want to reiterate the risk of the scratchpad becoming another <strong>duplicative FHIR endpoint</strong>.</p>\n<p>What if the App only wants to know about specific types of orders in the scratchpad? Would we allow <a href=\"http://scratchpad.search\">scratchpad.search</a> with the same set of query parameters as <a href=\"http://fhir.search\">fhir.search</a>? Would we allow _include and other parameters, even on a <a href=\"http://scratchpad.read\">scratchpad.read</a>?</p>\n<p>Note that, according to the FHIR spec, the scratchpad really reduces to an additional query parameter of status=draft. (Granted implementation details make this hard). </p>\n<p>So not only does this become a duplicative endpoint for unfiled information, it is also technically a <strong>proper subset</strong> of the FHIR endpoint in my view, barring implementation limitations.</p>",
        "id": 226194944,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613163414
    },
    {
        "content": "<p>The only query operation we proposed was \"tell me everything on the scratchpad\"</p>",
        "id": 226195175,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613163546
    },
    {
        "content": "<p>It'd be up for apps to filter as they see fit.</p>",
        "id": 226195195,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613163555
    },
    {
        "content": "<blockquote>\n<p>It'd be up for apps to filter as they see fit.</p>\n</blockquote>\n<p>If that is the case, then all unsigned orders should be provided, and not just from this user's session</p>",
        "id": 226196062,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613163954
    },
    {
        "content": "<p>App may filter based on ordering provider if use case warrants it, but there are use-cases which don't warrant that.</p>",
        "id": 226196224,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613164025
    },
    {
        "content": "<blockquote>\n<p>No, just orders that the user is responsible for -- i.e., the orders they're signing off on in their session</p>\n</blockquote>\n<p>So, for (completely made up) example, patient is seen by PCP, PCP decides to refer the patient to endocrinologist. Workflow allows the referral order to be done by PCP's staff, who will manage the referral. While staff is drafting the referral order (user 1, with scratchpad 1), PCP is ordering diagnostic lab tests (user 2, with scratchpad 2). Since the referral order is only on scratchpad 1, DS for diagnostic lab tests only sees orders on scratchpad 2, and raises no alerts, even though the referral to endocrinologist would have suggested two additional lab test, but the referral order is not accessible in user 2's session.</p>\n<p>Is that too much \"made up\"?</p>",
        "id": 226196229,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1613164026
    },
    {
        "content": "<p>If a user's session is in a browser, the \"EHR\" has no clue what draft orders they have, and certainly has no way to share them across sessions.  Also, what's a user supposed to do about a possible conflict with something someone is theoretically thinking about in a different session (possibly in a different department or even a different building)?</p>\n<p>FHIR <em>cannot</em> force systems to take content they currently hold only in memory and persist it in a central database just because that might make using CDS Hooks easier.  CDS Hooks has to function with the architecture of EHRs as it now exists.</p>",
        "id": 226198999,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613165668
    },
    {
        "content": "<p>Vassil, the challenge with your example is if the PCP orders the 2 additional lab tests and then whoever's doing the referral decides not to submit it, you've now ordered two unnecessary lab tests.  Anything 'draft' is something that might well never occur.  A decision support engine advising the user creating the draft things is fine - because the user knows what's actually going to happen or not and can adjust.  But trying to link across users doesn't give that insight into what's actually happening.</p>",
        "id": 226199275,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613165843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193265\">@Matt Varghese</span>  Given that the EHR supported saving of draft orders, in order to support the same functionality in the scratchpad messages in the SMART App Web messaging, it would need to query for all the draft orders for the specific user UI session that the SMART App was launched within. I don't see the search parameters in the specification that could support this.</p>",
        "id": 226200662,
        "sender_full_name": "Chuck Feltner",
        "timestamp": 1613166597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192613\">@Chuck Feltner</span> , agreed. That is another reason I think we should just stick with the FHIR server (and an optional SMART Web Messaging fhir proxy) instead of trying to define a scratchpad which will necessitate <a href=\"http://scratchpad.read\">scratchpad.read</a> and <a href=\"http://scratchpad.search\">scratchpad.search</a> operations - and so bring with it all of these problems.</p>",
        "id": 226203750,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613168231
    },
    {
        "content": "<p>Note that I'm not saying EHRs shouldn't have scratchpad. I'm saying scratchpad shouldn't be baked into the SMART Web Messaging spec, but be completely left out, and the messages should just be called ui.create, ui.delete, and ui.update.</p>",
        "id": 226203873,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613168317
    },
    {
        "content": "<p>Whether the resource goes into a scratchpad or not before being finalized is an implementation detail that the spec shouldn't concern itself with..</p>",
        "id": 226204086,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613168418
    },
    {
        "content": "<p>For reference, the original JIRA issue I wrote up: <a href=\"https://jira.hl7.org/browse/FHIR-31052\">https://jira.hl7.org/browse/FHIR-31052</a></p>",
        "id": 226204305,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613168531
    },
    {
        "content": "<p>We're going to have to agree to disagree on this, Matt. I've explained all of the reasons why the use cases require a scratchpad abstraction (and if the EHR wants to persist everything to a FHIR server, that's A-OK -- but it shouldn't be forced to).</p>",
        "id": 226213356,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613174643
    },
    {
        "content": "<p>I just raised this issue today <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>  - I don't know that we should close this off this quickly. I'd like to see if others have concerns here; I worry the impact of duplicating draft status and scratchpad will only become evident when people try to implement the spec with apps that use diverse resources (especially ones like Observation, Condition etc.)?</p>",
        "id": 226217635,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613178771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>, if unfinalized data is not expected to show up in the FHIR Server, why does FHIR have a status of draft for MedicationRequest, ServiceRequest etc?<br>\nWhat I mean to ask is, having these makes apps expect that they will show up; yet an app which only read the spec will really not work. So it would almost seem these statuses should then be altogether removed to promote interoperability by setting the right expectations for Apps?</p>",
        "id": 226217898,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613179097
    },
    {
        "content": "<p>Additionally, when we start making exceptions like what's in the browser is not going to be on the FHIR server etc., I worry that we're setting a bad precedent from the spec perspective. Next, if I have a distributed database for the EHR, then is it okay if my FHIR server only returned data in one of the databases, and not another? What if I have different buckets of data - data that I'm the primary source for, and data that was received from another service - is it okay if the FHIR server only included some of these buckets and not others? </p>\n<p>The same parallels come into play with SMART Web Messaging. Elaborating on the idea that <span class=\"user-mention\" data-user-id=\"192685\">@Vassil Peytchev</span> brought up, if one \"scratchpad\" is ordering warfarin, and another \"scratchpad\" is also ordering warfarin, and if these are not aware of each other - that is a patient safety incident - the patient could die!</p>\n<p>So I'd think trying to open the opaque box of the EHR and say these parts of EHR may be on FHIR server, and these parts of EHR may not is bad precedent for the spec. The FHIR spec says draft orders can be accessed through it and provides a way. Whether the EHR implements it or not is up to the EHR. But making a duplicate mechanism like scratchpad which isn't as well thought out as the FHIR server IMO is not safe!</p>",
        "id": 226218911,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613180372
    },
    {
        "content": "<ol>\n<li>The fact that FHIR supports something doesn't mean servers do.  Not all servers have the capacity to persist draft orders</li>\n<li>Imagine a tablet that's authoring content and that stores it on a cloud server.  It's certainly not going to be continuously sending updates to the cloud server to store the interim data - or at least we can't demand that it does so.</li>\n</ol>\n<p>I'm not worried about two scratch-pads ordering the same thing because the time of editing the order isn't the only time that decision support occurs.  Decision support will also happen when the order is written to the server as an active order.  And, at that point, one will get saved first and the second one will trigger an issue.  Obviously it'll trigger the issue a bit later than desired and cost the bit of time, but it's likely to be significantly less time than being triggered about notifications about actions that 'might' be taking place on a device somewhere else.</p>\n<p>The fundamental issue here is: Stuff exists in memory that isn't persisted.  HL7 is <em>not</em> going to (and shouldn't) try to change that architecture for those that want it.  However, if it's useful to find a decision support mechanism that can function when stuff lives in memory and isn't persisted, then we should do that.  We're not seeking perfect, omniscient decision making.  We're seeking what's possible.  When you've got two apps running on the same device, having them share data about what's in memory is achievable.  Having two remote devices that simply happen to be dealing with information about the same patient sharing information about what they have in memory when they don't even know about each other isn't realistic.  Saying that no system can manipulate stuff just in memory isn't realistic either.</p>",
        "id": 226222350,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613184933
    },
    {
        "content": "<p>But the use case doesn't really need scratchpad or use it. It's only an artefact of the current writing of the spec. There is currently no <a href=\"http://scratchpad.read\">scratchpad.read</a> or <a href=\"http://scratchpad.search\">scratchpad.search</a> option.</p>\n<p>What is really necessary is UI integration. So I'm saying we shouldn't propose the scratchpad at this point; since there are alternatives for the hypotheticals that drive the scratchpad, and it's too unclear what it is. ui.create, ui.delete, ui.update etc meet the requirements. Calling these scratchpad.* introduces the question, what is the scratchpad, and brings in all these considerations.</p>",
        "id": 226224736,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613188518
    },
    {
        "content": "<p>That's a separate question from whether hitting the server is an alternative.  If we're agreed that hitting the server isn't an alternative for accessing \"in memory\" resources, I'll leave making the case for accessing those in-memory resources to others.</p>",
        "id": 226226372,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613191112
    },
    {
        "content": "<p>Just to recap:</p>\n<p>1) there's an important use case for accessing data that might not be persisted (yet) in a FHIR server; I think we have agreement on this (as indeed CDS Hooks demonstrates)</p>\n<p>2) When exposing these data to apps, it's important to be explicit about fact that these ephemeral resources in a user's session aren't necessarily available on the EHR's FHIR server --  while also making them visible to apps (and the term \"scratchpad\" is intended to convey as much); I think Matt disagrees on this point and he would prefer not to introduce any developer-facing concept for these transient resources. But I don't see how to satisfy the use case without it (we spent about an hour of today's call talking through it, but the closest we could get was \"support for only a limited subset of fhir resource types, and no way to query by data in the user's session, and a requirement for a 'quirks mode' when an EHR chooses not to expose non-persisted resources\"</p>",
        "id": 226227146,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613192382
    },
    {
        "content": "<p>I disagree again with (1). Data that might or might not be persisted is EHR internal workings. The spec should only think of it as draft and not draft information. If we are saying as <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> answers above that FHIR server is not expected to contain Draft information, that risks making FHIR a very nebulous specification? One can no longer rely on what is and is not available on the FHIR server according to spec.</p>\n<p>In fact, the wording on the MedicationRequest draft status itself goes counter to what we are saying, at least as I'm reading it:<br>\n<a href=\"/user_uploads/10155/nQcfOpMb73ESTNsvWdQfOpO3/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/nQcfOpMb73ESTNsvWdQfOpO3/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/nQcfOpMb73ESTNsvWdQfOpO3/image.png\"></a></div><p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , can I request you to comment on the above? If a physician places an order in an EHR but hasn't signed it yet, according to FHIR specification is that order expected to show up in the FHIR server with a status of draft or not? Can we say that the according to the FHIR specification, that order is expected to show, and it is only FHIR server implementation limitations which might make the order not show up on the FHIR endpoint? </p>\n<p>Additionally, the scratchpad brings in unnecessary complications. If I have currently a draft order for MRI Head, and the App has already added a delete request for that MRI head onto the scratchpad, can the app now request a delete of the delete request it added to the scratchpad? If a scratchpad is to be treated as a \"shopping cart\", then the app presently has a delete of the MRI Head queued up. It should be able to remove that queued up action..</p>",
        "id": 226327923,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613340316
    },
    {
        "content": "<p>FHIR doesn't expect any server to do <em>anything</em>.  A compliant server is anything that exposes a CapabilityStatement - even if the CapabilityStatement indicates the server doesn't support any resources at all.  The base FHIR specification doesn't set any demands.  US Core imposes more expectations, but there's no \"minimum\" set of statuses that are mandatory - meaning there's absolutely no requirement that servers must expose draft information.  And even then, there's a difference between \"draft that's stored to come back to later\" and \"draft held in memory while being actively manipulated\".  I can't imagine we'd ever write a specification that mandated support for the above.</p>",
        "id": 226328813,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613340958
    },
    {
        "content": "<p>Fine - expect is perhaps not the right word. Where I say expected above, you can read \"the intention of the spec\".</p>\n<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> : (rephrasing my original question) When a physician pulls in / selects an order, but has not signed it yet, is it the \"intention\" of the FHIR spec that the order shows up on the FHIR server with a status of draft?</p>",
        "id": 226328968,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613341160
    },
    {
        "content": "<p>And if the intention is so, can we say that the order not showing up is a limitation of the particular implementation?</p>",
        "id": 226329322,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613341689
    },
    {
        "content": "<p>As Lloyd points out, the FHIR specification doesn't work this way. It doesn't impose these kinds of constraints on how specific systems are built.</p>",
        "id": 226329724,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613342324
    },
    {
        "content": "<p>From the base spec it's fair to say that if it shows up, a status of \"draft\" is clearly the right choice.</p>\n<p>Whether it <em>must</em> show up is a question for some combination of SMART Web Messaging, CDS Hooks, and us-core.</p>",
        "id": 226329816,
        "sender_full_name": "Paul Church",
        "timestamp": 1613342517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> , I'm not asking about constraints. </p>\n<p>I'm asking, is it fair to say that the way FHIR specification intends things like unsigned orders to be exposed to apps is a resource with draft status?</p>\n<p>And so, there is a mechanism that FHIR already provides for unfiled information. Creating a concept of \"scratchpad\" is (1) redundant and (2) rife with concomitant issues.</p>",
        "id": 226330115,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613342893
    },
    {
        "content": "<p>Yes.  <em>If</em> a resource is persisted in a server that is unsigned and a signature is needed to activate it, then the appropriate status would be 'active'.</p>\n<p>The issue here is that we're talking about resources that <em>aren't</em> stored on the server.  The solution can't be \"you must write them to the server\" because that's imposing an architecture on the implementation that's not our right to do.  SMART Web messaging is about providing a mechanism for software running on the same client to share information about what's in memory that isn't persisted anywhere.</p>",
        "id": 226341726,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613359661
    },
    {
        "content": "<p>(At least, that's how I understand it...)</p>",
        "id": 226341728,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613359672
    },
    {
        "content": "<p>It is not at present a question of whether a resource is persisted or not, because at present, there is only scratchpad.create, scratchpad.update, and scratchpad.delete, with no <a href=\"http://scratchpad.read\">scratchpad.read</a> or <a href=\"http://scratchpad.search\">scratchpad.search</a>.</p>\n<p>So (1) without there being a read or search operation, any resource on such a \"scratchpad\" is unknown to the App<br>\n(2) Neither CDS Hooks specification, nor the order-select or order-sign hook proposes any such notion of a scratchpad so that it cannot also be thought of as specifying any resource in such a \"scratchpad\" to the App</p>",
        "id": 226343894,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613362669
    },
    {
        "content": "<p>Also even if the persistence question comes up, scratchpad or shopping cart is an <strong>artefact of ordering workflows</strong>. </p>\n<ul>\n<li>When placing an unsigned order that a physician has to interact in UI to fill details for before signing, these generally go to a scratchpad in some (but not necessarily all) EHRs</li>\n<li>However, when placing a protocol order for example, which does not require explicit signing, but can have status of active right at the time of App filing it, such a \"scratchpad\" is not likely to be found in implementations as far as I know</li>\n<li>Similarly, when deleting an unsigned order that exists in the ordering cart, the delete happens from the ordering cart here called scratchpad. But if the delete operation was for an active order, it is a discontinue/cancel order workflow, and there is no scratchpad involved that I am aware of.</li>\n<li>When filing almost any other resource, say Conditions for problem list item or visit diagnosis item, or Observations for vitals or smoking history etc. such a \"scratchpad\" notion does not exit. In fact, likely for that very reason, many of these resources (including both Condition and Observation) don't even have a draft status.</li>\n<li>Based on the above examples, if an App did a scratchpad.create for a draft order, another for a signed order, and one for a condition, then the app would expect a future <a href=\"http://scratchpad.search\">scratchpad.search</a> to show all of these, yet would be very surprised / disappointed by realistic implementations because <strong>only the first would likely go into an actual scratchpad</strong>.</li>\n</ul>\n<p>So in sum, it is the UI / EHR host that creates, deletes, or updates resources for the SMART App, and the UI may use a scratchpad in very select situations for the implementation of the specific operation, but definitely does not use it in all and not even in the majority of these situations. Therefore, I cannot see the scratchpad as rightfully belonging in the SMART Web Messaging specification.</p>",
        "id": 226344100,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613362970
    },
    {
        "content": "<p>Essentially, I'm saying not only is the scratchpad not universal, it does not even apply to the majority of the situations.. or even to a sizable minority. Rather it applies almost exclusively to orders (MdeicationRequest and ServiceRequest resources) with a status of draft.</p>\n<p>Because of that, the spec should not say anything about the scratchpad. Rather, the operations should be ui.create, ui.delete, and ui.update. The UI / EHR Host will be able to consult / use the scratchpad when the particular EHR's implementation of the particular workflow involves a scratchpad, and skip the scratchpad when the particular EHR's implementation of the particular workflow does not involve a scratchpad.</p>",
        "id": 226344753,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613363934
    },
    {
        "content": "<p>What's the difference between \"ui\" and \"scratchpad\"?</p>",
        "id": 226395158,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613401952
    },
    {
        "content": "<p>\"ui\" is what does the action of create/delete/update. <br>\nI don't honestly know what \"scratchpad\" is as a generic concept. As I said above, the EHR implementation detail may sometimes use an ordering cart for draft status orders - which I can't see as appropriate to generalize as a scratchpad becasue</p>\n<ol>\n<li>It is not applicable in all situations. Only applicable in draft order workflows and perhaps a few other draft resource situations (minority of situations).</li>\n<li>It is an internal implementation detail of some EHRs</li>\n</ol>",
        "id": 226396263,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613402516
    },
    {
        "content": "<p>(We've been through this in discussion; I'm not seeing anything new here, but please highlight if I'm missing anything Matt.)</p>",
        "id": 226401419,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613404969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> : Scratchpad does not exist in majority of the create/update/delete operations.. for same reasons as why Observation or Condition resource etc. don't have a draft status. So defining \"scratchpad\" for these doesn't make sense..</p>",
        "id": 226402413,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613405235
    },
    {
        "content": "<p>Scratch pad has nothing to do with \"draft status\".  It has to do with content not yet persisted.  A system might be creating a diagnosis (or set of differential diagnosis) and launch a SMART app to help.  The SMART app might need to manipulate the in-memory content <em>before</em> it gets stored.</p>",
        "id": 226403186,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613405511
    },
    {
        "content": "<p>As an update, I chatted with <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  and want to summarize that discussion here:</p>\n<ul>\n<li>If we say, scratchpad contains things that are \"in-memory\", here is an example that contradicts. An organization has multiple systems in place. The ordering system has the ability to pend draft orders. So the order that a physician drafted up but did not sign yet is saved in persistent store on the ordering system, but is not in the EHR database. So this resource is neither in-memory, nor on the REST-ful FHIR endpoint.  Should data that is ‘stored’ but not currently held in memory be accessible through the ‘scratchpad’ interface.  </li>\n<li>An organization uses multiple systems which have their own FHIR REST-ful endpoints. These systems are each able to query the other system, so that data on the other system is \"accessible\" to these systems. However, the FHIR REST-ful endpoints of these systems will only return data that they are primary source for. So if we define \"scratchpad\" as things not on the REST-ful endpoint but available to the system, should each system include content on the other system as \"scratchpad\" content?</li>\n<li>Lloyd considers scratchpad as capturing \"work in progress\" objects. I pointed out that is the general English sense of \"Draft\" status, but Lloyd is concerned that FHIR Draft status doesn't mean the same thing.  Some of the content that is “work in progress” may have a status other than draft.  Also, some content with a status code of ‘draft’ might be available over the regular RESTful API and not need scratchpad to access. So even though what we mean by \"scratchpad\" aligns with the English sense of the word \"draft\", that is different from the FHIR sense of \"draft\" status and prevents \"scratchpad\" being defined as the place that holds draft resources.</li>\n<li>Even if we consider \"scratchpad\" as somehow defined, if I want to represent a Condition resource in the scratchpad for example - this presents a challenge. All the presently extant status values for Condition imply a finalized state / available at REST-ful endpoint. Status being required, we'll have to figure out how such a conceptually draft condition resource will be represented before we can use this \"scratchpad\".  Specifically, once a system has a resource, how does it tell if it represents an in-memory “work-in-progress” object that isn’t an official resource version from one that is?</li>\n<li>If we take an example of an existing Patient resource's demographics being updated, the update is in a conceptually draft state, but the resource itself does not have a draft status. We'll need to be able to capture this distinction somehow in order to represent this resource in queries to the scratchpad.</li>\n</ul>",
        "id": 226582967,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613512620
    },
    {
        "content": "<p>All of these could make defining a \"scratchpad\" larger than the scope of SMART Web Messaging. We may have to also make changes elsewhere in FHIR to define such an entity. </p>\n<p>I am proposing that we can avoid defining the \"scratchpad\" by saying the EHR Host (called \"ui\" in SMART Web Messaging) be treated as the agency for the create/update/delete operations. So the messages will be ui.create, ui.delete, ui.update. How the EHR Host does this / whether the EHR host uses a \"scratchpad\" or not, should be treated as an opaque box to the spec.</p>\n<p>Lloyd is not comfortable with the above idea. According to Lloyd, even if we use \"ui\" as prefix, the distinction of \"conceptually draft\" as well as what the rules are for what can or must be exposed through the interface and how that overlaps or doesn’t with the RESTful API still needs definition.</p>",
        "id": 226584693,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613513102
    },
    {
        "content": "<p>these all seem like systems design and policy. They would thus be beyond the scope of FHIR core.</p>",
        "id": 226588979,
        "sender_full_name": "John Moehrke",
        "timestamp": 1613514799
    },
    {
        "content": "<p>Agreed John. The use case here is \"stuff that doesn't necessarily exist on a FHIR server yet, but can be modeled using FHIR resources and made available to apps for decision support\". When it comes to \"modeled using FHIR resources,\" that could include status=draft in some cases, but there's not a direct equivalence here.</p>",
        "id": 226590519,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613515787
    }
]