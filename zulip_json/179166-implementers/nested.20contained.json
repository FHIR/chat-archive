[
    {
        "content": "<p>Is it possible to have a resource, which has a contained resource which has another contained resource inside?</p>",
        "id": 153909729,
        "sender_full_name": "Emre Avsar",
        "timestamp": 1506002716
    },
    {
        "content": "<p>No, see <a href=\"http://hl7.org/fhir/references.html#contained\" target=\"_blank\" title=\"http://hl7.org/fhir/references.html#contained\">reference</a></p>",
        "id": 153909735,
        "sender_full_name": "Jeffy Mathew Jose",
        "timestamp": 1506006739
    },
    {
        "content": "<p>Contained resources SHALL NOT contain additional contained resources.</p>",
        "id": 153909738,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1506007297
    },
    {
        "content": "<p>I'm trying to find previous discussion on this - it may not have been on zulip. will keep looking</p>",
        "id": 153909742,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1506010776
    },
    {
        "content": "<p>The way this would work is that primary resource essentially \"contains\" all of them</p>",
        "id": 153909743,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1506010792
    },
    {
        "content": "<p>the contained resource would then reference the other contained... I thought</p>",
        "id": 153909744,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1506010807
    },
    {
        "content": "<p>What Jenni describes is demonstrated in this example:  <a href=\"http://build.fhir.org/diagnosticreport-micro1.xml.html\" target=\"_blank\" title=\"http://build.fhir.org/diagnosticreport-micro1.xml.html\">http://build.fhir.org/diagnosticreport-micro1.xml.html</a>   several of the contained Observations reference other contained observations.</p>",
        "id": 153909754,
        "sender_full_name": "Eric Haas",
        "timestamp": 1506016536
    },
    {
        "content": "<p>which are all contained within a single DiagnosticReport resource</p>",
        "id": 153909755,
        "sender_full_name": "Eric Haas",
        "timestamp": 1506016567
    },
    {
        "content": "<p>ah i see thanks. well the problem is, that the parent resource does not know all details about it's children, and of it's grand children.</p>",
        "id": 153909892,
        "sender_full_name": "Emre Avsar",
        "timestamp": 1506082976
    },
    {
        "content": "<p>that's why i was interested in nested contained, but therefore i need a custom resource anyway</p>",
        "id": 153909893,
        "sender_full_name": "Emre Avsar",
        "timestamp": 1506083000
    },
    {
        "content": "<p>You can add all resources in a Bundle and use reference at where you need, just like a Composition.</p>",
        "id": 153909902,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1506086099
    },
    {
        "content": "<p>Parent resource need not know about all contained resources directly.<br>\n<span class=\"user-mention\" data-user-id=\"193288\">@Emre Avsar</span> , Can you share your case? Maybe we can reach to some better understanding.</p>",
        "id": 153909903,
        "sender_full_name": "Jeffy Mathew Jose",
        "timestamp": 1506086426
    },
    {
        "content": "<p>@<strong>J Mathew Jose</strong> yes. here's my case:</p>\n<p>I have the following internal domain:</p>\n<p>Discussion Topics (will be a RiskAssessment in FHIR) with DiscussionTopicConfigurations (here i wanted to use a Basic reference as contained)<br>\nDiscussion Topics have a list of Observations to have a base on what this discussion topic is about. and these observations have also  a ObservationConfiguration inside.</p>\n<p>when I have something like this now:<br>\nDiscussionTopic with a configuration with 3 observations with 1 observation configuration for each, and this has to be converted to fhir domain now.</p>\n<p>i wanted to have something like<br>\nRiskAssessment with contained DiscussionTopicConfiguration, and a bunch of observations which are also contained and inside these contained observations i would have the contained observationconfiguration.</p>\n<p>so it seems i have to create my own RiskAssessment extension with custom fields in it, rather than using contained. correct?</p>",
        "id": 153909916,
        "sender_full_name": "Emre Avsar",
        "timestamp": 1506087673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193288\">@Emre Avsar</span> <br>\nThe idea is that the parent resource will have all the contained resources, while the children and grandchildren has reference to them.</p>\n<p>So for your case, RiskAssessment will contain DiscussionTopicConfiguration, observations and their observationconfigurations.<br>\nRiskAssessment will refer to DiscussionTopicConfiguration and observations, while each observation will have reference to its observationconfigurations respectively</p>\n<p>See quoted link for a detailed example</p>\n<blockquote>\n<p>What Jenni describes is demonstrated in this example:  <a href=\"http://build.fhir.org/diagnosticreport-micro1.xml.html\" target=\"_blank\" title=\"http://build.fhir.org/diagnosticreport-micro1.xml.html\">http://build.fhir.org/diagnosticreport-micro1.xml.html</a>   several of the contained Observations reference other contained observations.</p>\n</blockquote>",
        "id": 153909923,
        "sender_full_name": "Jeffy Mathew Jose",
        "timestamp": 1506089713
    },
    {
        "content": "<p>the problem is, that the converter which converts discussion topics to risk assessments does not contain the logic for converting observationconfiguration to a containted element. it only uses another converter to convert. so it has no knowledge of nested elements. that makes things a bit problematic. assume that this discussion topic is now embedded inside a episodeofcare resource, then the episode of care converter must check all nested elements and extract those and put them into it's contained field. this makes life harder. therefore this is not the approach i think which works out for my case. am i wrong?</p>",
        "id": 153909924,
        "sender_full_name": "Emre Avsar",
        "timestamp": 1506089876
    },
    {
        "content": "<p>@Emre Avsar Root resource doesn't need to know how to convert all nested children. Each resource only need to convert itself and asks its direct children to convert.</p>",
        "id": 153909927,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1506090692
    },
    {
        "content": "<p>so, each converter does then convert nested elements and put them to contained, and then you have nested contained elements.</p>",
        "id": 153909929,
        "sender_full_name": "Emre Avsar",
        "timestamp": 1506090961
    },
    {
        "content": "<p>All contained resources are added in root resource. Only references to children are used inside parent resource.</p>",
        "id": 153909935,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1506093733
    },
    {
        "content": "<p>Before adding a resource to your parent container, move all the contained resources to parent container.</p>",
        "id": 153909938,
        "sender_full_name": "Jeffy Mathew Jose",
        "timestamp": 1506095370
    },
    {
        "content": "<p>You may also need to do processing to ensure that the ids of the contained resources remain unique when you move them up to the new containing resource.</p>",
        "id": 153909955,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1506101667
    },
    {
        "content": "<p>that just does not work well. a nested object's container does not now anything about it's parent. this is just bad design, if i go this way. what i could do would be something like a go through all nested objects and move the contained elements to the root in a separate step, but this sounds like a lot of traversing work for nothing.</p>",
        "id": 153910165,
        "sender_full_name": "Emre Avsar",
        "timestamp": 1506316290
    },
    {
        "content": "<p>In general, if you have contained resources, it's because they're acting like \"properties\" of the containing resource anyhow.  The decision to contain a resource is because you don't have enough information for the resource to stand alone.  I don't really understand why the containing resource wouldn't know about the contents of the resources it \"owns\".  (Remember that containment isn't a packaging mechanism for transport - it's only for use when the contained content is inherently dependent on the containing resource for existence.)</p>",
        "id": 153910166,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1506317072
    },
    {
        "content": "<p>Or rather than creating new resources, I could also go for this <a href=\"http://hapifhir.io/doc_custom_structures.html#Custom_Datatype_Structure\" target=\"_blank\" title=\"http://hapifhir.io/doc_custom_structures.html#Custom_Datatype_Structure\">http://hapifhir.io/doc_custom_structures.html#Custom_Datatype_Structure</a> right?</p>",
        "id": 153910171,
        "sender_full_name": "Emre Avsar",
        "timestamp": 1506319377
    },
    {
        "content": "<p>extending a datatype to hold multiple values in it</p>",
        "id": 153910172,
        "sender_full_name": "Emre Avsar",
        "timestamp": 1506319396
    },
    {
        "content": "<p>That would be outside the standard and wouldn't interoperate with anyone with a standard FHIR interface.  If your data is expressible with FHIR resources, you should use those resources.  If your data isn't expressible with FHIR resources, you have a choice of operating outside the standard or using the Basic resource with a bunch of extensions.</p>",
        "id": 153910173,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1506320415
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> that was also what i thought. alright. i'll go for custom resources anyway. since i cannot guarantee the contained objects to be in the root only</p>",
        "id": 153910174,
        "sender_full_name": "Emre Avsar",
        "timestamp": 1506321657
    },
    {
        "content": "<p>Let me clarify<br>\nSay, we have types X-&gt;Y-&gt;Z in your domain which are mapped to A-&gt;B-&gt;C in FHIR. (arrow in direction of containment)<br>\nAlso, mappings from X&lt;-&gt;A, Y&lt;-&gt;B, Z&lt;-&gt;C are defined except for children(contained resources)</p>\n<p>Now when Y is mapped to B, call Z&lt;&gt;C mapper, add C in B.Contained, add reference to C from appropriate property in B.<br>\nWhen X is mapped to A, call Y&lt;&gt;B mapper (defined above), add B in A.Contained, move everything from B.Contained to A.Contained, add reference to B from appropriate property in A.</p>\n<blockquote>\n<p>You may also need to do processing to ensure that the ids of the contained resources remain unique when you move them up to the new containing resource.</p>\n</blockquote>\n<p>For your case, before adding observations containing observationconfigurations to RiskAssessment, move everything from observation.Contained to RiskAssessment.Contained</p>",
        "id": 153910176,
        "sender_full_name": "Jeffy Mathew Jose",
        "timestamp": 1506322639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193288\">@Emre Avsar</span> If you're going with custom resources, why are you using FHIR?  You won't interoperate with anyone, which is sort of the point.  Can you explain why you need contained resources?  And why it's a problem for the logic that deals with containment to \"migrate\" inner contained resources to the outer containing resource?  It may be a bit more code, but it's not more work than custom resources - and your interface will actually interoperate with other systems.</p>",
        "id": 153910182,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1506325737
    },
    {
        "content": "<p>the custom resources will only extend Basic and all the stuff goes into extensions. </p>\n<p>This part of the API is just too custom, it's like the 20% where the stuff has to be done custom. If there would be a matching resource, i'd take it. but there isnt.</p>",
        "id": 153910186,
        "sender_full_name": "Emre Avsar",
        "timestamp": 1506328256
    },
    {
        "content": "<p>in my case, it is more like a configuration which needs to be sent to the client, to know which things (for example observations) and how (coding, values etc.) are needed.</p>\n<p>I'd love to take something more FHIRy but don't know really what</p>",
        "id": 153910189,
        "sender_full_name": "Emre Avsar",
        "timestamp": 1506328475
    },
    {
        "content": "<p>the only 'better' solution is the one with traversing all the children, find all the contained elements and put them to the root. and work with all these things, don't forget to put the contained into childs if only a child needs to be passed somewhere in the codebase etc. this sounds like a nightmare, not only more code</p>",
        "id": 153910190,
        "sender_full_name": "Emre Avsar",
        "timestamp": 1506328552
    },
    {
        "content": "<p>Ok.  If you're doing something that's outside the spec, Basic is fine.  I'm a bit confused how that requirement is linked to \"contained\" resources though.</p>",
        "id": 153910436,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1506350005
    }
]