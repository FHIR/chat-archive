[
    {
        "content": "<p>Hi<br>\nI would like to use *_elements *along with *include *parameter to extract specific fields from the resource included along with Query. <br>\nexample:<br>\n<a href=\"http://server/fhir/Patient?include\" target=\"_blank\" title=\"http://server/fhir/Patient?include\">http://server/fhir/Patient?include</a> =Observation&amp;include =<em>DiagnosticReport</em><br>\nHere,<br>\nI want to select only <em>status</em>, and couple of other fields from DiagnosticReport ( not complete content).</p>",
        "id": 185116137,
        "sender_full_name": "Anand Jahagirdar",
        "timestamp": 1578493753
    },
    {
        "content": "<p>_elements apply only to the resource being searched</p>",
        "id": 185116188,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1578493787
    },
    {
        "content": "<p>FHIR <a href=\"http://build.fhir.org/search.html#elements\" target=\"_blank\" title=\"http://build.fhir.org/search.html#elements\">3.1.1.5.9</a>: <code>The list of elements does not apply to included resources.</code></p>",
        "id": 185117314,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1578494430
    },
    {
        "content": "<p>If you want _elements to be expanded to allow application to included resources, you'll have to submit a change request.  (And given that there was previously a conscious decision to not allow it, provide a convincing reason for adding the capability.)  Due to search now being normative, my guess is we'd have to introduce a new construct rather than using _elements as I don't think changing this constraint would be backward compatible.</p>",
        "id": 185128222,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1578499906
    },
    {
        "content": "<p>The main intention of requesting _elements with include is  data transfer optimization. I would like to use single network call to get all related FHIR resources. But Diagnostic report has report content which  causes huge data to be transferred. If I can combine resources but omit Diagnostic report content to be transferred then query would be very efficient.</p>",
        "id": 185175267,
        "sender_full_name": "Anand Jahagirdar",
        "timestamp": 1578532486
    },
    {
        "content": "<p>You could also look at GraphQL - it gives much more control over what comes back</p>",
        "id": 185177116,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1578535000
    },
    {
        "content": "<p>In aidbox, we have an extension for elements - <a href=\"https://docs.aidbox.app/basic-concepts/search-1/_elements#elements-and-rev-includes\" target=\"_blank\" title=\"https://docs.aidbox.app/basic-concepts/search-1/_elements#elements-and-rev-includes\">https://docs.aidbox.app/basic-concepts/search-1/_elements#elements-and-rev-includes</a></p>",
        "id": 185191082,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1578557507
    },
    {
        "content": "<blockquote>\n<p>You could also look at GraphQL - it gives much more control over what comes back</p>\n</blockquote>\n<p>Could you expand on the suggestion to use graphQL to solve this problem?</p>\n<p>*Are you suggesting to configure graphQL as a ‘pass-through’ device that only modifies output of certain queries?<br>\n*Or are you suggesting to create a graphQL API that strips the unwanted data? ( ie. getRelatedResourcesExceptReportText )</p>",
        "id": 185219561,
        "sender_full_name": "Chris Schultz",
        "timestamp": 1578582237
    },
    {
        "content": "<p>GraphQL <em>only</em> returns the elements you ask for.  It doesn't return full-blown resources.</p>",
        "id": 185220037,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1578582538
    },
    {
        "content": "<p>There is a standard $graphql operation - see <a href=\"http://hl7.org/implement/standards/fhir/graphql.html\" target=\"_blank\" title=\"http://hl7.org/implement/standards/fhir/graphql.html\">http://hl7.org/implement/standards/fhir/graphql.html</a></p>",
        "id": 185222894,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1578584268
    },
    {
        "content": "<p>Lots of server do not support includes or elements - so be prepared to have to do multiple requests and have to deal with full payloads every time</p>",
        "id": 185223038,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1578584348
    }
]