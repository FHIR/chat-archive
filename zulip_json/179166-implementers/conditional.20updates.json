[
    {
        "content": "<p>How much can one specify in a conditional update?<br>\nCan I specify a conditional update with a path and if the resource does not exist will the path be maintained?<br>\nFor example<br>\nPUT <a href=\"https://baseURL/PCHA/Patient/patientId_authCode/Device/systemId/Observation?identifier=Observation.identifier.value\" target=\"_blank\" title=\"https://baseURL/PCHA/Patient/patientId_authCode/Device/systemId/Observation?identifier=Observation.identifier.value\">https://baseURL/PCHA/Patient/patientId_authCode/Device/systemId/Observation?identifier=Observation.identifier.value</a><br>\nNote that there is no resource at <a href=\"https://baseURL/PCHA/Patient/patientId_authCode/Device/systemId/\" target=\"_blank\" title=\"https://baseURL/PCHA/Patient/patientId_authCode/Device/systemId/\">https://baseURL/PCHA/Patient/patientId_authCode/Device/systemId/</a>. In fact the entire path may not exist.<br>\nWill the resource be created such that<br>\nGET <a href=\"https://baseURL/PCHA/Patient/patientId_authCode/Device/systemId/Observation?identifier=Observation.identifier.value\" target=\"_blank\" title=\"https://baseURL/PCHA/Patient/patientId_authCode/Device/systemId/Observation?identifier=Observation.identifier.value\">https://baseURL/PCHA/Patient/patientId_authCode/Device/systemId/Observation?identifier=Observation.identifier.value</a><br>\nwill return the resource?</p>",
        "id": 153847192,
        "sender_full_name": "Brian Reinhold",
        "timestamp": 1473770501
    },
    {
        "content": "<p>I don't think so. The condition's purpose is to determine whether a matching resource already exists on the server, if yes -&gt; update, if no -&gt; create a new one. I don't think that the condition is supposed to have any effects beyond that. It's just a PRE-condition...<br>\nI wonder: what's your use case?</p>",
        "id": 153848231,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1474148725
    },
    {
        "content": "<p>I would like to do an update on a Task resource based on a criteria. From the docs I can see that the resource is created if there is no match on the criteria. <a href=\"https://www.hl7.org/fhir/http.html#cond-update\">https://www.hl7.org/fhir/http.html#cond-update</a>. I want to do the update if the criteria is matched or not do the update at all. Any suggestions?</p>",
        "id": 235302893,
        "sender_full_name": "Jonas Toft",
        "timestamp": 1618905155
    },
    {
        "content": "<p>In general, you wouldn't want to do an update without querying first - and if you do that, you'll know if it exists or not.</p>",
        "id": 235341385,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618924544
    },
    {
        "content": "<p>What's your use-case for updating without querying?</p>",
        "id": 235341404,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618924557
    },
    {
        "content": "<p>Hi Llloyd,</p>\n<p>This is the scenario the I and Jonas have:</p>\n<ol>\n<li>We're accessing the FHIR Repository from 2 clients</li>\n<li>On client 1, we choose a PractitionerRole ( let's say it has the version \"1\" )</li>\n<li>On client 2, we're updating the PractitionerRole data ( it goes to version \"2\" )</li>\n<li>We're updating the Task's owner to the PractitionerRole that we've selected on step 2</li>\n</ol>\n<p>We are looking for a constraint ( as \"conditional update\", or by specifying a ifMatch etag inside a bundle transaction (?) ) that can fail the update of the Task if its owner PractitionerRole was changed meanwhile. Without doing an extra query, if possible.</p>",
        "id": 235466442,
        "sender_full_name": "cristi mihailescu",
        "timestamp": 1618989809
    },
    {
        "content": "<p>I don't understand why changing the PractitionerRole should impact updating the Task.  You could have the reference in the Task be version-specific, but if it was, the fact it had been subsequently updated wouldn't interfere with the ability to update a resource that references it.</p>",
        "id": 235541544,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1619022786
    },
    {
        "content": "<p>We can mark, by a Boolean extension, that the PractitionerRole cannot be assigned to a Task. If this occurs while we are changing Task's owner, it should somehow fail / signal the client - at least this is our scenario.</p>",
        "id": 235616529,
        "sender_full_name": "cristi mihailescu",
        "timestamp": 1619064026
    },
    {
        "content": "<p>My leaning would be to handle that as business rule processing on the server side.  I.e. when you receive the request to update the Task, query at that point whether the Practitioner is 'available'.  Collision detection, as defined with in the FHIR spec, only works on the resource being changed, not on resources being referenced.</p>",
        "id": 235740854,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1619122472
    },
    {
        "content": "<p>Thank you for your reply, Lloyd. You've enforced our findings.</p>\n<p>We're accessing the FHIR server directly, so a way to do collision detection for the referenced resource could be on the FHIR server, or on a middle layer .</p>",
        "id": 235809534,
        "sender_full_name": "cristi mihailescu",
        "timestamp": 1619168822
    },
    {
        "content": "<p>Hello all -- I think it makes sense that only the resource in question is updated conditionally. On the point, though, of \"updating without querying\" I think it's key to realize that conditional update solves a problem that querying beforehand cannot -- specifically, concurrent access to the resource. Querying first doesn't guarantee that the resource won't change before your next request to write something; conditional update does (or at least it should).</p>",
        "id": 260703726,
        "sender_full_name": "Luke Smith",
        "timestamp": 1636398380
    },
    {
        "content": "<p>Does anyone know who's working on the process of formalizing/adopting conditional update as part of the spec? <span class=\"user-mention\" data-user-id=\"408229\">@Daniel Tam</span>  and I are interested on behalf of One Medical Group</p>",
        "id": 260703958,
        "sender_full_name": "Luke Smith",
        "timestamp": 1636398486
    },
    {
        "content": "<p>Actually, what most systems that support <code>update</code> do is leverage the <code>If-Match</code> header, as described <a href=\"https://hl7.org/fhir/R4/http.html#concurrency\">here</a>.  That's distinct from conditional updates.</p>",
        "id": 261453109,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1636946263
    },
    {
        "content": "<p>If-Match seems good if you know the ID of an existing the resource, but there are cases where you don't and still want to avoid inserting a logical duplicate</p>",
        "id": 263920368,
        "sender_full_name": "Luke Smith",
        "timestamp": 1638822606
    },
    {
        "content": "<p>Could this be satisfied by a conditional update using <code>If-Match: *</code>, if we expanded the functionality of If-Match to support that?</p>",
        "id": 263920584,
        "sender_full_name": "Paul Church",
        "timestamp": 1638822736
    },
    {
        "content": "<p>not sure exactly what <code>If-Match *</code> would be, but basically what's required is \"don't insert this if anything matches specified search\"</p>",
        "id": 263926750,
        "sender_full_name": "Luke Smith",
        "timestamp": 1638825915
    },
    {
        "content": "<p>where converting to and update of the found matching resource is OK</p>",
        "id": 263926822,
        "sender_full_name": "Luke Smith",
        "timestamp": 1638825958
    },
    {
        "content": "<p>otherwise you're limited to resolving conditions where you know the singular ID of the resource, not logical duplicates that happen to have different IDs you're trying to reconcile ... admittedly this is an border case</p>",
        "id": 263927171,
        "sender_full_name": "Luke Smith",
        "timestamp": 1638826142
    },
    {
        "content": "<p>however it's something that has come up for us</p>",
        "id": 263927247,
        "sender_full_name": "Luke Smith",
        "timestamp": 1638826193
    },
    {
        "content": "<p>I'm not really following.  You shouldn't be performing an update unless you've previously queried from that system - which means you'll know both the id and the version.</p>",
        "id": 263953880,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1638846899
    },
    {
        "content": "<p>What if what I am trying to verify is that nothing matching a search exists</p>",
        "id": 264778890,
        "sender_full_name": "Luke Smith",
        "timestamp": 1639433870
    },
    {
        "content": "<p>that's the thing</p>",
        "id": 264778904,
        "sender_full_name": "Luke Smith",
        "timestamp": 1639433880
    },
    {
        "content": "<p>I think that is basically the key differentiator / motivation for conditional update</p>",
        "id": 264779037,
        "sender_full_name": "Luke Smith",
        "timestamp": 1639433940
    },
    {
        "content": "<p>Ok.  So you have a copy of the current version of the existing record, and you'll check that the record being updated hasn't changed.  However, you're <em>also</em> wanting to ensure that some other query returns no results before the update proceeds?  If that's correct, can you provide an example of the sort of situation where you'd want to do that?</p>",
        "id": 264783834,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639436826
    }
]