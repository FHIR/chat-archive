[
    {
        "content": "<p>We have never said whether we require a particular XML version (1.0 vs 1.1). Does anyone have any opinion about this?</p>",
        "id": 190688291,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1584341934
    },
    {
        "content": "<p>I thought we were only looking at XML 1.0<br>\napprox 3 years ago we wanted to put the GS1 field separator in device.udiCarrier.carrierAIDC</p>",
        "id": 190689553,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1584343689
    },
    {
        "content": "<p>and we needed to use base64Binary.</p>",
        "id": 190689571,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1584343713
    },
    {
        "content": "<p>I think the reason was that one of the formats (JSON or XML) did not support the 0x1D character</p>",
        "id": 190689587,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1584343744
    },
    {
        "content": "<p>Are there XML processors that do not support XML 1.1?<br>\nIs it easier to manage JSON &lt;-&gt; XML conversions if only XML 1.0 is supported?</p>",
        "id": 190747288,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1584376351
    },
    {
        "content": "<p>it's harder, in fact, because there are valid characters in json that are not valid in XML 1.0 but are in XML 1.1</p>",
        "id": 190783181,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1584394583
    },
    {
        "content": "<p>and it is 0x1D. But I don't remember any link between XML version and AIDC coming up in discussion</p>",
        "id": 190783218,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1584394621
    },
    {
        "content": "<p>Sounds like a strong case to require XML 1.1</p>",
        "id": 190783840,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1584395052
    },
    {
        "content": "<p>working on this... the validator uses the standard java SAX based parser. I thought, following <a href=\"https://xerces.apache.org/xerces2-j/faq-sax.html#faq-6\" target=\"_blank\" title=\"https://xerces.apache.org/xerces2-j/faq-sax.html#faq-6\">https://xerces.apache.org/xerces2-j/faq-sax.html#faq-6</a>, the this code:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setDocumentLocator</span><span class=\"p\">(</span><span class=\"n\">Locator</span> <span class=\"n\">locator</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">super</span><span class=\"p\">.</span><span class=\"na\">setDocumentLocator</span><span class=\"p\">(</span><span class=\"n\">locator</span><span class=\"p\">);</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"na\">locator</span> <span class=\"o\">=</span> <span class=\"n\">locator</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"na\">locator2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">org</span><span class=\"p\">.</span><span class=\"na\">xml</span><span class=\"p\">.</span><span class=\"na\">sax</span><span class=\"p\">.</span><span class=\"na\">ext</span><span class=\"p\">.</span><span class=\"na\">Locator2</span><span class=\"p\">)</span> <span class=\"n\">locator</span><span class=\"p\">;</span>\n      <span class=\"n\">xmlVer</span> <span class=\"o\">=</span> <span class=\"n\">locator2</span><span class=\"p\">.</span><span class=\"na\">getXMLVersion</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n</pre></div>",
        "id": 190834854,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1584444320
    },
    {
        "content": "<p>on this XML:</p>",
        "id": 190834858,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1584444325
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">&lt;?xml version=&quot;1.1&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n\n<span class=\"nt\">&lt;CodeSystem</span> <span class=\"na\">xmlns=</span><span class=\"s\">&quot;http://hl7.org/fhir&quot;</span><span class=\"nt\">/&gt;</span>\n</pre></div>\n\n\n<p>the locator2 interface reports the version as 1.0, not 1.1. Any ideas as to why?</p>",
        "id": 190901342,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1584474329
    },
    {
        "content": "<p>Take a look at how it is done in Writer.java under the SAX samples of Xerces. You need to get the locator during the very first startElement...</p>",
        "id": 190907597,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1584477513
    },
    {
        "content": "<p>doesn't work; don't know why. I'm just going to parse the XML header myself first - I have other reasons to do so</p>",
        "id": 190908529,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1584477992
    },
    {
        "content": "<p>FWIW,</p>\n<div class=\"codehilite\"><pre><span></span>java -cp ./xercesSamples.jar:./xercesImpl.jar:./serializer.jar sax.Writer ./xml_1_1_sample.xml\n&lt;?xml version=&quot;1.1&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;CodeSystem&gt;&lt;/CodeSystem&gt;\n</pre></div>\n\n\n<p>Using your example as the sample file... Since namespaces are not enabled, the namespace is not being printed...</p>",
        "id": 190910193,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1584478861
    },
    {
        "content": "<p>I would not go for XML 1.1. See these comments by two XML experts: <a href=\"https://norman.walsh.name/2004/09/30/xml11\" target=\"_blank\" title=\"https://norman.walsh.name/2004/09/30/xml11\">https://norman.walsh.name/2004/09/30/xml11</a>  and <a href=\"http://www.cafeconleche.org/books/effectivexml/chapters/03.html\" target=\"_blank\" title=\"http://www.cafeconleche.org/books/effectivexml/chapters/03.html\">http://www.cafeconleche.org/books/effectivexml/chapters/03.html</a>. Still valid, I think. Especially what Elliotte says:  \"Whereas XML 1.0 was conservative (Everything not permitted is forbidden) XML 1.1 is liberal (Everything not forbidden is permitted.) XML 1.0 listed the characters you could use in names. XML 1.1 lists the characters you can't use in names.\" An application expecting XML 1.0 but getting XML 1.1  would surely break. Of course, you could make &lt;?xml version=\"1.1\" ... required in all FHIR instances, but that means all existing XML-based applications would have to change (unlike the rest of the world, we have quite some XML FHIR in the Netherlands).</p>",
        "id": 191579461,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1585039640
    },
    {
        "content": "<p>Given that the JSON format allows characters that are forbidden in XML 1.0, not using XML 1.1 limits interoperability. The concern about characters in names doesn't seem to apply, because the names are part of the specification, and that can be controlled.</p>",
        "id": 191619585,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1585061201
    },
    {
        "content": "<p>XML 1.1 is mostly about characters in names, of which you correctly say those should not be a problem. JSON text is Unicode, but doesn't allow control characters (<a href=\"https://www.json.org/\" target=\"_blank\" title=\"https://www.json.org/\">https://www.json.org/</a>). XML 1.1 does allow some extra control characters in text - looks like it makes interoperability worse, not better.  Do you - or anybody else - have examples of content valid in JSON but not in XML 1.0, but valid in XML 1.1? I'm not convinced requiring XML 1.1 solves a real-world problem, and I'm pretty sure it introduces a lot of problems - having everybody upgrade to 1.1, for instance. I've seen a lot of production XML (v3, FHIR, other) and I've never yet encountered 1.1 in the wild.</p>",
        "id": 191639688,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1585068462
    },
    {
        "content": "<p>What I understood the issue to be was: </p>\n<ul>\n<li>in JSON you can send \\u001d in the text</li>\n<li>in XML 1.0 this character is not allowed</li>\n<li>in XML 1.1 this character is allowed.</li>\n</ul>\n<p>If the above is correct, you have at least one use case where it is an issue. If I misunderstood, then XML 1.1 is probably not necessary.</p>",
        "id": 191647896,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1585071875
    },
    {
        "content": "<p>It's a real case, but in general I'd say if some texts can contain control characters other than TAB, NL, CR, it's best to use base64Binary as <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> has done - after all, from an XML or JSON viewpoint, this is more binary than textual content, and all issues around reserved or invalid characters are bypassed.</p>",
        "id": 191730262,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1585134976
    },
    {
        "content": "<p>well, we did base64 encoding because we had no choice... it hurts to tell vendors: when you scan a barcode, you either have a GS1 decoding algorithm, or a base64 encoding, or you cannot transmit the scanned barcode</p>",
        "id": 191730973,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1585135477
    },
    {
        "content": "<p>ICD-11 contains terms that have \\u001d in their definition. I think we do not want to change code system to force the definition to be base64Binary</p>",
        "id": 191974767,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1585281646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> That makes it a mess indeed. No, you can't change the code system - it's possible  though to base64 the definition when serializing it in FHIR. Would require the definition in FHIR to be (string | base64Binary) though, does not seem the way forward either. Another route: since FHIR says nothing about 1.0 vs 1.1, the default assumption should be either is allowed. So if you need to serialize ICD-11 in FHIR, use XML 1.1 - that should be allowed today w/o any changes in specs anywhere. The one thing I see as problematic is <strong>requiring</strong> XML 1.1 for FHIR serialization - say \"if you move to R5, you must move to XML 1.1\".</p>",
        "id": 191991711,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1585300686
    },
    {
        "content": "<p>no that would certainly not be possible</p>",
        "id": 192067574,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1585336778
    }
]