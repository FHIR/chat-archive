[
    {
        "content": "<p>In OO today looking at tracker from <span class=\"user-mention\" data-user-id=\"191360\">@Michelle M Miller</span>  and <span class=\"user-mention\" data-user-id=\"191689\">@Hans Buitendijk</span> to allow for the same code in  code and component.code this use case was posited.  If you have a Questionnaire that allows multiple answer for a question in QuestionnaireAnswer ( e.g. a,b,c)  what is the best practice for converting these to Observation.  I think they transform into three Observations.  An argument is made for a single Observation using Observation.components. </p>",
        "id": 153826261,
        "sender_full_name": "Eric Haas",
        "timestamp": 1462855687
    },
    {
        "content": "<p>Our system treats a question with multi-select answer as a single observation.  </p>\n<p>For example:</p>\n<ul>\n<li>Server has a single Alcohol Type code/question, associated to multiple codified values/answers, such as Beer and Wine.</li>\n<li>Server has a single Alcohol Type observation status (e.g. Final).</li>\n<li>Server has a single Alcohol Type observation comment (e.g. some comment about the beer, such as \"Prefers craft beers; employed by Boulevard Brewing Company\")</li>\n<li>Server has a single id for this Alcohol Type observation.</li>\n</ul>\n<p>Splitting these up into 2 distinct observations (e.g. Alcohol Type of Wine and Alcohol Type of Beer) has the following consequences:</p>\n<ul>\n<li>We'd have to make up an <a href=\"http://Observation.id\" target=\"_blank\" title=\"http://Observation.id\">Observation.id</a> since 2 distinct observations can't share the same id. </li>\n<li>The single comment about beer gets applied to both observations, such that it is out of context on the Wine observation.</li>\n<li>When an application tries to update one of the two observations (e.g. update a comment, status, etc.), the server has unexpected behavior in that we'd be updating both observations, since our server doesn't allow us to in error beer without also in erroring wine.  By contrast, the server would normally consider removing an answer more like a modify action and less like an In Error status change. </li>\n</ul>",
        "id": 153826272,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1462878140
    },
    {
        "content": "<p>But if you're capturing multiple answers for one question, the only way to do that is with component observations because value[x] can't repeat</p>",
        "id": 153826516,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462909880
    },
    {
        "content": "<p>Right, we want to leverage Observation.component, but currently can't do so due to the invariant (obs-7: Component code SHALL not be same as observation code), which is what prompted my change request to be logged to remove this invariant.<br>\n<a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9375\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9375\">http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9375</a></p>",
        "id": 153826547,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1462911076
    },
    {
        "content": "<p>you can have the same component code more than once. I've never understood that task</p>",
        "id": 153826574,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462912633
    },
    {
        "content": "<p>But you want to have a code on the root Observation too.  And right now there's a rule that says that code can't be the same as the component codes - and it's not clear what else you could populate the root code with.</p>",
        "id": 153826576,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462912965
    },
    {
        "content": "<p>+1 Lloyd -- that is the exact problem.  Currently we are asking to remove the invariant, so that it is possible to have Observation.code = Observation.component.code</p>",
        "id": 153826578,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1462913083
    },
    {
        "content": "<p>Observation.code and Observation.component.code are both required, so another approach (if we keep the invariant) is to make Observation.component.code optional.</p>",
        "id": 153826579,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1462913217
    },
    {
        "content": "<p>I'm having trouble following this, actually. You have a code that is simultaineously defined as both a panel and an actual result? </p>",
        "id": 153826735,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462962496
    },
    {
        "content": "<p>It's more like a single question (code) with multiple answers (valueCodeableConcept).<br>\nExample 1:  code = Respirations with 7 codified values of Abdominal, Gasping, Hyperpnea, Labored, Nasal, flaring, Retracting<br>\nExample 2:  code = Respiratory Pattern with 2 codified values = Irregular, Tachypnea<br>\nExample 3:  code = Oxygen Therapy with 2 codified values = Humidification, Nasal cannula<br>\nExample 4:  code = AlcoholType with 2 coded values = Beer, Wine<br>\netc. </p>",
        "id": 153826744,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1462963187
    },
    {
        "content": "<p>and these are multi-select lists? So for example one:<br>\nObs.code = Respirations, no value<br>\n  obs.componant.code Abdominal, value = true/false</p>",
        "id": 153826756,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462963841
    },
    {
        "content": "<p>etc</p>",
        "id": 153826757,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462963842
    },
    {
        "content": "<p>?</p>",
        "id": 153826758,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462963846
    },
    {
        "content": "<p>If we went with that suggestion, then the values are always true.  It feels a bit awkward to say that in other examples that might not be talking about present state, meaning the component.value is not actually true *right now* based on the question asked, such as:</p>\n<ul>\n<li>Observation.code = Release Criteria for Restraint </li>\n<li>Observation.component.code = Cognitive status improved and no longer interferes with care, with value = true</li>\n<li>Observation.component.code = Medical devices, tubes, and dressings removed, with value = true</li>\n</ul>\n<p>I think it is cleaner to represent as:</p>\n<ul>\n<li>Observation.code = Release Criteria for Restraint </li>\n<li>Observation.component.value= Cognitive status improved and no longer interferes with care</li>\n<li>Observation.component.value= Medical devices, tubes, and dressings removed</li>\n</ul>",
        "id": 153826762,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1462964599
    },
    {
        "content": "<p>why would the values always be true? I wasn't suggesting that</p>",
        "id": 153826763,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462964686
    },
    {
        "content": "<p>I can't get my head around your alternative actually - doesn't help that it's a different example, because it looks like the same pattern to me</p>",
        "id": 153826764,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462964740
    },
    {
        "content": "<p>but I suspect that the core problem here is that Observation.value is 0..1 not 0..* </p>",
        "id": 153826765,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462964756
    },
    {
        "content": "<p>Yes, that is the root problem -- that Observation.value is 0..1 -- so an earlier gForge advised me to use components to represent the multiple values.  We don't persist the false (unselected answers) -- only the true (selected answers), so we would be hard-coding all values to true.</p>",
        "id": 153826766,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1462964949
    },
    {
        "content": "<p>ok well, I understand the problem properly now. The advice is certainly inconsistent with the invariant, that's for sure </p>",
        "id": 153826767,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462965041
    },
    {
        "content": "<p>I don't like revoking the invariant, and I don't like the idea of having components without codes, nor inventing a code that say 'instance of value' </p>",
        "id": 153826768,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462965125
    },
    {
        "content": "<p>but the requirement is real. </p>",
        "id": 153826769,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462965134
    },
    {
        "content": "<p>interesting conundrum</p>",
        "id": 153826770,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462965141
    },
    {
        "content": "<p>To summarize options (in case this makes the OO Q1 agenda today):</p>\n<ul>\n<li>Option A = change Observation.value to be 0..*</li>\n<li>Option B = change Observation.component.code to be 0..1 (optional)</li>\n<li>Option C = remove the invariant that says Observation.code can't be the same as Observation.component.code</li>\n<li>Option D = hard-code the Observation.component.value = true for all \"selected\" answers, such that the Observation.component.code is now the coded \"answer\" (which makes the meaning of the component.value \"yes, I answered the question with this value\" and not \"yes, the component.code is true right now\")</li>\n<li>Option E = treat these as separate, independent Observations (which I contend we can't do per my initial comments because the server can't separate them and maintain separate statuses, comments, etc.)</li>\n</ul>",
        "id": 153826772,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1462966201
    },
    {
        "content": "<p>option A cannot be on the table. Sorry. option D is my least unfavourite...</p>",
        "id": 153826777,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462968456
    },
    {
        "content": "<p>I really don't like option D.  The answer is a code, it's not a boolean.  Taking answers to a question from Observation.component.code feels totally wrong.</p>",
        "id": 153826786,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462969358
    },
    {
        "content": "<p>Option A is possible, it just requires a wrapper.</p>",
        "id": 153826787,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462969369
    },
    {
        "content": "<p>My preference is A (with a wrapper), then B</p>",
        "id": 153826788,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462969398
    },
    {
        "content": "<p>implementers will hate the wrapper. with a passion.</p>",
        "id": 153826789,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462969412
    },
    {
        "content": "<p>for other readers of this:</p>\n<div class=\"codehilite\"><pre>&lt;Observation&gt;\n  &lt;valueCodeableConcept&gt;\n   &lt;.../&gt;\n  &lt;/valueCodeableConcept&gt;\n&lt;Observation&gt;\n</pre></div>",
        "id": 153826790,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462969464
    },
    {
        "content": "<p>would become </p>\n<div class=\"codehilite\"><pre>&lt;Observation&gt;\n  &lt;value&gt;\n   &lt;CodeableConcept&gt;\n     &lt;.../&gt;\n   &lt;/CodeableConcept&gt;\n  &lt;/value&gt;\n&lt;Observation&gt;\n</pre></div>",
        "id": 153826791,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462969496
    },
    {
        "content": "<p>The Json would change equivalently</p>",
        "id": 153826792,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462969504
    },
    {
        "content": "<p>Not necessarily.  We could have:<br>\n&lt;value[x]/&gt;<br>\n&lt;multiValue&gt;<br>\n  &lt;value[x]/&gt;<br>\n&lt;/multiValue&gt;</p>",
        "id": 153826793,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462969516
    },
    {
        "content": "<p>With a constraint that you can only have one of the two</p>",
        "id": 153826794,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462969523
    },
    {
        "content": "<p>carumba </p>",
        "id": 153826795,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462969535
    },
    {
        "content": "<p>we do love our complexity</p>",
        "id": 153826796,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462969540
    },
    {
        "content": "<p>That's much less complex than forcing component observations</p>",
        "id": 153826797,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462969557
    },
    {
        "content": "<p>Some types of observations naturally have multiple values</p>",
        "id": 153826798,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462969574
    },
    {
        "content": "<p>yeah, the really cool thing about your approach is that a value might be found in value, or in multi-value. That's one all implementers will enjoy</p>",
        "id": 153826799,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462969617
    },
    {
        "content": "<p>I can live with value/valueCodeableConcept or a choice of valueCodeableConcept and multiValue/valueCodeableConcept</p>",
        "id": 153826800,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462969619
    },
    {
        "content": "<p>Well, the value could be found in Observation/value or Observation/component/value now</p>",
        "id": 153826801,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462969647
    },
    {
        "content": "<p>I don't see the difference in complexity there.</p>",
        "id": 153826802,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462969658
    },
    {
        "content": "<p>This was discussed during Q1 OO session.  The rationale/details are documented within gForge (<a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9375\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9375\">http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9375</a>), but the outcome/resolution was removing the existing invariant and replacing with a new invariant:  \"If .code = .component.code then .value must not exist\"</p>",
        "id": 153826995,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1462992706
    },
    {
        "content": "<p>Prohibiting Observation.value when you have componets.  (Back to Pre DSTU)</p>",
        "id": 153827006,
        "sender_full_name": "Eric Haas",
        "timestamp": 1462994018
    },
    {
        "content": "<p>Not quite when you have components.  If you have an APGAR, you'd have one code on the root observation and a value, and different codes on the components.  However, in the questionnaire example, you'd have the same code on the root observation and the components and because of that, you wouldn't be able to have a value on the root observation.</p>",
        "id": 153827145,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463018190
    },
    {
        "content": "<p>Right, so the new/revised invariant still allows an Observation.value when the codes differ (e.g. APGAR example).  It only prohibits the Observation.value when the codes are the same (observation.code = observation.component.code)</p>",
        "id": 153827168,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1463023869
    },
    {
        "content": "<p>actually Lloyd is correct you can't have a  value and component.value so APGAR uses .related.  </p>",
        "id": 153828403,
        "sender_full_name": "Eric Haas",
        "timestamp": 1463544649
    },
    {
        "content": "<p>Why can't you have a value and a component.value?</p>",
        "id": 153828437,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463578116
    },
    {
        "content": "<p>if the code are the same you can not distinguish the relationship of value to component value.  </p>",
        "id": 153828442,
        "sender_full_name": "Eric Haas",
        "timestamp": 1463581119
    },
    {
        "content": "<p>use related instead</p>",
        "id": 153828443,
        "sender_full_name": "Eric Haas",
        "timestamp": 1463581143
    },
    {
        "content": "<p>component values are siblings  value is not .  I believe that is why the DSTU1 and DSTU2 invariants where made in the first place but is not documented anywhere I can locate.</p>",
        "id": 153828444,
        "sender_full_name": "Eric Haas",
        "timestamp": 1463581564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> Actually I mis- represented the disposition.  I thought we reverted to the original invariant from pre DSTU (Actually that is what I had suggested)  but michelle is correct and <br>\n Apgar can use components if the the codes are different.</p>",
        "id": 153828452,
        "sender_full_name": "Eric Haas",
        "timestamp": 1463585660
    }
]