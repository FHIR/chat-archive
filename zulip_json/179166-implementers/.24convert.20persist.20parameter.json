[
    {
        "content": "<p>While implementing $convert I encountered a pattern where our systems would convert an input format and then immediately send a new request to the FHIR Server to store the output of the operation. This often happens when converting non-FHIR content to FHIR, in cases where $transform is not applicable. My question now is, if a \"persist\" parameter, like in $document, would be out of scope for this operation? Otherwise, we could - in cases where the output is FHIR - infere the resource type and directly store it at the corresponding endpoint, thus saving a round-trip.</p>",
        "id": 161038641,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1552897001
    },
    {
        "content": "<p>post or put?</p>",
        "id": 161088049,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1552936991
    },
    {
        "content": "<p>or transaction?</p>",
        "id": 161088064,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1552937003
    },
    {
        "content": "<p>I feel as though that's a problem</p>",
        "id": 161088072,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1552937017
    },
    {
        "content": "<p>I would imagine that use cases exist for all three POST, PUT, and a transaction depending on your input that you want to convert. For a simple JSON &lt;-&gt; XML conversion a PUT would be in order as the resource most likely already contains an ID. However, when converting non-FHIR content, POST / transaction would depend on whether or not a bundle is produced in the end, or just a single resource.</p>",
        "id": 161436574,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1553250915
    },
    {
        "content": "<p>It would be nice if we could harmonize the behaviour. For now I would propose to add the persist parameter to get a practical understanding of what's needed by clients. We could define it as \"client indicates that it wants to store the converted resources, it's up to the server to figure out which interaction is needed for it\".</p>",
        "id": 161436799,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1553251163
    },
    {
        "content": "<p>maybe. but why not just do a direct put or post?</p>",
        "id": 161484338,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553289035
    },
    {
        "content": "<p>In my use case the client executing $convert does not care about the content being returned. It’s just a service accepting transformation request from elsewhere. Therefore returning the content and letting the the client figure out whether PUT or POST is appropriate would result in an „unnecessary“‘ round-trip.</p>\n<p>I guess it’s the same reason why there is a persist parameter on $document?</p>",
        "id": 161680498,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1553543064
    },
    {
        "content": "<p>no I mean, why wouldn't the client just POST or PUT it in the first place?</p>",
        "id": 161681988,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553544135
    },
    {
        "content": "<p>Ahh, ok.  It is being used to do operations like a) extract information from a PDF and convert it into a resource, b) convert a Mapping language file into a StructureMap. In all cases we want to do transformation of binary / unstructured files for which it would be difficult to produce a StructureMap and call $transform.</p>",
        "id": 161840819,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1553677951
    }
]