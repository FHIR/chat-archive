[
    {
        "content": "<p>Is anyone aware of an implementation to the FHIR subscription standard. I am interested in integrating notifications in my system and I want to avoid building subscription support from scratch.</p>",
        "id": 153875766,
        "sender_full_name": "Mohinder Dick",
        "timestamp": 1489076074
    },
    {
        "content": "<p>HAPI is supporting subscriptions, but only with websockets atm</p>",
        "id": 153875810,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1489085380
    },
    {
        "content": "<p>Do you have any experience with it? I tried fining the functionality by digging around in the source and didn't see anything promising.</p>",
        "id": 153875817,
        "sender_full_name": "Mohinder Dick",
        "timestamp": 1489086176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span> Does it mean I can submit a subscription to the FHIR server and it will notify me when a resources matches my criteria.</p>",
        "id": 153875818,
        "sender_full_name": "Mohinder Dick",
        "timestamp": 1489086248
    },
    {
        "content": "<p>We are working on reactive search by long polling - comming soon :)</p>",
        "id": 153875819,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1489086255
    },
    {
        "content": "<p>@<strong>nicola (RIO)</strong> Is we an open source project? Polling my not work ideally for my application. I work for a hospital network. We want to compare many subscriptions to a given FHIR resource and trigger when the ones that criteria that match.</p>",
        "id": 153875821,
        "sender_full_name": "Mohinder Dick",
        "timestamp": 1489086544
    },
    {
        "content": "<p>No we are not open source, but i will describe implementation details in blog post :) Why do you think - polling not work for you? We've implemented a lot of reactive api's - and polling is most robust approach. What kind of criteria do you plan to subscribe - could it be expressed as search?</p>",
        "id": 153875822,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1489086764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193530\">@Mohinder Dick</span> here is some explanation how it works: <a href=\"http://build.fhir.org/subscription.html#12.25.6.2\" target=\"_blank\" title=\"http://build.fhir.org/subscription.html#12.25.6.2\">http://build.fhir.org/subscription.html#12.25.6.2</a><br>\nYou should be able to experiment with the public HAPI Testservers, or faster - with a local hapi CLI Instance</p>",
        "id": 153875841,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1489090142
    },
    {
        "content": "<p>Clinical Meteor has been using a websocket based pub/sub protocol for about 3 years now; and we've been shipping FHIR resources across it for nearly a year now with the Meteor on FHIR project.  Basically, we use <code>ddp</code> to set up the subscriptions and <code>minimongo</code> for the client side caching.   The DDP subscriptions use an in-house JSON object, however, and while I've drafted out how to formalize things with the FHIR Subscription schema, I've yet to implement a canonical example.  But it's all right there, and only requires an afternoon of work.    I'm in the middle of finals week, so I don't have that afternoon right now; but if you can wait until the week of the 19th or 20th, I can provide a full implementation.</p>",
        "id": 153875847,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1489091477
    },
    {
        "content": "<p>Here's a gist...<br>\n<a href=\"https://gist.github.com/awatson1978/e6f23432c500f14451013b7c20502695\" target=\"_blank\" title=\"https://gist.github.com/awatson1978/e6f23432c500f14451013b7c20502695\">https://gist.github.com/awatson1978/e6f23432c500f14451013b7c20502695</a></p>\n<p>Basically, a database query gets defined on the client and put into the <code>criteria</code> field, which is sent over to the server, where it's used to query the database and create a publication.  In a non-Meteor application, the pub/sub methods are attached to a <code>ddp</code> object, I believe.  DDP handles negotiating the URL endpoints, and upgrading to a websocket channel.   </p>\n<p>The underlying implementation works splendidly, and supports schema validation, cache-invalidation, rate throttling, limits, sorts, offline caching, resync, optimistic UI, etc.  It's particularly nice having isomorphic schema validations on both server and client, checking that FHIR resources are properly shaped throughout the data layer.</p>",
        "id": 153875853,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1489092454
    },
    {
        "content": "<p>Hi @<strong>nicola (RIO)</strong>, our scenario is event-driven. Messages are arriving in a stream. Polling requires you to read from a source at an interval and do the evaluation them. In our case, we need to evaluate as messages arrive from a source that is calling our system.</p>",
        "id": 153875872,
        "sender_full_name": "Mohinder Dick",
        "timestamp": 1489095928
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191678\">@Abigail Watson</span> ,  Can you help me overcome two challenges with your suggestion? One is how to translate the criterion in the FHIR subscription into the mongo query. The FHIR subscription resources does not specify the criterion in the same format your example does. The criterion is a search string like this ``. I need to get that into a query to use your solution.  </p>\n<p>Two, How do I query a stream of data using mongo? In my scenario and external system is feeding me the FHIR researches to evaluate and send out within  a reasonable time. I am not sure can store, retrieve, evaluate then send the notification with sufficiently low latency. </p>\n<p>That said, I do find Clinical Meteor interesting. How do I experiment with it? </p>\n<p>I will also check out your meteor on FHIR repo. Kudos.</p>",
        "id": 153875883,
        "sender_full_name": "Mohinder Dick",
        "timestamp": 1489097433
    },
    {
        "content": "<p>I've been puzzling with this myself. I would suggest a Server-sent events (even though its not part of the spec ... yet ) approach and use FhirPath for <code>criteria</code>.</p>",
        "id": 153875892,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1489099053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span> I know how the subscriptions work. I just don't think HAPI FHIR has the capability to actually send the notifications. I am investigating now.</p>",
        "id": 153875896,
        "sender_full_name": "Mohinder Dick",
        "timestamp": 1489099350
    },
    {
        "content": "<p>I updated the gist so that the criteria only depends on a string.  In practice, you could do all sorts of things with that field...  send an SQL query, serialize an object via a URL, use FhirPath, etc.   <br>\nAs to your second question, it's not necessary to write to Mongo.  There are Meteor implementations that are kept entirely in RAM and which use Redis.  Mongo is just super convenient because it's a JSON store, and can act as a persistent caching layer to what's natively stored in the browser.  No lookups/joins means it's very fast.  <br>\n<a href=\"https://github.com/clinical-meteor/meteor-on-fhir\" target=\"_blank\" title=\"https://github.com/clinical-meteor/meteor-on-fhir\">https://github.com/clinical-meteor/meteor-on-fhir</a></p>",
        "id": 153875900,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1489099518
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191678\">@Abigail Watson</span> you are teaching me a lot. I didn't know that FHIRPath was a thing!!! </p>\n<p>However, I still don't see how you translate the criterion string into a mongo query. Your example seems to assume the resource type is <code>subscription</code>. I need to support the FHIR criterion is stated as a  FHIR search (see <a href=\"https://www.hl7.org/fhir/search.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/search.html\">https://www.hl7.org/fhir/search.html</a>). So it will look like this <code>[base]/Patient?identifier=http://acme.org/patient|23</code>.  This example is asking for the patient resource type with an identifier of \"<a href=\"http://acme.org/patient\" target=\"_blank\" title=\"http://acme.org/patient\">http://acme.org/patient</a> or an _id of 23.</p>\n<p>The search spec has a lot of nuances like modifiers (e.g. <code>ne</code>, <code>gt</code>) and resource-global parameters (e.g.<code>_lastUpdated</code>). They can also be stated in three different formats. My example is in the format [base]\\[resource-type]/[parameters].</p>",
        "id": 153875906,
        "sender_full_name": "Mohinder Dick",
        "timestamp": 1489099898
    },
    {
        "content": "<p>Like I said, it's not a completely finalized implementation (yet).  Pretty sure we implemented the pub/sub infrastructure before the Subscription resource was even created.  There's actually a whole lot more to the pub/sub infrastructure beyond the search criteria (websocket protocol negotiation/bootstraping, cache invalidation, rate throttling, offline, etc).   So we've been stress testing and working on those features.  But the search functionality is fairly straight forward problem of deserializing a string into a JSON object.  Fairly trivial compared to getting cache invalidation right.  Just need a free afternoon to finalize the implementation to spec.  </p>",
        "id": 153875909,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1489100675
    },
    {
        "content": "<p>Another update to the gist...<br>\n<a href=\"https://gist.github.com/awatson1978/e6f23432c500f14451013b7c20502695\" target=\"_blank\" title=\"https://gist.github.com/awatson1978/e6f23432c500f14451013b7c20502695\">https://gist.github.com/awatson1978/e6f23432c500f14451013b7c20502695</a></p>",
        "id": 153875911,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1489100950
    },
    {
        "content": "<p>As you can see, the approach is pretty malleable and flexible.  Mostly a question of how much FHIR specific functionality to bake in by default.  i.e. How do we want to handle malformed search requests, etc.</p>",
        "id": 153875912,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1489101032
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191678\">@Abigail Watson</span> cool. I would be very interested in your implementation of <code>parseCriteriaString</code>. </p>",
        "id": 153875916,
        "sender_full_name": "Mohinder Dick",
        "timestamp": 1489101499
    },
    {
        "content": "<p>There's now a minimal implementation of the <code>parseCritieraString</code> in the gist.  Don't have time to do more today; but should get people started if they want to tinker with it.  That's what a basic FHIR Subscription looks like using Meteor.js.  :)</p>",
        "id": 153875922,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1489103176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193530\">@Mohinder Dick</span> long-polling is little bit different from just polling - <a href=\"https://en.wikipedia.org/wiki/Push_technology#Long_polling\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Push_technology#Long_polling\">https://en.wikipedia.org/wiki/Push_technology#Long_polling</a></p>",
        "id": 153875949,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1489124803
    },
    {
        "content": "<p>@<strong>nicola (RIO)</strong> I understand long-polling. It's just not appropriate for my scenario. In both polling and long polling the client, the application requesting the resource, can address the server and get a response. In our scenario, we do not assume the client can poll, because it may not have a reference to our system our system (the server). However, our system has a reference to the end-point of the client.</p>",
        "id": 153875973,
        "sender_full_name": "Mohinder Dick",
        "timestamp": 1489148633
    },
    {
        "content": "<p>I have an implementation for rest-hook subscriptions that is planned to be added to HAPI.  </p>",
        "id": 153876349,
        "sender_full_name": "Jeff Chung",
        "timestamp": 1489445154
    },
    {
        "content": "<p>I have a question though.  I am going through the FHIR Subscription specification here: <a href=\"https://www.hl7.org/fhir/2017Jan/subscription.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/2017Jan/subscription.html\">https://www.hl7.org/fhir/2017Jan/subscription.html</a><br>\nIs the client ever notified if someone deletes a resource that matches their subscription?  This sentence leads me to believe subscriptions do not notify the client. \"When a resource is created or updated that meets the criteria, the server sends a POST request with no body to the nominated URL.\" I don't see any documentation on what happens about deletions.  </p>",
        "id": 153876353,
        "sender_full_name": "Jeff Chung",
        "timestamp": 1489445525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193530\">@Mohinder Dick</span> I have an implementation that uses the interceptor framework so it does not use polling.  </p>",
        "id": 153876357,
        "sender_full_name": "Jeff Chung",
        "timestamp": 1489445757
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"193379\">@Jeff Chung</span> , I believe you are correct that you would not get a notification on delete.</p>",
        "id": 153876609,
        "sender_full_name": "Mohinder Dick",
        "timestamp": 1489500261
    },
    {
        "content": "<p>I think you should submit a CR to get this clarified. I suspect you are not alone in wanting notification on delete. </p>",
        "id": 153876616,
        "sender_full_name": "John Moehrke",
        "timestamp": 1489503641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> That's a good idea.  We may need a way to tell the client the type of change.  Was the notification sent due to a create, update, or delete?  </p>",
        "id": 153876621,
        "sender_full_name": "Jeff Chung",
        "timestamp": 1489504164
    },
    {
        "content": "<p>Indeed ... a notification should be sent when it is deleted and previously would fall under the stated criteria. You got my vote to get that changed ASAP</p>",
        "id": 153876637,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1489505653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193379\">@Jeff Chung</span> good idea, it is absolutely neede to get notifications on deletion</p>",
        "id": 153876889,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1489568883
    },
    {
        "content": "<p>_history has deletes in the bundles, but searches with criteria don't handle deletes.<br>\nIn this same bucket is when something that was in you filter is updated, and not it isn't should possibly come through as a notification, but not sure how you say that in the output bundle.</p>",
        "id": 153877377,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1489645987
    },
    {
        "content": "<p>I suspect that delete would be subscribed for differently. I will note that in IHE XDS there is the DSUB profile (Document Subscription). It registers a filter (similar to a query) that when new (create/update) information matches the filter, the notification is sent.  Uses WS-BaseNotification. This also does not work for delete actions.  There is interest to create a way to subscribe to delete, but it will likely be a different mechanism.  It is more a request to listen to _history on an instance, not a filter/query match.</p>",
        "id": 153877448,
        "sender_full_name": "John Moehrke",
        "timestamp": 1489666679
    },
    {
        "content": "<p>subscription doesn't handle delete - that is inherent in the way it is designed</p>",
        "id": 153877518,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1489690188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193379\">@Jeff Chung</span> Thanks for your help exploring the rest-hook implementation. I think it meets most of our requirements.</p>",
        "id": 153879894,
        "sender_full_name": "Mohinder Dick",
        "timestamp": 1490619193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193530\">@Mohinder Dick</span> we finally had the time to dig deeper into the hapi websocket implementation, websockets are not activated by default in the hapi-jpa-example<br>\n<span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> is there a reason why websockets are not enabled by default?<br>\nIn order to get websocket support in Hapi you have to add the following to your FhirServerConfig(Dstu3) Class:<br>\n<code>@Import({WebsocketDstu3Config.class, WebsocketDstu3DispatcherConfig.class})</code><br>\nthen you should see something like this in the startup log: <br>\n<code>“2017-04-05 01:42:56.048 [localhost-startStop-1] INFO  o.s.w.s.s.s.WebSocketHandlerMapping [AbstractUrlHandlerMapping.java:354] Mapped URL path [/websocket/dstu3] onto handler of type [class org.springframework.web.socket.server.support.WebSocketHttpRequestHandler]”</code></p>",
        "id": 153881088,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1491478687
    },
    {
        "content": "<p>we already created a java based client helper class for hapi websockets and are willing to contribute it to the hapi codebase, if there is interest in this</p>",
        "id": 153881089,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1491478791
    }
]