[
    {
        "content": "<p>In reviewing an internal use I see a need for considering how a system may express the assertion that two patient records within its control are NOT the same person.</p>",
        "id": 153826915,
        "sender_full_name": "Peter Bernhardt",
        "timestamp": 1462982552
    },
    {
        "content": "<p>Currently the link type enumeration only allows for qualifying an affirmative link.</p>",
        "id": 153826916,
        "sender_full_name": "Peter Bernhardt",
        "timestamp": 1462982568
    },
    {
        "content": "<p>But what happens if the system later wants to say \"These two patient records are NOT related.\"</p>",
        "id": 153826919,
        "sender_full_name": "Peter Bernhardt",
        "timestamp": 1462982608
    },
    {
        "content": "<p>Particularly useful if you implement a patient registry as a read-only event store.</p>",
        "id": 153826920,
        "sender_full_name": "Peter Bernhardt",
        "timestamp": 1462982638
    },
    {
        "content": "<p>And you need to handle the dreaded \"un-merge\" use case.</p>",
        "id": 153826922,
        "sender_full_name": "Peter Bernhardt",
        "timestamp": 1462982740
    },
    {
        "content": "<p>there is no unmerge only unlink</p>",
        "id": 153826925,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462982816
    },
    {
        "content": "<p>i understand, Grahame. </p>",
        "id": 153826926,
        "sender_full_name": "Peter Bernhardt",
        "timestamp": 1462982964
    },
    {
        "content": "<p>but there is definitely an \"un-merge\" use case for implementers</p>",
        "id": 153826927,
        "sender_full_name": "Peter Bernhardt",
        "timestamp": 1462982978
    },
    {
        "content": "<p>i'm adding a change request to clarify and get this in front of the PA WG</p>",
        "id": 153826928,
        "sender_full_name": "Peter Bernhardt",
        "timestamp": 1462983033
    },
    {
        "content": "<p>Isn't that just an exercise in some Application twisting apart the parts, and doing a RESTful -create and update? Thus REST already handles it.</p>",
        "id": 153826930,
        "sender_full_name": "John Moehrke",
        "timestamp": 1462983132
    },
    {
        "content": "<p>it goes far beyond that</p>",
        "id": 153826933,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462983311
    },
    {
        "content": "<p>That's right, John. In a homogenous FHIR system this would be easy to handle. What I'm looking at is a use case that involved handling ADT-A40 messages and then someone trying to back that out.</p>",
        "id": 153826934,
        "sender_full_name": "Peter Bernhardt",
        "timestamp": 1462983314
    },
    {
        "content": "<p>Tracker item 9993</p>",
        "id": 153826937,
        "sender_full_name": "Peter Bernhardt",
        "timestamp": 1462983482
    },
    {
        "content": "<p>Yuk</p>",
        "id": 153827009,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462994831
    },
    {
        "content": "<p>;)</p>",
        "id": 153827017,
        "sender_full_name": "Peter Bernhardt",
        "timestamp": 1462995436
    }
]