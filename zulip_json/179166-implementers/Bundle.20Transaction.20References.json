[
    {
        "content": "<p>Let's say I want to submit several DiagnosticRequests grouped by RequisitionId. </p>\n<p>I build a Transaction Bundle where I have all the DiagReqs all with the same RequisitionId and each entry with Request = POST. Everything in order so far. </p>\n<p>Now according to <a href=\"http://build.fhir.org/request.html#requisitionid\" target=\"_blank\" title=\"http://build.fhir.org/request.html#requisitionid\">http://build.fhir.org/request.html#requisitionid</a> \"common information (patient/practitioner/authoredOn) can be seen by examining any of the Request instances that share that requisitionId\" so I put a contained patient in every DiagReq. </p>\n<p>Could I add a Patient entry on the bundle without specifying that it be part of the transaction, but only as a common resource to other entries in the bundle?</p>",
        "id": 153860262,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480891506
    },
    {
        "content": "<p>Assume you mean a pateint resource... yes</p>",
        "id": 153860263,
        "sender_full_name": "Eric Haas",
        "timestamp": 1480892258
    },
    {
        "content": "<p>Yes, a Patient resource. Great, thanks. </p>",
        "id": 153860265,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480892844
    },
    {
        "content": "<p>Now, when I add that patient to the bundle, can I still keep the type as Transaction or does it change to Collection? I ask because <a href=\"http://build.fhir.org/bundle.html#transaction\" target=\"_blank\" title=\"http://build.fhir.org/bundle.html#transaction\">http://build.fhir.org/bundle.html#transaction</a> says that if I don't include a Request for an entry \"server must infer whether this is a create or an update\"</p>",
        "id": 153860266,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480892858
    },
    {
        "content": "<p>And I don't want that Patient to be created or updated, just serves the purpose of a reference to multiple other entries.</p>",
        "id": 153860267,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480892907
    },
    {
        "content": "<p>you need to read about conditional creates. </p>",
        "id": 153860272,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480893337
    },
    {
        "content": "<p>I think I understand how conditional actions work, the thing is that in this scenario for example I'm putting a Patient entry to serve as a reference for all other entries because I don't have a Patient resource. I guess I could return something like \"404 Not Found - resource type not supported, or not a FHIR end-point\" according to <a href=\"http://build.fhir.org/http.html#create\" target=\"_blank\" title=\"http://build.fhir.org/http.html#create\">http://build.fhir.org/http.html#create</a> but I'd rather not have to deal with that if possible.</p>",
        "id": 153860289,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480895125
    },
    {
        "content": "<p>I'm not sure what you mean by patient entry vs patient resource in that sentence</p>",
        "id": 153860293,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480895881
    },
    {
        "content": "<p>The bundle has 2 diagnosticRequests entries,  both of those requests have the same patient subject. Since I don't support a patient/ resource I'm putting the entire patient inside a container on each diagReq.</p>",
        "id": 153860296,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480896121
    },
    {
        "content": "<p>What I want to do is add another entry to the bundle that the diagRequests reference using <a href=\"http://build.fhir.org/bundle.html#references\" target=\"_blank\" title=\"http://build.fhir.org/bundle.html#references\">http://build.fhir.org/bundle.html#references</a></p>",
        "id": 153860297,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480896151
    },
    {
        "content": "<p>My question is that I want the bundle to be a transaction that only encompasses the diagRequests.</p>",
        "id": 153860298,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480896195
    },
    {
        "content": "<p>if you're using contained patient resources, then every request will have to contain the same patient resource</p>",
        "id": 153860300,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480896275
    },
    {
        "content": "<p>Ok, that contradicts what <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> said earlier. </p>\n<p><a href=\"http://build.fhir.org/bundle.html#references\" target=\"_blank\" title=\"http://build.fhir.org/bundle.html#references\">http://build.fhir.org/bundle.html#references</a> allows me to reference a Patient bundle entry from within DiagReqs entries. What makes it a little confusing is that I only want the DiagReqs to be part of the transaction. The Patient bundle entry is just a convenience so that I don't have to repeat the same patient within every Req.</p>",
        "id": 153860303,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480896566
    },
    {
        "content": "<p>I don't think it was clear that you were talking about contained resources when Eric answered</p>",
        "id": 153860304,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480896649
    },
    {
        "content": "<p>Oh</p>",
        "id": 153860307,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480896737
    },
    {
        "content": "<p>I don't quite understand yet.<br>\n- if you have contained patient resources, then each resource has to have it's own contained patient resource<br>\n- if you know the patient, then you can just put the patient by reference in each request, and there's no need to include the patient resource in the transaction at all<br>\n- if the pateint might not exist, then you have to haev it in the transaction</p>",
        "id": 153860309,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480896785
    },
    {
        "content": "<p>So we don't keep track of patients. Patient is only valid within the context of the DiagReq that references it. </p>\n<p>So I already modeled a bundle that has multiple Reqs (associated by same RequisitionId) that each contain the same patient resource. What I was looking for is a way to avoid repeating that information in every req. Because of the way requests are grouped I might end up receiving a bundle of 10 requests all containing the same repeated info (Patient, Coverage for those DiagReqs)</p>",
        "id": 153860328,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480897195
    },
    {
        "content": "<p>I thought adding an extra Patient bundle entry might solve this for us.</p>",
        "id": 153860329,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480897245
    },
    {
        "content": "<p>no, there's no way to resolve this if you're using contained patient resources. Whenever a system processes any of the DR resources, it will have to find the patient. A contained resource is saying, 'there's no way to do identify the patient such that you can look somewhere else' </p>",
        "id": 153860334,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480897399
    },
    {
        "content": "<p>Size of each bundle could get unnecessarily big</p>",
        "id": 153860335,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480897400
    },
    {
        "content": "<p>if you're actually able to identify the patient, but just avoiding doing so to save work, what you are discovering is that you can only move complexity around, you can't make it go away</p>",
        "id": 153860336,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480897433
    },
    {
        "content": "<p>I cannot identify the patient outside of those requests, but I could identify it within the bundle then that would save me space and some complexity. Even if end up not persisting the Patient independently.</p>",
        "id": 153860339,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480897785
    },
    {
        "content": "<p>I looked at <a href=\"http://build.fhir.org/requestgroup.html\" target=\"_blank\" title=\"http://build.fhir.org/requestgroup.html\">http://build.fhir.org/requestgroup.html</a> but it doesn't seem like it would help.</p>",
        "id": 153860341,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480897840
    },
    {
        "content": "<p>you can't, and that's deliberate. You could save your self complexity, but you're just handing it on a magnified format to downstream systems. </p>",
        "id": 153860343,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480897901
    },
    {
        "content": "<p>if you want to use contained patients, you'll have to repeat it in each separatable bit</p>",
        "id": 153860344,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480897922
    },
    {
        "content": "<p>Understood. I appreciate your help. I'll present an example to our client, but we'll probably just come up with our own model and not use FHIR for this use case. I think the root of this is having to separate Requests.</p>",
        "id": 153860347,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480898167
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/J8hXTVPokVQrKX9x8JmJ4Ifm/bundleRef.json\" target=\"_blank\" title=\"bundleRef.json\">bundleRef.json</a> <a href=\"/user_uploads/10155/Ak7DQHi9ZWkKd-mrpFNOR9o7/containedRef.json\" target=\"_blank\" title=\"containedRef.json\">containedRef.json</a> </p>",
        "id": 153860352,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480898770
    },
    {
        "content": "<p>Those are the 2 different approaches, and so to confirm only containedRef.json is valid?</p>",
        "id": 153860353,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480898803
    },
    {
        "content": "<p>bundleRef.json looks valid to me. But you've said that you don't want to create or reference a patient. I don't understand what you really want with the patient resource. Is there definitive resource that describes the patient?</p>",
        "id": 153860355,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480899311
    },
    {
        "content": "<p>you look like you have enough identification to properly identify the patient resource</p>",
        "id": 153860356,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480899331
    },
    {
        "content": "<p>A practitioner submits several orders to our system, the orders form asks for the patient info. So at that point all we have is N number of orders an the info of the patient, not a link to their system patient resource.</p>",
        "id": 153860362,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480900736
    },
    {
        "content": "<p>To translate to fhir dstu 2 we would make 1 diagOrder and contain the patient within. Add all the separate orders in the item array and we don't have to repeat anything.</p>",
        "id": 153860363,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480900803
    },
    {
        "content": "<p>For dstu 3 there doesn't seem a way to not repeat some things because of the need to separate diagReqs</p>",
        "id": 153860364,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480900832
    },
    {
        "content": "<p>Are you meaning \"Contained\", or simply \"within the Bundle\"? It seems the conversation is speaking past eachother. \"Contained\" is a specific word. You are speaking of an environment without a coordinaed Patient Registry; yet everyone seems to be able to describe (create a Patient object) the patients in a close-enough way. Such that a recipient can look at that, search their local Patient registry, and 'fixup' the content of the Bundle. Right?</p>",
        "id": 153860657,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480944666
    },
    {
        "content": "<p>We don't have a patient registry. The only information we have about patient is persisted as part of the diag order.</p>",
        "id": 153860665,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480948958
    },
    {
        "content": "<p>Let's put those approaches behind for a sec.</p>",
        "id": 153860666,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480949004
    },
    {
        "content": "<p>I have to support an use case where someone sends me N amount of diag orders and the patient info. N orders, 1 patient info.</p>",
        "id": 153860668,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480949130
    },
    {
        "content": "<p>How would I go about it?</p>",
        "id": 153860669,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480949147
    },
    {
        "content": "<p>using conditional create - in the Bundle is the Patient and Order. The Order points at the Patient. The recipient 'conditionally' discovers that the Patient is already known, so it just fixes up the references in the Order and doesn't create a new Patient, but does create a new Order. If it is a patient not found, it will create a patient based on the Patient in the Bundle. This is NOT using the FHIR contained concept, this is conditional-create.  <a href=\"http://build.fhir.org/http.html#cond-update\" target=\"_blank\" title=\"http://build.fhir.org/http.html#cond-update\">http://build.fhir.org/http.html#cond-update</a></p>",
        "id": 153860675,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480949899
    },
    {
        "content": "<p>wrong link.. <a href=\"http://build.fhir.org/http.html#ccreate\" target=\"_blank\" title=\"http://build.fhir.org/http.html#ccreate\">http://build.fhir.org/http.html#ccreate</a></p>",
        "id": 153860676,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480950125
    },
    {
        "content": "<p>I think this should work for you... right? I think this is a proper use of this...</p>",
        "id": 153860677,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480950163
    },
    {
        "content": "<p>OK yes, this would definitely work for us. Now, the catch is that we don't have a Patient/ resource.</p>",
        "id": 153860680,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480950521
    },
    {
        "content": "<p>Main want for putting the Patient in the bundle is so that it's not repeated in each request in the bundle, making the payload over the wire unnecessarily big.</p>",
        "id": 153860682,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480950570
    },
    {
        "content": "<p>Could I put it in the bundle even if at my end I don't do anything with it other than to persist it within the order?</p>",
        "id": 153860684,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480950733
    },
    {
        "content": "<p>Man... this would be simple if Requests hadn't been split.</p>",
        "id": 153860685,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480950755
    },
    {
        "content": "<p>You are the sending side? As I  indicated, you put what you know as the patient into the Bundle with the Order... Or are you the receiving side? For which you need to have some kind of patient registry, even if it is not a FHIR based registry... right?   I don't understand the difficulty.  It is certainly going to need to go in each Bundle... The only solution there, is as Grahame indicated, there needs to be a patient registry (or set of them) that can hold a persistent resource that everyone involved can reference and use.</p>",
        "id": 153860687,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480951040
    },
    {
        "content": "<p>We are the receiving side, and we don't a have a patient registry.</p>",
        "id": 153860688,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480951106
    },
    {
        "content": "<p>We only receives orders from practitioners, patient info doesn't matter outside the set of orders received.</p>",
        "id": 153860689,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480951146
    },
    {
        "content": "<p>Okay.. so then why do you care to have the sender tell you who the patient is? I presume there is some reason to know who the patient is for each Order.</p>",
        "id": 153860690,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480951169
    },
    {
        "content": "<p>Why can you not store the pat information you have as a Pat Resource, and link to it (using the conditional create to creat as needed)?  This would be for the scop of your Diag Reports and not an authoritative source for pat information outside of that scope.</p>",
        "id": 153860691,
        "sender_full_name": "Kevan Riley",
        "timestamp": 1480951237
    },
    {
        "content": "<p>For billing and shipping purposes. The practitioner orders 3 tests to be performed on patient x (so they send us the patient info) we need to send some sample collection devices to the patient address then run the tests and report to the practitioner. After those actions I no longer care for that patient or its info.</p>",
        "id": 153860694,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480951300
    },
    {
        "content": "<p>Do you eventually pass the order on to others? As an intermediary, you would have some responsibility for some persistence... even if you used the same condiditional-create trick... internal to your system just keeping the Order and Patent together.   If you are the end of the communications, then I would understand why Contained is interesting as it would work for you. The question comes if you are not the end of the Order communication</p>",
        "id": 153860695,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480951305
    },
    {
        "content": "<p>If that person ended up going to another Dr and they ordered some tests for us we'd repeat the entire process and that's the expectation</p>",
        "id": 153860696,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480951331
    },
    {
        "content": "<p>Yes, we are the ones that perform the N amount of orders.</p>",
        "id": 153860697,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480951368
    },
    {
        "content": "<p>okay, so you 'forget' the Patient in your registry after closing the loop... that is your choice too... nothing demands you remember for infinity.</p>",
        "id": 153860698,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480951387
    },
    {
        "content": "<p>Right ok. So I could bring in the Patient as part of the bundle, the sender thinks that I might be persisting it as its own resource but I'm really not. And that would be ok.</p>",
        "id": 153860699,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480951436
    },
    {
        "content": "<p>Is that what you're proposing?</p>",
        "id": 153860700,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480951444
    },
    {
        "content": "<p>it is common for servers to do purge operations occationally... your SOP simply has a very short purge cycle.</p>",
        "id": 153860701,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480951449
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 153860702,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480951462
    },
    {
        "content": "<p>you are sending the Order back to the originator, right? So they would like your response to reference the patient THEY declared... right? So really your Patient Registry is just a shadow of all your clients; not really a Patient Registry. This was not clear originally.</p>",
        "id": 153860703,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480951555
    },
    {
        "content": "<p>perspective is important. I originally understood you to be describing your  situation as the sender of the message, not the recipient. I understood that the sender didn't have a patient registry, but it is you as the recipient that doesn't want to have a patient registry. Is it true that your senders do have their own patient registries? </p>",
        "id": 153860704,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480951776
    },
    {
        "content": "<p>Well... First, thanks for your attention and help on this use case.</p>\n<p>The practitioner sends me the tests they want to run and the patient info, so that I know who to send the collection devices and whom I might charge. What I care for internally is an order that has many tests that they want to run, the prac that ordered them, and the patient the tests are for. When the loop is closed on my end, the Report I send will reference the patient on their system because they do have that registry and they did send the ID with their original payload.</p>\n<p>I can't just use a reference to their registry for our operations because it's not a publicly available system, whenever I have to ship something that info needs to be availabe. On DSTU2 DiagnosticOrder was pretty much what we want, an order with line items inside it. In that case we'd ask the practitioner to send the Patient contained within that order and that Order would be self sufficient and have all the info we need. We'd persist it like that. With the new version we have separate DiagnosticRequests (Line items) that are grouped together some other way. Here is where things become difficult.</p>",
        "id": 153860708,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480952271
    },
    {
        "content": "<p>I'm looking at <a href=\"http://build.fhir.org/requestgroup.html\" target=\"_blank\" title=\"http://build.fhir.org/requestgroup.html\">http://build.fhir.org/requestgroup.html</a> but it seems incomplete... Maybe I'm mis-reading something</p>",
        "id": 153860710,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480952512
    },
    {
        "content": "<p>A RequestGroup would allow you to put multiple DiagnosticRequests together, but request group is intended for cases where there may be optionality or relationships between the requests that are important.</p>",
        "id": 153860737,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1480955791
    },
    {
        "content": "<p>It seems incomplete because it is in the middle of reconciliation. Though all substantive changes have been applied, there are still documentation changes that need to be made.</p>",
        "id": 153860739,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1480955853
    },
    {
        "content": "<p>Yeah OK. From what I read it did not seem aligned with my use case. I think <span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> helped distill the core issue, but I'm still not 100% on how to tackle it...</p>",
        "id": 153860740,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480956179
    },
    {
        "content": "<p>I'm thinkin Graham's statement that I have to contain the shared information in each Request might be the only way to go. Which might not be acceptable unfortunately.</p>",
        "id": 153860742,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480956370
    },
    {
        "content": "<p>I think Grahame was speaking of \"Contained\". THat is where you put the content of Patient inside Order. With \"Contained\" neither you nor the sender can EVER remove the Patient information, even if you or they have a real Patient registry. The \"Contained\" Patient must stay inside the Order. This presents real problems for a system that has both Patient and Order as RESTful implementations.</p>",
        "id": 153860755,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480958688
    },
    {
        "content": "<p>So what do you recommend? We don't have Patient and Order.</p>",
        "id": 153860756,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480958884
    },
    {
        "content": "<p>I am trying to get clear that there are two totally different things: \"Contained\" is a copy of Patient inside Order, and can't be disconnected. \"In the Bundle\" with reference from Order to Patient; is more flexible. My recommendation is \"In the Bundle\", as I pointed out before. It is just not the same thing as \"Contained\".</p>",
        "id": 153860761,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480959158
    },
    {
        "content": "<p>Both are very valuable concepts... I have used both in the Profiling work I have done. </p>",
        "id": 153860763,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480959219
    },
    {
        "content": "<p>I understand the differe, and I agree, \"In the bundle\" is what I'd prefer. But doesn't that force us to create a /Patient/ resource? Even if short-lived.</p>",
        "id": 153860769,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480960968
    },
    {
        "content": "<p>I read this thread, and I don't understand your rigid statement that you don't have a Paitent resource. I was product lead for an application that did exactly what your doing in my last job before FHIR, and if I tried to implement all that functionality without a table of patients, my product would be a mess, and I would have the same problems you're having as well. So I assume that you do have a patient record, to link tests by patient. </p>",
        "id": 153860843,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480967361
    },
    {
        "content": "<p>in which case, why not have a patient end point? Your insistence that you don't have proper patient support is creating problems because you don't have proper support for patient</p>",
        "id": 153860846,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480967407
    },
    {
        "content": "<p>We can consider implementing one, and I'll bring it up. But it seems to me that we'd be doing so just for the sake of FHIR. FHIR DSTU3 to be specific.</p>",
        "id": 153860880,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480968772
    },
    {
        "content": "<p>Our FHIRless model would be a order with several tests, the patient name and address, and that's it.</p>",
        "id": 153860885,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480968903
    },
    {
        "content": "<p>but you have a patient table, no? </p>",
        "id": 153860965,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480971878
    },
    {
        "content": "<p>Actually we don't. Just remembered something from our overall design. </p>",
        "id": 153861072,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480980842
    },
    {
        "content": "<p>What we're building is an API front for an existing back end system that handles these orders. We're building this API to be consumed by other services and figured we will use this one to start adoptin FHIR. </p>",
        "id": 153861073,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480980973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> this is where the request group thing doesn't work so well</p>",
        "id": 153861074,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480981020
    },
    {
        "content": "<p>So the API that we're building in theory should take &lt;whatever FHIR model we decide&gt; and translate it into the backend system model</p>",
        "id": 153861075,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981030
    },
    {
        "content": "<p>the only way to make this work neatly is to make the API work the way your data model works:<br>\n- a single grouping request<br>\n- each item is a contained resource<br>\n- there's a single contained patient that all the contained resources reference</p>",
        "id": 153861076,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480981064
    },
    {
        "content": "<p>Which is something like what I've stated before: order {practitionerRequester, testsToBePerformed, patientToSendSampleContainersTo}</p>",
        "id": 153861077,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981086
    },
    {
        "content": "<p>Yes!</p>",
        "id": 153861078,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981108
    },
    {
        "content": "<p>Exactly what we thought we had with DiagnosticOrder from DSTU 2</p>",
        "id": 153861079,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981125
    },
    {
        "content": "<p>well, there's a redirection point been introduced, so it's a little more verbose. I think </p>",
        "id": 153861081,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480981161
    },
    {
        "content": "<p>How do you imagine we could do this with individual DiagRequests</p>",
        "id": 153861082,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981175
    },
    {
        "content": "<p>?</p>",
        "id": 153861083,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981176
    },
    {
        "content": "<div class=\"codehilite\"><pre>RequestGroup\n   contained\n     patient details * 1\n     DiagnosticRequest * n for each item\n        status\n        intent\n        code\n        subject - reference to contained patient\n  identifier - id for request\n  subject - reference to contained patient\n</pre></div>",
        "id": 153861084,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480981356
    },
    {
        "content": "<p>It seems to me that we could still do something like expect bundles with: 1 patient, 1 practitioner, N diagRequests all referencing the previous. Our API would aggregate all of this into what the backend takes and call it a day. No?</p>",
        "id": 153861085,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981358
    },
    {
        "content": "<p>Oh I see...</p>",
        "id": 153861086,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981398
    },
    {
        "content": "<p>So you suggest we put the individual diagReqs contained within the group. I thought that's what the \"action\" element was for, and it just seemed off...</p>",
        "id": 153861087,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981494
    },
    {
        "content": "<p>which action element?</p>",
        "id": 153861088,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480981564
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/requestgroup-definitions.html#RequestGroup.action\" target=\"_blank\" title=\"http://build.fhir.org/requestgroup-definitions.html#RequestGroup.action\">http://build.fhir.org/requestgroup-definitions.html#RequestGroup.action</a></p>",
        "id": 153861089,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981585
    },
    {
        "content": "<p>In the RequestGroup, you'd have to do that, otherwise your resource wouldn't reference all the contained resources.</p>",
        "id": 153861090,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1480981594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> I'm not sure I follow</p>",
        "id": 153861091,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981637
    },
    {
        "content": "<p>yes, you'd have to reference each of the contained diagnosticRequest resources in RequestGroup.action.resource</p>",
        "id": 153861092,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480981669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> should requestGroup be in workflow module?</p>",
        "id": 153861093,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480981690
    },
    {
        "content": "<p>There are several comments related to that question. Feedback from CDS was that it's hard to talk about it without all the context from either direction, so that regardless of what module it's in, you'd need explanatory and cross-referencing text in both.</p>",
        "id": 153861094,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1480981750
    },
    {
        "content": "<p>Hehe ok so requestGroup.action.resource -&gt; requestGroup.contained.[n]diagRequest<br>\nand requestGroup.contained.[n]diagRequest.subject -&gt; requestGroup.contained.patient</p>",
        "id": 153861095,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981765
    },
    {
        "content": "<p>yes</p>",
        "id": 153861096,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480981781
    },
    {
        "content": "<p>Think I got it.</p>",
        "id": 153861097,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981787
    },
    {
        "content": "<p>RequestGroup is intended for grouping a bunch of pieces together that are interdependent - and it becomes the only request that has a status.  To just group things together and say \"these are part of the same lab order\", you'd use requisition id or Task.</p>",
        "id": 153861098,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1480981839
    },
    {
        "content": "<p>Personally what's your take on using this approach? RequestGroup seems somewhat subject to change in the near future.</p>",
        "id": 153861099,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981886
    },
    {
        "content": "<p>Well... Already kinda went down the path of using RequisitionId but then it seems I kinda HAVE to have a /Patient/ resource for it to work neatly.</p>",
        "id": 153861100,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480981927
    },
    {
        "content": "<p>I would recommend to use a grouping id, not RequestGroup, but the lack of a coherent patient infrastructure pushes you away from that, since you link patient to the requsest group, not the request items. The consequence of this is that maintaining the links at the item level is very verbose </p>",
        "id": 153861101,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480981996
    },
    {
        "content": "<p>Just commenting on this: \"RequestGroup seems somewhat subject to change in the near future.\" Our intent is to keep these structures stable for at least the coming year, as described in the clinical reasoning module roadmap.</p>",
        "id": 153861102,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1480982117
    },
    {
        "content": "<p>What if accept something like what I shared earlier:  <a href=\"https://chat.fhir.org/user_uploads/10155/J8hXTVPokVQrKX9x8JmJ4Ifm/bundleRef.json\" target=\"_blank\" title=\"bundleRef.json\">https://chat.fhir.org/user_uploads/10155/J8hXTVPokVQrKX9x8JmJ4Ifm/bundleRef.json</a> and I just aggregate it all into what our backend accepts. I guess what's wrong about it is that I'm giving the calling service the impression that I'm actually creating an identifiable patient in my system, right?</p>",
        "id": 153861105,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480982236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> understood</p>",
        "id": 153861106,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480982249
    },
    {
        "content": "<p>We have a very similar use case to <span class=\"user-mention\" data-user-id=\"193086\">@Jose Montoya</span>  and used Task as a container resource for this. We don't have the interdependences.</p>",
        "id": 153861120,
        "sender_full_name": "Neil Grooby",
        "timestamp": 1480984750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192826\">@Neil Grooby</span> so you had a /task/ resource where other systems posted a completely composed task?</p>",
        "id": 153861127,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480993527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> don't know if you saw my msg earlier. What are the cons or impeding reasons not to do something like <a href=\"user_uploads/10155/J8hXTVPokVQrKX9x8JmJ4Ifm/bundleRef.json\" target=\"_blank\" title=\"user_uploads/10155/J8hXTVPokVQrKX9x8JmJ4Ifm/bundleRef.json\">https://chat.fhir.org/user_uploads/10155/J8hXTVPokVQrKX9x8JmJ4Ifm/bundleRef.json</a> and aggregate it all into our backend system model?</p>",
        "id": 153861128,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1480993628
    },
    {
        "content": "<p>Perhaps as a Collection rather than a Transaction since the action is implicit in the endpoint? You aren't asking the receive to CRUD but to 'here - have this'.</p>",
        "id": 153861176,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1481017566
    },
    {
        "content": "<p>It depends what you expect to be able to query later</p>",
        "id": 153861204,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1481034048
    },
    {
        "content": "<p>Yes ok! I think this was part of my original post on this stream. If I switch to a collection including the patient doesn't require that I persist it.</p>",
        "id": 153861208,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1481035128
    },
    {
        "content": "<p>?</p>",
        "id": 153861209,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1481035133
    },
    {
        "content": "<p>Yeah so basically I'd like to receive a few things but I'll decide what I persist and what I don't.</p>",
        "id": 153861210,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1481035188
    },
    {
        "content": "<p>We're not expected to be queried for patients.</p>",
        "id": 153861211,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1481035205
    },
    {
        "content": "<p>Or ideally in a transaction a way to say hey Post these things but these others not... Or even if I include the patient as a Post but end up not persisting it independently.</p>",
        "id": 153861213,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1481035393
    },
    {
        "content": "<p>If you're expected to be queried for DiagnosticRequests, then receiving a \"Collection\" Bundle would not result in DiagnosticRequests being independently available for query.  Do note that I think it's legitimate for you to support querying against DiagnosticRequest and supporting _include on DiagnosticRequest.subject, but not supporting direct query on the Patient endpoint</p>",
        "id": 153861243,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1481039712
    },
    {
        "content": "<p>Yes, we would like the approach to support querying requests.</p>",
        "id": 153861244,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1481039858
    },
    {
        "content": "<p>So I guess at the end of the day my options are 2: <br>\n1- Implement /Patient/ to first create the patient and reference them from the DiagRequests. <br>\n2- Contain the patient in every DiagRequest.</p>",
        "id": 153861245,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1481040152
    },
    {
        "content": "<p>you do have the 3rd option of representing the patient as an identified resource, and then unidentifying it when processing. But as Paul said, that's not really RESTful CRUD. So for best alignment, I'd make it a message, and add a MessageHeader with your own event type. Then it would be crystal clear...</p>",
        "id": 153861271,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481052754
    },
    {
        "content": "<p>I will now look at Messages. As it stands, is this accurate to our options?</p>",
        "id": 153861306,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1481058936
    },
    {
        "content": "<p>1- /Patient/: We receive a transaction bundle with 1x Patient, N diagRequests. We persist the patient and diagRequests reference that independent patient.</p>\n<p>2- \"Contained\": We receive a transaction bundle with N diagRequests each containing the same patient.</p>\n<p>3- Collection: We receive a collection bundle with 1x Patient, N diagRequests. The calling system can not infer what we're doing with the resources. We decide that we're persisting in our own model and not follow CRUD.</p>\n<p>4- Message: To be researched.</p>",
        "id": 153861307,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1481058936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193086\">@Jose Montoya</span>  - yes, we have other systems (3rd parties) who need us to perform services (might be to get a file copy from a practitioner, blood tests etc). We were originally looking at Order but after asking here, it was identified that Order was being depreciated and that Task would be appropriate.</p>",
        "id": 153861313,
        "sender_full_name": "Neil Grooby",
        "timestamp": 1481062663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193086\">@Jose Montoya</span> Message would be: We receive a message bundle with 1x Messageheader, 1x Patient, N diagRequests.</p>\n<p>The 'tricky bit' is that you have N diagRequests. What is your intended business behaviour if one of those requests in invalid - reject the one or reject them all? If the former then you should have made this a batch bundle containing multiple single-instance messages or standalone resources, if the latter then a message bundle where MessageHeader.data points to multiple resources (Nx diagRequest) can work if you ignore the langauge about 'focal resources' and each diagRequest would refer to the 1x Patient which would appear as a peer to MessageHeader in the bundle.</p>",
        "id": 153862214,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1481191697
    }
]