[
    {
        "content": "<p>Hi all,<br>\nWe are trying to create application work offline mode using FHIR server. When no network available we are creating FHIR resource using UUID (randomly generated unique identifier) and saving locally. And work around that resource using that resources another resources references.</p>\n<p>We have few queries around that how to save all resources when network or server available. How to check any duplicate related to uploaded data from offline.</p>\n<p>Example: Creating Patient. Resource - offline with UUID.<br>\nCreating Allergy Intolerance resource of created offline patient as subject and saving offline.<br>\nCreating Condition resource of created offline patient as subject and saving offline.</p>\n<p>How to save all resources and validate duplicates while saving to FHIR server best way to avoid duplicates and complexity.</p>",
        "id": 237781199,
        "sender_full_name": "Mounika",
        "timestamp": 1620373540
    },
    {
        "content": "<p>Another way to think of this is as if perhaps you have local data that is that is not in FHIR. At some stage you take this existing local data and upload it to FHIR. How would you handle that? How would that be different to the situation you describe? Any two sets of data may have the same real world data (e.g. the same allergy twice). That is not really a FHIR issue. The exact same FHIR resources are not going to exist, presumably, if your user just created them. You would just need to do some sort of reconciliation step, probably with user assistance, to show what is on the server and what is being uploaded and say “this allergy exists on the server, do you still want to upload this new one, or do you want to merge them etc”.</p>",
        "id": 237789982,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1620378277
    },
    {
        "content": "<p>This is not an easy problem in the general sense. <br>\nYou have either a Bundle or set of resources you created offline. Some or all of them may exist already on the server. </p>\n<p>One way to handle it would be: <br>\n1) take the set of offline resources and walk all the References between them to create a dependency graph (directed graph). <br>\nHint: The HAPI library has a Terser object which can help with this. </p>\n<p>2) sort the graph<br>\nAt this point you know the dependency order -i.e. the order you need to resolve the resources against the server so you can update the references properly. </p>\n<p>3) Iterate the graph and resolve each resource. This involves searching to see if it exists, and POSTing it if not.<br>\nIn both cases you then need to then update the dependent resources with the newly resolved id in their references. </p>\n<p>Step 3 is hard because you have to define what defines the uniqueness of a resource. It it an Identifier, a combination of attributes, etc. </p>\n<p>As Rik pointed out, you may also have to account for the resources being updated by multiple sources and whether you need to merge changes vs a straight PUT to replace an existing resource.</p>",
        "id": 237892165,
        "sender_full_name": "Craig McClendon",
        "timestamp": 1620422601
    }
]