[
    {
        "content": "<p>Hi All,</p>\n<p>I've a question around Bundle Transaction. In our project we are using this mechanism to register a user. During Registration we re expecting the registration service to provide us details on Consent, Person, Patient and RelatedPerson as a part of one atomic transaction. This works well from a transaction point of view. However the server is struggling to figure out what is the purpose of the particular transaction and apply the associated business rule accordingly as Bundle Transaction mechanism can be used to perform action on any set of resources. At this moment, we couldn't find any way to inform the server about a 'type' of transaction using which the server can determine the business rules to be applied.</p>\n<p>We thought of addressing this issue by creating a FHIR document (administrative) and put all the relevant resources inside of it and use a Composition.type to let the server know what to do. However with this approach, we would loose the option of classifying what type of action we want on each resource (POST/PUT/DELTE/GET)</p>\n<p>Any suggestion will be very helpful. Looping in  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> for any comment/suggestion</p>",
        "id": 179496560,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1572489087
    },
    {
        "content": "<p>There is no \"type\" of transaction - clients can send whatever creates/updates/deletes/queries they like in whatever combination they like.  If you're limiting support to a specific set of operations on a specific set of resources to mirror a particular back-end function, then you're looking for an operation or messaging interface, not transaction.</p>",
        "id": 179498635,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572492590
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> , I thought of using operations, However I guess operations doesn't allow me to specify if what kind of HTTP method (POST, PUT, GET, DELETE) I would like to use for a 'in' Resource</p>",
        "id": 179500915,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1572496402
    },
    {
        "content": "<p>That's not pre-determined by your back-end?</p>",
        "id": 179537696,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572533090
    },
    {
        "content": "<p>Can you explain further what the limitations are for the back end?</p>",
        "id": 179537719,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572533110
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> , </p>\n<p>After having several discussion with the dev team, it sounds like we can manage these rules using backend. However, the project is requesting to avoid custom operation as much as possible unless there is no other option. Considering this, I got a suggestion from the project to handle this use case using Fhir document. I mean a Fhir document for user registration activity where each section of the document will contain the relevant resources and applicable rules. Please let us your suggestion around it.</p>",
        "id": 179669749,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1572646036
    },
    {
        "content": "<p>A document that has custom behavior isn't going to be better than an operation.  If you want to avoid custom operations, you need to avoid custom behavior on the back-end.  The benefit of not doing custom things is that clients can interact with you in a generic way.  If clients have to carefully tune what they're sending to get their interactions with your system to work, then \"pretending\" to be a transaction (or document, or anything else) isn't going to help much.</p>",
        "id": 179672484,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572648677
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> for your suggestion. Much appreciated...</p>",
        "id": 179765540,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1572818790
    },
    {
        "content": "<p>My first thought would be to include a Task resource in the bundle that would serve as a signal of the transactional context of the bundle. The expected behavior of the receiving server based upon transaction context would have to be pre-coordinated in a must-understand way.</p>",
        "id": 179896934,
        "sender_full_name": "AbdulMalik Shakir",
        "timestamp": 1572921192
    },
    {
        "content": "<p>Knowing that a Bundle is a transaction is a question of indicating that in the Bundle.type - whether there's a Task in it or not is irrelevant <span class=\"user-mention\" data-user-id=\"196402\">@AbdulMalik Shakir</span> .  (Tasks can appear in all types of bundles).  The type of Bundle you accept should be driven by what your back end can do.  Generally, 'transaction' Bundles should only be accepted by servers that can process arbitrary RESTful actions - and can process a collection of them as a single unit of work.  There's no need to support all resources, or even all operation types.  However, if you support 'transaction', then you SHOULD be able to execute all of the operation-resource combinations that your CapabilityStatement declares, and you shouldn't depend on the Bundle containing an particular combination of resources or operations.</p>",
        "id": 179901770,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572929567
    }
]