[
    {
        "content": "<p>Hello,  I was wondering, what would be the best approach to deal with resource identification, within an SQL RDBMS, where resources are stored as a JSON formatted blob. Would it make sense to identify it, based on its full External URL or is there a more efficient and smarter way to identify the target resource, locally? Thank you in advance!</p>",
        "id": 153917617,
        "sender_full_name": "Dimitar",
        "timestamp": 1509724961
    },
    {
        "content": "<p>the logical id is intended for this use</p>",
        "id": 153917645,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1509741290
    },
    {
        "content": "<p>So it is supposed to be resolved, through the NamingSystem?</p>",
        "id": 153917647,
        "sender_full_name": "Dimitar",
        "timestamp": 1509742977
    },
    {
        "content": "<p>In my case, I am dealing with extraction from multiple different servers and I need to re-identify the resources.</p>",
        "id": 153917657,
        "sender_full_name": "Dimitar",
        "timestamp": 1509792044
    },
    {
        "content": "<p>then I'm not sure exactly what you are asking</p>",
        "id": 153917658,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1509798596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  My use case is the following, I am retrieving patient records, from multiple different servers and storing them. Now my concern is, how should I uniquely identify the resource to be stored, so that it can be updated, if it already exists in the local database. I am currently doing it by storing the fullUrl of a resource as a primary key and doing a lookup on all of the ExternalUrls, to match the retrieved record, but I feel that this approach is highly inefficient and wanted to see if there is a better way of doing this. I am trying to achieve something like the following <br>\n<a href=\"https://www.hl7.org/fhir/managing.html#distributed\" target=\"_blank\" title=\"https://www.hl7.org/fhir/managing.html#distributed\">Client dealing with multiple servers paragraph</a>.</p>",
        "id": 153917660,
        "sender_full_name": "Dimitar",
        "timestamp": 1509807182
    },
    {
        "content": "<p>well, logical ids are 64 characters so that you can generate compose ids. That can save you doing lookups - which sounds like the inefficient bit</p>",
        "id": 153917685,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1509910715
    },
    {
        "content": "<p>Excuse my ignorance, but what do you mean by generating compose ids?</p>",
        "id": 153917695,
        "sender_full_name": "Dimitar",
        "timestamp": 1509922062
    },
    {
        "content": "<p>well, an id is a set of characters and digits, and - or .  which can be up to 64 characters</p>",
        "id": 153917696,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1509922117
    },
    {
        "content": "<p>you could prepend [x] - where [x] is a code for the source system, and just use the source system's logical identifier</p>",
        "id": 153917697,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1509922164
    },
    {
        "content": "<p>Aha, therefore as an example, I have resources coming from Server A and Server B. I would just store the resource, retrieved from server A as ServerA/Observation/[logical id]? And do the lookup on the code for source system, resource type and logical id?</p>",
        "id": 153917698,
        "sender_full_name": "Dimitar",
        "timestamp": 1509922404
    }
]