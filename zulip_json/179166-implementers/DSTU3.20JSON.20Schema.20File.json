[
    {
        "content": "<p>Hi! I am trying to use the official JSON Schema for Version 3 to validate my resources and I have found many occasions where String values that are restricted by some regular expression (e.g. Timestamps) are not restricted by the schema. However, when I use the official validator.jar the string values are restricted. See e.g. the (invalid) Patient resource that I attached. It is (legitimately) not validated by the official validator, but the official json schema (illegitimately) would validate that resource (thus, so does my implementation..). I suspect it to be the same for many other datatypes that represented as strings in JSON. <a href=\"/user_uploads/10155/h7WGoN74mROA3De4bxPwA5Vq/test_resource.json\" target=\"_blank\" title=\"test_resource.json\">test_resource.json</a> .<br>\nSo the Schema that is used by the official validator does not seem to be the same schema I can download. I am confused. Can somebody help me out?</p>",
        "id": 182183902,
        "sender_full_name": "Jonas Fortmann",
        "timestamp": 1575039607
    },
    {
        "content": "<p>The validator checks far more than JSON schema is able to.  E.g. FHIRPath constraints, terminology bindings, etc.  It doesn't use either the XML or JSON schemas.  (Not sure why the JSON schema isn't checking regular expressions.  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ?)</p>",
        "id": 182184160,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1575039845
    },
    {
        "content": "<blockquote>\n<p>The validator checks far more than JSON schema is able to.  E.g. FHIRPath constraints, terminology bindings, etc.  It doesn't use either the XML or JSON schemas.  (Not sure why the JSON schema isn't checking regular expressions.  <span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> ?)</p>\n</blockquote>\n<p>Thanks for the quick response. As an additional info: I have looked into the Schema Files for Version 4 and they have definitions for e.g. Instants that consequently checks the regular expression. However, they do not exist for the version 3 schema</p>",
        "id": 182184301,
        "sender_full_name": "Jonas Fortmann",
        "timestamp": 1575039976
    },
    {
        "content": "<p>The JSON schemas were improved quite a bit as part of the R4 release.  There's no intention to re-publish schemas for STU3.</p>",
        "id": 182184340,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1575040036
    },
    {
        "content": "<p>Thanks again for the super quick responses! Hmm we are currently not able to update to R4 which means I cannot use the R4 schema files, since they wont be compatible. If I understand you correctly the Schema files only coarsely check the documented structure of the resources. In general, I do not understand the purpose of the JSON Schema files if they do not actually precisely specify the schema that is depicted in the official documentation? I understand the the real validator also checks terminology etc but shouldn't the schema files at least structurally validate a resource (precisely)? I think I got things mixed up..</p>",
        "id": 182184869,
        "sender_full_name": "Jonas Fortmann",
        "timestamp": 1575040492
    },
    {
        "content": "<p>The amount of work that can be done by any one person or organization is finite</p>",
        "id": 182185569,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1575041094
    },
    {
        "content": "<p>This is absolutely correct. However, the way the schema files are presented, wrong expectations are created (At least I expected them to be precise..). Also, there seems to be a STU3 Schema file that contains this degree of precision since the official validator works just fine for STU3 also. I was thinking maybe I found the wrong files..?!</p>",
        "id": 182185829,
        "sender_full_name": "Jonas Fortmann",
        "timestamp": 1575041303
    },
    {
        "content": "<p>JSON schema was super-new at the time STU3 came out, so the amount of work on it was limited.  The validator had been worked on for much longer.  The validator checks the instances after they've been converted from JSON (or XML or RDF) into an internal object model.  It doesn't use the schemas, it uses the StructureDefinition resources.  The StructureDefinitions are the official source of truth - all schemas, schematrons, etc. are generated from those.</p>",
        "id": 182191010,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1575046262
    },
    {
        "content": "<p>I don't mind if someone wants to prepare a more complete set of json schemas for R3. however: the whlole json schema is a mine field. I've invested way too much time trying to get a set of json schemas that work for some reasources with some tools....</p>",
        "id": 182194266,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575049526
    },
    {
        "content": "<p>FWIW, I've had better luck with the R4 JSchema (with Newtonsoft's JSchema library) than with the R3 JSchema.</p>\n<p>There were (and are) some RegEx patterns in R3 JSchema, e.g. for FHIR DateTime and some other datatypes and NewtownSoft does check for these patterns and rejects those that do not match.</p>",
        "id": 182201629,
        "sender_full_name": "John Silva",
        "timestamp": 1575058288
    }
]