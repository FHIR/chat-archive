[
    {
        "content": "<p>Has anyone got an experience around creating multiple workstream resources/profiles in Vonk which are related? if yes, do you know how to configure a resource creation (Post) if it is dependant on some other resources? For example, if you have got an encounter coming for an appointment but that appointment should have existed as a prereq, how do you check such the existence of appointment and then to allow the encounter publication? Broadly speaking validation a REST transaction based on some rulesVonk Interrelated Queries</p>",
        "id": 188378056,
        "sender_full_name": "Medi Harsini",
        "timestamp": 1581946325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  Can you please advise how this is done commonly speaking in FHIR</p>",
        "id": 188392207,
        "sender_full_name": "Medi Harsini",
        "timestamp": 1581957799
    },
    {
        "content": "<p>In aidbox, we check all references on create/update to ensure referential consistency.</p>",
        "id": 188394481,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1581959777
    },
    {
        "content": "<p>The standard mechanism would be to use the REST conditional create functionality (<a href=\"http://build.fhir.org/http.html#ccreate\" target=\"_blank\" title=\"http://build.fhir.org/http.html#ccreate\">http://build.fhir.org/http.html#ccreate</a>).  I don't know if Vonk supports this though</p>",
        "id": 188400535,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581966236
    },
    {
        "content": "<p>Vonk does support it (conditional operations).</p>\n<p>Verifying referential integrity has its benefits, but also its drawbacks, so it should be configurable (IMHO) on a server, not mandatory. On HAPI it's terribly hard to do 'garbage collection' when one doesn't require a particular graph of resources any more. Aid box doesn't have a public endpoint, so I don't know whether that suffers the same issue.</p>",
        "id": 188429501,
        "sender_full_name": "René Spronk",
        "timestamp": 1582011728
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191372\">@René Spronk</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  <span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span></p>",
        "id": 188444903,
        "sender_full_name": "Medi Harsini",
        "timestamp": 1582027573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191372\">@René Spronk</span> you can have your  own aidbox for free in our demo cloud - <a href=\"https://aidbox.app\" target=\"_blank\" title=\"https://aidbox.app\">https://aidbox.app</a></p>",
        "id": 188451894,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1582034077
    },
    {
        "content": "<p>Aidbox treats relative url in reference  as local ref and validates consistency; and skip absolute</p>",
        "id": 188452079,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1582034232
    },
    {
        "content": "<p>It skips absolute, even if it resolves to a local reference? In other words, is the distinction made based on format only, or based on local vs. non-local regardless of format?</p>",
        "id": 188452362,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1582034472
    },
    {
        "content": "<p>for performance reason, we do not try to resolve absolute urls (just relative)</p>",
        "id": 188453621,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1582035406
    },
    {
        "content": "<p>We distinguish based on url format</p>",
        "id": 188453719,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1582035477
    },
    {
        "content": "<p>I would like to have this difference explicitly in FHIR Reference :)</p>",
        "id": 188453800,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1582035530
    },
    {
        "content": "<p>What's the difference you want to make explicit?</p>\n<p>The Google implementation recognizes absolute refs that point to the same store the reference is in, and validates them as local refs. But that's just a matter of checking the URL prefix.</p>",
        "id": 188558976,
        "sender_full_name": "Paul Church",
        "timestamp": 1582129185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197072\">@Paul Church</span> what if user wants to make absolute reference to resource, which is on different server? How do you distinguish  for validation is it  local or external</p>",
        "id": 188610371,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1582174380
    },
    {
        "content": "<p>Ah you are talking about url prefix  - that's reasonable  if you have stable absolute url</p>",
        "id": 188610451,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1582174532
    },
    {
        "content": "<p>we have servers with multiple domains and non REST integrations, but yeah  it can be list of prefixes</p>",
        "id": 188610502,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1582174612
    },
    {
        "content": "<p>will support same logic in next release  ;)</p>",
        "id": 188610513,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1582174651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197072\">@Paul Church</span> one question  - do you store local refs internally as resourceType/id pair?</p>",
        "id": 188610698,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1582174934
    },
    {
        "content": "<p>Yes - we keep the original however it was specified (absolute or relative) and split it for internal use so it's consistent.</p>\n<p>re: url prefixes - it's not perfect for us either, you could get to the same data through different endpoints. The motivation was just the case where the client is sending a resource to endpoint A, containing absolute urls matching endpoint A, and ref integrity is enabled.</p>",
        "id": 188639720,
        "sender_full_name": "Paul Church",
        "timestamp": 1582207755
    },
    {
        "content": "<p>I'd need to recheck, but I'm pretty sure ours detects local ref's based on known set of prefixes, and then forces it back to local. So as not to cause issues when coming from other endpoints.</p>",
        "id": 188723550,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1582284629
    }
]