[
    {
        "content": "<p>(I hope this is the right place to discuss this? I've also opened Issue 796 <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/796\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/796\">https://github.com/jamesagnew/hapi-fhir/issues/796</a> for consideration)</p>\n<p>I'm using the HAPI FHIR Client (Java) to connect to a provider and issue a restful GET request, eg to search for Patient resources.</p>\n<p>One of the search parameters has spaces in it: eg, \"address\" is \"123 main street\".</p>\n<p>HttpGetClientInvocation is converting those spaces into + (plus) signs: <code>example.com/Patient?address=123+main+street</code>using Java's <a href=\"https://docs.oracle.com/javase/8/docs/api/java/net/URLEncoder.html\" target=\"_blank\" title=\"https://docs.oracle.com/javase/8/docs/api/java/net/URLEncoder.html\">URLEncoder</a> class which \"Translates a string into application/x-www-form-urlencoded format\".</p>\n<p>Our provider does not support application/x-www-form-urlencoded URL's, and instead supports RFC3986, which apparently requires spaces in search query values to be encoded as <code>%20</code> rather than + (plus) signs: <code>example.com/Patient?address=123%20main%20street</code>  They treat + (plus) signs as literal + (plus) signs.</p>\n<p>It doesn't look like there's any way to intercept and rewrite the URI before the Request is sent. The only interceptors available appear to be for setting headers, none allow for manipulating the URI. </p>\n<p>Has anyone worked around this? Best workaround I can come up with so far is to just construct the URI myself, without using the fluent interface of .where.and.and.execute() etc.</p>",
        "id": 153920741,
        "sender_full_name": "James Daily",
        "timestamp": 1511280339
    },
    {
        "content": "<p>my interpretation of the spec is that your provider is wrong</p>",
        "id": 153920772,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511289450
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> </p>\n<p>I couldn't find anything specific in <a href=\"https://www.hl7.org/fhir/search.html#uri\" target=\"_blank\" title=\"https://www.hl7.org/fhir/search.html#uri\">https://www.hl7.org/fhir/search.html#uri</a> other than:</p>\n<blockquote>\n<p>For this RESTful search (see definition in RESTful API), the parameters are a series of name=[value] pairs encoded in the URL or as an application/x-www-form-urlencoded submission for a POST\". </p>\n</blockquote>\n<p>As I read that, it is clear how to encode for POST, but not specific about how to make them \"encoded in the URL\" for GET.</p>\n<p>I think that FHIR servers should accept both + and %20 interchangeably as encoded spaces within search queries, as most web sites do.</p>",
        "id": 153920799,
        "sender_full_name": "James Daily",
        "timestamp": 1511299570
    },
    {
        "content": "<p>\"+\" is a valid character in a URL, so using it as an escape character would make it ambiguous.  FHIR adheres to the HTTP spec, which says that all escaped characters are escaped using \"%\" when present as part of the URL.</p>",
        "id": 153920838,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1511304599
    },
    {
        "content": "<p>This definitely seems like HAPI's client's URLEncoder is doing the wrong thing. Will fix per that ticket.</p>",
        "id": 153921214,
        "sender_full_name": "James Agnew",
        "timestamp": 1511403404
    }
]