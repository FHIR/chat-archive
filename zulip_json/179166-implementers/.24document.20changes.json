[
    {
        "content": "<p>I'd like to propose new \"signature\" parameter for the $document operation. If true, a FHIR server supporting it would automatically apply a digital signature to the resulting document. This would also likely require a change to the persist parameter to store at /Binary, since there may be issues with storing signed docs to /Bundle. Thoughts? </p>",
        "id": 153889359,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1494511497
    },
    {
        "content": "<p>I don't think there's an issue with storing signed docs on /Bundle. </p>",
        "id": 153889371,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1494514012
    },
    {
        "content": "<p>and what does the parameter say - sign if you can? blow up if you can't?</p>",
        "id": 153889385,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1494514710
    },
    {
        "content": "<p>who is the signature attributed to? What purpose is encoded in the signature? What is the meaning of the signature, is it for non-repudiation? Is this just a bundle signature, or is it a Provenance signature? Signatures require identity, and purpose... Unless you are meaning some form of transport integrity protection, which is short of signature.</p>",
        "id": 153889663,
        "sender_full_name": "John Moehrke",
        "timestamp": 1494583494
    },
    {
        "content": "<p>Attributed to the author?</p>",
        "id": 153889692,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1494587051
    },
    {
        "content": "<p>I agree, would be attributed to the author. My thinking was it would be a Bundle signature. As for what the parameter says, yes sign if you can, blow up if you cant (don't want to leave the impression that a doc was signed when in fact it was not). </p>",
        "id": 153889916,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1494863079
    },
    {
        "content": "<p>If the author, then how does the service get access to the authors Private key?????  Can't do... If it was possible, that would invalidate all non-repudiation capability. </p>",
        "id": 153889978,
        "sender_full_name": "John Moehrke",
        "timestamp": 1494880623
    },
    {
        "content": "<p>best I can see is a timestamp-signature. Meaning it is applied by a timestamp service, as an integrity and wholeness purpose. The timestamp service is stating that the content was X at that specific time.... </p>",
        "id": 153889979,
        "sender_full_name": "John Moehrke",
        "timestamp": 1494880714
    },
    {
        "content": "<p>well, the user doesn't actually sign things with their own private key. Users always trust software to do it for them. The scenario here is that the user trusts the server, not the client. </p>",
        "id": 153890160,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1495000745
    },
    {
        "content": "<p>There is nothing wrong with signature services, but their signatures are not attributable to an individual.  The linkage between the human and the use of their private key for signature is important, as is the ceremony (User Experience) that makes it clear the human intends to sign what is being signed for the given purpose. This would be especially true in Healthcare where digital signatures are used today (Drug prescription). This can't be done by a remote robotic service. But a remote service can do an integrity signature, signed by the integrity signing service identity. I will note that there are integrity signatures used in drug prescription pathway, for lesser potency drugs.</p>",
        "id": 153890195,
        "sender_full_name": "John Moehrke",
        "timestamp": 1495026031
    }
]