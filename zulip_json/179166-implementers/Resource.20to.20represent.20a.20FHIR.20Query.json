[
    {
        "content": "<p>Hi all, is there a \"FHIR way\" to represent metadata of a FHIR query? Background: someone requests data from our FHIR server with a query. We would like the sender to submit not only the query, but also information about who sends it, at what time, what authorization they have, and possibly more. That \"Query resource\" may be stored as a kind of audit event and also used to form the response (think of asynchronous queries). Quick sketch of what such Resource could be like:</p>\n<ul>\n<li>Query.sender - Reference(Person)</li>\n<li>Query.sendingOrganization - Reference(Organization)</li>\n<li>Query.timestamp - instant</li>\n<li>Query.parameters 0..* any number of parameters that may be query-specific. Also including an authorization token (or perhaps this should go somewhere else?)</li>\n<li>Query.requestBundle - Bundle with the actual queries to be executed</li>\n<li>Query.responseBundle - the response</li>\n</ul>\n<p>Is there a way to do it in FHIR? Or would you say that this goes to a \"meta-level\" that is beyond what FHIR is supposed to be?</p>",
        "id": 228821873,
        "sender_full_name": "Marcus Wurlitzer",
        "timestamp": 1614881360
    },
    {
        "content": "<p>This is interesting idea. First question, are you using post? Otherwise, how could a client search and send those data at the same time?</p>",
        "id": 228825227,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1614882514
    },
    {
        "content": "<p>This would be a POST query then, yes, like a Bundle with an entry where <code>request.method = GET</code> and <code>request.url = Patient?identifier=12345</code>.</p>",
        "id": 228832121,
        "sender_full_name": "Marcus Wurlitzer",
        "timestamp": 1614885055
    },
    {
        "content": "<p>I think you can create a profile on Bundle with extensions for Reference(Person) and Reference(Organization). why do you need Reference(Organization) since Person already have Person.managingOrganization</p>",
        "id": 228834609,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1614885978
    },
    {
        "content": "<p>Right - the Bundle has many properties that would be needed. Is the concept of <a href=\"https://www.hl7.org/fhir/messaging.html\">messaging</a> related to this?</p>",
        "id": 228836637,
        "sender_full_name": "Marcus Wurlitzer",
        "timestamp": 1614886774
    },
    {
        "content": "<p>It sounds like what you're trying to do is more up the messaging pathway.  In REST, the user would authenticate with OAuth and you might, at that point, capture their reason for access.</p>",
        "id": 228897552,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614919581
    },
    {
        "content": "<p>Note that Person is never allowed to be referenced.  You must use Patient, RelatedPerson or Practitioner.  Person is a linking resource, it can't ever act on its own.</p>",
        "id": 228897571,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614919611
    },
    {
        "content": "<p>There's no need to specify timestamp or parameters because you know when the query is received and the parameters are what's captured online.  If you want to record all of that information in a permanent record, you can create an AuditEvent instance.</p>",
        "id": 228897623,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614919666
    },
    {
        "content": "<p>Most of the FHIR community uses REST for query.  You're free to use messaging, but you won't find a lot of interoperability partners.</p>",
        "id": 228897691,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614919701
    },
    {
        "content": "<p>Also, solutions like SMART, CDS-Hooks, etc. won't be able to work on top of your interface.</p>",
        "id": 228897714,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614919728
    },
    {
        "content": "<p>Indeed, using a Parameters resource as the focal resource in a FHIR Message would support your use case.</p>",
        "id": 228910889,
        "sender_full_name": "Ren√© Spronk",
        "timestamp": 1614931147
    },
    {
        "content": "<p>Thanks Lloyd, I get the point on acting RESTfully, but I think this is a really an asynchronous query scenario here which cannot be handled truly RESTfully. Think having your own FHIR server and you wanting to <em>review every query</em> before execution.</p>\n<p>Thank you for pointing out the nature of the Person resource.</p>",
        "id": 229308992,
        "sender_full_name": "Marcus Wurlitzer",
        "timestamp": 1615214476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263785\">@Marcus Wurlitzer</span> </p>\n<blockquote>\n<p>but I think this is a really an asynchronous query scenario here which cannot be handled truly RESTfully. but I think this is a really an asynchronous query scenario here which cannot be handled truly RESTfully. </p>\n</blockquote>\n<p>That is why Lloyd mentioned \"messaging\" which is async by nature. Take a look of this one: <a href=\"http://build.fhir.org/messaging\">http://build.fhir.org/messaging</a>. It may give you some ideas.</p>",
        "id": 229309806,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1615214789
    },
    {
        "content": "<p>Yes, that's what I was thinking as well. Thank you all for your suggestions.</p>",
        "id": 229445260,
        "sender_full_name": "Marcus Wurlitzer",
        "timestamp": 1615281397
    }
]