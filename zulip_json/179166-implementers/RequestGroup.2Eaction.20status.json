[
    {
        "content": "<p>I'm submitting a tracker that I'd like opinions on. We have a use case for RequestGroup.action.status, and currently actions don't have a status. I realize there is some amount of redundancy with this (as the referenced action.resource request has a status), but I think it has a valid use case, and there is already some redundancy with the timing and code fields. If there is any previous discussion on RG.action status, I would appreciate if someone could point me to it, but I was unable to find any here.</p>\n<p>As a CDS service we care about the status of a group of actions within the RequestGroup. Specifically for this use case, we care about the neoadjuvant portion of a chemotherapy regimen, the portion of a regimen that is done prior to surgery. I am intending to extend RG.action to add a field that will designate its child actions as pre-operative or neoadjuvant. To determine this section's status, a system would have to dig into the tree and determine the status of each request and write rules to add them together. If the action itself had a status, this would be much simpler. This status would also make it simpler to determine the number of cycles a patient has completed.</p>\n<p>We considered embedding a referenced RequestGroup into the action.resource, but this adds another layer of complexity, and another FHIR resource that would have to be create on a server, and kind of fragments what could otherwise be considered a single regimen.</p>\n<p>Thanks<br>\n<a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13758\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13758\">Tracker #13758</a></p>",
        "id": 153903006,
        "sender_full_name": "Travis Stenerson",
        "timestamp": 1503331141
    },
    {
        "content": "<p>We don't track execution status in <em>any</em> of the Request resources.  That's left to the Task resource.  The reason being is that a given request may have multiple fulfillers each having different statuses.  For example, you might ask one organization to do something and they refuse, then you ask someone else and they start and cancel, then you ask someone else and they're part-way through.  From the Request perspective, the status has remained \"active\" throughout.  Each of the separate \"request fulfillment\" tasks would reflect the states with each of the fulfillers.  As well, requests may have digital signatures on them, making it problematic to update them as fulfillment proceeds.  If you don't want to have to query all of the components, you might also look at defining an Operation.</p>",
        "id": 153903094,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503348402
    },
    {
        "content": "<p>Ok I have to take a step back and ask a more basic question. Does this mean that a single request's progress and status lifecycle is tracked through a Task? Like a medication request. When the final administration is complete, is the MedicationRequest's status set to complete?</p>",
        "id": 153903132,
        "sender_full_name": "Travis Stenerson",
        "timestamp": 1503357419
    },
    {
        "content": "<p>The Request status reflects the status of the authorization.  So once the author of the request deems it to be completed (and thus no longer executable), they can mark the Request as \"completed\".  However, the nuances of how the execution of the request is progressing is managed by Task, not by the request.  In some cases you might have multiple steps that need to be completed before the Request is deemed complete - so for example the dispensing Task might be complete, but the MedicationRequest wouldn't be marked as \"complete\" until the prescriber believes that administration of the medication is also complete.</p>",
        "id": 153903133,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503358499
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"196572\">@Travis Stenerson</span> <br>\n\"Does this mean that a single request's progress and status lifecycle is tracked through a Task? \"<br>\nYes. When you say \"a request's progress\" you are implicitly saying \"the progress of the actions triggered by the request\", right? That is the workflow or series of events which is managed by the task.</p>",
        "id": 153903156,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503382663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> </p>\n<p>Yes that's what I mean. The script writing, the pharm checking, the nurse administering, etc. I don't remember physicians ever verifying that all the medication was given for all the prescriptions they authored..</p>\n<p>What is the proper way to group and track a set of related medication requests over their lifecycle? A task for every request?</p>",
        "id": 153903204,
        "sender_full_name": "Travis Stenerson",
        "timestamp": 1503409164
    },
    {
        "content": "<p>they are grouped so I think you can have one task for the group itself, no?</p>",
        "id": 153903205,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503409261
    },
    {
        "content": "<p>Focus has a max cardinality of 1 on a task. Is there a task group? These resources will be stuck in a request group, but this request group contains many more medication requests than those I need to track.</p>",
        "id": 153903206,
        "sender_full_name": "Travis Stenerson",
        "timestamp": 1503409453
    },
    {
        "content": "<p>And if they were grouped nicely, I would simply look at the status of the overall RequestGroup, since I only care about whether or not all the cytotoxic/neoadjuvant medications have been given. The problem is they won't be grouped very nicely except for all being down the same branch in the PlanDef/ReqGroup action tree.</p>",
        "id": 153903208,
        "sender_full_name": "Travis Stenerson",
        "timestamp": 1503409846
    },
    {
        "content": "<p>task can be part of a task.</p>",
        "id": 153903209,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503409951
    },
    {
        "content": "<p>so, requestGroup is the protocol, right?<br>\ni am looking at it now, sorry. i am a bit confused if RequestGroup is just the \"grouping\" part or actually contains the several requests.</p>",
        "id": 153903212,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503410275
    },
    {
        "content": "<p>say you have a chemotherapy protocol. would you use one requestGroup and  several medicationRequests \"hanging\"/derived from it, or  the requestGroup is supposed to hold all the requests?</p>",
        "id": 153903213,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503410353
    },
    {
        "content": "<p>Also not clear if requestGroup is the protocol definition, or the instantiated protocol</p>",
        "id": 153903214,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503410428
    },
    {
        "content": "<p>The regimens would be distributed as a PlanDefinition (per chemo-ig group) which are instantiated into RequestGroups containing a pile of medication requests with all the relationships between them. These groupings contain subgroupings containing sections. I want to track one specific section of that group. Here's an example:</p>",
        "id": 153903216,
        "sender_full_name": "Travis Stenerson",
        "timestamp": 1503410594
    },
    {
        "content": "<p>Clinicians may not verify that all medication was given, but automated systems may track that in an in-patient setting or infer it based on time in outpatient settings.  If you've got RequestGroups that organize a bunch of MedicationRequests, you'd have a Tasks for each MedicationRequest that you could track.</p>",
        "id": 153903217,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503410652
    },
    {
        "content": "<p>AC followed by T followed by H.<br>\nA &amp; C every 21 days x 4. Then <br>\nT every week x 12. Then <br>\nH every week for 36 weeks. </p>\n<p>I need to know when all of A, C and T are complete.</p>",
        "id": 153903218,
        "sender_full_name": "Travis Stenerson",
        "timestamp": 1503410689
    },
    {
        "content": "<p>The safest way to do that is to define a Task for A + C + T (possibly with subtasks for each).  There's nothing that stops you from throwing an extension on the RequestGroup, but that's not going to work well in an environment that uses digital signatures.</p>",
        "id": 153903219,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503410821
    },
    {
        "content": "<p>when instantiating (creating the requestGroup and the requests) you can create one task for those that you want to track.<br>\nSo you can have one task for each of AC, T, H, A, C, <br>\nAnd/Or you can have one task for A, C and T</p>",
        "id": 153903220,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503410832
    },
    {
        "content": "<p>Lloyd just wrote this on the \"no topic\": The safest way to do that is to define a Task for A + C + T (possibly with subtasks for each). There's nothing that stops you from throwing an extension on the RequestGroup, but that's not going to work well in an environment that uses digital signatures.</p>",
        "id": 153903221,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503410873
    },
    {
        "content": "<p>Sorry.  Fixed the topic heading.</p>",
        "id": 153903222,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503410928
    },
    {
        "content": "<p>so, one task for each-thing-you-want-to-track-separately</p>",
        "id": 153903223,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503410947
    },
    {
        "content": "<p>If A and C are actually represented by 16 medication requests (because there are complex interrelationships between them and other supplemental drugs) how can I task represent them all? Task.focus can only reference a single medication request</p>",
        "id": 153903224,
        "sender_full_name": "Travis Stenerson",
        "timestamp": 1503410962
    },
    {
        "content": "<p>Tasks can be created at whateve granularity is useful for the workflow being exercised.</p>",
        "id": 153903225,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503410964
    },
    {
        "content": "<p>We could look at increasing the cardinality of Task.focus, though I think in this case you'd probably have the focus be the RequestGroup and have the Task.code indicate that it's focused on \"A, C and T\"</p>",
        "id": 153903227,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503411036
    },
    {
        "content": "<p>i actually don't know how to handle \"one task for 3 requests\" if task.focus is 0..1. <br>\nLloyd?</p>",
        "id": 153903228,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503411039
    },
    {
        "content": "<p>If RequestGroup itself has a status, and all the requests have a status, shouldn't groupings within the group also have a status?</p>",
        "id": 153903229,
        "sender_full_name": "Travis Stenerson",
        "timestamp": 1503411100
    },
    {
        "content": "<p>hmm that assumes that there is a code for \"A, C and T\", no?</p>",
        "id": 153903230,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503411101
    },
    {
        "content": "<p>In this case there's a grouping Request that would make sense as the focus.  So far, no one has provided a use-case for one Task with multiple requests where they wouldn't also have sub-tasks specific to each request.</p>",
        "id": 153903231,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503411103
    },
    {
        "content": "<p>You can define a code for anything that's needed</p>",
        "id": 153903232,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503411220
    },
    {
        "content": "<p>There are codes for combinations, codes that I will likely use to denote the branch of the RequestGroup(in action.code), one for AC, one for T. But reducing them all to tasks when all I care about is if the full life cycle of the request is completed seems like it wouldn't give much advantage over just looking at a request's status</p>",
        "id": 153903233,
        "sender_full_name": "Travis Stenerson",
        "timestamp": 1503411326
    },
    {
        "content": "<p>Status on a request reflects the status of the \"authorization\".  So tracking status at the RequestGroup.action level only makes sense if there's deemed to be a distinct \"authorization\".  (And in general, if that were the case, you'd break those out as separate resource instances.)</p>",
        "id": 153903235,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503411352
    },
    {
        "content": "<p>Have you considered having a separate RequestGroup for the A+C+T bit?</p>",
        "id": 153903236,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503411385
    },
    {
        "content": "<p>RequestGroups can point to other RequestGroups</p>",
        "id": 153903237,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503411397
    },
    {
        "content": "<p>Yes, that was my first inclinication Lloyd. I was worried about making it too complicated and exactly how many RequestGroups I would need to break it down into, though really I only need the one subgrouping (to know when a patient will go to surgery). As well, I was afraid that the plan definition would not map nicely to nested request groups.</p>",
        "id": 153903238,
        "sender_full_name": "Travis Stenerson",
        "timestamp": 1503411508
    },
    {
        "content": "<p>Understand the concern about complexity.  There's certainly a variety of ways to approach the problem.  One thing to look at is \"how do systems manage it now?\"  Do they create one structure for the execution or many (and how many)?  From a design perspective, FHIR tries to separate \"tracking the authorization\" and \"tracking the execution\".  And it tries to set the granularity of the authorization objects to \"what can be independently manipulated\".  Adhering to those conventions in your solution will generally give you more interoperablity and less grief, but FHIR doesn't force adherence to those principles so there's technically nothing stopping you from just adding an extension.</p>",
        "id": 153903239,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503411818
    },
    {
        "content": "<p>Yes I was afraid of an extension because it would require constant attention to maintain exactly what section of the request tree is completed. I think a nested group would probably be my best option at this point. Definitely more data on how it's done now would help. Sadly that isn't always easy to get a hold of.</p>",
        "id": 153903242,
        "sender_full_name": "Travis Stenerson",
        "timestamp": 1503412021
    },
    {
        "content": "<p>Just to add to this discussion, addition of action.status would also make sense for the use of the relatedAction. Currently the only way to know if the status of an action should trigger a relatedAction is to recurse through action and all its children to the leaf level requests and determine their statuses.<br>\nI appreciate the solution to nest additional RequestGroups, but then what would be the reason for having a hierarchy of actions? Is this not just duplicating the way of organizing a RequestGroup?</p>",
        "id": 153903247,
        "sender_full_name": "Sadiq Saleh",
        "timestamp": 1503417314
    },
    {
        "content": "<blockquote>\n<p>Status on a request reflects the status of the \"authorization\".  </p>\n</blockquote>\n<p>Could you point me to where I can read more about this, as I was not able to find this link as I looked through the FHIR pages.</p>",
        "id": 153903248,
        "sender_full_name": "Sadiq Saleh",
        "timestamp": 1503417476
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/request.html#12.3.2\" target=\"_blank\" title=\"http://build.fhir.org/request.html#12.3.2\">http://build.fhir.org/request.html#12.3.2</a>:  <br>\nThe status of a request only reflects the status of the \"authorization/intention\"</p>",
        "id": 153903249,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503419076
    },
    {
        "content": "<p>Keep in mind that whatever you do on the request may or may not happen in the actions/events side.<br>\nOne simple example (can't think of a more complicated at the moment): Prescription is for 60 units, patient goes to pharmacy and gets a box of 30. So, the system is expecting one dispense. What is the status of the actions? If you would just take the information from the request, it'd be complete. But it may be complete or not, depends on a lot of things.</p>",
        "id": 153903251,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503419245
    },
    {
        "content": "<p>Please correct me if I am wrong, but what this would mean is that the request's status is related to the Requester's intent or authorization, and the intent is tied to the outcome of the treatment rather than the treatment itself.<br>\nI apologize in advance for the following simplistic example: The intent is to bring a patient's temperature down so I prescribe them 30 pills of Aspirin. If they only take 10 and their temperature is reduced, would I set the status of my request to Complete?</p>",
        "id": 153903252,
        "sender_full_name": "Sadiq Saleh",
        "timestamp": 1503420722
    },
    {
        "content": "<p>It means that the status of the treatment  or actions (not \"the status of the request\", we've discussed that) depends on the treatment itself but may end up influenced by other things that happen in real time.</p>",
        "id": 153903255,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503420875
    },
    {
        "content": "<p>The case you are showing is definitely possible: The physician says \"treatment is for 30 tablets\". But if the patient gets better after 10, then the physician can simply say :nevermind, this treatment is done so i can consider the request \"stopped\". <br>\nIn a hospital setting, this implies that the nurse does not give aspirin the next days. If the system was calculated based only on the planned actions, the patient would still get the aspirins.</p>",
        "id": 153903258,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503421082
    },
    {
        "content": "<p>there is a difference, however, between the physician saying \"the treatment is done so I mark the request as \"stopped\", because I say so\", and some magic calculation to determine that the treatment is completed because the temperature is lowered.</p>",
        "id": 153903261,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503421181
    },
    {
        "content": "<p>Big difference: The status of the request is determined by the requester. The status of the treatment may be influenced by many things and change as the treatment evolves</p>",
        "id": 153903262,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503421228
    },
    {
        "content": "<p>so, to your question \" would I set the status of my request to Complete?\" No, the physician can set the status of the Request to \"stopped\". If there is some logic to determine that \"if temperature is lower , then stop treatment\", this is on the treatment status (task), not on the request.</p>",
        "id": 153903263,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503421329
    },
    {
        "content": "<p>\"completed\" means that the request was satisfied as originally requested.  If the original request was for 30 and the patient got better after 10, typically the prescriber would change the status to \"stopped\".  I.e. The authorization has now been revoked and no further dispenses are permitted.</p>",
        "id": 153903264,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503421412
    },
    {
        "content": "<p>Sorry, forgot \"stopped\". Updated my response now it should be correct.</p>",
        "id": 153903265,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1503421435
    },
    {
        "content": "<p>The key thing is that any status on a request doesn't reflect \"what was done\", merely whether anything is authorized to be done.  An action might have been complete for days or even weeks before the request is updated to \"complete\" - and there's no guarantee it will be.  If you want to track the status of what's actually been done, you're going to want Task rather than the Request resource.  The question with Task is at what granularity(ies) do you want to track execution.</p>",
        "id": 153903267,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1503421599
    }
]