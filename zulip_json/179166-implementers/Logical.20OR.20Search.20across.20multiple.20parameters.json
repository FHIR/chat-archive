[
    {
        "content": "<p>Is there a mechanism to do a logical OR search across multiple parameters? For example, give me all providers with surname Smith OR postcode 12345.</p>",
        "id": 153977827,
        "sender_full_name": "John Carter",
        "timestamp": 1532494794
    },
    {
        "content": "<p>there's 2 approaches. The first is relatively simple that probably covers what you're asking for: <a href=\"http://build.fhir.org/search.html#combining\" target=\"_blank\" title=\"http://build.fhir.org/search.html#combining\">http://build.fhir.org/search.html#combining</a>. Beyond that, you have to look at <a href=\"http://build.fhir.org/search_filter.html\" target=\"_blank\" title=\"http://build.fhir.org/search_filter.html\">http://build.fhir.org/search_filter.html</a></p>",
        "id": 153977828,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532495045
    },
    {
        "content": "<p>Thanks Grahame. We'll dig into search filters to learn more. The examples for combined search OR all focus on two values of a single parameter (language = EN or FR for example), and I didn't appreciate that it would be possible to include two completely separate parameter-value pairs in a URL separated by comma.</p>",
        "id": 153977831,
        "sender_full_name": "John Carter",
        "timestamp": 1532497984
    },
    {
        "content": "<p>oh well that might not be possible</p>",
        "id": 153977834,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532499680
    },
    {
        "content": "<p>now that I read it.... _filter</p>",
        "id": 153977835,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532499698
    },
    {
        "content": "<p>And a very crude solution is to do 2 searches and combine the results clientside. You might even combine the searches in a batch.</p>",
        "id": 153977886,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1532523637
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191757\">@Christiaan Knaap</span> we were hoping to avoid that but it will probably be easier for us than learning to use search_filter s :thinking_face:</p>",
        "id": 153978214,
        "sender_full_name": "John Carter",
        "timestamp": 1532583528
    },
    {
        "content": "<p>Let alone implement it (afaik only Grahame has currently implemented _filter).</p>",
        "id": 153978218,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1532583883
    },
    {
        "content": "<p>one other closed source implementation I've heard about</p>",
        "id": 153978227,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532588243
    },
    {
        "content": "<p>but I wish others would - we keep getting pressure to do trickier and trickier things with search parameters that are easily done with _filter</p>",
        "id": 153978228,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532588288
    },
    {
        "content": "<p>and it's a relatively easy <em>syntax</em></p>",
        "id": 153978229,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532588315
    },
    {
        "content": "<p>ok, I'm looking into implementing the _filter according to <a href=\"http://build.fhir.org/search_filter.html\" target=\"_blank\" title=\"http://build.fhir.org/search_filter.html\">http://build.fhir.org/search_filter.html</a><br>\nThe grammar format is a little strange, was expecting something closer to the fhirpath grammar<br>\n(in terms of expression, not content)<br>\nis the / meant to be the optional seperator?</p>",
        "id": 153978619,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1532671992
    }
]