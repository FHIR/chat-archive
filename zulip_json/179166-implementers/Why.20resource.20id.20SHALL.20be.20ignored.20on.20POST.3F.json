[
    {
        "content": "<p>According to fhir spec resource id SHALL be ignored on <code>create</code> operation, but<br>\nthe reason behind this decision isn't clear for me.</p>\n<p>I see 2 more intuitive approaches:</p>\n<ul>\n<li>\n<p>Return 422, because id will be generated by the server anyway and not needed<br>\n  to be presented in the POST request body.</p>\n</li>\n<li>\n<p>Create a resource with specific id or reject with 409/422 if resource with<br>\n  such id already exists, like insert with primary key in relational databases. </p>\n</li>\n</ul>\n<p>I have one idea, why this decision was made, but not sure about it.</p>\n<p>Can some one explain this part of the fhir spec please?</p>",
        "id": 153992939,
        "sender_full_name": "Andrew Tropin",
        "timestamp": 1536057035
    },
    {
        "content": "<p>we used to say that the id was prohibited, since it would be ignored</p>",
        "id": 153992941,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536059803
    },
    {
        "content": "<p>but it turned out that people found it tiresome to remove the id from the resource before they posted it to the server</p>",
        "id": 153992942,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536059885
    },
    {
        "content": "<p>Thanks for the answer. The reason is clear now. Actually I came to this<br>\nquestion from more complicated one. (There is some information on relevant<br>\ntopic, but it still not clear to me how to handle the situation below).</p>\n<p>For example, I want to create two resources inside transaction: Patient and<br>\nProcedureRequest for this patient. I don't know patient id when I creating a<br>\nbundle. How to set a subject for procedure request in this case?</p>",
        "id": 153992945,
        "sender_full_name": "Andrew Tropin",
        "timestamp": 1536063060
    },
    {
        "content": "<p>You will need to create a uuid for each entry in your bundle and put it into Bundle.entry.fullUrl<br>\nYou can use that temporary url to reference between entries in a Bundle. The server will replace UUIDs with the actual URLs when processing the Bundle</p>",
        "id": 153992967,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1536068267
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/http.html#trules\" target=\"_blank\" title=\"http://build.fhir.org/http.html#trules\">http://build.fhir.org/http.html#trules</a><br>\n<a href=\"http://build.fhir.org/bundle.html#bundle-unique\" target=\"_blank\" title=\"http://build.fhir.org/bundle.html#bundle-unique\">http://build.fhir.org/bundle.html#bundle-unique</a></p>",
        "id": 153992969,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1536068378
    },
    {
        "content": "<p>Here's an example: <a href=\"http://build.fhir.org/bundle-references.xml.html\" target=\"_blank\" title=\"http://build.fhir.org/bundle-references.xml.html\">http://build.fhir.org/bundle-references.xml.html</a></p>",
        "id": 153992970,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1536068430
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;entry&gt;</span>\n    <span class=\"nt\">&lt;fullUrl</span> <span class=\"na\">value=</span><span class=\"s\">&quot;urn:uuid:04121321-4af5-424c-a0e1-ed3aab1c349d&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;resource&gt;</span>\n      <span class=\"nt\">&lt;Patient&gt;</span>... <span class=\"nt\">&lt;/Patient&gt;</span>\n    <span class=\"nt\">&lt;/resource&gt;</span>\n  <span class=\"nt\">&lt;/entry&gt;</span>\n...\n <span class=\"c\">&lt;!--    reference to a locally identified resource    --&gt;</span>\n  <span class=\"nt\">&lt;entry&gt;</span>\n    <span class=\"nt\">&lt;fullUrl</span> <span class=\"na\">value=</span><span class=\"s\">&quot;http://example.org/fhir/Observation/12&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;resource&gt;</span>\n      <span class=\"nt\">&lt;Observation&gt;</span>\n       ...\n        <span class=\"nt\">&lt;subject&gt;</span>\n          <span class=\"c\">&lt;!--    reference to the  patient above    --&gt;</span>\n          <span class=\"nt\">&lt;reference</span> <span class=\"na\">value=</span><span class=\"s\">&quot;urn:uuid:04121321-4af5-424c-a0e1-ed3aab1c349d&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/subject&gt;</span>\n      <span class=\"nt\">&lt;/Observation&gt;</span>\n    <span class=\"nt\">&lt;/resource&gt;</span>\n  <span class=\"nt\">&lt;/entry&gt;</span>\n</pre></div>",
        "id": 153992971,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1536068568
    },
    {
        "content": "<blockquote>\n<p>You will need to create a uuid for each entry in your bundle and put it into Bundle.entry.fullUrl<br>\nYou can use that temporary url to reference between entries in a Bundle. The server will replace UUIDs with the actual URLs when processing the Bundle</p>\n</blockquote>\n<p>Thanks a lot, it helped. Implemented bundle processing with dynamic resolve of references.</p>",
        "id": 154006698,
        "sender_full_name": "Andrew Tropin",
        "timestamp": 1539010816
    },
    {
        "content": "<blockquote>\n<p>we used to say that the id was prohibited, since it would be ignored</p>\n</blockquote>\n<p>Returning to this question, why id was prohibited. It seems pretty reasonable to have ability to POST a resource with specific id, for example when we need to keep same id in legacy system and in fhir-based system. Also, in databases insert operation doesn't ignore any fields and for developer it's not an intuitive behavior of create operation. Actually, I want to deeper understand all the work behind this decision before suggesting any changes. <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I would be very grateful if you explain it in more details.</p>",
        "id": 154006705,
        "sender_full_name": "Andrew Tropin",
        "timestamp": 1539011420
    },
    {
        "content": "<p>To create a resource with a specified ID you use PUT, not POST (<a href=\"http://hl7.org/fhir/http.html#update\" target=\"_blank\" title=\"http://hl7.org/fhir/http.html#update\">http://hl7.org/fhir/http.html#update</a>)</p>",
        "id": 154006709,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1539011582
    },
    {
        "content": "<p>POST is for 'create a new resource generating a new ID'</p>",
        "id": 154006712,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1539011638
    },
    {
        "content": "<blockquote>\n<p>To create a resource with a specified ID you use PUT, not POST (<a href=\"http://hl7.org/fhir/http.html#update\" target=\"_blank\" title=\"http://hl7.org/fhir/http.html#update\">http://hl7.org/fhir/http.html#update</a>)</p>\n</blockquote>\n<p>Thank you for your reply. I already found possibility of upsert operation using PUT method, but it doesn't answer my question about reasons behind the decisions of ignoring id for POST method. <br>\nTo be precise the question is not \"How to create a resource with specific id?\", but \"Why I can't create a resource with specific id using POST method?\".<br>\nI'm curious about why such decision was made. I think it's important question not only for fhir server implementers, but also for fhir users.</p>",
        "id": 154006722,
        "sender_full_name": "Andrew Tropin",
        "timestamp": 1539012224
    },
    {
        "content": "<p>Because id is the unique logical identifier on server. When client create a resource, client does not know if the id on client side is unique on the server side. So the client can provide business identifier but should not provide logical identifier</p>",
        "id": 154006730,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1539014727
    },
    {
        "content": "<p>HTTP POST and PUT are defined in the HTTP spec to have distinct behavior.  We're just being consistent with that.</p>",
        "id": 154006731,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1539014935
    },
    {
        "content": "<blockquote>\n<p>Because id is the unique logical identifier on server. When client create a resource, client does not know if the id on client side is unique on the server side. So the client can provide business identifier but should not provide logical identifier</p>\n</blockquote>\n<p>If the id isn't unique it's not a problem, server can respond with 409 for example.<br>\nAnyway it's possible to provide logical identifier using PUT method.</p>",
        "id": 154006732,
        "sender_full_name": "Andrew Tropin",
        "timestamp": 1539015313
    },
    {
        "content": "<blockquote>\n<p>HTTP POST and PUT are defined in the HTTP spec to have distinct behavior.  We're just being consistent with that.</p>\n</blockquote>\n<p>I thought about it and read HTTP rfc, PUT is implemented good according to rfc, but for POST it's not so clear.</p>\n<p>According to <a href=\"https://tools.ietf.org/html/rfc2616#section-9.5\" target=\"_blank\" title=\"https://tools.ietf.org/html/rfc2616#section-9.5\">rfc</a>:</p>\n<div class=\"codehilite\"><pre><span></span>POST is designed to allow a uniform method to cover the following functions:\n- Extending a database through an append operation.\n</pre></div>\n\n\n<p>But fhir create operation looks not identical to database create operation (fhir ignores id, when database not).</p>\n<p>Thank you for your replies, but the question is still open.</p>",
        "id": 154006733,
        "sender_full_name": "Andrew Tropin",
        "timestamp": 1539015583
    },
    {
        "content": "<p>Returning 409 is not practical. The client still doesn't know what id value could be accepted by server. Then it fells into a try and fail loop.</p>",
        "id": 154006734,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1539015953
    },
    {
        "content": "<blockquote>\n<p>Returning 409 is not practical. The client still doesn't know what id value could be accepted by server. Then it fells into a try and fail loop.</p>\n</blockquote>\n<p>Practical is a subjective term : ) If client know \"the rules\", it will use \"proper\" id (409 will make it clear that resource already created/synced/whatever), but if client don't know \"the rules\" or just doesn't care about id, it will not add id to resource and resource will be created with id generated by server.</p>\n<p>Also, you are right that there are many ways to implement different use case using business identifiers, conditional creates and so on. <br>\nI try to understand a root of idea to ignore id on POST, but allow to PUT /Resource/id to create a resource with user defined id. Also, such behavior of <code>create</code> operation doesn't allow to create a resource with user defined id with conditional update operation.</p>",
        "id": 154006739,
        "sender_full_name": "Andrew Tropin",
        "timestamp": 1539017121
    },
    {
        "content": "<p>Returning HTTP 409 Conflicted is a partial security risk as you shouldn't be leaking whether resources with given ids exist if the user hasn't been been previously authorized to read the resource. It's probably not very realistic that a user could POST a resource without having at least partial read access to the same resource, but it's conceivable that other security measures would prevent certain resources from being read, and this could be a way to circumvent that obfuscation.</p>",
        "id": 154006741,
        "sender_full_name": "Michael Riley",
        "timestamp": 1539018083
    },
    {
        "content": "<blockquote>\n<p>Returning HTTP 409 Conflicted is a partial security risk as you shouldn't be leaking whether resources with given ids exist if the user hasn't been been previously authorized to read the resource. It's probably not very realistic that a user could POST a resource without having at least partial read access to the same resource, but it's conceivable that other security measures would prevent certain resources from being read, and this could be a way to circumvent that obfuscation.</p>\n</blockquote>\n<p>Nice idea, but you are right it's not very realistic, also, security issues should be covered by implementers of a specific system, not by fhir spec.</p>",
        "id": 154006764,
        "sender_full_name": "Andrew Tropin",
        "timestamp": 1539021445
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>we used to say that the id was prohibited, since it would be ignored</p>\n</blockquote>\n<p>Returning to this question, why id was prohibited. It seems pretty reasonable to have ability to POST a resource with specific id, for example when we need to keep same id in legacy system and in fhir-based system. Also, in databases insert operation doesn't ignore any fields and for developer it's not an intuitive behavior of create operation. Actually, I want to deeper understand all the work behind this decision before suggesting any changes. <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I would be very grateful if you explain it in more details.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"196006\">@Andrew Tropin</span> My understanding is if you need to define the id you do an update (PUT). If the resource exists, it gets updated. If it does not, it gets created with the specified logical id.  Now I see someone else already said this!</p>",
        "id": 154006779,
        "sender_full_name": "Brian Reinhold",
        "timestamp": 1539023499
    },
    {
        "content": "<p>I think the answer is pretty simple: people hate it when we define more than one way to do the same thing. So we do it as little as possible. And since we defined upsert per PUT, we don't allow it per post, specially since we found that people often leave the id in place by mistake. The PUT, you either don't include the id, or it must match, which catches the 'by mistake' cause</p>",
        "id": 154006781,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1539023601
    },
    {
        "content": "<blockquote>\n<p>I think the answer is pretty simple: people hate it when we define more than one way to do the same thing. So we do it as little as possible. And since we defined upsert per PUT, we don't allow it per post, specially since we found that people often leave the id in place by mistake. The PUT, you either don't include the id, or it must match, which catches the 'by mistake' cause</p>\n</blockquote>\n<p>Good, looks like an answer aligned with topic of my question. Thank you for attention to wording.</p>\n<p>I'm not sure about what duplication of functionality are you talking, that is why to be clear: I'm not suggesting to make it possible to do upsert via POST. POST for create and PUT for upsert. I try to understand a little inconsistent in behavior of those operations. </p>\n<p><code>upsert</code> (PUT /ResourceType/id) allows to create resources with custom id, <code>conditional upsert</code> (PUT /ResourceType?query=here) and <code>create</code>(POST /ResourceType) doesn't. Lack of such capabilities reduces the power of fhir transactions and makes fhir operations behavior inconsistent.</p>\n<p>Is a fact that some people make mistakes posting resources with id included a strong argument to make decision for specification?<br>\nJust an idea, 4xx on POST with id or some explicit query param/header can solve the problem of such mistakes.</p>\n<p>I'm asking those questions because our experience (different teams on few different projects) tells that it's more intuitive for developers to have ability to do <code>create</code> with custom id, rather than <code>upsert</code>. Therefore our fhir server have an internal opinionated POST implementation, but it is hard to keep fhir and internal POST in sync. I try to explore decision origins and probably will make a resoned proposal for next fhir version.</p>",
        "id": 154006972,
        "sender_full_name": "Andrew Tropin",
        "timestamp": 1539089375
    },
    {
        "content": "<blockquote>\n<p><code>upsert</code> (PUT /ResourceType/id) allows to create resources with custom id, <code>conditional upsert</code> (PUT /ResourceType?query=here) and <code>create</code>(POST /ResourceType) doesn't. Lack of such capabilities reduces the power of fhir transactions and makes fhir operations behavior inconsistent.</p>\n</blockquote>\n<p>i agree on upsert and conditional upsert should behave similar, there was already a discussion on that topic:<br>\n<a href=\"#narrow/stream/4-implementers/subject/Transaction.20conditional.20create.20OR.20update\" title=\"#narrow/stream/4-implementers/subject/Transaction.20conditional.20create.20OR.20update\">https://chat.fhir.org/#narrow/stream/4-implementers/subject/Transaction.20conditional.20create.20OR.20update</a><br>\nand a resulting Tracker: <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=17906\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=17906\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=17906</a><br>\nThis tracker is already balloted, it will be part of the FHIR Build soon.</p>",
        "id": 154006976,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1539090661
    },
    {
        "content": "<blockquote>\n<p>I'm not suggesting to make it possible to do upsert via POST.</p>\n</blockquote>\n<p>I'm not following how POST with specified Id is different to PUT with specified Id</p>",
        "id": 154007040,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1539103022
    },
    {
        "content": "<p>(I mean, in outcome)</p>",
        "id": 154007041,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1539103044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>,  answering your question about outcome: familiar and intuitive behavior of operations for fhir user, simpler documentation, less edge cases and simpler implementation for fhir server/service developers. </p>\n<p>In more details:</p>\n<p>1. As a fhir user (especially newcommer) I prefer to be already familiar with behavior of create/update/upsert/conditional update operations rather then exploring tons of edge cases. Most of fhir users are developers and therefore they already familiar with classical relational databases and expects to have similar behavior of create/upsert operation (fhir doesn't have an update operation). This is my observation based on a dozen of projects and it can be not representative.</p>\n<p>2. As a fhir server developer I prefer to keep my implementation clean and without tons of special cases, that is why it is nice to have ability to delegate create part of upsert/conditional upsert operations to same code, which performs <code>create</code> operation.<br>\nDifferent behavior of create part for create/upsert and even conditional upsert operations makes a lot of implementation problems.</p>\n<p><span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span> I want to go deeper and suggest to redefine operations a little.</p>\n<ul>\n<li>First  of all to rename update and conditional to upsert and conditional upsert not to confuse people and reduce amount of unnecessary documentation. (optional, but I think very reasonable).</li>\n<li>Allow to define custom id on POST /ResourceType</li>\n<li>Make update (actually upsert) operations use create logic (and re-use code as consequence) in case if no resource found/exist on update interaction.</li>\n</ul>\n<p>As a consequence we don't need to distinguish such cases as conditional update with id should perform Update As Create and conditional update without id specific should perform create. It is just one more example, not the only benefit : )</p>\n<blockquote>\n<p>\"The key to performance is elegance, not battalions of special cases. -Jon Bentley and Doug McIlroy\"</p>\n</blockquote>\n<p>I will describe a proposal in more details, covering all cases, but I'm not sure when I have to create it, <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker\">https://gforge.hl7.org/gf/project/fhir/tracker</a> ?</p>",
        "id": 154007297,
        "sender_full_name": "Andrew Tropin",
        "timestamp": 1539167697
    }
]