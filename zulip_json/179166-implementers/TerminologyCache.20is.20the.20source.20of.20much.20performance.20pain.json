[
    {
        "content": "<p>When validating messages, the validateCode(ValidationOptions options, CodeableConcept code, ValueSet vs) method in org.hl7.fhir.r5.BaseWorkerContext (called by checkCodeOnServer in org.hl7.fhir.validation.instance.InstanceValidator) creates a token to find a cached validation result.<br>\nWhile the purpose of a cache is usually to improve performance, this heavy lookup takes 15-20% of the average validation entire time.  This is because TerminologyCache.extracted(...) converts the entire ValueSet into JSON, and the UTF8 conversion takes most of the time.<br>\nThe issue appears to be in TerminologyCache.extracted(...).  Seems that in order to build the cache token, it'd be simply a lot more efficient to use the ValueSet.url instead of using the whole ValueSet?!?</p>\n<p>Any comments on the matter?</p>",
        "id": 268723308,
        "sender_full_name": "Jonathan Meijer",
        "timestamp": 1642697997
    },
    {
        "content": "<p>Noticed CacheToken.request is never used except to generate CacheToken.key.</p>",
        "id": 268758621,
        "sender_full_name": "Jonathan Meijer",
        "timestamp": 1642713222
    },
    {
        "content": "<p>Is that regarding the validator code, or IG publisher?</p>",
        "id": 268789283,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1642733255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> to consider when you're back</p>",
        "id": 268795005,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1642739735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"192685\">Vassil Peytchev</span> <a href=\"#narrow/stream/179166-implementers/topic/TerminologyCache.20is.20the.20source.20of.20much.20performance.20pain/near/268789283\">said</a>:</p>\n<blockquote>\n<p>Is that regarding the validator code, or IG publisher?</p>\n</blockquote>\n<p>Inside the Validator code.</p>",
        "id": 268841039,
        "sender_full_name": "Jonathan Meijer",
        "timestamp": 1642771348
    },
    {
        "content": "<p>hmm. I thought I had refactored that code.</p>",
        "id": 269526776,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643260308
    },
    {
        "content": "<p>I'll look at it again</p>",
        "id": 269526856,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643260356
    },
    {
        "content": "<p>will be improved next release</p>",
        "id": 269687186,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643346268
    },
    {
        "content": "<p>though it does change the behavior of the validator somewhat...</p>",
        "id": 269687196,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643346282
    },
    {
        "content": "<p>the validator has been robust about breaking the versioning rules - offering up the same value set by url + version that contains different content. From now on, that won't work the same. That was something <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> and I already decided on</p>",
        "id": 269687250,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643346346
    },
    {
        "content": "<p>I just didn't finish the change off</p>",
        "id": 269687260,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643346354
    },
    {
        "content": "<p>FYI, average time required to validate doubled from 5.4.11 to 5.6.36.  Though there are many cases of Spring.replace which take up a lot of time in processing (through Pattern match), replacing those occurrences with StringUtils.replace/remove do not appear to improve performance much.</p>",
        "id": 275014313,
        "sender_full_name": "Jonathan Meijer",
        "timestamp": 1647023497
    }
]