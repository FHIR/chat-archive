[
    {
        "content": "<p>Has anyone got a working example that I could have a look at where a valueSet selects codes and concepts from a codeSystem (probably defined on the same FHIR server). What I want is to add codeSystems with explicit concepts/codes defined to our STU3 Hapi server, then define a valueSet that selects codes from the codeSystems via the \"filter\" option.</p>",
        "id": 153831995,
        "sender_full_name": "Dave Barnet",
        "timestamp": 1465376350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192158\">@Dave Barnet</span>. There are examples of the operations for the ValueSet and CodeSystem resources in the spec itself - including parameters and filters for specific Code Systems such as SNOMED CT, LOINC and UCUM. I've found just about everything that I've needed on there; and the Implementation--&gt;Services--&gt;Terminology Service page is particularly helpful with links to all the Code System specific information... <a href=\"http://hl7-fhir.github.io/terminology-service.html\" target=\"_blank\" title=\"http://hl7-fhir.github.io/terminology-service.html\">http://hl7-fhir.github.io/terminology-service.html</a>. A small caveat is that some of the CodeSystem material is a bit 'green' and the $lookup properties example on that page still needs to be corrected.</p>",
        "id": 153832097,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1465425875
    },
    {
        "content": "<p>Here is an example: <a href=\"http://hl7-fhir.github.io/valueset-example-intensional.xml.html\" target=\"_blank\" title=\"http://hl7-fhir.github.io/valueset-example-intensional.xml.html\">http://hl7-fhir.github.io/valueset-example-intensional.xml.html</a></p>",
        "id": 153832104,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1465428024
    },
    {
        "content": "<p>I'm trying to implement a set of codes using codeSystem &amp; valueSet, where he codes are in a hierarchy. I noticed that in the definition of codeSystem, you appear to be able to nest concepts, so I set up a codeSystem with some nested concepts, along the lines of    <br>\n&lt;concept&gt;<br>\n      &lt;code value=\"MA00\"/&gt;<br>\n      &lt;display value=\"Mainstream Housing\"/&gt;<br>\n      &lt;concept&gt;&lt;code value=\"MA01\"/&gt;&lt;display value=\"Owner occupier\"/&gt;&lt;/concept&gt;<br>\n      &lt;concept&gt;&lt;code value=\"MA02\"/&gt;&lt;display value=\"Settled mainstream housing with family/friends\"/&gt;&lt;/concept&gt;<br>\n&lt;/concept&gt;<br>\n   &lt;concept&gt;<br>\n      &lt;code value=\"HM00\"/&gt;<br>\n      &lt;display value=\"Homeless\"/&gt;<br>\n        &lt;concept&gt;&lt;code value=\"HM01\"/&gt;&lt;display value=\"Rough sleeper\"/&gt;&lt;/concept&gt;<br>\n        &lt;concept&gt;&lt;code value=\"HM02\"/&gt;&lt;display value=\"Squatting\"/&gt;&lt;/concept&gt;<br>\n&lt;/concept&gt;</p>\n<p>I then set up a valueSet to query (include) the codeSystem. However, when I expand the valueSet, the codes appear in a flat list, rather then in a nested list as I expected - they appeared like this<br>\n    \"contains\": [<br>\n      {<br>\n        \"system\": \"<a href=\"http://fhir.nhs.net/CodeSystem/AccommodationStatusCode\" target=\"_blank\" title=\"http://fhir.nhs.net/CodeSystem/AccommodationStatusCode\">http://fhir.nhs.net/CodeSystem/AccommodationStatusCode</a>\",<br>\n        \"code\": \"MA00\",<br>\n        \"display\": \"Mainstream Housing\"<br>\n      },<br>\n      {<br>\n        \"system\": \"<a href=\"http://fhir.nhs.net/CodeSystem/AccommodationStatusCode\" target=\"_blank\" title=\"http://fhir.nhs.net/CodeSystem/AccommodationStatusCode\">http://fhir.nhs.net/CodeSystem/AccommodationStatusCode</a>\",<br>\n        \"code\": \"MA01\",<br>\n        \"display\": \"Owner occupier\"<br>\n      },<br>\n      {<br>\n        \"system\": \"<a href=\"http://fhir.nhs.net/CodeSystem/AccommodationStatusCode\" target=\"_blank\" title=\"http://fhir.nhs.net/CodeSystem/AccommodationStatusCode\">http://fhir.nhs.net/CodeSystem/AccommodationStatusCode</a>\",<br>\n        \"code\": \"MA02\",<br>\n        \"display\": \"Settled mainstream housing with family/friends\"<br>\n      },<br>\netc...<br>\nAnyone any idea what I'm doing wrong? I need to store and retrieve a list of codes that have a structure (hierarchy) within the codeSystem. <br>\nI've tested this on our (NHS) internal STU3 HAPI server, and on the public <a href=\"http://fhirtest.uhn.ca/\" target=\"_blank\" title=\"http://fhirtest.uhn.ca/\">http://fhirtest.uhn.ca/</a> STU3 HAPI server, and get the same results (as above)</p>",
        "id": 153835883,
        "sender_full_name": "Dave Barnet",
        "timestamp": 1467294972
    },
    {
        "content": "<p>what the spec says about this is: </p>",
        "id": 153835950,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467321914
    },
    {
        "content": "<p>Note that the expansion structure is inherently ordered, and also provides support for a hierarchical tree of items. This specification does not fix the meaning of use of either of these, and the conceptual approach described should not be understood to prohibit any implementation approach in these regards. </p>",
        "id": 153835951,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467321961
    },
    {
        "content": "<p>you[re not doing anything wrong, just that the servers do not generate heirarchical expansions. </p>",
        "id": 153835952,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467321988
    },
    {
        "content": "<p>perhaps you could describe why this is important?</p>",
        "id": 153835953,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467322007
    },
    {
        "content": "<p>*may* not....</p>",
        "id": 153835954,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467322024
    },
    {
        "content": "<p>we do...</p>",
        "id": 153835955,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467322032
    },
    {
        "content": "<p>ok, the particular servers referenced don't</p>",
        "id": 153835959,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467322311
    },
    {
        "content": "<p>is this related to my question about consistent concept representation<br>\n?</p>",
        "id": 153835988,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467328514
    },
    {
        "content": "<p>don't know. what question is that?</p>",
        "id": 153835989,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467328930
    },
    {
        "content": "<p><a href=\"https://chat.fhir.org/#narrow/stream/CQL/topic/subsumption.20in.20CQL\" target=\"_blank\" title=\"https://chat.fhir.org/#narrow/stream/CQL/topic/subsumption.20in.20CQL\">this one</a></p>",
        "id": 153835990,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467330821
    },
    {
        "content": "<p>ie \"how to represent ideas like asthma and diabetes etc etc in a succinct, standard manner within the text of CQL logic?\"</p>",
        "id": 153835991,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467330855
    },
    {
        "content": "<p>no. I don't think it's releated</p>",
        "id": 153835992,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467330875
    },
    {
        "content": "<p>you sure? it seems related but I'm possibly confused</p>",
        "id": 153835993,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467331210
    },
    {
        "content": "<p>distantly related - the question relates to terminology service API, which should underpin CQL terminology usage (but doesn't right now). But CQL fan bois are easily confused...</p>",
        "id": 153835994,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467331348
    },
    {
        "content": "<p>yes apparently - sorry I should have clicke 'more' on Dave's question</p>",
        "id": 153835995,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467331480
    },
    {
        "content": "<p>[Note  that I've re-posted the original query to the hapi stream for a view from them, so don't get confused that there are 2 threads that look the same]</p>\n<p>We are looking to create a value set server to support NHS applications (such as the NHS Data Dictionary). The NHS Data Dictionary contains definitions of data sets that care providers should fill out and return to the \"centre\" on a regular basis. The level of data captured by care providers varies, some may capture detailed information, others less detailed. <br>\nTo cater for this (as one example), some of the codeSystem in the NHS Data Dictionary have a high level code, and lower level codes. You return the information at the level your operational system captures. In the example I gave above, the values come from an Accommodation Status data item used in a Young Persons Health Service data set. Some operational systems may capture the fact that a young person is Homeless, whereas other may be more detailed, and capture the fact that the young person sleeps rough. The NHS Data Dictionary codeSystem maintains the fact that sleeping rough is a sub-code of homelessness; so the codeSystem is represented as a hierarchically, generally in the format<br>\nHigh level code<br>\nlower level related to high level<br>\nlower level related to high level<br>\nHigh level code<br>\nlower level related to high level<br>\nlower level related to high level</p>\n<p>It was my hope that nesting concepts in the codeSystem would maintain this hierarchy, and the high level/ lower level be apparent in the valueSet that includes the codeSystem when expanded.</p>\n<p>If it is the intention of valueSets NOT to expand the hierarchy captured in a FHIR codeSystem, what's the point of being able to express a hierarchy in a codeSystem?</p>",
        "id": 153836035,
        "sender_full_name": "Dave Barnet",
        "timestamp": 1467362553
    },
    {
        "content": "<p>heirarchy defines the meaning of the relationships between the terms.</p>",
        "id": 153836049,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467379081
    },
    {
        "content": "<p>there are ways to use the relationships between the terms without having them be explicit in the value sets. </p>",
        "id": 153836050,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467379114
    },
    {
        "content": "<p>and using a filter - value set - to consider the relationships between codes is inherently dangerous because concepts may be excluded, and therefore relationships are omitted</p>",
        "id": 153836051,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467379177
    },
    {
        "content": "<p>most uses of expansions, there's no need for heirachy either. </p>",
        "id": 153836052,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467379196
    },
    {
        "content": "<p>but since there are some, we define a heirarchical structure</p>",
        "id": 153836053,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467379212
    },
    {
        "content": "<p>however the challenge of delivering structure correctly while filtering a DAG is considerable, so (a) we have no required this and (b) the open source servers don't do it. </p>",
        "id": 153836054,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467379244
    },
    {
        "content": "<p>that doesn't mean you can't do it. or that you can't talk to the server maintainers (including me) about doing it</p>",
        "id": 153836055,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467379272
    },
    {
        "content": "<p>hierarchies are kinda important...</p>",
        "id": 153836056,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467380259
    },
    {
        "content": "<p>and not really that hard...</p>",
        "id": 153836057,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467380266
    },
    {
        "content": "<p>just needs an internal ancestor (aka <code>transitive subsumption closure</code>) table - creating that is a 10 line operation</p>",
        "id": 153836058,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467380316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192001\">@Erich Schulz</span> note that \"hierarchy\" != \"is-a\" or subsumption - it may just indicate a useful presentation structure for a pick list</p>",
        "id": 153836146,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1467433359
    },
    {
        "content": "<p>not sure what you are getting at <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> ...  my understanding is that hierarchies (either tree or DAG) support both compositional meronies (part-of) and classification taxonomies (is-a) and in order to do clincial logic at scale then subsumption operations are important. From a software algorithm perspective for DAG operations, then regardless of the purity of the semantic links, an ancestor table is the simple solution... and is very simple to implement. Am I missing something?</p>",
        "id": 153836151,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467449203
    },
    {
        "content": "<p>or do you mean sometime we just need to grab immediate parents/children</p>",
        "id": 153836153,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467451878
    },
    {
        "content": "<p>hierarchy in a FHIR CodeSystem may be purely presentational and carry no semantics what so ever: \"Defines children of a concept to produce a hierarchy of concepts. *The nature of the relationships is variable* (is-a/contains/categorizes) and can only be determined by examining the definitions of the concepts.\"  You cannot assume that it necessarily conveys any informtion suitable for clinical logic, in the general case.  Naturally some code systems do support this, that depends on teh code system, not the presence of hierarchy (perhaps better termed \"nesting\"?)</p>",
        "id": 153836164,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1467469403
    },
    {
        "content": "<p>unless you are using a system that tries to use pure semantics</p>",
        "id": 153836192,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467501659
    },
    {
        "content": "<p>the point being that for clinical logic there is no choice but to rely on hierarchies specified in systems like SNOMED for clinical logic</p>",
        "id": 153836193,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467501730
    },
    {
        "content": "<p>undoubtedly there will be mortality and morbidity meetings and root-cause analyses where the problems in the ontology contributed to an adverse outcome but that is just another risk to be managed</p>",
        "id": 153836195,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467501933
    },
    {
        "content": "<p>I say that because I get a sense of this issue being ducked because of the risk</p>",
        "id": 153836196,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467501973
    },
    {
        "content": "<p>\"we cant do that because its not safe\"</p>",
        "id": 153836197,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467501985
    },
    {
        "content": "<p>at some point we're just going to have to suck it up and take a risk</p>",
        "id": 153836198,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467502029
    },
    {
        "content": "<p>then you are welcome to implement a terminology server that behaves how you think it should be behave. It's not polite to lecture the professional terminology server developers about their choices - especially when you do not understand why they have made them </p>",
        "id": 153836199,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467502088
    },
    {
        "content": "<p>sorry not meaning to be impolite or lecture</p>",
        "id": 153836200,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467502332
    },
    {
        "content": "<p>I'm trying to understand what I'm missing and also seeking an answer about the standard method to do this kind of clinical logic</p>",
        "id": 153836201,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467502378
    },
    {
        "content": "<p>with particular reference to<a href=\"https://chat.fhir.org/#narrow/stream/CQL/topic/subsumption.20in.20CQL\" target=\"_blank\" title=\"https://chat.fhir.org/#narrow/stream/CQL/topic/subsumption.20in.20CQL\">this context</a></p>",
        "id": 153836202,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467502430
    },
    {
        "content": "<p>if you are filtering and ordering, then it is unclear what a heirarchy means, either algorithmically, or to a consumer. The combination of filtering, ordering, and paging, means that most implementers have just taken it as a flat list, since the use cases for value set do not include reasoning. Code system views are for reasoning. hence we have meaning based queries on code system - lookup, subsumption, and infer.</p>",
        "id": 153836204,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467504047
    },
    {
        "content": "<p>sorry I'm so ignorant about all this - but to test my understanding of what you are saying: FHIR Codesystem resources support transitive subsumption operations, but not single step tree walk (children, parent(s)) operations? </p>",
        "id": 153836206,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467505085
    },
    {
        "content": "<p>I guess its worth noting that in both Dave's inititial request and in the clinical logic domain I'm interested in that the hierarchies are classication/is-a based</p>",
        "id": 153836209,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467519077
    },
    {
        "content": "<p>so even tho there be dragons around edge cases the solutions that are being sought are for bread and butter cases so seems like there ought to be a simple solution for each of our issues</p>",
        "id": 153836210,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467519376
    },
    {
        "content": "<p>sorry if sound like i'm attempting to teach gran to suck eggs, and if solution is right in front of me...</p>",
        "id": 153836211,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467519442
    },
    {
        "content": "<p>I think you are largely confused about value set vs code system</p>",
        "id": 153836213,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467526343
    },
    {
        "content": "<p>ok it maybe better to come back to the requirements...</p>",
        "id": 153836216,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467529186
    },
    {
        "content": "<p>I'm going to attempt explain them in words that deliberately avoid terms that may have been given another meaning... I think <span class=\"user-mention\" data-user-id=\"192158\">@Dave Barnet</span> is seeking <code>to  put ideas into a hierarchy</code> (REQ1) and then <code>make that hierarchy accessible via some kind of FHIR resource</code> (REQ2).  Slightly related to that is my desire <code>to have a standard, concise syntax to express the idea of a hierarchically defined subset</code> (REQ3 aka <code>the blah.blah.blah problem</code>) in order to use that syntax in CQL shareable knowledge artefacts</p>",
        "id": 153836217,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467529797
    },
    {
        "content": "<p>perhaps there's a use for an operation on code system that returns a subset of it - e.g. a particular snomed heirarchy. </p>",
        "id": 153836252,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467581633
    },
    {
        "content": "<p>Would that satisfy a use case that differs from expanding an SCT implicit value set using an is-a filter?</p>",
        "id": 153836255,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1467584468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191364\">@Peter Jordan</span> i think a standard syntax that allowed expression of the idea of \"all the is-a descendants of code X\" would meet my requirements (REQ3) - I think that Dave is after a subset of the actual relationships (although that is reading between the lines)</p>",
        "id": 153836274,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467600569
    },
    {
        "content": "<p>It did occur to me that if a subset of the a full ancestor table was filtered to only include those links that didn't have a less direct alternative expression then that would meet the need of filtering the hierarchy - that wouldn't be too hard to implement in sql... (delete link A-C where there is a link \"A-B\" and a link \"B-C\") - i'm not sure if that is the DAG operation that <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> felt was problematic for implementers </p>",
        "id": 153836275,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1467600969
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 153836276,
        "sender_full_name": "Donna Truran",
        "timestamp": 1467601383
    },
    {
        "content": "<p>I'll try and restate the requirement, this time avoiding the word \"hierarchy\". I enter concepts into a codeSystem that are nested (codeSystem allows you to do this), I then create a valueSet which includes the codeSystem. How do I retrieve the concepts and still have the nesting maintained? <br>\nIf I do a GET (something like [base]/ValueSet/150/$expand - where 150 is the value set that includes the nested codeSystem) I get back a flat list of concepts.</p>",
        "id": 153836291,
        "sender_full_name": "Dave Barnet",
        "timestamp": 1467630725
    },
    {
        "content": "<p>Hi All, I'm working with Dave Barnet on this one. My question: is the Expansion Profile linked to this in any way? I realise that CodeSystem came after ValueSet and Expansion Profile so has the CodeSystem replaced elements of the original functionality held in ValueSet and Expansion profile. The CodeSystem concepts seem to repeat in the ValueSet profile. It would be a good idea to maybe show the deprecated values in ValueSet that are now covered in CodeSystem.</p>",
        "id": 153836299,
        "sender_full_name": "Naminder Soorma",
        "timestamp": 1467637151
    },
    {
        "content": "<p>there's no things in value set that are deprecated and covered in value set. They do have overlap but the content that appear in both has different purposes</p>",
        "id": 153836310,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467669472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192158\">@Dave Barnet</span> you still haven't said what you are actually trying to achieve. But yes, see ExpansionProfile.excludeNested</p>",
        "id": 153836311,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467669532
    },
    {
        "content": "<p>Hey all. Back from family time and doing some perusing... I would expect that there would be a way of using the expand to get the identified value set concepts and then determine the hierarchy by obtaining the hierarchy structure from the code system. Is that what happens? Perhaps a special way of using expand that gets the hierarchy in addition to the value set expansion set.</p>",
        "id": 153836321,
        "sender_full_name": "Robert McClure",
        "timestamp": 1467671925
    },
    {
        "content": "<p>See the thread on the hapi stream for more detail on what we are trying to achieve. ( <a href=\"https://chat.fhir.org/#narrow/stream/hapi/subject/codeSystem.20.26.20valueSet.20(STU3)\" target=\"_blank\" title=\"https://chat.fhir.org/#narrow/stream/hapi/subject/codeSystem.20.26.20valueSet.20(STU3)\">https://chat.fhir.org/#narrow/stream/hapi/subject/codeSystem.20.26.20valueSet.20(STU3)</a> )</p>",
        "id": 153836371,
        "sender_full_name": "Dave Barnet",
        "timestamp": 1467710088
    },
    {
        "content": "<p>Can I validate my understanding of an implicit ValueSet. <br>\nIf I have a CodeSystem and I require a ValueSet that contains all codes from the given CodeSystem. Then it is my understanding that I am not required to create a ValueSet resource instance, rather I can set the ‘valueSet’ property of my CodeSystem resource to a canonical URL that represents the CodeSystem’s implicit ValueSet. On expansion of this valueSet canonical URL, a terminology server using only the CodeSystem resource instance would construct the required ValueSet expansion.<br>\nIs this correct?<br>\nShould I creates a ValueSet instance regardless of this functionality?<br>\nIf I was how would I select all code from the CodeSystem without listing them off in the ‘include’ element.</p>",
        "id": 153839568,
        "sender_full_name": "Angus Millar",
        "timestamp": 1468889278
    },
    {
        "content": "<p>I believe you still need to define the value set (though you could generate it programatically on the fly and not actually persist it).  The purpose of the link is to just make it easy to find the \"value set of everything\"</p>",
        "id": 153839570,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1468889503
    },
    {
        "content": "<p>So If I was to create a ValueSet that includes all codes from the CodeSystem then how to I select all codes in a dynamic fashion. I don’t want to statically list the codes off in the ‘include’ element. How do I set a filter to capture all codes? This is a simple CodeSystem with no Parent / Child hierarchy. </p>",
        "id": 153839575,
        "sender_full_name": "Angus Millar",
        "timestamp": 1468890593
    },
    {
        "content": "<p>You don't specify a filter at all.  If you define a value set referencing the system with no filter or enumeration of codes, then you get all of the codes</p>",
        "id": 153839576,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1468891067
    },
    {
        "content": "<p>Arh, yes! Thanks you Lloyd. </p>",
        "id": 153839577,
        "sender_full_name": "Angus Millar",
        "timestamp": 1468891109
    },
    {
        "content": "<p>in Ontoserver, if you put a uri in the CodeSystem.valueSet property, then there will  be an (implicit) ValueSet with that uri</p>",
        "id": 153839580,
        "sender_full_name": "Jim Steel",
        "timestamp": 1468891206
    },
    {
        "content": "<p>Yes Jim I understood that but thought for simplicity for users that a ValueSet instance helps.</p>",
        "id": 153839582,
        "sender_full_name": "Angus Millar",
        "timestamp": 1468891289
    }
]