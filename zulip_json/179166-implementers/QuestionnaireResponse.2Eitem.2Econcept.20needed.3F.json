[
    {
        "content": "<p>Questionnaire.item has concept 0..1, which may store a code for the question - i.e. LOINC Eye opening in the GCS example. QuestionnaireResponse.item does not have a concept 0..1 child, meaning the answer itself can be sent with a LOINC code (see GCS example), but the question cannot be coded. When I request a (set of) Observations in say a DiagnosticReport, I can get coded Observations  and coded answers. With QR the only way to get the codes for the questions would be to resolve linkId and get the corresponding  Questionnaire.item.concept. Wouldn't it be better to have an optional QuestionnaireResponse.item.concept so QR can be more self-contained?</p>",
        "id": 153859949,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1480693556
    },
    {
        "content": "<p>so this is the same as 'must it be possible to interpret the QR without knowing the Q?\"</p>",
        "id": 153860004,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480706419
    },
    {
        "content": "<p>Not \"must\",  but could be  convenient. We're gonna use QR to send data to the National Cancer Registry.  Items are semantically defined by rheir associated codings; so why not carry those?  I think it is along the lines of Q. item. definition,  which if I remember your talk at DevDays well is there for similar purposes: aggregate or query sets of data which are meaningful to healthcare pro's.</p>",
        "id": 153860049,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1480717053
    },
    {
        "content": "<p>I think you want the DataElement link - which is in boyth QR and Q</p>",
        "id": 153860063,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480727779
    },
    {
        "content": "<p>I want that too., yes,  and I'm gonna use it. But,  when I profile a Diagnostic Report (as I'm doing), I need the Structure Definition to validate the DR,  but not to interpret it: the semantics are right there,  in Observation.code. With QR,  I need another thing (Q or DataElement)  to look up tbe semantics. Why not model at least those answers which are Observations just as has been done for Observations,  so with QR.item.concept? I can (redundantly)  repeat Q.item.text in QR to make it more readable and self-contained,  why not item.concept? </p>",
        "id": 153860080,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1480752050
    },
    {
        "content": "<p>given the requirements stated for .text, you'd appear to have a point</p>",
        "id": 153860117,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480795662
    },
    {
        "content": "<p>Yes, I think I do. A very ancient (2011) piece which you might recognize starts with: \"Resources for Healthcare (RFH) defines a set of \"resources\" that represent granular clinical concepts. The resources can be managed in isolation, or aggregated into complex documents.\" W/o QR.item.concept I'd say QuestionnaireResponse violates the first clause of the second sentence.<br>\nI'll make a GForge item then.</p>",
        "id": 153860192,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1480848094
    },
    {
        "content": "<p>Added <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12429\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12429\">GF#12429</a></p>",
        "id": 153860574,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1480929810
    }
]