[
    {
        "content": "<p>Here is an informal proposal for new <code>_join</code> search parameter -  <a href=\"https://gist.github.com/niquola/77a21961a0d32ee1181e97b88b2fbf3d\" target=\"_blank\" title=\"https://gist.github.com/niquola/77a21961a0d32ee1181e97b88b2fbf3d\">https://gist.github.com/niquola/77a21961a0d32ee1181e97b88b2fbf3d</a> - feedback  is very welcome</p>",
        "id": 169872132,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1562594859
    },
    {
        "content": "<p>Personally, I think this would change the search syntax we have more and more into a query syntax.  I know we've crossed and moved this line a few times (with _revinclude,  _has ) - every time we need to weigh the advantages over the disadvantages.  The disadvantages being: how likely is it that sufficient servers will implement this to be considered common enough for a client developer to trust it will be available?  Or for a standards developer to be able to require it for a certain domain?   So, I can see the use, but it would be interesting to see who else would be tempted to implement it!</p>",
        "id": 169880846,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1562601101
    },
    {
        "content": "<p>i do not see more implementation complexity,  than for chained params impl. You can consider _join as more manageable chained search</p>",
        "id": 169887984,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1562606674
    },
    {
        "content": "<p>why not just use _filter?</p>",
        "id": 169899827,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562615800
    },
    {
        "content": "<p>How _filter can help with multiple conditions for one joined resource?  I remember in old spec there was something for that problem,  but i don't see anything  about it in  current. Can you point?</p>",
        "id": 169901637,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1562617388
    },
    {
        "content": "<p>Another puzzle  - first join one association and then join another twice with different criteria</p>",
        "id": 169901778,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1562617505
    },
    {
        "content": "<p>I don't think it does now, but it's the natural place to add new syntax, since it has proper support for grouping / parentheses</p>",
        "id": 169901961,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562617634
    },
    {
        "content": "<p>my point is implementers already have this joins internally  - why not just expose it to users</p>",
        "id": 169902205,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1562617810
    },
    {
        "content": "<p>sure. why not? But why invent a style of syntax when we can do it in _filter with more expressivity?</p>",
        "id": 169902236,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562617853
    },
    {
        "content": "<p>ok let's move it to _filter ;)</p>",
        "id": 169902395,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1562617963
    },
    {
        "content": "<p>well, let us say, let's see what it looks like there.</p>",
        "id": 169902419,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562617990
    },
    {
        "content": "<p>yep</p>",
        "id": 169902433,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1562618017
    },
    {
        "content": "<p>the only problem,  filter is implemented by 1.5 servers :(</p>",
        "id": 169902519,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1562618091
    },
    {
        "content": "<p>hope by 2.5 in couple of weeks</p>",
        "id": 169902584,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1562618142
    },
    {
        "content": "<p><code>_filter=encounter in Encounter where ()</code></p>",
        "id": 169902655,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562618175
    },
    {
        "content": "<p>yes, that's a problem. but the question is, why would any new syntax be different? HAPI has full support now, I believe</p>",
        "id": 169902679,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562618203
    },
    {
        "content": "<p>Can you annotate your example queries with an explanation of what they <em>do</em> <span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span> ?</p>",
        "id": 170416522,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1562635891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> yes, it's one to one to SQL: <code>/Encounter?_join=Patient:p(p.id+subject)</code> means <code>select encounter from encounter join patient p on p.id = encounter.subject</code></p>",
        "id": 170423772,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1562647554
    },
    {
        "content": "<p>that's good if that's what your database is...</p>",
        "id": 170587244,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562799634
    },
    {
        "content": "<p>I believe all well-known fhir servers can  implement _joins without conceptual problems if they implemented chained params somehow</p>",
        "id": 170612563,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1562833480
    }
]