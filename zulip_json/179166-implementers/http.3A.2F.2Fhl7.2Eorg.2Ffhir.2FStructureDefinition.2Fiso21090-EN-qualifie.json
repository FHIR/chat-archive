[
    {
        "content": "<p>we are currently creating FHIR profiles to map all the data from the germen electronic health insurance card to FHIR resources. In this data there is a \"vorsatzwort\" = family name prefix which i fail to map. I wanted to use the <a href=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\">http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier</a> extension. This Extension is using this ValueSet: <a href=\"http://hl7.org/fhir/ValueSet/name-part-qualifier\" target=\"_blank\" title=\"http://hl7.org/fhir/ValueSet/name-part-qualifier\">http://hl7.org/fhir/ValueSet/name-part-qualifier</a> which is a subset of <a href=\"http://hl7.org/fhir/v3/EntityNamePartQualifierR2\" target=\"_blank\" title=\"http://hl7.org/fhir/v3/EntityNamePartQualifierR2\">http://hl7.org/fhir/v3/EntityNamePartQualifierR2</a>. I wanted to use the Qualifier: PFX, which is only contained in the v3 Valueset but not in the FHIR Valueset</p>",
        "id": 153854527,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1477573036
    },
    {
        "content": "<p>is there a reason why name-part-qualifier is only a subset of the v3 ValueSet?</p>",
        "id": 153854528,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1477573071
    },
    {
        "content": "<p>We in The Netherlands created <a href=\"https://www.simplifier.net/NL-BasicComponents/nl-core-humanname-familyname-prefix\" target=\"_blank\" title=\"https://www.simplifier.net/NL-BasicComponents/nl-core-humanname-familyname-prefix\">https://www.simplifier.net/NL-BasicComponents/nl-core-humanname-familyname-prefix</a></p>\n<p>In a where I apparently did not pay attention it was decided that VV needed to be removed from ISO 21090 (DTr2), so now Spain, Germany, The Netherlands, Italy, Austria, Switserland and all other countries with prefixes similar to \"voorvoegsels\" now need an extension of their own</p>",
        "id": 153854530,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1477573366
    },
    {
        "content": "<p>couldn't you just use ISO 21090 and use PFX as the qualifier on <a href=\"http://HumanName.name\" target=\"_blank\" title=\"http://HumanName.name\">HumanName.name</a> in the Extension? I really like this complex extension which contains qualifier and value. Much easier than having multiple names which must be sliced.<br>\nAm i right with the assumption that name-part-qualifier is just a subset of ISO 21090 ?</p>",
        "id": 153854532,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1477575643
    },
    {
        "content": "<p>PFX just says something is a prefix, not what type of prefix</p>",
        "id": 153854559,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1477595264
    },
    {
        "content": "<p>we removed PFX from the extension because there's &lt;prefix value=\"\"/&gt;</p>",
        "id": 153854560,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477595304
    },
    {
        "content": "<p>So what do we do? Having different national extensions for the exact same thing  is  weird. Is there a way to get \"VV\" back into the ValueSet even if it's not part of the ISO Standard...? BTW: is there a particular reason why the extension doesn't reference a proper ValueSet or is that just work in progress?</p>",
        "id": 153854602,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477669616
    },
    {
        "content": "<p>it does reference a proper value set</p>",
        "id": 153854625,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477687165
    },
    {
        "content": "<p>which is actually a problem with VV. We removed VV because no one else is doing VV (eg. vCard). Can we just get the requirements for VV straight? </p>",
        "id": 153854626,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477687234
    },
    {
        "content": "<p>Ah right. I was looking at \"summary\" instead of\"full structure\" and didn't see the valueSet reference.<br>\nAs for the requirements: We have a \"Vorsatzwort\" on the German Health insurance card...</p>",
        "id": 153854631,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477687727
    },
    {
        "content": "<p>as in, it's a part of the name pieces?</p>",
        "id": 153854632,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477687810
    },
    {
        "content": "<p>it's the \"van\" in \"van Beethoven\" <br>\nHowever, in the health insurance card specification, \"name\" is not a complex type. All the name parts are just attributes of Person:<br>\n<a href=\"/user_uploads/10155/cUTEAU3l3ubEsACZGBqPHe8W/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/cUTEAU3l3ubEsACZGBqPHe8W/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\"><img src=\"/user_uploads/10155/cUTEAU3l3ubEsACZGBqPHe8W/pasted_image.png\"></a></div>",
        "id": 153854634,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477688605
    },
    {
        "content": "<p>implicit name type then. And you need to round trip? so VV is not a part of the family name? </p>",
        "id": 153854635,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477688828
    },
    {
        "content": "<p>I think it's considered part of the family name, however, \"van Beethoven\" is usually alphabetically listed under \"B\"</p>",
        "id": 153854637,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477689050
    },
    {
        "content": "<p>What do you mean by \"round trip\"?</p>",
        "id": 153854638,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477689080
    },
    {
        "content": "<p>Wow. I never knew there are so many of those <a href=\"https://www.gkv-datenaustausch.de/media/dokumente/arbeitgeber/deuev/rundschreiben_anlagen/GemRS_Anlage_06.pdf\" target=\"_blank\" title=\"https://www.gkv-datenaustausch.de/media/dokumente/arbeitgeber/deuev/rundschreiben_anlagen/GemRS_Anlage_06.pdf\">https://www.gkv-datenaustausch.de/media/dokumente/arbeitgeber/deuev/rundschreiben_anlagen/GemRS_Anlage_06.pdf</a> <img alt=\":astonished:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/astonished.png\" title=\":astonished:\"> </p>",
        "id": 153854639,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477689706
    },
    {
        "content": "<p>Mehr als ich wusste</p>",
        "id": 153854640,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477689781
    },
    {
        "content": "<p>round trip = need to be able to read the health insurance code, and then write back to it the same</p>",
        "id": 153854641,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477689819
    },
    {
        "content": "<p>I guess it's a not-so-uncommon requirement to keep family name and VV separate in order to be able to maintain the correct sort order of the name. So round trip = yes, though we probably wouldn't want to write back to the card ;-) . I guess the major issue here is not that we can't keep the VV seperate from the name, the problem is that we can't tell VV and title apart, because in FHIR they'd both end up as prefixes...</p>",
        "id": 153854644,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477690757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191375\">@Alexander Henket</span> is this the same for Dutch? what about other places where VV applies? and what do you do in vCard (e.g. standard address book applications)?</p>",
        "id": 153854646,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477690967
    },
    {
        "content": "<p>Tagging <span class=\"user-mention\" data-user-id=\"191797\">@Irma Jongeneel</span> <span class=\"user-mention\" data-user-id=\"191532\">@dr Kai U. Heitmann</span> <span class=\"user-mention\" data-user-id=\"191478\">@Oliver Egger</span> for opinions...</p>",
        "id": 153854648,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477691861
    },
    {
        "content": "<p>Yes,  that's our 'voorvoegsel'  (VV).  Actually,  Beethoven has 'van'  because his family came from the Dutch speaking parts of Europe (Mechelen,  Belgium).  In German,  'von'  would be the more common variant. And indeed,  my name (de Graauw) is/should be listed under 'G'. </p>",
        "id": 153854651,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1477693521
    },
    {
        "content": "<p>How about this: We use HumanName.prefix for both academic titles AND all sorts of VVs but instead of adding a qualifier to the VV, we add it to the academic title. We could use the ISO qualifier extension on HumanName.prefix for that, as it has a suitable code \"AC\" and assume that all prefixes that are NOT academic titles are some sort of VV.... (Are there even other types of prefixes, that are neither titles nor VVs?) Systems not using the extension would not be able to distinguish title from VV and probably just concat all prefixes in sequence when displaying the name which would be correct in most cases. Sort order would be correct in both cases, too...<br>\nWe'd then map our insurance card data as<br>\nTitel -&gt; HumanName.prefix with extension = AC<br>\nVorsatzwort -&gt; HumanName.prefix without extension<br>\nNachname -&gt; HumanName.family</p>",
        "id": 153854652,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477694476
    },
    {
        "content": "<p>That however would be in contradiction to the given example:<br>\n<a href=\"/user_uploads/10155/F6qZMTLWHlQU98F41YxJbCxD/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> <br>\nThough that needs revision anyway, since the code VV doesn't exist for the extension...</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/F6qZMTLWHlQU98F41YxJbCxD/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\"><img src=\"/user_uploads/10155/F6qZMTLWHlQU98F41YxJbCxD/pasted_image.png\"></a></div>",
        "id": 153854653,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477694595
    },
    {
        "content": "<p>In Dutch,  I am drs. Marc de Graauw (title,  given name,  voorvoegsel, family name). Voorvoegsel is part of the family name. Paper phone books would list this something like: \"Graauw, de; drs.  Marc\".  In English speaking conferences,  my name card is always under \"De Graauw\" ,  which is plain wrong (but I've given up correcting that) . </p>",
        "id": 153854654,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1477694771
    },
    {
        "content": "<p>i think that adding a qualifier to normal prefixes is.. .odd </p>",
        "id": 153854656,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477695511
    },
    {
        "content": "<p>I see this in the examples:</p>\n<div class=\"codehilite\"><pre>&lt;name&gt;\n  &lt;use value=&quot;official&quot; /&gt;\n  &lt;family value=&quot;van&quot;&gt;\n    &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot; &gt;\n       &lt;valueCode value=&quot;VV&quot; /&gt;\n    &lt;/extension&gt;\n  &lt;/family&gt;\n  &lt;family value=&quot;Hentenryck&quot; /&gt;\n  &lt;given value=&quot;Karen&quot; /&gt;\n&lt;/name&gt;\n</pre></div>",
        "id": 153854657,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477695557
    },
    {
        "content": "<p>why don't we all just use that? </p>",
        "id": 153854658,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477695671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191450\">@Simone Heckmann</span> That might work for most cases. Some more complicated names:<br>\nA.F.Th. van der Heijden (Dutch writer, both 'van' and 'der'are voorvoegsels, order matters)<br>\nWilliam Gates III (a non-VV and non-title postfix)<br>\nBerend-Jan baron van Voorst tot Voorst (first name, title, voorvoegel, last name - which contains the voorvoegsel 'tot' which has been collapsed into the last name)<br>\nFrank Sinatra junior (again a a non-VV and non-title postfix)</p>",
        "id": 153854660,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1477695980
    },
    {
        "content": "<p>To complicate matters: while in the Netherlands my name would be sorted under G as \"Graauw, de\", in Belgium they sort on voorvoegsels, so \"Van den Casteele\" would be under V. Sigh...</p>",
        "id": 153854661,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1477696175
    },
    {
        "content": "<p>so I still think that the example in the spec is that right way to do it. It seems to meet all the requirements we've canvassed, including those ones</p>",
        "id": 153854662,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477696261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Which prefixes count as 'normal' is a bit situation-dependent :-) VV's 'de' and 'van' are pretty common here...</p>",
        "id": 153854664,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1477696387
    },
    {
        "content": "<p>umm, yes but so? </p>",
        "id": 153854665,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477696414
    },
    {
        "content": "<p>What's the reason to be able to decompose the various parts? If it's just to order correctly, then what about something like:</p>\n<div class=\"codehilite\"><pre>&lt;name&gt;\n    &lt;family value=&quot;van Henterenryck&quot;&gt;\n    &lt;extension url=&quot;http://hl7.org/fhir/sort-as&quot; &gt;\n       &lt;valueString value=&quot;Henterenryck; van&quot; /&gt;\n    &lt;/extension&gt;\n  &lt;/family&gt;\n  &lt;given value=&quot;Karen&quot; /&gt;\n&lt;/name&gt;\n</pre></div>",
        "id": 153854667,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1477696575
    },
    {
        "content": "<p>Well, it think it would work when one distinguishes between titles and 'VV' in some way. One could not derive sort order, but that may be asking too much.</p>",
        "id": 153854668,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1477696634
    },
    {
        "content": "<p>the example in spec distinguishes, and allows sort order</p>",
        "id": 153854669,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477696656
    },
    {
        "content": "<p>My name is \"Marc de Graauw\", but needs to be sorted as \"Graauw, de; Marc\". If I were Belgian, my name would be \"Marc De Graauw\" (or \"de\", they have both) and would need to be sorted as \"De Graauw, Marc\". Dutch names are not normally used in family-given order as Chinese names, that's only the phone book order. I don't think there's a way to derive sort order from the order of the name parts in the normal sequence.</p>",
        "id": 153854670,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1477696935
    },
    {
        "content": "<p>but you said before that the sort order changes from country to country, not from person to person</p>",
        "id": 153854671,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477697034
    },
    {
        "content": "<p>Yes, and am still saying that, am I not?</p>",
        "id": 153854672,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1477697122
    },
    {
        "content": "<p>well, I wasn't sure. The example in the spec works for country to country order decisions. </p>",
        "id": 153854673,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477697173
    },
    {
        "content": "<p>BTW, I don't mind if FHIR does not support all the niceties of Dutch name sorting - I think that's asking too much, and obviously there will be some community in the world with other niceties we've overlooked. Distinguishing 'title' from 'VV' with a qualifier though would be helpful.</p>",
        "id": 153854674,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1477697225
    },
    {
        "content": "<p>by default, the render order would be \"De Graauw\", since De is a family name. but for systems that are a VV aware, they can choose a different ordering where De is known as a VV and they can put it after or elsewhere </p>",
        "id": 153854675,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477697230
    },
    {
        "content": "<p>Right, agree. </p>",
        "id": 153854676,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1477697251
    },
    {
        "content": "<p>the problem with the example in the spec is that it's not legal. but if I was to make it legal, then everyone could use that without any problems.</p>",
        "id": 153854678,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477697381
    },
    {
        "content": "<p>Yes. Maybe 'VV' is too much based in Dutch? I guess the real distinction is between prefixes which are an inherent part of the (family) name (like 'de' and 'van', and the German/French/Spanish etc. ones) and acquired prefixes such as (academic) titles. Those are not inherent parts of the name, for instance children don't inherit them. (That leaves nobility a bit in the middle, maybe.)</p>",
        "id": 153854679,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1477697852
    },
    {
        "content": "<p>so we have &lt;prefix&gt; for them</p>",
        "id": 153854681,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477698399
    },
    {
        "content": "<p>From what I could find, most of our systems would capture Marc as<br>\ntitle = Dr.<br>\nprefix= de<br>\ngiven = Marc<br>\nfamily = Graauw</p>\n<p>The example could work for us, except the mapping for some systems would be a bit strange.<br>\ntitle -&gt; prefix<br>\nprefix -&gt; family (VV)</p>\n<p>I guess for most vendors,<br>\ntitle -&gt; prefix (AC)<br>\nprefix -&gt; prefix<br>\nwould be a more intuitive approach.</p>",
        "id": 153854691,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477723898
    },
    {
        "content": "<p>well, for v3 compatibility, VV has always been regarded as part of a family name (a prefix to it(</p>",
        "id": 153854695,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477732274
    },
    {
        "content": "<p>hence the example in the spec. And it seems to match the behaviour Marc described for non-VV aware systems</p>",
        "id": 153854696,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477732304
    },
    {
        "content": "<p>Ah, I oversaw the discussion here and answered in the german thread ;-)<br>\nTo sum it up: to my understanding, prefix is meant to be before the complete name in FHIR while the VV has to be placed between given an family name parts since it actually is part of the family name.<br>\nSo family(VV) seems more consistent to me, even if the naming differences might be irritating to implementers at their first glance.</p>",
        "id": 153854701,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1477742757
    },
    {
        "content": "<p>I agree with preferring VV as part of family, because otherwise, systems oblivious to the extension would get the display sequence mixed up. This was, they only get the sort order wrong. Can I make a motion to add VV (or an equivalent code) to the ValueSet? :)</p>",
        "id": 153854707,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477754485
    },
    {
        "content": "<p>Interestingly, V2 even hat Subsubcomponents for \"Prefix of Spouse Name\", e.g.:<br>\n<code>Jongeneel-de Haas</code> is noted as<br>\n<code>Jongeneel-de Haas&amp;&amp;Jongeneel&amp;de&amp;Haas</code><br>\nWhat would that look like in FHIR?</p>\n<div class=\"codehilite\"><pre><span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">Jongeneel</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;de&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot;</span> <span class=\"nt\">&gt;</span>\n       <span class=\"nt\">&lt;valueCode</span> <span class=\"na\">value=</span><span class=\"s\">&quot;VV&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n  <span class=\"nt\">&lt;/family&gt;</span>\n  <span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Haas&quot;</span> <span class=\"nt\">/&gt;</span>\n</pre></div>\n\n\n<p>...but where would the dash go...?</p>",
        "id": 153854711,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477756152
    },
    {
        "content": "<p>Though, on second thought, this kind of differentiation is pretty pointless as it doesn't affect the sort order or the way the person is being addressed. So why would anyone care? The name is <code>&lt;family value = \"Jongeneel-de Haas\"&gt;</code> listed under \"J\" and that's it. Or am I missing something?</p>",
        "id": 153854712,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477756384
    },
    {
        "content": "<p>Ok, after a few more hundred lines of Chat in the german stream, I think we are agreed, that our UseCase would be satisfied, if we had a code \"VV\" in the ValueSet for the ISO extension. <br>\n<span class=\"user-mention\" data-user-id=\"191375\">@Alexander Henket</span> : Do you support this Change Request? Or does NL rather maintain a national extension?</p>",
        "id": 153854772,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477762554
    },
    {
        "content": "<p>...and we'd use the extension on HumanName.family, not on HumanName.prefix</p>",
        "id": 153854774,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477763340
    },
    {
        "content": "<p>well, do you want to make a task? </p>",
        "id": 153854778,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477771643
    },
    {
        "content": "<p>I don't get why we have a requirements discussion around VV again. It's been in there for ages because we had the requirements back then. Sigh. The discussion roundtrips perfectly at least.</p>\n<p>Ok, so the voorvoegsels are part our national law stemming back from the times where Napoleon forced people into last names. This law is sort the same in Spain, Belgium, France, Italy, Germany, Netherlands and then some.</p>\n<p>The voorvoegsel are part of the family name with explicit space, but do not count in sorting. The Americans and a number of Belgians have concatenated the voorvoegsel to their last names so in their case you can no longer distinguish voorvoegsel from last name and so it sorts on voorvoegsel too. \"Vanderbroeken\" was once \"van der Broeken\".</p>\n<p>Voorvoegsels are supported in 100% of systems in The Netherlands and I assume in Germany and roundtrip sending in and coming out.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Tussenvoegsel\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Tussenvoegsel\">https://en.wikipedia.org/wiki/Tussenvoegsel</a> (voorvoegsel and tussenvoegsel are interchangeable words for the same concept) The nationally recognized voorvoegsels are these <a href=\"http://www.vernoeming.nl/alle-333-voorvoegsels-tussenvoegsels-in-nederlandse-achternamen\" target=\"_blank\" title=\"http://www.vernoeming.nl/alle-333-voorvoegsels-tussenvoegsels-in-nederlandse-achternamen\">http://www.vernoeming.nl/alle-333-voorvoegsels-tussenvoegsels-in-nederlandse-achternamen</a></p>",
        "id": 153854794,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1477823766
    },
    {
        "content": "<p>As for VV: I'd love to get it back. It was removed in later versions of ISO 21090, and so it is missing from where it once was: <a href=\"http://build.fhir.org/v3/EntityNamePartQualifierR2/vs.html\" target=\"_blank\" title=\"http://build.fhir.org/v3/EntityNamePartQualifierR2/vs.html\">http://build.fhir.org/v3/EntityNamePartQualifierR2/vs.html</a></p>",
        "id": 153854795,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1477824244
    },
    {
        "content": "<p>As for the extension. We chose to sty close to the original datatype and extend under family to break a composite family name down into its parts. So a plain FHIR system handles it normally while a Dutch aware system handles it better</p>",
        "id": 153854796,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1477824329
    },
    {
        "content": "<p>It is the same strategy for addrLines which we also used to break down into its constituents. </p>",
        "id": 153854797,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1477824434
    },
    {
        "content": "<p>This sort of discussion makes a terminologist's toes tingle (it's a bar discussion as to if that is a good or bad sensation ;-). It would be a good thing to also consider east asian names in all this. Is some sort of voorvoegsel used there too?</p>",
        "id": 153854799,
        "sender_full_name": "Robert McClure",
        "timestamp": 1477845694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191375\">@Alexander Henket</span> The Belgians don't always concatenate, and if they don't ,  sorting is on voorvoegsel (\"De Graauw\" is under \"D\").  See <a href=\"https://nl.m.wikipedia.org/wiki/Tussenvoegsel\" target=\"_blank\" title=\"https://nl.m.wikipedia.org/wiki/Tussenvoegsel\">https://nl.m.wikipedia.org/wiki/Tussenvoegsel</a></p>",
        "id": 153854801,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1477847401
    },
    {
        "content": "<p>I'm 100% pro getting \"VV\"  back.  Either in family name or prefix, I think it would work both ways. </p>",
        "id": 153854802,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1477847539
    },
    {
        "content": "<p>Preferably in family, for the sake of systems not knowing about VVs (they exist, at least here in Germany)</p>",
        "id": 153854803,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1477847849
    },
    {
        "content": "<p>not as far as we are aware. There are different naming patterns there</p>",
        "id": 153854808,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477858967
    },
    {
        "content": "<p>I think the iso extension is doing a pretty good job at covering the use cases describd here (except for the fact that the VV/PFX code is missing). If the Belgians don't use prefixes for sorting, that makes them the lucky candidates for simply ignoring the extension, so the prefix becomes just a regular part of the last name. Since the extension can be applied to any part of the name, I think even the Asian folks should be able to cover their bases. However, now would be a good time for someone to go through the ValueSet and see if there are codes missing to satisfy their requirements.</p>",
        "id": 153854826,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477906545
    },
    {
        "content": "<p>got a offline weekend and missed the discussion i've started.<br>\nAfter reading all comments i also would prefer to reinclude VV (or an english equivalent like \"family name prefix\")in the <a href=\"http://hl7.org/fhir/ValueSet/name-part-qualifier\" target=\"_blank\" title=\"http://hl7.org/fhir/ValueSet/name-part-qualifier\">http://hl7.org/fhir/ValueSet/name-part-qualifier</a> ValuesSet and use the ISO21090 Extension.<br>\nMy only concern is how would i be able to profile a HumanName restrictive.</p>",
        "id": 153854834,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1477909951
    },
    {
        "content": "<p>If i want to create a patient profile for the date of the german health insurance card . I want to have 1..1 family names, 1..1 given Names and 0..1 Vorsatzworte<br>\nIf we insert Vorsatzwort as a extended family name i would have to slice family name use extension as the discriminator. Which is easy for the Vorsatzwort, but the regular family name doesn't has an extension</p>",
        "id": 153854835,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1477910291
    },
    {
        "content": "<p>is there a way to profile this?</p>",
        "id": 153854836,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1477910313
    },
    {
        "content": "<p>What is it that you want to profile?  That VV occurs at max once in &lt;family&gt;?</p>",
        "id": 153854840,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477911088
    },
    {
        "content": "<p>i want to profile the kardinalities of the HumanName part of a patient based on our electronic health card insurance dataset: given name 1..1, and yes VV max once in family, and 1..1 of the regular family name without a extension</p>",
        "id": 153854845,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1477911465
    },
    {
        "content": "<p>ah, so the total cardinality of &lt;family&gt; would be 1..2. If there are two, the first one would need to have the extension, and if there's only one the VV may not be present?</p>",
        "id": 153854848,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477911875
    },
    {
        "content": "<p>exactly</p>",
        "id": 153854849,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1477911914
    },
    {
        "content": "<p>interesting challenge.</p>",
        "id": 153854850,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477911924
    },
    {
        "content": "<p>I think I would take the easy way out and formulate an FluentPath invariant</p>",
        "id": 153854851,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477911945
    },
    {
        "content": "<p>(HumanName context)  family.extension('whatever url').count() &lt; family.count()</p>",
        "id": 153854855,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477912067
    },
    {
        "content": "<p>Probably more readable than fancy slicing constructions</p>",
        "id": 153854856,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477912084
    },
    {
        "content": "<p>thanks for the input ewout. I'll dig into this </p>",
        "id": 153854864,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1477912261
    },
    {
        "content": "<p>is there any starting point for the integration of FluentPath/FhirPath into profiles?</p>",
        "id": 153854867,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1477912436
    },
    {
        "content": "<p>Yes, in STU3, ElementDefinition.constraint.source is a FhirPath expression</p>",
        "id": 153854882,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477915173
    },
    {
        "content": "<p>Not-so fancy slicing may also work:</p>\n<ul>\n<li>Optional slice A (0..1) with mandatory extension (1..1)</li>\n<li>Mandatory slice B (1..1) without extension (0..0)</li>\n</ul>",
        "id": 153854883,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1477915180
    },
    {
        "content": "<p>and ordering</p>",
        "id": 153854884,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477915203
    },
    {
        "content": "<p>yup</p>",
        "id": 153854885,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1477915241
    },
    {
        "content": "<p>In DSTU2, it's done using an extension:</p>\n<div class=\"codehilite\"><pre>&lt;constraint&gt;\n              &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-expression&quot;&gt;\n                &lt;valueString value=&quot;sourceId or (targetId.count() + url.count() + params.count() = 1) or (type.code in (&#39;conformance&#39; | &#39;search&#39; | &#39;transaction&#39; | &#39;history&#39;))&quot; /&gt;\n              &lt;/extension&gt;\n</pre></div>",
        "id": 153854886,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477915357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> what would be the discriminator in your not-so fancy example? Patient.name.family.extension.url shouldnt work when i have  a slice which doesn't has an extension defined, right?</p>",
        "id": 153854894,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1477925753
    },
    {
        "content": "<p>related to the not-so fancy slicing: what is the proper way to set extension of an element to 0..0 in Forge. I can't find this option</p>",
        "id": 153854895,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1477926330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span> I guess the discriminator would be empty, as in this case it is not necessary (greedy matching).<br>\nForge does not (yet) provide UI for the common extension collection element, so you cannot set the cardinality of the collection to zero (expressing that no extensions whatsoever are allowed). However you can add a specific extension and then set the cardinality of that element to zero, expressing that this specific extension is prohibited.</p>",
        "id": 153854896,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1477926684
    },
    {
        "content": "<p>thx</p>",
        "id": 153854897,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1477926708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191450\">@Simone Heckmann</span> so I have added VV to the extension, though no one has created a task for this yet</p>",
        "id": 153854927,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477937304
    },
    {
        "content": "<p>Ok, Thanks! I  wanted to wait, if anyone finds another code missing. But that doesn't seem to be the case, so I will create the task.</p>",
        "id": 153854938,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477942092
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12310\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12310\">GF#12310</a></p>",
        "id": 153854939,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1477942533
    },
    {
        "content": "<p>Hard to track everything in here. I think what you landed on is an extension of family and use the repetition on family right?</p>\n<p>How then do you support \"Monique van Wijk-de Boer\" where:</p>\n<p><a href=\"http://www.hl7.nl/wiki/index.php?title=DatatypesR1:PN\" target=\"_blank\" title=\"http://www.hl7.nl/wiki/index.php?title=DatatypesR1:PN\">http://www.hl7.nl/wiki/index.php?title=DatatypesR1:PN</a></p>\n<p>\"van\" is voorvoegsel maiden name<br>\n\"Wijk\" maiden name<br>\n\"-\" is delimiter between maiden and partner name<br>\n\"de\" is voorvoegsel partner name<br>\n\"Boer\" is partner name</p>\n<p>V2: <br>\n            \"van Wijk-de Boer&amp;van&amp;Wijk&amp;de&amp;Boer^Monique\"</p>\n<p>V3:<br>\n            &lt;name&gt;<br>\n                &lt;given&gt;Monique&lt;/given&gt;<br>\n                &lt;prefix qualifier=\"VV BR\"&gt;van &lt;/prefix&gt;<br>\n                &lt;family qualifier=\"BR\"&gt;Wijk&lt;/family&gt;<br>\n                &lt;delimiter&gt;-&lt;/delimiter&gt;<br>\n                &lt;prefix qualifier=\"VV SP\"&gt;de &lt;/prefix&gt;<br>\n                &lt;family qualifier=\"SP\"&gt;Boer&lt;/family&gt;<br>\n            &lt;/name&gt; </p>\n<p>FHIR:<br>\n             &lt;name&gt;<br>\n                &lt;family value=\"van\"&gt;<br>\n                &lt;extension url=\"<a href=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\">http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier</a>\" &gt;<br>\n                    &lt;valueCode value=\"VV\" /&gt;<br>\n                &lt;/extension&gt;<br>\n                &lt;extension url=\"<a href=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\">http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier</a>\" &gt;<br>\n                    &lt;valueCode value=\"BR\" /&gt;<br>\n                &lt;/extension&gt;<br>\n                &lt;/family&gt;<br>\n                &lt;family value=\"Wijk\"&gt;<br>\n                &lt;extension url=\"<a href=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\">http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier</a>\" &gt;<br>\n                    &lt;valueCode value=\"BR\" /&gt;<br>\n                &lt;/extension&gt;<br>\n                &lt;/family&gt;<br>\n                &lt;family value=\"-\"&gt;<br>\n                &lt;extension url=\"<a href=\"http://hl7.org/fhir/v3/EntityNamePartTypeR2\" target=\"_blank\" title=\"http://hl7.org/fhir/v3/EntityNamePartTypeR2\">http://hl7.org/fhir/v3/EntityNamePartTypeR2</a>\" &gt;<br>\n                    &lt;valueCode value=\"DEL\" /&gt;<br>\n                &lt;/extension&gt;<br>\n                &lt;/family&gt;<br>\n                &lt;family value=\"de\"&gt;<br>\n                &lt;extension url=\"<a href=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\">http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier</a>\" &gt;<br>\n                    &lt;valueCode value=\"VV\" /&gt;<br>\n                &lt;/extension&gt;<br>\n                &lt;extension url=\"<a href=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\">http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier</a>\" &gt;<br>\n                    &lt;valueCode value=\"SP\" /&gt;<br>\n                &lt;/extension&gt;<br>\n                &lt;/family&gt;<br>\n                &lt;family value=\"Boer\"&gt;<br>\n                &lt;extension url=\"<a href=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\">http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier</a>\" &gt;<br>\n                    &lt;valueCode value=\"SP\" /&gt;<br>\n                &lt;/extension&gt;<br>\n                &lt;/family&gt;<br>\n                &lt;given value=\"Monique\"/&gt;<br>\n            &lt;/name&gt;</p>\n<p>And what about implicit spacing? How do I distinguish between \"d'Artagnan\" where \"d'\" is the voorvoegsel, and \"de Boer\" where \"de\" is the voorvoegsel? In the first case I do not want a space between d'Artagnan, but in the second I do... In V3 we explicitly added spaces as required, because &lt;prefix/&gt; did not have implicit spaces.</p>\n<p>FHIR really explodes in your face with inefficiency for just about any Dutch system. Not a very good value proposition. I think I'd rather see HumanName enhanced than any extension related proposal. Datatypes for Names and Addresses really need to be more capable than the 20% basic functionality they now support.</p>\n<p>Added this to <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12310\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12310\">GF#12310</a> too.</p>",
        "id": 153854941,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1477947006
    },
    {
        "content": "<p>Which real life system would support that complexity? And what would be the use of doing so instead of putting \"Wijk-de Boer\" into (main) family?<br>\nThis would be enough to get alphabetic sorting right as well as reproducing the data structure of the German insurance card (which was the origin of this thread).</p>",
        "id": 153854945,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1477952386
    },
    {
        "content": "<p>Right. were we to care, we could explode the complexity of HumanName in multiple directions. People who care might read my mother's name history in ISO 21090  under EN - we don't cater for that kind of stuff, and we don't need to </p>",
        "id": 153854966,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477980135
    },
    {
        "content": "<p>I don't ask for more than V2/V3 already handled and has been in use for 20+ years. I'm sure you'd agree that a FHIR HumanName does not stack up against a V2 FN (XPN)/V3 PN when you place them side by side</p>",
        "id": 153854982,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1477990894
    },
    {
        "content": "<p>those are 2 different things</p>",
        "id": 153854983,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477990940
    },
    {
        "content": "<p>Not sure how?</p>",
        "id": 153854985,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1477991024
    },
    {
        "content": "<p>all sorts of random junk made their way into v2/v3. We're trying to focus on what people use</p>",
        "id": 153854990,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477991649
    },
    {
        "content": "<p>And I'm telling you that distinguishing partner name, birth name and voorvoegsels thereof fits that profile :-)</p>",
        "id": 153854991,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1477991710
    },
    {
        "content": "<p>100% of systems here do this.</p>",
        "id": 153854992,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1477991726
    },
    {
        "content": "<p>Same is true for addresses. 100% of systems here can and will distinguish streetName from houseNumber and houseNumber from houseNumber additions.</p>\n<p>The zipcode table works based on zip + houseNumber without additions so it is important to keep them apart.</p>\n<p>1000 AA + 2 will lead to an address<br>\n1000 AA + 2B II will not necessarily</p>",
        "id": 153854993,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1477992022
    },
    {
        "content": "<p>So, just like concatenated family names, we will need extensions to split addrLines too</p>",
        "id": 153854994,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1477992071
    },
    {
        "content": "<p>I did not really like the way v3 handled the delimiters, I don't think many systems disassemble names into that detail. And also, the fact that the name is partitioned into an ordered and mixed set of &lt;given&gt;, &lt;prefix&gt; and &lt;family&gt; is something that XML can model and represent, but it's pretty nasty for relational databases.</p>",
        "id": 153854995,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477993176
    },
    {
        "content": "<p>But I do agree, we need to distinguish maiden name (which is done, using two separate &lt;names&gt; in FHIR). And of course separate the VV from the familyname. </p>",
        "id": 153854996,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477993239
    },
    {
        "content": "<p>All the subteties around how to re-concatenate stuff you just carefully disassembled (e.g. d'Artagnan) - it makes me careful about doing too much disassembly. When I worked with v3, the handling of spaces and delimiters was a constant pain.</p>",
        "id": 153854997,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477993480
    },
    {
        "content": "<p>It's easy for me to ask my colleagues what kind of input our market-leaders here take, e.g. Chipsoft and Epic.</p>",
        "id": 153854998,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477993505
    },
    {
        "content": "<p>please do</p>",
        "id": 153854999,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477993524
    },
    {
        "content": "<p>The set is:  Birthname, Birthname voorvoegsel (VV),  Partnername, Partnername voorvoegsel (VV), initials, firstname</p>",
        "id": 153855001,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477994635
    },
    {
        "content": "<p>that's... eclectic.....</p>",
        "id": 153855002,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477994682
    },
    {
        "content": "<p>But certainly not surprising, I think it's pretty representative.  I expect even more systems will just have  First + VV + Last.  Where the patient gets to choose what lastname she wants to use, since there are many who really don't want their partners name to appear, and the converse is true too. There will be patients who really want to use their partners name. Mentioning both -at least to me- is very formal.</p>",
        "id": 153855003,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477994816
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"191375\">@Alexander Henket</span> , we are meeting quite some dutch vendors this thursday, won't we?  We can just ask what they are doing...</p>",
        "id": 153855004,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1477994994
    },
    {
        "content": "<p>I don't see a problem using extensions for Dutch house numbers and partner name handling.  It's pretty hooked up to our national laws and customs. VV is different, that's multinational.  And I have never seen a live lsystem which actually supports the different spacing in \"d'\" and \"de\" outside v3 messages. </p>",
        "id": 153855028,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1478023436
    },
    {
        "content": "<p>I think the difficult task right here is<br>\na) to differentiate which name parts/qualifiers are in the international scope and thus should be core extensions an which are national extension scope. I agree we wouldn't want to have all of the national/regional excentrics in the core. But neither would we want different national extensions for the same concept.<br>\nb) we really need to educate implementers, that there is no one field in FHIR that holds the family name but instead the family name is always the concatenation of all repetitions  of family. I guess that is the major change in comparison to V2/3.</p>",
        "id": 153855042,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478027762
    },
    {
        "content": "<p>how is that a change to v2/v3?</p>",
        "id": 153855046,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478029119
    },
    {
        "content": "<p>I think it is not so much a change from V2/3 but from current thinking in FHIRs HumanName where, although &lt;family/&gt; repeats you normally think of just one.</p>",
        "id": 153855076,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478068644
    },
    {
        "content": "<blockquote>\n<p>But Alexander, we are meeting quite some dutch vendors this thursday, won't we? We can just ask what they are doing...</p>\n</blockquote>\n<p>What type of question would you like to ask them? Whether or not they would mind if we did the extension in a different way than previously agreed so we align better with Germany and other countries?</p>",
        "id": 153855077,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478069091
    },
    {
        "content": "<p>V2 had the full name with all parts/delimiters as first component and the individual parts in the following subfields. Implementations that \"didn't care\" just read the first field and ignored the rest. There was no need to \"assemble\" the family name from it's components. Don't know about V3, though...</p>",
        "id": 153855098,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478108197
    },
    {
        "content": "<p>I am starting to wonder if  - both from a profiling and an implementing perspective - it wouldn't be easier, to simply put the full family name (as it is supposed to be displayed) into family and use a flat list of distinct extensions for any part of the name that has a special meaning? The downside would be that there'd be a rather large catalogue of core extensions (one for each value in the Iso set) plus one for the \"plain\" name for sort order but then again only few of them would be relevant in one particular UseCase/Realm. </p>\n<p>Sort of like this:</p>\n<div class=\"codehilite\"><pre>(German version)\n    <span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van Wijk-de Boer&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/family-voorvoegsel&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/family-plain&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Wijk-de Boer&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n\n(Dutch version)\n     <span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van Wijk-de Boer&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/family-voorvoegsel&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n     <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/maiden-voorvoegsel&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;de&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span> \n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/family-plain&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Wijk&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n      <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/maiden-plain&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Boer&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n\n(Belgian version)\n     <span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van Wijk-de Boer&quot;</span><span class=\"nt\">/&gt;</span>\n</pre></div>\n\n\n<p>That way, regional profiles could pick whatever extension they need, common concepts could be shared across borders, profiling would be as simple as adding an extension to the HumanName-Datatype, Spacing and Delimiters need no special handling (the name is displayed exactly the way it is spelled in HumanName.family) and even the dumbest of systems that ignore all extensions had a good chance to get it right...</p>",
        "id": 153855132,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478118907
    },
    {
        "content": "<p>...not meaning to say that Belgian systems are the dumbest. The are just in the lucky position, that name parts don't seem to have any special meaning and don't affect sort order ;-)</p>",
        "id": 153855134,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478119070
    },
    {
        "content": "<p>That is what we landed on. 1 family, break down underneath.</p>\n<p>Except that our breakdown is more complex. We don't just need VV, but \"VV BR\" and \"VV SP\". Otherwise you cannot distinguish \"van\" in \"van Wijk\" from \"de\" in \"de Boer\".</p>\n<p>The current standard extensions do not support this.</p>",
        "id": 153855135,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478119274
    },
    {
        "content": "<p>This is sort of what I had suggested a couple of days ago. I think most systems are interested in two things: how to display, and how to sort. Does  flagging a part of the name as VV have value, except as determining one of those things?</p>",
        "id": 153855136,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1478119314
    },
    {
        "content": "<p>Sort order for systems that store separate name parts will need to depend on order in the break down (V3 style), or... we need yet another extension to tell us sort order</p>",
        "id": 153855137,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478119413
    },
    {
        "content": "<p>I think what I was asking was do you need the VV BR, VV SP, etc. extensions, when what you are really trying to derive is sort order? Or is there another need to identify the various parts?</p>",
        "id": 153855138,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1478119520
    },
    {
        "content": "<p>Yes, I do see a point in flagging:<br>\nThere may be other name parts that also do not affect sort order (nobility) but should be distinguishable from VV. Also, I belive, MPIs would want to be able to separate the Spouse Name VV (as in Alexander's example) even though, it has no effect on sort order</p>",
        "id": 153855139,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478119527
    },
    {
        "content": "<p>Hang on... there two sort orders at play. <br>\n1. Maiden name before/after Partner name<br>\n2. Whether or not the voorvoegsel counts for sorting in name lists</p>",
        "id": 153855140,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478119619
    },
    {
        "content": "<p>I was solely talking about the first. As long as a Dutch system knows what the voorvoegsel is, it will never use that for sorting. Don't care if you are Belgian (I think)</p>",
        "id": 153855141,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478119677
    },
    {
        "content": "<p>We are dealing with a health insurance card that distinguishes nobility and voorvoegsel. Not saying there's any point in that but that's the way it is :-/</p>",
        "id": 153855142,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478119695
    },
    {
        "content": "<p>Does nobility count for sorting?</p>",
        "id": 153855143,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478119728
    },
    {
        "content": "<p>Does sort order depend on the system's nationality, or the patient's?</p>",
        "id": 153855144,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1478119740
    },
    {
        "content": "<p>Doesn't for us. King Willem-Alexander van Oranje Nassau sorts under \"O\"</p>",
        "id": 153855145,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478119770
    },
    {
        "content": "<p>nope. Although: some systems may sort noble patients at the top of the list, no matter what name :D</p>",
        "id": 153855146,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478119809
    },
    {
        "content": "<p>I think a Dutch system works the same way regardless of patient nationality.</p>",
        "id": 153855147,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478119819
    },
    {
        "content": "<p>If you are called \"Tom de Jong\" and you want to be sorted under \"de Jong\", then all you can do is enter \"de Jong\" in the last name (birth/partner) field and skip usage of voorvoegsel</p>",
        "id": 153855148,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478119894
    },
    {
        "content": "<p>But better make sure you are registered like that at the national person registry too otherwise this prevails at certain points...</p>",
        "id": 153855149,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478119959
    },
    {
        "content": "<p>Patient?family=Jong would always try to match at the beginning of the name, so it wouldn't show \"de Jong\" as a result, right?</p>",
        "id": 153855150,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478120073
    },
    {
        "content": "<p>...unless you say /Patient?family:contains=Jong</p>",
        "id": 153855151,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478120099
    },
    {
        "content": "<p>maybe that would be an argument for sticking to the original idea of splitting the name parts into multiple iterations of family...?</p>",
        "id": 153855152,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478120185
    },
    {
        "content": "<p>that way: no matter what part of the name you search for, you'd alway get a hit as long as it matches any part of the name. (Assuming the extensions are not considered when searching on family)</p>",
        "id": 153855153,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478120257
    },
    {
        "content": "<p>Unless you happen to search for \"Smith-Jones\"</p>",
        "id": 153855154,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1478120284
    },
    {
        "content": "<p>Right. Maybe that's even worse! If you'd go the extra mile to type the full name into the search box, you wouldn't get any results if the name is stored only in fragments!!</p>",
        "id": 153855155,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478120389
    },
    {
        "content": "<p>That's an even stronger reason to have the full name with all of it's parts stored in family and use only the extensions to break out the parts.</p>",
        "id": 153855156,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478120502
    },
    {
        "content": "<p>I think Elliot just raised the most important issue with the current situation. Finding the Patient by Name (a) is more important than displaying the Name correctly (b) is more important that sorting the Name correctly (c).  <br>\nThe current solution (family repetitions with ISO-extension qualifier) is </p>\n<ul>\n<li>failing at (a) - you type the full name correctly and get 0 results</li>\n<li>shaky at (b) - proper display needs concatenation of all name parts (handling of delimiters/spacing is unclear)</li>\n<li>doing okay at (c)  - any system interpreting the ISO-Extension correctly will get the sort order right</li>\n</ul>\n<p>The alternative suggestion (full name in family + flat list of extensions) would be</p>\n<ul>\n<li>okay at (a)  - typing the full name will get a match, omitting prefixes will only get yield results with the :contains-modifier</li>\n<li>good at (b) - display as provided in family</li>\n<li>okay at (c) - any system interpreting the flat extensions correctly will get the sort order right.</li>\n</ul>\n<p>That IMHO disqualifies the ISO-Extension!</p>",
        "id": 153855171,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478124099
    },
    {
        "content": "<p>The search point is interesting and I agree with your priority </p>",
        "id": 153855172,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478124385
    },
    {
        "content": "<p>no one has mentioned HumanName.text with regard to (b)</p>",
        "id": 153855173,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478124398
    },
    {
        "content": "<p>I don't think it disqualifies the extension, though</p>",
        "id": 153855174,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478124432
    },
    {
        "content": "<p>I understand HumanName.text as the preferred representation of the <strong>full</strong> name, e.g. \"King Willem-Alexander van Oranje Nassau\". Systems may however need tho display names differently depending on context. In a letter, the Patient would be adressed as \"Dear Mr. King van Oranje Nassau\", so the system needs to be able to display the last name (and only the last name) correctly.</p>",
        "id": 153855175,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478124815
    },
    {
        "content": "<p>Extensions for the specific parts seems to be a nice granular option. It also would simplify profiling the HumanName-part of a Patient significantly compared to the previous discussed reuse of the same extension with different qualifiers.</p>",
        "id": 153855232,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1478165175
    },
    {
        "content": "<p>can you provide an example of what you mean? </p>",
        "id": 153855233,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478165273
    },
    {
        "content": "<p>its easier to define a restrictive profile slicing the family name with the discriminator on extension urls. Then to interprete some FHIR Path expressions. <br>\nOne question regarding slicing on Extension URL regarding Simones example (german part): could this family name be sliced on the extension url and for the non-extended family entry just put an empty url in the slice? I guess not. So we would need a extension for the complete name as well?</p>",
        "id": 153855244,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1478168591
    },
    {
        "content": "<p>Example: \"van Wijk-de Boer\"</p>\n<p>ISO-Extension with qualifiers:</p>\n<div class=\"codehilite\"><pre><span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot;</span> <span class=\"nt\">&gt;</span>\n       <span class=\"nt\">&lt;valueCode</span> <span class=\"na\">value=</span><span class=\"s\">&quot;VV&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n  <span class=\"nt\">&lt;/family&gt;</span>\n<span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Wijk&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;de&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot;</span> <span class=\"nt\">&gt;</span>\n       <span class=\"nt\">&lt;valueCode</span> <span class=\"na\">value=</span><span class=\"s\">&quot;VV&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n  <span class=\"nt\">&lt;/family&gt;</span>\n<span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Boer&quot;</span><span class=\"nt\">/&gt;</span>\n</pre></div>\n\n\n<p>\"Flat\" version with string type extensions:</p>\n<div class=\"codehilite\"><pre>     <span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van Wijk-de Boer&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/family-voorvoegsel&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/family-plain&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Wijk&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n     <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/maiden-voorvoegsel&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;de&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span> \n      <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/maiden-plain&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Boer&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n</pre></div>\n\n\n<p>Alexander's proposal had the flat extensions nested unter \"family\", whereas my example has them directly unter \"humanName\"  just like anyother name part.</p>",
        "id": 153855245,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478168595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191450\">@Simone Heckmann</span> i'd prefer the flat version, than we don't have to care for my slicing problem mentioned in my last post</p>",
        "id": 153855246,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1478168694
    },
    {
        "content": "<p>*then</p>",
        "id": 153855247,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1478168706
    },
    {
        "content": "<p>I don't really have a preference for placing the extensions directly under HumanName or under HumanName.family. Intuitively I'd say: the flatter, the simpler. The only reason I can think of in favor of deeper nesting is that there may be extensions that could be used both as extensions of family as well as given or any other name part. Though I can't currently think of an example...</p>",
        "id": 153855249,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478168967
    },
    {
        "content": "<p>Simone you have 2 different issues here - full family name with breakdown, or building the family name, and extensions on family name or seperate</p>",
        "id": 153855250,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478169077
    },
    {
        "content": "<p>at least it seems to that these are orthogonal issues</p>",
        "id": 153855251,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478169099
    },
    {
        "content": "<p>the second of your options appears to address your issue #1</p>",
        "id": 153855252,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478169129
    },
    {
        "content": "<p>I think we should stick to the paradigm to keep simple things simple.<br>\nOf course, names can be super complicated, if you're a Dutch MPI ;-)<br>\nBut then again, most systems won't care. And for them, the flat extensions under HumanName are definitely the easiest to ignore. They will just want to read the content of HumanName.family and get the full/correct name and ignore everything else. That's what we need to take care of.</p>",
        "id": 153855256,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478169750
    },
    {
        "content": "<p>The search issue is interesting,  but I'm not sure it's as fundamental as it seems.  I don't believe there are many Dutch systems which would support search on \"van Wijk-de Boer\" as an exact  match.  And any user searching for it and getting zero results would try \"van wijk de boer\".  When searching on text, in practice one simply sometimes has to try some variants. </p>",
        "id": 153855260,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1478170415
    },
    {
        "content": "<blockquote>\n<p>But then again, most systems won't care</p>\n</blockquote>\n<p>Right, which is the point I tried to make yesterday. Even the Dutch MPI (we don't really have one, but we have a national server that verifies your national patient ID and returns the demographics for the patient) has a *Very* simple name model. And guess what: many systems just copy that simple data into their database when they verify the dutch BSN.</p>",
        "id": 153855261,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1478170424
    },
    {
        "content": "<p>What you are doing in your \"flat\" representation is actually saying: decomposition of family name is outside the 80%.  Heck, family may be limited to 0..1 in the HumanName.</p>",
        "id": 153855263,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1478170479
    },
    {
        "content": "<p>most implementers would like family name limited to 0..1. but the spanish cultures use multiple surnames a lot</p>",
        "id": 153855264,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478170571
    },
    {
        "content": "<p>and if you profile family name to 1..1 and forbid the use of extensions you should always have a family name. If you'd insert the additional name components as extended family parts and restrict the family name to 1..* you just could add \"van\" with Extension as a kind of valid family name</p>",
        "id": 153855266,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1478170731
    },
    {
        "content": "<p>Say Hello to Diego Mendez Gonzales: <a href=\"http://fhir2.healthintersections.com.au/open/Patient/1058\" target=\"_blank\" title=\"http://fhir2.healthintersections.com.au/open/Patient/1058\">http://fhir2.healthintersections.com.au/open/Patient/1058</a></p>",
        "id": 153855269,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478170865
    },
    {
        "content": "<p>Right, but that could be just one &lt;family&gt; with two components.</p>",
        "id": 153855270,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1478170895
    },
    {
        "content": "<p>Do Spanish systems actually have a textbox with a \"+\" to enter multiple family names separately?</p>",
        "id": 153855271,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1478170922
    },
    {
        "content": "<p>the point that is tricky about spanish multiple surnames is that they have flexible use and order</p>",
        "id": 153855272,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478170923
    },
    {
        "content": "<p>now let the user type \"Mendez Gonzales\" into the Searchbox and run <a href=\"http://fhir2.healthintersections.com.au/open/Patient?family=mendez%20gonzales\" target=\"_blank\" title=\"http://fhir2.healthintersections.com.au/open/Patient?family=mendez%20gonzales\">http://fhir2.healthintersections.com.au/open/Patient?family=mendez%20gonzales</a> against the server -&gt; 0 results</p>",
        "id": 153855273,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478170927
    },
    {
        "content": "<p>really? taht sounds like a bug</p>",
        "id": 153855275,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478170992
    },
    {
        "content": "<p>ah no, because it is split</p>",
        "id": 153855276,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478170992
    },
    {
        "content": "<p>can search by either name, but not both </p>",
        "id": 153855277,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478171003
    },
    {
        "content": "<p>That's the point. I the guys name is \"Mendez Gonzales\" and you search for \"Mendez Gonzales\" and get no results, then there's a flaw in the system, no?</p>",
        "id": 153855278,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478171062
    },
    {
        "content": "<p>probably. I'm not sure what would make sense to do about it though</p>",
        "id": 153855279,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478171148
    },
    {
        "content": "<p>If we'd write <br>\n&lt;family value= \"Mendez Gonzales\"&gt;<br>\nand optionally add extensions for <br>\n &lt;extension url=\"<a href=\"http://hl7.org/fhir/StructureDefinition/mothers-family-name\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/mothers-family-name\">http://hl7.org/fhir/StructureDefinition/mothers-family-name</a>\"&gt;<br>\n         &lt;valueString value=\"Gonzales\" /&gt;<br>\n&lt;/extension&gt;<br>\n &lt;extension url=\"<a href=\"http://hl7.org/fhir/StructureDefinition/fathers-family-name\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/fathers-family-name\">http://hl7.org/fhir/StructureDefinition/fathers-family-name</a>\"&gt;<br>\n         &lt;valueString value=\"Mendez\" /&gt;<br>\n&lt;/extension&gt;<br>\nWe'd have the full semantics of the name PLUS correct search results</p>",
        "id": 153855282,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478171198
    },
    {
        "content": "<p>Full semantics for those who care, that is...</p>",
        "id": 153855283,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478171240
    },
    {
        "content": "<p>not sure about that. I don't know that you always know which is which. Knowing which is which is not in the ISO 21090 requirements</p>",
        "id": 153855285,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478171306
    },
    {
        "content": "<p>If in spanish speaking countries the name order is flexible, they may want to add the :contains modifier to their searches so they get all possible matches even if someone types the second part of the name into the searchbox</p>",
        "id": 153855286,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478171326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191839\">@diego kaminker</span> can you lead consultation with the Spansih community about this? </p>",
        "id": 153855287,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478171479
    },
    {
        "content": "<p>Well, the extensions were just meant as an example. How the Spanish model their name parts is up to them. Might as well be just one extension \"name-part\" with a multiple cardinality...</p>",
        "id": 153855288,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478171524
    },
    {
        "content": "<p>My Mexican partner has 2 surnames, and sometimes uses one, sometimes uses the other and sometimes uses both. Certainly the current modelling suits her usage best..</p>\n<p>Why not just do <code>&amp;family=Mendez&amp;family=Gonzales</code> if you want to match both?</p>",
        "id": 153855290,
        "sender_full_name": "James Agnew",
        "timestamp": 1478171660
    },
    {
        "content": "<p>My point is: HumanName.family should <strong>always</strong> and in every country contain the <strong>full</strong> family name with all of it's parts, so systems that ignore every other extension still get correct search results (at least with a :contains-search) and are able to display the name correctly.</p>",
        "id": 153855291,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478171662
    },
    {
        "content": "<p>I think the Dutch can live with Simone's solution. Fortunately, we are in the middle of the Dutch HL7 WGM, so it's easy to verify ;-)</p>",
        "id": 153855292,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1478171678
    },
    {
        "content": "<p>yes James comments is the classic Spanish approach on which the modelling is based</p>",
        "id": 153855293,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478171752
    },
    {
        "content": "<p>Problem is: that only works if your search criteria can be decomposed into individual criterias (two words). In many other countries, double-names have a delimiter.<br>\nIn Germany/Dutch... the guy's name would be \"Gonzales-Mendes\". If you decompose this into family parts (Gonzales, Mendes and Delimiter) and someone types \"Gonzales-Mendes\" into the searchbox...?</p>",
        "id": 153855294,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478172066
    },
    {
        "content": "<p>Sure, English also generally uses a hyphen between last names for people who elect to take two of them.</p>\n<p>In that case though I'd expect both names to go in a single repetition of humanname.family. There's no reason they both need to be modelled the same way:</p>\n<ul>\n<li>In Spanish, many people have two distinct family names</li>\n<li>In English (and German/Dutch it sounds like) many people have one family name with two parts</li>\n</ul>",
        "id": 153855296,
        "sender_full_name": "James Agnew",
        "timestamp": 1478172297
    },
    {
        "content": "<p>Thing is: if you need to qualify the name parts with the ISO-Extension, you HAVE to decompose hyphenated names.</p>",
        "id": 153855297,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478172387
    },
    {
        "content": "<p>Wouldn't the search issue on a FHIR server be covered by HumanName.text anyway? Grahame mentioned that earlier ...<br>\nOne could simply profile it to 1..1<br>\nAnd when it comes to systems based on e.g. a relational model, wouldn't we leave to the system providers how they store their data and how they implement their search algorithms?<br>\nJust my 2 cent ;-)</p>",
        "id": 153855299,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1478172498
    },
    {
        "content": "<p>Ah, I wasn't thinking of the ISO extension.. I've never seen that in the wild :)</p>",
        "id": 153855300,
        "sender_full_name": "James Agnew",
        "timestamp": 1478172582
    },
    {
        "content": "<p>I like the flat proposal in that it has exactly the type of qualifiers we need. I still feel a tendency towards qualifying name parts _under_ the family they break down, so:</p>\n<div class=\"codehilite\"><pre>&lt;family value=&quot;van Wijk-de Boer&quot;&gt;\n&lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-partner-voorvoegsel&quot;&gt;\n     &lt;valueString value=&quot;van&quot; /&gt;\n&lt;/extension&gt;\n&lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-partner-plain&quot;&gt;\n     &lt;valueString value=&quot;Wijk&quot; /&gt;\n&lt;/extension&gt;\n &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-maiden-voorvoegsel&quot;&gt;\n     &lt;valueString value=&quot;de&quot; /&gt;\n&lt;/extension&gt; \n  &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-maiden-plain&quot;&gt;\n     &lt;valueString value=&quot;Boer&quot; /&gt;\n&lt;/extension&gt;\n&lt;/family&gt;\n</pre></div>\n\n\n<p>or even for a breakdown of last name, not further specified:</p>\n<div class=\"codehilite\"><pre>&lt;family value=&quot;van Wijk-de Boer&quot;&gt;\n&lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-voorvoegsel&quot;&gt;\n     &lt;valueString value=&quot;van&quot; /&gt;\n&lt;/extension&gt;\n&lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-plain&quot;&gt;\n     &lt;valueString value=&quot;Wijk&quot; /&gt;\n&lt;/extension&gt;\n&lt;/family&gt;\n</pre></div>",
        "id": 153855502,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478262945
    },
    {
        "content": "<p>I like this direction.</p>\n<p>Without going too far down the rabbit's hole, what about nested extensions?</p>\n<div class=\"codehilite\"><pre>&lt;family value=&quot;van Wijk-de Boer&quot;&gt;\n&lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-partner&quot;&gt;\n    &lt;valueString value=&quot;van Wilk&quot;&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-voorvoegsel&quot;&gt;\n            &lt;valueString value=&quot;van&quot;/&gt;\n        &lt;/extension&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-separator&quot;&gt;\n            &lt;valueString value=&quot; &quot;/&gt;\n        &lt;/extension&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-plain&quot;&gt;\n            &lt;valueString value=&quot;Wilk&quot;/&gt;\n        &lt;/extension&gt;\n    &lt;/valueString&gt;\n&lt;/extension&gt;\n&lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-separator&quot;&gt;\n    &lt;valueString value=&quot;-&quot;/&gt;\n&lt;/extension&gt;\n&lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-maiden&quot;&gt;\n    &lt;valueString value=&quot;de Boer&quot;&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-voorvoegsel&quot;&gt;\n            &lt;valueString value=&quot;de&quot;/&gt;\n        &lt;/extension&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-separator&quot;&gt;\n            &lt;valueString value=&quot; &quot;/&gt;\n        &lt;/extension&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/family-plain&quot;&gt;\n            &lt;valueString value=&quot;Boer&quot;/&gt;\n        &lt;/extension&gt;\n    &lt;/valueString&gt;\n&lt;/extension&gt;\n&lt;/family&gt;\n</pre></div>\n\n\n<p>This gives you total control, reduces the number of extension definitions needed (although increases the number of extensions used), and decomposes the name in a consistent manner (last name is made of partner-separator-maiden, partner and maiden are each made of VV-separator-plain).</p>\n<p>For simplicity the family-separator extension could be implied when it is a space.</p>",
        "id": 153855520,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1478276974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191380\">@Elliot Silver</span> :The only argument <strong>against</strong> nesting, that I can think of is that it may decrease interoperabiliy by hiding extensions that many systems might implement under a extension that only few care about. (Many systems may want to know that \"van\" is a VV to derive the fact that the name must be sorted under \"Wijk\" but fewer systems may care about distinguishing partner and spouse name). So the flatter the list, the better the chances for systems to be able to selectively \"pick\" the extensions they need.</p>",
        "id": 153855538,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478285630
    },
    {
        "content": "<p>dont't follow? either you know the extensions or not</p>",
        "id": 153855548,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478285913
    },
    {
        "content": "<p>in Elliot's example, a system that doesn't know the extension \"family-partner\" would ignore the first branch and subsequently miss the extension \"family-voorvoegsel\" nested therein, no?</p>",
        "id": 153855549,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478286072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191450\">@Simone Heckmann</span> But <span class=\"user-mention\" data-user-id=\"191375\">@Alexander Henket</span> 's example requires all systems to know <strong>all</strong> the extensions if they want to be able to do anything on a sub-complete name basis.</p>",
        "id": 153855550,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1478286320
    },
    {
        "content": "<p>Yes but Alexander's example could probably be enhanced toward interoperbility by renaming the extensions to \"family-vv\" and \"partner-vv\", so that systems that only differentiate the first vv, could understand that part of the story and ignore the partner-vv.</p>",
        "id": 153855558,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478287522
    },
    {
        "content": "<p>you'd still need to know the extension - don't see what that gets you</p>",
        "id": 153855559,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478287593
    },
    {
        "content": "<p>Ok, back to the drawing board :)</p>\n<p>This is our name: van Wijk-de Boer<br>\n<strong>some</strong> systemy may care to know that \"van\" is a vv, because it affects the sort order<br>\n<strong>fewer</strong> systemy may care to know that \"de\" is a partner-vv,</p>\n<p>if we'd model this as<br>\nvv= \"van\" (the general/primary extension)<br>\npartner-vv=\"de\" (the specialized extension)</p>\n<p>Both systems could get the information they need.</p>\n<p>But if \"van\" is also modeled as a specialized extension (or nested under a specialized maiden-extension)<br>\nmaiden-vv=\"van\"<br>\npartner-vv=\"de\"<br>\nthen the unspecialized system can't extract the information it needs anymore.</p>\n<p>The question is whether the assumption that \"birth name\" = \"primary name\" is legal in Alexander's example...</p>",
        "id": 153855565,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478288807
    },
    {
        "content": "<p>Maybe we shoud skip this discussion and leave the decision about nesting and naming the extensions to the national affiliates. What's more important to me is that we have a globally agreed upon understanding of how and when a family name should be deconstructed into individual parts and how that  affects search and display of the name...</p>",
        "id": 153855567,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478289429
    },
    {
        "content": "<p>I haven't felt as though we're on a path towards such an understanding here</p>",
        "id": 153855568,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478289532
    },
    {
        "content": "<p>If we agree that name extensions should be flat or nested string-types and the core family-attribute should hold the full family name with all of it's parts in correct order, I don't see a problem with display and search, even for systems that ignore all extensions or for Patients crossing borders.</p>\n<p>But in consequence, most national profiles might choose to constrain the cardinality of family to ..1 in order to prevent confusion about where the parts of the name go and to prevent the issues with search and spacing/delimiters discussed earlier in this thread.</p>\n<p>If, on the other hand, we prefer the qualifier approach of the ISO-Extension, resulting in deconstructed names, implementations will have to handle search and display differently.</p>\n<p>If there is no international agreement to prefer the former or the latter approach for extending name, even the core family attribute may cause interoperability issues if Patient resources are shared across borders.</p>",
        "id": 153855572,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478290561
    },
    {
        "content": "<p>The spec says </p>\n<blockquote>\n<p>For family name, hyphenated names such as \"Smith-Jones\" are a single name, but names with spaces such as \"Smith Jones\" are broken into multiple parts.</p>\n</blockquote>\n<p>Sticking to this rule makes it impossible to use the ISO-Extension to qualify the parts of a hyphenated name and it gives interesting results when applying that rule to our favourite example \"van Wijk-de Boer\".</p>",
        "id": 153855952,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478604003
    },
    {
        "content": "<p>what wording would you propose then? </p>",
        "id": 153855954,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478604502
    },
    {
        "content": "<p>I am currently wondering if it makes sense to generally prefer placing the whole name in family (regardless of spelling) and only break out individual parts into extensions, if the they need to be qualified as \"birth name\", \"spouse name\" , \"nobility\", \"voorvoegsel\" etc.</p>",
        "id": 153855963,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478607348
    },
    {
        "content": "<p>That way, extensions could be applied to hyphenated and non-hyphenated names in the same mannor, the complexity of search would be reduced and systems had only one field to look for the correct and complete representation of the family name.</p>",
        "id": 153855964,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478607820
    },
    {
        "content": "<p>What's the benefit of <br>\n&lt;family value=\"Smith\"&gt;<br>\n&lt;family value=\"Jones\"&gt;<br>\ncompared to <br>\n&lt;family value=\"Smith Jones\"&gt;<br>\n?</p>",
        "id": 153855965,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478608414
    },
    {
        "content": "<p>I don't get why we need a single approach? Why not just do what makes the most sense for the given cultural context (i.e. one name for english/dutch/german/etc and two names for spanish)</p>",
        "id": 153855966,
        "sender_full_name": "James Agnew",
        "timestamp": 1478608600
    },
    {
        "content": "<p>If you join both names into a single string, you can't search by \"second last name\", which is something no English-hyphenated-lastname people would ever do, but is common practice in Spanish speaking countries.</p>",
        "id": 153855967,
        "sender_full_name": "James Agnew",
        "timestamp": 1478608703
    },
    {
        "content": "<p>V2 didn't have repeatable family names. How were spanish names handled there? <br>\nI'd say using :contains modifier when searching for second last name is easier to implement than splitting the search words up and matching them against multiple iterations of family...?</p>",
        "id": 153856037,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478633937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191839\">@diego kaminker</span> can you comment? We're not getting any spanish input here...</p>",
        "id": 153856063,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478639934
    },
    {
        "content": "<p>We had the same discussion for Spanish names when we wanted to implement V2.x and CDA. For v2.x some countries used Mother Maiden Name or other 'inventions'. For CDA R2 what I've taught was: First name goes in the first &lt;given&gt; second name goes in the second &lt;given&gt; and this was generally accepted but it would be good to have some kind of 'signal' to really know this regardless of the XML document order. Do not really know which is 'document order' in JSON, if there is such thing...so we could have problems...and may end up creating something (extension?) to slice the different names precisely. In my last FHIR IG I used our current logic (First is first, second is second, who is in third?)...but names where ancillary attributes (the sliced, hard one was the identifier). But given this discussion I may have to revise.. Here was your Spanish input, in English.</p>",
        "id": 153856067,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478640443
    },
    {
        "content": "<p>thanks. do you mean &lt;family&gt; not &lt;given&gt;? </p>",
        "id": 153856069,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478640640
    },
    {
        "content": "<p>On the 'reality check' side: in a lot of Spanish countries people has two to three given names and one to three family names. Two of each is very common. Two family names is LAW in some countries</p>",
        "id": 153856070,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478640658
    },
    {
        "content": "<p>there is no order of properties in JSON, but there is order in arrays, so we are fine in JSON</p>",
        "id": 153856071,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478640681
    },
    {
        "content": "<p>Both. You can have several given and several family names </p>",
        "id": 153856072,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478640685
    },
    {
        "content": "<p>This is a part of the law in my country (may be different in other countries)</p>",
        "id": 153856073,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478640947
    },
    {
        "content": "<p>Chap. 11: Surnames</p>\n<p>When the parents request the inscription of the born with the surname composed of the father or the paternal and the maternal, in all cases, when the birth certificate is drawn up in the Circumscriptions, the following formula shall be recorded at the bottom of the record: \"If Inscribes the compound name of the born at the request of the parents \"<br>\nFor the purposes of the application of art. 4¼ of Law 18248, the surname composed of the parents will be considered one, provided that it is proven that its use comes from time immemorial.<br>\nThe surname of the grandparents will not be added unless the parents have added or request the same in their own minutes simultaneously.</p>",
        "id": 153856074,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478640950
    },
    {
        "content": "<p>And you cannot register more than three &lt;given&gt;</p>",
        "id": 153856075,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478640982
    },
    {
        "content": "<p>ok. so Spanish are using multiple surnames. But Simone does present an interesting idea that could be made to work:<br>\n- change family name to 0..1<br>\n- replace the ISO 21090 extension with something a bit more focused that allows you to additionally provide a break-down of the single family name<br>\n- it would be complex extension with code + string, where code is something like nobility prefix, vervoegsel, spouse name, spouse vervoegsel<br>\n- provide search guidance around use of names for Dutch, German, Spanish</p>",
        "id": 153856076,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478641119
    },
    {
        "content": "<p>So when mapping a family name into a FHIR resource, you'd split up by whitespace and place the parts into iterations of family? <br>\n(assuming the current situation with family 0..*)</p>",
        "id": 153856077,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478641121
    },
    {
        "content": "<p>though you could argue that taht extension might be core element</p>",
        "id": 153856078,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478641152
    },
    {
        "content": "<p>Most 'non-legacy' systems have a specific place for First, Second Family and Given so parsing is not needed (well...second...third given are all in 'second'). I don´t know systems with a free part1,part2....partn structure of the names - maybe there are some...</p>",
        "id": 153856080,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478641324
    },
    {
        "content": "<p>But again, some way to know 'this is the first' 'this is the second' other than document order may be welcome for clarity sake</p>",
        "id": 153856081,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478641360
    },
    {
        "content": "<p>And a lot of times I have to face systems with only one field for given and family or only one field for given and two for family names, so you cannot really trust they will be able to split for storage or queries</p>",
        "id": 153856083,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478641522
    },
    {
        "content": "<p>But we can give the chance to do it properly if they support that</p>",
        "id": 153856084,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478641540
    },
    {
        "content": "<p>How do you normally  <strong>search</strong> for family names? do you have individual search boxes for first/second family name or just one search box and you try to match against any part of the family name?</p>",
        "id": 153856085,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478641721
    },
    {
        "content": "<p>Modern systems: separate search boxes. Legacy systems: only one box . Usually you would also indicate other demographics if the name is too common, example 'José Lopez' can bring hundreds of records, it's like 'John Smith'. So you would add Birth Date. In closed systems I can just ask for the last name (min. 3 letters) and build the selection from there. </p>",
        "id": 153856086,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478641896
    },
    {
        "content": "<p>Ok, assuming the guy's family name(s) was \"Kaminker Lopez\":<br>\nthe way it is now with FHIR, searching for \\Patient?family=Kaminker%20Lopez would return 0 results, searching for \\Patient?family=Kaminker&amp;family=Lopez would return both \"Kaminker Lopez\" and \"Lopez Kaminker\".<br>\nIs that working for you?</p>",
        "id": 153856092,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478642308
    },
    {
        "content": "<p>Both are controversial...I will search for Kaminker and refine afterwards :) but I am very tricky</p>",
        "id": 153856093,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478642463
    },
    {
        "content": "<p>Most systems would expect that searching for \"Kaminker Lopez\" should work</p>",
        "id": 153856094,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478642487
    },
    {
        "content": "<p>That's how we usually handle it even if our different name parts are stored in different columns</p>",
        "id": 153856095,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478642557
    },
    {
        "content": "<p>which underlines that spanish search is different to international search - that will always be less clever</p>",
        "id": 153856097,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478642943
    },
    {
        "content": "<p>Just an FYI, the W3C has some tips when it comes to person names, however they also don't have the one solution. <a href=\"https://www.w3.org/International/questions/qa-personal-names\" target=\"_blank\" title=\"https://www.w3.org/International/questions/qa-personal-names\">https://www.w3.org/International/questions/qa-personal-names</a></p>",
        "id": 153856108,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1478644225
    },
    {
        "content": "<p>If we were to <strong>always</strong> split names at whitespace, and <strong>only</strong> at whitespace we could get consistent behaviour for display and search across the board. However, splitting at white space will in many cases not reflect the \"logical\" parts of the name.<br>\n(Think: van Weijk-de Boer). The logical splitting (along with the qualifying) would need to go into (national) extensions. Could that be a solution that fits most use cases?</p>",
        "id": 153856171,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478679182
    },
    {
        "content": "<p>ex: (simplified representation of extensions)</p>\n<div class=\"codehilite\"><pre>&lt;family value =&quot;van&quot;/&gt;\n&lt;family value =&quot;Weijk-de&quot;/&gt;\n&lt;family value =&quot;Boer&quot;/&gt;\n&lt;birthname-extension value=&quot;van Weijk&quot;/&gt;\n&lt;spousename-extension value=&quot;de Boer&quot;/&gt;\n</pre></div>",
        "id": 153856172,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478679378
    },
    {
        "content": "<p>This however rules out the ISO-Extension to add qualifiers to the name parts, since the parts have no special meaning. </p>",
        "id": 153856173,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478679592
    },
    {
        "content": "<p>For the Spanish names this would mean that -if a single name part contains whitespace (not sure if that is a thing in spanish names-, you'd get an extra iteration of family.<br>\nex. \"van Kaminker Lopez\"</p>\n<div class=\"codehilite\"><pre>&lt;family value =&quot;van&quot;/&gt;\n&lt;family value =&quot;Kaminker&quot;/&gt;\n&lt;family value =&quot;Lopez&quot;/&gt;\n&lt;first-family-extension value=&quot;van Kaminker&quot;/&gt;\n&lt;second-family-extension value=&quot;Lopez&quot;/&gt;\n</pre></div>",
        "id": 153856174,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478679782
    },
    {
        "content": "<p>There are some Spanish last names with whitespace, like in \"Alfredo De María\" where last name is \"De María\"</p>",
        "id": 153856203,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478696102
    },
    {
        "content": "<p>Last suggestion is good but implies 'writing twice' the names. Not sure it will be loved by the developers</p>",
        "id": 153856205,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478696217
    },
    {
        "content": "<p>not at first look, but once you consider the full range of activities, it's appeal starts to show</p>",
        "id": 153856206,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478696379
    },
    {
        "content": "<p>They will expect something along the lines of</p>",
        "id": 153856207,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478696547
    },
    {
        "content": "<p>&lt;family which-one=\"this one is the first family\" value=\"First Family\"/&gt;</p>",
        "id": 153856209,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478696580
    },
    {
        "content": "<p>But obviously is not possible so let's move with this if possible. I will consult with Fernando too and some other colleagues to see what they think</p>",
        "id": 153856210,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478696635
    },
    {
        "content": "<p>This is too much overhead I think but I am not sure:  &lt;family&gt; &lt;class value=\"first\"/&gt; &lt;value value=\"the first family name\"/&gt; &lt;/family&gt; (class or whatever name you name it, and with whichever code binding strenght you define it)</p>",
        "id": 153856211,
        "sender_full_name": "diego kaminker",
        "timestamp": 1478696940
    },
    {
        "content": "<p>Thing is: if the logic for splitting the names into parts is not computable, theres no way to implement search.<br>\nIf you split the names in a computable way (by whitespace)<br>\nfamily=Alfredo<br>\nfamily=De<br>\nfamily=Maria<br>\nand you use the same logic to split search terms (by whitespace)<br>\nSearch for \"Alfredo De Maria\"would be sent to the Server as /Patient?family=Alfredo&amp;family=De&amp;family=Maria <br>\nand you' d get a match.</p>\n<p>If you split by non-computable rules<br>\nfamily=Alfredo<br>\nfamily=De Maria<br>\nthen how do you encode the Search for \"Alfredo De Maria\"?<br>\n/Patient?family=Alfredo&amp;family=De&amp;family=Maria  won't match,<br>\nneither will /Patient?family=Alfredo%20De%20Maria <br>\nonly /Patient?family=Alfredo&amp;family=De%20Maria will return a match. But there's no way you can compute that.</p>",
        "id": 153856212,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478697077
    },
    {
        "content": "<p>I found disturbing wording in the FHIR base spec that says: \"The parts of a name SHOULD NOT contain whitespace. For family name, hyphenated names such as \"Smith-Jones\" are a single name, but names with spaces such as \"Smith Jones\" are broken into multiple parts.\" Source: <a href=\"http://hl7.org/fhir/datatypes.html#HumanName\" target=\"_blank\" title=\"http://hl7.org/fhir/datatypes.html#HumanName\">http://hl7.org/fhir/datatypes.html#HumanName</a>. I also found relevant examples: <a href=\"http://hl7.org/fhir/datatypes-examples.html#HumanName\" target=\"_blank\" title=\"http://hl7.org/fhir/datatypes-examples.html#HumanName\">http://hl7.org/fhir/datatypes-examples.html#HumanName</a></p>\n<div class=\"codehilite\"><pre>&lt;name&gt;\n    &lt;use value=&quot;official&quot; /&gt;\n    &lt;family value=&quot;van&quot;&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot; &gt;\n            &lt;valueCode value=&quot;VV&quot; /&gt;\n        &lt;/extension&gt;\n    &lt;/family&gt;\n    &lt;family value=&quot;Hentenryck&quot; /&gt;\n    &lt;given value=&quot;Karen&quot; /&gt;\n&lt;/name&gt;\n</pre></div>\n\n\n<p>I have updated our current profiles to look more like the V2 datatype FN did:</p>\n<div class=\"codehilite\"><pre>&lt;exampleHumanName&gt;\n    &lt;family value=&quot;Jongeneel-de Haas&quot;&gt;\n        &lt;extension url=&quot;http://fhir.nl/fhir/StructureDefinition/nl-core-humanname-family-maiden&quot;&gt;\n            &lt;valueString value=&quot;Jongeneel&quot; /&gt;\n        &lt;/extension&gt;\n        &lt;extension url=&quot;http://fhir.nl/fhir/StructureDefinition/nl-core-humanname-family-partner-prefix&quot;&gt;\n            &lt;valueString value=&quot;de &quot; /&gt;\n        &lt;/extension&gt;\n        &lt;extension url=&quot;http://fhir.nl/fhir/StructureDefinition/nl-core-humanname-family-partner&quot;&gt;\n            &lt;valueString value=&quot;Haas&quot; /&gt;\n        &lt;/extension&gt;\n        &lt;extension url=&quot;http://fhir.nl/fhir/StructureDefinition/nl-core-humanname-family-name-assembly&quot;&gt;\n            &lt;valueCode value=&quot;NL4&quot; /&gt;\n        &lt;/extension&gt;\n    &lt;/family&gt;\n    &lt;given value=&quot;Irma&quot;&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot;&gt;\n            &lt;valueCode value=&quot;CL&quot; /&gt;\n        &lt;/extension&gt;\n    &lt;/given&gt;\n    &lt;given value=&quot;I.&quot;&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot;&gt;\n            &lt;valueCode value=&quot;IN&quot; /&gt;\n        &lt;/extension&gt;\n    &lt;/given&gt;\n&lt;/exampleHumanName&gt;\n</pre></div>\n\n\n<p>Should we finalize our proposal at the DevDays? We are nearing implementation phase and I'd hate to have loose ends here.</p>",
        "id": 153856305,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478774579
    },
    {
        "content": "<p>The alternative is:</p>\n<div class=\"codehilite\"><pre>&lt;exampleHumanName&gt;\n    &lt;extension url=&quot;http://fhir.nl/fhir/StructureDefinition/nl-core-humanname-family-name-assembly&quot;&gt;\n        &lt;valueCode value=&quot;NL4&quot; /&gt;\n    &lt;/extension&gt;\n    &lt;family value=&quot;Jongeneel&quot;&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot;&gt;\n            &lt;valueCode value=&quot;BR&quot; /&gt;\n        &lt;/extension&gt;\n    &lt;/family&gt;\n    &lt;family value=&quot;de&quot;&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot;&gt;\n            &lt;valueCode value=&quot;VV&quot; /&gt;\n        &lt;/extension&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot;&gt;\n            &lt;valueCode value=&quot;SP&quot; /&gt;\n        &lt;/extension&gt;\n    &lt;/family&gt;\n    &lt;family value=&quot;Haas&quot;&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot;&gt;\n            &lt;valueCode value=&quot;SP&quot; /&gt;\n        &lt;/extension&gt;\n    &lt;/family&gt;\n    &lt;given value=&quot;Irma&quot;&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot;&gt;\n            &lt;valueCode value=&quot;CL&quot; /&gt;\n        &lt;/extension&gt;\n    &lt;/given&gt;\n    &lt;given value=&quot;I.&quot;&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot;&gt;\n            &lt;valueCode value=&quot;IN&quot; /&gt;\n        &lt;/extension&gt;\n    &lt;/given&gt;\n&lt;/exampleHumanName&gt;\n</pre></div>\n\n\n<p>Note: NL4 means: maiden name followed by name partner</p>",
        "id": 153856306,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478774897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191375\">@Alexander Henket</span> Your first proposal means that your last name would be serialized as:</p>\n<div class=\"codehilite\"><pre><span></span>&lt;family value=&quot;Henket&quot;&gt;\n    &lt;extension url=&quot;http://fhir.nl/fhir/StructureDefinition/nl-core-humanname-family-maiden&quot;&gt;\n        &lt;valueString value=&quot;Henket&quot; /&gt;\n    &lt;/extension&gt;\n&lt;/family&gt;\n</pre></div>\n\n\n<p>which looks redundant, and that for all Dutch (and other) names without complicated issues like marriage or Napoleon-era prefixes.</p>\n<p>The second one would serialize your last name as:</p>\n<div class=\"codehilite\"><pre><span></span>&lt;family value=&quot;Henket&quot;&gt;\n    &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot;&gt;\n        &lt;valueCode value=&quot;BR&quot;/&gt;\n    &lt;/extension&gt;\n&lt;/family&gt;\n</pre></div>\n\n\n<p>which seems more frugal, and one could even argue that \"BR\" is not needed when birthname=familyname, so we could serialize you (well, your last name) as:</p>\n<div class=\"codehilite\"><pre><span></span>&lt;family value=&quot;Henket&quot;/&gt;\n</pre></div>\n\n\n<p>A design principle is \"make easy things easy, and hard things possible\", and the first solution clearly violates the first clause, while both accomodate the second.</p>",
        "id": 153856339,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1478789993
    },
    {
        "content": "<p>I think it is dangerous to say \"when you don't specify the type of family name, it shall be a birth name\"</p>",
        "id": 153856340,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478790201
    },
    {
        "content": "<p>My thinking is: when you don't specify the type, it is unknown.</p>",
        "id": 153856341,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478790305
    },
    {
        "content": "<p>I'd be happy to sit down next week at DevDays with all those present and interested to see if we can draw a common proposal - I certainly agree that things are complicated, and no solution will cover all use cases.</p>",
        "id": 153856342,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1478790323
    },
    {
        "content": "<p>I'm in</p>",
        "id": 153856343,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478790343
    },
    {
        "content": "<p>Me too ;-)</p>",
        "id": 153856344,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1478790357
    },
    {
        "content": "<blockquote>\n<p>I think it is dangerous to say \"when you don't specify the type of family name, it shall be a birth name\"</p>\n</blockquote>\n<p>I didn't say that.  I said if birthname=familyname, one could omit the BR name.</p>",
        "id": 153856346,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1478790568
    },
    {
        "content": "<p>Well maybe you didn't mean that, but that is sure what it says... :-)</p>",
        "id": 153856348,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478790728
    },
    {
        "content": "<p>... if you look at it in reverse, true</p>",
        "id": 153856349,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1478790761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191354\">@Rien Wertheim</span> we definitely want a session on this subject at DevDays. perhaps we can schedule this over the working dinner on Wed evening? </p>",
        "id": 153856429,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478815175
    },
    {
        "content": "<p>@simone heckmann: it will sure help if we can have some sheets that compresses our discussion into a digestible form. Can/will you or shall I take a stab?</p>",
        "id": 153856535,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478876091
    },
    {
        "content": "<p>hi. i now got some time again for this topic. I'll create some slides about this topic summarizing this discussion and the corelating discussion in the german stream</p>",
        "id": 153856674,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1478966952
    },
    {
        "content": "<p>should be done by monday and i'll post the draft when it's ready?</p>",
        "id": 153856675,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1478967266
    },
    {
        "content": "<p>Great! Thanks already <span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span> </p>",
        "id": 153856676,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1478968670
    },
    {
        "content": "<p>thx</p>",
        "id": 153856708,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479034571
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span> ! </p>",
        "id": 153856838,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1479127621
    },
    {
        "content": "<p>i just uploaded some slides which try to condense the discussion:<br>\n<a href=\"https://drive.google.com/file/d/0B3xFZMHgJ7j0Qlk4akJHMW01c28/view?usp=sharing\" target=\"_blank\" title=\"https://drive.google.com/file/d/0B3xFZMHgJ7j0Qlk4akJHMW01c28/view?usp=sharing\">https://drive.google.com/file/d/0B3xFZMHgJ7j0Qlk4akJHMW01c28/view?usp=sharing</a></p>",
        "id": 153857116,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1479275711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> is there already a timeslot for the discussion?</p>",
        "id": 153857117,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1479275728
    },
    {
        "content": "<p>well, I think we said we'd talk about this over dinner</p>",
        "id": 153857145,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479286258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> is that the best arrangement?</p>",
        "id": 153857146,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479286272
    },
    {
        "content": "<p>ok i'll search for you at 6pm in the dining area</p>",
        "id": 153857156,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1479287396
    },
    {
        "content": "<p>it's a little after 6pm. We should do this in Richard once we all have food.....</p>",
        "id": 153857322,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479316068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span> Good summary of the discussion.</p>",
        "id": 153857326,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1479316628
    },
    {
        "content": "<p>Thanks, everyone at the DevDays for the great discussion! I withdrew <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12310\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12310\">GF#12310</a> in favor of the proposal  to create dedicated \"flat\" extensions for the most common family name parts and maintain the HumanName.family attribute as a single go-to field for the complete family name to search and display.</p>",
        "id": 153857352,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1479326080
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12351\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12351\">GF#12351</a></p>",
        "id": 153857355,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479327139
    },
    {
        "content": "<p>What a day to remember ;-) <img alt=\":thumbs_up:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/thumbs_up.png\" title=\":thumbs_up:\"> </p>",
        "id": 153857382,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1479332161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191450\">@Simone Heckmann</span> <span class=\"user-mention\" data-user-id=\"191839\">@diego kaminker</span> <span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span> <span class=\"user-mention\" data-user-id=\"191375\">@Alexander Henket</span> <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> I am about to commit these changes. Please review them:<br>\n - changes to definition of humanName<br>\n- changes to examples<br>\n- definition of 7 new extensions</p>",
        "id": 153858099,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479795882
    },
    {
        "content": "<p>Thanks Grahame, we will discuss this internally but from my point of view, it looks good!<br>\nWhere does the updated description of the behaviour of search on HumanName.family go? This hasn't been deployed yet, or am I just not seeing it?</p>",
        "id": 153858134,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1479826481
    },
    {
        "content": "<p>Oh wait, it's pretty much in the \"It is at the discretion of the server ...\" paragraph in <a href=\"http://build.fhir.org/search.html#string\" target=\"_blank\" title=\"http://build.fhir.org/search.html#string\">http://build.fhir.org/search.html#string</a>.<br>\nI was looking at the description of the family search parameter on the Patient resource page. But maybe an additional sentence there to emphasize the importance of a modified search behavior for family names (matching after whitespace/delimiters also) could help to alert implementers?</p>",
        "id": 153858136,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1479826818
    },
    {
        "content": "<p>Is the Scandinavian example still correct? Mother's family name, Ostlund, is coded as a given name? (My Scandinavian is non existant, so I'm also not sure if Mellannamn, mellomnamn, and mellom navn are the same.)</p>",
        "id": 153858153,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1479833996
    },
    {
        "content": "<p>Does own-name/partner-name include the prefix?</p>",
        "id": 153858154,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1479834035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <br>\n- I think the Karen van Hentenryck example  is not correct yet. I think \"VV\" should be \"van \" (<a href=\"http://build.fhir.org/datatypes-examples.html#HumanName\" target=\"_blank\" title=\"http://build.fhir.org/datatypes-examples.html#HumanName\">http://build.fhir.org/datatypes-examples.html#HumanName</a>). Likely in that same example, if you split out the voorvoegsel, you will most certainly also split out the family name part too.</p>\n<ul>\n<li>\n<p><a href=\"http://build.fhir.org/valueset-name-assembly-order.html\" target=\"_blank\" title=\"http://build.fhir.org/valueset-name-assembly-order.html\">http://build.fhir.org/valueset-name-assembly-order.html</a> looks ok to me, but when the extension now says \"own name\" for the same concept that the NLx codes refer to as \"maiden name\" then it is probably best to align them. In Dutch we call it \"Geslachtsnaam\".</p>\n</li>\n<li>\n<p>You now have two ways of saying the same using the iso21090-EN-qualifier extension. ISO21090 \"VV BR\" equates to the humanname-own-prefix extension. Not sure yet how to avoid two types of solutions. Strip VV BR SP from the ValueSet?</p>\n</li>\n</ul>",
        "id": 153858157,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1479835638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>   seems OK, just one question for confirmation, and 2 suggestions on examples:<br>\nQuestion: I assume we can repeat extensions in any sequence, right? E.g. Mother's family name is \"Mother1 Mother2\", Father's family name is \"Father1 Father2\" --&gt; child may get not \"Mother2 Father2\", but \"Father1 Mother2 Father2\".</p>\n<p>Changes to examples (I can commit but I am struggling with SVN and have not worked with examples, so I may break something. let me know if i should do it):</p>\n<p>1. Replace <br>\n&lt;family value=\"Eduardo Santos Tavares Melo Silva\" /&gt;   &lt;given value=\"José\" /&gt;<br>\nwith <br>\n &lt;family value=\"Santos Tavares Melo Silva\" /&gt;   &lt;given value=\"José Eduardo\" /&gt;</p>\n<p>2. in the example below, replace \"Carlos\" by \"Sanches\" - Carlos is not seen as a family name (it's possible, but confusing).<br>\n&lt;name&gt;<br>\n  &lt;family value=\"Costa Teixeira <strong>Carlos</strong>\" &gt;<br>\n    &lt;extension url=\"<a href=\"http://hl7.org/fhir/StructureDefinition/humanname-fathers\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/humanname-fathers\">http://hl7.org/fhir/StructureDefinition/humanname-fathers</a>\"&gt;<br>\n        &lt;valueString value=\"Costa\" /&gt;<br>\n    &lt;/extension&gt;<br>\n    &lt;extension url=\"<a href=\"http://hl7.org/fhir/StructureDefinition/humanname-mothers\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/humanname-mothers\">http://hl7.org/fhir/StructureDefinition/humanname-mothers</a>\"&gt;<br>\n        &lt;valueString value=\"Teixeira\" /&gt;<br>\n    &lt;/extension&gt;<br>\n    &lt;extension url=\"<a href=\"http://hl7.org/fhir/StructureDefinition/humanname-partners-name\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/humanname-partners-name\">http://hl7.org/fhir/StructureDefinition/humanname-partners-name</a>\"&gt;<br>\n        &lt;valueString value=\"<strong>Carlos</strong>\" /&gt;<br>\n    &lt;/extension&gt;<br>\n  &lt;/family&gt;<br>\n  &lt;given value=\"Manuel\" /&gt;<br>\n&lt;/name&gt;</p>",
        "id": 153858214,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1479891819
    },
    {
        "content": "<p>Another slightly incorrect example:<br>\nThe \"Complex example from Germany\" at <a href=\"http://build.fhir.org/datatypes-examples.html#HumanName\" target=\"_blank\" title=\"http://build.fhir.org/datatypes-examples.html#HumanName\">http://build.fhir.org/datatypes-examples.html#HumanName</a> ) uses <a href=\"http://hl7.org/fhir/StructureDefinition/humanname-own-prefix\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/humanname-own-prefix\">http://hl7.org/fhir/StructureDefinition/humanname-own-prefix</a> for \"Gräfin\". But \"Gräfin\" would be covered by a national extension.<br>\nSo better change the example to \"Dr.phil. Regina Johanna Maria <strong>von</strong> Hochheim-Weilenfels, NCFSA\" with the \"von\" in the humanname-own-prefix extension.</p>",
        "id": 153858236,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1479893930
    },
    {
        "content": "<p>I just had a look at the examples: It seems that the discussed extensions: <a href=\"http://hl7.org/fhir/StructureDefinition/family-plain\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/family-plain\">http://hl7.org/fhir/StructureDefinition/family-plain</a> &amp; <a href=\"http://hl7.org/fhir/StructureDefinition/maiden-plain\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/maiden-plain\">http://hl7.org/fhir/StructureDefinition/maiden-plain</a> are currently not used in the german example or elsewhere.</p>",
        "id": 153858319,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1479918305
    },
    {
        "content": "<p>they were included in this example:</p>\n<div class=\"codehilite\"><pre><span></span>(German version)\n    <span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van Wijk-de Boer&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/family-voorvoegsel&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/family-plain&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Wijk-de Boer&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n\n(Dutch version)\n     <span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van Wijk-de Boer&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/family-voorvoegsel&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n     <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/maiden-voorvoegsel&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;de&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/family-plain&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Wijk&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n      <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/maiden-plain&quot;</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Boer&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"191436\">@Stefan Lang</span> just pointed me towards own-family-name, and partners-family name. Which are basically the same.</p>",
        "id": 153858326,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1479918972
    },
    {
        "content": "<p>so it would look like this: ?</p>\n<div class=\"codehilite\"><pre><span class=\"nt\">&lt;name&gt;</span>\n  <span class=\"nt\">&lt;use</span> <span class=\"na\">value=</span><span class=\"s\">&quot;official&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;von Hochheim-Weilenfels&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/humanname-own-prefix&quot;</span> <span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;von&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/family-own-plain&quot;</span> <span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Hochheim-Weilenfels&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n  <span class=\"nt\">&lt;/family&gt;</span>\n  <span class=\"nt\">&lt;given</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Regina&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;given</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Johanna&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;given</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Maria&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;prefix</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Dr. phil.&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier&quot;</span> <span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;valueCode</span> <span class=\"na\">value=</span><span class=\"s\">&quot;AC&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n  <span class=\"nt\">&lt;/prefix&gt;</span>\n  <span class=\"nt\">&lt;suffix</span> <span class=\"na\">value=</span><span class=\"s\">&quot;NCFSA&quot;</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/name&gt;</span>\n<span class=\"nt\">&lt;name&gt;</span>\n  <span class=\"nt\">&lt;use</span> <span class=\"na\">value=</span><span class=\"s\">&quot;maiden&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Hochheim&quot;</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/name&gt;</span>\n</pre></div>",
        "id": 153858328,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1479919336
    },
    {
        "content": "<p>more like:</p>\n<div class=\"codehilite\"><pre>...\n  <span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;von Hochheim-Weilenfels&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/humanname-own-prefix&quot;</span> <span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;von&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/humanname-own-name&quot;</span> <span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Hochheim-Weilenfels&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n  <span class=\"nt\">&lt;/family&gt;</span>\n...\n</pre></div>",
        "id": 153858332,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1479920465
    },
    {
        "content": "<p>yeah that's better <span class=\"user-mention\" data-user-id=\"191436\">@Stefan Lang</span> but the point was, that the examples didn't include the plain family names</p>",
        "id": 153858382,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1479978135
    },
    {
        "content": "<p>That's true. The humanname-own-name should be included in the \"complex German example\", just as Alexander mentioned it earlier for the Dutch example.</p>",
        "id": 153858383,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1479978928
    },
    {
        "content": "<p>now it's committed</p>",
        "id": 153858413,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480004118
    },
    {
        "content": "<p>hmm. looks like the comment that was meant to followed got lost while on board my flight</p>",
        "id": 153858414,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480004160
    },
    {
        "content": "<p>I fixed all the identified issues. </p>",
        "id": 153858415,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480004166
    },
    {
        "content": "<p>please wait for version 10255+ and check it again</p>",
        "id": 153858416,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480004181
    },
    {
        "content": "<p>just checked revision 10260 - the german example is correct now - the dutch example is missing the humanname-own-name extension.<br>\nFixed dutch example:</p>\n<div class=\"codehilite\"><pre><span class=\"nt\">&lt;name&gt;</span>\n  <span class=\"nt\">&lt;use</span> <span class=\"na\">value=</span><span class=\"s\">&quot;official&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;family</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van Hentenryck&quot;</span> <span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/humanname-own-prefix&quot;</span> <span class=\"nt\">&gt;</span>\n       <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;van&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span>\n <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/humanname-own-name&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Hentenryck&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/extension&gt;</span> \n  <span class=\"nt\">&lt;/family&gt;</span>\n  <span class=\"nt\">&lt;given</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Karen&quot;</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/name&gt;</span>\n</pre></div>",
        "id": 153858472,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1480072436
    },
    {
        "content": "<p>well, i do not think that it's necessary to add that, but in the interests of completeness, I have</p>",
        "id": 153858488,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480080376
    },
    {
        "content": "<p>i think it is good for completeness, to get an  idea how these extensions are working together</p>",
        "id": 153858499,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1480081994
    }
]