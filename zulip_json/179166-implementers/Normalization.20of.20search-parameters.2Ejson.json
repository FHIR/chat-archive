[
    {
        "content": "<p>We are using search-parameters.json as a base for generating search filter pages in the UI. So far so good with one exception. I will use the following case, trimmed for the sake of simplicity:</p>\n<div class=\"codehilite\"><pre><span></span>      &quot;resource&quot; : {\n          &quot;resourceType&quot; : &quot;SearchParameter&quot;,\n          &quot;id&quot; : &quot;medications-code&quot;,\n          &quot;url&quot; : &quot;http://hl7.org/fhir/SearchParameter/medications-code&quot;,\n          &quot;name&quot; : &quot;code&quot;,\n          &quot;date&quot; : &quot;2018-07-05T19:08:58+00:00&quot;,\n          &quot;description&quot; : &quot;Multiple Resources: \\r\\n\\r\\n* [Medication](medication.html): Codes that identify this medication\\r\\n* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code\\r\\n* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code\\r\\n* [MedicationStatement](medicationstatement.html): Return statements of this medication code\\r\\n* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code\\r\\n&quot;,\n          &quot;code&quot; : &quot;code&quot;,\n          &quot;base&quot; : [&quot;Medication&quot;,\n              &quot;MedicationRequest&quot;,\n              &quot;MedicationAdministration&quot;,\n              &quot;MedicationStatement&quot;,\n              &quot;MedicationDispense&quot;],\n          &quot;type&quot; : &quot;token&quot;,\n          &quot;expression&quot; : &quot;Medication.code | MedicationRequest.medication.as(CodeableConcept) | MedicationAdministration.medication.as(CodeableConcept) | MedicationStatement.medication.as(CodeableConcept) | MedicationDispense.medication.as(CodeableConcept)&quot;,\n          &quot;xpath&quot; : &quot;f:Medication/f:code | f:MedicationRequest/f:medicationCodeableConcept | f:MedicationAdministration/f:medicationCodeableConcept | f:MedicationStatement/f:medicationCodeableConcept | f:MedicationDispense/f:medicationCodeableConcept | f:MedicationStatement/f:medicationCodeableConcept | f:MedicationRequest/f:medicationCodeableConcept | f:MedicationDispense/f:medicationCodeableConcept | f:MedicationAdministration/f:medicationCodeableConcept&quot;,\n          &quot;xpathUsage&quot; : &quot;normal&quot;\n      }\n</pre></div>\n\n\n<p>Here the parameter <code>medications-code</code> can be applied to several resource types,  as detailed in the <code>.base</code> <strong>array</strong>. Now the way  as <code>.description</code>, <code>.expression</code>and <code>.xpath</code>are formatted is inconsistent and not machine-friendly. I would easier and safer to process if they are arrays rather than using \\n and pipe separators.</p>",
        "id": 153988565,
        "sender_full_name": "Jaime Olivares",
        "timestamp": 1534539313
    },
    {
        "content": "<p>.expression and .xpath are both valid expressions that don't need any more processing than running in either and xpath or a fhirpath engine</p>",
        "id": 153988567,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534539447
    },
    {
        "content": "<p>I am focusing on the way they are formatted (with pipe) rather than a more json-ish way (array or even object), which is easier to consume. Now, regarding your comment that \"don't need any more processing than for xpath or fhirpath\", that's excluding  implementers looking for mining that information in new ways, and not only for the use-cases you have already considered.</p>",
        "id": 153988570,
        "sender_full_name": "Jaime Olivares",
        "timestamp": 1534539775
    },
    {
        "content": "<p>XPath and FHIRPath are languages.  The FHIR spec doesn't control how they look.  There's nothing \"JSON\" about them.  XPath doesn't even run on JSON instances...</p>",
        "id": 153988571,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1534539846
    },
    {
        "content": "<p>ok what kind of uses do you have in mind?</p>",
        "id": 153988572,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534539872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  We already do it: We use this file as an input for a form generator 'Filter Form' based on the resource type. It works pretty well.</p>",
        "id": 153988575,
        "sender_full_name": "Jaime Olivares",
        "timestamp": 1534539972
    },
    {
        "content": "<p>well, I do that too; that's an expected use. so I see the issue with description, which I don't mine into the form. but not the xpath or expression</p>",
        "id": 153988577,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534540066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> the json file can contain the information in any format. it can be x-path or fhirpath or <strong>something more agnostic</strong>. The array would  be more agnostic.<br>\nRegarding the <code>description</code>, I guest that verbose format does'n t correspond to any 'language'.</p>",
        "id": 153988578,
        "sender_full_name": "Jaime Olivares",
        "timestamp": 1534540077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> OK, let's start with <code>description</code>, I don't think it is defendable. Where would you show such a big text? It can be split into individual descriptions for each resource type.</p>",
        "id": 153988579,
        "sender_full_name": "Jaime Olivares",
        "timestamp": 1534540239
    },
    {
        "content": "<p>well, for form use, no, it's not suitable. It's documentation of the search parameter as a whole. I'm just looking at search parameter thinking about this</p>",
        "id": 153988581,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534540309
    },
    {
        "content": "<p>The markdown in these cases is highly controlled (all generated) so you can parse it. but that's pretty yuck. I could generate it differently to make it easier to parse but then it doesn't present nicely, and it's still yuck.</p>",
        "id": 153988582,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534540399
    },
    {
        "content": "<p>it's too late to add something to search parameter itself, but I could generate an extension for this</p>",
        "id": 153988583,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534540428
    },
    {
        "content": "<p>It can be an array of markdowns. Everybody happy.</p>",
        "id": 153988584,
        "sender_full_name": "Jaime Olivares",
        "timestamp": 1534540487
    },
    {
        "content": "<p>you'd still have to parse each to figure out which one you wanted.</p>",
        "id": 153988585,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534540521
    },
    {
        "content": "<p>I see two alternatives: An array with the size and order of the <code>.base</code> array, or an object with key=resourcetype, value=description_markdown</p>",
        "id": 153988586,
        "sender_full_name": "Jaime Olivares",
        "timestamp": 1534540615
    },
    {
        "content": "<p>An additional extension for \"Label\" would be useful for that to explicitly indicate that its a user interface label for the field.</p>",
        "id": 153988627,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534543990
    },
    {
        "content": "<p>I don't expect you'd need anything else?<br>\n(some of the servers generically implement their search systems based on the existing data - with the exception of the geo location stuff)<br>\nApart from choosing a specific UI label for the field(s) the only part not present is the layout/ordering, and don't know that is something that the server is responsible for. But could just assume that its the order on the capability statement.</p>",
        "id": 153988629,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534544145
    },
    {
        "content": "<p>that's how I render them</p>",
        "id": 153988632,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534544362
    },
    {
        "content": "<p>Please let me know if I can help on this.</p>",
        "id": 153989420,
        "sender_full_name": "Jaime Olivares",
        "timestamp": 1534738185
    }
]