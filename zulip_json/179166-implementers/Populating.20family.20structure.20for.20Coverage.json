[
    {
        "content": "<p>What API brings back all of the people associated with the specific coverage. Coverage seems to bring back the subscriber but not the list of additional members that would be associated with the policy.</p>",
        "id": 240235997,
        "sender_full_name": "Tate Enos",
        "timestamp": 1621970066
    },
    {
        "content": "<p>There are only two people associated with a Coverage: the subscriber and the beneficiary. If a subscriber policy covers multiple people there is different Coverage resource for each one of them</p>",
        "id": 240238667,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1621971341
    },
    {
        "content": "<p>So you can first fetch all the Coverages for a specific subscriber, and then you fetch the beneficiaries of those Coverages</p>",
        "id": 240238820,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1621971401
    },
    {
        "content": "<p>Coverage will only bring one beneficiary back as it is not an array.  Is there no way to bring back a list of all members or multiple beneficiaries that would be associated with the subscriber?  </p>\n<p>The goal is to bring back the subscriber and their associated family that would be members.</p>",
        "id": 240249905,
        "sender_full_name": "Tate Enos",
        "timestamp": 1621976634
    },
    {
        "content": "<p>Coverage allows a search by subscriber.  the bundle returned would have all of the subscriber/beneficiary Coverages</p>",
        "id": 240252635,
        "sender_full_name": "Scott Robertson",
        "timestamp": 1621978088
    },
    {
        "content": "<p>If 5 people are covered under the same member's policy, each will have a separate Coverage instance.  So you'd need to match based on the member id and then do an _include on the beneficiary to get the patients.</p>",
        "id": 240258393,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1621981782
    }
]