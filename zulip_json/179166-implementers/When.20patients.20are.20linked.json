[
    {
        "content": "<p>What is the expectation upon a query results (e.g. query on Observations) when the query includes a Patient resource, when that Patient is linked to another Patient resource (previously duplicate Patient resources)? There is mention in the compartment definition for Patient, that indicates that a Compartment on Patient that is linked results in the combination of both. <a href=\"http://build.fhir.org/compartmentdefinition-patient.html\" target=\"_blank\" title=\"http://build.fhir.org/compartmentdefinition-patient.html\">http://build.fhir.org/compartmentdefinition-patient.html</a><br>\nIs this same (same as compartment) expected of more normal query parameter 'patient' or 'subject'? Where is this clarified?</p>",
        "id": 154018615,
        "sender_full_name": "John Moehrke",
        "timestamp": 1542232054
    },
    {
        "content": "<p>it's not clarified, and would be a good connectathon subject for the patient stream , I think.</p>",
        "id": 154018659,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1542248421
    },
    {
        "content": "<p>seems like the FHIR federation is a peek at this.</p>",
        "id": 154018887,
        "sender_full_name": "John Moehrke",
        "timestamp": 1542300770
    },
    {
        "content": "<p>The way I read the specs is that a Patient Compartment does _not_ combine Patient that are linked :</p>",
        "id": 154018892,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1542301969
    },
    {
        "content": "<p>' all the records associated with the linked patient are in the compartment associated with the target of the link' - i.e. the records associated with the linked patient are in a _different_ compartment</p>",
        "id": 154018894,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1542301990
    },
    {
        "content": "<p>I vaguely remember asking this same question a long time ago (I think as a comment to the spec page), and that the answer was that Compartment is like a normal search: does not combine related Patients</p>",
        "id": 154018899,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1542302058
    },
    {
        "content": "<p>I read the text on the compartment for Patient to express that I get the combined results of all linked Patients. Thus one compartment is equivalent to another when the two are linked. So this text must be a confusing text:   \" When a patient is linked to another patient, all the records associated with the linked patient are in the compartment associated with the target of the link.\"</p>",
        "id": 154018909,
        "sender_full_name": "John Moehrke",
        "timestamp": 1542303716
    },
    {
        "content": "<p>which I figured was unreasonable magic... but I am happy if this is the understanding of the results a search on a Patient identity that has links to other Patient identity.</p>",
        "id": 154018910,
        "sender_full_name": "John Moehrke",
        "timestamp": 1542303813
    },
    {
        "content": "<p>The alternative, which I figured is more possible, is that EVERYONE doing a query of a Patient, must do equivilant queries on ALL of the links to that Patient in order to get the whole patient record.</p>",
        "id": 154018911,
        "sender_full_name": "John Moehrke",
        "timestamp": 1542303891
    },
    {
        "content": "<p>I think that text needs some work - linked how?</p>",
        "id": 154019043,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1542351434
    },
    {
        "content": "<p>clearly... magic...  Yes, if the text is not intended to imply magic, then it should not be said. Yet, the linked Patient data problem needs signficant work. That is the problem of what happens to the data when there are data recorded against two different Patient resources, after those two Patient resources are found to be the same patient and thus linked...  It would be nice to move the work to the server, and not expect every application to recognize a Patient has been linked (as in link/unlink/merge).</p>",
        "id": 154019232,
        "sender_full_name": "John Moehrke",
        "timestamp": 1542394189
    },
    {
        "content": "<p>I have created <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19687\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19687\">GF#19687</a> so that this can be a discussion for R5</p>",
        "id": 154020278,
        "sender_full_name": "John Moehrke",
        "timestamp": 1542824377
    },
    {
        "content": "<p>Here is my observation: We have Cerner and Epic and an MPI on top of it. I tried few queries in the EMRs with different MRNs for the same patient and I got the same record. From what I can see - both Epic and Cerner listen and handle merges pretty well so in essence they handle the cross linking logic themselves without the client knowing. Now, having said that - I believe in FHIR this would equal to all patient instances having all identifiers in them but it is clear that the expectation is that it “just works” from what I can see.</p>",
        "id": 154021052,
        "sender_full_name": "Veliyan Georgiev",
        "timestamp": 1543324202
    },
    {
        "content": "<p>I suspect there will be different behavior when the backend is a FHIR Server vs when the backend is a non-FHIR EHR. In an EHR it is common for linking to be recognized as logically the same thing. There is no problem with 'fixing up' old .patient or .subject elements. However in a FHIR Server this may not be true or possible.</p>",
        "id": 154021118,
        "sender_full_name": "John Moehrke",
        "timestamp": 1543341429
    },
    {
        "content": "<p>Yes, in the back the servers may be rewiring the subject patient properties. Also what would be expected where the link reference is external to another or old system?<br>\nWith the strength of audit/provenance could unlink easier than before.</p>",
        "id": 154021152,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1543351752
    },
    {
        "content": "<p>yes it is possible to do the fixup in a revision, mark that revision with Provenance as to why, and sign the Provenance proof of before and after to show integrity. complex, but possible.</p>",
        "id": 154021153,
        "sender_full_name": "John Moehrke",
        "timestamp": 1543351985
    },
    {
        "content": "<p>I thought a single merge audit that version referenced all the stuff that was merged in a single record, that could the do a roll back of all those...</p>",
        "id": 154022443,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1543830944
    },
    {
        "content": "<p>But yes, still not simple.</p>",
        "id": 154022444,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1543830955
    },
    {
        "content": "<p>How to indicate a link is less confusing then how a client app needs to behave (actions and expectations) when the patient has links... I suspect reality is that client apps must be very aware of patient links. I am not sure that server side fixup of .patient/subject is sufficient given the proliferation of records with old patient id; especially in a distributed network.</p>",
        "id": 154022506,
        "sender_full_name": "John Moehrke",
        "timestamp": 1543848597
    },
    {
        "content": "<p>Yes, especially in a distributed network.</p>",
        "id": 154022610,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1543873772
    },
    {
        "content": "<p>distributed ledger technology...</p>",
        "id": 154022630,
        "sender_full_name": "John Moehrke",
        "timestamp": 1543877167
    }
]