[
    {
        "content": "<p>We are looking to build a FHIR server facade in front of an existing multi-tenant system. Clients will be given access to 1 or more tenants to be enforced by standard authorization. When a client wants to create a data object (i.e., a specific FHIR resource), we need the client to provide the desired TenantID to properly insert the new data.  </p>\n<p><strong>Is there a recommended approach for providing this TenantID?</strong></p>\n<p>We also expect to allow searching across tenants to which they have access. This implies that the TenantID probably needs to reside within the resource.</p>\n<p>One thought is to include it as an <code>Identifier</code>. Another is to include it as an <code>Extension</code> in the <code>modifierExtension</code> field (because they are <em>Extensions that cannot be ignored</em>).</p>\n<p><strong>Thoughts, ideas, recommendations...</strong></p>\n<p>Thanks</p>",
        "id": 180159341,
        "sender_full_name": "Joe Paquette",
        "timestamp": 1573150941
    },
    {
        "content": "<p>it seems from your description that you anticipate that the client must know about the multi-tenancy and you depend on it acting correctly in order to enforce proper system behavior?</p>",
        "id": 180170424,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573157320
    },
    {
        "content": "<p>why would a client want to choose the TenantID? This seems to indicate that the client is aware of the backend architecture. If so, then why not just address the backend like one would a multi-tenant system? Each service has their own http root that they build upon. The tenantID is built into the URL root. <br>\nWhat I am confused by is the facade function if the clients need to know tenantID anyway.</p>",
        "id": 180171807,
        "sender_full_name": "John Moehrke",
        "timestamp": 1573158133
    },
    {
        "content": "<p>search across the the tenants... but presumably the tenant cannot be inferred from the context... so the client must know, and generic clients need not apply. If I've read it right, the least worst option is a header functionally like the host: http header</p>",
        "id": 180172301,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573158451
    },
    {
        "content": "<p>Yes, the client will always know the TenantIds (1 or more) to which they have access and will need to \"pass in\" the desired specific TenantId to the REST API calls. Embedding the TenantId in the \"base\" URL would work except for the scenario where we want to search across multiple tenants.</p>",
        "id": 180175606,
        "sender_full_name": "Joe Paquette",
        "timestamp": 1573160558
    },
    {
        "content": "<p>I would tie the tenant to the user (e.g., a claim in a token) so that tenants cannot trivially see across boundaries.  If you have access to multiple tenants, it could ask as part of the auth process which one(s) you want access to.</p>",
        "id": 180176957,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1573161517
    },
    {
        "content": "<p>Do you allow resource references, search, _include, etc across tenants? If so, I am not sure what isolation the tenancy provides. And if not, you might consider making the different tenants visible at different FHIR base URLs.</p>",
        "id": 180196763,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1573179276
    },
    {
        "content": "<p>We already include the TenantIDs (1 or more) a user has access to as claims in the auth token to prevent crossing the tenant boundaries. The question is about a case where a user has access to multiple TenantIDs but wants to access specific FHIR endpoints for a single specific tenant. Adding the TenantID in the URL will work in this case but not when I want to search across a subset of Tenants that I have access to (e.g., I have access to TenantIds 1,2,3,4,5 but want to search across TenantIds 2,3,4). To do that search, I need to use an appropriate query parameter. </p>\n<p>My understanding is that the query parameter must reference some data element in the resource; hence, my original question. Maybe a better question is can I document (capability statement) the use of a specific query parameter that the endpoint will always understand (TenantID(s)) but does not represent an actual data element within the resource?</p>",
        "id": 180234830,
        "sender_full_name": "Joe Paquette",
        "timestamp": 1573223858
    },
    {
        "content": "<p>Linking in <a href=\"#narrow/stream/184604-australia.2Fprimary-care/topic/Nov.202019.20Connectathon/near/180389554\" title=\"#narrow/stream/184604-australia.2Fprimary-care/topic/Nov.202019.20Connectathon/near/180389554\">https://chat.fhir.org/#narrow/stream/184604-australia.2Fprimary-care/topic/Nov.202019.20Connectathon/near/180389554</a></p>\n<p>Curious as to what the thoughts might be here so far.</p>\n<p>I think best case is the claims define the locations you have access to (as you alluded to) and any Id's should then take location into account to ensure uniqueness. Any request to a resource (eg. /Patient) should really search across locations and be seamless to the client. </p>\n<p>This doesn't help for writing though.</p>",
        "id": 180395038,
        "sender_full_name": "Courtenay Farquharson",
        "timestamp": 1573444357
    },
    {
        "content": "<p>Are the different TenantIds related to any real-world constructs?  Locations, etc?  Or are they purely a technical architecture thing?  I ask because this (clients knowing about tenant ids) sounds like a leaky abstraction.</p>",
        "id": 180468503,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1573514451
    },
    {
        "content": "<p>all abstractions are leaky but only some leaks are useful</p>",
        "id": 180475505,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573524302
    },
    {
        "content": "<p><strong>If</strong> it's a leak, I'm looking for the source, but it could always be a (water) feature</p>",
        "id": 180581834,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1573609725
    }
]