[
    {
        "content": "<p>There are a number of situations where we have mapped multiple concepts to one 'generic' element in FHIR, e.g. <code>MedicationStatement.derivedFrom</code> or <code>MedicationRequest.basedOn</code>. When converting back from FHIR it is hard to tell which concept the reference belongs to if the Resource type is not discriminative enough. Especially if you cant resolve the reference, which in our Medication use cases is quite a lot because we use Reference.identifiers since things live on multiple different servers.</p>\n<p>So we thought of extending the Reference datatype with a targetProfile extension. Quite similar to the <code>Reference.type</code> or the <code>Element.type.targetProfile</code> elements. </p>\n<p>What do you think of this approach and could such an extension be upgraded to an HL7 FHIR core extension?</p>",
        "id": 265800888,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1640177513
    },
    {
        "content": "<p>Profiles don't convey meaning.  If you want meaning, add an extension that conveys the meaning.</p>",
        "id": 265851490,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1640206396
    },
    {
        "content": "<p>Mm, I am not so sure about that. So Reference.type doesn't convey meaning either? </p>\n<p>We have multiple profiles on MedicationRequest, every profile specializes the MedicationRequest and comes with it's own meaning on top of the resource type of FHIR.</p>\n<p>This will provide one generic extension/method that can be reused in quite some situations. That would be better/nicer for our implementers than having specific extensions? Moreover, if you don't support the extension you will still have valid FHIR and are compatible with other use cases.</p>",
        "id": 265892703,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1640247085
    },
    {
        "content": "<p>It's perfectly ok to have separate extensions for each and every 'specialization' you may have, or to add one extension with your own code (as to what specialization this is). <br>\nBut don't derive this from a profile, which may or may not be listed, may or may not be valid anymore, may or may not have been stripped by any data processor. Profiles are not an indication of any semantics. They're in a different 'dimension' than the data itself.</p>",
        "id": 265893222,
        "sender_full_name": "Ren√© Spronk",
        "timestamp": 1640247601
    },
    {
        "content": "<p>Reference.type indicates what the target resource is.  Its purpose is to help the receiver know where in their system to search for data with a matching <code>.identifier</code>.  If you're in a situation where you need to further sub-divide to understand where to search (e.g. vitals, lab data, assessments, etc. being in different tables), you might have an extension for 'category'.  Profile simply tells you what set of validation rules an instance happens to comply with.  Removing a profile declaration never removes any meaning from the instance.</p>",
        "id": 265944800,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1640286965
    },
    {
        "content": "<p>Thank you both for the clear explanation. I do can follow the logic and agree. We will think of using an extension that may hold a semantic (category) code to pinpoint the precise reference. It is not necessary about searching, but more about being able to convert FHIR data back into another datamodel.</p>",
        "id": 266008770,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1640359518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192301\">@Ardon Toonstra</span> is this about adding extra meaning or is it about traceability? If the latter then another possibility is to have this info external to the resource in a Provenance, that points back.</p>",
        "id": 266010094,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1640361040
    }
]