[
    {
        "content": "<p>Just for curiosity, how can I profile a CodeableConcept instance in a resource to have 1 and only 1 coding? For example, Patient.contact.relationship is a CodeableConcept. And I want my client know that my server can take only one coding in that property.</p>",
        "id": 153910747,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1506441789
    },
    {
        "content": "<p>You just create a profile on the resource and restrict the cardinality of coding to 0..1 (or 1..1, however you need it).<br>\nMore info about profiling: <a href=\"https://www.hl7.org/fhir/profiling.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/profiling.html\">https://www.hl7.org/fhir/profiling.html</a><br>\nFor info about tooling see today's discussion here: <a href=\"https://chat.fhir.org/#narrow/stream/implementers/topic/How.20to.20create.20a.20new.20profile.20in.20existing.20resource\" target=\"_blank\" title=\"https://chat.fhir.org/#narrow/stream/implementers/topic/How.20to.20create.20a.20new.20profile.20in.20existing.20resource\">https://chat.fhir.org/#narrow/stream/implementers/topic/How.20to.20create.20a.20new.20profile.20in.20existing.20resource</a></p>",
        "id": 153910751,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1506446683
    },
    {
        "content": "<p>coding is inside CodeableConcept data type. That is my question. I can profile a resource. But can I profile a data type?</p>",
        "id": 153910781,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1506453505
    },
    {
        "content": "<p>Yes, you can profile a data type.  And you can also profile \"into\" a data type.  For example, if you want, you can have a profile on Observation that says Observation.code.coding.display is 1..1</p>",
        "id": 153910799,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1506458133
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191506\">@Yunwei Wang</span>, indeed as Lloyd explains, a profile can introduce constraints on child elements defined by an external datatype profile. Specifically, an Observation profile can define constraints on Observation.code, but also on the Observation.code.coding child element, overriding the original definition in the CodeableConcept datatype. Alternatively, you can define a custom datatype profile, e.g. MySpecialCodeableConcept, and then constrain the Observation.code element to this profile using the type.profile property. This is useful if you want to reuse a set of datatype constraints in multiple profiles.</p>\n<p>Note that Forge supports both approaches. If you assign a custom type profile, you may have to reload the referencing profile in order to expand the inherited child element constraints.</p>",
        "id": 153910939,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1506511105
    },
    {
        "content": "<p>As an addition from a practical point of view: you would profile the data type when you want to reuse that in multiple places, like resource profiles.<br>\nWhen you need the reduced cardinality only in a single resource profile, you'd constrain it directly in there to reduce overhead. But of course you can use both variants anytime.</p>",
        "id": 153910972,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1506518411
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"191436\">@Stefan Lang</span> <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 153910988,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1506521536
    }
]