[
    {
        "content": "<p>The description of the :iterate modifier wasn't entirely clear to me, so I did some testing on various public test servers: [base]/Patient?identifier=1020304050&amp;_revinclude=Condition:patient&amp;_include=Condition:asserter works fine on one, but another one requires :iterate Patient?identifier=1020304050&amp;_revinclude=Condition:patient&amp;_include:iterate=Condition:asserter .. so what's correct, and would this search (according to the spec) need iterate ?</p>",
        "id": 202536245,
        "sender_full_name": "René Spronk",
        "timestamp": 1593586532
    },
    {
        "content": "<p>(you can try the above search URLs on Vonk, on HAPI, and on <a href=\"http://test.fhir.org\">test.fhir.org</a>, where one and the same set of patient data has been uploaded for use during our (Firely's) FHIR training courses). <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <a href=\"http://test.fhir.org\">test.fhir.org</a> bombs if one doesn't use the iterate, and doesn't actually include a Practitioner if one does use iterate.</p>",
        "id": 202536370,
        "sender_full_name": "René Spronk",
        "timestamp": 1593586682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> ? The public server exhibit quite different behaviour, so some clarification (once we know what it should be) seems to be required.</p>",
        "id": 202653542,
        "sender_full_name": "René Spronk",
        "timestamp": 1593670459
    },
    {
        "content": "<p>I'm not actually sure.  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 202695005,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1593699799
    },
    {
        "content": "<p>My read has always been this:</p>\n<p>Say you do a search for <code>GET Foo?</code> without any includes, and it returns resources <code>Foo/A</code>, <code>Foo/B</code>, and <code>Foo/C</code>.</p>\n<ul>\n<li>Adding <code>_include=Foo:bar</code>will add any resources that are linked to directly from those three resources.</li>\n<li>Adding <code>_include:iterate=Foo:bar</code> will add any resources that are linked to directly from those three or from any additional Foo resources that were brought in via includes</li>\n<li>Adding <code>_include=Baz:baz</code> doesn't do anything at all</li>\n<li>Adding <code>_include:iterate=Baz:baz</code> will bring in any Baz resources that were brought in via includes</li>\n</ul>",
        "id": 202699799,
        "sender_full_name": "James Agnew",
        "timestamp": 1593701951
    },
    {
        "content": "<p>On HAPI R4, GET Foo?_include=Foo:bar&amp;_include=Bar:red works (the bundle includes Reds), whereas that shouldn't happen IMHO. Or to use my example: [base]/Patient?identifier=1020304050&amp;_revinclude=Condition:patient&amp;_include=Condition:asserter - the latter _include should have :iterate, right ?</p>",
        "id": 202714936,
        "sender_full_name": "René Spronk",
        "timestamp": 1593709021
    },
    {
        "content": "<p>Ahh interesting. That's on HAPI right?</p>\n<p>There are some internal reasons for this, but HAPI treats revincludes kind of differently from regular includes.. One of the differences is that revincludes end up getting treated as regular search results, which we do so that we can page them. That decision has the side effect of causing regular includes to see them as candidates even when there is no :iterate there.</p>",
        "id": 202715817,
        "sender_full_name": "James Agnew",
        "timestamp": 1593709348
    },
    {
        "content": "<p>IMO this is HAPI deviating from the spec slightly... This does come up from time to time though. </p>\n<p>I know <span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span> has raised this before (and I would say I agree with him) - Even if technically per the spec your query shouldn't work, it does seem fairly obvious what you're trying to accomplish, and maybe the spec is too strict as a result.</p>",
        "id": 202716130,
        "sender_full_name": "James Agnew",
        "timestamp": 1593709493
    },
    {
        "content": "<p>Here is our extension, which seems for us more unambiguous  - <a href=\"https://docs.aidbox.app/basic-concepts/search-1/_include-and-_revinclude#using-the-_with-parameter\">https://docs.aidbox.app/basic-concepts/search-1/_include-and-_revinclude#using-the-_with-parameter</a></p>",
        "id": 202723864,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1593712992
    },
    {
        "content": "<p>Aidbox uses :iterate (and old :recur) only for recursive includes and ignore in other cases.</p>",
        "id": 202725913,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1593713941
    },
    {
        "content": "<p>Here is the link to the discussion - <a href=\"#narrow/stream/179166-implementers/topic/About.20_include.3Aiterate\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/About.20_include.3Aiterate</a></p>",
        "id": 202725989,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1593713974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191372\">@René Spronk</span> you can register on <a href=\"https://aidbox.app/\">https://aidbox.app/</a> and create your personal and free aidbox sandbox.</p>",
        "id": 202726200,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1593714056
    },
    {
        "content": "<p>I agree with what's stated on the page referenced by Nicola, in that it's mostly not ambiguous and therefore :iterate can be omitted in most acses. My concern is that the spec doesn't match some/most of the implementations. That's an element of concern.<br>\n@nicola I'm aware that one can create ones own sandbox, but our FHIR for training courses we've chosen to only use public/open/shared/non-secure/read-write endpoints. Aidbox, nor MS, nor IBM have such servers, so we are unable to use them in training courses. In terms of richness of functionalty Aidbox would be a good candidate to add to our list, next to HAPI, Vonk and <a href=\"http://test.fhir.org\">test.fhir.org</a>.</p>",
        "id": 202772400,
        "sender_full_name": "René Spronk",
        "timestamp": 1593757906
    }
]