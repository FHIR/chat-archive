[
    {
        "content": "<p>Hello, I am very new to FHIR. I met a guy from the German organization who explained me, that the JSON thas is used must have the key-value pairs in the right order. This seems to me quite strange, since the JSON RFC 7159 explicitly says, that JSON is unordered. Also most of the implementations I know are based on dictionaries, that are also unordered. Was he simply wrong in this point or did I miss something? </p>",
        "id": 153886273,
        "sender_full_name": "Patrick Plattes",
        "timestamp": 1493293714
    },
    {
        "content": "<p>There is no requirement that JSON elements be ordered - but if you convert to XML, ordering matters</p>",
        "id": 153886274,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1493294191
    },
    {
        "content": "<p>Okay, thank you very much </p>",
        "id": 153886341,
        "sender_full_name": "Patrick Plattes",
        "timestamp": 1493319710
    },
    {
        "content": "<p>the reference implementation carefully maintains order - perhaps that is where the claim comes from. But that is for the convenience of the readers, not because it actually matters</p>",
        "id": 153886511,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1493609770
    },
    {
        "content": "<p>When serializing into an object model from the json, need to process the resource_type before you can select the appropriate object serializer to inflate, so can't stream directly without that property coming first.</p>",
        "id": 153886747,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1493783192
    },
    {
        "content": "<p>I don't recall if the dotnet fhir client has this restriction or not (probably not though)<br>\njust a heads up for possible implementer issues.</p>",
        "id": 153886748,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1493783242
    },
    {
        "content": "<p>I'm working with the .Net implementation right now. It uses Json.NET internally which parses the entire json text into a document object model. I can't imagine that ordering would matter.<br>\nOn the other hand, the reason I was looking into it was that I am working with potentially large objects and was looking for a way to stream them. I'd say it's likely that the order could matter to some implementations in the future, for this reason.</p>",
        "id": 153886770,
        "sender_full_name": "Mattias Flodin",
        "timestamp": 1493807861
    },
    {
        "content": "<p>we used to say that order mattered for exactly that reason. But Json doesn't work that way, and some of us had to reset our expectations. </p>",
        "id": 153886898,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1493857650
    },
    {
        "content": "<p>see <a href=\"http://www.healthintersections.com.au/?p=1723\" target=\"_blank\" title=\"http://www.healthintersections.com.au/?p=1723\">http://www.healthintersections.com.au/?p=1723</a></p>",
        "id": 153886899,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1493857776
    },
    {
        "content": "<p>though I note that json schema has moved along a lot since then </p>",
        "id": 153886900,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1493857786
    }
]