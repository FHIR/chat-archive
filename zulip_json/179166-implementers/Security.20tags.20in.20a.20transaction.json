[
    {
        "content": "<p>Let's say my system uses security tags to limit what the user can do with specific resources...<br>\nNow, I have a transaction bundle that has a bunch of resources in it, some are creates, some are updates. Is there a way to indicate that the updates should only occur if certain security tags are already on the resource?</p>",
        "id": 162083340,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1553893094
    },
    {
        "content": "<p>no. there's no way to make transactions dependent on anything but existence of a resource</p>",
        "id": 162083395,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553893145
    },
    {
        "content": "<p>damn</p>",
        "id": 162083400,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1553893152
    },
    {
        "content": "<p>it doesn't sound like a crazy idea but it would be a change proposal...</p>",
        "id": 162084677,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553894404
    },
    {
        "content": "<p>or you could use patch</p>",
        "id": 162084696,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553894413
    },
    {
        "content": "<p>how would PATCH make a difference <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 162212198,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1554099178
    },
    {
        "content": "<p>?</p>",
        "id": 162212200,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1554099181
    },
    {
        "content": "<p>ah no. I thought I added a conditional thing to the patch but I see that I didn't</p>",
        "id": 162213124,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1554100540
    },
    {
        "content": "<p>I would have thought that if the user didn't have access to the version of the resource being updated, you'd get errors.</p>",
        "id": 162744109,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1554624437
    },
    {
        "content": "<p>That is likely true of the current security models, as they are most fine grain at the Resource level (Permit vs Deny). However there will be needs for more fine grain security/privacy models that might have ability to have rules at a much more fine grain than Resource. Patch offers a pathway for updating portions that one would not have full access too.<br>\nThis said, there is nothing preventing a full POST to be used, where the server notices that only an allowed element is actually changing, thus the resulting allowed change very similar to Patch on that element alone.</p>",
        "id": 162825960,
        "sender_full_name": "John Moehrke",
        "timestamp": 1554736573
    },
    {
        "content": "<p>Yes John, we're currently mid way through that implementation at the moment.</p>",
        "id": 163333582,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1555274295
    },
    {
        "content": "<p>(I.e. Non patch patching)</p>",
        "id": 163333591,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1555274316
    },
    {
        "content": "<p>I've done something similar. The problem is deletion - is something missing because it's not being changed, or because it's being deleted?</p>",
        "id": 163336540,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1555278385
    },
    {
        "content": "<p>also, matching changes in a list - change or deletion + insertion. There's no general purpose solution to these problems</p>",
        "id": 163337195,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1555279393
    },
    {
        "content": "<p>Our implementation knows what the previous version from that system provided, so can detect the deletion.</p>",
        "id": 163339806,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1555283585
    },
    {
        "content": "<p>but what makes it a deletion? that it was omitted? isn't that the point: don't delete what is omitted...</p>",
        "id": 163369577,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1555325411
    },
    {
        "content": "<p>Maybe I'm missing something.  Is there a case in which a client-orchestrated full-resource update wouldn't completely overwrite what was there before?  (e.g. server-side house rules?)</p>",
        "id": 163488481,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1555435316
    },
    {
        "content": "<p>Servers are allowed to ignore some bits of what comes in.  Most common would be to throw away extensions or core elements they don't support.  However, in principle, a server could accept an update but not allow changing of a particular element  based on its own business rules (e.g. some other system is the authoritative source for names or addresses).  If this happens, the server SHOULD produce a warning indicating what it's done.  If the resource gets echoed back instead, the client can see exactly which parts of the update \"stuck\".</p>",
        "id": 163491450,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1555437427
    },
    {
        "content": "<p>Thanks Lloyd.  Digging further, I see the FHIR spec discusses variations between submitted and retrieved data here:</p>\n<p><a href=\"http://www.hl7.org/fhir/updates.html\" target=\"_blank\" title=\"http://www.hl7.org/fhir/updates.html\">http://www.hl7.org/fhir/updates.html</a></p>\n<p>However, I didn't find text there saying the server SHOULD produce a warning indicating what it's done.</p>",
        "id": 163495466,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1555440161
    },
    {
        "content": "<p>Would probably be a good thing to add to the spec.  Do you want to submit a change request?</p>",
        "id": 163495850,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1555440407
    },
    {
        "content": "<p>Will do.</p>",
        "id": 163495941,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1555440473
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20874\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20874\">GF#20874</a></p>",
        "id": 163500552,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1555443925
    },
    {
        "content": "<p>I don't know how it would provide such a warning. OperationOutcome. presumbly, if it is returned, but there's no obvious way to say anything more than human readable</p>",
        "id": 163512511,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1555453409
    },
    {
        "content": "<p>I don't have an immediate use case for a more formal warning mechanism.  Would defer to others regarding whether adding something like that would make sense.</p>",
        "id": 163536604,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1555484501
    },
    {
        "content": "<p>RE: operationOutcome - the client also has to request the operationOutcome in the response, a server can't send one unless it's requested with the prefer header: <a href=\"http://hl7.org/fhir/r4/http.html#ops\" target=\"_blank\" title=\"http://hl7.org/fhir/r4/http.html#ops\">http://hl7.org/fhir/r4/http.html#ops</a></p>",
        "id": 163566049,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1555511605
    },
    {
        "content": "<p>so the warning would be hidden unless the app specifically requested it</p>",
        "id": 163566231,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1555511728
    },
    {
        "content": "<p>Right.  If you're in an environment where it's possible the update might not be applied exactly as you requested, you should either ask for a copy of the stored record back or for OperationOutcome.</p>",
        "id": 163571461,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1555514951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191505\">@Sean McIlvenna</span> in Aidbox  transaction internally calls same endpoints as if you send entry requests one by one, i.e. we interpret transaction at a server routing level as multi operation request. With this interpretation we run all security checks on updates/deletes and fail transaction is access denied for some of them.</p>",
        "id": 163620514,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1555558882
    }
]