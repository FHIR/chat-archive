[
    {
        "content": "<p>In discussing <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=16550\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=16550\">GF#16550</a> today on the FHIR-I call, we are wondering what implementers reaction would be to suggesting that clients SHOULD follow this <a href=\"https://tools.ietf.org/html/draft-sharhalakis-httptz-05\" target=\"_blank\" title=\"https://tools.ietf.org/html/draft-sharhalakis-httptz-05\">IETF proposal</a> (even though it is not a ratified standard HTTP header) to provide time zone information using the proposed Client Timezone header?</p>",
        "id": 157576342,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549334120
    },
    {
        "content": "<p>I agree this is challenging.</p>",
        "id": 157621977,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549386788
    },
    {
        "content": "<p>In the tracker, some people are talking about offsets and others are talking about time zones (and some about both).  I agree with Jenni's point from 05 Jul 2018, and I think we need this to be about <strong>offsets</strong> and leave time zones out of it.</p>",
        "id": 157622146,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549386941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> I think that IETF proposal would add complexity that might not get us anything, but I might be looking at it wrong.  </p>\n<p>Option 1: The client says \"give me all results after 2019-02-05T00:00:00-05:00\"</p>\n<p>Option 2: The client says \"give me all results after 2019-02-05, and by the way, here are some extra headers letting you know that my offset it -05:00\"</p>\n<p>Is the latter enough easier for the client to make the additional complexity worth it?</p>",
        "id": 157622528,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549387259
    },
    {
        "content": "<p>Agree there is definitely confusion there, but this is specifically (and importantly) about timezones. Without the timezone, there's no way to reliably know what time it actually is where the request originated, which is important for questions like \"is it past midnight?\"</p>",
        "id": 157622613,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549387323
    },
    {
        "content": "<p>Offset alone doesn't give you that.</p>",
        "id": 157622635,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549387346
    },
    {
        "content": "<p>And timezones change from country to country and year to year (typically because of law changes).   Who would keep track of the history of timezone changes?</p>",
        "id": 157629382,
        "sender_full_name": "John Silva",
        "timestamp": 1549392284
    },
    {
        "content": "<p>What I'm saying is that the server doesn't necessarily <em>need</em> to know the client's time zone.  If the client does a search with only a date (or with a date and time but no offset), the server needs to know what time the client thinks it is in order to give the client the results the client wants.  But if the client provides the server with the explicit date, time, and offset in the search parameter, the server doesn't need to know what time the client thinks it is.</p>",
        "id": 157631757,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549393871
    },
    {
        "content": "<p>I'm not saying that just to punt work from the server to the client; the client has to do work either way.</p>",
        "id": 157631795,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549393901
    },
    {
        "content": "<p>Is it easier for the client to provide the necessary specificity in a header than it is for the client to provide the same specificity in a search parameter?</p>",
        "id": 157631904,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549393965
    },
    {
        "content": "<p>The timezone would be needed to translate from 1/2/2019 00:00 (essentially the timeless date/local date requested) to \"midnight in my time zone\"</p>",
        "id": 157632103,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1549394098
    },
    {
        "content": "<p>Telling the time offset there won't let you know, for example, that a DST change just happened or will happen and you need to account for that in finding \"midnight local\"</p>",
        "id": 157632148,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1549394130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194183\">@John Silva</span>  Usually, most libraries and OSs use the Olson database to track that: <a href=\"https://en.wikipedia.org/wiki/Tz_database\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Tz_database\">https://en.wikipedia.org/wiki/Tz_database</a></p>",
        "id": 157632255,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1549394187
    },
    {
        "content": "<p>and if they don't, I feel it's a bit like the \"don't roll your own crypto\" saying. Don't roll your own TZ tracking... you're just asking for issues :)</p>",
        "id": 157632316,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1549394232
    },
    {
        "content": "<p>And I think the only place where requiring the client to provide the exact offset/time becomes weird is where the date itself in the system is timeless/imprecise. Otherwise, I would think that best practice is for clients to fully qualify the time</p>",
        "id": 157633016,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1549394716
    },
    {
        "content": "<p>Most of the time, when I've seen an app send in just a date (even for _lastUpdated), it's because they saw it in an example somewhere rather than they made a conscious decision to do it that way</p>",
        "id": 157633139,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1549394799
    },
    {
        "content": "<p>I hadn't thought of that (that using date only wouldn't be a conscious choice).</p>",
        "id": 157640393,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549400717
    },
    {
        "content": "<p>My 5ct of implementer opinion on the initial question (for the statistics <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> ): I would rather not split the timezone information into a header (especially not a non-standard one). I would find it confusing to have a second place where timezone-related information can go and suspect it will lead implementers with questions about what should go where, whether double-encoding is OK etc. Also, what happens if the header info contradicts timezone information explicitly put in a date field or search variable? Finally, my feeling is also that, beyond the added technical complexity, moving info into headers always increases the potential for client errors due to misunderstandings or misreadings of the spec.</p>",
        "id": 157676646,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1549445334
    },
    {
        "content": "<p>date fields can always have different timezones from the system - they can't disagree. I don't think that it matters whether the timezone information is in a header or a parameter.</p>",
        "id": 157679377,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549448416
    },
    {
        "content": "<p>I think it's not so much search where it matters, but things like narrative generation, appointment matching, decision support around care planning</p>",
        "id": 157679393,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549448457
    },
    {
        "content": "<p>Just to be clear: there is no where in FHIR today where you can communicate the time zone. The only thing that can be communicated is the offset of a specific time (and it may vary throughout a resource). Offsets are ambiguous (if trying to go to a unique time zone), and change within a given time zone during specific parts of the year or over time.</p>",
        "id": 157713142,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1549477850
    },
    {
        "content": "<p>Hmm, this same problem existed in the HL7 V2 world with the TimeStamp (TS) datatype and V2 has been dealing with this for ~30 years so I guess an elegant solution has still not been found ;-)   [In the 'earlier' V2 days, and even now, the default is that if a timestamp doesn't have an offset the V2 processing rules say to interpret it as 'local time' -- whatever that means!! the sender's local time the receiver's or something else?]</p>",
        "id": 157720273,
        "sender_full_name": "John Silva",
        "timestamp": 1549482901
    },
    {
        "content": "<p>receiver's local time. MSH-7 timestamp has traditionally been used as the sender's timezone offset</p>",
        "id": 157722873,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549484739
    },
    {
        "content": "<p>Getting back to <span class=\"user-mention\" data-user-id=\"191356\">@Jenni Syed</span>'s point above, does someone have a real world use case for this, and if so what is it they want to do?</p>",
        "id": 157736569,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549495274
    },
    {
        "content": "<p>decision making on the server side.</p>",
        "id": 157737187,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549495861
    },
    {
        "content": "<p>What's a specific example?</p>",
        "id": 157740085,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549498692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span></p>",
        "id": 157741272,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549499974
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191936\">@Michael Donnelly</span> , I think a common example is scheduling an appointment. You really have to know the timezone in order to do that effectively. In decision support and quality measurement, there are cases where I'm looking for specific events to occur between admission and midnight on the admission date. If I'm running locally that's easy enough to tell, but as soon as I want to run that logic in the cloud, I can't answer the question, is it midnight where the request originated?</p>",
        "id": 157742166,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549500921
    },
    {
        "content": "<p>Note that I'm not suggesting this is something that all clients would have to do. There are plenty of cases that simply don't require it. But for cases that do require it, there ought to be a way to support the use case that's consistent, so that different implementations don't do it different ways.</p>",
        "id": 157742285,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549501066
    },
    {
        "content": "<p>Another example is I/O totals in an acute care unit; these are normally calculated for the shifts based on the local time zone, but these could be calculated on a server in the cloud that 'lives' \"who knows where\" (or the server/service could be moved based on load).   [To say nothing about the 'fun' problem of doing totals across the 'crazy hours' when the daylight saving time switches.]  This same server/service could be used for different hospitals in a hospital group that are located geographically across different time zones.</p>",
        "id": 157742790,
        "sender_full_name": "John Silva",
        "timestamp": 1549501548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> and <span class=\"user-mention\" data-user-id=\"194183\">@John Silva</span>, both of those sound like cases where the client wants to refer to midnight in the <strong>server's time zone</strong> and/or in the <strong>time zone local to the department relevant to this resource</strong> rather than in the <strong>client's time zone</strong>.</p>",
        "id": 157777848,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549547673
    },
    {
        "content": "<p>Am I thinking about this the wrong way?</p>",
        "id": 157777856,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549547688
    },
    {
        "content": "<p>It seems like we have a few different potential problems that can contribute to these workflows having trouble:<br>\n1. Difference between the client's offset and the server's offset.<br>\n2. Difference between the server's offset and the offset of the <strong>department relevant to a resource</strong>.<br>\n3. Different between the server's current offset and the offset for a time zone (perhaps the <strong>server's</strong>, perhaps the <strong>client's</strong>, perhaps the <strong>department's</strong>) at the time (or, worse, times) relevant to the resource.</p>",
        "id": 157778098,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549547893
    },
    {
        "content": "<blockquote>\n<p>2. Difference between the server's offset and the offset of the department relevant to a resource.</p>\n</blockquote>\n<p>Examples include:</p>\n<ul>\n<li>Scheduling an appointment </li>\n<li>Decision support </li>\n<li>Quality measures </li>\n<li>I/O totals for acute care</li>\n</ul>",
        "id": 157778295,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549548084
    },
    {
        "content": "<blockquote>\n<p>3. Different between the server's current offset and the offset for a time zone (perhaps the server's, perhaps the client's, perhaps the department's) at the time (or, worse, times) relevant to the resource.</p>\n</blockquote>\n<p>Examples include definitely:</p>\n<ul>\n<li>Scheduling an appointment</li>\n<li>Quality measures</li>\n</ul>\n<p>And maybe in some edge cases (operationally during Spring forward/Fall back)</p>\n<ul>\n<li>Decision support</li>\n<li>I/O totals for acute care</li>\n</ul>",
        "id": 157778408,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549548170
    },
    {
        "content": "<p>If the client happens to be in the same time zone as the department for the resource, anything that solves potential issue #1 also solves #2.</p>",
        "id": 157778504,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549548253
    },
    {
        "content": "<p>But if the client is somewhere else, things have actually gotten murkier.</p>",
        "id": 157778604,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549548340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191936\">@Michael Donnelly</span>  -- well, in the example of I/O totals, it doesn't necessarily matter where the client is.   I'll give an example, which might add ever further confusion but this is the reality with dealing with timezones !  (We can thank Ben Franklin for this!!  <a href=\"http://www.webexhibits.org/daylightsaving/franklin.html\" target=\"_blank\" title=\"http://www.webexhibits.org/daylightsaving/franklin.html\">http://www.webexhibits.org/daylightsaving/franklin.html</a>) </p>\n<p>My (Dr. Who) hospital is in the UK (London) but I'm traveling to the Eastern US and I get a call from the clinical staff about my patient.   I need to look at my patient's chart.   I use my VPN client to authenticate on my hospital's network, but I run a local web client to access the EMR system at the hospital.  When I see my patient's data, even though I'm in the US, I need the data to be shown in the local (UK) time because that is what is going on with the patient.   So, in this example, even though my web client is running in the US Eastern time zone, I need the data to be displayed in UK local time.  (Also, what happens if the UK hospital's system is in the cloud and when I login I'm actually connecting to a cloud mirror in the US not the UK; which timezone should I expect to see?)   You can think of a similar scenario for 'remote radiologist' reviewing imaging studies; e.g. patients in the US have imaging studies which are 'read' by radiologists in India (for example), does the remote radiologist want to see there local time or the time of the patient's location; I suspect the latter.</p>\n<p>The idea here is that the source data typically needs to be stored in the time zone where the patient observation (event, etc.) happened.   How this is viewed may not matter on where the client is located (and in which time zone) but I'm sure there are use cases where it might.</p>",
        "id": 157781637,
        "sender_full_name": "John Silva",
        "timestamp": 1549550689
    },
    {
        "content": "<p>I think we agree, <span class=\"user-mention\" data-user-id=\"194183\">@John Silva</span>.  What matters is where the patient is or where the encounter was or where a department is not where the client happens to be.</p>",
        "id": 157782731,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549551549
    },
    {
        "content": "<p>Yes <span class=\"user-mention\" data-user-id=\"191936\">@Michael Donnelly</span>  I've always thought that <code>Location.position</code> is the best place for timezone information to live . Maybe even adding a property to <code>position</code> for how people in that <code>Location</code> set their clocks, since working back from coordinates is not easy.</p>",
        "id": 157783447,
        "sender_full_name": "Nick Hatt",
        "timestamp": 1549552140
    },
    {
        "content": "<p>There is also some previous discussion around this on <a href=\"#narrow/stream/179166-implementers/topic/Date.20http.20header.20for.20timezone\" title=\"#narrow/stream/179166-implementers/topic/Date.20http.20header.20for.20timezone\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Date.20http.20header.20for.20timezone</a></p>",
        "id": 157795084,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1549560434
    },
    {
        "content": "<p>The client time zone (app) is also important for narratives and places where dates are calculated by the server for display/\"localization\"</p>",
        "id": 157795110,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1549560468
    },
    {
        "content": "<p>So, Facility time zone, patient time zone (may be the same as facility if the patient is at the site), client time zone/app time zone</p>",
        "id": 157795187,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1549560523
    },
    {
        "content": "<p>I feel like app comes into play as well for the timeless searches on date... the spec right now says the server will use local, but I think that's really surprising/apps don't think of it that way</p>",
        "id": 157795225,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1549560554
    },
    {
        "content": "<p>And when your server is cloud or has multiple timezones in a single instance... that you're searching over, it gets even more confusing</p>",
        "id": 157795268,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1549560597
    },
    {
        "content": "<p>Ah, I hadn't thought about display localization, <span class=\"user-mention\" data-user-id=\"191356\">@Jenni Syed</span> .</p>",
        "id": 157798949,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549563369
    },
    {
        "content": "<p>What I was getting at above is that knowing the time zone of the client doesn't address any of the cases <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> and <span class=\"user-mention\" data-user-id=\"194183\">@John Silva</span> gave above.</p>",
        "id": 157799150,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1549563485
    },
    {
        "content": "<p>Yes, I think both server and client side time zone information is necessary in certain use cases.  </p>\n<p>Another related question; how do you store the times on the server (e.g. effectiveDateTime)?   If we store it \"normalized to Zulu/UTC\", then we handle the 'instance in time\" and help with the problem with the spring forward/fall back issues but lose track of the local time that the event occurred.  Take a simple example,  if a baby was born at 12:01AM local time their birthday would be that date, but if someone looks at this date/time in UTC how would they know?  (Yes, that's why Patient.birthDate is only date but there are cases we need to record birth date and time, e.g. to distinguish multiples, neonates where time is very important, etc.)   Also, in the previous example, what would the remote doctor expect to see for I/O data or radiology reports that were stored in another time zone yet being shown on their client display?   (think about the added problem if this is historical data and the time zone information changed since the data was recorded.)</p>",
        "id": 157801032,
        "sender_full_name": "John Silva",
        "timestamp": 1549564783
    },
    {
        "content": "<p>The other use case is a location or healthcare services opening hours.<br>\nAs <span class=\"user-mention\" data-user-id=\"191936\">@Michael Donnelly</span> pointed out it's basically the timezone of the location (and is what we've done calculations from in the past where no info is available). This zone is on time (no date) as the datetime is generated for each day as needed.</p>",
        "id": 157816486,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1549576761
    },
    {
        "content": "<p>And as everyone here have pointed out, there are many considerations at play, the local app/browser zone is just one of them, and can play a part in formatting a display for the user.</p>",
        "id": 157816748,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1549576943
    },
    {
        "content": "<p>agree that the thing that matter is the timezone of the user of the client; generally, we've been conflating those but it's not always the same</p>",
        "id": 157835904,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549601544
    },
    {
        "content": "<p>on my server, I store as received, but index on UTC</p>",
        "id": 157835906,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549601561
    }
]