[
    {
        "content": "<p>Hi,</p>\n<p>I have some questions regarding the FHIRPath specification, but don't know whether the version I'm looking at is the most recent one or there's something newer.</p>\n<p>I am looking at these:<br>\n<a href=\"https://github.com/FHIR/fluentpath/blob/master/spec/index.adoc\" target=\"_blank\" title=\"https://github.com/FHIR/fluentpath/blob/master/spec/index.adoc\">https://github.com/FHIR/fluentpath/blob/master/spec/index.adoc</a><br>\n<a href=\"http://hl7.org/fhirpath/\" target=\"_blank\" title=\"http://hl7.org/fhirpath/\">http://hl7.org/fhirpath/</a></p>\n<p>Are these the latest versions?</p>",
        "id": 153893716,
        "sender_full_name": "Michael Calderero",
        "timestamp": 1497443460
    },
    {
        "content": "<p>the current formal version is here: </p>",
        "id": 153893718,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1497443825
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhirpath\" target=\"_blank\" title=\"http://hl7.org/fhirpath\">http://hl7.org/fhirpath</a></p>",
        "id": 153893719,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1497443833
    },
    {
        "content": "<p>Thanks for that. I have the following questions:</p>\n<p>1. In section 6.5 Boolean logic (i.e. <a href=\"http://hl7.org/fhirpath/#boolean-logic\" target=\"_blank\" title=\"http://hl7.org/fhirpath/#boolean-logic\">http://hl7.org/fhirpath/#boolean-logic</a>), it says:<br>\n\"For all boolean operators, the collections passed as operands are first evaluated as booleans (as described in <strong>Boolean Evaluation of Collections</strong>). The operators...\"<br>\nIt seems to refer to a section named \"Boolean Evaluation of Collections\". However, I don't see such a named section in the specification. The closest I could find was <a href=\"http://hl7.org/fhirpath/#singleton-evaluation-of-collections\" target=\"_blank\" title=\"http://hl7.org/fhirpath/#singleton-evaluation-of-collections\">http://hl7.org/fhirpath/#singleton-evaluation-of-collections</a>. Is this the correct reference?</p>\n<p>2. In <a href=\"http://hl7.org/fhir/STU3/definitions.xml.zip\" target=\"_blank\" title=\"http://hl7.org/fhir/STU3/definitions.xml.zip\">http://hl7.org/fhir/STU3/definitions.xml.zip</a>, in search-parameters.xml, some of the search parameters use the is() or as() functions. An example is <a href=\"http://hl7.org/fhir/SearchParameter/Condition-abatement-boolean\" target=\"_blank\" title=\"http://hl7.org/fhir/SearchParameter/Condition-abatement-boolean\">http://hl7.org/fhir/SearchParameter/Condition-abatement-boolean</a>.<br>\nI cannot find any definition of these functions in the FHIRPath spec. I do find the equivalent 'is' or 'as' keywords under <a href=\"http://hl7.org/fhirpath/#types\" target=\"_blank\" title=\"http://hl7.org/fhirpath/#types\">http://hl7.org/fhirpath/#types</a>. Are the functions equal to their keyword counterparts?</p>",
        "id": 153893762,
        "sender_full_name": "Michael Calderero",
        "timestamp": 1497453155
    },
    {
        "content": "<p>1. Yes, that's been corrected in the next version, but isn't published yet.</p>",
        "id": 153893764,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1497453356
    },
    {
        "content": "<p>2. Yes, that's also been corrected, and yes, they are equivalent. They're done as part of the syntax so we can distinguish that the identifier is a \"type\" identifier, rather than a \"variable\" identifier.</p>",
        "id": 153893765,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1497453393
    },
    {
        "content": "<p>Thanks. Is the unpublished version viewable? Like in GForge or something?</p>",
        "id": 153893767,
        "sender_full_name": "Michael Calderero",
        "timestamp": 1497453631
    },
    {
        "content": "<p>The source is in Github, and now that I'm looking at it I see that that issue is still outstanding, I thought it had been corrected.</p>",
        "id": 153893768,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1497453683
    },
    {
        "content": "<p><a href=\"https://github.com/FHIR/fluentpath/blob/master/spec/index.adoc\" target=\"_blank\" title=\"https://github.com/FHIR/fluentpath/blob/master/spec/index.adoc\">https://github.com/FHIR/fluentpath/blob/master/spec/index.adoc</a></p>",
        "id": 153893769,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1497453693
    },
    {
        "content": "<p>I'll fix it.</p>",
        "id": 153893770,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1497453698
    },
    {
        "content": "<p>There's actually a tracker on it too: <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12583&amp;start=0\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12583&amp;start=0\">http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12583&amp;start=0</a></p>",
        "id": 153893771,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1497454069
    },
    {
        "content": "<p>I had forgotten about that issue I posted on GForge. My bad.<br>\nBut for my question #2, it seems that <a href=\"https://github.com/FHIR/fluentpath/blob/master/spec/index.adoc\" target=\"_blank\" title=\"https://github.com/FHIR/fluentpath/blob/master/spec/index.adoc\">https://github.com/FHIR/fluentpath/blob/master/spec/index.adoc</a> is not yet updated. Do you want me to put in a GForge ticket for this?</p>",
        "id": 153893773,
        "sender_full_name": "Michael Calderero",
        "timestamp": 1497454466
    },
    {
        "content": "<p>No, in looking at that ticket, it was auto-deferred, so we can just put it back to open and apply the change.</p>",
        "id": 153893774,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1497454523
    },
    {
        "content": "<p>For question #2, the github is correct, is and as are keywords.</p>",
        "id": 153893776,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1497454759
    },
    {
        "content": "<p>But yes, I see that they are used as functions in the FHIRPath for the search parameters in the spec.</p>",
        "id": 153893778,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1497454909
    },
    {
        "content": "<p>So yes, log a ticket for that so we can sort it.</p>",
        "id": 153893779,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1497454944
    },
    {
        "content": "<p>Actually, looks like Ewout just did.</p>",
        "id": 153893780,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1497454988
    },
    {
        "content": "<p>So, what is the correct semantics for the \"Boolean Evaluation of Collections\" (I wasn't able to find it anywhere).<br>\nIs it that single boolean value evaluates to that value, empty collection evaluates to empty and anything else is \"true\"?</p>",
        "id": 153939813,
        "sender_full_name": "Ivan Dubrov",
        "timestamp": 1519329876
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhirpath/#singleton-evaluation-of-collections\" target=\"_blank\" title=\"http://hl7.org/fhirpath/#singleton-evaluation-of-collections\">Singleton evaluation of collections</a></p>",
        "id": 153939849,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519332152
    },
    {
        "content": "<p>Boolean evaluation of collections is a special case of singleton evaluation. In general, it's an error to attempt to evaluate a collection with more than one thing in it as a singleton.</p>",
        "id": 153939856,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519332245
    },
    {
        "content": "<p>Would non-boolean produce an error or evaluate to 'true'?<br>\nReason I'm asking is that I see the following FHIRPath in standard definitions: \"(code or value.empty()) and (system.empty() or system = 'urn:iso:std:iso:4217')\", which implies that non-empty code should evaluate to true.</p>",
        "id": 153939869,
        "sender_full_name": "Ivan Dubrov",
        "timestamp": 1519332999
    },
    {
        "content": "<p>(it's in Money definition)</p>",
        "id": 153939870,
        "sender_full_name": "Ivan Dubrov",
        "timestamp": 1519333081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span></p>",
        "id": 153939871,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1519333499
    },
    {
        "content": "<p>Hmmm.... seems like it shouldn't evaluate to me, should be <code>(code.exists() or value.empty()) and (system.empty() or system = 'urn:iso:std:iso:4217')</code></p>",
        "id": 153939902,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519337858
    },
    {
        "content": "<p>indeed that should be corrected</p>",
        "id": 153939917,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1519338410
    },
    {
        "content": "<p><a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15611\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15611\">GF#15611</a></p>",
        "id": 153939932,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519339809
    },
    {
        "content": "<p>Marked as an auto-approved typo</p>",
        "id": 153939957,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1519341575
    },
    {
        "content": "<p>Here is one more inconsistency between the spec and its application.<br>\nFor example, spec doesn't define \".in()\" function (), but rather an \"in\" operator. However, both spec and real definitions use \"in\" as a function.<br>\nSame for the \"as\" operator.<br>\nSo, in those two cases, should those be both supported as a \"function\" and as an \"operator\" or only as an operator?</p>",
        "id": 153940661,
        "sender_full_name": "Ivan Dubrov",
        "timestamp": 1519672371
    },
    {
        "content": "<p>There is also a lot of other things, like missing <code>.exists()</code>, as in example above, comparing single item versus a collection (like in <code>value.empty() or code!=component.code</code> for Observation), assuming short-cutting \"or\" operator (like in <code>min.empty() or max.empty() or (max = '*') or (min &lt;= max.toInteger())</code>, toInteger will fail if <code>max = '*'</code>).<br>\n(plus some of the data in examples doesn't pass validation, like bmi-questionnaire.json missing \"linkId\" elements here and there).</p>\n<p>Should I report all these cases one by one or maybe I can just list all of them as a bulk item?</p>",
        "id": 153940662,
        "sender_full_name": "Ivan Dubrov",
        "timestamp": 1519672776
    },
    {
        "content": "<p>I don't see a reference to .in() in the spec, in is defined as an operator in the spec and the grammar.</p>",
        "id": 153940663,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519672876
    },
    {
        "content": "<p>For <code>is</code> and <code>as</code>, they are defined in the spec and the grammar as operators, but I do see examples that use them as functions. I'd suggest a tracker for that on FHIRPath.</p>",
        "id": 153940664,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519672922
    },
    {
        "content": "<p>For the use of <code>.in()</code> in the spec, I'd say that would be a tracker against FHIR, citing the invariant that uses it.</p>",
        "id": 153940665,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519672947
    },
    {
        "content": "<p>Separate trackers for the items in FHIRPath are preferable, it's easier to track the specific resolutions for the issues.</p>",
        "id": 153940666,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519672970
    },
    {
        "content": "<p>You are right about \".in()\", it was just one of the constraints.</p>\n<p>I'll open separate tickets.</p>",
        "id": 153940668,
        "sender_full_name": "Ivan Dubrov",
        "timestamp": 1519673368
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 153940683,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519675777
    },
    {
        "content": "<p>Created few:</p>\n<p><a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15648\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15648\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15648</a><br>\n<a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15649\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15649\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15649</a><br>\n<a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15650\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15650\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15650</a><br>\n<a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15651\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15651\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15651</a><br>\n<a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15652\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15652\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15652</a><br>\n<a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15653\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15653\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15653</a><br>\n<a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15654\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15654\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15654</a></p>",
        "id": 153940823,
        "sender_full_name": "Ivan Dubrov",
        "timestamp": 1519681360
    },
    {
        "content": "<blockquote>\n<p>There is also a lot of other things, like missing <code>.exists()</code>, as in example above, comparing single item versus a collection (like in `value.empty() or  (...)</p>\n<p>Should I report all these cases one by one or maybe I can just list all of them as a bulk item?</p>\n</blockquote>\n<p>Hi Ivan, these inconsistencies are because of a change of the boolean interpretation of empty arrays &amp; introduction of three-valued logic in STU3.  We tried to manually hunt these mistakes down &amp; fix them, but obviously we've missed a few.  Thanks for pointing them out!</p>",
        "id": 153940906,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1519724641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>: I think we need to continue our discussion around sum() or aggregate/fold (and possible lambda notation) for the FhirPath normative?</p>",
        "id": 153940907,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1519724741
    },
    {
        "content": "<p>we do. though I don't know about the lambda bit?</p>",
        "id": 153940908,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1519725614
    },
    {
        "content": "<p>The major question is: </p>\n<ul>\n<li>Option A:  We add just sum(), which works on a collection of numbers and sums the numbers</li>\n<li>Option B: We generalize and introduce explicit lambda notation like so:     <code>Patient.name.first.aggregate(\\total arg -&gt;  $total &amp; $arg)</code> (just borrowing from Haskell here) - which would allow you to sum/aggregate anything in any way, since you're not bound to just sums</li>\n<li>Option C: Another magic variable <code>$total</code> (much like $this), which only appears in <code>aggregate</code>:   <code>Patient.name.first.aggregate($total &amp; $this)</code></li>\n</ul>",
        "id": 153940909,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1519726092
    },
    {
        "content": "<p>I think the third option is closest to our current design - where() etc introduce a magic $this, aggregate() could introduce $total.</p>\n<p>Interestingly, <code>repeat()</code> could then be rewritten using <code>aggregate()</code>:</p>\n<p><code>Questionnaire.repeat(group | question).question</code> becomes  </p>\n<p><code>Questionnaire.aggregate($total | (group | question)).question</code></p>",
        "id": 153940910,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1519726951
    },
    {
        "content": "<p>Option A is the most well understood, but least flexible. It's the least likely to be considered a substantive change.</p>",
        "id": 153940979,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519751320
    },
    {
        "content": "<p>Option B is, I think, the least understood, but most flexible, and I think would be considered substantive, it's a pretty big change in terms of functionality, even if not in terms of the actual grammar and specification.</p>",
        "id": 153940980,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519751369
    },
    {
        "content": "<p>Option C is my favorite, it's not as flexible as lambdas, but it's also a very focused change so much less likely to be considered substantive. I actually really like it, it supports everything we need and more, nice proposal <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span></p>",
        "id": 153940983,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519751485
    },
    {
        "content": "<p>I understand this: Patient.name.first.aggregate($total &amp; $this) - but I find it not useful because of the need for a separator in most cases - an 'all but the first' action.</p>",
        "id": 153941004,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1519754715
    },
    {
        "content": "<p>but I don't understand this: Questionnaire.aggregate($total | (group | question)).question - what is aggregate aggregating on? Is this a mistake, or something I don't understand?</p>",
        "id": 153941005,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1519754751
    },
    {
        "content": "<p>Patient.name.first().aggregate($total &amp; $total.iif(exists(), ', ') &amp; $this)</p>",
        "id": 153941021,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519760296
    },
    {
        "content": "<p>For the second one, it's aggregating the list, so union is the aggregate function.</p>",
        "id": 153941022,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1519760335
    },
    {
        "content": "<p>how is it different to (Questionnaire.group | Questionnaire.question) ? Surely you have to have a list as focus in order to actually aggregate something?</p>",
        "id": 153941030,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1519761894
    },
    {
        "content": "<p>Are you going create Turing complete language with perl syntax?</p>",
        "id": 153941037,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1519762639
    },
    {
        "content": "<p>no but that sounds like fun. It'll only take you a few minutes to do that...</p>",
        "id": 153941039,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1519762711
    },
    {
        "content": "<blockquote>\n<p>but I don't understand this: Questionnaire.aggregate($total | (group | question)).question - what is aggregate aggregating on? Is this a mistake, or something I don't understand?</p>\n</blockquote>\n<p>No, I was a bit too enthousiastic ;-)  We can't get rid of the repeat() unfortunately.</p>",
        "id": 153941187,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1519834612
    },
    {
        "content": "<blockquote>\n<p>Are you going create Turing complete language with perl syntax?</p>\n</blockquote>\n<p>Thinking about addinc <code>let rec</code>....</p>",
        "id": 153941188,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1519834651
    },
    {
        "content": "<p>With the aggregate functions, need to be very careful that they don't operate on a list that has had duplicates removed, will skew values and make sums incorrect.</p>",
        "id": 153941305,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1519857439
    }
]