[
    {
        "content": "<p>Hi all. I'm generating FHIR Bundle resources, in particular documents converted from C-CDA, and would like to hear opinions on best practice for entry.fullUrl. Since there is no FHIR server involved in the conversion process, I am currently generating UUIDs to identify each resource, so entry.fullUrl looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>     &lt;fullUrl value=&quot;urn:uuid:df2a676b-d2a6-4bbe-87e6-de61e14f4958&quot;/&gt;\n</pre></div>\n\n\n<p>However, I'm considering moving to something like this instead:</p>\n<div class=\"codehilite\"><pre><span></span>     &lt;fullUrl value=&quot;http://example.org/not-a-fhir-server/Patient/1&quot;/&gt;\n</pre></div>\n\n\n<p>My question is, does this add value by identifying the resource as a Patient and allowing for relative references from the FHIR base of <a href=\"http://example.org/not-a-fhir-server\" target=\"_blank\" title=\"http://example.org/not-a-fhir-server\">http://example.org/not-a-fhir-server</a>, or does it imply a false promise that the patient is actually accessible at that URL? Would like to hear others thoughts on this. </p>",
        "id": 153890241,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1495043135
    },
    {
        "content": "<p>If the reference is inside a Bundle, you already know it's a Patient because you can resolve the reference without doing a query.  A fake URL is going to prompt systems to try to resolve it, at least in some cases, which means you'd be triggering a performance hit.  The recommendation is to use a UUID and I don't see any reason to not do that.</p>",
        "id": 153890243,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1495043719
    },
    {
        "content": "<p>Thanks Lloyd. One other reason I am considering this approach is that I am using XSLT, and am currently using a Java extension to generate the UUIDs, whereas with the URL-based approach I can simply use generate-id() to create resource ids that are unique within the Bundle. </p>",
        "id": 153890246,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1495044030
    },
    {
        "content": "<p>I'd stick with UUID.  If it's a URL, the expectation is that it <em>should</em> be resolvable.  Obviously servers go down, users don't have permissions, etc.  But it's definitely supposed to be resolvable.</p>",
        "id": 153890248,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1495045325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> Are UUIDs the preferred/only method to reference other resources within bundle?  Are there any rules around the generation of a uuid for this purpose?</p>",
        "id": 153914134,
        "sender_full_name": "Ken Sinn",
        "timestamp": 1508175471
    },
    {
        "content": "<p>No, you can use regular urls as well. Check the rules here: <a href=\"http://hl7.org/fhir/http.html#2.21.0.17.2\" target=\"_blank\" title=\"http://hl7.org/fhir/http.html#2.21.0.17.2\">http://hl7.org/fhir/http.html#2.21.0.17.2</a></p>",
        "id": 153914138,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1508179029
    },
    {
        "content": "<p>If you're using a UUID, then normal UUID-generation rules apply - i.e. use an algorithm that should ensure global uniqueness.  Good practice is for the same resource instance to have the same UUID if sent in multiple Bundles, but that's not a requirement.</p>",
        "id": 153914229,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1508198582
    },
    {
        "content": "<p>(But if the same UUID does appear in distinct Bundle instances, it should definitely be on the same resource instance :))</p>",
        "id": 153914230,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1508198607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> Could you point me to an example of regular urls being used? Is this the \"fake\" URL as mentioned above? Again, this is in the case of a local resource within a bundle only.</p>",
        "id": 153914442,
        "sender_full_name": "Ken Sinn",
        "timestamp": 1508254042
    },
    {
        "content": "<p>If the identifier is only valid within the scope of the bundle, then it needs to be a UUID.  If you used URLs, the expectation is that they would resolve outside the Bundle to the resource.</p>",
        "id": 153914468,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1508259432
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> !</p>",
        "id": 153914480,
        "sender_full_name": "Ken Sinn",
        "timestamp": 1508262635
    },
    {
        "content": "<p>Take a look at <a href=\"http://hl7.org/fhir/bundle-transaction.xml.html\" target=\"_blank\" title=\"http://hl7.org/fhir/bundle-transaction.xml.html\">http://hl7.org/fhir/bundle-transaction.xml.html</a>.</p>\n<p>If a bundle would contain a fullUrl \"  &lt;fullUrl value=\"http://example.org/fhir/Patient/123\"/&gt; \" like it does here and other may reference it. However, if the entry.request.method would be a POST, it would get assigned a new id (you might not even be <a href=\"http://example.org\" target=\"_blank\" title=\"http://example.org\">http://example.org</a>) - and all references to this fullUrl in other parts of the bundle would get updated to this new id.  It is not necessary for the fullUrl to be a UUID in this case - though it is user friendlier since it clearly indicates this is a \"new\" resource.</p>",
        "id": 153914586,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1508319027
    },
    {
        "content": "<p>Yes, if the resource is created by the bundle, then the refs in the bundle also need to be updated.<br>\nSo this needs to be careful of the order of processing...</p>",
        "id": 153918838,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1510313516
    }
]