[
    {
        "content": "<p>I’m wondering how the FHIR mimeTypes (e.g. <code>application/fhir+json</code>) are different from <br>\ntheir standard counterparts (e.g. <code>application/json</code>) and why they exist?</p>\n<p>If I make a request to a FHIR server that responds with those custom FHIR mimeTypes, it won’t  know what to do with the content and thus downloads the content as a file. This makes it difficult to interact with FHIR servers using browsers. </p>\n<p>I know the spec does state: <code>If a client provides a generic mime type in the Accept header (application/xml, text/json, or application/json), the server SHOULD respond with the requested mime type, using the XML or JSON formats described in this specification as the best representation for the named mime type (except for binary - see the note on the Binary resource)</code>. But, why not use the standard mimeTypes and then encode the fhirVersion and other fhir info in headers rather than a custom mimeType and mimeType parameter?</p>",
        "id": 179462761,
        "sender_full_name": "Natasha Singh",
        "timestamp": 1572460483
    },
    {
        "content": "<p>Some servers might well be able to spit out v2, CDA and FHIR content - any of which could be XML.  FHIR is aimed primarily at software, not browsers.  The importance of the software understanding what type of data it's getting (and being able to ask for the type of data it wants) is more important than how nicely browsers behave with the endpoints (given that browsers are only going to be used by developers messing around testing APIs anyhow).</p>",
        "id": 179466151,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572462364
    },
    {
        "content": "<p>For JSON, there are some different rules around encoding/decoding (e.g., <a href=\"http://hl7.org/fhir/json.html#primitive\" target=\"_blank\" title=\"http://hl7.org/fhir/json.html#primitive\">decimal precision in primitves</a>).<br>\nFor XML, fhir+xml contains many constraints over generic XML.</p>\n<p>More generally, having a specific MIME type is a way of establishing the baseline for support (e.g., an implementer doesn't have to check to see if a JSON has the 'resourceType' field, deal with any other XML namespace, etc.).  This is pretty useful for both clients and servers, during sending and receiving.</p>\n<p>With all of that said, resources are generally not considered fit for human consumption, so outside of development what would be the use case?</p>",
        "id": 179466402,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1572462537
    },
    {
        "content": "<blockquote>\n<p>More generally, having a specific MIME type is a way of establishing the baseline for support </p>\n</blockquote>\n<p>I guess I was just wondering why you have to use MIME type to achieve this (a signal to implementers that the JSON/XML content adheres to the fhir spec) rather than a header. </p>\n<blockquote>\n<p>For JSON, there are some different rules around encoding/decoding</p>\n</blockquote>\n<p>Although there are different rules on encoding/decoding and/or different constraints on the XML, the actual content still looks to be valid XML and JSON? At first I thought the custom mimeType was an indicator of syntactically different JSON or XML </p>\n<blockquote>\n<p>With all of that said, resources are generally not considered fit for human consumption, so outside of development what would be the use case?</p>\n</blockquote>\n<p>Not sure, but I think it does make development harder if standard tools to view JSON/XML can't be used the way you would expect. Luckily, Postman seems to be able to intelligently interpret the <code>application/fhir+json</code> Content-Type (or maybe just infer based on the content itself) and still display it in JSON</p>",
        "id": 179470538,
        "sender_full_name": "Natasha Singh",
        "timestamp": 1572465318
    },
    {
        "content": "<p>Mime type is how content negotiation happens with HTTP</p>",
        "id": 179473941,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572467557
    },
    {
        "content": "<p>There are numerous mime types defined that are different variations of XML</p>",
        "id": 179473983,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572467587
    }
]