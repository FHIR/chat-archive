[
    {
        "content": "<p>When parsing a Batch Bundle request how should validation be handled?<br>\nI see two ways this could be handled:</p>\n<ul>\n<li>Validation is run on the whole Batch request to ensure it is valid FHIR and a validation error fails the entire batch.</li>\n<li>Validation is run on the Bundle component of the Batch request to ensure it is a valid Batch Bundle and then each request in the Batch is validated independently. A validation error on the Bundle fails the Batch, but validation errors on the included requests only fail that part of the Batch.</li>\n</ul>\n<p>Is there a consensus on which is correct behavior?</p>",
        "id": 244305694,
        "sender_full_name": "RB Johnson",
        "timestamp": 1624982715
    },
    {
        "content": "<p>Grahame's and Vonk's test servers and the Azure API for FHIR  fail the entire Batch for a validation error in one of the requests. If this is the consensus among implementers, can it be reflected in the spec?</p>",
        "id": 244307076,
        "sender_full_name": "RB Johnson",
        "timestamp": 1624983333
    },
    {
        "content": "<p>It's up to a server to decide how (and if) it wants to validate.  Some types of errors may prevent parsing of the instance at all.  Depending on parsing strategy, it may be possible to process parts of the batch prior to detecting the bad syntax.  Right now, we assume that the entire thing is parsed before any responses are provided because a conformant (non global fail) response requires a matching number of entries in the response Bundle, and you can't really do that unless you've at least been able to parse the whole thing.  Beyond that, whether you validate everything before you start processing or validate each entry or do a mixture is up to you.</p>",
        "id": 244314775,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1624986540
    },
    {
        "content": "<p>I agree that failing the entire batch for any validation error is generally the way to go - for one thing, can you really check that there are no inter-dependencies among batch entries if some of them aren't even valid?</p>",
        "id": 244319764,
        "sender_full_name": "Paul Church",
        "timestamp": 1624988747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197072\">Paul Church</span> <a href=\"#narrow/stream/179166-implementers/topic/Batch.20validation/near/244319764\">said</a>:</p>\n<blockquote>\n<p>I agree that failing the entire batch for any validation error is generally the way to go - for one thing, can you really check that there are no inter-dependencies among batch entries if some of them aren't even valid?</p>\n</blockquote>\n<p>The Spec says:</p>\n<blockquote>\n<p>The actions may be performed independently as a \"batch\", or as a single atomic \"transaction\" where the entire set of changes succeed or fail as a single entity</p>\n</blockquote>",
        "id": 244320539,
        "sender_full_name": "Eric Haas",
        "timestamp": 1624989066
    },
    {
        "content": "<p>so my expectation would be counter to <span class=\"user-mention\" data-user-id=\"197072\">@Paul Church</span></p>",
        "id": 244320590,
        "sender_full_name": "Eric Haas",
        "timestamp": 1624989098
    },
    {
        "content": "<p>Yes, usually batch bundles are independent events within and transactions are atomic and all fail if one fails.</p>",
        "id": 244320608,
        "sender_full_name": "David Pyke",
        "timestamp": 1624989111
    },
    {
        "content": "<p>So, you can validate a batch in parallel and fail those (with resulting status) that are invalid and a transaction bundle is validated all at once and then the transactions processed</p>",
        "id": 244320774,
        "sender_full_name": "David Pyke",
        "timestamp": 1624989180
    },
    {
        "content": "<p>As far as I'm concerned, a Bundle is a single resource that either passes or fails validation.</p>\n<p>If some contained resource fails validation, its container can't go on as if it was a valid resource. Bundles are no different.</p>",
        "id": 244321506,
        "sender_full_name": "Paul Church",
        "timestamp": 1624989485
    },
    {
        "content": "<p>Batch and Transaction Bundles are envelopes.  The Bundle itself needs to be valid but if the entry resource fails, the rest of the batch entries can still be processed</p>",
        "id": 244321630,
        "sender_full_name": "David Pyke",
        "timestamp": 1624989547
    },
    {
        "content": "<p>Are there any implementations that will process some of the batch entries when some don't validate?</p>",
        "id": 244323504,
        "sender_full_name": "Paul Church",
        "timestamp": 1624990230
    },
    {
        "content": "<blockquote>\n<p>I agree that failing the entire batch for any validation error is generally the way to go - for one thing, can you really check that there are no inter-dependencies among batch entries if some of them aren't even valid?</p>\n</blockquote>\n<p><a href=\"http://build.fhir.org/http.html#brules\">Batch rules are quite prescriptive</a> and strongly lean towards independent processing of each entry, and not failing the entire batch, but I don't know if they are practical:</p>\n<blockquote>\n<p>For a batch, there SHALL be no interdependencies between the different entries in the Bundle that cause change on the server. The success or failure of one change SHOULD not alter the success or failure or resulting content of another change. Servers SHOULD validate that this is the case. Note that it is considered that servers execute the batch in the same order as that specified below for transactions, though the order of execution should not matter given the previous rule.</p>\n<p>References within a Bundle.entry.resource to another Bundle.entry.resource that is being created within the batch are considered to be non-conformant.</p>\n<p>When processing the batch, the HTTP response code is 200 Ok if the batch was processed correctly, regardless of the success of the operations within the Batch. To determine the status of the operations, look inside the returned Bundle. A response code on an entry of other than 2xx (200, 202 etc) indicates that processing the request in the entry failed.</p>\n</blockquote>",
        "id": 244323781,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1624990343
    },
    {
        "content": "<p>If you want to write A,B and C in a batch bundle to serverX and server will only accept A, but A references B and C I assume for referential integitry reasons you would fails the whole batch bundle.  but what if A,B,C were completely independent of each other?</p>",
        "id": 244324374,
        "sender_full_name": "Eric Haas",
        "timestamp": 1624990607
    },
    {
        "content": "<p>References within a Bundle.entry.resource to another Bundle.entry.resource that is being created within the batch are considered to be non-conformant.</p>",
        "id": 244324440,
        "sender_full_name": "David Pyke",
        "timestamp": 1624990640
    },
    {
        "content": "<p>They must be completely independent</p>",
        "id": 244324474,
        "sender_full_name": "David Pyke",
        "timestamp": 1624990667
    },
    {
        "content": "<p>the batch itself is a bundle; servers are OK to reject the entire batch if the bundle is not valid</p>",
        "id": 244326863,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1624991627
    }
]