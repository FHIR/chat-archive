[
    {
        "content": "<p>We're working on an reference implementation that mimicks PAS and EPR implementations. It's  based on implementations from the mid 90's to now, so we've naturally gone down the RDBMS SQL route. As expected, mapping FHIR resources to SQL tables has not proved to be an issue - so Patient resource is Patient table, Observation is Observation, etc.<br>\n However in a few cases where the FHIR resource/SQL table approach isn't appropiate and doesn't  sit fully within the EPR/PAS model. For example Composition, the resources it holsd can be stored in a EPR/PAS model but the Composition itself should also be stored intact as a possibly in a document/NoSQL database as it also records a point in time.</p>",
        "id": 153915185,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1508664850
    },
    {
        "content": "<p>The model appears to be a correct representation of how these are currently handled (loosely - as Composition may be in different alternative forms such as PDF, image, Hl7v3/CDA). DiagnosticReport could be handled similarly with Observations entered into the EPR/PAS but is also stored in it's entirety.</p>",
        "id": 153915186,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1508665236
    },
    {
        "content": "<p>So if this representation is correct, I would use the EPR/PAS (SQL) to search for Observations, the Document store (NoSQL) to search for Compositions and DiagnosticReports. I wouldn't search the Document store for Observations - that could be done but is a more modern way of working.</p>",
        "id": 153915187,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1508665702
    },
    {
        "content": "<p>So if my model is correct, how do I go from the Observation to the Composition or DiagnosticReport?</p>",
        "id": 153915188,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1508665780
    },
    {
        "content": "<p>I could use an extension but I was expecting a Reference in Observation to Composition or DiagnosticReport as you would have with the more PAS/EPR focused resources.</p>",
        "id": 153915189,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1508666196
    },
    {
        "content": "<p>On a similar note: most PAS/EPR's have the idea of Concept, CodeSystems and ValueSets which is seen in the FHIR (the logical model fits well). Most of EPR/PAS's I worked with have the basics of a resource API on Concept but FHIR has an operations/RPC interface on CodeSystem and no seperate Concept resource. I think I'm seeing three seperate API styles within and some points when the resource I’m working with belongs to a different style  - styles being RPC (terminology), Message API (document) and Resource API as defined here <a href=\"http://www.servicedesignpatterns.com/WebServiceAPIStyles\" target=\"_blank\" title=\"http://www.servicedesignpatterns.com/WebServiceAPIStyles\">http://www.servicedesignpatterns.com/WebServiceAPIStyles</a></p>",
        "id": 153915190,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1508667653
    },
    {
        "content": "<p>Why would you need to go from the Observation to the Composition? Composition contains a reference to the Observation it contains. If you're talking about \"This Observation was taken from (shredded) from FHIR document X\",  then in FHIR that would be Provenance. I would hardly expect a legacy system to have a notion about Provenance. But I guess the latter is not your reason for whishing to go from Observation to Composition. Could you elaborate on the reason?</p>",
        "id": 153915193,
        "sender_full_name": "René Spronk",
        "timestamp": 1508672928
    },
    {
        "content": "<p>Yes it is provenance/audit, it is tracing where an obvservation came from. DiagnosticReport is a better example, on the EPR's I worked with in the 90's the would have link to the report that delivered the Observation. That was represented in the UI, a user had the option of viewing the original report (from Observations). I'd be tempted to code Composition similarly, have a link from Observation's to Document (Composition, DocumentReference, etc).</p>",
        "id": 153915318,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1508744667
    },
    {
        "content": "<p>On DB level it's a bit more clearer. After I've normalised the table I would create a link from Observation's to DiagnosticReport table, I would not have a DiagnosticReportObservations link table as per the FHIR Model.</p>",
        "id": 153915319,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1508744802
    },
    {
        "content": "<p>p.s. I'm actually looking at what database model to use for resources.</p>",
        "id": 153915320,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1508745568
    },
    {
        "content": "<p>and the answer I've got at present would be resources (SQL) and documents (NoSQL) with a few grey areas.</p>",
        "id": 153915321,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1508745662
    },
    {
        "content": "<p>so we always anticipate that something is able to follow the indexes in reverse; if you build a database where the resources are your master form, then you <em>must</em> also have an index so that you can follow all the links in the reverse direction (from target to source)</p>",
        "id": 153915334,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508754146
    },
    {
        "content": "<p>if, in your persistence model, you chose to reverse some or all links... that's your choice. There's engineering optimization issues, and we don't design for them, since we are describing an interface</p>",
        "id": 153915336,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508754230
    },
    {
        "content": "<p>and we can get to the reports via ProcedureRequest (which fits with the model I'm using for an EPR)</p>",
        "id": 153915343,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1508755748
    }
]