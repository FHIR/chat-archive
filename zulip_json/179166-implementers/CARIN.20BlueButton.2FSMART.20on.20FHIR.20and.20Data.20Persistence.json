[
    {
        "content": "<p>Hello, I am working for a health plan that is newly adopting a SMART on FHIR flow (CARIN BlueButton) to provide a few key resources (EOB and Coverage) to app developers. This process will involve exposing a few FHIR APIs that will provide read only access to these resources. </p>\n<p>My question is regarding how others have implemented this soulution. I am struggling with the idea of using a full FHIR server to persist the many resources that are involved to build the EOB and Coverage responses. Instead I am leaning toward the idea of building these response objects on demand using existing data stores that are available at my organization. The benefits in my mind for building responses on demand from non-FHIR resources is that we will not need to maintain a separate copy of all of our Patient data in a FHIR server. </p>\n<p>At a high level, am I thinking about this correctly? Is it wise to build FHIR resources on-demand rather than creating the resources before hand? My understanding is that many healthplans and EHR vendors only expose a small number of FHIR resources and mostly deal with read only operations. This leads me to believe that FHIR resources are not being used as the backend, but instead FHIR is primarily being used as an interoperability layer. For further context I was thinking I would use a R4 FHIR client (<a href=\"http://Fire.ly\" target=\"_blank\" title=\"http://Fire.ly\">Fire.ly</a> .NET client) to construct the needed resources for a EOB and to return a bundle containing all relevant information for a patient, rather than constructing a bundle through querying already persisted resources contained under a FHIR server. </p>\n<p>Thanks!</p>",
        "id": 179344492,
        "sender_full_name": "Josh Lamb",
        "timestamp": 1572365255
    },
    {
        "content": "<p>Building the FHIR objects on the fly is a viable (and common) strategy.  If you're doing SMART, the expectation is that you'll respond to standard FHIR queries, so you'll need to be able to search on standard criteria and return resources individually as requested by the SMART app</p>",
        "id": 179346731,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572366566
    },
    {
        "content": "<p>Thanks for the input!</p>",
        "id": 179349653,
        "sender_full_name": "Josh Lamb",
        "timestamp": 1572368273
    },
    {
        "content": "<p>And if you're on the dotnet stack, look at the fhir-net-web-api project on github for some examples on doing a facade.<br>\nThere are other options too.<br>\nCheck the <a class=\"stream\" data-stream-id=\"179171\" href=\"/#narrow/stream/179171-dotnet\">#dotnet</a> stream if you want to ask questions in that specifically.</p>",
        "id": 179487219,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1572477523
    },
    {
        "content": "<p>This is such a common strategy that we created Vonk FHIR Facade for it. See the <a href=\"http://docs.simplifier.net/vonk/facade/facade.html\" target=\"_blank\" title=\"http://docs.simplifier.net/vonk/facade/facade.html\">docs</a> for details.</p>",
        "id": 179516754,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1572516523
    },
    {
        "content": "<p>Thanks for the reply. I am currently trying out a few server options, Azure FHIR Api and Vonk, in case we decide to replicate our data within a FHIR store. I will try out a facade type approach after.</p>",
        "id": 179572817,
        "sender_full_name": "Josh Lamb",
        "timestamp": 1572553616
    }
]