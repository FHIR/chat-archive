[
    {
        "content": "<p>Is there a need for an extension to Coding to tag a specific code value as must-understand? In the security label environment we have a need to assure that a recipient understands the 'handling obligations', as handling obligations can't be ignored... Is there a need beyond this?</p>",
        "id": 154013823,
        "sender_full_name": "John Moehrke",
        "timestamp": 1540929819
    },
    {
        "content": "<p>we would generally say that this is a definitional thing, not something on the coding itself?</p>",
        "id": 154013827,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1540930754
    },
    {
        "content": "<p>I thought all required bindings are must-understand.</p>",
        "id": 154013828,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1540931070
    },
    {
        "content": "<p>no, in fact.</p>",
        "id": 154013829,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1540931272
    },
    {
        "content": "<p>so you would say that it is sufficient that the vocabulary definition of that code is clear it must be understood? Which assumes that all implementers look through all possible vocabulary for these must-understand codes and puts special handling into their code to understand them?</p>",
        "id": 154013832,
        "sender_full_name": "John Moehrke",
        "timestamp": 1540931682
    },
    {
        "content": "<p>we've documented a few as must-understand in the narrative of the security labels page, and referenced that from the safety check list. </p>\n<p>More generally, the way to do this to define a must-understand binding using <a href=\"http://build.fhir.org/extension-elementdefinition-minvalueset.html\" target=\"_blank\" title=\"http://build.fhir.org/extension-elementdefinition-minvalueset.html\">http://build.fhir.org/extension-elementdefinition-minvalueset.html</a></p>",
        "id": 154013834,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1540931965
    },
    {
        "content": "<p>What is the difference from required binding? Required binding is \"To be conformant, codes in this element SHALL be from the specified value set.\"</p>",
        "id": 154013838,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1540932207
    },
    {
        "content": "<p>the main binding: these are the codes that you can use<br>\nthe min binding: these are the codes that you must understand</p>",
        "id": 154013840,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1540932249
    },
    {
        "content": "<p>Do you mean that no all codes from that required value set are used for binding?</p>",
        "id": 154013841,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1540932306
    },
    {
        "content": "<p>For example, 10 codes in the value set but only 5 are used for the binding so the min binding has 5.</p>",
        "id": 154013842,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1540932420
    },
    {
        "content": "<p>I'm not sure what 'used for binding' means here . Let's take an example: you are writing a medication management system, and you say \"my system doesn't use or allow or support the medication request status 'cancelled'\": are you conformant or not?</p>",
        "id": 154013843,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1540932493
    },
    {
        "content": "<p>since the main spec says nothing about whether you must support cancelled medications, you are clearly conformant. But an implementation guide might create a minValue set binding, and put cancelled on the list. In which case, you would not be conformant to that implementation guide</p>",
        "id": 154013844,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1540932556
    },
    {
        "content": "<p>in my security case, the must-understand is policy based. It might not be a thing that is defined in the vocabulary.  Such as DELAU (Delete after use) might be informatively put onto a resource or bundle, but someone else might want to stress that the data shall not be accepted (error code should be returned) if the recipient can't guarantee that they will delete after use.  Not sure this is proper.. just an example that comes to mind where the vocabulary binding can't be universally made, nor can the vocabulary meaning be universally made.</p>",
        "id": 154013860,
        "sender_full_name": "John Moehrke",
        "timestamp": 1540935436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Your example is the same as what I meant. But how  a system state \"my system doesn't use or allow or support the medication request status 'cancelled'\". I don't think there's way to do that in CapabilityStatement.</p>",
        "id": 154013861,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1540935634
    },
    {
        "content": "<p>no there's not. You could propose a new extension for non-supported-valueset to vocab, I don't think this notion exists anywhere else</p>",
        "id": 154013862,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1540935734
    },
    {
        "content": "<p>For a required binding on code, if you constrain to a value set that excludes \"cancelled\", you're asserting you won't accept that code</p>",
        "id": 154013866,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540936039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  For example,  in Claim resource, Claim.status has required binding to value set fm-status. If I want to say my server does NOT support cancelled status, can I create a value set, my-fm-status, which exclude cancelled status and then change the required binding of Claim.status to my-fm-status? I think that violate conformance rules.</p>",
        "id": 154013960,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1540952328
    },
    {
        "content": "<p>you can change the binding to be more restrictive - we only use some of the codes.  You can't include codes that are not valid</p>",
        "id": 154013962,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1540952975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> &gt;non-supported-valueset content is exactly what V2 does with specifying that certain codes in a code set are not allowed in a particular implementation guide. I don't know of any FHIR approach that aligns with this but it does make sense if we use MIN to mean \"must understand and support.\"</p>\n<p>Do we all agree (I would) that minValueSet defines a value set with concepts the implementer \"must understand and support\"? I'd like to better understand how this extension should be used/</p>",
        "id": 154017214,
        "sender_full_name": "Robert McClure",
        "timestamp": 1541782454
    },
    {
        "content": "<p>I agree that </p>\n<blockquote>\n<p>minValueSet defines a value set with concepts the implementer \"must understand and support\"</p>\n</blockquote>\n<p>That's the definition...</p>",
        "id": 154017272,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541795783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span>: late to this thread but this seems to be a matter of authorization policy and orthogonal to the actual underlying FHIR data structure. The XSPA 2.0 draft defines attributes for declaring supported obligations and refrains by a requester; as part of the authorization, a server can take these attributes into account in determining whether or not –or to what extent– it would share the data with that requester . I think the new vectors of trust RFC can also be leveraged for implementing this type of policies.</p>",
        "id": 154018650,
        "sender_full_name": "Mohammad Jafari",
        "timestamp": 1542243553
    }
]