[
    {
        "content": "<p>According the <a href=\"https://www.hl7.org/fhir/http.html#trules\">Transaction Processing Rules</a> transaction actions should either fail or succeed completely. </p>\n<blockquote>\n<p>For a transaction, servers SHALL either accept all actions and return a 200 OK, along with a response bundle (see below), or reject all resources and return an HTTP 400 or 500 type response.</p>\n</blockquote>\n<p>For write actions (create, update, delete, ...) this atomicity is clear. However transactions can also contain reads. In the <a href=\"http://www.hl7.org/fhir/bundle-transaction.xml.html\">transaction bundle example</a> one can find the statement:</p>\n<blockquote>\n<p>can also do read-only operations. </p>\n<p>Note that these do not 'fail' - see discussion on transaction <br>\natomicity for further information </p>\n</blockquote>\n<p>I can't find a section in the documentation that discusses the transaction atomicity particular for reads.</p>\n<p>If I post transaction bundles with reads to HAPI, I get a transaction-response bundle with the individual errors in it's entries rather than a complete failure on the post. If I mix reads and writes, a failure on one write will result in a complete failure but failures on reads will result in successful writes and individual failed reads.</p>\n<p>So it seems that failed reads don't result in a failed transaction but failed writes do. Is this the expected behaviour? Is there a section in the documentation that makes this behaviour clear?</p>",
        "id": 248322654,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1628065466
    },
    {
        "content": "<p>I think it's <em>reasonable</em> behavior in that reads don't affect state, so their success or failure don't actually impact database state.  Do you have a use-case where a read failure should legitimately cause the transaction to roll back?  Also agree that having better documentation would be good, so feel free to submit a change request either way.</p>",
        "id": 248414183,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628114266
    },
    {
        "content": "<p>That's a tricky one. My gut reaction was that it should fail on the grounds that \"something is wrong\" in the transaction but I don't know of a use case where it's really necessary to roll back.</p>",
        "id": 248414589,
        "sender_full_name": "Paul Church",
        "timestamp": 1628114490
    },
    {
        "content": "<p>I'm not arguing that a server <em>couldn't</em> fail the transaction.  Just that it's not necessarily wrong if they don't fail because of an error on a GET.</p>",
        "id": 248414926,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628114684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> I had the request from someone to implement the atomic failure behaviour on reads in Blaze.  Because the documentation was not super clear, I tested in HAPI and Vonk. Both servers didn't fail on reads.</p>\n<p>I like your argument that failing reads do not effect the state of the server. On top of that, in my database architecture which isn't the usual RDBMS, it would be really inefficient to implement a rollback on failing reads. So I will submit a change request.</p>",
        "id": 248447091,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1628149219
    },
    {
        "content": "<p>I could see where an operation might be defined this way, but it would be explicitly defined based on use-case and the operations functional need. At the generic transaction level, I would tend to agree with Lloyd that a fail on a GET should not have affected any server state so would not be logical to rollback the transaction. I wonder if those that are looking for this behavior are actually defining something more than just a transaction, they are actually needing an operation?</p>",
        "id": 248468428,
        "sender_full_name": "John Moehrke",
        "timestamp": 1628165552
    }
]