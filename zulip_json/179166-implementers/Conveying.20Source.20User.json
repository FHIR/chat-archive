[
    {
        "content": "<p>I'm working with an implementer that has a trusted system &lt;--&gt; system FHIR interface, secured by certificates. They need for the client system to inform the server system about the user it is acting on behalf of - without getting that user into the picture (e.g. OAuth). It's for audit purposes. </p>",
        "id": 153893308,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1497321197
    },
    {
        "content": "<p>I haven't seen any standard pattern for this. Some ideas come to mind:<br>\n- an http x- header (seems.... suspicious)<br>\n- using the provenance header (seems heavy)<br>\n- using an AuditTrail event (really?)<br>\n- .. something else?</p>",
        "id": 153893309,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1497321277
    },
    {
        "content": "<p>Is this to be expected to work in a standardized way outside of a trusted environment? I would think not really. Thus, I doubt whether we should even try to standardize this. With Vonk we offer extensibility points to handle whatever means you want to use to convey this user and turn it into something you may want to save or log on the other end.</p>",
        "id": 153893342,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1497341160
    },
    {
        "content": "<p>Agree that we wouldn't standardise this.  I'm just asking about best practices so I have a sense of what people are thinking</p>",
        "id": 153893352,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1497348165
    },
    {
        "content": "<p>Grahame, given that the real authentication is system to system... anything conveyed in the communication is equally trust-able.  This goes for parameters equally to some statement of the user identity... Clearly security would recommend a security token (SAML, OAuth, Kerberos, etc); but reality often dictates that more simple means are sometimes used. My experience has seen a simple username string carried in the http auth header (there is a flavor with just the username), carried s a query parameter, or carried as part of a call-context. Each of them is simply a string, being asserted by the requesting system, where the requesting system is strongly authenticated and authorized with channel encryption/integrity protection (aka Mutual-Authenticated-TLS).</p>",
        "id": 153893392,
        "sender_full_name": "John Moehrke",
        "timestamp": 1497367531
    },
    {
        "content": "<p>In Ontario, we deal with similar trusted system to system interfaces where we convey user information along with under-authority-of and on-behalf-of information in the security tokens (SAML &amp; JWT) .</p>",
        "id": 153893576,
        "sender_full_name": "Igor Sirkovich",
        "timestamp": 1497384056
    },
    {
        "content": "<p>k thanks. We'll go JWT</p>",
        "id": 153893590,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1497391264
    },
    {
        "content": "<p>In the header?</p>",
        "id": 153896449,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1499653109
    },
    {
        "content": "<p>yes</p>",
        "id": 153896456,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1499664046
    },
    {
        "content": "<p>a JWT (openID connect one) in the header to identify the user, and an SSL cert to identify the system</p>",
        "id": 153896457,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1499664070
    },
    {
        "content": "<p>Cool, thanks</p>",
        "id": 153896458,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1499666275
    }
]