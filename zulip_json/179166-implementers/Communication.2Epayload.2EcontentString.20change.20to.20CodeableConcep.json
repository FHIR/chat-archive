[
    {
        "content": "<p>I see in <a href=\"http://build.fhir.org\" target=\"_blank\" title=\"http://build.fhir.org\">build.fhir.org</a> that Communication.payload.contentString (type string) has been changed to Communication.payload.contentCodeableConcept (type codeable concept). </p>\n<p>For those of us implementing the current contentString in FHIR4, for FHIR5 would this just map directly to Communication.payload.contentCodeableConcept.text?</p>",
        "id": 171541910,
        "sender_full_name": "Tim Berezny",
        "timestamp": 1563904620
    },
    {
        "content": "<p>Yes</p>",
        "id": 171546143,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1563907464
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> (and future readers)<br>\nI was discussing this with <span class=\"user-mention\" data-user-id=\"193959\">@Tim Berezny</span> .<br>\nI realize that payload.contentCodeableConcept.text is structurally equivalent to payload.contentString, but is it conceptually the same?</p>\n<p>As I understand, codableConcept is used to represent values that can be classified with particular terminologies or ontologies.<br>\nIt seems unlikely to me that payload of a communication is a specific terminology. In our specific case, we intend to use it to capture a record of the sent message - usually a few sentences, or a paragraph.</p>\n<p>My fear is that dropping the contentString creates a conceptual barrier to using this resource easily, in favour of reducing perceived complexity in the form the available usage options? <br>\nAm I being overly cautious?</p>",
        "id": 171985413,
        "sender_full_name": "Geoff Ramsay",
        "timestamp": 1564435828
    },
    {
        "content": "<p>With CodeableConcept, there's an expectation that you can send free text when no appropriate codes are available.  Everything as text is just a specialization of that case where no value set is defined.</p>",
        "id": 171993392,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1564443880
    },
    {
        "content": "<p>If the Communication.payload were a code, the code would be defining the type of information communicated - it wouldn't be indicating that the code was communicated</p>",
        "id": 171993411,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1564443925
    },
    {
        "content": "<p>My fear is that we're using something designed to classify (codeableConcept) for the purpose of sending free text content, and that that will increase the cognative load required to use the resource. (Is that a silly fear? Do I just have PTSD from my HL7v3 implementation history?)</p>\n<p>Will it be obvious to new FHIR users that they can use this resource for the purpose of transmitting textual messages?<br>\nIs there a large upside to eliminating contentString?</p>",
        "id": 172039139,
        "sender_full_name": "Geoff Ramsay",
        "timestamp": 1564494655
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 172042493,
        "sender_full_name": "Geoff Ramsay",
        "timestamp": 1564496715
    },
    {
        "content": "<p>Failure! Third party responded with 403</p>",
        "id": 172042496,
        "sender_full_name": "trc_slack_bot",
        "timestamp": 1564496716
    },
    {
        "content": "<p>The problem with allowing string and CodeableConcept is that there's then two different mechanisms to send free text that are semantically identical - valueString and valueCodeableConcept.text.  Thus FHIR prohibits having a choice of CodeableConcept and string.</p>",
        "id": 172045641,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1564498541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> do we know what trc_slack_bot is?</p>",
        "id": 172045731,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1564498577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  (oops, that was me, I tried to pipe the discussion to a Slack channel to track updates, but the slack outbound webhooks in Zulip don't work! I've since deleted that bot)</p>",
        "id": 172048235,
        "sender_full_name": "Geoff Ramsay",
        "timestamp": 1564500413
    },
    {
        "content": "<p>FHIR prohibits? In principle?<br>\nTechnically contentAttachment.title is a string.</p>",
        "id": 172048705,
        "sender_full_name": "Geoff Ramsay",
        "timestamp": 1564500766
    },
    {
        "content": "<p>The FHIR publication tooling prohibits data type choices from containing both 'string' and 'CodeableConcept'.  There's no problem having 'CodeableConcept' and 'Attachment'.</p>",
        "id": 172050236,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1564501895
    },
    {
        "content": "<p>Can I browse those publication rules publically?</p>",
        "id": 172061880,
        "sender_full_name": "Geoff Ramsay",
        "timestamp": 1564510167
    },
    {
        "content": "<p>I guess if you consider reading through the code on Github \"publicly\".  :)  The change to the tooling was approved as part of the resolution of a change request.  I don't believe we have any further methodology documentation there though.</p>",
        "id": 172063512,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1564511326
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 172127311,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1564579892
    },
    {
        "content": "<blockquote>\n<p>The FHIR publication tooling prohibits data type choices from containing both 'string' and 'CodeableConcept'.  There's no problem having 'CodeableConcept' and 'Attachment'.</p>\n</blockquote>\n<p>Doesn't Observation value and component allow both valueString &amp; valueCodeableConcept? Or is this referring to something else?</p>",
        "id": 176089739,
        "sender_full_name": "Diego Bosca",
        "timestamp": 1568892534
    },
    {
        "content": "<p>Here is the guidance for payload codes</p>\n<div class=\"codehilite\"><pre><span></span>The content can be codified or textual. As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn&#39;t appropriate.\n\nIf the content isn&#39;t codified, contentCodeableConcept.text can be used.\n\nWhen using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.\n</pre></div>\n\n\n<p>I assume the codes could be for NLP or something like that but I personally<br>\nwould prefer codeableConcept as an extension.  I think  text is  more common<br>\nthan codes and if the only reason to use<br>\nCommunication.payload.contenCodeableConcept is to use the text element in many<br>\ncases then it should be a choice of text instead. </p>\n<p>here is what is said about CodeableConcept.text:</p>\n<div class=\"codehilite\"><pre><span></span>A free text only representation of the concept without any coding elements is permitted if there is no appropriate code and only free text is available (and not prohibited by the implementation). For example, using text only, the\nObservation.valueCodeableConcept element would be:\n</pre></div>\n\n\n<p>I agree with the original poster.  The CodeableConcept.text is not a<br>\nreplacement for the actual content of the communication.  For example, \"Spoke<br>\nwith patient Y about problem Z and discussed a plan\" is not the same as a short<br>\nstring representing a concept that could be be replace by a code which is the<br>\nsituation the rule is trying to prevent.   The example  given in the specification <br>\ndoes exactly this and is seems wrong to me.   Communication.payload.text is - as<br>\npointed out implicitly by the previous poster - is IMO similar to the<br>\nvalueCodeableConcept and valueString elements.   they are not intended to represent the<br>\nsame things.  This is explained in the Observation Notes section.</p>",
        "id": 176151295,
        "sender_full_name": "Eric Haas",
        "timestamp": 1568935576
    }
]