[
    {
        "content": "<p>I was wondering what a fhir server should return when it receives a QuestionnaireResponse with logical errors in the answers. For example i want to know the maximum systolic blood pressure and the minimum blood pressure of the 1ste 24hours of ad admittion. What if the answer of the maximum blood pressure is lower then the minimum blood pressure? I don't want to reject the QA but i would like to send back a response with some kind of message that a problem has been detected. Should i use the OperationOutcome resource for this? </p>",
        "id": 153824320,
        "sender_full_name": "Eric van der Zwan",
        "timestamp": 1462257816
    },
    {
        "content": "<p>OperationOutcome would be the appropriate mechanism.  You can use it to send both errors and warnings</p>",
        "id": 153824321,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462261229
    },
    {
        "content": "<p>This is an interesting result.<br>\nWould this mean that I receive the OperationOutcome resource in the returned content that has the location of the actual saved QuestionnaireResponse resource in the headers?</p>",
        "id": 153824322,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462262165
    },
    {
        "content": "<p>I think there's a header to return the OperationOutcome in, actually</p>",
        "id": 153824323,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462262418
    },
    {
        "content": "<p>Do you know which header that is, <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> ? Haven't found it on the HTTP page. <code>OperationOutcome</code> otherwise should only be returned on 400+ (or within a Bundle) I think.</p>",
        "id": 153824359,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1462291962
    },
    {
        "content": "<p>I don't know what it is. There's a provenance header, but I think Lloyd is indudging in wish ful thinking on this one ;-)</p>",
        "id": 153824363,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462293922
    },
    {
        "content": "<p>I remember it being talked about.  It's possible it was never defined.</p>",
        "id": 153824402,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462324459
    },
    {
        "content": "<p>Yeah, this has been discussed but never turned into a thing...</p>\n<p>I think it's risky too. I have experimented with putting validation results in a header, and it seems like a lot of servers, proxies and clients don't like very long header values. I don't know that I think it's a good idea after all that.</p>",
        "id": 153824404,
        "sender_full_name": "James Agnew",
        "timestamp": 1462324612
    },
    {
        "content": "<p>My understanding was if you wanted to return warnings then you need to return the OperationOutcome resource. The header will still give the location of the actual resource that was created.<br>\nThis is then consistent with error conditions.</p>",
        "id": 153824405,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462324686
    },
    {
        "content": "<p>(I think)</p>",
        "id": 153824406,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462324697
    },
    {
        "content": "<p>I think James is right in that including a OperationOutcome in a header is dangerours since it can be large for a QR (in a bundle with other resources). Since people can fill in the QR the risk of multiple errors is  very possible. I've about 600 checks on the data... Although it would be hard to fail them all, 10 or 20 issues can easily found. Can i place the operationOutcome in de body of the message? Should i use something else?</p>",
        "id": 153824425,
        "sender_full_name": "Eric van der Zwan",
        "timestamp": 1462354971
    },
    {
        "content": "<p>I would just go with Brian's suggestion of returning an OperationOutcome with the warnings. If you need the stored QuestionnaireResponse for some reason afterward, you could always fetch it in a separate operation, but you shouldn't need that anyhow unless your server is modifying it in some way before saving it.</p>",
        "id": 153824427,
        "sender_full_name": "James Agnew",
        "timestamp": 1462359477
    },
    {
        "content": "<p>And clients should be able to handle this anyway, as that is what can occur if you use the Prefer header.<br>\nThe status of the return would also have a different result (for the errors, but I guess is a 201 for where there are warnings)</p>",
        "id": 153824428,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462362383
    },
    {
        "content": "<p>You'd just have to know to look for them.</p>",
        "id": 153824429,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462362393
    },
    {
        "content": "<p>For our client, we actually call the $validate operation before saving which is expected to return the operationoutcome, so don't normally expect to have issues on the actual save.</p>",
        "id": 153824430,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462362431
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhir/http.html#2.1.0.10.1\" target=\"_blank\" title=\"http://hl7.org/fhir/http.html#2.1.0.10.1\">http://hl7.org/fhir/http.html#2.1.0.10.1</a> is the section covering the reject updates calls</p>",
        "id": 153824431,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462362478
    },
    {
        "content": "<p>On looking at this list, the 403 is not actually Not Authorised, it is forbidden. 401 is Unauthorized. 403 is forbidden.<br>\n<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\" target=\"_blank\" title=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</a><br>\nWill log it.<br>\nAre any of the other servers returning 401s or 403s?<br>\n(I notice grahames server happily returns 401s for unauthorised as it should)</p>",
        "id": 153824432,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462362916
    },
    {
        "content": "<p>I'm not sure I like the proposal of returning <code>OperationOutcome</code> for status &lt; 400. The _Prefer_ header helps with that, server either returns nothing or the full resource. It'd be bad to sometimes receive something entirely different.</p>\n<p>I'm also not sure what the goal is, <span class=\"user-mention\" data-user-id=\"191511\">@Eric van der Zwan</span>. If you detect said problem, do you still store the QR but want to let the client know that there was a problem? Then, what is the client supposed to do with that information? Fix it and update? Inform the user and let the user decide? Seems to me you could either reject the QR, and return that <code>OperationOutcome</code> you want, or accept as-is. Everything in between makes stuff complicated.</p>",
        "id": 153824707,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1462471239
    },
    {
        "content": "<p>The implementer needs to handle the cases where the result is the OperationOutcome anyway for the error scenarios.</p>",
        "id": 153824722,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462480422
    },
    {
        "content": "<p>The dotnet client handles this for you and grabs stashes it away, and if you want the full resource, it goes and gets it for you.</p>",
        "id": 153824723,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462480457
    },
    {
        "content": "<p>There are lots of situations where a create or update might have \"succeeded\" but not been applied exactly as the sender might have expected/desired.  Getting back an OperationOutcome with warning messages explaining what happened and why is a lot more useful than having to compare the returned resource with the submitted resource on a node-for-node basis and having to guess as to why the discrepancies exist</p>",
        "id": 153824729,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462481694
    },
    {
        "content": "<p>Brian, what I meant is that on a create with &lt; 200, the server either returns the resource or nothing. 400+ possibly an OperationOutcome. Sure, easy for a client to implement, but it gets a bit ugly IMHO with all the possibilities.</p>",
        "id": 153824745,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1462489181
    },
    {
        "content": "<p>But how do you handle situations where a create is \"successful\", but perhaps not as successful as intended/expected and the server wants to communicate back the nuances of what happened?  (E.g. \"I created the patient, but the address didn't pass validation against our postal database\" or \"The encounter you were linking to couldn't be resolved\" or \"You don't have authorization to record phone numbers, so we dropped that information\")</p>",
        "id": 153824840,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462554888
    },
    {
        "content": "<p>what situations are those? Has anyone ever seen those in a real world context?</p>",
        "id": 153824879,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462568096
    },
    {
        "content": "<p>I know of systems that pass back references to DDI on successful creation of a prescription.  </p>",
        "id": 153824897,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1462577015
    },
    {
        "content": "<p>My QR will contain information about Intensive Care admissions. Patients can have very extreme values, even at a level that it becomes questionable if it is real. For example we defined a domain for serum bicarbonate as &gt;=0 &lt;60 mmol/L. When we received a value of 67 mmol/L a report was send back to the hospital. They could confirm the measurement was correct, and they had multiple. Now we have an extra domain of &gt;=60  &lt;70. A value in this domain will be accepted with a warning 'the value was unussually high'. So a hospital can check it again to make sure. <br>\nIn this case i will accept the QR because it has more valuable information then just the one item. A heartrate 0-300 will be accepted without warnings, a heartrate between 300-350 are accepted with a warning, &gt;350 the value will not be accepted and will be changed to null. The QR will be accepted and saved, the response would contain warnings of values which a unussually high or values which were changed to null. <br>\nI will probably almost never reject a QR. The hospitals have the possibility to correct the issues.</p>",
        "id": 153825787,
        "sender_full_name": "Eric van der Zwan",
        "timestamp": 1462777371
    },
    {
        "content": "<p>A bicarb of &gt;60 mmol/L? scary. but I don't follow this generally - so what if you return a warning? the client just ignores it, and there actually was no warning... The warning has to be inline....</p>",
        "id": 153825800,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462783113
    },
    {
        "content": "<p>If the client just ignores the warnings, there is no point. The goal of sending warnings is to inform the client and hopefully correct the values, though we can not forced them. I don't know how the warnings will be shown to a user (if all) or it will be shown to a manager? </p>",
        "id": 153825804,
        "sender_full_name": "Eric van der Zwan",
        "timestamp": 1462784732
    },
    {
        "content": "<p>In general my question would probably be: How can you give data-quality feedback in a manner that it is possible to update?</p>",
        "id": 153825805,
        "sender_full_name": "Eric van der Zwan",
        "timestamp": 1462784806
    },
    {
        "content": "<p>i'm not sure whether you are asking an application design question or an interoperability question</p>",
        "id": 153825807,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462785640
    },
    {
        "content": "<p>The questionnaireResponses will be created by EPR-systems. I would like the EPR-systems to handle the warning in a way that somebody can have another look at it and make sure the values send are correct or make adjustments to correct them. I think the question is both: who would you show you user the warnings (application design) and how should you return data-qualitity information if  a questionnaireResponse is processed in a way an EPR can handle it in a uniform manner (interoperability).</p>",
        "id": 153825808,
        "sender_full_name": "Eric van der Zwan",
        "timestamp": 1462786236
    },
    {
        "content": "<p>We are handling this in our system by performing these types of updates in the $validate operation that is called prior to saving the questionnaireresponse data.<br>\nThen users can be notified and the messages/warnings displayed to the users.</p>",
        "id": 153825922,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462804606
    },
    {
        "content": "<p>That's certainly not inline, or would the $validate add this information inline in the QR?</p>",
        "id": 153826887,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1462979897
    },
    {
        "content": "<p>$validate always returns an operationOutcome, and we include the location in the QR of where the issues are.</p>",
        "id": 153827014,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462995336
    },
    {
        "content": "<p>(by describing the llinkid of the question - I guess that's not a part of the spec at this point)</p>",
        "id": 153827015,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1462995363
    },
    {
        "content": "<p>calling $validation prior to saving would make the communication more complex and there is a danger: If $validation has found problems and the QR wasn't saved, how can you be sure it will be send again? I would prefer to save it, with warnings or emptying fields in case of errors. This way i know there is a QR. In other words: If my QR contains a ICU admission, rejecting it would mean i miss a admission.</p>",
        "id": 153828116,
        "sender_full_name": "Eric van der Zwan",
        "timestamp": 1463466754
    },
    {
        "content": "<p>$validate is not an instruction to save the record, its a chance for the client to see if there are issues with it, that can then be easily shown to a user.<br>\nThis may also be returned from the save call too.</p>",
        "id": 153830475,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1464576443
    }
]