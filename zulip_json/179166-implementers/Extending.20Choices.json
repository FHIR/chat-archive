[
    {
        "content": "<p>When creating a profile, the base resource might contain a property representing the right basic idea, but not the right representation.  For example, a profile on Goal might want to support declaring a start period or start age.  The “start[x]” property applies, but the choice doesn’t allow for Period or Age (unlike some other date choice properties in FHIR).  As I understand it, there are two possible ways to address this:</p>\n<ul>\n<li>Create a “startPeriod” extension with context “Goal”.  This doesn’t seem like the right approach, in that it spreads the representation of start across the resource and isn’t formally tied to “start[x]”.  A consumer that does not understand the extension would interpret an instance containing the extension as having no start, when in fact that is not the case.</li>\n<li>Create an extension with context “start[x]”.  According to the spec, this means the extension can be applied to any of the existing choices.  The problem here is that the Period or Age isn’t really an extension of a datetime or CodeableConcept – it is its own thing.  It really should be a sibling to those options, not an extension of one of them. (For the same reason, making the context one of the specific options doesn’t make sense either). &lt;br/&gt;</li>\n</ul>\n<p>Is it possible to extend “start[x]” in such a way that the extension is an additional option in the choice – rather than an extension of an existing option in the choice?  Semantically, I believe there is a difference between the two.</p>",
        "id": 153893134,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1497025336
    },
    {
        "content": "<p>no there's no support for doing that, I'm afraid. You'll have to do an extension of one kind of other. And you could create a task on thi</p>",
        "id": 153893168,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1497047321
    },
    {
        "content": "<p>task to extend the choices? or a task to add choices to the element?</p>",
        "id": 153893178,
        "sender_full_name": "Eric Haas",
        "timestamp": 1497058446
    },
    {
        "content": "<p>to fix Goal</p>",
        "id": 153893181,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1497060060
    },
    {
        "content": "<p>Adding choices to the element would break parsers and schema, so that's pretty much a non-starter for people to do on their own - though it is something for us think about in terms of forward/backward compatibility rules.   You could put an extension inside startDateTime that specifies the period or you could create a parallel extension.  It might be useful to give guidance to people on which approach is better.  I think a parallel extension is less likely to be confusing to implementers</p>",
        "id": 153893190,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1497071128
    },
    {
        "content": "<p>The ability to add choices to [x] is important. There is also a very similar need to add one or more data type choices to non-[x] attributes and turn them into [x] elements. An example is where body site is specified in the spec to be given by a code, but a code alone is insufficient -- for example, the case where the body site is defined by a distance and direction from a landmark. In that case,  body site would be a choice of a code or a reference. (I know that's not an [x] example, so maybe it is poorly chosen)</p>",
        "id": 153893252,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1497269685
    },
    {
        "content": "<p>Turning non-choices into choices would be a breaking change as it would require renaming existing elements.  That's something we absolutely cannot do once things go normative.  Adding additional options to an existing choice doesn't change the path to old data, so that's more of a possibility.</p>",
        "id": 153893274,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1497282010
    },
    {
        "content": "<p>are we talking version or extension here? </p>",
        "id": 153893307,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1497321107
    },
    {
        "content": "<p>We're talking about taking a core element and converting it into a choice</p>",
        "id": 153893380,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1497364983
    },
    {
        "content": "<p>in a subsequent version? </p>",
        "id": 153893597,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1497393000
    },
    {
        "content": "<p>Right</p>",
        "id": 153893644,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1497399556
    },
    {
        "content": "<p>Once normative, that change would be prohibited because it would require renaming the path to the existing element.</p>",
        "id": 153893645,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1497399578
    },
    {
        "content": "<p>I thought you were talking about that. but I thought the original question was around extensibility </p>",
        "id": 153893653,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1497401449
    },
    {
        "content": "<p>Yeah, that's what I thought, some mechanism to accomplish this through extensibility.</p>",
        "id": 153893763,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1497453242
    }
]