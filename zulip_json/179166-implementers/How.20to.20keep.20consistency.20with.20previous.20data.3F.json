[
    {
        "content": "<p>One day you find you are using wrong property for Resources, what should you do for previous data?</p>\n<p>For example, about Identifier in Patient, you used SB (social beneficiary identifier). But after a few months, you find the number you regarded as SB is actually TAX (tax id number), and you want to start to use TAX instead of SB. But previous Patient resources are stored with code SB, so I want to revise the previous data to keep consistency.<br>\nHowever, I don’t want to touch data itself since it is not safe to do it.</p>\n<p>Are there any good ways to keep consistency for data?</p>\n<p>Thank you.</p>",
        "id": 235614718,
        "sender_full_name": "shoho",
        "timestamp": 1619061963
    },
    {
        "content": "<p>Inconsistencies in data is a reality:</p>\n<ul>\n<li>different users capture data differently</li>\n<li>systems have different rules (and capabilities) at different points in time</li>\n<li>different systems have different rules</li>\n<li>conversion engines perform conversions differently over time</li>\n<li>different interface standards have different expectations</li>\n<li>different 'versions' of the standards used to define the interface have different expectations</li>\n</ul>\n<p>However, forcing searching/consuming systems to manage that inconsistency (the default) imposes significant costs on a potentially large number of client systems.  So it's generally cheapest if the data source manages and hides the inconsistency from the client systems accessing it.</p>\n<p>In general, the 'new' expectations for data are the 'right' ones. I.e. you want all legacy data to be exposed according to the 'current' rules, 'current' standards, etc.  These are presumably more useful, more correct or more complete - or they wouldn't have changed.  However, some clients might not be prepared to move to the 'new' behavior.</p>\n<p>There are two typical strategies that should be employed in parallel</p>\n<ul>\n<li>systems should have a 'conversion' layer between the internally persisted data and the external interface that is capable of manipulating the data to expose it in a consistent way, regardless of how it's stored internally</li>\n<li>this same layer should allow for multiple external interfaces</li>\n</ul>\n<p>There's no magic to this - writing conversions is hard grunt work and, unless you're talking about converting between two externally-defined standards, the work is going to be system-specific.  FHIR defines ConceptMap and StructureMap that can help with this.  There are lots of third-party transformation tools and integration engines that can perform this too.</p>",
        "id": 235736105,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1619120374
    },
    {
        "content": "<p>(Edited the above - hit enter before I'd finished re-typing from my draft response to your stack overflow post before the question got closed.)</p>",
        "id": 235736636,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1619120610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> <br>\nThank you for your detailed advice. It is very important to keep consistency since FHIR standards are still being updated and they still have flexibility to implement almost anything.</p>\n<p>I will deal with each case to decide whether to keep frontend consistent or backend consistent.</p>",
        "id": 235795097,
        "sender_full_name": "shoho",
        "timestamp": 1619160936
    }
]