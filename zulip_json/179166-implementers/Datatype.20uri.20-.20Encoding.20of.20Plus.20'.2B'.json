[
    {
        "content": "<p>According to <a href=\"https://www.hl7.org/fhir/datatypes.html#uri\">Data Types - uri</a> the uri data type should follow <a href=\"https://datatracker.ietf.org/doc/html/rfc3986\">RFC 3986</a>. In RFC 3986 the plus sign '+' is a <a href=\"https://datatracker.ietf.org/doc/html/rfc3986#section-2.2\">reserved character</a>. According to:</p>\n<blockquote>\n<p>URI producing applications should percent-encode data octets that correspond to characters in the reserved set unless these characters are specifically allowed by the URI scheme to represent data in that component.  If a reserved character is found in a URI component and no delimiting role is known for that character, then it must be interpreted as representing the data octet corresponding to that character's encoding in US-ASCII.</p>\n</blockquote>\n<p>the plus sign should be encoded unless it is specifically allowed by the URI scheme. However I can't find a documentation, that the plus sign in allowed in http/https URI's.</p>\n<p>The plus sign is especially relevant in dateTime values with timezone offset on FHIR Search queries. We have currently the issue that HAPI interprets the plus sign correctly in search-type requests in batch bundles, but my server, Blaze does not. I use a standard URL decoder which replaces plus signs with spaces. So a dateTime value ends up as say: <code>2021-12-09T00:00:00 01:00</code>. </p>\n<p>I can't find a hint in the FHIR documentation that handles such relevant cases. I would either suggest to ass such a hint or specify that the plus sign should be a normal data character for FHIR. But I'm not sure if we should/could specify that.</p>",
        "id": 264457124,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1639147797
    },
    {
        "content": "<p>What happens when you use standard url encoding of replacing the + with %2B in your parameter?</p>",
        "id": 264457547,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1639148001
    },
    {
        "content": "<p>Replacing the Plus with %2B and putting such an URL in the Bundle works. By decoder decodes %2B into +. But I'm not the producer of the Bundle. The Bundle was tested with HAPI and HAPI somehow supports the + in the URL, inside a Bundle. Now I try to collect evidence to either convince the Bundle producer to change the Bundle or to convince me to change my URL decoding.</p>",
        "id": 264462104,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1639149759
    },
    {
        "content": "<p>For restful interactions (including search), the same SHOULD clause <a href=\"http://build.fhir.org/http.html#styleguide\">is present</a>:</p>\n<blockquote>\n<p>Implementations constructing URLs using these patterns SHOULD conform to RFC 3986 Section 6 Appendix A  which requires percent-encoding for a number of characters that occasionally appear in the URLs (mainly in search parameters).</p>\n</blockquote>",
        "id": 264462192,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1639149802
    },
    {
        "content": "<p>I wonder why it is not a SHALL?</p>",
        "id": 264462555,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1639149960
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"192685\">@Vassil Peytchev</span> . I did not notice this at that place in the documentation. Yes it should be obvious to encode certain chars but I think it should be reiterated in the search section, especially on dateTime values. The Plus sign es especially severe, because it will be replaced with another char, the Space char.  Other chars from Appendix A like the Dollar sign will normally not encoded in URL's. So it's not entirely clear what to encode and what not.</p>",
        "id": 264463641,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1639150468
    },
    {
        "content": "<blockquote>\n<p>why it is not a SHALL?</p>\n</blockquote>\n<p>from memory - a long time ago now - there's edge cases where everyone violates the spec routinely, and it doesn't matter. And because where it does matter - this is clearly one of those cases - it's pretty straight forward to realise that it does matter.</p>",
        "id": 264506916,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1639169797
    },
    {
        "content": "<p>the only wild card here is HAPI is magically backworking it. I don't know how, and I'd be surprised if my server does the same</p>",
        "id": 264506983,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1639169833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Your server returns the same error message as mine:</p>\n<div class=\"codehilite\"><pre><span></span><code>http://test.fhir.org/r4/Observation?_lastUpdated=lt2021-12-11T11:00:00.000+02:00\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>The Date value 2021-12-11T11:00:00.000 02:00 is not in the correct format (Xml Date Format required)\n</code></pre></div>",
        "id": 264510624,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1639171560
    },
    {
        "content": "<p>well, then, you are clearly correct in this case <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 264510714,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1639171584
    },
    {
        "content": "<p>:-)</p>",
        "id": 264510734,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1639171598
    },
    {
        "content": "<p>So should something appended to the specification to clarify the situation? Either the SHALL or something especially in the date search section?</p>",
        "id": 264511169,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1639171811
    }
]