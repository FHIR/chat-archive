[
    {
        "content": "<p>We use tasks to model most of our non-trivial workflows, and some of those tasks are automated.</p>\n<p>We need to model dependencies between some tasks, e.g.:</p>\n<p>Task #1: pay for Invoice/5<br>\nTask #2: send a fax to the pharmacy</p>\n<p>Task/2 is automated, but we need to block it by Task/1, so that when someone balances Invoice/5, only then the fax is sent.</p>\n<p>We looked at putting Task/2 with status <code>on-hold</code> and add Task/1 as an input to Task/2 with a label of <code>blockedBy</code> or <code>dependsOn</code>. While that works for the moment,  we were thinking maybe it made sense to have something more \"first-class\", so the queries are more explicit, the intent is more apparent and the implementation easier.</p>\n<p>We can, of course, add an extension, but wanted to know if this is something that made sense to have in FHIR.</p>",
        "id": 204604298,
        "sender_full_name": "Orlando Osorio",
        "timestamp": 1595366457
    },
    {
        "content": "<p>It probably doesn't make sense to have as part of core, but it's potentially reasonable to have this included as a standard extension.  You could submit a change request.  You might also look at RequestGroup, which allows strict dependency of a bunch of Request resources (of which Task is one).  However, it doesn't allow for independent state transitions of the governed requests - the state is maintained at the RequestGroup level.</p>",
        "id": 204630732,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1595394254
    },
    {
        "content": "<p>We use RequestGroups when we want to orchestrate more complex operations.</p>\n<p>We looked at them for this scenario but we feel that using them would change the root resource of some operations. Most of the time we don't have dependencies and backend services just look for active tasks to perform (by code and owner). It also adds a new \"thing\" to create for seemingly simple user actions.</p>\n<p>Our goal is to build upon the Task abstraction to provide an easy to use, easy to understand, data-oriented interface for the end-user and we think most of it is achievable using Task as a building block. The only piece we've found missing is the ability to link Tasks with a label (blocked-by, depends-on, related, superseded, etc)</p>\n<p>Would you consider instead of adding a <code>dependsOn</code> property to core having something more generic and extensible like <a href=\"https://www.hl7.org/fhir/medicationknowledge-definitions.html#MedicationKnowledge.relatedMedicationKnowledge\">MedicationKnowledge.relatedMedicationKnowledge</a>?</p>",
        "id": 204677085,
        "sender_full_name": "Orlando Osorio",
        "timestamp": 1595429894
    },
    {
        "content": "<p>Isn't a depends-on relationship expressible with PlanDefinition? It seemed to me that was what we have been discussion in the FHIR workflow calls...</p>",
        "id": 204680588,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1595431350
    },
    {
        "content": "<p>While it is expressible we would have to name it, create a new \"thing\", coordinate state changes, move the responsibility up the graph, and introduce PlanDefinition (and CarePlans?) to our model.</p>\n<p>In our case, the dependency is managed at the task level, practitioners and office staff understand those dependencies at that level, A is blocked by B, C is related to D, etc.</p>\n<p>We already use PlanDefinition and CarePlans in other contexts, we have protocols that fit perfectly in the PlanDefinition resource. But we think the needs here are a bit lighter.</p>\n<p>As an example of the type of interface we are building for Task management, please check <a href=\"https://clickup.com/features/dependencies\">https://clickup.com/features/dependencies</a></p>",
        "id": 204681531,
        "sender_full_name": "Orlando Osorio",
        "timestamp": 1595431781
    },
    {
        "content": "<p>PlanDefinition would define the rule, but it's reasonable/appropriate for the actual Task/Request to explicitly declare the pre-condition constraint.</p>",
        "id": 204690311,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1595435802
    },
    {
        "content": "<p>Hi, <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>, just in case this question got missed:</p>\n<blockquote>\n<p>Would you consider instead of adding a dependsOn property to core having something more generic and extensible like MedicationKnowledge.relatedMedicationKnowledge?</p>\n</blockquote>",
        "id": 204804576,
        "sender_full_name": "Orlando Osorio",
        "timestamp": 1595514606
    },
    {
        "content": "<p>We try hard to avoid 'typed' references because they're harder to constrain and declare conformance to - you get forced into slicing.  Best practice is to enumerate the specific types of relationships as distinct properties - each potentially constrained to different allowed target resources.</p>",
        "id": 204806412,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1595515358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span> <span class=\"user-mention\" data-user-id=\"191759\">@Melva Peters</span> side question - why is MedicationKnowledge taking this approach.  And in particular, why isn't the 'type' element constrained to a specific value set?</p>",
        "id": 204806526,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1595515421
    },
    {
        "content": "<p>There will be value sets added, we haven't finished that work yet.  Is it an issue if they are exemplar value sets?</p>",
        "id": 204806793,
        "sender_full_name": "Melva Peters",
        "timestamp": 1595515554
    },
    {
        "content": "<p>For something like this, it really ought to be required or extensible.  Otherwise you would have zero interoperability.  \"This med relates to this other med 'somehow' doesn't tell you much...\"</p>",
        "id": 204809136,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1595516553
    },
    {
        "content": "<p>We currently use MedicationKnowledge.related to model medications that have minor variations between them but are different products in our catalog, e.g.: different flavors, different packaging (syringe vs topi-click), etc. And we link them with shortcuts in the UI when ordering.</p>\n<p>The value set we use is our own, so 'example' or 'preferred' would be ideal for us.</p>",
        "id": 204809241,
        "sender_full_name": "Orlando Osorio",
        "timestamp": 1595516608
    },
    {
        "content": "<p>Example/preferred is always easier because no mapping is required, but the result is that while it's easy to comply, it's next to impossible to interoperate across organizations.</p>",
        "id": 204813152,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1595518311
    },
    {
        "content": "<p>the \"relatedMedicationKnowledge\" element is intended to allow for hierarchies of products to be expressed.  We've had use cases for simply parent-child relationships, but also related, same class, equivalence, etc.  Thus we added a type code to allow different knowledgebase vendors to express their assorted hierarchies.  Like Melva said, we are currently working on providing example bindings to value sets.</p>",
        "id": 204820607,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1595521851
    },
    {
        "content": "<p>Why wouldn't you provide required or extensible bindings?  Why the need to support variation by implementation?</p>",
        "id": 204823158,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1595523047
    },
    {
        "content": "<p>because we have no idea what the complete set of relationships would be.  and different implementations will have different relationships.</p>",
        "id": 204823989,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1595523471
    },
    {
        "content": "<p>That doesn't mean you can't identify the 4-5 most common ones and mandate codes for those with an extensible binding</p>",
        "id": 204824096,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1595523506
    },
    {
        "content": "<p>that's an interesting idea.  when we get this more complete and have a connectathon about it, we'll ask the implementers what they think</p>",
        "id": 204824172,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1595523545
    },
    {
        "content": "<p>A wide open typed relationship is a FHIR anti-pattern</p>",
        "id": 204830743,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1595526899
    },
    {
        "content": "<p>really?  hmm.  (looks at ServiceRequest.performerType, Claim.related.relationship, EpisodeOfCare.diagnosis.role). As Melva and I said above, we are still working on all of our value sets and their bindings and we'll take your advice into account when we work with our implementers.</p>",
        "id": 204831928,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1595527383
    },
    {
        "content": "<p>A side observation: ServiceRequest, Claim, EpisodeOfCare are all FMM level 2. Is removing the anti-pattern something to be considered when resources move to a higher level?</p>",
        "id": 204840887,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1595531294
    },
    {
        "content": "<p>performerType isn't tied to a relationship.  Claim.related.relationship is definitely antipattern.  EpisodeOfCare.diagnosis.role is a qualifier and is optional.  It's not necessary to understand the instance.</p>",
        "id": 204840957,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1595531336
    },
    {
        "content": "<p>Removing anti-patterns can (and should) be done as early as they're detected prior to getting locked into normative.</p>",
        "id": 204841052,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1595531389
    }
]