[
    {
        "content": "<p>Has there been any discussion on alternative extension syntax, since Grahame's blog? <a href=\"http://www.healthintersections.com.au/?p=2467\" target=\"_blank\" title=\"http://www.healthintersections.com.au/?p=2467\">http://www.healthintersections.com.au/?p=2467</a></p>",
        "id": 153821905,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1460723471
    },
    {
        "content": "<p><a href=\"https://lightmyfhir.org/\" target=\"_blank\" title=\"https://lightmyfhir.org/\">https://lightmyfhir.org/</a></p>",
        "id": 153821938,
        "sender_full_name": "Igor Sirkovich",
        "timestamp": 1460727857
    },
    {
        "content": "<p>Yes, I read those. But after that?</p>",
        "id": 153821940,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1460728389
    },
    {
        "content": "<p>I couldn't find any discussion here on zulip.</p>",
        "id": 153821941,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1460728402
    },
    {
        "content": "<p>There was some, but it sort of lost steam</p>",
        "id": 153821989,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1460745214
    },
    {
        "content": "<p><a href=\"https://chat.fhir.org/#narrow/stream/implementers/subject/Representing.20Extensions\" target=\"_blank\" title=\"https://chat.fhir.org/#narrow/stream/implementers/subject/Representing.20Extensions\">https://chat.fhir.org/#narrow/stream/implementers/subject/Representing.20Extensions</a></p>",
        "id": 153821998,
        "sender_full_name": "Igor Sirkovich",
        "timestamp": 1460748308
    },
    {
        "content": "<p>yes. it didn't get the kind of support that would be needed to drive that kind of change. And frankly, I didn't think any of the json proposals were better than the one that already lost steam </p>",
        "id": 153822005,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460749396
    },
    {
        "content": "<p>but it was a very useful discussion because we're not done with syntax yet....</p>",
        "id": 153822006,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460749413
    },
    {
        "content": "<p>I think ITS would like to join th ediscussion in Motreal on this topic.</p>",
        "id": 153822034,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1460755700
    },
    {
        "content": "<p>ITS will have to host it. Because there's no energy elsewhere, as far as i can tell. </p>",
        "id": 153822061,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460761232
    },
    {
        "content": "<p>when extending a primitive type - does the extended name start or end with underscore?  <a href=\"http://hl7.org/fhir/json.html#primitive\" target=\"_blank\" title=\"http://hl7.org/fhir/json.html#primitive\">This page</a> differs from <a href=\"http://hl7.org/fhir/element.html\" target=\"_blank\" title=\"http://hl7.org/fhir/element.html\">this one</a>...</p>",
        "id": 153822220,
        "sender_full_name": "David Hay",
        "timestamp": 1460941142
    },
    {
        "content": "<p>Good find. I haven't seen the suffix version anywhere in use, leads me to think the latter page is incorrect.</p>",
        "id": 153822221,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1460941320
    },
    {
        "content": "<p>starts with an underscore (JSON only)</p>",
        "id": 153822250,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1460957238
    },
    {
        "content": "<p>What's the discriminator syntax for slicing by the value of an extension?  E.g. if you have a complex extension and want to (re)slice the extension by one of the sub-elements, how?</p>",
        "id": 153822512,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461099964
    },
    {
        "content": "<p>Research auth is a complex extension with type (valueCode) and date (valueDate) sub-elements.  I want to re-slice researchAuth by type:</p>\n<div class=\"codehilite\"><pre><span class=\"nt\">&lt;element&gt;</span>\n   <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Patient.extension&quot;</span> <span class=\"nt\">/&gt;</span>\n   <span class=\"nt\">&lt;slicing&gt;</span>\n      <span class=\"nt\">&lt;discriminator</span> <span class=\"na\">value=</span><span class=\"s\">&quot;@url&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;rules</span> <span class=\"na\">value=</span><span class=\"s\">&quot;open&quot;</span> <span class=\"nt\">/&gt;</span>\n   <span class=\"nt\">&lt;/slicing&gt;</span>\n<span class=\"nt\">&lt;/element&gt;</span>\n<span class=\"nt\">&lt;element&gt;</span>\n    <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Patient.extension&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;name</span> <span class=\"na\">value=</span><span class=\"s\">&quot;researchAuth&quot;</span> <span class=\"nt\">/&gt;</span>\n   <span class=\"nt\">&lt;slicing&gt;</span>\n      <span class=\"nt\">&lt;discriminator</span> <span class=\"na\">value=</span><span class=\"s\">&quot;???WHAT GOES HERE???&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;rules</span> <span class=\"na\">value=</span><span class=\"s\">&quot;open&quot;</span> <span class=\"nt\">/&gt;</span>\n   <span class=\"nt\">&lt;/slicing&gt;</span>\n   <span class=\"nt\">&lt;type&gt;</span>\n        <span class=\"nt\">&lt;code</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Extension&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;profile</span> <span class=\"na\">value=</span><span class=\"s\">&quot;http://example.com/fhir/StructureDefinition/patient-research-authorization&quot;</span> <span class=\"nt\">/&gt;</span>\n   <span class=\"nt\">&lt;/type&gt;</span>\n<span class=\"nt\">&lt;/element&gt;</span>\n<span class=\"nt\">&lt;element&gt;</span>\n    <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Patient.extension&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;name</span> <span class=\"na\">value=</span><span class=\"s\">&quot;researchAuth/MNAuth&quot;</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/element&gt;</span>\n<span class=\"nt\">&lt;element&gt;</span>\n    <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Patient.extension.extension.valueCode&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;name</span> <span class=\"na\">value=</span><span class=\"s\">&quot;researchAuth/MNAuth.type.valueCode&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;fixedCode</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Minnesota&quot;</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/element&gt;</span>\n</pre></div>",
        "id": 153822513,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461100287
    },
    {
        "content": "<p>Will include in upcoming list of examples....</p>",
        "id": 153822514,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461100348
    },
    {
        "content": "<p>You probably picked the most complicated case. Reslicing on complex extensions by type. <br>\nAfter reading the discriminator section on the profiling page ( <a href=\"http://hl7.org/fhir/profiling.html#discriminator\" target=\"_blank\" title=\"http://hl7.org/fhir/profiling.html#discriminator\">http://hl7.org/fhir/profiling.html#discriminator</a> ) , my first guess would be that the discriminator would be:  <code>extension.@type</code> </p>",
        "id": 153822578,
        "sender_full_name": "Marten Smits",
        "timestamp": 1461141342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191334\">@Marten Smits</span> @type slices by datatype...I need to slice by the extension with relative url \"type\"...</p>",
        "id": 153822626,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461166974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> Thoughts?</p>",
        "id": 153822627,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461166985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> Does HAPI support using extension values as discriminators?</p>",
        "id": 153822628,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461167024
    },
    {
        "content": "<p>HAPI packages the RI validator for this stuff, and to be honest I have no idea if that is supported or not. :)</p>",
        "id": 153822629,
        "sender_full_name": "James Agnew",
        "timestamp": 1461167104
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> would have to answer?</p>",
        "id": 153822630,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461167134
    },
    {
        "content": "<p>I'm so pleased to have someone else coming up with the torturous use-cases for Grahame :)  I'm honestly not sure.</p>",
        "id": 153822631,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461167381
    },
    {
        "content": "<p>This one's not going to be fringe as extensions get more use.  Every slicing of an extension will be a re-slice (since the orginal slice is @url) and will be dependent on some sub-extension (or value[x]).</p>",
        "id": 153822632,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461167450
    },
    {
        "content": "<p>But glad to jump in! ;)</p>",
        "id": 153822633,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461167461
    },
    {
        "content": "<p>For what it's worth, if you have test cases I will gladly add them to the unit test library.</p>",
        "id": 153822638,
        "sender_full_name": "James Agnew",
        "timestamp": 1461171082
    },
    {
        "content": "<p>validator doens't support this, but technically, the discriminator is a fluent path expression</p>",
        "id": 153822673,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461187509
    },
    {
        "content": "<p>Must admit this is too advanced for me as well.  So, if we switched to fluentpath now, would that be an expression with an and, like \"url=xxx and value = yyy\"?</p>",
        "id": 153822716,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1461225193
    },
    {
        "content": "<p>are there any constraints on what can be a discriminator?  Certainly parent should be dis-allowed...should we put some complexity bounds here?</p>",
        "id": 153822853,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461336969
    },
    {
        "content": "<p>In theory, yes. However, I don't expect most clients/servers to implement full support for slicing and all of it's wonderful complexity. Probably standard support is limited to the simple use cases / default discriminators. Anything more complex requires a considerable implementation effort. So I am not sure if a list of constraints on the discriminator element would be used a lot...?</p>",
        "id": 153822854,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1461337582
    },
    {
        "content": "<p>Seems we should have some kind of \"levels of conformance\" to define how fully slicing is supported.  Or maybe a list of on/off features (slicing by @profile supported/not supported).</p>",
        "id": 153822855,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461337783
    },
    {
        "content": "<p>hate that slicing extensions is \"too advanced\" though...goes against the \"no stigma for extensions\" ethos....</p>",
        "id": 153822856,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461337862
    },
    {
        "content": "<p>Maybe the Conformance resource could provide some additional information on slicing support? Need to think about how to serialize this information efficiently. List of all supported discriminator paths / types? Not sure if that would work.</p>",
        "id": 153822857,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1461337989
    },
    {
        "content": "<p>That would be a big list! ;) I was thinking more along the lines of general capability rather than specific path.</p>",
        "id": 153822858,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461338075
    },
    {
        "content": "<p>I agree that common/frequent use cases should be relatively simple to specify, at least that should be the goal. IIRC, you've identified a couple of interesting slicing use cases that aren't covered yet, or way too complex (e.g. extension, ordinal). Are you visiting the HL7 Montreal WGM? I think it would be useful to have a joint discussion on this topic with the FHIR core team.</p>",
        "id": 153822859,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1461338240
    },
    {
        "content": "<p>I'll be there - Sat thru Tues (flying Wed)</p>",
        "id": 153822860,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461338438
    },
    {
        "content": "<p>I'm attending the full week. If you have some spare time, I would definitely like to meet up and go through these cases. Usually there is a late core team pizza session on thursday evening were advanced stuff like this is being discussed. But since you are leaving on tuesday, maybe we should plan an earlier meeting?</p>",
        "id": 153822863,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1461339196
    },
    {
        "content": "<p>That'd be great!</p>",
        "id": 153822864,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461341284
    },
    {
        "content": "<p>Yes, I think there is benefit in identifying common and advanced cases. Maybe advanced cased would be better serverd using FP invariants rather than increasing the complexity of the slicing system. Though that would be less \"declarative\" and would probably inhibit some of the uses Chris has imaginged using SD for....</p>",
        "id": 153823205,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1461695573
    },
    {
        "content": "<p>Working on use cases - will have some for WGM discussion...</p>",
        "id": 153823214,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461698224
    },
    {
        "content": "<p>On a new topic - can one extend value[x] directly or must one use a typed version.  For example, can I:</p>\n<div class=\"codehilite\"><pre><span class=\"nt\">&lt;element&gt;</span>\n  <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Patient.extension.value[x].extension&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;name</span> <span class=\"na\">value=</span><span class=\"s\">&quot;ext1.value[x].ext2&quot;</span> <span class=\"nt\">/&gt;</span>\n...snip...\n</pre></div>\n\n\n<p>or must I:</p>\n<div class=\"codehilite\"><pre><span class=\"nt\">&lt;element&gt;</span>\n  <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Patient.extension.valueCode.extension&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;name</span> <span class=\"na\">value=</span><span class=\"s\">&quot;ext1.valueCode.ext2&quot;</span> <span class=\"nt\">/&gt;</span>\n...snip...\n</pre></div>\n\n\n<p>Typing of value[x] is variable...can't easily determine that it's an Element which would allow extension.</p>",
        "id": 153823217,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461698386
    },
    {
        "content": "<p>Answer should be consistent with whether this is legal:</p>\n<div class=\"codehilite\"><pre><span class=\"nt\">&lt;element&gt;</span>\n  <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Observation.value[x].coding.code&quot;</span> <span class=\"nt\">/&gt;</span>\n...snip...\n</pre></div>",
        "id": 153823220,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461698538
    },
    {
        "content": "<p>when would it not allow extension?</p>",
        "id": 153823221,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461698544
    },
    {
        "content": "<p>I think the first one would extend value[x], where [x] still has a choice of multiple types. In the second one, valueCode would have constrained the value to just Code, and you're adding an extension to that. So, it does not matter for the extension, but it does imply what happens to the parent element 'value' </p>",
        "id": 153823222,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1461698561
    },
    {
        "content": "<p>As defined, value[x].extension would always be legal, but not value[x].coding.code</p>",
        "id": 153823223,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461698582
    },
    {
        "content": "<p>well, this:|</p>\n<div class=\"codehilite\"><pre>Observation.value[x].coding.code\n\nis not valid\n</pre></div>",
        "id": 153823224,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461698610
    },
    {
        "content": "<p>So something[x].child is only legal if child is found in all possible [x] types?  That's a pain....</p>",
        "id": 153823226,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461698657
    },
    {
        "content": "<p>in an element definition path, yes, that's correct.</p>",
        "id": 153823228,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461698690
    },
    {
        "content": "<p>So a profile validator needs to check ALL the types to make sure that the child is present in each? Oye, ok.</p>",
        "id": 153823229,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461698753
    },
    {
        "content": "<p>Is [x] always an Element?</p>",
        "id": 153823230,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461698861
    },
    {
        "content": "<p>I don't believe that there's any context where a path refers to more than one type</p>",
        "id": 153823231,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461698871
    },
    {
        "content": "<p>everything is always an element except for the base resource itself</p>",
        "id": 153823232,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461698887
    },
    {
        "content": "<p>There's no [x] that allows Resource?</p>",
        "id": 153823233,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461698905
    },
    {
        "content": "<p>Can we make that a SHALL?</p>",
        "id": 153823234,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461698915
    },
    {
        "content": "<p>which bit?</p>",
        "id": 153823235,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461698949
    },
    {
        "content": "<p>That [x] can only be Elements and that only Element elements are allowed in path after [x].</p>",
        "id": 153823236,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461698989
    },
    {
        "content": "<p>To avoid stuff like extension.value[x].value if [x] allows Identifier and Quantity.  Basically trying to avoid having to interrogate all the types to determine what's valid...</p>",
        "id": 153823237,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461699067
    },
    {
        "content": "<p>right. you can assume that this is SHALL. we don't say this directly in that forma, because we don't need to.</p>",
        "id": 153823238,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461699111
    },
    {
        "content": "<p>so [x].extension and [x].id would be the only things allowed a children of [x]</p>",
        "id": 153823239,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461699114
    },
    {
        "content": "<p>By your assertion above, anything allowed in ALL of the value[x] types would be allowed as children of value[x]...I'd like to see that limited to id and extension.</p>",
        "id": 153823240,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461699180
    },
    {
        "content": "<p>well, at the moment, it is</p>",
        "id": 153823241,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461699321
    },
    {
        "content": "<p>Ok, to be explicit, is <code>&lt;path value=\"Extension.value[x].system\" /&gt;</code> legal if the types of value[x] are limited to Identifier and Quantity?</p>",
        "id": 153823242,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461699438
    },
    {
        "content": "<p>no. that's not legal. it has to be one type</p>",
        "id": 153823261,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461704425
    },
    {
        "content": "<p>And <code>&lt;path value=\"Extension.value[x].extension\" /&gt;</code> is legal (with no type restrictions on value[x]) since extension is part of Element?</p>",
        "id": 153823264,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461704502
    }
]