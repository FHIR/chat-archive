[
    {
        "content": "<p>I have an OO background, so I'm inclined to see inheritance in places it may not exist. For example, CARINBBPatient \"builds on\" USCorePatientProfile. That suggests to me that if a representation of a patient instance conforms to the CARINBBPatientProfile it must also conform to the USCorePatient profile. As such, we can include profiles in the Meta.profile collection. Is this true? If so, where is this level of specificity between profiles documented?</p>\n<p>Thanks ... Charlie (FHIR Novice)</p>",
        "id": 203766498,
        "sender_full_name": "Charlie Filkins",
        "timestamp": 1594671989
    },
    {
        "content": "<p>it is valid to include both profiles in the meta.profile with the case you mention, yes</p>",
        "id": 203766672,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1594672089
    },
    {
        "content": "<p>the level of specificity between profiles is documented in your implementation guide</p>",
        "id": 203766715,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1594672118
    },
    {
        "content": "<p>yes. But note that profiles themselves are not quite class definitions, so other generalizations you might draw from OO may not apply</p>",
        "id": 203766781,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1594672162
    },
    {
        "content": "<p>where the CARINBBPatientProfile states that it is based on USCorePatientProfile</p>",
        "id": 203766782,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1594672162
    },
    {
        "content": "<p>Thanks Jens ... I was thinking about general documentation that discusses profile relationships.</p>",
        "id": 203766899,
        "sender_full_name": "Charlie Filkins",
        "timestamp": 1594672210
    },
    {
        "content": "<p>i would say it is closer to interfaces than to inheritance ...</p>",
        "id": 203766912,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1594672216
    },
    {
        "content": "<p>as your instance can 'conform' or be valid to multiple profiles on equal levels</p>",
        "id": 203766954,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1594672241
    },
    {
        "content": "<p>(unless we are talking programming languages that allow multiple inheritance like C++ that is)</p>",
        "id": 203767034,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1594672285
    },
    {
        "content": "<p>It is sounding to me like we're leaning towards OWL resource definitions ... my resource has these properties ... therefore it is an XXX.</p>\n<p>Is that about right?</p>",
        "id": 203767298,
        "sender_full_name": "Charlie Filkins",
        "timestamp": 1594672411
    },
    {
        "content": "<p>If one profile build on another, can that new profile change the definition so that the resource no longer conforms to the original profile?</p>",
        "id": 203767773,
        "sender_full_name": "Charlie Filkins",
        "timestamp": 1594672654
    },
    {
        "content": "<p>not necessarily spot on, but yes. While a given resource of may conform to both CARINBBPatientProfile and USCorePatientProfile - it may also conform to other profiles that may be of no interest - eg. SomeExampleCoreGermanPatientProfile, but just because it in a certain state may conform to all three, it does not necessarily  make sense to state all three</p>",
        "id": 203767890,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1594672697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283867\">Charlie Filkins</span> <a href=\"#narrow/stream/179166-implementers/topic/Profile.20Inheritance/near/203767773\">said</a>:</p>\n<blockquote>\n<p>If one profile build on another, can that new profile change the definition so that the resource no longer conforms to the original profile?</p>\n</blockquote>\n<p>depends on whether your canonical url to your profile in meta.profile is versioned or not in your resource (if im not mistaken, <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> )</p>",
        "id": 203768399,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1594672933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283867\">@Charlie Filkins</span> see <a href=\"http://build.fhir.org/datatypes.html#canonical\">http://build.fhir.org/datatypes.html#canonical</a> and <a href=\"http://build.fhir.org/resource.html#Meta\">http://build.fhir.org/resource.html#Meta</a></p>",
        "id": 203768471,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1594672976
    },
    {
        "content": "<p>well, assuming that versions match, then no, a new profile cannot change the definition so that the resource no longer conforms to the original profile.</p>\n<p>A clearer way to say this is : profiles can only add rules; they cannot unmake any rules already made elsewhere</p>",
        "id": 203769245,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1594673349
    },
    {
        "content": "<p>there are no technical barriers that guards that step - only common sense</p>",
        "id": 203769875,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1594673651
    },
    {
        "content": "<p>AFAIK</p>",
        "id": 203769913,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1594673674
    },
    {
        "content": "<p>the snapshot generator does what it can - what I have figured out how to compute</p>",
        "id": 203775719,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1594676755
    },
    {
        "content": "<p>Grahame ... Thanks, that is what I understood from my reading ... you can only add to the constraints, not override them.</p>",
        "id": 203821868,
        "sender_full_name": "Charlie Filkins",
        "timestamp": 1594725815
    },
    {
        "content": "<p>yes that's correct.</p>",
        "id": 203825544,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1594728742
    }
]