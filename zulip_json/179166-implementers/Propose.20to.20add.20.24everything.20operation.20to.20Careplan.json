[
    {
        "content": "<p>Hey!</p>\n<p>I haven't done much research on this, but would it be resonable to propose to add the operation $everything to the CarePlan resource?</p>\n<p>For example CarePlan/[id]/$everything seems to be a nice addition.</p>",
        "id": 272660853,
        "sender_full_name": "Kenneth Myhra",
        "timestamp": 1645435074
    },
    {
        "content": "<p>How would you define it?</p>",
        "id": 272699680,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645455939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> I would define it like this:</p>\n<p>This operation is used to return all the information related to the CarePlan. The response is a bundle of type \"searchset\". At a minimum the CarePlan resource itself is returned, along with any other resources that the server has which are releated to the CarePlan, and that are accessible for the given user.</p>",
        "id": 272774986,
        "sender_full_name": "Kenneth Myhra",
        "timestamp": 1645520146
    },
    {
        "content": "<p>Will there be some guidance about what kind of information ought to be returned? For example if a care plan is related to diabetes care, would this data set include all of a person's at home glucose measurements, laboratory based A1C measurements, diabetes medications, comorbidity risk assessments etc? I'm just trying to get a handle on the level of interoperability you are expecting here.</p>",
        "id": 272810290,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645540303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> I think these are fair questions. Currently we have just been thinking from a technical point of view that it would be nice to get all locally stored references on a CarePlan resolved and included in the searchset bundle. At the moment I do not really have a more concrete use case, maybe <span class=\"user-mention\" data-user-id=\"439719\">@Sven Christiansen</span> could elaborate more on the functional use cases.</p>",
        "id": 272962975,
        "sender_full_name": "Kenneth Myhra",
        "timestamp": 1645629776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> I will try to give you some more background information. We are establishing a high level CarePlan that is going to be stored in a national register. The purpose is that this CarePlan shall be “visible” to the Patient himself as well as all PractionerRoles that are part of the CarePlan (end even future ones). Practitioners can establish this plan, modify it by adding new Activities and Goals. <br>\nSome of the resources that are referenced are stored in the same national register (as part of the CarePlan), and other resources are referenced to the FHIR-server where they are located. <br>\nAt the moment, and even in the future, we want to have flexibility in which resources that are stored as part of the (national) CarePlan and which are referenced externally. And it may even be that some of a specific resource type are stored on this FHIR server and other of the same type are stored elsewhere. Thus, there is no way of being static to which referenced resources that should be “included”. <br>\nThis is why we thought that “-everythng” could be a good idea.<br>\nHere are examples of resources that at the moment are referenced and stored on the same national FHIR-server: CareTeam, PractitionerRole, Condition, Goal, MedicationRequest and Task. (In the future more specific CarePlan.activity references will be used i.e. other than the “general” Task).</p>",
        "id": 273053092,
        "sender_full_name": "Sven Christiansen",
        "timestamp": 1645685080
    },
    {
        "content": "<p>In other places where $everything exists, we tend to have a \"Compartment definition\" that explains what belongs, at least as a starting point. E.g.</p>\n<ul>\n<li>for <code>Encounter/:id/$everything</code>, <a href=\"https://build.fhir.org/compartmentdefinition-encounter.html\">https://build.fhir.org/compartmentdefinition-encounter.html</a></li>\n<li>for <code>Patient/:id/$everything</code>, <a href=\"https://build.fhir.org/compartmentdefinition-patient.html\">https://build.fhir.org/compartmentdefinition-patient.html</a></li>\n</ul>\n<p>without these definitions or something like them, the value of standardizing an \"everything\" operation shrinks. There's not strict rule against it; I'm just sharing some perspective.</p>\n<p>In your use case, will each patient have multiple care plans in the national register, which need to be partitioned so that access can be granted to one but not the others? If not... maybe just support <code>Patient/:id/$everything</code> on your national server and the CarePlan and all related data can be shared that way?</p>",
        "id": 273114581,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645720743
    },
    {
        "content": "<p>Use normal searches with includes and revincludes, it is more flexible and already specified and implemented. Having a new $everything won't buy you much</p>",
        "id": 273122059,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1645723722
    },
    {
        "content": "<p>I agree <span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span>.</p>\n<div class=\"codehilite\"><pre><span></span><code>Standard REST API &gt; Patient-everything &gt;&gt; New-careplan-flavored everything\n</code></pre></div>\n\n<p>in terms of interoperability and level of effort to get things going.</p>",
        "id": 273130361,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645727394
    },
    {
        "content": "<p>I agree with include and revinclude and think we should start out with those instead of trying to push forward a $everything operation for CarePlan at this moment. <span class=\"user-mention\" data-user-id=\"439719\">@Sven Christiansen</span> might disagree, but until we have some more experience on which needs and use cases there will be I think include/revinclude is the best way to go forward at the moment.</p>",
        "id": 273213819,
        "sender_full_name": "Kenneth Myhra",
        "timestamp": 1645786296
    }
]