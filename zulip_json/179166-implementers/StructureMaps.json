[
    {
        "content": "<p>When building a <code>StructureMap</code> where one <code>StructureMap.structure</code> defines a <code>StructureDefinition</code> as \"produced\", should there also be an instance of <code>StructureMap.group.input</code> for that <code>StructureDefinition</code> as \"target\"?</p>",
        "id": 153841011,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469506330
    },
    {
        "content": "<p>well, that depends. </p>",
        "id": 153841013,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469507208
    },
    {
        "content": "<p>Great!  On what?</p>",
        "id": 153841014,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469507222
    },
    {
        "content": "<p>when you define an output parameter, you are sawying that the object to map to is created outside the sciprt </p>",
        "id": 153841016,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469507306
    },
    {
        "content": "<p>I mean, outside this map</p>",
        "id": 153841017,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469507319
    },
    {
        "content": "<p>that's really useful - in fact, required - when you are using one map from another</p>",
        "id": 153841018,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469507353
    },
    {
        "content": "<p>but when it comes to incoking it from an application, it's not always what you want - that the application has to create teh right thing in order to invoke the map</p>",
        "id": 153841019,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469507413
    },
    {
        "content": "<p>I don't think so.  Perhaps, then, I shouldn't be using \"produced\"?  My mean of that was that it's an artefact that doesn't yet exist and is being produced by the transformation, but perhaps I misread.</p>",
        "id": 153841020,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469507435
    },
    {
        "content": "<p>so the map can do it either way - create the output internally, or require it to be passed in exteranly</p>",
        "id": 153841021,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469507443
    },
    {
        "content": "<p>I don't think we've got this bit right yet</p>",
        "id": 153841022,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469507452
    },
    {
        "content": "<p>Suite!</p>",
        "id": 153841023,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469507465
    },
    {
        "content": "<p>I'm happy for the map to create the output internally.</p>",
        "id": 153841024,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469507624
    },
    {
        "content": "<p>(I think!)</p>",
        "id": 153841025,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469507720
    },
    {
        "content": "<p>I'm trying to see if StructureMap could be the missing link for mapping onto a profile. My source is not FHIR, but an ART-DECOR artifact called Dataset which sort of aligns with a FHIR Logical Models (we could have a different discussion about that.</p>\n<p>I'm failing at almost every level to make it work, mostly because I cannot figure out how StructureMap is supposed to be used.</p>\n<p>Also I'm missing (as is true in many places around FHIR) multi lingual labels options. I just wish multi lingual as just baked into the datatypes rather than bolted on later if at all.</p>\n<p>Anyway... Every mapping line for me consists of this info:</p>\n<p>Source: dataset id + version + multi lingual name, concept id + version + multi lingual name<br>\nTarget: StructureDefinition element/@id or element/@path. Usually 1 path, could be multiple in parallel or as choice.</p>\n<p>Optional: use ConceptMap for vocabulary</p>\n<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Could we get together somewhere on topic in Baltimore?</p>",
        "id": 153846361,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1472934677
    },
    {
        "content": "<p>we can discuss, though I'm not sure when. I don't know whether StructureMap is the right thing for what you're trying to do -  your mapping sounds like a concept mapping from meta-model to meta-model to me, and that's not really what StructureMap does. But perhaps I don't understand.what you're doing, and you should provide a specific example</p>",
        "id": 153846363,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1472940234
    },
    {
        "content": "<p>I think it would be good to move through the discussion here first </p>",
        "id": 153846364,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1472940248
    },
    {
        "content": "<p>StructureMap/the mapping language does require a shift of perspective, that's true. </p>",
        "id": 153846365,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1472940271
    },
    {
        "content": "<p>Ok, let's try setting the stage. From a helicopter view I'm marrying things we do in ART-DECOR, with stuff in FHIR. Overall purposes is to provide insight to implementers of profiles (StructureDefinitions) as to how the logical definition of what they are implementing relates to it.</p>\n<p>What we do in ART-DECOR:<br>\n===<br>\nCreate dataset for definitional purposes. Characteristics of a dataset:<br>\n1. Has id (OID) + version (timestamp YYYY-MM-DDThh:m:ss), multi lingual name and other properties<br>\n2. Has concepts. Concepts can be a group and contain concepts or be an item and have value domains (code|string|ordinal| ...)<br>\n3. Concepts have an  id (OID) + version (timestamp YYYY-MM-DDThh:m:ss), multi lingual name and other properties<br>\n4. The concept as well as coded value domains have vocab bindings<br>\n5. The concept binds to 0.* single terminology codes/expressions that provide definition/context<br>\n6. The concept coded valuedomain binds to 0..* value sets<br>\n===<br>\nCreate scenario/transaction for contextual purposes. Characteristics of a transaction are most relevant:<br>\n1. Has id (OID) + version (timestamp YYYY-MM-DDThh:m:ss), multi lingual name and other properties<br>\n2. Binds to (a subset of) concepts from a dataset -- the context may not require use of every item in the dataset<br>\n3. Every concept is assigned cardinality / conformance / conditions<br>\n4. At present we do not yet support choosing terminology at this level, but we intend to<br>\n===<br>\nSo I see a couple of routes:<br>\n1. Try to keep stuff in ART-DECOR where it is and find a bridging language that connects it to FHIR</p>\n<p>2. Re-express everything we do in ART-DECOR as FHIR, e.g. Dataset = FHIR Logical Model and Transaction = Profile on FHIR Logical Model, and then try to bridge to profiles.</p>\n<p>Both fail for lack of a FHIR expression language that connects the dots. I have an expression language in ART-DECOR, and I can visualize a profile with clickable links linking the profile directly to the logical definition, but that does not really help me on Simplifier, the build, or any other currently conventional platform. My thinking is that every modeller that creates Logical Models in FHIR would have the exact same problem to solve: how do I tell my profile implementer about the relationship between the logical model and the profile? How do you intend to do this for NEHTA?</p>",
        "id": 153846372,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1472971422
    }
]