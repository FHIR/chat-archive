[
    {
        "content": "<p><a href=\"http://Resource.id\" target=\"_blank\" title=\"http://Resource.id\">Resource.id</a> says as comment \"The only time that a resource does not have an id is when it is being submitted to the server using a create operation.\"</p>\n<p>Also the <a href=\"http://resource.id\" target=\"_blank\" title=\"http://resource.id\">resource.id</a> is expected to serve as endpoint [base]/[type]/[id]</p>\n<p>In our usual setup the FHIR is but a facade for something else which seldom to never allows for using any <a href=\"http://resource.id\" target=\"_blank\" title=\"http://resource.id\">resource.id</a> as endpoint. Behind most of our FHIR servers will be V3 messaging based systems for example.</p>\n<p>Hence, again in our usual setup, we do not generate any <a href=\"http://resource.id\" target=\"_blank\" title=\"http://resource.id\">resource.id</a> and always contain or bundle any referenced data. This avoids the idea that any such resource would be accessible based on that id.</p>\n<p>This seems to contradict the intention of the <a href=\"http://Resource.id\" target=\"_blank\" title=\"http://Resource.id\">Resource.id</a> comment in the spec. How do you handle being a FHIR server that only allows query based access if not like we do? Or is our method allowable and is the comment to be interpreted less strict?</p>",
        "id": 173898625,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1566491947
    },
    {
        "content": "<p>I'd expect that returning resources without ids would break many clients - even if they do not use them to do direct GETs they would try to map or store them etc.</p>",
        "id": 173899473,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1566492598
    },
    {
        "content": "<p>Allowing \"search\" but not \"read\" would be quite odd.  It's not strictly prohibited though.  However, you would certainly expect to always be able to search by id if search is supported.  If you don't have ids, you can't really expose a RESTful interface at all.  If you want to use FHIR as a facade, figuring out how to produce consistent ids is your base point of entry.</p>",
        "id": 173901695,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566494067
    },
    {
        "content": "<p>I don't understand this bit:</p>",
        "id": 173914772,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566502923
    },
    {
        "content": "<blockquote>\n<p>we do not generate any <a href=\"http://resource.id\" target=\"_blank\" title=\"http://resource.id\">resource.id</a> and always contain or bundle any referenced data</p>\n</blockquote>\n<p>Those require a id</p>",
        "id": 173914792,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566502942
    },
    {
        "content": "<p>In Bundle we rely on the fullUrl which is an ad hoc uuid/oid. No need for <a href=\"http://resource.id\" target=\"_blank\" title=\"http://resource.id\">resource.id</a>. To date we have not had to contain  anything. Indeed an id of some sort would be required, but it would be ad hoc too.</p>",
        "id": 173945809,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1566541754
    },
    {
        "content": "<p>well, ok. I read the rules again and that works. Well, you could make a task to clarify the blunt statement that is only true on the restful interface</p>",
        "id": 173946119,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566542136
    },
    {
        "content": "<blockquote>\n<p>If you don't have ids, you can't really expose a RESTful interface at all. If you want to use FHIR as a facade, figuring out how to produce consistent ids is your base point of entry.</p>\n</blockquote>\n<p>That is a clear statement. As it stands I'm a specifier, not an implementer, except for corner cases where we provide mappings. <a href=\"http://Resource.id\" target=\"_blank\" title=\"http://Resource.id\">Resource.id</a> as requirement could really be a killer for V3 facades that map as they are queried, without having any persistent storage itself. V3 has identifiers, not ids. Query by identifier is supported. Query by id has no meaning in that world, unless I simply copy the identifier onto the id, which may or may not be possible because of the length and character constraints of <a href=\"http://Resource.id\" target=\"_blank\" title=\"http://Resource.id\">Resource.id</a>.</p>",
        "id": 173946255,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1566542344
    },
    {
        "content": "<blockquote>\n<p>Well, you could make a task to clarify the blunt statement that is only true on the restful interface</p>\n</blockquote>\n<p>That might be a way forward. The situation is that all systems use the API spec in http.html which bears RESTful API in its title. Not every system can support <a href=\"http://Resource.id\" target=\"_blank\" title=\"http://Resource.id\">Resource.id</a> though, which limits the RESTfulness, I agree. But could they be compliant nonetheless?</p>",
        "id": 173946419,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1566542608
    },
    {
        "content": "<p>not using the RESTful interface - that depends on <a href=\"http://Resource.id\" target=\"_blank\" title=\"http://Resource.id\">Resource.id</a>. But when you get to messaging etc, then, sure.... there's other ways to organise things</p>",
        "id": 173946785,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566543049
    },
    {
        "content": "<blockquote>\n<p>not using the RESTful interface</p>\n</blockquote>\n<p>We use everything in the http.html spec for search and create. We allow read, we do not require it. In practice we see that systems cannot handle ids for any or for some objects. Hence searching for ?_id=... will probably not yield anything</p>",
        "id": 173948271,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1566545136
    },
    {
        "content": "<p>Added <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=23741\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=23741\">GF#23741</a></p>",
        "id": 173948336,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1566545212
    },
    {
        "content": "<p>This likely shows up in many FHIR API onto other systems. I suspect for example that IHE-MHD implementations with XDS or XCA backends do this very thing. I was careful in MHD to not forbid this kind of facade. Mostly because the Consuming application is 99% of the time going to just use Query and never use Read. To force support for Read of an Id just for religion (REST) is not helpful if it doesn't solve a problem. This is not to say that REST is bad, just that there are some API uses that have more compelling story around Create and Query only.</p>",
        "id": 173974024,
        "sender_full_name": "John Moehrke",
        "timestamp": 1566571261
    }
]