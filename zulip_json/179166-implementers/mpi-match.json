[
    {
        "content": "<p>I have a question that is kind of infrastructural, though it surfaces from $match on patient. How would we handle it if the server, when processing the $match operations, decides that it wants further information from the client, and then to try again - like, say, a questionnaire?</p>",
        "id": 153916126,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508964995
    },
    {
        "content": "<p>OperationOutcome ?</p>",
        "id": 153916128,
        "sender_full_name": "Eric Haas",
        "timestamp": 1508966047
    },
    {
        "content": "<p>Need same for Scheduling</p>",
        "id": 153916129,
        "sender_full_name": "Eric Haas",
        "timestamp": 1508966062
    },
    {
        "content": "<p>We have the same use case for decision support, especially the radiology use case.</p>",
        "id": 153916151,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1508968669
    },
    {
        "content": "<p>GuidanceResponse had a way to indicate a status of \"data-needed\" and return a set of data requirements to describe the need.</p>",
        "id": 153916152,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1508968699
    },
    {
        "content": "<p>so right now, this would be an extension - should we define one? what would it say?</p>",
        "id": 153916171,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508972289
    },
    {
        "content": "<p>So, maybe it's an OperationOutcome, with an issue type of \"transient\", and maybe something that says \"not enough information\", and then something that indicates what the data requirements are. This is also very similar to the \"model-definition\" usage of a Library, as in, the results of a <a href=\"http://build.fhir.org/library-operations.html#data-requirements\" target=\"_blank\" title=\"http://build.fhir.org/library-operations.html#data-requirements\">$data-requirements operation</a>?</p>",
        "id": 153916177,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1508973750
    },
    {
        "content": "<p>well, what are the different possible things a server want, and the follow up? if the server indicates it wants extra data, or some specific questions asked, then what happens?</p>",
        "id": 153916178,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508974152
    },
    {
        "content": "<p>So far, the two use cases we've encountered are data requirements, in which case, the interaction needs some way to provide the additional data. For CDS evaluation, that's the same as providing data as part of the request, there's already a facility for that. The other use case is the questionnaire, which the client would have to understand that that meant \"ask the user for this data, and then provide it on the next request as a QuestionnaireResponse\"</p>",
        "id": 153916179,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1508974605
    },
    {
        "content": "<p>second use case is the same for me</p>",
        "id": 153916180,
        "sender_full_name": "Eric Haas",
        "timestamp": 1508974649
    },
    {
        "content": "<p>well, the most general case is an SDC enabled questionnaire .... system can fill things out if it can, and re-submit.</p>",
        "id": 153916181,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508974838
    },
    {
        "content": "<p>but it has to submit the original request as well.</p>",
        "id": 153916182,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508974852
    },
    {
        "content": "<p>So the QuestionnaireResponse in a header?</p>",
        "id": 153916183,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508974867
    },
    {
        "content": "<p>What do you mean by QuestionnaireResponse in a header.  Wouldn't it be a separate interaction of $information.</p>",
        "id": 153916185,
        "sender_full_name": "Eric Haas",
        "timestamp": 1508975051
    },
    {
        "content": "<p>I suppose without having a parameter to provide the data, then yes, something like a header would have to be used. Feels...out-of-band</p>",
        "id": 153916186,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1508975053
    },
    {
        "content": "<p>well, better than containing it, or starting to orchestrate distributed transactions</p>",
        "id": 153916187,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508975354
    },
    {
        "content": "<p>With patient match you're likely to indicate not enough data.<br>\ni.e. it wants at least 5 bits of information, and you've only provided 2.<br>\nDon't know that the questionnaire is really what you want. Unless its a QuestionnaireResponse that you're requiring.<br>\n(I don't have a good answer for this though)</p>",
        "id": 153918814,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1510304853
    },
    {
        "content": "<p>Is there any cross testing of the $match operation/is anyone aware of implementations in the field or adoption status? <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span></p>",
        "id": 165767512,
        "sender_full_name": "Julie Maas",
        "timestamp": 1557966301
    },
    {
        "content": "<p>I've personally done 2 implementations of it (facading into internal systems) it don't know of others at this point.</p>",
        "id": 165767598,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1557966392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span> did you guys try this out?</p>",
        "id": 165767611,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1557966418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191648\">@Adam Culbertson</span> ?</p>",
        "id": 165771585,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557971184
    },
    {
        "content": "<p>We have not done patient.$match.  However our patient.search implementation is behaviorally more like $match than a proper search.   When clients do patient.search, if they haven't provided sufficient inputs, we simply return 0 results.  At least in the patient lookup use case, if a user gets 0 results for given input, it is generally intuitive to users that they just need to provide more info in order to find the match they are looking for.</p>",
        "id": 165806388,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1558011028
    },
    {
        "content": "<p>If you're going to do that, you should return a failure HTTP code and an OperationOutcome.  A successful query with zero records means no data exists.</p>",
        "id": 165810250,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1558013926
    },
    {
        "content": "<p>This is similar to the very long discussion at <a href=\"#narrow/stream/179166-implementers/topic/Are.20search.20parameters.20like.20filters.3F\" title=\"#narrow/stream/179166-implementers/topic/Are.20search.20parameters.20like.20filters.3F\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Are.20search.20parameters.20like.20filters.3F</a></p>\n<p>Providing hints to the existence  of potential matches can be considered a security risk. Just like it is better to return \"User ID or password did not match\" instead of either \"User ID unknown\" or \"wrong password\", not telling whether the result of a broad or shallow patient search can net someone some or many potential victims can be considered a better approach.</p>",
        "id": 165825490,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1558024309
    },
    {
        "content": "<p>Could patient.$match be used in cross-organizational queries rather than creating something new for that? Looking to not replicate any work already done on privacy-aware use of patient.$match or similar approaches, but also identify best practice minimum requirements &amp; common practice in the field for a match request (name, dob, etc.). I also recently explored using an OpenID as an identifier at the last connectathon (when pre-registered, could use as a match criterion). At the connectathon Drivers License # was also mentioned as a potential attribute. Appreciate any input from those who are interested in this same topic...</p>",
        "id": 165840446,
        "sender_full_name": "Julie Maas",
        "timestamp": 1558034340
    },
    {
        "content": "<p>mpi-match is only appropriate for trusted users who have the kind of access such that they are not a security risk</p>",
        "id": 165854777,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558045758
    },
    {
        "content": "<p>e.g. it is not intended to be a valid approach for an external user matching against their own record</p>",
        "id": 165854799,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558045787
    },
    {
        "content": "<p>I would think it would only be suitable for cross-organizational queries in limited circumstances where there are contractual controls around information exposure</p>",
        "id": 165854884,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558045847
    },
    {
        "content": "<p>I would have thoight it would be fine, it would be up to the caller to chose how much of their resource was acceptable to share. Essentially the search parameters being used in this way is the same exposure.</p>",
        "id": 166071671,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1558346388
    },
    {
        "content": "<p>you would not offer search in this case either</p>",
        "id": 166073898,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558348518
    },
    {
        "content": "<p>There is too many layers of responsibility being talked about as if they are one. They layers of responsibility do work together to achieve one overall organizational policy. However they are different responsibilities. There is a legitimate discussion of what the most flexible 'interoperability' layer responsibility is, at this layer we talk about pure meaning of query parameters and results. But there are Privacy, Security, Medical-Safety, and other Business layer rules that are implemented between this interoperability layer and the end use-case. It is in these various layers, that one adds restrictions on what a patient them-selves will get, what will happen if an authorized clinician expresses break-glass, and what population-health infrastructure would get. These various layers can be implemented squished together, and are often indistinguishable from a server API.</p>",
        "id": 166082123,
        "sender_full_name": "John Moehrke",
        "timestamp": 1558356838
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"191648\">Adam Culbertson</span> ?<br>\n```I have yet to do implementation on this.  But have tried getting a couple of proposals for funding on this.  I gave a talk in 2016 that details some thoughts on this <a href=\"https://www.youtube.com/watch?v=3zbT_JjyyVc\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=3zbT_JjyyVc\">https://www.youtube.com/watch?v=3zbT_JjyyVc</a>.  Basically we there is a need to do a proof of concept to move forward the work that has been started and would like to finish this work.</p>\n</blockquote>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"3zbT_JjyyVc\" href=\"https://www.youtube.com/watch?v=3zbT_JjyyVc\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=3zbT_JjyyVc\"><img src=\"https://i.ytimg.com/vi/3zbT_JjyyVc/default.jpg\"></a></div>",
        "id": 166086366,
        "sender_full_name": "Adam Culbertson",
        "timestamp": 1558360221
    },
    {
        "content": "<blockquote>\n<p>Could patient.$match be used in cross-organizational queries rather than creating something new for that? Looking to not replicate any work already done on privacy-aware use of patient.$match or similar approaches, but also identify best practice minimum requirements &amp; common practice in the field for a match request (name, dob, etc.). I also recently explored using an OpenID as an identifier at the last connectathon (when pre-registered, could use as a match criterion). At the connectathon Drivers License # was also mentioned as a potential attribute. Appreciate any input from those who are interested in this same topic...</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>@**Julie Maas** I have studied this issue in the recent past https://www.ncbi.nlm.nih.gov/pubmed/28378025.  In terms of best practices, it is important to parse the issue of matching versus data quality/ availability.   In my work as an innovator in residence on the topic,  Studied the data available to match, the effectiveness of patient matching algorithms (three open source versions), and then created a challenge to encourage the use of metrics.\n</pre></div>",
        "id": 166086791,
        "sender_full_name": "Adam Culbertson",
        "timestamp": 1558360531
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"191648\">Adam Culbertson</span> ?</p>\n</blockquote>\n<p>I have not done any implementations of it.  But did work on these several years back and would be happy to work on a reference implementation if someone has an interest.</p>",
        "id": 173889383,
        "sender_full_name": "Adam Culbertson",
        "timestamp": 1566485512
    },
    {
        "content": "<p>Circling back on this old topic - what's the distinction between $match and <a href=\"http://Patient.search\">Patient.search</a>? </p>\n<p><a href=\"http://hl7.org/fhir/patient-operation-match.html\">hl7.org/fhir/patient-operation-match.html</a></p>",
        "id": 222517008,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1610498675
    },
    {
        "content": "<p>They're similar in intent, but pretty different in format (a series of name=[value] pairs encoded in the URL or as an application/x-www-form-urlencoded submission for a POST VS POST with JSON body)</p>",
        "id": 222517074,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1610498738
    },
    {
        "content": "<p>Search has tighter semantics (results need to actually match the supplied criteria); $match semantics are more like \"do you have a (probable) ID for this patient of mine?\", and the results can be fuzzy or match on just a subset of fields.</p>",
        "id": 222530042,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1610510170
    },
    {
        "content": "<p>Framed another way, <code>name=bob</code> will never return 'Robert' with search, but Patient having a name of 'Bob' passed into $match could return a hit</p>",
        "id": 222533094,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1610513084
    },
    {
        "content": "<p>Ah, exact match vs probabilistic.</p>",
        "id": 222537944,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1610517966
    },
    {
        "content": "<p>Why are the formats so different?</p>",
        "id": 222537960,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1610517979
    },
    {
        "content": "<p>The POST body with form-encoded vs JSON parameters body</p>",
        "id": 222538002,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1610518025
    },
    {
        "content": "<p>Operations have to follow the operations rules for parameters</p>",
        "id": 222588659,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1610548786
    },
    {
        "content": "<p>The way I think about it is that as you add more data (parameters) to <a href=\"http://Patient.search\">Patient.search</a>, you should get fewer results.  But as you add more data to patient.$match, you may get more results, since the server has more data it can use for matching.</p>\n<p>The other way to see the difference is that with <a href=\"http://Patient.search\">Patient.search</a>, the client determines what criteria to use.  With Patient.$match, the server is making the decision.  Of course in practice, many servers may be doing that for <a href=\"http://patient.search\">patient.search</a> too, since there is the comment about \"server discretion\" in the search interaction page.</p>",
        "id": 222596011,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1610551299
    },
    {
        "content": "<p>Note that not all servers actually behave as described for <a href=\"http://patient.search\">patient.search</a>... But that's how I look at it.</p>",
        "id": 222596121,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1610551326
    },
    {
        "content": "<p>Thanks everyone</p>\n<p><span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span> would Epic be  deviating from that, per earlier comments above? Or has that changed?</p>",
        "id": 222599155,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1610552372
    },
    {
        "content": "<p>Our <a href=\"http://Patient.search\">Patient.search</a> behaves more like a $match.  If you happen to be familiar with Epic..., we use IDC behind the scenes.  This is allowed per this bit in the search spec: <br>\n<code>The server determines which of their resources meet the criteria contained in the search parameters as described below. However, the server has the prerogative to return additional search results if it believes them to be relevant.</code></p>",
        "id": 222628979,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1610564527
    },
    {
        "content": "<p>Search works against specific indexes.  Match works against \"magic sauce\" that varies from implementation to implementation with all sorts of transformations and weightings.  So it was somewhat cleaner to just pass in the whole Patient with whatever you have and the server would use whatever it could.</p>",
        "id": 222680461,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1610600581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191648\">@Adam Culbertson</span> just following up on your interest in an RI for this...FYI Scenario 6 at this <a href=\"https://confluence.hl7.org/pages/viewpage.action?pageId=120094899\">connectathon 28</a> has more details about profiling $match now, in case you would like to explore. Appreciate your feedback!</p>",
        "id": 253330212,
        "sender_full_name": "Julie Maas",
        "timestamp": 1631656637
    }
]