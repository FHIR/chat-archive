[
    {
        "content": "<p>I'm doing some work with a HealthcareService directory, and i notice that the HealthcareService does not have a reference to a Practitioner (or practitionerRole?) resource. Instead, it looks like the PractitionerRole has a reference to the HealthcareService.</p>\n<p>This feels like the wrong direction for the relationship to me, i.e., I believe that the HealthcareService should reference practitioner (or practitioner Role)? This would be more consistent with fact that it's the healthcareService that references organization and location, it seems odd that it doesn't also reference practitioners.</p>\n<p>What is the rationale for the direction of this reference, and is it under consideration for change?</p>",
        "id": 153919159,
        "sender_full_name": "Tim Berezny",
        "timestamp": 1510526125
    },
    {
        "content": "<p>In general, references point from the record created second to the one created first and from the many to the 1.  The relationship between Practitioner and HealthCareService is consistent with that guideline.  The relationship between HealthCareService and Location and Organization is also consistent with that guideline.  Is there a pressing need for a change?</p>",
        "id": 153919221,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1510571812
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> for the insight, that is helpful. Yes, practitioner would often be created after healthcare service. However, a healthcare service would have many practitioners (often). Healthcareservice &lt;&gt; practitioners is many-to-many conceptually, so that one could go either way.  </p>\n<p>The main thing I’m trying to figure out is how to build a search API to a HealthcareService directory. I would like the root URL that my integrations use to stay with [base]/HealthcareService, (not search on [base]/practitionerRole) so that the integrator can easily chain a number of search parameters together (organization, near to a location, type, specialty, etc…).</p>\n<p>The search example scenario I’m running into challenges with is “Search for a healthcareService near an address, by a practitioner’s name”, which, ideally would look something like this.</p>\n<p>GET [base]/HealthcareService?PRACTITIONER-NAME:contains=Jones&amp;location.near=-83.694810:42.256500<br>\n&amp;near-distance=10||km</p>\n<p>I’ve written PRACTITIONER-NAME in as the main item I’m not sure how to include in the search string, since practitioner is NOT referenced from the healthcareService Resource (hence the original question). </p>\n<p>There might be something simple in SEARCH that I’m missing here, I’m fairly early in my exploration of search in FHIR.</p>\n<p>As a bit of additional context: an underlying philosophy we’re using for searching for services for the purpose of sending an eReferral is that I’m ALWAYS looking for a healhtcareService resource. This is our key resource used to route the eReferral to the correct destination.</p>",
        "id": 153919457,
        "sender_full_name": "Tim Berezny",
        "timestamp": 1510670523
    },
    {
        "content": "<p>It's true that Practitioner&lt;-&gt;HealthCareService is many-to-may.  However typically a practitioner will have fewer healthcare services than the reverse.</p>",
        "id": 153919460,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1510671528
    },
    {
        "content": "<p>Technically there's nothing to stop you from writing a custom search parameter on HealthCareService that involves a reverse search of Practitioner - so long as the HealthCareService repository has access to all relevant Practitioner repositories.</p>",
        "id": 153919461,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1510671590
    },
    {
        "content": "<p>The problem with search as a criteria for what properties live where is there's typically use-cases for both</p>",
        "id": 153919462,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1510671639
    },
    {
        "content": "<p>Have you looked at _has?</p>",
        "id": 153919464,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1510671689
    },
    {
        "content": "<p>I <em>think</em> you can do what you need with GET[base]/HealthcareService?location.near=-83.694810:42.256500&amp;near-distance=10|km&amp;_has:PractitionerRole:service:practitioner.name:contains=Jones</p>",
        "id": 153919467,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1510672040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> Can reverse chaining and regular chaining be mixed as above?</p>",
        "id": 153919469,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1510672062
    },
    {
        "content": "<p>I think so</p>",
        "id": 153919487,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1510673026
    },
    {
        "content": "<p>Do we need to add anything to the spec to make that support explicit?</p>",
        "id": 153919534,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1510677359
    },
    {
        "content": "<p>only complexity there is the chaining to the location for near and near-distance.<br>\nNot sure that would work (as its a kind of composite on location)</p>",
        "id": 153919588,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1510700455
    },
    {
        "content": "<p>Yeah, that's true.  Should that actually be defined as a composite parameter?  \"near-distance\" isn't actually useful without the .near</p>",
        "id": 153919644,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1510737475
    },
    {
        "content": "<p>Probably.</p>",
        "id": 153919936,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1510825200
    },
    {
        "content": "<p>Do you want to write the change request or should I? :)</p>",
        "id": 153919950,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1510826155
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> , <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> , this is hugely helpful. We weren't familiar with the _has parameter, we're going to pursue that path.</p>",
        "id": 153920397,
        "sender_full_name": "Tim Berezny",
        "timestamp": 1511191884
    },
    {
        "content": "<p>Chain &amp; _has can be combined in Vonk as well.</p>",
        "id": 153921078,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1511377281
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14216\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14216\">GF#14216</a></p>",
        "id": 153921171,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1511399151
    },
    {
        "content": "<p>Thanks Lloyd.</p>",
        "id": 153921174,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1511399375
    }
]