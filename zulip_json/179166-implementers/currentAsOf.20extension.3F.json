[
    {
        "content": "<p>FHIR's Meta.lastUpdated element tells you how long something has been stable (time of last update). But in data aggregation scenarios there's a distinct desire to know when data are <em>stale</em>, e.g. with something like a <code>currentAsOf</code> extension, so even data that hasn't changed could be marked with the time they were last refreshed by the aggregator from primary sources. <a href=\"https://github.com/smart-on-fhir/smart-scheduling-links/issues/16#issuecomment-799954590\">https://github.com/smart-on-fhir/smart-scheduling-links/issues/16#issuecomment-799954590</a> has an example.</p>\n<p>But... If an aggregator actually populated this extension it'd be <em>causing</em> an update, and presumably Meta.lastUpdated would tick up because of this. On this evaluation, it seems fine for aggregators to just skip the currentAsOf extension and repopulate lastUpdated as $now each time they refresh content.</p>\n<p>Anybody have a different take?</p>",
        "id": 230461048,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1615871875
    },
    {
        "content": "<p>AFAIK updates to meta don't cause _lastUpdated to be updated. But whether that's mandated by the spec.. that's the q.</p>",
        "id": 230470476,
        "sender_full_name": "Ren√© Spronk",
        "timestamp": 1615880408
    },
    {
        "content": "<p>yes, unfortunately there is some hints in the spec that say that updates to meta don't update _lastUpdated. I think this is a bad general rule. It is not a bad consideration for policy. That is to say to declare that a server can have a policy that would allow some specific kinds of updates to meta to not be reflected in _lastUpdated.<br>\nThe big problem I see with any policy that does not update the _lastUpdated, is that it puts provenance in question overall. If there is any rule that allows _lastUpdated to not be changed, then one must question what other rules are around that don't do something.</p>",
        "id": 230503971,
        "sender_full_name": "John Moehrke",
        "timestamp": 1615898118
    },
    {
        "content": "<p>Josh, Your use-case seems reasonable within a closed system. That is that there is a database level solution. But to expose this at the FHIR API brings up many problems. Why does it need to be exposed at the FHIR level?  <br>\nProvenance could do what you are asking, but would be very heavy as even a minimally populated Provenance is bigger than a timestamp extension. However, one Provenance record can tag thousands of resources as \"all of these are current as of today\"</p>",
        "id": 230504450,
        "sender_full_name": "John Moehrke",
        "timestamp": 1615898363
    },
    {
        "content": "<p>Thanks for the call out that changes to mets needn't affect lastUpdated. (Is there a reference for this?)</p>",
        "id": 230516834,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1615903443
    },
    {
        "content": "<p>I think it was in the $meta-add operation, but don't see it there now</p>",
        "id": 230518690,
        "sender_full_name": "John Moehrke",
        "timestamp": 1615904070
    },
    {
        "content": "<p>but using the $meta-add was at a time defined as not updating the _lastUpdated</p>",
        "id": 230518749,
        "sender_full_name": "John Moehrke",
        "timestamp": 1615904097
    },
    {
        "content": "<p>I think I successfully got the bad fixed policy removed.</p>",
        "id": 230519227,
        "sender_full_name": "John Moehrke",
        "timestamp": 1615904278
    },
    {
        "content": "<p>In my FHIR SPL work, we need to know that exact question - how current is this data - and I came to the same conclusion as you did - any element that I added to track that would just duplicate the Meta.lastUpdated, so we are just using that and are telling users to just send a no-change update to make things current.</p>",
        "id": 230533661,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1615908726
    },
    {
        "content": "<p>There are technical operations that don't reflect a 'review' of the data that could change _lastUpdated.   _lastUpdated is also server-specific.  If I receive a record from another system that represents \"knowledge as of 5 years ago\", the _lastUpdated in my system could be 'today' if I received the record today.  That doesn't mean that that information is 'current' as of today.</p>",
        "id": 230536395,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615909643
    },
    {
        "content": "<p>In the context of this thread, \"currentAsOf\" represents: \"I [the aggregator]  last queries the information source for this data at ____\". (Agreed the word \"current\" could be misleading; don't read too much into that <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>.)</p>",
        "id": 230537266,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1615909940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span> I seem to remember doing a no-change update to a server (HAPI?) and it just ignored it, noticing that there was no change. It didn't update the version number. I am not sure about  lastUpdated but I would assume not.</p>",
        "id": 230537490,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1615910034
    },
    {
        "content": "<p>If you go through and update tags or profile declarations or anything else purely locally (without grabbing the data from source of truth) your lastUpdated will still change</p>",
        "id": 230538366,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615910339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191651\">Rik Smithies</span> <a href=\"#narrow/stream/179166-implementers/topic/currentAsOf.20extension.3F/near/230537490\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"192166\">Jean Duteau</span> I seem to remember doing a no-change update to a server (HAPI?) and it just ignored it, noticing that there was no change. It didn't update the version number. I am not sure about  lastUpdated but I would assume not.</p>\n</blockquote>\n<p>Well, that would suck!  We've been assuming that sending a PUT with a complete instance would create a new version even if the data was exactly the same.  Something to note for our testing!</p>",
        "id": 230544466,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1615911665
    },
    {
        "content": "<p>I presume you meant PUT?  It is up to a server whether it actually creates a new instance.  (It's also up to the server whether it changes what you asked to be changed...)</p>",
        "id": 230550928,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615913945
    },
    {
        "content": "<p>Isn't that what I said? :) I changed it as I constantly get POST and PUT backwards.  That's news to me that it's up to the server on whether it actually creates a new instance.  Hmm...</p>",
        "id": 230551094,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1615914002
    },
    {
        "content": "<p>Even more fun, on a POST, you might get back the id of a pre-existing resource rather than a new one created :)</p>",
        "id": 230551613,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615914153
    },
    {
        "content": "<p>I think you have to look at the response to a POST or PUT to make sure the server did what you expected.</p>",
        "id": 230551734,
        "sender_full_name": "Paul Church",
        "timestamp": 1615914193
    },
    {
        "content": "<p>okay, so this tells me that to ensure that Meta.lastUpdated actually gets updated when I do an update, that I have to add a new field via an extension that is the equivalent of Meta.lastUpdated and that I will update when I do the update so that the update will get done?</p>",
        "id": 230551972,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1615914269
    },
    {
        "content": "<p>If the server happens to support that extension.  Rather than doing that, I'd probably set some expectations in the IG about updates forcing a new version or maybe define a 'touch' operation rather than adding a useless data element.</p>",
        "id": 230555127,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615915306
    },
    {
        "content": "<p>upon re-reading, I'm presuming this means that if I'm a client, I can't necessarily expect the server to do what I ask.  But if I'm designing the server and using IBM's server or HAPI's server, I'm hoping that I can force an update and/or an update of the lastUpdate.</p>",
        "id": 230555481,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1615915408
    },
    {
        "content": "<p>Yes, that should be possible.  Though you'd have to check with the author of the server in question.</p>",
        "id": 230555989,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615915571
    },
    {
        "content": "<p>(And also make sure they don't 'optimize' things in an update and you don't recognize the change...)</p>",
        "id": 230556087,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615915601
    },
    {
        "content": "<p>is this behaviour not standardised? we wouldn't want a solution that would fail if a new server vendor was switched in one day.</p>",
        "id": 230563443,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1615918079
    },
    {
        "content": "<p>okay, having read the relevant parts of the specification, then the SHOULDs about data in matching data out can become SHALLs for an implementation's specific use-case.  If the concerns about data integration and transactional integrity are not actually concerns, then one can develop one's server appropriately.  As to whether the OTS servers support that is a question that everyone deciding on using one of those would need to ask.</p>",
        "id": 230570775,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1615920970
    },
    {
        "content": "<p>Hi, I‚Äôm the person who posted the GitHub issue <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>  referred to in the OP. I‚Äôm pretty new to HL7 &amp; FHIR, so apologies if I‚Äôm missing the obvious. The <code>currentAsOf</code> extension here is hypothetical right? Am I understanding correctly that we‚Äôre talking about something roughly like:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"c1\">// some domain resource</span>\n  <span class=\"s2\">\"extension\"</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n    <span class=\"s2\">\"url\"</span><span class=\"o\">:</span> <span class=\"s2\">\"http://hl7.org/fhir/StructureDefinition/currentAsOf\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"valueInstant\"</span><span class=\"o\">:</span> <span class=\"s2\">\"2021-03-17T12:08:36Z\"</span>\n  <span class=\"p\">}]</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>?</p>",
        "id": 230791689,
        "sender_full_name": "Rob Brackett",
        "timestamp": 1616027424
    },
    {
        "content": "<p>Welcome <span class=\"user-mention\" data-user-id=\"398591\">@Rob Brackett</span>!  Yes hypothetical extension for the moment :) And indeed, the example you're writing out here is precisely what I had in mind.</p>",
        "id": 230793206,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1616028596
    },
    {
        "content": "<p>We could suggest this as a new core extension, too. I'll submit a Jira issue for it.</p>",
        "id": 230793296,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1616028633
    },
    {
        "content": "<p>Added <a href=\"http://jira.hl7.org/browse/FHIR-31567\">FHIR-31567</a></p>",
        "id": 230793574,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1616028863
    },
    {
        "content": "<p>Checking in here‚Ä¶ the current status (not finalized, but ready for a vote) is that we‚Äôd have this?</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"s2\">\"resourceType\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Slot\"</span><span class=\"p\">,</span>  <span class=\"c1\">// Or whatever</span>\n  <span class=\"s2\">\"meta\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"extension\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"s2\">\"url\"</span><span class=\"o\">:</span> <span class=\"s2\">\"http://hl7.org/fhir/StructureDefinition/lastSourceSync\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"valueDateTime\"</span><span class=\"o\">:</span> <span class=\"s2\">\"2021-03-15T23:00:01Z\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"id\"</span><span class=\"o\">:</span> <span class=\"s2\">\"123\"</span><span class=\"p\">,</span>\n  <span class=\"c1\">// etc...</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 235238997,
        "sender_full_name": "Rob Brackett",
        "timestamp": 1618862169
    }
]