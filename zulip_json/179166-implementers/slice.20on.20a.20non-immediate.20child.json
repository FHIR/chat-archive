[
    {
        "content": "<p>Does a slice discriminator path have to be an immediate child of the sliced element?</p>\n<p>You can have this:</p>\n<div class=\"codehilite\"><pre><span></span><code>        &lt;slicing&gt;\n            &lt;discriminator&gt;\n               &lt;type value=&quot;value&quot;/&gt;\n               &lt;path value=&quot;someelement&quot;/&gt;\n</code></pre></div>\n<p>But can you have this?</p>\n<div class=\"codehilite\"><pre><span></span><code>         &lt;slicing&gt;\n            &lt;discriminator&gt;\n               &lt;type value=&quot;value&quot;/&gt;\n               &lt;path value=&quot;someelement.coding.code&quot;/&gt;    &lt;!-- possible? --&gt;\n</code></pre></div>",
        "id": 230586680,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1615926935
    },
    {
        "content": "<p>Yep.  That is fine.  In fact, the <a href=\"http://hl7.org/fhir/R4/bp.html\">BP profile</a> does that...  (Although I would have personally preferred a <code>pattern</code> discriminator on <code>code</code> in the BP profile).</p>",
        "id": 230586997,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615927075
    },
    {
        "content": "<p>cool! My aim is to slice on a codeableConcept but just the code and to leave the display optional. If the whole code is fixed then you force a decision on display, in or out.</p>",
        "id": 230587729,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1615927369
    },
    {
        "content": "<p>With code, you should generally slices on both code + system - which means it's actually easier to slice by pattern on the Coding</p>",
        "id": 230588842,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615927818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191651\">@Rik Smithies</span> --  Understood.  If you only care about <code>code</code> then that's a good approach.  But if you care about <code>system</code> and <code>code</code>, then you may want to consider using a <code>pattern</code> discriminator on <code>code</code> and <code>patternCodeableConcept</code> to \"set\" the required  system/code in the slice.  When you use <code>pattern[x]</code>, the unspecified properties (like <code>display</code>) can be any value (or absent).</p>",
        "id": 230589029,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615927894
    },
    {
        "content": "<p>Caring about 'code' and not 'system' in a Coding is a dangerous thing to do... :)</p>",
        "id": 230589444,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615928043
    },
    {
        "content": "<p>I do care about system just hadn't brought it into the discussion, to keep it simpler :) But its good to know I can slice on both.</p>",
        "id": 230589697,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1615928145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> -- if you are discriminating on a <code>CodeableConcept</code> to slice some higher-level array (like <code>Observation.component</code>), wouldn't it be preferable to slice on the <code>code</code> rather than <code>code.coding</code>?  If you slice on <code>code.coding</code> then I think that in the slices you need to put the <code>patternCoding</code> on <code>code.coding</code> -- but then to avoid requiring every instance of that <code>Coding</code> to match the pattern, you also have to introduce a new slicing on <code>code.coding</code>, right?  When given the choice between <code>n</code> slicings and <code>n + 1</code> slicings, I almost always choose <code>n</code>!</p>",
        "id": 230590160,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615928306
    },
    {
        "content": "<p>is there an example of using patternCodeableConcept somewhere?</p>",
        "id": 230590161,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1615928307
    },
    {
        "content": "<p>US Core Pediatric BMI: <a href=\"http://www.hl7.org/fhir/us/core/StructureDefinition-pediatric-bmi-for-age.html\">http://www.hl7.org/fhir/us/core/StructureDefinition-pediatric-bmi-for-age.html</a></p>",
        "id": 230590332,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615928392
    },
    {
        "content": "<p>It's not in the context of a slice, but if you're just looking for a <code>patternCodeableConcept</code>, it's in there.</p>",
        "id": 230590514,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615928442
    },
    {
        "content": "<p>thanks, I will try to put the pieces together :-)</p>",
        "id": 230590616,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1615928475
    },
    {
        "content": "<p>Here's one from mCODE that slices <code>Observation.component</code> on <code>code</code>.  But there's a lot going on in that profile, so it's easy to get lost in the weeds: <a href=\"https://build.fhir.org/ig/HL7/fhir-mCODE-ig/StructureDefinition-mcode-comorbidities-elixhauser.html\">https://build.fhir.org/ig/HL7/fhir-mCODE-ig/StructureDefinition-mcode-comorbidities-elixhauser.html</a></p>",
        "id": 230591273,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615928750
    },
    {
        "content": "<p>I seem to be able to get what I want by going back to descriminating on the child element itself (not the coding or code) and just putting a patternCodeableConcept on the element, rather than a fixedCodeableConcept. I take it that descriminating on a \"patterned\" element is allowed, as well on as a \"fixed\" one. It's a checkable constraint I guess.</p>",
        "id": 230592515,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1615929249
    },
    {
        "content": "<p>Slicing on component.code is fine.  Slicing on component.code.coding.code without component.code.coding.system would be problematic.</p>",
        "id": 230594187,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615930121
    },
    {
        "content": "<p>Discriminating on pattern is better than fixed because pattern will ignore differences in extensions, display, etc.</p>",
        "id": 230594268,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615930171
    },
    {
        "content": "<p>But note that in R4 if the slices use <code>pattern[x]</code> then the discriminator type needs to be <code>pattern</code> (as opposed to <code>value</code>, which is what you use if the slices use <code>fixed[x]</code>).</p>",
        "id": 230594587,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615930309
    },
    {
        "content": "<p>I believe the validator doesn't care</p>",
        "id": 230594734,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615930381
    }
]