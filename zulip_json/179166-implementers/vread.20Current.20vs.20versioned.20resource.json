[
    {
        "content": "<p>Hi All, If querying a resource using a vread  is there anything in the resource that indicates that the returned version is not the current version? I note that there is resource.active but the description appears to be functional - ie this record is active vs the version of the record resource is not active. Is there somewhere else that indicates this for the resource version?</p>",
        "id": 153957696,
        "sender_full_name": "Paul Watt",
        "timestamp": 1525995450
    },
    {
        "content": "<p>The 'active' flag only exists on Patient (and perhaps one or two other resources) and it applies to the record, not the version.  I'm not clear what the point of a declaration on resource that says \"this is the current version\" would be, given that such a claim could be invalidated milliseconds after it was retrieved.  Can you explain how you'd use such a flag?</p>",
        "id": 153957775,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1526042701
    },
    {
        "content": "<p>Maybe it's not significant but my thought process was if a client queried using a vread and the server returns the current version how does the client know that it's the current version? (without necessarily querying the same resource with a read) Alternatively if a server received a vread that is for the current version should it just return the current version or should it return something else such as a redirect to the read?</p>",
        "id": 153959886,
        "sender_full_name": "Paul Watt",
        "timestamp": 1526260805
    },
    {
        "content": "<p>If a server receives a vread, the expectation is that it will receive a response back, not a redirect.  Typically a server either wants \"most recent\" or \"the version as it was referenced\".  The knowledge of what's \"current\" is highly dynamic.</p>",
        "id": 153959900,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1526275103
    },
    {
        "content": "<p>So a vread that happens to be the most recent version is simply returned to the client.<br>\nGiven that current is dynamic is there anything that flags to a client that a historical version has been returned?</p>",
        "id": 153959930,
        "sender_full_name": "Paul Watt",
        "timestamp": 1526278734
    },
    {
        "content": "<p>Not right now.  Again, the question would be what the use-case is for the flag given that the absense of the flag doesn't mean that your version is still \"current\".</p>",
        "id": 153959959,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1526279889
    },
    {
        "content": "<p>I'm not sure why it should matter that a historical version is also current?</p>",
        "id": 153959974,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1526281632
    },
    {
        "content": "<p>All versions are historic to a client to any extend. The resource that a client 'just' received can be outdated the millisecond after. As such, the server would tell the client a lie if it said it was the current version - it can only be the newest within that split of transaction. It might have been the newest version retrieved at the time of the client request - but that  'newest' version can be stale right after you fetched it. Since it sounds like you are using versioned resources and that you will probably update your resources based on its version (which is great) you will probably encounter the version aware updates scheme - and you will know for sure if your resource is stale or not.</p>",
        "id": 153959984,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1526282977
    },
    {
        "content": "<p>I agree with the arguments around not flagging a current version. The thought came up when working through vread on how to minimize the potential risk of action being taken on a stale resource - either know it's the most current or that it's not, given that a vread could potentially return either.</p>",
        "id": 153960224,
        "sender_full_name": "Paul Watt",
        "timestamp": 1526295008
    },
    {
        "content": "<p>If you support the use of <a href=\"http://build.fhir.org/http.html#versionaware\" target=\"_blank\" title=\"http://build.fhir.org/http.html#versionaware\">http://build.fhir.org/http.html#versionaware</a> you should not hit the case of running updates on stale data.</p>",
        "id": 153960226,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1526295215
    },
    {
        "content": "<p>Agreed updates are covered with IfMatch checking. The action I was talking about was clinician action rather than a system action.</p>",
        "id": 153960228,
        "sender_full_name": "Paul Watt",
        "timestamp": 1526296152
    },
    {
        "content": "<p>If it's relevant, the system can do a GET on the base URL looking for a response only if the data has changed eTag.  If you get a response, you've now got the current version and if nothing's changed, you haven't cost yourself much bandwidth.</p>",
        "id": 153960269,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1526298735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> - if you're looking for performance then use the HTTP HEAD operation in combination with ETag. It saves you the body</p>",
        "id": 153960619,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1526321975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194153\">@Paul Watt</span> Ain't it more a task for the software to do such checks and verifications?</p>",
        "id": 153960621,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1526322017
    },
    {
        "content": "<p>Yes, but if you want to make sure you have the current version, you'd actually want the full payload if there is one</p>",
        "id": 153960627,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1526323079
    },
    {
        "content": "<p>Ain't that what HEAD and ETag is all about? Not specifically load and serialize the entire resource but just checking the version?</p>",
        "id": 153960634,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1526329102
    },
    {
        "content": "<p>Right.  But if your problem is \"I have some version and want to know if I have the current version before I update\", then you'll always want to actually retrieve the current version if you don't already have it.  So far we haven't heard a use-case to just check whether I've got the current version, but have no interest in retrieving the current version if I don't have it.  If there were such a use-case, then HEAD + ETag would be the solution.</p>",
        "id": 153960692,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1526331536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> - Performance ... thats your reason. And the fact that you can flag parts of your model as guaranteed outdated. If your resources are costly to transfer because of size or whatever other reason, then it is a perfectly valid reason for using just HEAD and ETag. And usually, performance ain't fit to model as use cases, IMHO.</p>",
        "id": 153960709,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1526332006
    },
    {
        "content": "<p>Yes - but if you need the current version to update, you're going to then have to query for the current version anyhow, so haven't saved yourself anything.</p>",
        "id": 153960713,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1526332439
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"194153\">@Paul Watt</span> Ain't it more a task for the software to do such checks and verifications?</p>\n</blockquote>\n<p>Yes,  could definitely pass on the responsibility to the client application.</p>",
        "id": 153960752,
        "sender_full_name": "Paul Watt",
        "timestamp": 1526337670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  Right ... but if the operation is costly you might want to postpone that, and updates to that resource. You can simply mark it for later retrieval at the point of when you need to update it and not before that.</p>",
        "id": 153960755,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1526338339
    },
    {
        "content": "<p>better to retrieve the current version with the if-modified-since header.<br>\n<a href=\"http://hl7.org/fhir/http.html#cread\" target=\"_blank\" title=\"http://hl7.org/fhir/http.html#cread\">http://hl7.org/fhir/http.html#cread</a><br>\nThis does what you're looking for, returns you content if its changed, otherwise like the head.</p>",
        "id": 153960962,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1526383860
    },
    {
        "content": "<p>and thats why one can only love these open forums because eventually an awesome response pops up - <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> +1</p>",
        "id": 153961401,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1526421557
    }
]