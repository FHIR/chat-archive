[
    {
        "content": "<p>Hi, </p>\n<p>I'm being charged with implementing FHIR as the claims and clinical data model for my company. As I understand it, FIHR only specifies the REST API, but not the underlying database model. </p>\n<p>I've come across FHIRBase, but it seems to simply take the JSON data object and store it in a \"resource\" field. Have anyone come across a more \"relational\" database model that I could use as a starting point? Does something like PCORnet fit the bill here, or do I need something different?</p>\n<ul>\n<li>William</li>\n</ul>",
        "id": 153964456,
        "sender_full_name": "William Tran",
        "timestamp": 1527105991
    },
    {
        "content": "<p>You might want to take a look at <a href=\"http://standardhealthrecord.org/\" target=\"_blank\" title=\"http://standardhealthrecord.org/\">http://standardhealthrecord.org/</a> as well</p>",
        "id": 153964457,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1527106265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"195957\">@William Tran</span>  I am just starting FHIR implementation too. My recommendation is MongoDB, although that probably isn't helpful for you as it is far from relational. It's just that Mongo handles JSON files very well, even queries are in JSON format. It keeps things consistent and it's what we are using.</p>",
        "id": 153964458,
        "sender_full_name": "Tyler Fricks",
        "timestamp": 1527106327
    },
    {
        "content": "<p>there's a mix of approaches. You might find this useful:</p>",
        "id": 153964459,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527106631
    },
    {
        "content": "<p><a href=\"http://www.healthintersections.com.au/?p=2776\" target=\"_blank\" title=\"http://www.healthintersections.com.au/?p=2776\">http://www.healthintersections.com.au/?p=2776</a></p>",
        "id": 153964460,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527106663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"196265\">@Tyler Fricks</span> nice to hear that; I've thought of MongoDB too but am a little worried about data integrity. Did you take advantage of MongoDB's schema validation or did you delegate that to the API layer?</p>\n<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> and <span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> , thanks a lot for the resources :)</p>",
        "id": 153964461,
        "sender_full_name": "William Tran",
        "timestamp": 1527106873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"195957\">@William Tran</span> We have not done it yet, but we will use the built in validation. I have used Mongo before for other projects and the validation is top notch. </p>\n<p>Of course there is some validation before it gets to Mongo as well...</p>",
        "id": 153964467,
        "sender_full_name": "Tyler Fricks",
        "timestamp": 1527109028
    },
    {
        "content": "<p>This is based on a relational model (geared towards UK and not all resources) : <a href=\"https://github.com/nhsconnect/careconnect-reference-implementation\" target=\"_blank\" title=\"https://github.com/nhsconnect/careconnect-reference-implementation\">https://github.com/nhsconnect/careconnect-reference-implementation</a></p>",
        "id": 153964584,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1527164108
    },
    {
        "content": "<p>it uses HAPI. Instructions available here: <a href=\"https://nhsconnect.github.io/CareConnectAPI/build_ri_overview.html\" target=\"_blank\" title=\"https://nhsconnect.github.io/CareConnectAPI/build_ri_overview.html\">https://nhsconnect.github.io/CareConnectAPI/build_ri_overview.html</a></p>",
        "id": 153964585,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1527164164
    },
    {
        "content": "<p>May also find this useful in your server design, has a list of the issues data storage styles have:<br>\n<a href=\"https://www.slideshare.net/BrianPostlethwaite1/fhir-server-design-review\" target=\"_blank\" title=\"https://www.slideshare.net/BrianPostlethwaite1/fhir-server-design-review\">https://www.slideshare.net/BrianPostlethwaite1/fhir-server-design-review</a></p>",
        "id": 153970896,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1529536024
    },
    {
        "content": "<p>We built a Go-based FHIR server using MongoDB (see: <a href=\"https://github.com/intervention-engine/fhir\" target=\"_blank\" title=\"https://github.com/intervention-engine/fhir\">https://github.com/intervention-engine/fhir</a>).  MongoDB worked great for CRUD and simple searches.  But... we ran into issues implementing things liked chained search, reverse chained search, has, etc.  We had to drop into MongoDB's aggregation pipeline to do these, and that significantly impacted performance once we got into very large numbers of records (and it made paging quite difficult as well).  In the end, if we were to do it again today, we probably would not use MongoDB.</p>",
        "id": 153971284,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1529695057
    },
    {
        "content": "<p>More recently, we have begun to experiment using PG's JSON capabilities (see: <a href=\"https://github.com/synthetichealth/candle\" target=\"_blank\" title=\"https://github.com/synthetichealth/candle\">https://github.com/synthetichealth/candle</a>).  This is just a proof-of-concept and doesn't do nearly as much as our MongoDB-based server, but so far has shown promise.  <span class=\"user-mention\" data-user-id=\"191434\">@Andy Gregorowicz</span> gave a short talk on this at the recent Dev Days.  We can probably point you to the slides once they are posted.</p>",
        "id": 153971285,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1529695248
    },
    {
        "content": "<p>I should also note that MongoDB prevented us from properly supporting atom transactions as well -- although I hear that Mongo 4.0 will support multi-document transactions.</p>",
        "id": 153971286,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1529695418
    },
    {
        "content": "<p>Anybody has any documentation about FHIR database model?. thank you</p>",
        "id": 154019769,
        "sender_full_name": "Juan Antonio De los Cobos",
        "timestamp": 1542716748
    },
    {
        "content": "<p>Hi Juan, there is no single FHIR database model - many vendors will have an existing model that they map to FHIR, and most of the new FHIR-only servers use a database in which the FHIR data is stored as a binary blob, with the searcheable fields split off in separate columns (or a joined search table).</p>\n<p>That said, there could be a \"best practice\" for mapping resources to RDBMS tables - I think I heard someone talking about creating such a document - but I don't recall who.</p>",
        "id": 154019790,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1542721918
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"197472\">@Juan Antonio De los Cobos</span>, FYI there is an active discussion going on about mapping FHIR to SQL within the analytics on FHIR stream, e.g.:<br>\n<a href=\"#narrow/stream/73-analytics-on.20FHIR/subject/Connectathon.20track\" title=\"#narrow/stream/73-analytics-on.20FHIR/subject/Connectathon.20track\">https://chat.fhir.org/#narrow/stream/73-analytics-on.20FHIR/subject/Connectathon.20track</a><br>\nAlso see <span class=\"user-mention\" data-user-id=\"193657\">@Ryan Brush</span>'s Github repo:<br>\n<a href=\"https://github.com/rbrush/sql-on-fhir\" target=\"_blank\" title=\"https://github.com/rbrush/sql-on-fhir\">https://github.com/rbrush/sql-on-fhir</a></p>",
        "id": 154019792,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1542722270
    },
    {
        "content": "<p>Now I remember <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 154019800,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1542725011
    },
    {
        "content": "<p>oh, thank you <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span></p>",
        "id": 154019814,
        "sender_full_name": "Juan Antonio De los Cobos",
        "timestamp": 1542727291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> you remember?, could you tell me?, thanks</p>",
        "id": 154019815,
        "sender_full_name": "Juan Antonio De los Cobos",
        "timestamp": 1542727459
    },
    {
        "content": "<p>Well, I forgot the sql-on-fhir stuff from Ryan. Michel was right.</p>",
        "id": 154019829,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1542732081
    },
    {
        "content": "<p>Thank you Michel, <span class=\"user-mention\" data-user-id=\"193657\">@Ryan Brush</span> could you help me. I understood that i can create queries using sql, but the question is. How can i connect to my resources local server to execute these sentences to obtain the results??</p>",
        "id": 157614658,
        "sender_full_name": "Juan Antonio De los Cobos",
        "timestamp": 1549380711
    },
    {
        "content": "<p>sql-on-fhir moved to fhir organization</p>\n<p>Here is some related posts - <a href=\"https://medium.com/fhirbase-dojo\" target=\"_blank\" title=\"https://medium.com/fhirbase-dojo\">https://medium.com/fhirbase-dojo</a></p>",
        "id": 157671183,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1549438153
    },
    {
        "content": "<p>sql on fhir  based on nested structure like json/or struct/ composite type. Our attempt to implement flat relational model failed because of about 2K tables was generated, joins are slow and many other reasons. If you want to save just a couple of resources - maybe you can go this way.</p>",
        "id": 157671322,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1549438377
    },
    {
        "content": "<p>You are welcome to our dedicated stream - <a href=\"#narrow/stream/179219-analytics-on.20FHIR\" title=\"#narrow/stream/179219-analytics-on.20FHIR\">https://chat.fhir.org/#narrow/stream/179219-analytics-on.20FHIR</a> - to discuss your concerns.</p>",
        "id": 157671339,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1549438415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193657\">@Ryan Brush</span> is mostly interested in analytic on FHIR, when fhirbase is designed to be a database for your FHIR server :)</p>",
        "id": 157671490,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1549438645
    },
    {
        "content": "<p>Re models. This isn't a 100% match to the FHIR (STU3) model, but close. <a href=\"https://www.openhealthhub.org/t/exploring-fhir-model-database/1987\" target=\"_blank\" title=\"https://www.openhealthhub.org/t/exploring-fhir-model-database/1987\">https://www.openhealthhub.org/t/exploring-fhir-model-database/1987</a><br>\nIt is a relational database model using HAPI RESTful server.</p>",
        "id": 157673575,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1549441571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191687\">@Kevin Mayfield</span> as I see from diagrams, this schema makes a lot of assumptions and narrow FHIR resources, i.e. it's lossy. For example Observation.code.coding is a collection, but in Observation table, you have only one column for that. No extensions support</p>",
        "id": 157678852,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1549447808
    },
    {
        "content": "<p>Yes, that was done on purpose. It is designed mimic a traditional PAS/EPR SQL model, so it tends to match constraints they would have. <br>\nWe have another system which stores the full resources but it's NoSQL/Mongo and it's not easy to show relationships between resources.</p>",
        "id": 157807211,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1549569049
    }
]