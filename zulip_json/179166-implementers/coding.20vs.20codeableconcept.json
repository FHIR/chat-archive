[
    {
        "content": "<p>Why is Encounter.class a Coding but Encounter.type a CodeableConcept?</p>",
        "id": 173140651,
        "sender_full_name": "Ken Stevens",
        "timestamp": 1565722462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span></p>",
        "id": 173244398,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565818275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span></p>",
        "id": 173257965,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1565832975
    },
    {
        "content": "<p>Encounter.type is a much more open concept.  <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14307\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14307\">GF#14307</a> has some info, but many systems will have locally defined value sets for Encounter.type, so CodeableConcept is needed to support that.  Encounter.class <em>seems</em> to be more cut and dry, since nearly(?) everyone marks encounters as Inpatient, Outpatient, or a few other classes in the valueset, and a Coding makes it a more dependable key for everyone.</p>",
        "id": 173304422,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1565886977
    },
    {
        "content": "<p>then why is it not a code?</p>",
        "id": 173315348,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565895817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212397\">@Ken Stevens</span> Feel free to submit a change request</p>",
        "id": 173675615,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566320601
    }
]