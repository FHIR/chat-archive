[
    {
        "content": "<p>I wrote a post about transactions, as it was a topic of some confusion on the Skype channels a few days ago.... <a href=\"http://lightmyfhir.org/2016/02/26/fhir-transactions/\" target=\"_blank\" title=\"http://lightmyfhir.org/2016/02/26/fhir-transactions/\">http://lightmyfhir.org/2016/02/26/fhir-transactions/</a></p>",
        "id": 153813306,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456498747
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191381\">@Jason Walonoski</span>!</p>\n<p>Where did you get the idea that:<br>\n<code>\"subject\":{\"reference\":\"Patient/9e33a01d-c35f-4920-9179-50d5b8a6f992\"},</code><br>\nis the way to refer to a patient from an Observation in a bundle?</p>",
        "id": 153813307,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1456503202
    },
    {
        "content": "<p>On my reading, it should just be:<br>\n<code>\"subject\":{\"reference\":\"urn:uuid:9e33a01d-c35f-4920-9179-50d5b8a6f992\"},</code></p>\n<p>(But unless there's an example one way or the other, I'm sure it's just ambiguous.)</p>\n<p>On this same topic, Dan Gottlieb and I worked out <a href=\"https://docs.google.com/document/d/1ubxRmU0rqy5Fb73S9xWSuFUK7ZoyIr_bdh5mJX-U6yk/edit\" target=\"_blank\" title=\"https://docs.google.com/document/d/1ubxRmU0rqy5Fb73S9xWSuFUK7ZoyIr_bdh5mJX-U6yk/edit\">these scenarios</a> -- but this involved guesswork too.</p>",
        "id": 153813308,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1456503317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> to be honest, I wasn't sure if the urn:uuid should go in the reference or not.</p>",
        "id": 153813314,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456509675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  wrote:</p>\n<blockquote>\n<p>Jason - thanks for the blog post. I don't really like the idea of creating yet another transaction type - specially one that overlaps so much with transaction. But I do think you captured the use case - get a graph of records, push them elsewhere.<br>\nso let's say, you get a $everything, and you want to post it to the server, and you can't dictate the ids to the server. So we want the client to do as little as possible and still have the semantics clear, right? And you're concerned that they're not (and Josh really is too).<br>\nso really, let's say that the client has to minimally change the batch type to transaction, and populate the request - that has to be done. What we clearly don't want to do is have the client have to touch any of the ids - we want the server to have to do all that<br>\nso it seems that the sweetest solution to this is to allow all the ids to be populated in the resources, and avoid the in/out UUID confusion you ran into, and just say, make the request a POST to /base, and the server can infer, from the type and id, that you want it to sort out the ids however it does. And so post to [base] inside a transaction has a special meaning. And then we say, if a client explicitly makes it a PUT to a full id, then either the server honours it or not.<br>\nI think those are light changes to the spec, and the implementations, but remove the potential for confusion...?</p>\n</blockquote>",
        "id": 153813509,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456753015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> So, when you say</p>\n<blockquote>\n<p>make the request a POST to /base</p>\n</blockquote>\n<p>Are you talking about the transaction POST to /base, or the <code>Bundle.entry.request.method=\"POST\"</code> and <code>Bundle.entry.request.url=\"[base]\"</code>?</p>",
        "id": 153813510,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456753128
    },
    {
        "content": "<p>second</p>",
        "id": 153813511,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456753176
    },
    {
        "content": "<p>And if they POST to base, then the client is assuming that the server will do things like patient matching and possible record de-duplication?</p>",
        "id": 153813512,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456753272
    },
    {
        "content": "<p>hmm. I'm not sure how far that assumptions should go?</p>",
        "id": 153813514,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456753319
    },
    {
        "content": "<p>Me either. That is why I was suggesting a new <code>transfer</code> code or new <code>$transfer</code> operation.</p>",
        "id": 153813515,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456753379
    },
    {
        "content": "<p>I think that's orthogonal. You'd still have to state the assumptions either way </p>",
        "id": 153813517,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456753425
    },
    {
        "content": "<p>I agree, but a new code or operation makes it very explicit (and hopefully obvious) to both parties. I'm not tied to that proposal though.</p>",
        "id": 153813518,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456753512
    },
    {
        "content": "<p>well, you might argue that it's less obvious, but I don't think we want to create a whole new operation for it. But it's hard to progress if we can't resolve the assumptions</p>",
        "id": 153813520,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456753566
    },
    {
        "content": "<p>OK. So... here it goes:</p>\n<ul>\n<li>If the client specifies <code>Bundle.entry.request.method=\"POST\"</code> and <code>Bundle.entry.request.url=\"[base]\"</code> during a transaction, the server assumes this record is a transfer from another system. There may already exist duplicate records on the server. The server determines the outcome of each operation. The server must maintain the graph of resources in the entire transaction, but not the specific IDs given.</li>\n<li>If the client specifies other <code>Bundle.entry.request.method &amp;&amp; Bundle.entry.request.url</code> combinations (with or without conditional modifiers), then the client is specifying that it knows exactly what it wants to do with the resource. The server replies normally for each operation.</li>\n</ul>",
        "id": 153813523,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456753856
    },
    {
        "content": "<p>So it's server discretion to decide one what basis something is a duplicate? </p>",
        "id": 153813526,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456754129
    },
    {
        "content": "<p>Well, I don't know, this is my suggestion. I think it makes sense that way though, because the client doesn't know what the server has (and may not have permission to search all the resources to do that either)... it just wants to transfer a patient record.</p>",
        "id": 153813527,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456754213
    },
    {
        "content": "<p>I think it makes sense. But then I'm thinking about transferring a document rather than data. In that case, you don't want the server to have such freedom. But then I think you'd be posting to /binary, not asking the server to treat it as a transaction. The relevant spec is </p>",
        "id": 153813528,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456754371
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhir/documents.html#bundle\" target=\"_blank\" title=\"http://hl7.org/fhir/documents.html#bundle\">http://hl7.org/fhir/documents.html#bundle</a></p>",
        "id": 153813529,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456754400
    },
    {
        "content": "<p>and yes: \"Ignore the fact that the bundle is a document and process all of the resources that it contains as individual resources. Clients SHOULD not expect that a server that receives a document submitted using this method will be able to reassemble the document exactly\"</p>",
        "id": 153813530,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456754415
    },
    {
        "content": "<p>ok. so I think I agree</p>",
        "id": 153813531,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456754423
    },
    {
        "content": "<p>So, that requires the client to create a Composition as the first entry... also the <code>Bundle.type=\"document\"</code> rather than transaction.</p>",
        "id": 153813534,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456754578
    },
    {
        "content": "<p>well, that assumes that they already had a document (as opposed to say, an $everything)</p>",
        "id": 153813535,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456754872
    },
    {
        "content": "<p>OK, so I think we agree on the assumptions (as stated in the bullets). And you want to avoid a new operation. I understand... So, what about a new <code>Bundle.type=\"transfer\"</code> code? Or do you want to continue to use <code>transaction</code> or <code>searchset</code> (the result of the $everything) with the given rules on posting to base?</p>",
        "id": 153813541,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456755389
    },
    {
        "content": "<p>I think l agree with this proposed behavior, but I don't understand how it's different from the current spec; can someone explain what would actually be changing?</p>",
        "id": 153813545,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1456758552
    },
    {
        "content": "<p>Josh, great question... I was trying to hash that out with Grahame above... I don't think we're there yet.</p>",
        "id": 153813579,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456762208
    },
    {
        "content": "<p>OK, fair enough. Basically saying \"client-supplied are preserved for <code>PUT</code>, but the server can assign at will on <code>POST</code>\" seems sane to me.</p>",
        "id": 153813581,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1456762270
    },
    {
        "content": "<p>Along with examples for linking resources... and probably some other stuff.</p>",
        "id": 153813582,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456762364
    },
    {
        "content": "<p>Definitely lots of examples are needed! I'm just trying to make sure we agree about what they should _say_.</p>",
        "id": 153813584,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1456762439
    },
    {
        "content": "<p>Well, we've been talking about having <code>POST</code> to <code>[resourceType]</code> assumes the client wants to make a create, and <code>POST</code> to <code>[base]</code> means this is a transfer -- so it might not be a create (it could be an update) -- and the client doesn't need to generate complicated <code>IfNoneMatch</code> type of conditionals. Leaves it to the server to de-duplicate. Allows the client to say \"I want to transfer this patient record, but I don't have the authority to tell you how to do patient matching or access your other records\"</p>",
        "id": 153813585,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456762946
    },
    {
        "content": "<blockquote>\n<p>\"I want to transfer this patient record, but I don't have the authority to tell you how to do patient matching or access your other records\"</p>\n</blockquote>\n<p>My gut feeling says this will turn out to be another kind of bundle in the end, instead of doing this implicitly by changing where we POST to.  The fact that using this kind of POST to base only makes sense in the context of a Bundle (i.e. posting a single resource to the REST endpoint is not meaningful and not even possible currently), suggests this is a kind of bundle, rather than a kind of REST operation.</p>",
        "id": 153813589,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1456766211
    },
    {
        "content": "<p>well, if we changed to a different kind of bundle, what would we do with request? </p>",
        "id": 153813590,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456766325
    },
    {
        "content": "<p>an alternative is that we deem that this language applies:</p>",
        "id": 153813591,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456766344
    },
    {
        "content": "<p>file:///C:/work/org.hl7.fhir/build/publish/http.html#other-bundles</p>",
        "id": 153813592,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456766385
    },
    {
        "content": "<p>One issue with current wording of the #other-bundles link, is that the matching is done on \"identity\" -- does that mean <code>id</code> or <code>Resource.identifier</code> or the concept of identity?</p>",
        "id": 153813598,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1456769176
    },
    {
        "content": "<p>whoops I used my local link sorry. </p>",
        "id": 153813608,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1456772867
    },
    {
        "content": "<p>If I'm following this correctly, this seems to be closely related to identity resolution as would be important in messaging (esp. <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> 's use case).  We're using small contained resources here (basically only an identifier element), but am very interested in this discussion (getting folks to think about the messaging implications).</p>",
        "id": 153813825,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1456844012
    },
    {
        "content": "<p>Technically this is a Batch question, but it make sense to me to include it in the transactions topic...</p>\n<p>The specification says this about <a href=\"http://hl7.org/fhir/DSTU2/http.html#2.1.0.16.1\" target=\"_blank\" title=\"http://hl7.org/fhir/DSTU2/http.html#2.1.0.16.1\">Batch processing rules</a>:</p>\n<blockquote>\n<p>For a batch, there SHALL be no interdependencies between the different entries in the Bundle. The success or failure of one entry SHALL not alter the success or failure or resulting content of another. Servers SHALL validate that this is the case. Note that it is considered that servers execute the batch in the same order as that specified below for transactions, though the order of execution should not matter given the previous rule.</p>\n</blockquote>\n<p>What is an \"interdependency\" between entries? An Observation.subject reference to a Patient in the Bundle? I'm trying to create an example to test that servers do \"validate that this is the case.\"</p>",
        "id": 153814199,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1457369690
    },
    {
        "content": "<p>A situation where you're creating a patient and then referencing it with an observation that's defined in the same batch - if the creation of the patient fails or doesn't happen before the observation, then the batch will fail - and that would be a violation of the rule.</p>",
        "id": 153814203,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1457370929
    },
    {
        "content": "<p>But if the Patient creation succeeds, the wording suggests it is still a violation of the rule, because it is an interdependency. So, the whole batch should fail, or just the two entries?</p>",
        "id": 153814211,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1457376639
    },
    {
        "content": "<p>discretion of the server at the moment</p>",
        "id": 153814223,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457378216
    },
    {
        "content": "<p>I would say, creating a patient, searching by the newly creatd patient is also a dependency</p>",
        "id": 153814224,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457378241
    },
    {
        "content": "<p>there's some looseness to the definition for a reason</p>",
        "id": 153814225,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457378248
    },
    {
        "content": "<p>That makes it hard to test.</p>",
        "id": 153814272,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1457386375
    },
    {
        "content": "<p>yes. indeed. we could certainly define something almost useless so it would be easy to test. The question is where the right balance is </p>",
        "id": 153814273,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457386414
    },
    {
        "content": "<p>Well, shouldn't it be a \"SHOULD\" then, rather than a \"SHALL\"?</p>",
        "id": 153814274,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1457386492
    },
    {
        "content": "<p>maybe. </p>",
        "id": 153814275,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457386520
    },
    {
        "content": "<p>OK. I'll submit a change request, and people can vote on it.</p>\n<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9681\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9681\">http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9681</a></p>",
        "id": 153814276,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1457386560
    },
    {
        "content": "<p>I think the intention is that each entry is actioned in order and the sucess or failure of each is independant, although it is recognised that each is dependant on the overall state of the world at the point of action. So yes if the patient create fails the observation fails but due to the lack of the patient 'in the world' not because of the failure in the batch. For example the failure of a create for any other patient in the batch would not fail the rest of the entries in the batch. The outcome of the each of the entries in the batch is the same as had the entries been applied separately, not in a batch, in the same order as they appear in the batch.</p>",
        "id": 153814328,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1457414955
    },
    {
        "content": "<p>But Paul, there is nothing that says the Observation create has to fail. It makes sense that it fails, and some servers might enforce that Observation.subject references a valid and resolvable Patient, but the spec doesn't mandate that. This is why I submitted a change to SHOULD, because the SHALLs as written are untestable.</p>",
        "id": 153814378,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1457441334
    },
    {
        "content": "<p>Whether the Observation create fails or not, it's a dependency, which means it's a non-conformant batch.  It's a static test, not a runtime test.</p>",
        "id": 153814453,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1457451448
    },
    {
        "content": "<p>So, are you saying that any static references across Bundle.entry.resource in a batch are non-conformant?</p>",
        "id": 153814455,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1457451882
    },
    {
        "content": "<p>Static references to things being created would be non-conformant</p>",
        "id": 153814457,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1457452128
    },
    {
        "content": "<p>I think I need help (like a good + bad example) to understand this point.</p>",
        "id": 153814458,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1457457624
    },
    {
        "content": "<p>you can't make a static reference to a thing being created in a batch. THe id pattern we use in a transaction - that would be impossible in a batch. </p>",
        "id": 153814477,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457463694
    },
    {
        "content": "<p>so that would be clearly a fail</p>",
        "id": 153814478,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457463700
    },
    {
        "content": "<p>you can also do sneaky references between resources using server functionality - conditional create followed by conditional update of the same thing. We won't a 'don't do that' on there</p>",
        "id": 153814480,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457463764
    },
    {
        "content": "<p>Are there any public servers available that support transactions?</p>",
        "id": 153850695,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1474843107
    },
    {
        "content": "<p>mine does</p>",
        "id": 153850696,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1474843466
    },
    {
        "content": "<p>I think the HAPI one does too</p>",
        "id": 153850697,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1474843472
    },
    {
        "content": "<p>Hmm... yours didn't return me a bundle-transaction</p>",
        "id": 153850698,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1474847489
    },
    {
        "content": "<p>So I don't know the IDs of the resources that were created</p>",
        "id": 153850699,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1474847501
    },
    {
        "content": "<p>HAPI said \"Unable to store a Bundle resource on this server with a Bundle.type value of: transaction\" :\\</p>",
        "id": 153850700,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1474847526
    },
    {
        "content": "<p>what did it return?</p>",
        "id": 153850704,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1474849588
    },
    {
        "content": "<p>Returned me the Bundle as-is, so just like any other resource.</p>",
        "id": 153850706,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1474849833
    },
    {
        "content": "<p>So that made is difficult or impossible to figure out what happened with all my operations</p>",
        "id": 153850707,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1474849874
    },
    {
        "content": "<p>sounds like you're doing something wrong. what are you posting where/</p>",
        "id": 153850708,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1474849969
    },
    {
        "content": "<p>Yeah probably. I'm posting the transaction example (<a href=\"http://hl7.org/fhir/2016Sep/bundle-transaction.json.html\" target=\"_blank\" title=\"http://hl7.org/fhir/2016Sep/bundle-transaction.json.html\">http://hl7.org/fhir/2016Sep/bundle-transaction.json.html</a>) to <a href=\"http://fhir3.healthintersections.com.au/open/Bundle\" target=\"_blank\" title=\"http://fhir3.healthintersections.com.au/open/Bundle\">http://fhir3.healthintersections.com.au/open/Bundle</a></p>",
        "id": 153850709,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1474850017
    },
    {
        "content": "<p>Take out the Parameters entry, that part errors</p>",
        "id": 153850710,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1474850035
    },
    {
        "content": "<p>if you post a bundle to /Bundle, it will be stored as is, irrespective of it's bundle type</p>",
        "id": 153850711,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1474850073
    },
    {
        "content": "<p>Yep I see. Thanks</p>",
        "id": 153850712,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1474850198
    },
    {
        "content": "<p>Mine should work too</p>",
        "id": 153850876,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1474978513
    },
    {
        "content": "<p>FYI- HAPI only lets you post a bundle with type \"document\" or \"collection\" to the <code>[base]/Bundle</code> endpoint. Transactions have to be posted to <code>[base]/</code></p>",
        "id": 153851467,
        "sender_full_name": "James Agnew",
        "timestamp": 1475271796
    },
    {
        "content": "<p>fhirbase &amp; aidbox does</p>",
        "id": 153852680,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1476265340
    },
    {
        "content": "<p>Hi, having trouble understanding a couple of the rules for resource IDs in transaction bundles:</p>\n<p>from <a href=\"https://www.hl7.org/FHIR/bundle.html#references\" target=\"_blank\" title=\"https://www.hl7.org/FHIR/bundle.html#references\">https://www.hl7.org/FHIR/bundle.html#references</a>:<br>\n\"If the fullUrl starts with urn:uuid: or urn:oid:, then append the id to the base URL and try to resolve within the bundle as for a RESTful URL reference\"</p>\n<p>What specifically do \"id\" and \"base URL\" refer to here?  Is there an example of this kind of resolution?</p>\n<p>from <a href=\"http://hl7.org/fhir/http.html#transaction\" target=\"_blank\" title=\"http://hl7.org/fhir/http.html#transaction\">http://hl7.org/fhir/http.html#transaction</a>:<br>\n\"For updates, the server performs a mapping between the fullUrl specified and the local URL the server knows that instance as, if possible. If the server does not have a mapping for the fullUrl, the server ignores the base URL and attempts an update assuming the base is the same as the server base\"</p>\n<p>Does this mean that the ID in request.url for a PUT request is irrelevant and only the fullUrl matters?  Or should the server enforce that they (and the ID in the resource) match?  And does the same rule apply to DELETE?</p>",
        "id": 153881082,
        "sender_full_name": "Ben Spencer",
        "timestamp": 1491474926
    },
    {
        "content": "<p>The server should check alignment between the entry.fullUrl and the <a href=\"http://entry.resource.id\" target=\"_blank\" title=\"http://entry.resource.id\">entry.resource.id</a>.  Failure to align probably means bad things, but as usual, servers aren't obligated to validate inbound instances.  fullUrl should not be present for transactions and batches (which would be the situation where you'd have a request.url)</p>",
        "id": 153881109,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1491490362
    },
    {
        "content": "<p>Actually, I misread on the last sentence.  I'm actually not sure what the purpose is of having both a fullUrl and a requestUrl, so I'll let someone else respond.</p>",
        "id": 153881110,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1491490449
    },
    {
        "content": "<p>Given a Bundle Batch / Transaction, how does the client who receives the transaction response from the server identify which resource is which. If I was to send in two resources, both Patient resources as POSTs.  One for Patient Bob and one for Patient Jane, were each resource has no Resource ID as the server will assign them, yet each does have a UUID in the FullURL of each entry.<br>\nThe Transaction response may return that both were committed ‘Created 201’ in the entry.response.status and now I want to obtain from the response the server assigned Resource Ids for each. How do I know which is Bob and which is Jane without inspecting the patient names of course. <br>\nI had thought that the entry.FullURL would be returned unchanged and that was my key for reading the Transaction response, yet the examples in the spec do not indicate this, the examples have updated the entry.FullURL to the new location in the server, which feels wrong because the response entry.response.location already conveys this information. Are the examples wrong? Should the entry.FullURL remain unchanged between submission and response of the transaction bundle?<br>\nThe only other way I see this working is if the transaction response entries are guaranteed to be returned in the same order they were sent. Yet that feel a little bit like crossing my fingers and hoping?</p>",
        "id": 153881529,
        "sender_full_name": "Angus Millar",
        "timestamp": 1491789622
    },
    {
        "content": "<p>That feels like something that deserves a tracker be created Angus.</p>",
        "id": 153881534,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1491795323
    },
    {
        "content": "<p>Ok I added it to the tracker.</p>",
        "id": 153881537,
        "sender_full_name": "Angus Millar",
        "timestamp": 1491797678
    },
    {
        "content": "<p>they are guaranteed to be returned in the same order<br>\nthat doesn't seem like an ideal way to match them up though</p>",
        "id": 153881563,
        "sender_full_name": "Ben Spencer",
        "timestamp": 1491814982
    },
    {
        "content": "<p>Yes I think this the intent of the spec. I did more work on this in the past 24hrs and have realized that you cannot use the FullUrl as I was thinking, as a key to each resource in the bundle. If you have GET requests in the transaction bundle then there is not FullUrl and if that GET is a search then the return Transaction response also has no FullUrl as it is a search result bundle in the Transation bundle which also has not FullUrl.  I’m also not sure you can return a FullUrl for a DELETE request.<br>\nI have now accepted that it is true that the server, or at least mine, will always return a transaction response bundle that contains entries which are one-to-one with the transaction bundle received. Or else, if an issue occurs whereby the whole transaction cannot be committed then a single OperationOutcome resource is returned stating the issue encountered and referencing the entry by index that the issue was found in (should that be a zero based index or one based. Who knows, Zero based for me).<br>\nPerhaps the Transactions page in the spec could have talked to this point. I did find this comment inside the bundle-response XML example in the spec: “one entry for each entry in the transaction, in order, with a response”.  Which is what cemented it for me, yet as a comment in an example, seems an odd place to state such a point.</p>",
        "id": 153881672,
        "sender_full_name": "Angus Millar",
        "timestamp": 1491867864
    },
    {
        "content": "<p>That (well, similar) text is in the spec too: <a href=\"http://hl7.org/fhir/http.html#transaction-response\" target=\"_blank\" title=\"http://hl7.org/fhir/http.html#transaction-response\">http://hl7.org/fhir/http.html#transaction-response</a></p>",
        "id": 153881701,
        "sender_full_name": "Ben Spencer",
        "timestamp": 1491902613
    },
    {
        "content": "<p>Yes correct, it is in the spec. I missed it. Thanks for pointing it out. </p>",
        "id": 153882028,
        "sender_full_name": "Angus Millar",
        "timestamp": 1491979088
    },
    {
        "content": "<p>I'm not sure what I'm getting wrong?</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    &quot;resourceType&quot;: &quot;Bundle&quot;,\n    &quot;type&quot;: &quot;transaction&quot;,\n    &quot;entry&quot;: [\n        {\n            &quot;resource&quot;: {\n                &quot;id&quot;: &quot;20441865&quot;,\n                &quot;resourceType&quot;: &quot;Patient&quot;,\n                &quot;name&quot;: [\n                    {\n                        &quot;use&quot;: &quot;official&quot;,\n                        &quot;given&quot;: [\n                            &quot;80&quot;\n                        ],\n                        &quot;family&quot;: &quot;80&quot;\n                    }\n                ]\n            },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;POST&quot;\n            }\n        },\n        {\n            &quot;resource&quot;: {\n                &quot;resourceType&quot;: &quot;CareTeam&quot;,\n                &quot;subject&quot;: {\n                    &quot;reference&quot;: &quot;Patient?_id=20441865&quot;,\n                    &quot;type&quot;: &quot;Patient&quot;\n                },\n                &quot;status&quot;: &quot;active&quot;\n            },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;POST&quot;\n            }\n        }\n    ]\n}\n</code></pre></div>\n<blockquote>\n<p>Except for transactions and batches, each entry in a Bundle must have a fullUrl which is the identity of the resource in the entry. Note that this is not a versioned reference to the resource, but its identity. Where a resource is not assigned a persistent identity that can be used in the Bundle, a UUID should be used (urn:uuid:...).<br>\nFor transactions and batches, entries MAY not have fullURLs when the entry.request.method = POST, and the resource has no identity. Note that even in this case, there may still be a fullURL in a transaction on a POST so that relationships between resources can be represented (see Transactions).</p>\n</blockquote>\n<p>From the docs I understand this as, \"It's enough to make sure the fake IDs you provide match, and they'll be appropriately referenced\". But I get this error, what am I missing?</p>\n<div class=\"codehilite\"><pre><span></span><code>Invalid match URL \\&quot;Patient?_id=20441865\\&quot; - No resources match this search&quot;\n</code></pre></div>",
        "id": 218417229,
        "sender_full_name": "Dexter",
        "timestamp": 1606827113
    },
    {
        "content": "<p>Hmm I see I think I must use the mentioned ID types, such as UUID, UID etc</p>",
        "id": 218418276,
        "sender_full_name": "Dexter",
        "timestamp": 1606827699
    },
    {
        "content": "<p>Hmm still doesn't seem to work when using UUID</p>",
        "id": 218421628,
        "sender_full_name": "Dexter",
        "timestamp": 1606829555
    },
    {
        "content": "<p>This doesn't work,</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    &quot;resourceType&quot;: &quot;Bundle&quot;,\n    &quot;type&quot;: &quot;transaction&quot;,\n    &quot;entry&quot;: [\n        {\n            &quot;resource&quot;: {\n                &quot;fullUrl&quot;: &quot;urn:uuid:6a2f70be-be02-4dd4-94a3-44f326b9f93f&quot;,\n                &quot;resourceType&quot;: &quot;Patient&quot;,\n                &quot;name&quot;: [\n                    {\n                        &quot;use&quot;: &quot;official&quot;,\n                        &quot;given&quot;: [\n                            &quot;80&quot;\n                        ],\n                        &quot;family&quot;: &quot;80&quot;\n                    }\n                ]\n            },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;POST&quot;\n            }\n        },\n        {\n            &quot;resource&quot;: {\n                &quot;resourceType&quot;: &quot;CareTeam&quot;,\n                &quot;subject&quot;: {\n                    &quot;reference&quot;: &quot;Patient?_id=6a2f70be-be02-4dd4-94a3-44f326b9f93f&quot;,\n                    &quot;type&quot;: &quot;Patient&quot;\n                },\n                &quot;status&quot;: &quot;active&quot;\n            },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;POST&quot;\n            }\n        }\n    ]\n}\n</code></pre></div>\n<p>but this does! What is the difference? As far as I can tell, the UUID seem okay to my untrained eye</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    &quot;resourceType&quot;: &quot;Bundle&quot;,\n    &quot;type&quot;: &quot;transaction&quot;,\n    &quot;entry&quot;: [\n        {\n            &quot;resource&quot;: {\n                &quot;fullUrl&quot;: &quot;urn:uuid:61ebe359-bfdc-4613-8bf2-c5e300945f0a&quot;,\n                &quot;resourceType&quot;: &quot;Patient&quot;,\n                &quot;name&quot;: [\n                    {\n                        &quot;use&quot;: &quot;official&quot;,\n                        &quot;given&quot;: [\n                            &quot;80&quot;\n                        ],\n                        &quot;family&quot;: &quot;80&quot;\n                    }\n                ]\n            },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;POST&quot;\n            }\n        },\n        {\n            &quot;resource&quot;: {\n                &quot;resourceType&quot;: &quot;CareTeam&quot;,\n                &quot;subject&quot;: {\n                    &quot;reference&quot;: &quot;Patient?_id=61ebe359-bfdc-4613-8bf2-c5e300945f0a&quot;,\n                    &quot;type&quot;: &quot;Patient&quot;\n                },\n                &quot;status&quot;: &quot;active&quot;\n            },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;POST&quot;\n            }\n        }\n    ]\n}\n</code></pre></div>\n<p>Only difference is the ID!</p>\n<p><code>6a2f70be-be02-4dd4-94a3-44f326b9f93f</code> -&gt; Doesn't work<br>\n<code>61ebe359-bfdc-4613-8bf2-c5e300945f0a</code> -&gt; Works</p>",
        "id": 218422991,
        "sender_full_name": "Dexter",
        "timestamp": 1606830289
    },
    {
        "content": "<p>Since your transaction is attempting the PATCH an existing resource, you must know and provide the actual resolvable fullUrl of that resource as it exists on the server where the PATCH is supposed to occur. You can't use a UUID in this case.</p>",
        "id": 218423148,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1606830363
    },
    {
        "content": "<p>Patch? I don't have any PATCH in the last 2 questions I sent</p>",
        "id": 218423263,
        "sender_full_name": "Dexter",
        "timestamp": 1606830410
    },
    {
        "content": "<p>I got confused with the topic of the discussion. Do you mind editing the title on your first post?</p>",
        "id": 218423482,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1606830521
    },
    {
        "content": "<p>Ahh my apologies, I replied to a post that solved my previous question, and posted the next in the same place. Hope that's okay!</p>",
        "id": 218423604,
        "sender_full_name": "Dexter",
        "timestamp": 1606830586
    },
    {
        "content": "<p>Back to your first example - have you tried using</p>\n<div class=\"codehilite\" data-code-language=\"jason\"><pre><span></span><code>    \"subject\": {\n        \"reference\": \"Patient/20441865\",\n        \"type\": \"Patient\"\n    }\n</code></pre></div>\n<p>the reference in subject is supposed to be in a  <code>/[type]/[id]</code> format. I am pretty sure <code>Patient?_id=20441865</code> is incorrect. And I have no clue why the example with UUID works at all...</p>",
        "id": 218424529,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1606831037
    },
    {
        "content": "<p><code>fullUrl</code> is not a resource property, it should be one level up</p>",
        "id": 218428920,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1606833112
    },
    {
        "content": "<p>The server you are using might be accepting it for whatever reason, but it is definitely wrong</p>",
        "id": 218429025,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1606833157
    },
    {
        "content": "<p>Yes! Misplaced the <code>fullUrl</code> field. Fixed it now, still doesn't work. <br>\nI replicated the UUID example from the examples <a href=\"https://www.hl7.org/fhir/bundle-transaction.json.html\">here</a>.</p>",
        "id": 218435318,
        "sender_full_name": "Dexter",
        "timestamp": 1606835995
    },
    {
        "content": "<p>Now it does! Had to change the reference to <code>Patient/urn:uuid:6a2f70be-be02-4dd4-94a3-44f326b9f93f</code>!</p>",
        "id": 218435531,
        "sender_full_name": "Dexter",
        "timestamp": 1606836073
    },
    {
        "content": "<p>The reference shouldn't have \"Patient/\", it should just be the urn.</p>",
        "id": 218436790,
        "sender_full_name": "Paul Church",
        "timestamp": 1606836634
    },
    {
        "content": "<p>There's an example here: <a href=\"https://cloud.google.com/healthcare/docs/how-tos/fhir-bundles#resolving_references_to_resources_created_in_a_bundle\">https://cloud.google.com/healthcare/docs/how-tos/fhir-bundles#resolving_references_to_resources_created_in_a_bundle</a></p>\n<p>This is the google documentation but hopefully our interpretation is the same as others!</p>",
        "id": 218436872,
        "sender_full_name": "Paul Church",
        "timestamp": 1606836674
    },
    {
        "content": "<p>Using \"reference = Patient?_id=xxx\" is a conditional reference which is a different thing than bundle fullUrl resolution. It searches for resources that already exist on the server. There was a thread a while ago about whether this search also finds things inside the bundle, I think implementations vary.</p>",
        "id": 218437149,
        "sender_full_name": "Paul Church",
        "timestamp": 1606836788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197072\">Paul Church</span> <a href=\"#narrow/stream/179166-implementers/topic/Transactions/near/218436790\">said</a>:</p>\n<blockquote>\n<p>The reference shouldn't have \"Patient/\", it should just be the urn.</p>\n</blockquote>\n<p>I see, I couldn't find an example on the FHIR documentation, so I assumed I could use <code>Patient/urn:uuid:ID</code>. But now I know, thanks!</p>",
        "id": 218437555,
        "sender_full_name": "Dexter",
        "timestamp": 1606836946
    },
    {
        "content": "<p>Question regarding update in bundle transaction and fullUrl mappings. <br>\n\"For updates, the server performs a mapping between the fullUrl specified and the local URL the server knows that instance as, if possible.\"<br>\nHow mapping should be stored on fhir server? as seperate entity? or any metadata?</p>\n<p><a href=\"/user_uploads/10155/rzkzIlk4Axbd8c1QhOP-su9p/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/rzkzIlk4Axbd8c1QhOP-su9p/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/rzkzIlk4Axbd8c1QhOP-su9p/image.png\"></a></div>",
        "id": 219214781,
        "sender_full_name": "Marcin Szewczyk",
        "timestamp": 1607438962
    },
    {
        "content": "<p>The mapping is not stored, it is used just during the processing of the transaction</p>",
        "id": 219216886,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1607439930
    },
    {
        "content": "<p>do not understand, so in which cases server do not know mapping?<br>\n\"For updates, the server performs a mapping between the fullUrl specified and the local URL the server knows that instance as, if possible.\"</p>\n<p>or example:</p>\n<ol>\n<li>POST create Patient fullURL=UUID1, identifier=xyz.com/Patient/123 send to <a href=\"http://abc.com\">abc.com</a> FHIR SERVER -&gt; returns <a href=\"http://abc.com/Patient/987\">abc.com/Patient/987</a></li>\n<li>PUT Patient fullUrl=xyz.com/Patient/123  send to <a href=\"http://abc.com\">abc.com</a> FHIR server -&gt; is this valid scenario?<br>\nor <br>\nit should be<br>\nPUT Patient fullUrl=abc.com/Patient/987 send do <a href=\"http://abc.com\">abc.com</a> FHIR server</li>\n</ol>",
        "id": 219221089,
        "sender_full_name": "Marcin Szewczyk",
        "timestamp": 1607441878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"304367\">Marcin Szewczyk</span> <a href=\"#narrow/stream/179166-implementers/topic/transactions/near/219221089\">said</a>:</p>\n<blockquote>\n<p>do not understand, so in which cases server do not know mapping?<br>\n\"For updates, the server performs a mapping between the fullUrl specified and the local URL the server knows that instance as, if possible.\"</p>\n<p>or example:</p>\n<ol>\n<li>POST create Patient fullURL=UUID1, identifier=xyz.com/Patient/123 send to <a href=\"http://abc.com\">abc.com</a> FHIR SERVER -&gt; returns <a href=\"http://abc.com/Patient/987\">abc.com/Patient/987</a></li>\n<li>PUT Patient fullUrl=xyz.com/Patient/123  send to <a href=\"http://abc.com\">abc.com</a> FHIR server -&gt; is this valid scenario?<br>\nor <br>\nit should be<br>\nPUT Patient fullUrl=abc.com/Patient/987 send do <a href=\"http://abc.com\">abc.com</a> FHIR server</li>\n</ol>\n</blockquote>\n<p>Any ideas about this?<br>\nReading further: <a href=\"/user_uploads/10155/yJM6JybhjlaEQNR58ixTceX1/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/yJM6JybhjlaEQNR58ixTceX1/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/yJM6JybhjlaEQNR58ixTceX1/image.png\"></a></div><p>There is two suggestions:</p>\n<ol>\n<li>\n<p>Fhir Server should have ability to understand identifier with base from other server.  <br>\njust for the sake of simplicity for client/complexity for server...<br>\n\" This allows the same transaction bundle to be sent to multiple systems without changing the fullUrls for each target.\"<br>\n in other words: server <a href=\"http://abc.com\">abc.com</a> should understand PUT Bundle transaction with xyz.zom/Patient/123 <br>\nam i wrong?</p>\n</li>\n<li>\n<p>on the other hand, fhir server MAY accept foreign fullUrl as their own... under some circumstances<br>\n\"When processing a batch or transaction, a server MAY choose to honor existing logical ids (e.g. Observation/1234 remains as Observation/1234 on the server), but since this is only safe in controlled circumstances, servers may choose to assign new ids to all submitted resources, irrespective of any claimed logical id in the resource, or fullUrl on entries in the batch/transaction.\"</p>\n</li>\n</ol>",
        "id": 219569209,
        "sender_full_name": "Marcin Szewczyk",
        "timestamp": 1607667328
    },
    {
        "content": "<p>The most common approach is to assign whatever identifiers you like and then to go back and update all links to point to the identifiers you've assigned</p>",
        "id": 219609214,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1607695449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/transactions/near/219609214\">said</a>:</p>\n<blockquote>\n<p>The most common approach is to assign whatever identifiers you like and then to go back and update all links to point to the identifiers you've assigned</p>\n</blockquote>\n<p>That is my way of doing integrations from notFHIR world<br>\nBut FHIR standard suggests to respect others ids, to enable sending same Bundle to multiple without changing Bundle content - looks like utopia..</p>\n<p>I am thinking of doing conditional PUT with identifier parameter - thats way both internal and external id will be supported.<br>\nAs long as we store both of them on identifier list</p>",
        "id": 219807522,
        "sender_full_name": "Marcin Szewczyk",
        "timestamp": 1607930970
    },
    {
        "content": "<blockquote>\n<p>References within a Bundle.entry.resource to another Bundle.entry.resource that is being created within the batch are considered to be non-conformant.</p>\n</blockquote>\n<p>Does this mean that I can't create, say, a <code>Patient</code> resource and a <code>CareTeam</code> at once in which the <code>CareTeam</code> refers to the <code>Patient</code>?</p>",
        "id": 223630510,
        "sender_full_name": "Dexter",
        "timestamp": 1611315736
    },
    {
        "content": "<p>I'm creating this <code>POST</code> <code>transaction</code> where I'm trying to do 3 things. Create a <code>Patient</code>, create a <code>CareTeam</code> for that <code>Patient</code>, and then assign a device to that <code>Patient</code>. Here's what I have (POST bundle below). I can't seem to get the device assignment working, the reference on the device retains the <code>urn</code>, instead of resolving to the patient ID, like in the created <code>CareTeam</code> of the request. What am I missing? </p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    &quot;resourceType&quot;: &quot;Bundle&quot;,\n    &quot;type&quot;: &quot;transaction&quot;,\n    &quot;entry&quot;: [\n        {\n            &quot;fullUrl&quot;: &quot;urn:uuid:abe0b81e-2aca-44c7-8469-1dc1f7301fe9&quot;,\n            &quot;resource&quot;: {\n                &quot;resourceType&quot;: &quot;Patient&quot;,\n                // patient info removed for brevity\n            },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;POST&quot;\n            }\n        },\n        {\n            &quot;resource&quot;: {\n                &quot;resourceType&quot;: &quot;CareTeam&quot;,\n                &quot;subject&quot;: {\n                    &quot;reference&quot;: &quot;urn:uuid:abe0b81e-2aca-44c7-8469-1dc1f7301fe9&quot;,\n                    &quot;type&quot;: &quot;Patient&quot;\n                },\n                // removed for brevity\n                &quot;status&quot;: &quot;active&quot;\n            },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;POST&quot;\n            }\n        },\n        {\n            &quot;resource&quot;: {\n                &quot;resourceType&quot;: &quot;Binary&quot;,\n                &quot;contentType&quot;: &quot;application/json-patch+json&quot;,\n                &quot;data&quot;: &quot;base64encoded of the document below&quot; // (b)\n            },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;PATCH&quot;,\n                &quot;url&quot;: &quot;Device/1835297&quot;\n            }\n        }\n    ]\n}\n</code></pre></div>\n<p><code>PATCH</code> document whose <code>base64()</code> goes above at (b)</p>\n<div class=\"codehilite\"><pre><span></span><code>[\n    {\n        &quot;op&quot;: &quot;test&quot;,\n        &quot;path&quot;: &quot;/meta/versionId&quot;,\n        &quot;value&quot;: &quot;x&quot;\n    },\n    {\n        &quot;op&quot;: &quot;test&quot;,\n        &quot;path&quot;: &quot;/status&quot;,\n        &quot;value&quot;: &quot;inactive&quot;\n    },\n    {\n        &quot;op&quot;: &quot;add&quot;,\n        &quot;path&quot;: &quot;/patient&quot;,\n        &quot;value&quot;: {\n            &quot;reference&quot;: &quot;urn:uuid:abe0b81e-2aca-44c7-8469-1dc1f7301fe9&quot;,\n            &quot;type&quot;: &quot;Patient&quot;\n        }\n    },\n    {\n        &quot;op&quot;: &quot;replace&quot;,\n        &quot;path&quot;: &quot;/status&quot;,\n        &quot;value&quot;: &quot;active&quot;\n    }\n]\n</code></pre></div>\n<p>I get this in return </p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    &quot;resourceType&quot;: &quot;Bundle&quot;,\n    &quot;type&quot;: &quot;transaction-response&quot;,\n    // snip\n    &quot;entry&quot;:     [{\n        &quot;response&quot;: {\n            &quot;status&quot;: &quot;201 Created&quot;,\n            &quot;location&quot;: &quot;Patient/1836280/_history/1&quot;,\n            &quot;etag&quot;: &quot;1&quot;,\n            &quot;lastModified&quot;: &quot;2021-01-22T11:50:57.291+00:00&quot;\n        }\n    },\n    {\n        &quot;response&quot;: {\n            &quot;status&quot;: &quot;201 Created&quot;,\n            &quot;location&quot;: &quot;CareTeam/1836281/_history/1&quot;,\n            &quot;etag&quot;: &quot;1&quot;,\n            &quot;lastModified&quot;: &quot;2021-01-22T11:50:57.291+00:00&quot;\n        }\n    }]\n}\n</code></pre></div>\n<p><code>CareTeam</code> has the proper reference like so</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;subject&quot;: {\n    &quot;reference&quot;: &quot;Patient/1836280&quot;,  // Works!\n    &quot;type&quot;: &quot;Patient&quot;\n }\n</code></pre></div>\n<p>But the device isn't working</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;patient&quot;: {\n    &quot;reference&quot;: &quot;urn:uuid:abe0b81e-2aca-44c7-8469-1dc1f7301fe9&quot;,  // should be &#39;Patient/1836280&#39;\n    &quot;type&quot;: &quot;Patient&quot;\n}\n</code></pre></div>",
        "id": 223632520,
        "sender_full_name": "Dexter",
        "timestamp": 1611317150
    },
    {
        "content": "<p>You transaction bundle is wrong: the Bundle should contain 3 entries, currently it's just one entry with 3 resources in it. That's not allowed by Bundles. Each entry has 0..1 resource in it.</p>",
        "id": 223634300,
        "sender_full_name": "René Spronk",
        "timestamp": 1611318385
    },
    {
        "content": "<p>It does, doesn't it, an array of 3 (unless I'm mistaken with the code or the formatting)? </p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;entry&quot;: [\n        { // patient },\n        { // careteam  },\n        { // device }\n    ]\n</code></pre></div>",
        "id": 223635048,
        "sender_full_name": "Dexter",
        "timestamp": 1611318898
    },
    {
        "content": "<p>Ah yes (my XML background is to blame here). Nothing wrong with the overall structure of your Transaction. </p>\n<p>So the issue is with your JSON patch (which I haven't played with, I've only tested FHIR patch, based of FHIR Path).<br>\nIf you claim the resource type (of your PATCH) to be Binary, then the server will process it as if it were a Binary (ie a Blob, nothing to do with FHIR resource structures). As such a server won't update your 'reference', it will just patch with the literal string as present in your patch statement. Whether one would desire to have it be done in another way, well, that's a good question.</p>",
        "id": 223642093,
        "sender_full_name": "René Spronk",
        "timestamp": 1611322903
    },
    {
        "content": "<p>PATCH doesn't really make sense for a Binary because there are very few properties you can manipulate in a Binary - just stuff in meta and the content itself.</p>",
        "id": 223648275,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1611326020
    },
    {
        "content": "<p>The attempt is to PATCH a Patient resource, so the Bundle should probably be declaring that as the resource type instead of Binary. The documentation isn't very clear as to what resource type one should specifiy on a PATCH operation.</p>",
        "id": 223649182,
        "sender_full_name": "René Spronk",
        "timestamp": 1611326491
    },
    {
        "content": "<p>how <em>is</em> a json patch supposed to look in a transaction bundle, putting aside Dexter's problem for now do we have any guidance on that? Is it supposed to be a non-fhir document stuffed inside a bundle? packaged as a Binary like Dexter did? <br>\ndoes this line in the spec \"Patch operations may be performed as part of Batch or Transaction Operations using the FHIRPath Patch format. \"<br>\nimply that only fhirpatch can be used in batch/transactions?</p>",
        "id": 223658276,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1611330341
    },
    {
        "content": "<p>There is no support for a json patch in a batch/transaction bundle.</p>",
        "id": 223673680,
        "sender_full_name": "Paul Church",
        "timestamp": 1611337199
    },
    {
        "content": "<p>I see. So the references aren't transformed in a Bundle. How do I PATCH through a transaction in such a case?  Since I'm updating resources, I don't think splitting it into 2 requests will be wise, as it might lead to inconsistencies. </p>\n<p>If I may suggest, this <a href=\"https://www.hl7.org/fhir/http.html#trules\">section of the document</a> led me to believe that this would work. What do you suggest I do?</p>",
        "id": 223854195,
        "sender_full_name": "Dexter",
        "timestamp": 1611548825
    },
    {
        "content": "<p>Also,  apologies for the delay in my response, I need to use my Work PC for logging in.</p>",
        "id": 223854247,
        "sender_full_name": "Dexter",
        "timestamp": 1611548892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359486\">Dexter</span> <a href=\"#narrow/stream/179166-implementers/topic/Transactions/near/223630510\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>References within a Bundle.entry.resource to another Bundle.entry.resource that is being created within the batch are considered to be non-conformant.</p>\n</blockquote>\n<p>Does this mean that I can't create, say, a <code>Patient</code> resource and a <code>CareTeam</code> at once in which the <code>CareTeam</code> refers to the <code>Patient</code>?</p>\n</blockquote>\n<p>Does this mean that technically, HAPI is non-conformant?</p>",
        "id": 223854269,
        "sender_full_name": "Dexter",
        "timestamp": 1611548984
    },
    {
        "content": "<p>In a transaction, you have to use FHIRpath-based patch<br>\nNothing prohibits a server from supporting batches where the actions have interdependencies - or otherwise consuming data that's non-conformant.  However, HAPI <em>shouldn't</em> spit out batches that break the rules.</p>",
        "id": 223858022,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1611554009
    },
    {
        "content": "<p>Could you clarify what the patch doc would look like, I couldn't find the schema for this. A link to the relevant portion would be great too, thanks!</p>\n<blockquote>\n<p>Nothing prohibits a server from supporting batches where the actions have interdependencies - or otherwise consuming data that's non-conformant.</p>\n</blockquote>\n<p>So that means me being able to create a <code>Patient</code> resource and a <code>CareTeam</code> at once in a <code>Transaction</code> where the <code>CareTeam</code> refers to the <code>Patient</code> is something that's supported by HAPI, but NOT the FHIR specification, therefore I shouldn't expect other server implementations to support this, correct?</p>",
        "id": 223858662,
        "sender_full_name": "Dexter",
        "timestamp": 1611554854
    },
    {
        "content": "<p>Quite the opposite. All servers that support Bundles have to support this. See <a href=\"http://build.fhir.org/bundle.html#references\">http://build.fhir.org/bundle.html#references</a></p>",
        "id": 223862761,
        "sender_full_name": "René Spronk",
        "timestamp": 1611560077
    },
    {
        "content": "<p>Um, I'm a little confused in that case, could you please clarify what this means? </p>\n<blockquote>\n<p>References within a Bundle.entry.resource to another Bundle.entry.resource that is being created within the batch are considered to be non-conformant.</p>\n</blockquote>\n<p>Also, </p>\n<blockquote>\n<p>Whether one would desire to have it be done in another way, well, that's a good question.</p>\n</blockquote>\n<p>Haha yeah I think that's what I'm after right now. I'm looing at FHIRPatch, as Mr. Lloyd suggested, but I don't see a way to send that in a JSON form through JS frontend client.</p>",
        "id": 223864305,
        "sender_full_name": "Dexter",
        "timestamp": 1611561460
    },
    {
        "content": "<p>We're talking about a Transaction bundle, right? A Batch is quite a different thing - but you're right in that my statement above I should have spoken about Transactions, not about Bundles in general.</p>",
        "id": 223865619,
        "sender_full_name": "René Spronk",
        "timestamp": 1611562319
    },
    {
        "content": "<p>Yep Transaction, though I should probably read up on the differences b/w bundle and batch.</p>",
        "id": 223865757,
        "sender_full_name": "Dexter",
        "timestamp": 1611562400
    },
    {
        "content": "<p>You'd be sending a Parameters resource - which can be expressed in XML, JSON or RDF - just as any resource is.</p>",
        "id": 223912508,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1611588569
    },
    {
        "content": "<p>I'm not sure how to use that, I couldn't find many examples similar to what I'm trying to do, i.e, have a reference in a binary resource. Could you kindly give me an example? Thanks!</p>",
        "id": 224138614,
        "sender_full_name": "Dexter",
        "timestamp": 1611721231
    },
    {
        "content": "<p>See <a href=\"https://www.hl7.org/fhir/fhirpatch.html#format\">https://www.hl7.org/fhir/fhirpatch.html#format</a> for an example. There is no use of Binary when using FHIRPath based patch.</p>",
        "id": 224150633,
        "sender_full_name": "René Spronk",
        "timestamp": 1611735148
    },
    {
        "content": "<p>How do I convert this to a JSON payload? Is that supported? Will references resolve too? Can I put this single <code>fhirpatch</code> as one of the elements of the <code>Bundle Transaction</code>'s <code>entry</code>?</p>",
        "id": 224150895,
        "sender_full_name": "Dexter",
        "timestamp": 1611735358
    },
    {
        "content": "<p>All FHIR resources can be expressed as either JSON, or XML, or even some other representation formats. Representation is largely irrelevant (from a standards perspective). You can add a Parameters resource as an entry in a Transaction bundle, and given that this is a FHIR resource like any other FHIR resource, the reference should resolve (admittedly: I've never tested it with a Parameters resource, but I see no reason as to why that shouldn't work).</p>",
        "id": 224152035,
        "sender_full_name": "René Spronk",
        "timestamp": 1611736228
    },
    {
        "content": "<p>Okay, thank you for that! I'll give that a go, but hapi seems to be down right now. I have an issue on the local setup which I posted <a href=\"#narrow/stream/179167-hapi/topic/v5.2E2.2E0.20Web.20UI.20issue/near/224036996\">here</a></p>",
        "id": 224155005,
        "sender_full_name": "Dexter",
        "timestamp": 1611738386
    },
    {
        "content": "<p>Be aware that response times may be slower this week because HL7 is having a major virtual conference (and people therefore have less time than usual)</p>",
        "id": 224196203,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1611760843
    },
    {
        "content": "<p>I understand, thank you for taking the time to respond to my queries! With support from all of you, I'm having a blast learning how to go about FHIR!</p>",
        "id": 224286457,
        "sender_full_name": "Dexter",
        "timestamp": 1611812358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191372\">René Spronk</span> <a href=\"#narrow/stream/179166-implementers/topic/Transactions/near/224150633\">said</a>:</p>\n<blockquote>\n<p>See <a href=\"https://www.hl7.org/fhir/fhirpatch.html#format\">https://www.hl7.org/fhir/fhirpatch.html#format</a> for an example. There is no use of Binary when using FHIRPath based patch.</p>\n</blockquote>\n<p>I think I'm getting the hand of using <code>FHIRPatch</code>. How do I test for a version of a resource before <code>PATCH</code>ing it with <code>FHIRPatch</code>?</p>\n<p>I'm trying to use <code>ifMatch</code>, but this doesn't seem to work. What am I missing in this? <br>\n(Without <code>ifMatch</code> and <code>Device/id</code> works fine, so I think I understood how to use <code>FHIRPatch</code>)</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    &quot;resourceType&quot;: &quot;Bundle&quot;,\n    &quot;type&quot;: &quot;transaction&quot;,\n    &quot;entry&quot;: [\n        {\n            &quot;resource&quot;: {\n                &quot;resourceType&quot;: &quot;Parameters&quot;,\n                &quot;parameter&quot;: [\n                    {\n                        &quot;name&quot;: &quot;operation&quot;,\n                        &quot;part&quot;: [\n                            {\n                                &quot;name&quot;: &quot;type&quot;,\n                                &quot;valueString&quot;: &quot;add&quot;\n                            },\n                            {\n                                &quot;name&quot;: &quot;path&quot;,\n                                &quot;valueString&quot;: &quot;Device&quot;\n                            },\n                            {\n                                &quot;name&quot;: &quot;name&quot;,\n                                &quot;valueString&quot;: &quot;patient&quot;\n                            },\n                            {\n                                &quot;name&quot;: &quot;value&quot;,\n                                &quot;valueReference&quot;: {\n                                    &quot;reference&quot;: &quot;Patient/1714653&quot;,\n                                    &quot;type&quot;: &quot;Patient&quot;\n                                }\n                            }\n                        ]\n                    }\n                ]\n            },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;PATCH&quot;,\n                &quot;url&quot;: &quot;Device?_id=1835297&quot;,\n                &quot;ifMatch&quot;: &quot;W\\&quot;9\\&quot;&quot;\n                // This works though, when the above 2 lines are replaced with this,\n                // so I think I understand FHIRPatch\n                // &quot;url&quot;: &quot;Device/1835297&quot;,\n            }\n        }\n    ]\n}\n</code></pre></div>\n<p>I get the error  <code>Invalid match URL[W\\\"9\\\"] - URL has no search parameters</code>, which is confosing, since I think <code>Device?_id=1835297</code> is supposed to mean \"search for a device with so and so ID\"</p>",
        "id": 224301801,
        "sender_full_name": "Dexter",
        "timestamp": 1611825925
    },
    {
        "content": "<p>Back to the basics: does the server in question support conditional PATChes ?</p>",
        "id": 224309182,
        "sender_full_name": "René Spronk",
        "timestamp": 1611830529
    },
    {
        "content": "<p>To query that, must I look under <code>rest.resource</code>?<br>\nI don't see <code>Device</code> under this JSON Patch search <code>$.entry[:].resource.rest[:].resource[:].type</code><br>\nAm I going about this the right way?</p>",
        "id": 224311697,
        "sender_full_name": "Dexter",
        "timestamp": 1611832177
    },
    {
        "content": "<p>What you <em>should</em> see is rest.resource with conditionalUpdate=true and resource.interaction.code = patch</p>",
        "id": 224431520,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1611896988
    },
    {
        "content": "<p>This is on the public HAPI server at <code>hapi.fhir.org</code>. I don't think <code>PATCH</code> is there, but <code>conditionalUpdate</code> is there, multiple times. I don't see Device in the <code>rest.resource.type</code> though.</p>",
        "id": 224436812,
        "sender_full_name": "Dexter",
        "timestamp": 1611903843
    },
    {
        "content": "<p>So does this mean conditional patches aren't supported for the Device resource?</p>",
        "id": 224436842,
        "sender_full_name": "Dexter",
        "timestamp": 1611903882
    },
    {
        "content": "<p>It could.  Or it could mean the CapabilityStatement isn't complete.  <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> ?</p>",
        "id": 224538985,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1611957265
    },
    {
        "content": "<p>Hmm... I'm stuck now. If this isn't supported, how can I achieve <a href=\"#narrow/stream/179166-implementers/topic/Transactions/near/224301801\">this</a>? <br>\nFrom my basic inspection, I didn't see <code>hapi.fhir.org</code>'s conformance statement with <code>PATCH</code>, but I think it does, since it's the de-facto implementation of the spec. What am I missing here? </p>\n<p>I recall that conditional patched worked when I was using <code>JSON PATCH</code>. Does this support also translate to <code>FHIRPatch</code>?</p>",
        "id": 224687508,
        "sender_full_name": "Dexter",
        "timestamp": 1612157830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/Transactions/near/223858022\">said</a>:</p>\n<blockquote>\n<p>In a transaction, you have to use FHIRpath-based patch</p>\n</blockquote>\n<p>I tried this, doesn't work. As an alternative to conditional patch, I first test for the version in a JSON Patch, so if that doesn't match, the transaction should be aborted. I think it's equivalent to using <code>ifMatch</code> in <code>FHIRPatch</code>. Here's what I'm sending </p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    &quot;resourceType&quot;: &quot;Bundle&quot;,\n    &quot;type&quot;: &quot;transaction&quot;,\n    &quot;entry&quot;: [\n        {\n            &quot;resource&quot;: {\n                &quot;resourceType&quot;: &quot;Binary&quot;,\n                &quot;contentType&quot;: &quot;application/json-patch+json&quot;,\n                &quot;data&quot;:  &quot;base64( [{ &quot;op&quot;: &quot;test&quot;, &quot;path&quot;: &quot;/meta/versionId&quot;, &quot;value&quot;: &quot;versionId&quot;}] )&quot;\n            },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;PATCH&quot;,\n                &quot;url&quot;: &quot;Device/1835297&quot;\n            }\n        },\n        {\n            &quot;fullUrl&quot;: &quot;urn:uuid:abe0b81e-2aca-44c7-8469-1dc1f7301fe9&quot;,\n            &quot;resource&quot;: {\n                &quot;resourceType&quot;: &quot;Patient&quot;,\n                &quot;name&quot;: [\n                    {\n                        &quot;use&quot;: &quot;official&quot;,\n                        &quot;given&quot;: [\n                            &quot;Ben One&quot;\n                        ],\n                        &quot;family&quot;: &quot;Ben One&quot;\n                    }\n                ],\n                &quot;gender&quot;: &quot;male&quot;,\n                &quot;birthDate&quot;: &quot;1987-01-22&quot;,\n            },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;POST&quot;\n            }\n        },\n        {\n            &quot;resource&quot;: {\n                &quot;resourceType&quot;: &quot;Parameters&quot;,\n                &quot;parameter&quot;: [\n                    {\n                        &quot;name&quot;: &quot;operation&quot;,\n                        &quot;part&quot;: [\n                            {\n                                &quot;name&quot;: &quot;type&quot;,\n                                &quot;valueString&quot;: &quot;add&quot;\n                            },\n                            {\n                                &quot;name&quot;: &quot;path&quot;,\n                                &quot;valueString&quot;: &quot;Device&quot;\n                            },\n                            {\n                                &quot;name&quot;: &quot;name&quot;,\n                                &quot;valueString&quot;: &quot;patient&quot;\n                            },\n                            {\n                                &quot;name&quot;: &quot;value&quot;,\n                                &quot;valueReference&quot;: {\n                                    &quot;reference&quot;: &quot;urn:uuid:abe0b81e-2aca-44c7-8469-1dc1f7301fe9&quot;,\n                                    &quot;type&quot;: &quot;Patient&quot;\n                                }\n                            }\n                        ]\n                    }\n                ]\n            },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;PATCH&quot;,\n                &quot;url&quot;: &quot;Device/1835297&quot;\n            }\n        }\n    ]\n}\n</code></pre></div>\n<p>This doesn't resolve the <code>urn:uuid:xx</code> either, </p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    &quot;resourceType&quot;: &quot;Device&quot;,\n    &quot;id&quot;: &quot;1835297&quot;,\n    // ... other data\n    &quot;patient&quot;: {\n        &quot;reference&quot;: &quot;urn:uuid:abe0b81e-2aca-44c7-8469-1dc1f7301fe9&quot;,\n        &quot;type&quot;: &quot;Patient&quot;\n    }\n}\n</code></pre></div>\n<p>What am I missing here?</p>",
        "id": 224690150,
        "sender_full_name": "Dexter",
        "timestamp": 1612161377
    },
    {
        "content": "<p>You might try asking on <a class=\"stream\" data-stream-id=\"179167\" href=\"/#narrow/stream/179167-hapi\">#hapi</a> Some of those most familiar with it don't monitor this stream because it's too high-volume</p>",
        "id": 224692863,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1612164496
    },
    {
        "content": "<p>By the way, none of the available FHIR test servers implements the full spec, so one should never assume any particular server to do so.</p>",
        "id": 224692973,
        "sender_full_name": "René Spronk",
        "timestamp": 1612164628
    },
    {
        "content": "<p>I see, okay.</p>",
        "id": 224693788,
        "sender_full_name": "Dexter",
        "timestamp": 1612165588
    },
    {
        "content": "<p>Okay, thank you for letting me know! <br>\nI've split into 2 topics</p>\n<p><a href=\"#narrow/stream/179167-hapi/topic/HAPI.20Docker.20setup/near/224696698\">HAPI Docker setup</a><br>\n<a href=\"#narrow/stream/179167-hapi/topic/Transactions.20and.20Conditional.20PATCH/near/224694590\">Transactions</a></p>",
        "id": 224698187,
        "sender_full_name": "Dexter",
        "timestamp": 1612169039
    },
    {
        "content": "<p>IHE IT-65 ProvideDocBundle The Bundle includes DocumentManifest DocumentReference Binary.  I had assumed that whenever I use \"urn:uuid:...\" in a 'url' typed element, it would be replaced by the server.  In this case.  the <a href=\"http://Binary.id\">Binary.id</a> / fullUrl and the DocumentReference.content.attachment match in the transsction request.  The attachment value is not replaced however in the response though.  That seems to indicate I need to persist the Binary first, get the id and then reference as FQ in transaction request?  Is this expected behavior.  Am I missing something?  (R4.0)</p>",
        "id": 227863211,
        "sender_full_name": "sean zitello",
        "timestamp": 1614299384
    },
    {
        "content": "<p>The transaction processing rules in the spec clearly say \"Servers SHALL replace all matching links in the bundle, whether they are found in the resource ids, resource references, elements of type uri, url, oid, uuid, and &lt;a href=\"\" &amp; &lt;img src=\"\" in the narrative.\"  So it sounds like your server isn't behaving correctly.  Are you hitting one of the standard reference servers?</p>",
        "id": 227884541,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614317225
    },
    {
        "content": "<p>(In this case, DocumentReference.content.attachment is of type 'url', which is covered by the rule.)</p>",
        "id": 227884560,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614317259
    },
    {
        "content": "<p>Yeah I'm hitting the public HAPI server at <code>hapi.fhir.org</code>. Apologies for the delay in response, I asked in the #hapi stream as suggested. I've reported this as a bug (as suggested by Mr René Spronk) on GitHub <a href=\"https://github.com/hapifhir/hapi-fhir/issues/2353\">here</a></p>",
        "id": 227909805,
        "sender_full_name": "Dexter",
        "timestamp": 1614336110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/Transactions/near/227884541\">said</a>:</p>\n<blockquote>\n<p>The transaction processing rules in the spec clearly say \"Servers SHALL replace all matching links in the bundle, whether they are found in the resource ids, resource references, elements of type uri, url, oid, uuid, and &lt;a href=\"\" &amp; &lt;img src=\"\" in the narrative.\"  So it sounds like your server isn't behaving correctly.  Are you hitting one of the standard reference servers?</p>\n</blockquote>\n<p>HAPI R4 public is good.  I have two other vendor 1 private, 1 public private instance where it fails.</p>",
        "id": 227929186,
        "sender_full_name": "sean zitello",
        "timestamp": 1614347133
    },
    {
        "content": "<p>Where it fails, you should report a bug to whoever's running that system - and point them at the language I quoted.</p>",
        "id": 227936129,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614350144
    }
]