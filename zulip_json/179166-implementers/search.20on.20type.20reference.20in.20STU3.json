[
    {
        "content": "<p>Is it possible to construct a query (in STU3) for eg. all Communications where the sender reference is of a/is not of a particular type?</p>",
        "id": 220110213,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1608122422
    },
    {
        "content": "<p>/Communication?sender:Practitioner:missing=false  (as an example for Practitioner senders). This is R4.</p>",
        "id": 220113898,
        "sender_full_name": "René Spronk",
        "timestamp": 1608124839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191372\">@René Spronk</span> that does not seem to do it even though the spec says that it seems doable. When doing <a href=\"http://hapi.fhir.org/baseDstu3/Communication?sender:Practitioner:missing=false\">http://hapi.fhir.org/baseDstu3/Communication?sender:Practitioner:missing=false</a> I would have expected at least <a href=\"http://hapi.fhir.org/baseDstu3/Communication/2787907\">http://hapi.fhir.org/baseDstu3/Communication/2787907</a> among the results, but an empty resultset is returned.</p>",
        "id": 220189340,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1608162092
    },
    {
        "content": "<p>:type:missing seems like a long shot, I doubt implementations are going to support that unless they thought of it specifically.</p>\n<p>Maybe chain on ?sender:Practitioner with some trivial condition that will always be true? Or maybe ?sender._type=Practitioner</p>",
        "id": 220190064,
        "sender_full_name": "Paul Church",
        "timestamp": 1608162695
    },
    {
        "content": "<p>:missing is defined for all parameter types, so also for reference. If HAPI decides not to support it, then it should create an error. (non supported qualifiers and comparators should cause an error, they may not be ignored).</p>",
        "id": 220215265,
        "sender_full_name": "René Spronk",
        "timestamp": 1608191896
    },
    {
        "content": "<p>When GETting <a href=\"http://hapi.fhir.org/baseDstu3/Communication?sender:Practitioner:missing=false\">http://hapi.fhir.org/baseDstu3/Communication?sender:Practitioner:missing=false</a> , the self link in the response is the same as the URL used, so the server supposedly processed all parts of the search URL. That's a HAPI bug.</p>",
        "id": 220215293,
        "sender_full_name": "René Spronk",
        "timestamp": 1608191951
    },
    {
        "content": "<p>However, Paul offers a nice alternative, which appears to work just fine.</p>",
        "id": 220215412,
        "sender_full_name": "René Spronk",
        "timestamp": 1608192053
    },
    {
        "content": "<p>thx <span class=\"user-mention\" data-user-id=\"197072\">@Paul Church</span>  - <a href=\"http://hapi.fhir.org/baseDstu3/Communication?sender._type=Practitioner\">http://hapi.fhir.org/baseDstu3/Communication?sender._type=Practitioner</a> seems to fit the bill<br>\n<span class=\"user-mention silent\" data-user-id=\"191372\">René Spronk</span> <a href=\"#narrow/stream/179166-implementers/topic/search.20on.20type.20reference.20in.20STU3/near/220215265\">said</a>:</p>\n<blockquote>\n<p>:missing is defined for all parameter types, so also for reference. If HAPI decides not to support it, then it should create an error. (non supported qualifiers and comparators should cause an error, they may not be ignored).</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> it sounds like I'm gonna make a issue.</p>",
        "id": 220223113,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1608198449
    },
    {
        "content": "<p>Now, a clarifying question: should the following be possible <a href=\"http://hapi.fhir.org/baseDstu3/Communication?sender._type=Device,Practitioner\">http://hapi.fhir.org/baseDstu3/Communication?sender._type=Device,Practitioner</a> - meaning that the types are OR'ed - meaning either Device or Practitioner?<br>\n<span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> the observed current behaviour seems to omit senders with type Device, so there is another bug in there somewhere.</p>",
        "id": 220223743,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1608198865
    },
    {
        "content": "<p>and a follow up question. Should sender._type work for contained resources?</p>",
        "id": 220224107,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1608199127
    },
    {
        "content": "<p>I agree that it should be an error rather than ignored, but I'm not sure it's so clear-cut that the spec allows this combination. It certainly allows reference-field:missing, but there's not really any language about combinations of modifiers - many of which do not make sense, e.g. string-field:contains:missing.</p>",
        "id": 220240241,
        "sender_full_name": "Paul Church",
        "timestamp": 1608210318
    },
    {
        "content": "<p>Any combination of modifiers not supported by a server should result in an error. I agree that not all modifier combinations may make sense.</p>",
        "id": 220243009,
        "sender_full_name": "René Spronk",
        "timestamp": 1608211920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197072\">@Paul Church</span> does Google support <code>?sender._type=X,Z</code></p>",
        "id": 220307445,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1608241529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197072\">@Paul Church</span> hmmm ... my 'empirical study' says Google doesn't support it</p>",
        "id": 220582219,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1608556682
    },
    {
        "content": "<p>I'm off on holidays and haven't had a chance to look into it, but _type is a bit of a special case so it's possible we can't do that search.</p>",
        "id": 220599942,
        "sender_full_name": "Paul Church",
        "timestamp": 1608567106
    },
    {
        "content": "<p>It would seem like a pretty useful feature, to be able to query for eg. messages (as in the case with Communication)  that was sent from practitioners to you as  a patient, at let the server do the filtering, instead of putting that load on the client</p>",
        "id": 220621831,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1608579605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> is this something that is interesting to HAPI ?</p>",
        "id": 221986900,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1610046727
    }
]