[
    {
        "content": "<p>We've fixed required validation in our FHIR library and run tests against FHIR 1.6 distrib  -  got about 22 failures like:</p>\n<div class=\"codehilite\"><pre> [{:expected &quot;field :code is required&quot;, \n  :actual {:extension [\n        {:url &quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-regex&quot;, :valueString &quot;-?([0]|([1-9][0-9]*))(\\\\.[0-9]+)?&quot;}], :_code {:extension [{:url &quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-json-type&quot;, :valueString &quot;number&quot;} \n       {:url &quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-xml-type&quot;, :valueString &quot;xsd:decimal&quot;} \n       {:url &quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-rdf-type&quot;, :valueString &quot;xsd:decimal&quot;}]}},\n :path [:snapshot :element 3 :type 0]}\n\n {:expected &quot;field :code is required&quot;, \n  :actual {:extension [\n       {:url &quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-regex&quot;, :valueString &quot;-?([0]|([1-9][0-9]*))(\\\\.[0-9]+)?&quot;}],      :_code {:extension [{:url &quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-json-type&quot;, :valueString &quot;number&quot;}  \n      {:url &quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-xml-type&quot;, :valueString &quot;xsd:decimal&quot;} \n      {:url &quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-rdf-type&quot;, :valueString &quot;xsd:decimal&quot;}]}}, \n:path [:differential :element 1 :type 0]}]))\n</pre></div>\n\n\n<p>By spec StructureDefinition.differential.element.type.code is required, but here we see there is no code element, but only _code (primative extension) - should we treat it like <code>code required</code> is satisfied??</p>\n<p>All this errors are related to profiles of primitive types.</p>",
        "id": 153862737,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1481293630
    },
    {
        "content": "<p>this is not an error. if there's a code present, it must come from the value set. but in this case, there isn't a code present.</p>",
        "id": 153862771,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481310664
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/elementdefinition-definitions.html#ElementDefinition.type.code\" target=\"_blank\" title=\"http://build.fhir.org/elementdefinition-definitions.html#ElementDefinition.type.code\">http://build.fhir.org/elementdefinition-definitions.html#ElementDefinition.type.code</a> 1..1?</p>",
        "id": 153862862,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1481322855
    },
    {
        "content": "<p>It looks strange to use extensions in core to define primitives, isn't it?</p>",
        "id": 153862914,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1481441493
    },
    {
        "content": "<p>well, those things correspond to compiler magic in any other language. Whatever we do would be anomalous in so way. </p>",
        "id": 153862922,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481448383
    },
    {
        "content": "<p>though we later came up with a solution that could solve this better, actually, in that type is a URI now</p>",
        "id": 153862923,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481448411
    },
    {
        "content": "<p>I could just reference the XSD type directly, and make the JSON and RDF information an extension </p>",
        "id": 153862924,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481448445
    },
    {
        "content": "<p>couldn't do that earlier when we solved that dfferently. </p>",
        "id": 153862925,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481448458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> I think that this would be a better approach</p>",
        "id": 153862926,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481448499
    },
    {
        "content": "<p>so, specifically, we currently have:</p>\n<div class=\"codehilite\"><pre>          &lt;!-- Note: primitive values do not have an assigned type. e.g. this is compiler magic. XML, JSON and RDF types provided by extension --&gt;\n            &lt;type&gt;\n              &lt;code&gt;\n                &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-json-type&quot;&gt;\n                  &lt;valueString value=&quot;boolean&quot;/&gt;\n                &lt;/extension&gt;\n                &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-xml-type&quot;&gt;\n                  &lt;valueString value=&quot;xsd:boolean&quot;/&gt;\n                &lt;/extension&gt;\n                &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-rdf-type&quot;&gt;\n                  &lt;valueString value=&quot;xsd:boolean&quot;/&gt;\n                &lt;/extension&gt;\n              &lt;/code&gt;\n            &lt;/type&gt;\n</pre></div>",
        "id": 153862927,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481448659
    },
    {
        "content": "<p>this would change to:</p>\n<div class=\"codehilite\"><pre>            &lt;type&gt;\n              &lt;code value=&quot;http://www.w3.org/2001/XMLSchema#boolean&quot;&gt;\n                &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-json-type&quot;&gt;\n                  &lt;valueString value=&quot;boolean&quot;/&gt;\n                &lt;/extension&gt;\n                &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-rdf-type&quot;&gt;\n                  &lt;valueUri value=&quot;xsd:boolean&quot;/&gt;\n                &lt;/extension&gt;\n              &lt;/code&gt;\n            &lt;/type&gt;\n</pre></div>",
        "id": 153862928,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481448823
    },
    {
        "content": "<p>somwhat arbitrarily, I have chosen xsd as the master, because a/ it's richer then the json types and b/ RDF uses the same types</p>",
        "id": 153862929,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481448856
    },
    {
        "content": "<p>May be add special elements to structure definition to do it without extensions?</p>",
        "id": 153862938,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1481456333
    },
    {
        "content": "<p>I don't have a strong preference on this, though some may find it distasteful that XML is somehow \"preferred\".  (I understand that's not why you're doing it, just noting the impression it may trigger)</p>",
        "id": 153862951,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1481472165
    },
    {
        "content": "<p>I mean, that basic core feature is defined in terms of extensions, breakage of semantic layers :)</p>",
        "id": 153862962,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1481485610
    },
    {
        "content": "<p>one that would be used in 6 places? </p>",
        "id": 153862964,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481486111
    },
    {
        "content": "<p>why not, you introduced contentReferences, which used in 5 places</p>",
        "id": 153862965,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1481486173
    },
    {
        "content": "<p>we expect that to be used more. </p>",
        "id": 153862968,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481486478
    },
    {
        "content": "<p>RDF type differs from xml type in one place - RDF makes anyURI a bNode (e.g. reference to RDF node) so we mapped anyURI to string for RDF</p>",
        "id": 153862969,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481486847
    },
    {
        "content": "<p>JSON type is matching type, but that often means string since the type system is simpler. But it's done by rules, so it might be simpler to hard code the equivalence as a table somewhere</p>",
        "id": 153862970,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481486905
    }
]