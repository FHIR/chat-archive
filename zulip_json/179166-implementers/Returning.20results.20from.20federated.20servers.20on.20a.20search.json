[
    {
        "content": "<p>Hi,</p>",
        "id": 153845645,
        "sender_full_name": "Rick Riemer",
        "timestamp": 1472555950
    },
    {
        "content": "<p>We're implementing a DocumentReference server that acts as a proxy to other backend servers. When clients perform a search on our proxy, are we allowed to return results from different resource servers in our response? That is, if we return bundle entries with fullUrls that have varying base URLs would clients understand that? Are clients required to use the fullUrl if we return it?</p>",
        "id": 153845646,
        "sender_full_name": "Rick Riemer",
        "timestamp": 1472556182
    },
    {
        "content": "<p>yes, they should be able to manage that </p>",
        "id": 153845652,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1472556311
    },
    {
        "content": "<p>OK. Thanks.</p>",
        "id": 153845834,
        "sender_full_name": "Rick Riemer",
        "timestamp": 1472560837
    },
    {
        "content": "<p>Note that in IHE - MHD - We ignored this problem , expecting experience might enlighten any profiling that needs to be made.   I was expecting the federation in MHD to be behind the MHD server (singular); thus all exposed urls would be to that MHD server.  You seem to be asking about a MHD federating multiple other MHD behind it.. or more generically a FHIR server that is federating multiple FHIR servers.... great to get your experience to feed back to both MHD and the greater topic in FHIR. I expect the greater FHIR topic is more clean.</p>",
        "id": 153845841,
        "sender_full_name": "John Moehrke",
        "timestamp": 1472573888
    },
    {
        "content": "<p>The potential part will be that of Authorization... A client might have authorization on the first API; and that API service has authorization to do federation queries. Thus transitive authZ, that might not exist without fist intermediary.</p>",
        "id": 153845843,
        "sender_full_name": "John Moehrke",
        "timestamp": 1472573999
    }
]