[
    {
        "content": "<p>Dear community. <br>\nI have a problem with slicing. We made a profile on observations for woundsize with several components (length, width, depth and area). These components we want to code with loinc and e.g. snomed ct. Therefore we did not only slice the component, but also the coding in the components (see <a href=\"https://simplifier.net/posithera/positherawoundsize\" target=\"_blank\" title=\"https://simplifier.net/posithera/positherawoundsize\">https://simplifier.net/posithera/positherawoundsize</a>). <br>\nFor the slices we need a discriminator. We chose \"code.coding.code\" for components, which is now not applicable due to the slice on coding. <br>\nNow we are unsure how to solve this problem. Has anyone an idea to cope with such a situation? Thanks in advance!</p>",
        "id": 174965982,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1567684564
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"196115\">@Mareike Przysucha</span> -- I think the recommended way forward now would be to use <code>pattern[x]</code> to fix the codes within the component slices.  Then you only have one level of slicing.  There was actually some recent discussion regarding how best to fix codes (slice+fixed[x] vs. pattern[x]) here: <a href=\"#narrow/stream/179166-implementers/topic/Fixed.20Code.20vs.20Pattern\" title=\"#narrow/stream/179166-implementers/topic/Fixed.20Code.20vs.20Pattern\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Fixed.20Code.20vs.20Pattern</a> (note, it went off-topic toward the end, so read from the top).</p>",
        "id": 174970877,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1567688580
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> . thanks for your reply, I will read the recommended topic.</p>",
        "id": 174971016,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1567688676
    },
    {
        "content": "<p>Note that discriminator paths are relative to the sliced element:<br>\n<a href=\"http://hl7.org/fhir/profiling.html#discriminator\" target=\"_blank\" title=\"http://hl7.org/fhir/profiling.html#discriminator\">http://hl7.org/fhir/profiling.html#discriminator</a><br>\nIn this case, you would probably like to discriminate on <code>system</code>, not on <code>code</code>.</p>",
        "id": 174971230,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1567688829
    },
    {
        "content": "<p>There's a bit of back and forth in the topic -- so it's a kind of bumpy ride -- but the end result is to use <code>pattern[x]</code> to fix Coding and CodeableConcept types.</p>",
        "id": 174971324,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1567688888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> -- if they're trying to discriminate components based on the fixed code in the component, then I think they'd actually want to discriminate on <code>code.coding.code</code> <em>and</em> <code>code.coding.system</code>, wouldn't they?</p>",
        "id": 174971565,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1567689024
    },
    {
        "content": "<p>Correct. Nested slices would use a short(er) discriminator path. Apologies if I understood incorrectly.</p>",
        "id": 174971687,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1567689123
    },
    {
        "content": "<p>That drives me to the next Part. I've never worked with patterns before. So I am unsure how it can solve my problem... I am sorry that I don't know. Probably I am just too stupid to use Forge in this context.</p>\n<p>I also don't know if the composition of \"code\" and \"system\" will do the job as we have 8 pairs (4 component slices x 2 code systems [LOINC and SNOMED]), and two of them identifying the same component. Probably a fixed \"text\" with minimum cardinality \"1\"?</p>",
        "id": 174978710,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1567693617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"196115\">@Mareike Przysucha</span> I'm not sure what you mean by \"two of them identifying the same component\"?  I looked at the Simplifier link, but maybe you can point out specific examples?  I agree with Chris and Michel that likely pattern is going to be the best approach to take, but if you do have requirements that you know or think that it can't meet, that would be good to know and further explore.</p>",
        "id": 174984733,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1567697239
    },
    {
        "content": "<p>With pattern, if you wanted to, you could define a pattern that included two codings - one from LOINC and one from SNOMED if that's what you really wanted (though be aware that it then wouldn't match if the instance only had a coding match from one of those two code systems).</p>",
        "id": 174984912,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1567697329
    },
    {
        "content": "<blockquote>\n<p>That drives me to the next Part. I've never worked with patterns before. So I am unsure how it can solve my problem...<br>\nI <em>thought</em> your problem had to do with multiple levels of slicing; in which case, using a pattern to fix the code means you <em>don't</em> have to slice <code>coding</code> anymore (so now you only have one level of slicing).  If I misunderstood the problem, I apologize!</p>\n</blockquote>\n<p>I somehow missed that you were using a LOINC code and a SNOMED code <em>together</em> for each component's <code>code</code> property.  If you want to enforce that they <em>both</em> must be there, then <code>pattern[x]</code> still seems the appropriate choice.  If you want to enforce that <em>either</em> the LOINC code <em>or</em> the SNOMED code is there, then the best approach may be to define value sets grouping the like codes and bind to those -- although <span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> is better qualified than I am to comment on that.</p>",
        "id": 174993003,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1567702393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> What I meant was, that e.g. LOINC-Code 39126-8 and SNOMED CT-Code 401238003 both code the wound length. Probably I expressed myself a little bit confusing.</p>",
        "id": 174995548,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1567703944
    },
    {
        "content": "<p>The loinc code shall be mandatory, the snomed ct code or other codes shall be optional. Probably this makes it easier.</p>",
        "id": 174995718,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1567704040
    },
    {
        "content": "<p>Would the SNOMED codes be captured as components or values?</p>",
        "id": 174996692,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1567704652
    },
    {
        "content": "<p>in case this might help: <a href=\"https://simplifier.net/posithera/observation-example\" target=\"_blank\" title=\"https://simplifier.net/posithera/observation-example\">https://simplifier.net/posithera/observation-example</a> is an example how we think an observation might look.</p>",
        "id": 174996959,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1567704820
    },
    {
        "content": "<p>Ok.  And the LOINCs are mandatory.  The SNOMEDs are optional.  Do you need to mention the SNOMEDs at all in the profile?  The base rule is that implementers are free to send whatever SNOMED or other codes they like in addition to the 'mandated' code used for slicing.  Unless there's some sort of rule around conformance expectations you want a validator to test, it's probably simplest to not talk to the SNOMED at all or just mention the recommended/preferred SNOMED code it in a comment rather than doing a bunch of complicated profile work that'll make the profile harder to read.  Only add complexity if it makes a difference from a tooling/validation perspective.</p>",
        "id": 174997579,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1567705202
    },
    {
        "content": "<p>It was an idea of one of my colleagues who wanted to show that we can have several codings (LOINC, SNOMED, one of our cooperators in a project) and that we can say which codes to use for each CodeSystem.</p>",
        "id": 174998280,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1567705633
    },
    {
        "content": "<p>You can show that in examples and provide guidance in text.  That keeps the profiles 'easy'.  If you're going to encode it in the profiles, there should be a validation reason for doing it - because it's going to make them harder to read/understand.  That said, you can certainly do it.</p>",
        "id": 175001718,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1567707925
    },
    {
        "content": "<p>Thanks. Then I will change the profile accordingly and provide the example in the implementation guide. Thank you all for your help!</p>",
        "id": 175001838,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1567708003
    }
]