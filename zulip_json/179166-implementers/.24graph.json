[
    {
        "content": "<p>I was walking through the GraphDefinition functionality to retrieve a graph of resources and I like the $graph operation<br>\n<a href=\"http://build.fhir.org/graphdefinition.html#fetch\" target=\"_blank\" title=\"http://build.fhir.org/graphdefinition.html#fetch\">http://build.fhir.org/graphdefinition.html#fetch</a><br>\nHowever I was wondering has their been any consideration of using this same technique to define the _include resource graph?<br>\nThe example on the page talks about Patient?_id=123&amp;_include... to emulate a graph<br>\nThen the example says Patient/123/$graph?defintion=[graphCanonical]<br>\nHow about a general search parameter that was Patient?city=boston&amp;_graph=[graphCanonical]</p>",
        "id": 172479699,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1564982786
    },
    {
        "content": "<p>I declined to mix the techniques for performance reasons.</p>",
        "id": 172479789,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564982975
    },
    {
        "content": "<p>and no one else has ever had an opinion...</p>",
        "id": 172479841,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564983026
    },
    {
        "content": "<p>I thought the graph definition would just shortcut the defining of the _includes, and also permit filtering of the included content too.<br>\n(so you could include only active endpoints, or endpoints of a specific type).<br>\nWould you recommend moving over to pure graphql for that type of stuff?</p>",
        "id": 172479868,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1564983091
    },
    {
        "content": "<p>well, you can use graphql, but it's not the same thing.</p>",
        "id": 172479914,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564983128
    },
    {
        "content": "<p>you could do the _include instead with GraphDefinition, but we are really going to hammer the server</p>",
        "id": 172479927,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564983154
    },
    {
        "content": "<p>In my use cases it would actually reduce the overall load, as the client is going to ask for all the data anyway, just in less calls.<br>\nand in a more directed way.</p>",
        "id": 172479945,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1564983199
    },
    {
        "content": "<p>right. but think how much extra they can ask for too</p>",
        "id": 172479994,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564983248
    },
    {
        "content": "<p>They are asking for the data, so yes. But its data that they are wanting. (in less round trips)</p>",
        "id": 172480008,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1564983293
    },
    {
        "content": "<p>How many of the servers are implementing $graph at the moment?</p>",
        "id": 172480025,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1564983323
    },
    {
        "content": "<p>I'm pretty sure it's only mine</p>",
        "id": 172480032,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564983342
    },
    {
        "content": "<p>Ok, HAPI doesn't do it?<br>\nI'm intending to add it to ours soonish</p>",
        "id": 172480077,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1564983377
    },
    {
        "content": "<p>I don't think so. (Check <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> )</p>",
        "id": 172480219,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564983631
    },
    {
        "content": "<p>well, in principle it should work</p>",
        "id": 172480246,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564983697
    },
    {
        "content": "<p>GraphQL is supported for R4 endpoints (currently working on getting it backported to R3 ones too) and with the new consent API it'll be secure-able too as of 4.0.0. No support for GraphDefinition/$graph is in there yet though.</p>",
        "id": 172531517,
        "sender_full_name": "James Agnew",
        "timestamp": 1565033869
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span></p>",
        "id": 172550030,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1565051049
    },
    {
        "content": "<p>Hi all, </p>\n<p>I'm reading the fhir spec on $graph and was wondering whether <code>_graph=&lt;uri&gt;</code> means the parameter should be (1) canonical, as mentioned in this thread too, (2) identifier or (3) reference or (4) id; thanks!</p>",
        "id": 202594414,
        "sender_full_name": "Tiffany Wong",
        "timestamp": 1593622536
    },
    {
        "content": "<p>canonical</p>",
        "id": 202621536,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1593636091
    },
    {
        "content": "<p>Thanks! And for <code>target.params</code> should the criteria for lookup only include params e.g. <code>gender=female</code> or the entire query such as <code>Patient?gender=female</code>. ResourceType is coded elsewhere in the structure, but having the full query seems to be more consistent with other parts of the spec.</p>",
        "id": 203214647,
        "sender_full_name": "Tiffany Wong",
        "timestamp": 1594163579
    }
]