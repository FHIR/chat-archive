[
    {
        "content": "<p>I have a profile on Observation and want to constrain a property of <code>specimen</code> (more specifically, make <code>specimen.type</code> \"must support\"). To do this, I would have to \"unroll\" or \"drill down into\" the <code>Specimen</code> type within the <code>Observation</code> profile. <code>Observation.specimen</code>, however, is a <code>Reference</code>. There is conflicting information on Zulip about whether or not drilling into a reference is valid.</p>",
        "id": 161861292,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1553695093
    },
    {
        "content": "<p>For example, <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  says it is not valid:</p>\n<blockquote>\n<p>A profile can assert a target profile for a reference - which would in turn restrict the referenced artifact. However, a profile can't \"drill down\" into the content of a referenced resource the way it can drill into the components of a data type.</p>\n</blockquote>\n<p><a href=\"#narrow/stream/179166-implementers/topic/Profiling/near/153869408\" title=\"#narrow/stream/179166-implementers/topic/Profiling/near/153869408\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Profiling/near/153869408</a></p>",
        "id": 161861379,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1553695170
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> seems to say it is, and that Forge supports it:</p>\n<blockquote>\n<p>Alternatively, a custom profile can specify inline constraints on referenced external type/resource profiles. For example, your custom profile could further constrain an element with (default) datatype Range by limiting the low/high values.</p>\n</blockquote>\n<p><a href=\"#narrow/stream/179166-implementers/topic/constraining.20referenced.20official.20profiles.20in.20custom.20profiles/near/154024068\" title=\"#narrow/stream/179166-implementers/topic/constraining.20referenced.20official.20profiles.20in.20custom.20profiles/near/154024068\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/constraining.20referenced.20official.20profiles.20in.20custom.20profiles/near/154024068</a></p>",
        "id": 161861509,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1553695240
    },
    {
        "content": "<p>Nevermind!  Upon reading it again, I see that <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> was using the word \"referenced\" in a more general way -- he was <em>not</em> talking about actual FHIR references (as <code>Range</code> is <em>not</em> a reference in <code>Observation</code>).</p>\n<p>So I will assume that it is not valid, as Lloyd clearly indicated in his previous comment.  Thanks!</p>",
        "id": 161861810,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1553695432
    },
    {
        "content": "<p>My earlier comments applied to constraints on regular datatypes (such as Range).<br>\nA referencing profile can further constrain a ResourceReference and it's child nodes, but not the referenced target profile, as this is not \"inlined\" in the referencing profile. Alternatively, you can specify FHIR Path constraints on the reference target using the \"resolve\" operator.</p>",
        "id": 161862177,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1553695636
    },
    {
        "content": "<p>Note that not all FHIR servers will implement support for such complex constraints.</p>",
        "id": 161862441,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1553695818
    },
    {
        "content": "<p>Thanks for the confirmation <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> -- and sorry for initially misunderstanding your earlier comment.  Eventually I figured it out! ;-)</p>",
        "id": 161866364,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1553698184
    },
    {
        "content": "<p>Just reference  a  Specimen profile that requires the code</p>",
        "id": 161867748,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553698901
    },
    {
        "content": "<p>You can assert a targetProfile for the Reference or you can define a constraint that makes use of resolve().  Those are the only ways to influence what a Reference points to.</p>",
        "id": 161871478,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553700935
    },
    {
        "content": "<p>Thanks everyone!  I'm not sure I want to create an entire profile on <code>Specimen</code> just to say that <code>type</code> is <code>must support</code> in this one use case for this one profile on <code>Observation</code>.  And using a FHIRPath invariant to flag something as <code>must support</code> feels weird (and I'm not sure it's even possible since \"must support\" doesn't come through in instance data).  But at least I know my options!  Thanks again.</p>",
        "id": 161877401,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1553704752
    },
    {
        "content": "<p>True.  I missed the \"mustSupport\" bit.  There's no way to do that with a constraint.  Your only choice around \"mustSupport\" is creating a profile or adding some other textual verbiage in the spec.  (And based on proposed tightening of the rules for IGs, just verbiage in the spec might not cut it.)</p>",
        "id": 161878885,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553705781
    },
    {
        "content": "<p>Creating a profile that just flags one element as mustSupport is actually pretty light work though...</p>",
        "id": 161878913,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553705804
    }
]