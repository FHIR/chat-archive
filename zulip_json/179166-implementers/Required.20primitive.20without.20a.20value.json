[
    {
        "content": "<p>It is possible for FHIR primitive element to not have any value (but only extensions). One example would ElementDefinition.type.code, which is required, but in StructureDefinitions for primitive types themselves their \".value\" field doesn't have any code.</p>\n<p>I find this feature a bit confusing because it means that \"type\" of primitive value could be something completely different (value is empty and extension gives value of some other type) and \"required value\" is not really required (because value could be empty).</p>\n<p>What was a rationale of that decision and in particular, why \".value\" part of primitive is optional? How often this is expected to happen?</p>",
        "id": 154024737,
        "sender_full_name": "Ivan Dubrov",
        "timestamp": 1544601375
    },
    {
        "content": "<p>Note that this behavior is formally defined by fundamental invariant \"ele-1\", which applies to all elements:<br>\n<a href=\"http://hl7.org/fhir/element.html#definition\" target=\"_blank\" title=\"http://hl7.org/fhir/element.html#definition\">http://hl7.org/fhir/element.html#definition</a></p>",
        "id": 154024743,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1544606853
    },
    {
        "content": "<p>In general, almost all elements in core FHIR resources and datatypes are optional (Min = 0), to cover widely varying use cases. For a specific implementation, you can create profiles that define additional constraints and remove some of the default optionality.</p>",
        "id": 154024744,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1544607149
    },
    {
        "content": "<p>it doesn't happen much. But it can happen on any type</p>",
        "id": 154024745,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1544607712
    },
    {
        "content": "<p>As an example, someone might extend Patient.birthDate to have a string that says \"summer of either 1931 or 1932\".  If you want to check for the existence of a value, you always need to check for the presence of the value, not just the element</p>",
        "id": 154024802,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1544627219
    },
    {
        "content": "<p>Right. It basically creates three possible cases:<br>\n1. There is a primitive \"element\" and the value, too (happy case)<br>\n2. There are no primitive \"element\" (nothing case)<br>\n3. There are a primitive \"element\", but no value, only extensions (exciting case)</p>\n<p>In my current internal API, #3 have to be explicitly handled, which is kind of painful (because it's a very uncommon case). I guess, I can interpret it as #2, although it is not the same (the value IS there, you just don't know how to interpret it...)</p>",
        "id": 154024901,
        "sender_full_name": "Ivan Dubrov",
        "timestamp": 1544635596
    },
    {
        "content": "<p>yes</p>",
        "id": 154024940,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1544645091
    },
    {
        "content": "<p>I think it's useful in this context to add that if the element is of a coded type and the cardinality is 1..  and the type of binding is \"required\", there must be a code.</p>",
        "id": 154026048,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1545126490
    }
]