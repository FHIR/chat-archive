[
    {
        "content": "<p>Hi just spotted the mismatch between how a DSTU2 Bundle is built in JSON vs XML. It would seem that the JSON structure doesn't match the UML or the Structure views? Is this intentional, is there a reason for it?  The key difference I'm struggling with is the difference between /Bundle/entry/resource[array] and /Bundle/entry[array]/resource</p>",
        "id": 153872835,
        "sender_full_name": "Tim Coates",
        "timestamp": 1487603892
    },
    {
        "content": "<p>The difference is the presence in XML of the wrapper element- json follows the logical model more closely</p>",
        "id": 153872849,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1487611069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192325\">@Tim Coates</span> Can you submit a change proposal?</p>",
        "id": 153872858,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1487617193
    },
    {
        "content": "<p>What change?</p>",
        "id": 153872865,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1487625488
    },
    {
        "content": "<p>Sorry, wrong thread.</p>",
        "id": 153872871,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1487632888
    },
    {
        "content": "<p>Really? (Looking at DSTU) The tree view shows in the entry element it has 0..1 resource child elements. XML does this, but JSON has one entry, with an array of resources (and hence IMHO does not follow the logical model). Either serialisation format could implement either approach, the fact they're different is what trips me up.</p>",
        "id": 153873020,
        "sender_full_name": "Tim Coates",
        "timestamp": 1487754480
    },
    {
        "content": "<p>DomainResource, contained is 0..* resource. </p>\n<p>So the json representation is an array of resources. <br>\nThe xml representation is a repeating element 'contained' that each contains a resource </p>",
        "id": 153873273,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1487962921
    },
    {
        "content": "<p>the special thing is that XML has an extra element in there for the resource root element that json doesn't. It's xml that varies from repreesneting the logical model directly</p>",
        "id": 153873274,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1487962954
    },
    {
        "content": "<p>It's the json entry having multiple resources that caused us a problem. According to <a href=\"https://www.hl7.org/fhir/bundle.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/bundle.html\">https://www.hl7.org/fhir/bundle.html</a> Bundle.entry has 0..1 resources, but in the json serialisation that's not the case. We can work with it, just seems an unnecessary variation.</p>",
        "id": 153873521,
        "sender_full_name": "Tim Coates",
        "timestamp": 1488105250
    },
    {
        "content": "<p>where in the json serialisation is that not the case?</p>",
        "id": 153873522,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1488105534
    },
    {
        "content": "<p>So when I retrieve (using HAPI client code) a Bundle from our server in XML, and serialise it as XML, I see a sequence of 'entry' objects each holding one 'resource': </p>\n<p>&lt;type value=\"searchset\"/&gt;<br>\n&lt;total value=\"4\"/&gt;<br>\n&lt;entry&gt;<br>\n  &lt;resource&gt;<br>\n    &lt;DocumentReference xmlns=\"<a href=\"http://hl7.org/fhir\" target=\"_blank\" title=\"http://hl7.org/fhir\">http://hl7.org/fhir</a>\"&gt;<br>\n  &lt;/resource&gt;<br>\n&lt;/entry&gt;<br>\n&lt;entry&gt;<br>\n  &lt;resource&gt;<br>\n    &lt;DocumentReference xmlns=\"<a href=\"http://hl7.org/fhir\" target=\"_blank\" title=\"http://hl7.org/fhir\">http://hl7.org/fhir</a>\"&gt;<br>\n  &lt;/resource&gt;<br>\n&lt;/entry&gt;<br>\n&lt;entry&gt;<br>\n  &lt;resource&gt;<br>\n    &lt;DocumentReference xmlns=\"<a href=\"http://hl7.org/fhir\" target=\"_blank\" title=\"http://hl7.org/fhir\">http://hl7.org/fhir</a>\"&gt;<br>\n  &lt;/resource&gt;<br>\n&lt;/entry&gt;<br>\n&lt;entry&gt;<br>\n  &lt;resource&gt;<br>\n    &lt;DocumentReference xmlns=\"<a href=\"http://hl7.org/fhir\" target=\"_blank\" title=\"http://hl7.org/fhir\">http://hl7.org/fhir</a>\"&gt;<br>\n  &lt;/resource&gt;<br>\n&lt;/entry&gt;</p>\n<p>But when I serialise that same Bundle to JSON it's one 'entry' which has an array of 'resource' elements: <br>\n\"type\": \"searchset\",<br>\n\"total\": 4,<br>\n\"entry\": [<br>\n  {<br>\n    \"resource\": {<br>\n      \"resourceType\": \"DocumentReference\",<br>\n    }<br>\n  },<br>\n  {<br>\n    \"resource\": {<br>\n      \"resourceType\": \"DocumentReference\",<br>\n    }<br>\n  },<br>\n  {<br>\n    \"resource\": {<br>\n      \"resourceType\": \"DocumentReference\",<br>\n    }<br>\n  },<br>\n  {<br>\n    \"resource\": {<br>\n      \"resourceType\": \"DocumentReference\",<br>\n    }<br>\n  }<br>\n]</p>",
        "id": 153873781,
        "sender_full_name": "Tim Coates",
        "timestamp": 1488193076
    },
    {
        "content": "<p>Yes, that's expected and that's usually how array serialization between XML and JSON differs. Each <code>&lt;entry&gt;...&lt;/entry&gt;</code> is one entry in XML, and each <code>{...}</code> in \"entry\" is one entry in JSON. Does this make sense?</p>",
        "id": 153873783,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1488193308
    },
    {
        "content": "<p>I can follow how it 'is' implemented and we can work around it, but I don't understand 'why' they differ. I'd have thought either serialisation could easily implement either approach, and ideally they'd take the same approach.</p>",
        "id": 153873785,
        "sender_full_name": "Tim Coates",
        "timestamp": 1488193576
    },
    {
        "content": "<p>no. JSON forces there to be a difference from XML. you cannot repeat named properties in json, and you cannot do json arrays in xml</p>",
        "id": 153873786,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1488193645
    }
]