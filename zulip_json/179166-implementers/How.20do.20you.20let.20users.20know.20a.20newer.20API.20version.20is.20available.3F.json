[
    {
        "content": "<p>It seems there is no such prop in the object of observation</p>\n<p>Ty</p>",
        "id": 218251148,
        "sender_full_name": "lychenus",
        "timestamp": 1606715473
    },
    {
        "content": "<p>if we did that, it would be in the CapabilityStatement. I recall some discussion about that, but not where we landed.</p>",
        "id": 218251234,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1606715587
    },
    {
        "content": "<p>lol its confusing too bad. lets say if you had a small mistake in the API we pull from the current database (which should be fairly common, and lets say such that the FHIR server does not act like a internet forum where people write and read, instead we transform some existing data into FHIR) and you want to correct that, not sure how to tell the users everywhere. and it seems there is not much available as i read in <a href=\"https://www.hl7.org/fhir/capabilitystatement.html\">https://www.hl7.org/fhir/capabilitystatement.html</a></p>\n<p>i do not know what people do on the other hand with the READ side, but if the JSON keep changing from time to time and there is no easy way to let users know, that could be annoying?</p>",
        "id": 218714081,
        "sender_full_name": "lychenus",
        "timestamp": 1607011228
    },
    {
        "content": "<p>If the server generates valid FHIR the client should not notice the difference-  they will see more or less data but they should be able to handle that</p>",
        "id": 218715349,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1607011707
    },
    {
        "content": "<p>I think you should consider Provenance</p>",
        "id": 218715731,
        "sender_full_name": "Eric Haas",
        "timestamp": 1607011871
    },
    {
        "content": "<p>API versioning is something we've struggled with.  Fixing bugs or making changes without breaking backwards compatibility is hard.  Most of the fixes or changes I'm talking about are valid FHIR both before and after, but you still get different content, and if apps were developed to expect one (valid FHIR) thing and we change it to another (valid FHIR) thing,  stuff can break, and we have seen apps break in PRD.   We don't have a great solution yet, but one option we've considered is an HTTP header that lets a client specify which API version they want (and if the header is omitted, they get the most recent version).  A few years ago we talked about this, and whether there should be a standard versioning header, but I don't think it got any traction.</p>",
        "id": 218720435,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607013676
    },
    {
        "content": "<p>everyone should be aware of the RISK they take on when they chose to deploy non-normative content. And everyone wanting to use something that is currently non-normative should do what ever they can to help move it to normative. This problem is mostly solved by the governance behind normative.</p>",
        "id": 218721680,
        "sender_full_name": "John Moehrke",
        "timestamp": 1607014206
    },
    {
        "content": "<p>The issues we have isn't about normative vs. non-normative.  It could be fully normative and still have breaking changes in the content that is not related to the FHIR-compliance.</p>",
        "id": 218722596,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607014571
    },
    {
        "content": "<p>There are two different \"versions\" at play:  1) the FHIR version (R4 vs. STU3) and 2) the API version.</p>",
        "id": 218722693,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607014620
    },
    {
        "content": "<p>not true. HL7 governance around normative content is that it MUST NOT have breaking changes. So, yes it is a normative vs people choosing to use unstable specifications.</p>",
        "id": 218722904,
        "sender_full_name": "John Moehrke",
        "timestamp": 1607014711
    },
    {
        "content": "<p>We are talking (or I am, and I think the OP is) about breaking changes in the implementation of the API, not in the FHIR spec.</p>",
        "id": 218722994,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607014755
    },
    {
        "content": "<p>For example, we had an issue with our implementation of DocRef where we were returning a date in DocRef.created when it should have been in DocRef.indexed.  We deployed a fix, removing support for DocRef.created, and moving our date to DocRef.indexed.    We had an app that was relying on DocRef.created, and didn't know to move over to looking at DocRef.indexed instead.</p>",
        "id": 218723256,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607014853
    },
    {
        "content": "<p>This was DSTU2, but the same sort of issue could (and will, and has) exist in normative R4 resources.</p>",
        "id": 218724112,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607015190
    },
    {
        "content": "<p>In fact, for R4 Patient (which is normative), we had a change where we added support for preferred names.  Initially, the patient name was sent in <a href=\"http://Patient.name\">Patient.name</a> with use=usual.  Then we broke out legal and preferred names, and started sending two names, the legal name with use=official and the preferred name with use=usual.   Any system that was using patient name for matching, or that was expecting the name they get in use=usual to match some external name like from a wristband or paper form might need to update their app to now pull from the use=official name instead of use=usual.  This was a breaking change in the <em>implementation</em> of the FHIR spec, not in the FHIR spec itself..</p>",
        "id": 218724783,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607015475
    },
    {
        "content": "<p>I would call those things changes in the Profile. The profiles supported by the API are (can be) declared in the CapabilityStatement. Thus you could have indicated over time the change from one Profile (version) to another Profile (version).</p>",
        "id": 218726244,
        "sender_full_name": "John Moehrke",
        "timestamp": 1607016079
    },
    {
        "content": "<p>Does that mean that FHIR servers should be spawning dozens or hundreds of different sub-profiles?  Like:  \"US Core Patient Epic Implemenation v1\", \"US Core Patient Epic Implemenation v2\", \"US Core Patient Epic Implemenation v3\", etc.?</p>",
        "id": 218726710,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607016301
    },
    {
        "content": "<p>Like ever time you deploy an implementation fix you need to spawn a new profile?  That doesn't seem like a good solution to me.</p>",
        "id": 218726917,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607016389
    },
    {
        "content": "<p>And all of those profiles would be specific to that particular vendor.</p>",
        "id": 218727151,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607016499
    },
    {
        "content": "<p>Gross :(.</p>",
        "id": 218727160,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607016504
    },
    {
        "content": "<p>people do make mistake and they fix.</p>\n<p>mistakes aside, there are a lot of things that are different,</p>\n<p>feet vs meters (imperial units vs SI units)<br>\nAsian BMI obesity boundary vs everyone else BMI obesity boundary<br>\nmmol/L and mg/dL unit changes in glucose level</p>\n<p>lets say, there  is an local legislation or a new global guideline that makes you change things in your API. how do you inform your users to update their own app? let alone some silly mistakes that gone unnoticed for years? and/or without eventually keeping a lot of API versions?</p>\n<p>in my field sleep, there are different cults of people who use different parameters to track things, and those guidelines keep changing. (and they fight pretty often too)</p>\n<p>this looked hypothetical,  but i think it is very possible, and depending on how the  FHIR service is structured.</p>",
        "id": 218727910,
        "sender_full_name": "lychenus",
        "timestamp": 1607016883
    },
    {
        "content": "<p>Yeah - I agree, there are a ton of different reasons an API implementation can change that has nothing to do with what is defined in the profile or the FHIR standard.  None of those are changes from a standards perspective, but they are changes that a client app may care about.</p>",
        "id": 218728246,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607017062
    },
    {
        "content": "<p>The question is whether that notification and versioning is something that should be solved in the FHIR standard, or if each implementation should come up with their own solution.  A standard solution would be awesome, but addressing that sort of operational management is outside the scope of what HL7 normally handles.</p>",
        "id": 218728394,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607017136
    },
    {
        "content": "<p>Can't these sorts of things be handled with CapabilityStatement.software.version? (Well, at least for systems that receive the modified resources directly.)</p>",
        "id": 218737977,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1607021619
    },
    {
        "content": "<p>There issues with using CapabilityStatement is that most folks use version as a place for major release indicators (like v.1.2.1).  The sort of change we'd need to track is more like git commit hash or something.  And at least for us, those \"commit hash\" style versions are not necessarily sequential, so it would really need to be a full list of the installed patches.  And it also doesn't enable using an old version (unless we publish dozens/hundreds of endpoint with different CapStatements).</p>",
        "id": 218746605,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607025620
    },
    {
        "content": "<p>I'm interested in hearing from <span class=\"user-mention\" data-user-id=\"364778\">@lychenus</span> , since I've sort of been projecting my problems on his question.  Are we interpreting his issue/question correctly?</p>",
        "id": 218746708,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607025669
    },
    {
        "content": "<p>I do think that you're talking about slightly different issues. You're talking about how to indicate that a new version of the API has been deployed, he's asking how to indicate that there's a new version somewhere else.</p>",
        "id": 218754796,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1607029749
    },
    {
        "content": "<p>generally, this is a poisoned chalice; you can insist that everyone checks the version, and then every deploy is a drawn out nightmare because you can't get everyone lined up. Else you tell Apps about it changes, and then they ignore it; at least you can blame the apps in this case.</p>",
        "id": 218754955,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1607029827
    },
    {
        "content": "<p>seems to me that the natural HTTP way to do this would be to use the server software header with a version, but it's also pretty loose as well.</p>",
        "id": 218755037,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1607029868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span> I would think that the patch version of software is specifically for rolling the API over.</p>",
        "id": 218755066,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1607029891
    },
    {
        "content": "<p>Ultimately, <a href=\"https://en.wikipedia.org/wiki/Robustness_principle\">The Robustness Principle</a>will need to be applied by clients in any large health information exchange eco-system in which low-level data variations of the kind described by <span class=\"user-mention\" data-user-id=\"364778\">@lychenus</span>  are bound to occur. We see this all the time in NZ when on-boarding new applications to national systems or from new users of existing products.</p>",
        "id": 218764749,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1607034969
    },
    {
        "content": "<p>yes, i guess its slightly different issues but the solution should be the same. now before it is defined somewhere (or if the conclusion is that there wouldn't be any definition, you-do-your-thing), there would be a \"look-at-the-new-ver\" thing somewhere.</p>",
        "id": 218797143,
        "sender_full_name": "lychenus",
        "timestamp": 1607061740
    },
    {
        "content": "<p>Seconding Peter: it is true that there can be changes in a FHIR implementation that break clients, but only if the clients were brittle to begin with: the variations that Cooper describe are all within what US Core allows, so a client for US Core should be able to handle them without having to version end point. (and same for every other possible profile / implementation guide / just base specs). <br>\nSo <span class=\"user-mention\" data-user-id=\"364778\">@lychenus</span>  instead of trying to version thing I'd tell clients 'server implement FHIR version x with these profiles' and leave it at that - and they have to be robust to all variations within those profiles.</p>",
        "id": 218844060,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1607094466
    },
    {
        "content": "<p>I don't think the issue is that client aren't brittle (due to poor design) or not robust.  The issue is that some applications just need very specific data, and need to program for it, and if the EHR moves that data around, then app needs to know about the movement.    If your app is simple and just pulls data and displays it to end users, you can be very general.  But if you have an infection control system that cares very specifically about the details of the isolates, methods, and sensitivities of a culture, you do really have to pay close attention to the structure and content of the FHIR resources, and even small changes may need review and re-testing.</p>",
        "id": 219084269,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607350491
    }
]