[
    {
        "content": "<p>Hi,<br>\nI have a scenario where the Encounter.reasonReference references many Observation, the Task.encounter references  the Encounter and the <br>\nTask.owner is either a reference to an Organization or a PractitionerRole. </p>\n<p>What I'm trying to do is get all observations of tasks owned by an organization or by an practitioner role who is part of that organization.<br>\nFor example lets say we have 2 tasks, one owned by Organization Organization/5678 and another owned by PractitionerRole/1234 who is part of Organization/5678. The 2 tasks reference 2 different encounters and each Encounter references a different observation.</p>\n<p>This 2 queries work and will return one of the 2 tasks each:</p>\n<ul>\n<li>Task?owner=Organization/5678 - will return the task owned by the organization</li>\n<li>Task?owner.organization=Organization/5678 - will return the task owned by the practitioner role</li>\n</ul>\n<p>With this I would expect that the next 2 queries to return different observations. Instead they return the same one observation, the one linked to the task owned by the organization:</p>\n<ul>\n<li>Observation?_has:Encounter:reason-reference:_has:Task:encounter:owner=Organization/5678 - returns observation of task owned by the organization</li>\n<li>Observation?_has:Encounter:reason-reference:_has:Task:encounter:owner.organization=Organization/5678 - returns observation of task owned by the organization. Was expecting the other one.</li>\n</ul>\n<p>Any idea what's wrong here? Maybe I'm are hitting some limitation I'm are not aware of? </p>\n<p>I have also tried making the Observation reference an Encounter in Observation.encounter and use this queries:</p>\n<ul>\n<li>Observation?encounter._has:Task:encounter:owner=Organization/5678 - works and returns the task owned by the organization</li>\n<li>Observation?encounter._has:Task:encounter:owner.organization=Organization/5678- fails with \"Invalid parameter chain: encounter._has:Task:encounter:owner.organization\"</li>\n</ul>\n<p>So again something about inspecting the owner.organization property seams to not work. I was hoping that by not using an nested revers chain things would be different :)</p>\n<p>My question is can I fix this in any way and if not is there a better way of achieving this without changing how things are referenced to much?</p>\n<p>Thank you.</p>",
        "id": 264267666,
        "sender_full_name": "Marius Moga",
        "timestamp": 1639037337
    },
    {
        "content": "<p>Have your tried Observation?encounter._has:Task:encounter:owner:PractitionerRole.organization=Organization/5678 ? If the owner of the Task is a reference to an Organization your search URL will fail, given that Organization doesn't have an 'organization' reference/search parameter.</p>",
        "id": 264270560,
        "sender_full_name": "Ren√© Spronk",
        "timestamp": 1639039451
    },
    {
        "content": "<p>Yes I did try this queries: </p>\n<ul>\n<li>Observation?encounter._has:Task:encounter:owner:PractitionerRole.organization=Organization/5678 - fails with \"Invalid parameter chain: encounter._has:Task:encounter:owner:PractitionerRole.organization\"</li>\n<li>Observation?_has:Encounter:reason-reference:_has:Task:encounter:owner:PractitionerRole.organization=Organization/5678  - fails with \"Unknown parameter name: Task:owner:PractitionerRole\"</li>\n</ul>\n<p>I have tried something like this on other occasions as well and could never specify the type in a reverse chain even in simpler scenarios like:</p>\n<ul>\n<li>Encounter?_has:Task:encounter:owner:PractitionerRole.organization=Organization/5678  - fails with \"Unknown parameter name: Task:owner:PractitionerRole.organization\"</li>\n</ul>\n<p>I have tested all of this with HAPI FHIR  v5.4.1 and v5.6.0 (FHIR R4 on both versions).</p>",
        "id": 264280976,
        "sender_full_name": "Marius Moga",
        "timestamp": 1639045495
    }
]