[
    {
        "content": "<p>I have committed a draft JSON schema for all resources and data types. I haven't tested it - the java options for enforcing JSON schema don't seem very attractive - one requires Java 1.8, and one it not maintained. I'm open to suggestions for testing the JSON schemas as part of the build</p>",
        "id": 153828897,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463793247
    },
    {
        "content": "<p>Is requiring Java 1.8 a problem?</p>",
        "id": 153829114,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463931326
    },
    {
        "content": "<p>1.7 hasn't had any security updates for about a year now</p>",
        "id": 153829136,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1463956347
    },
    {
        "content": "<p>Don't know. I'm pretty conservative about this. Past experience is that if I make the build dependent on a new version of java, it's going to create heaps of work for me</p>",
        "id": 153829147,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1463965250
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  some notes about JSON schema  coming with FHIR build:</p>\n<ul>\n<li>Separate schemata is generated for nested elements (like Patient_Link etc), but JSON schema support nested declarations, which is more idiomatic.   </li>\n<li>Using \"oneOf\" for validating Bundle and/or contained resources is slightly wrong semantically, we use JSON schema extension from Swagger - \"descriminator\" (<a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#fixed-fields-13\" target=\"_blank\" title=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#fixed-fields-13\">https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#fixed-fields-13</a>) . </li>\n<li>We also were able to extend JSON schema to support validation of  ValueSets and Referential integrity.  <br>\nSuch extensions is quite simple and we could extend popular JSON schema engines for them.</li>\n</ul>\n<p>In aidbox we would  like to provide  Swagger API to FHIR server  and would like to actively collaborate on JSON schema and Swagger support in FHIR (let's discuss it in Amsterdam :)</p>",
        "id": 153855636,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1478429209
    },
    {
        "content": "<p>ok sure let's talk about that in DevDays</p>",
        "id": 153855637,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478429441
    },
    {
        "content": "<p>Hey all. We're currently trying to use schema.json files to provide the validation for our content. I'm running into errors related to looping schemas. </p>\n<p>fatal: validation loop: schema \"file:/home/.../definitions/DomainResource.schema.json#/definitions/DomainResource/allOf/0\" visited twice for pointer \"/contained/0\" of validated instance</p>\n<p>The error is thrown by anything with a \"contained\" non-empty array</p>",
        "id": 153864465,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1482285648
    },
    {
        "content": "<p>e.g. everything. In which case, you need the single json schema fhir.schema.json</p>",
        "id": 153864467,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482286746
    },
    {
        "content": "<p>I'm not sure I understand how this would help. It seems to me that this would still lead to some recursive validation.</p>",
        "id": 153864472,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1482289813
    },
    {
        "content": "<p>typically, this is a problem because there's a library trying to resolve all the library references before starting to do type based reasoning. </p>",
        "id": 153864473,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482290162
    },
    {
        "content": "<p>there's not much likelihood of running into a schema library that doesn't allow types to reference each other</p>",
        "id": 153864474,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482290213
    },
    {
        "content": "<p>But for the that do try to resolve references first then this would not work...?</p>",
        "id": 153864476,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1482290316
    },
    {
        "content": "<p>that's why there's a single schema that contains everything - for those tools. </p>",
        "id": 153864477,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482290495
    },
    {
        "content": "<p>Hi! I downloaded the STU3 JSON Schema files so that I can validate a QuestionnaireResponse in a Node backend service. (I use the ajv module for the validation.) It seems that the schema files use an inconsistent referencing method. Each resource id is of the form \"<a href=\"http://hl7.org/fhir/json-schema/SomeResource\" target=\"_blank\" title=\"http://hl7.org/fhir/json-schema/SomeResource\">http://hl7.org/fhir/json-schema/SomeResource</a>\" but when referencing resources with \"$ref\" the schema files use \"SomeResource.schema.json#/definitions/SomeResource\". I had a chat with the ajv package maintainer and this is apparently not valid JSON Schema. Either the id should end with \"SomeResource.schema.json\" or the $ref should use \"SomeResource#/definitions/...\". As things stand now, ajv can't follow the references unless a custom mapping is provided to \"rename\" the id.</p>",
        "id": 153884824,
        "sender_full_name": "Ville Lindholm",
        "timestamp": 1492240482
    },
    {
        "content": "<p>SomeResource.schema.json is also the file name, but JSON Schema references don't really know about file names apparently.</p>",
        "id": 153884825,
        "sender_full_name": "Ville Lindholm",
        "timestamp": 1492240542
    },
    {
        "content": "<p>I thought about providing  patch for this but couldn't find the schema files in SVN :D</p>",
        "id": 153884826,
        "sender_full_name": "Ville Lindholm",
        "timestamp": 1492240705
    },
    {
        "content": "<p>Oh, and as a mini bug report, the stu3 home page link to this chat actually links to \"<a href=\"http://char.fhir.org\" target=\"_blank\" title=\"http://char.fhir.org\">char.fhir.org</a>\" ;)</p>",
        "id": 153884827,
        "sender_full_name": "Ville Lindholm",
        "timestamp": 1492240768
    },
    {
        "content": "<p>thx. can you createa a gForge task for this - see <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemBrowse&amp;tracker_id=677\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemBrowse&amp;tracker_id=677\">http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemBrowse&amp;tracker_id=677</a></p>",
        "id": 153884838,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1492288028
    },
    {
        "content": "<p>and which schema are you using? the single schema file, or the per-resource schema?</p>",
        "id": 153884839,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1492288070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193725\">@Ville Lindholm</span> - can you put me in contact with the author of the tool? thanks</p>",
        "id": 153884876,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1492378779
    },
    {
        "content": "<p>and also try this set of json schema:</p>",
        "id": 153884878,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1492378993
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/LgjiiS-0VnNoBo1QigGaXQuL/fhir.schema.json.zip\" target=\"_blank\" title=\"fhir.schema.json.zip\">fhir.schema.json.zip</a> </p>",
        "id": 153884879,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1492379462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Sure, the ajv project has a chat similar to this one on gitter: <a href=\"https://gitter.im/ajv-validator/ajv\" target=\"_blank\" title=\"https://gitter.im/ajv-validator/ajv\">https://gitter.im/ajv-validator/ajv</a> and the person I spoke to was epoberezkin. The new schema package you provided looks like it should work!</p>",
        "id": 153884896,
        "sender_full_name": "Ville Lindholm",
        "timestamp": 1492419645
    },
    {
        "content": "<p>I was using the per-resource schemas to optimize things a bit</p>",
        "id": 153884897,
        "sender_full_name": "Ville Lindholm",
        "timestamp": 1492419709
    },
    {
        "content": "<p>So to summarize, dropping .schema.json from refs is the quickest fix. If you want to host the files so that the URIs become actual downloadable files the filenames should also drop the .schema.json extension OR the web server should map Element -&gt; Element.schema.json</p>",
        "id": 153884900,
        "sender_full_name": "Ville Lindholm",
        "timestamp": 1492423538
    },
    {
        "content": "<p>i.e. the zip file above works</p>",
        "id": 153884901,
        "sender_full_name": "Ville Lindholm",
        "timestamp": 1492423565
    },
    {
        "content": "<p>but tools that automatically resolve the ID with HTTP won't get the file at the moment</p>",
        "id": 153884902,
        "sender_full_name": "Ville Lindholm",
        "timestamp": 1492423617
    },
    {
        "content": "<p>Perhaps I should generate the schema twice with both sorts of references?</p>",
        "id": 153884929,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1492463741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193725\">@Ville Lindholm</span> - I have updated all the redirections on the web site for JSON schema. Interested to know if I've fixed it any. But generally, the JSON schema problem looks intractable to me - $ref is critical to any JSON scheam for FHIR, and the tools are all over the place on it</p>",
        "id": 153895410,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1498653790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> -- Im currently working on a tool that'd make use of these json schemas taken from the downloads page. Are these kept up to date automatically? Is there a better source? </p>\n<p>Just as a note, since the link does not offer any sort of cache related headers I'll probably have to download the zip every time and maybe use the hash to check whether I already have the latest ones. Any advise is appreciated.</p>",
        "id": 153924393,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1513035474
    },
    {
        "content": "<p>those are the best, and they are generated on the fly. What kind of cache related headers are you talking about? (that's a standard IIS server there)</p>",
        "id": 153924417,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1513057503
    },
    {
        "content": "<p>I ask because the files within the zip are dated to April of this year. And some ETag functionality would be great, if we'd send an If-None-Match and get a 304 if we already have the latest zip then we wouldn't download the file again.</p>",
        "id": 153924530,
        "sender_full_name": "Jose Montoya",
        "timestamp": 1513095386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span></p>",
        "id": 153931584,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517096726
    },
    {
        "content": "<p>Here is discriminator from latest OpenAPI - <a href=\"https://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/\" target=\"_blank\" title=\"https://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/\">https://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/</a></p>",
        "id": 153931635,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1517109499
    },
    {
        "content": "<p><a href=\"https://swagger.io/specification/#discriminatorObject\" target=\"_blank\" title=\"https://swagger.io/specification/#discriminatorObject\">https://swagger.io/specification/#discriminatorObject</a></p>",
        "id": 153931636,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1517109604
    },
    {
        "content": "<p>One of the reasons we are having problems with json schema is because the Java json schema validator doesn't seem to be very conformant. So I'm going to try changing the json schema validation library that we're using in the build to check the json schema. The question is, what library? It needs to be able to run from java code, and needs to run without extensive set up requirements on windows, mac, linux.</p>",
        "id": 153984007,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1533786157
    },
    {
        "content": "<p>the other question is: I validate it by running every <em>valid</em> instance through the schema. But I don't have a library of invalid instances. But the candidate normative resources are stable enough to make it worth investing in that now - if any one wants to volunteer</p>",
        "id": 153984008,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1533786207
    },
    {
        "content": "<p>... back to this....</p>",
        "id": 153987261,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534381205
    },
    {
        "content": "<p>here's a json schema, a little test case derived from the fhir json schema:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;$schema&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://json-schema.org/draft-06/schema#&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://hl7.org/fhir/test-json-schema/3.4&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;description&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;for unit tests&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;discriminator&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;propertyName&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;resourceType&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;mapping&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;A&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/A&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;B&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/B&quot;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">&quot;oneOf&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/A&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/B&quot;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">&quot;definitions&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;boolean&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;pattern&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;^true|false$&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;boolean&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;pattern&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;^[A-Za-z0-9\\\\-\\\\.]{1,64}$&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;string&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&quot;integer&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;pattern&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;^-?([0]|([1-9][0-9]*))$&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;number&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&quot;string&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;pattern&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;^[ \\\\r\\\\n\\\\t\\\\S]+$&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;string&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&quot;Element&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;properties&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/string&quot;</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n      <span class=\"nt\">&quot;additionalProperties&quot;</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&quot;Coding&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;properties&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/string&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;system&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/string&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;version&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/string&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;code&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/string&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;display&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/string&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;userSelected&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/boolean&quot;</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n      <span class=\"nt\">&quot;additionalProperties&quot;</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&quot;A&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;properties&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;resourceType&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;const&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;A&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/id&quot;</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n      <span class=\"nt\">&quot;required&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;resourceType&quot;</span>\n      <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&quot;B&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;properties&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;resourceType&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;const&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;B&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;code&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/id&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;string&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/string&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;integer&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/integer&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;boolean&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;$ref&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#/definitions/boolean&quot;</span>\n        <span class=\"p\">}</span>\n\n      <span class=\"p\">},</span>\n      <span class=\"nt\">&quot;additionalProperties&quot;</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;required&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;resourceType&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;code&quot;</span>\n      <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 153987262,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534381229
    },
    {
        "content": "<p>here's a little sample instance that's valid - I believe - against that schema:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;resourceType&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;A&quot;</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 153987263,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534381263
    },
    {
        "content": "<p>of the json schema engines I've tried, 3 of 6 think that's valid. ! of the 3 that failed at least reported that they don't support the 'const' keyword (guaranteed fail) but didn't comment on the schema version. the other 2 simply reported some variant of :</p>\n<div class=\"codehilite\"><pre><span></span>2 subschemas matched instead of one\n</pre></div>\n\n\n<p>.. indicating that they don't support one of the key words...</p>",
        "id": 153987264,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534381360
    },
    {
        "content": "<p>.... I really don't like JSON schema much....</p>",
        "id": 153987265,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534381386
    },
    {
        "content": "<p>the java engine is one that fails :-(</p>",
        "id": 153987266,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534381405
    },
    {
        "content": "<p><a href=\"https://github.com/everit-org/json-schema/issues/205\" target=\"_blank\" title=\"https://github.com/everit-org/json-schema/issues/205\">https://github.com/everit-org/json-schema/issues/205</a></p>",
        "id": 153987270,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534381734
    },
    {
        "content": "<p>I like the new flattened out JSON schema in a single file, but I noticed the _id property is no longer present. Is this intentional? Isn't _id needed to hold extensions to the id element?</p>",
        "id": 153991698,
        "sender_full_name": "Brian Lind",
        "timestamp": 1535576095
    },
    {
        "content": "<p>That property would be for the XML id attribute, and is a great question on extending the Id element in Json. Not sure if that's come up before.</p>\n<div class=\"codehilite\"><pre><span></span>&lt;Patient xmlns=&quot;http://hl7.org/fhir&quot;&gt;\n  &lt;id id=&quot;2&quot; value=&quot;5&quot;&gt;\n    &lt;extension url=&quot;ext-url&quot;&gt;\n      &lt;valueCode value=&quot;3&quot; /&gt;\n    &lt;/extension&gt;\n  &lt;/id&gt;\n</pre></div>\n\n\n<p>is represented in JSON as</p>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;resourceType&quot;: &quot;Patient&quot;,\n  &quot;id&quot;: &quot;5&quot;,\n  &quot;_id&quot;: {\n    &quot;id&quot;: &quot;2&quot;,\n    &quot;extension&quot;: [\n      {\n        &quot;url&quot;: &quot;ext-url&quot;,\n        &quot;valueCode&quot;: &quot;3&quot;\n      }\n    ]\n  },\n</pre></div>",
        "id": 153991747,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1535583446
    },
    {
        "content": "<p>my eyes are bleeding :(</p>",
        "id": 153991844,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1535620079
    },
    {
        "content": "<p>Here was a long discussion - <a href=\"#narrow/stream/4-implementers/topic/JSON.20Format.20for.20Primitives.20.26.20extensions\" title=\"#narrow/stream/4-implementers/topic/JSON.20Format.20for.20Primitives.20.26.20extensions\">https://chat.fhir.org/#narrow/stream/4-implementers/topic/JSON.20Format.20for.20Primitives.20.26.20extensions</a></p>",
        "id": 153991846,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1535620156
    },
    {
        "content": "<p>I looked through the long conversation, but still don't understand why \"_id\" existed in the 3.2.0 schema, but is not in the 3.3.0 schema.</p>",
        "id": 153991990,
        "sender_full_name": "Brian Lind",
        "timestamp": 1535656666
    },
    {
        "content": "<p>when would you use _id?</p>",
        "id": 153992074,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1535668933
    },
    {
        "content": "<p>I think Nicola is right about the reference</p>",
        "id": 153992075,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1535668948
    },
    {
        "content": "<p>we decided you can't extend the id, and so I didn't generate that</p>",
        "id": 153992076,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1535668965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  where in the spec is the decision that id can not have extensions written up? i don't see it here: <a href=\"http://build.fhir.org/id.profile.json.html\" target=\"_blank\" title=\"http://build.fhir.org/id.profile.json.html\">http://build.fhir.org/id.profile.json.html</a>, here <a href=\"http://build.fhir.org/element.profile.json.html\" target=\"_blank\" title=\"http://build.fhir.org/element.profile.json.html\">http://build.fhir.org/element.profile.json.html</a> or here <a href=\"http://build.fhir.org/resource.profile.json.html\" target=\"_blank\" title=\"http://build.fhir.org/resource.profile.json.html\">http://build.fhir.org/resource.profile.json.html</a> ?</p>",
        "id": 153992465,
        "sender_full_name": "Patrik Sundberg",
        "timestamp": 1535765281
    },
    {
        "content": "<p>it would appear that we don't say it anywhere</p>",
        "id": 153992608,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1535833933
    },
    {
        "content": "<p>Hello everyone,</p>",
        "id": 154017392,
        "sender_full_name": "Jim Taylor",
        "timestamp": 1541865635
    },
    {
        "content": "<p>Let's try this again. We are working to implement a FHIR product offering based on the HAPI FHIR specification. We are now focused on providing functionality for JSON resources. Can you please let me know if the FHIR community has established a best practice or policy regarding JSON validation? Is the plan to use JSON schemas?  Thank you, Jim</p>",
        "id": 154017393,
        "sender_full_name": "Jim Taylor",
        "timestamp": 1541865947
    },
    {
        "content": "<p>Best practice is to use the Java validator - it can test FHIRPath constraints, do terminology validation and other things that JSON schema (and XML schema + Schematron) can't do.  It also works for JSON, XML, RDF and any other syntaxes that might be supported going forward.</p>",
        "id": 154017394,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541868059
    },
    {
        "content": "<p>In aidbox we use json schema as a primary validation tool. There is official JSON schema (<a href=\"https://www.hl7.org/fhir/downloads.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/downloads.html\">https://www.hl7.org/fhir/downloads.html</a>). To do proper validation we extend  JSON schema with additional keys - for example to validate valueset's bindings or references).  If you interested - we can share our ideas and artefacts.</p>",
        "id": 154017440,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1541924686
    },
    {
        "content": "<p>And in the Meteor ecosystem, we've packaged up the JSON schemas that Nicola is referring to above, and tried to provide various validators, including SimpleSchema, simpl-schema, and Ajv.  We recently completed both DSTU2 and STU3 of the Argonaut resources, and should have an update for that package by the end of the year.  </p>\n<p><a href=\"https://www.npmjs.com/package/fhir-schemas\" target=\"_blank\" title=\"https://www.npmjs.com/package/fhir-schemas\">https://www.npmjs.com/package/fhir-schemas</a></p>",
        "id": 154017441,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1541925170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191678\">@Abigail Watson</span> curious: how do you keep this project synched with the evolving specs? Is it a manual process?</p>",
        "id": 154018647,
        "sender_full_name": "Mohammad Jafari",
        "timestamp": 1542243121
    },
    {
        "content": "<p>For the time being yes.  A few years from now, I thoroughly expect it to all get automated.  But until the patterns are sorted out for what is actually needed, it's all manual.</p>",
        "id": 154018648,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1542243271
    },
    {
        "content": "<p>Question about JSON schemas for each resource</p>",
        "id": 154057676,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1546203172
    },
    {
        "content": "<p>(see <a href=\"https://chat.fhir.org/#narrow/stream/179240-Announcements/subject/R4.20release.20is.20happening\" target=\"_blank\" title=\"https://chat.fhir.org/#narrow/stream/179240-Announcements/subject/R4.20release.20is.20happening\">https://chat.fhir.org/#narrow/stream/179240-Announcements/subject/R4.20release.20is.20happening</a>)</p>",
        "id": 154057681,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1546203194
    },
    {
        "content": "<p>The syntax for referring between schemas is not well supported by JSON schema tools. There's question about the relationship between the logical and literal URLs, and I couldn't get it working at all.</p>",
        "id": 154057725,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1546203264
    },
    {
        "content": "<p>Further, there's no tooling benefit to separating them, since any tools must resolve all of them.</p>",
        "id": 154057727,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1546203285
    },
    {
        "content": "<p>Given that, and the extreme difficulty that JSON schema represents, We only support a single schema</p>",
        "id": 154057736,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1546203315
    },
    {
        "content": "<p>Meaning that we only provide a schema for the \"current\" release of FHIR and abandon schemas for prior versions?</p>",
        "id": 154058486,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1546205009
    },
    {
        "content": "<p>I'm not sure what you mean by abandoning.</p>",
        "id": 154059655,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1546207489
    },
    {
        "content": "<p>The original query was about the disappearance of the JSON schemas at the STU3 endpoint.  You said that was intentional - by which I presume the intention is that right now we will only support a JSON schema for R4.  And presumably when R5 is published, we'll cease supporting the JSON schema for R4.  I'm confused why we need to do that for JSON when we don't do the same for XML.</p>",
        "id": 154060540,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1546209327
    },
    {
        "content": "<p>you misread it. The query was why R4 is different to R3. Nothing was removed from the published R3</p>",
        "id": 154060631,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1546209513
    },
    {
        "content": "<p>k</p>",
        "id": 154061912,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1546212290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  - in the past I've had problems with Newtonsoft's JSchema implementation not being able to resolve even the internal #ref's in the FHIR JSON Schema.   I'll have to try this again with the R4 JSON to see if it works any better.   (I end up manually cutting a specific resource's schema from the 'full schema', e.g. Patient, and then have to also remove the references to the FHIR data types, not ideal but that's what I was able to get working.   I guess this suggests that I should revisit that [and report back here what I find].</p>",
        "id": 154085259,
        "sender_full_name": "John Silva",
        "timestamp": 1546261252
    },
    {
        "content": "<p>sure let me know</p>",
        "id": 154142355,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1546375312
    },
    {
        "content": "<p>\"egvs\": [<br>\n    {<br>\n      \"systemTime\": \"2018-02-06T09:12:35\",<br>\n      \"displayTime\": \"2018-02-06T01:12:35\",<br>\n      \"value\": 122,<br>\n      \"realtimeValue\": 121,<br>\n      \"smoothedValue\": 122,<br>\n      \"status\": null,<br>\n      \"trend\": \"flat\",<br>\n      \"trendRate\": -0.5<br>\n    }]<br>\nI want to add the above json into an observation , I was able to add \"egvs\" how do I create extensions to an extension...</p>",
        "id": 154656421,
        "sender_full_name": "anay",
        "timestamp": 1546965026
    },
    {
        "content": "<p>The preferred solution to send that information would be to break out all of the elements into separate Observation components (with the possible exception of systemTime which should presumably correspond to Observation.effectiveTime)</p>",
        "id": 154657095,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1546965602
    },
    {
        "content": "<blockquote>\n<p>The preferred solution to send that information would be to break out all of the elements into separate Observation components (with the possible exception of systemTime which should presumably correspond to Observation.effectiveTime)</p>\n</blockquote>\n<p>So how Do I create custom properties like trend and trend rate realtime and smoothedvalue ?</p>",
        "id": 154659159,
        "sender_full_name": "anay",
        "timestamp": 1546967057
    },
    {
        "content": "<p>They're not custom properties - they're Observation components.  You'd have one component for the realtime value, one component for the smoothed value, etc.  Each would have a component.code and a component.value</p>",
        "id": 154662688,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1546970018
    },
    {
        "content": "<blockquote>\n<p>They're not custom properties - they're Observation components.  You'd have one component for the realtime value, one component for the smoothed value, etc.  Each would have a component.code and a component.value</p>\n</blockquote>\n<p>I wanted to apply some fixed string values on the trend rate  based on the  value, do i apply some kind of constraints in this case?<br>\n \"doubleUp\"<br>\n+3 ≤ trendRate ≤ +8<br>\n\"singleUp\"<br>\n+2 ≤ trendRate &lt; +3</p>",
        "id": 154675382,
        "sender_full_name": "anay",
        "timestamp": 1546980048
    },
    {
        "content": "<p>Are you talking about constraining what's allowed to appear in a given Observation?  If so, yes you could enforce those sort of constraints with a profile</p>",
        "id": 154679507,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1546983679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191529\">@Corey Spears</span> here's a present for you</p>",
        "id": 154999628,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1547326944
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/3iDuw_lYzNfgjHPiywCLJ0Yf/modular-json-schemas.zip\" target=\"_blank\" title=\"modular-json-schemas.zip\">modular-json-schemas.zip</a></p>",
        "id": 154999635,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1547326964
    },
    {
        "content": "<p>Grahame, It seems you sent to wrong person.</p>",
        "id": 154999696,
        "sender_full_name": "Rajesh Garlapati",
        "timestamp": 1547327056
    },
    {
        "content": "<p>no was public on purpose, though Corey asked for it</p>",
        "id": 154999773,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1547327245
    },
    {
        "content": "<blockquote>\n<p><a href=\"/user_uploads/10155/3iDuw_lYzNfgjHPiywCLJ0Yf/modular-json-schemas.zip\" target=\"_blank\" title=\"modular-json-schemas.zip\">modular-json-schemas.zip</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> where is the definition for the id.schema.json, present in resources like Patient and Observation. Should it be a primitive type or there is also a schema as the identifier? I couldn't find it. Thanks</p>",
        "id": 157600788,
        "sender_full_name": "Pietro Ghezzi",
        "timestamp": 1549367714
    },
    {
        "content": "<p>I don't know</p>",
        "id": 157600848,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549367767
    },
    {
        "content": "<p>it looks like I missed all the primitive types</p>",
        "id": 157739541,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549498163
    },
    {
        "content": "<p>I'm overloaded... but the solution is for someone to pull them out of the single json schema</p>",
        "id": 157739598,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549498203
    },
    {
        "content": "<p>I found trivial bugs in JSON Schema of MedicationRequest resource(line 36691-36693 in fhir.schema.json, that fails to mandate \"status\" and \"intent\". In the official document, their cardinality is 1..1 and XML schema set minOccurs=\"1\".</p>",
        "id": 180983015,
        "sender_full_name": "Shinji KOBAYASHI",
        "timestamp": 1574043777
    },
    {
        "content": "<p>Two more, the JSON Schema of MessageHeader also fails to mandate \"endopoint\" in Source and Destination elements. Where should I send pull requests?<br>\n<a href=\"https://github.com/skoba/HL7-FHIR-JP-WG/commit/16036ea3906e03619ca77801acd022cae17955d6#diff-c907b9dd199507218860e113d7ee51b4\" target=\"_blank\" title=\"https://github.com/skoba/HL7-FHIR-JP-WG/commit/16036ea3906e03619ca77801acd022cae17955d6#diff-c907b9dd199507218860e113d7ee51b4\">https://github.com/skoba/HL7-FHIR-JP-WG/commit/16036ea3906e03619ca77801acd022cae17955d6#diff-c907b9dd199507218860e113d7ee51b4</a></p>",
        "id": 180984254,
        "sender_full_name": "Shinji KOBAYASHI",
        "timestamp": 1574045770
    },
    {
        "content": "<p><a href=\"https://github.com/skoba/HL7-FHIR-JP-WG/commit/8906e7293cba916fee74ace1f9f6ea4570d943de#diff-c907b9dd199507218860e113d7ee51b4\" target=\"_blank\" title=\"https://github.com/skoba/HL7-FHIR-JP-WG/commit/8906e7293cba916fee74ace1f9f6ea4570d943de#diff-c907b9dd199507218860e113d7ee51b4\">https://github.com/skoba/HL7-FHIR-JP-WG/commit/8906e7293cba916fee74ace1f9f6ea4570d943de#diff-c907b9dd199507218860e113d7ee51b4</a></p>",
        "id": 180984271,
        "sender_full_name": "Shinji KOBAYASHI",
        "timestamp": 1574045825
    },
    {
        "content": "<p>since this is generated, I'll have to debug this, and since it's generated, whatever pattern it is will be consistent in lots of places</p>",
        "id": 180995990,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574065727
    },
    {
        "content": "<p>I guess so. Cardinality conversion seems loose.</p>",
        "id": 181001791,
        "sender_full_name": "Shinji KOBAYASHI",
        "timestamp": 1574071676
    },
    {
        "content": "<p>Actually, <span class=\"user-mention\" data-user-id=\"235584\">@Shinji KOBAYASHI</span> this is deliberate; the way the json format works means that primitive elements can be present in either format - eg. status or _status. So we can't make status required</p>",
        "id": 182172437,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575029350
    },
    {
        "content": "<p>Hi <br>\nAn observation : The schema downloaded from <a href=\"http://build.fhir.org/fhir.schema.json.zip\" target=\"_blank\" title=\"http://build.fhir.org/fhir.schema.json.zip\">http://build.fhir.org/fhir.schema.json.zip</a> has 'id' defined in 'definition.coding' while FHIR website doesn't mention any id for 'coding' datatype.<br>\nAny thoughts ?<br>\n<span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 191664032,
        "sender_full_name": "Chidamber Kumar",
        "timestamp": 1585079830
    },
    {
        "content": "<p>It's inherited from Element</p>",
        "id": 191664261,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1585079939
    },
    {
        "content": "<p>Oh yeah! missed it. Thanks <span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span>  :)</p>",
        "id": 191665531,
        "sender_full_name": "Chidamber Kumar",
        "timestamp": 1585080639
    },
    {
        "content": "<p>Hi <br>\nI wanted to check if JSON schema also suggests about cardinality of elements ? I could see \"type\":\"array\" for some elements but what about elements with cardinality 1..1  ? How those are suggested in the JSON schema ?</p>",
        "id": 191872691,
        "sender_full_name": "Chidamber Kumar",
        "timestamp": 1585223602
    },
    {
        "content": "<p>If something isn't an array, then it can't repeat...</p>",
        "id": 191890915,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1585232421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/JSON.20Schema/near/191890915\" title=\"#narrow/stream/179166-implementers/topic/JSON.20Schema/near/191890915\">said</a>:</p>\n<blockquote>\n<p>If something isn't an array, then it can't repeat...</p>\n</blockquote>\n<p>Hi  <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  If something isn't array, then it could be 0..1 or 1..1 ? How is that distinguished in JSON schema ?</p>",
        "id": 191988761,
        "sender_full_name": "Chidamber Kumar",
        "timestamp": 1585298492
    },
    {
        "content": "<p>They're declared towards the bottom as required.  E.g.<br>\n      \"required\": [<br>\n        \"code\",<br>\n        \"resourceType\"<br>\n      ]</p>",
        "id": 192022518,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1585318427
    },
    {
        "content": "<p>Note that simple types (e.g. Observation.status) can't be enforced this way because there's a choice of having \"status\" or \"_status\", so neither are 'required', even though you must have one of the two.</p>",
        "id": 192022778,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1585318514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/JSON.20schema/near/192022778\" title=\"#narrow/stream/179166-implementers/topic/JSON.20schema/near/192022778\">said</a>:</p>\n<blockquote>\n<p>Note that simple types (e.g. Observation.status) can't be enforced this way because there's a choice of having \"status\" or \"_status\", so neither are 'required', even though you must have one of the two.</p>\n</blockquote>\n<p>Got it ! <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  Thanks</p>",
        "id": 192107653,
        "sender_full_name": "Chidamber Kumar",
        "timestamp": 1585374578
    },
    {
        "content": "<p>Hello guys!<br>\nI have been going through the JSON schema downloaded from <a href=\"http://build.fhir.org/fhir.schema.json.zip\" title=\"http://build.fhir.org/fhir.schema.json.zip\">http://build.fhir.org/fhir.schema.json.zip</a> and noticed that 'Narrative' has only one required key, which is 'div'. While, the html page <a href=\"http://build.fhir.org/narrative.html#Narrative\" title=\"http://build.fhir.org/narrative.html#Narrative\">http://build.fhir.org/narrative.html#Narrative</a> says both 'status' and 'div' are required.</p>\n<p>Thoughts ?</p>",
        "id": 193013944,
        "sender_full_name": "Chidamber Kumar",
        "timestamp": 1586164127
    },
    {
        "content": "<p>This is very much an FAQ. status is required but may appear in the JSON as either status or _status - there's another section of the JSON schema that requires oneOf  these to be present</p>",
        "id": 193014339,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1586164370
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <br>\nI could find two sections JSONschema.OneOf and JSONschema.definitions.ResourceList.oneOf. None of these specifies that status may appear as either status or _status.  Could you please point me to the right section?</p>",
        "id": 193168899,
        "sender_full_name": "Chidamber Kumar",
        "timestamp": 1586256906
    },
    {
        "content": "<p>Hi <br>\nI have been going through JSON schema and noticed that Patient.deceasedDateTime has 'type:string'. <br>\nShouldn't there be a child here as   \"$ref\": \"#/definitions/dateTime\" ? after all , it's primitive data type is dateTime .</p>",
        "id": 193650232,
        "sender_full_name": "Chidamber Kumar",
        "timestamp": 1586595667
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 193651126,
        "sender_full_name": "Chidamber Kumar",
        "timestamp": 1586596947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 193662813,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1586615013
    },
    {
        "content": "<p>Hi everyone. We're using JSON Schema for FHIR. It works well on validation, but the error messages are very hard to figure out. It looks like the JSON Schema was written with draft 6 and Swagger in mind. The issue is the giant oneOf, which attempts to validate against all resource types. Swagger supports discriminator, but JSON Schema does not. JSON Schema draft 7 supports if/then/else, where maybe we could map subschemas by resource type and get much better error messages, and possibly faster performance. Has anyone tried this?</p>",
        "id": 241317736,
        "sender_full_name": "T M",
        "timestamp": 1622666897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 241321943,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1622669127
    },
    {
        "content": "<p>I haven't truid if/then/else and I'm interested in how it would be different if someone wants to try it. but don't think we'll ever get a really good outcome. and Swagger is more important than json schema 7, I think</p>",
        "id": 241334003,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1622677912
    },
    {
        "content": "<p>Is there a good way to validate with swagger in Python? We just want to see if we have valid FHIR or not in a dictionary. We're trying to work entirely with Python. We use the full Java validator as a manual step here and there, but the jsonschema is extremely useful.</p>",
        "id": 241596761,
        "sender_full_name": "T M",
        "timestamp": 1622843161
    },
    {
        "content": "<p>check out the <a href=\"https://pypi.org/project/fhir.resources/\">fhir.resources</a> library with fastAPI it uses pydantic and is natural fit for fastAPI and swagger.</p>",
        "id": 241606123,
        "sender_full_name": "Eric Haas",
        "timestamp": 1622852124
    },
    {
        "content": "<p>Those error messages are a lot cleaner. It doesn't seem to validate types, though. Like I can change a 3 to a \"3\" and it doesn't complain. Will keep looking at it. Thank you, Eric.</p>",
        "id": 242000721,
        "sender_full_name": "T M",
        "timestamp": 1623195059
    }
]