[
    {
        "content": "<p>What should be the behavior if the search parameter in _sort does not have scalar value?<br>\nfor example: {base}/Patient?_sort=given</p>\n<p>the given names of a patient could be multiple so how to sort resources in such condition?</p>",
        "id": 154020393,
        "sender_full_name": "Muhammad Abubakar Ikram",
        "timestamp": 1542870090
    },
    {
        "content": "<p>I believe the specifications do not say anything about that. I'd say implementation can do what they like - that would be to use the minimum or maximum of the available values</p>",
        "id": 154020465,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1542894931
    },
    {
        "content": "<p>From the spec: \"A search parameter can refer to an element that repeats, and therefore there can be multiple values for a given search parameter for a single resource. In this case, the sort is based on the item in the set of multiple parameters that comes earliest in the specified sort order when ordering the returned resources.\"</p>",
        "id": 154020502,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542901327
    },
    {
        "content": "<p>So if you ask to sort by <a href=\"http://Patient.name\" target=\"_blank\" title=\"http://Patient.name\">Patient.name</a>, then \"John Abrams Smith\" will come before \"Adam George Smith\" (on the grounds that \"Abrams\" comes before \"Adam\".</p>",
        "id": 154020503,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542901418
    },
    {
        "content": "<p>If that's not the behavior you want, then you'll need to define custom search parameters that are specific to first name, first middle name, second middle name, etc.</p>",
        "id": 154020504,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542901453
    },
    {
        "content": "<p>(Sorry, my bad - I should have checked)</p>",
        "id": 154020514,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1542902952
    },
    {
        "content": "<p>I don't think that result is what people would expect, at least for Patient name.</p>",
        "id": 154020518,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1542907339
    },
    {
        "content": "<p>True.  We could propose a change in R5 that where collections are defined as \"ordered\" (as names are) that the sorting is based on defined order.  Though not sure we can do that when the backward compatibility rules kick in</p>",
        "id": 154020520,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542907597
    },
    {
        "content": "<p>Add a new sort prefixes &lt; and &gt; for ascending and descending according to server-defined criteria, or according to a \"logical\" sort order?</p>",
        "id": 154020521,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1542907920
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19692\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19692\">GF#19692</a></p>",
        "id": 154020522,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1542908969
    },
    {
        "content": "<p>Was more thinking about saying that rather than sorting by the \"lowest\" element within a collection, if the collection was ordered, then you'd sort by the first element in the collection.</p>",
        "id": 154020524,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542909245
    },
    {
        "content": "<p>Do we have collections identified as \"ordered\" vs \"non-ordered\"?</p>",
        "id": 154020525,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1542909356
    },
    {
        "content": "<p>My thought was that by adding new search prefixes, that trigger the new behavior (which is, perhaps, as you suggest), you could avoid backward compatibility issues.<br>\nAm I correct that current behavior is that when sorting by patient given name, not only would you sort by the alphabetically first given name (whether that's first or middle), but also if the patient has multiple names, then you'd sort by the alphabetically first of any given name across any of their names?</p>",
        "id": 154020528,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1542910007
    },
    {
        "content": "<p>Elements now have an orderMeaning element that can be populated if the order has significance.  It doesn't most places, but does for HumanName.given and a few other places.</p>",
        "id": 154020532,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542910541
    },
    {
        "content": "<p>And yes, as currently defined, if there were multiple names, you would take all of the name parts (including text) that are included by the current search criteria and sort them alphabetically and would then sort the Patient based on the first of those strings</p>",
        "id": 154020533,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542910625
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 154020534,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1542910721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> \"So if you ask to sort by <a href=\"http://Patient.name\" target=\"_blank\" title=\"http://Patient.name\">Patient.name</a>, then \"John Abrams Smith\" will come before \"Adam George Smith\" (on the grounds that \"Abrams\" comes before \"Adam\".\"</p>\n<p>would you please help me to understand this? how \"John Abrams Smith\" will come before \"Adam George Smith\"?</p>\n<p>I understand that you have not ordered these two full names as the whole strings but in parts.</p>",
        "id": 154021722,
        "sender_full_name": "Muhammad Abubakar Ikram",
        "timestamp": 1543509473
    },
    {
        "content": "<p>I'm not Lloyd, but I'll answer for him since he's away.  sorting on <a href=\"http://Patient.name\" target=\"_blank\" title=\"http://Patient.name\">Patient.name</a> is sorting on all of the name parts of each patient.  His earlier quote pointed out that when a search parameter contains multiple elements (like <a href=\"http://Patient.name\" target=\"_blank\" title=\"http://Patient.name\">Patient.name</a>), then it uses the earliest element.  So it uses \"Abrams\" from the first Patient and \"Adam\" from the second patient and puts \"John Abrams Smith\" ahead of \"Adam George Smith\".</p>",
        "id": 154021735,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1543515172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span> oh alright, kindly correct me if I am wrong.</p>\n<p>So, you are saying that first sort the subparts of the name which are \"John\", \"Abrams\" and \"Smith\" hence, \"Abrams\" will be on first. Then, do this for the second full name from the second full name \"Adam\" comes first. So, then sort both full names on basis of \"Abrams\" and \"Adam\" which one come first its full name will come first. Am I right?</p>",
        "id": 154022040,
        "sender_full_name": "Muhammad Abubakar Ikram",
        "timestamp": 1543560713
    },
    {
        "content": "<p>Yep</p>",
        "id": 154022042,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1543563873
    },
    {
        "content": "<p>And with Patient name searching, really depends what you're doing here too, if you're doing demographic analysis or other non patient specific searching that makes sense, but if you're looking for a patient, you're more likely to be doing an MPI search where a set of values are applied and the order is based on rank/weighting rather than by name.<br>\nAnd I'd expect there to be a specific name that would be identified as the usual one for sorting, and that depends on the system which way they do that, and other factors in the use case..</p>",
        "id": 154022448,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1543833569
    },
    {
        "content": "<p>The challenge is that most collections in FHIR are unordered - so ordering them prior to comparison is necessary.  However, some collections <em>are</em> ordered, and ordering them prior to comparison breaks things.  Unfortunately, we're past the point where we can fix this for R4 - and based on our interversion compatibility rules, it's going to take significant agreement from the community to fix it in R5.</p>",
        "id": 154024329,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1544493109
    }
]