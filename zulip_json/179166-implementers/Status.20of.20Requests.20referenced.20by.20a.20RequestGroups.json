[
    {
        "content": "<p>I have read multiple times throughout the documentation that the status of a RequestGroup must \"cascade\" to any Request resource that is referenced by it (e.g. <a href=\"http://hl7.org/fhir/2020Sep/request.html#requestgroup\">http://hl7.org/fhir/2020Sep/request.html#requestgroup</a>). It makes sense that if a RequestGroup is cancelled or suspended that all referenced Requests must be cancelled or suspended as well. It also makes senses sense that if a RequestGroup is completed this means all the referenced Requests are also completed. </p>\n<p>Does it work the other way? Can a referenced Request, for example, be completed, suspended, etc.. whilst the RequestGroup remains active or does completing one of these option Requests necessarily mean that the parent RequestGroup was completed?</p>",
        "id": 267218821,
        "sender_full_name": "Kyle Thompson",
        "timestamp": 1641577481
    },
    {
        "content": "<p>The expectation is that if you're using a RequestGroup, then there's really only \"one\" order.  It's just a complicated one with a bunch of parts.  In most cases, the children of the the RequestGroup should be contained - because they shouldn't ever be modified without understanding the impact on the whole.  We haven't really talked about the possibility of the statuses of requests within a RequestGroup not all transitioning together.  In theory it's possible that one part of the overall order might be complete when the whole thing isn't yet complete.  But, in general, most transitions can't happen without affecting everything.  If you put anything on hold, you have to put everything on hold.  If one thing is cancelled, then the whole thing must be cancelled.</p>",
        "id": 267221773,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1641578906
    },
    {
        "content": "<p>The example I'm thinking of (I should have included it in the original question, my mistake) is the following:<br>\n1) Do A<br>\n2) After A, do B<br>\n3) After B, do C,<br>\nwhere A, B, and C are all Tasks. The RequestGroup would capture this ordering (and if need be any more complicated timing offsets between the Tasks. For this example, the RequestGroup is in an active state. </p>\n<p>My thinking is that B and C exist in some received or accepted state while A is in an in-progress state (the owner is acting on it). Now, if Task A is completed (or maybe even failed, depending on the situation), we would want to move on to Task B. Task A being complete does not mean the whole RequestGroup is complete, just that one component.</p>\n<p>It makes sense that the Tasks A, B, and C have a context (the RequestGroup) and that operations on the RequestGroup would cascade down to the referenced Tasks. When timing/ordering is involved between the Tasks, though, I was thinking that the referenced Tasks might transition on its own, but based on what I've been reading this might be unorthodox?</p>",
        "id": 267223536,
        "sender_full_name": "Kyle Thompson",
        "timestamp": 1641579814
    },
    {
        "content": "<p>My general leaning is that, if in a RequestGroup, there should be no use of Accepted/Received for the Tasks.  They're behaving purely as 'orders' in that circumstance.  Any acceptance/refusal should be of a separate Task seeking fulfillment of the RequestGroup as a whole.</p>",
        "id": 267236642,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1641585957
    },
    {
        "content": "<p>What status would be reasonable for Tasks that are waiting for some other Task to be completed? For concreteness, let's say Task A is currently be actioned (is in-progress). What status would Task B be in? Also in-progress?</p>",
        "id": 267237842,
        "sender_full_name": "Kyle Thompson",
        "timestamp": 1641586666
    },
    {
        "content": "<p>RequestGroup isn't really supposed to track \"in progress\".  It tracks active and completed or cancelled.  I'd recommend going the same route with Task (so requested, cancelled, failed, on-hold and completed) - mirroring the active/on-hold/revoked/completed of RequestGroup.  Any tracking of acceptance or completion should be managed by other tasks or sub-tasks that aren't directly referenced from the RequestGroup.  All of this said, there's obviously a need for more guidance in the spec about how all of this should work, so feel free to submit a change request asking for some...</p>",
        "id": 267239475,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1641587565
    },
    {
        "content": "<p>Just to be clear, this sounds like it is acceptable (and maybe even likely) that Request statuses referenced by RequestGroups <em>can</em> be different from the RequestGroup with the caveat that there are some restrictions on what the status of the referenced Tasks can take on (as discussed above). Is that right?</p>\n<p>Yeah, I'll figure out the process asking for a change request and submit a ticket. Thanks for all your help!</p>",
        "id": 267242355,
        "sender_full_name": "Kyle Thompson",
        "timestamp": 1641589251
    },
    {
        "content": "<p>The language <a href=\"https://build.fhir.org/request.html#requestgroup\">here</a> is pretty clear.  The status of the parent cascades to the children and the children aren't allowed to have 'distinct' statuses, though of course the specific status values may differ.  (Task doesn't have 'active' but it does have 'requested', for example.)  If you want to track the activity against specific parts, you'll need to use sub-tasks with a 'basedOn' relationship.</p>",
        "id": 267243617,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1641590030
    }
]