[
    {
        "content": "<p>I just added https to my FHIR server endpoint and it got me thinking about the references between resources. If I have an Observation resource that references a Patient resource using the subject property, and I use an absolute reference, e.g. <code>https://SomeServer/fhir/Patient/100</code>, when searching for Observation resources with a particular subject URI should a server return matches for both http &amp; https? So that would be, should this search:<br>\n<code>https://SomeServer/fhir/Observation?subject=https://SomeServer/fhir/Patient/100</code><br>\nreturn Observation resources with a subject of <code>http://SomeServer/fhir/Patient/100</code> as well as resource with <code>https://SomeServer/fhir/Patient/100</code></p>",
        "id": 153896015,
        "sender_full_name": "Angus Millar",
        "timestamp": 1499174358
    },
    {
        "content": "<p>difficult question. </p>",
        "id": 153896051,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1499233435
    },
    {
        "content": "<p>we've said that those references can't reference different resources, so that would argue that the you should resolve them</p>",
        "id": 153896052,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1499233453
    },
    {
        "content": "<p>My server knows what it is, and while internally referencing removes the absoluteness off there.</p>",
        "id": 153896053,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1499233465
    },
    {
        "content": "<p>(as in knows its own base URLs, so can strip the prefixes to make them relative)</p>",
        "id": 153896054,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1499233499
    },
    {
        "content": "<p>the FHIR spec says this for URI search \"The uri parameter refers to a URI (RFC 3986 ) element. Matches are precise (e.g. case, accent, and escape) sensitive, and the entire URI must match.\"</p>",
        "id": 153896085,
        "sender_full_name": "Angus Millar",
        "timestamp": 1499261637
    },
    {
        "content": "<p>Which then means that this search <code>https://SomeServer/fhir/Observation?subject=https://SomeServer/fhir/Patient/100</code> would only return the subjects with a 'https' and yet this search  <code>https://SomeServer/fhir/Observation?subject=Patient/100</code>would return both <code>https</code> and 'http'. I think that is reasonable although a little unintuitive. Doing this meets all the rules I can find in the spec.</p>",
        "id": 153896086,
        "sender_full_name": "Angus Millar",
        "timestamp": 1499261976
    },
    {
        "content": "<p>see the http(s) text <a href=\"http://build.fhir.org/http.html#general\" target=\"_blank\" title=\"http://build.fhir.org/http.html#general\">http://build.fhir.org/http.html#general</a> </p>",
        "id": 153896087,
        "sender_full_name": "John Moehrke",
        "timestamp": 1499262601
    },
    {
        "content": "<p>generally you are asking more of a policy question, than a specification question. Meaning Policy will decide to never publish anything under http; but it might allow queries to ask about http and interpret those queries as if they were https. Hopefully Policy will not ever allow non secure things.</p>",
        "id": 153896088,
        "sender_full_name": "John Moehrke",
        "timestamp": 1499262683
    },
    {
        "content": "<p>Thanks, John that is a good reference on the topic.  It somewhat contradicts the reference I posted above from the URI search. On policy, it's difficult to control content created outside of one's policy boundary. Sure I can have a policy that my server only operates on https but it's harder to mandate that the content I consume never references content outside of my boundary on http. I may have a resource with a reference to an Organization resource in another FHIR server completely outside of my policy controls. I think I'm now leaning towards ignoring the schema on all base url's for search, just match from <code>://</code> forward, except for <code>urn:oid</code> and <code>urn:oid</code>. </p>",
        "id": 153896090,
        "sender_full_name": "Angus Millar",
        "timestamp": 1499265995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191391\">@Angus Millar</span> Can you submit a change request for us to clarify the language?</p>",
        "id": 153896094,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1499271726
    },
    {
        "content": "<p>Another related practical problem that we've run into is that the \"service base URL\" that the FHIR server knows itself as may be different than what the FHIR client knows the server as (not just http vs. https, but also the host and base-path).  For example when reverse proxies and re-write rules are in place in a DMZ that separates a protected FHIR server from a client on the public internet.   Our challenge has been that in order to make references resolvable by the FHIR client, references need to be relative to the reverse proxy \"service base URL\", which may not be the same as the FHIR server \"service base URL\".  </p>\n<p>http vs. https seems like a subset of this problem that can be caused in real life by TLS termination proxies, for example. </p>\n<p>Not entirely sure this is something for the FHIR standard to tackle, but it's definitely a pain point for us, and related to the http vs. https thing, so I figured I'd mention it.</p>",
        "id": 153896145,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1499289263
    },
    {
        "content": "<p>Ouch, thanks for that Cooper, certainly another dynamic to consider. At first glance it looks like the server need to inspect the request headers for: <code>HTTP_X_ORIGINAL_URL</code> – this server variable contains the original URL in decoded format; and <br>\n<code>UNENCODED_URL</code> – this server variable contains the original URL exactly as it was requested by a Web client, with all original encoding preserved. </p>",
        "id": 153896155,
        "sender_full_name": "Angus Millar",
        "timestamp": 1499293219
    }
]