[
    {
        "content": "<p>As i understand you can't combine a search and a operation like e.g. <code>{{baseurl}}/Composition?patient=Patient/4953/$document</code></p>",
        "id": 153970955,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1529586520
    },
    {
        "content": "<p>am i right in my understanding of the standard? I was wondering because the example above would be quite useful sometimes, the problem here seems to be $ as a composite search param &lt;-&gt; operation param</p>",
        "id": 153970959,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1529587200
    },
    {
        "content": "<p>The closest thing that you could do is something like: [base]/Composition?patient=Patient/4953&amp;_query=$document<br>\nHowever, this is would  only be possible if $document would be a named query and not an operation. <br>\nIf you really need it, it would be possible to define a custom named query for it.</p>",
        "id": 153970981,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1529592266
    },
    {
        "content": "<p>Or you could start a discussion about whether or not it would make sense to allow (some) operations also as named queries :P</p>",
        "id": 153970982,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1529592627
    },
    {
        "content": "<p>the idea with the named query is nice but not according to the spec, i think. Named queries have to be searches as well, and are triggered through a search [GET], whilst Operations are triggered through a POST.</p>",
        "id": 153971063,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1529656360
    },
    {
        "content": "<p>Operations can be triggered through GET in some cases</p>",
        "id": 153971202,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1529682076
    },
    {
        "content": "<p>The main reason behind this idea is that there is no real difference between the current OperationDefinition for $document and a named query.<br>\nFrom what I understand, everything could stay the same, besides changing the type to \"query\". <br>\nMoreover, as <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  mentioned,  in cases where the operation is idempotent and only requires simple input parameters, we can also execute this operation via GET. So it would be theoretically executable it in a search environment. Additionally, $doucment is returning a bundle and is, therefore, matching the requirements for the return values of named queries as defined in section 5.4.3.4 - Executing Operations and Named Queries.</p>\n<p>So maybe, it should be discussed if a third \"kind\" can be introduced which would be a mix of \"query\" and \"operation\". It would reduce the need of having to define something almost identical. This idea is just meant as some food for thought, so please don't judge it too harshly.</p>",
        "id": 153971356,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1529779848
    },
    {
        "content": "<p>why would need to define something almost identical - I followed the rest of what you wrote, but I din't see about that</p>",
        "id": 153971470,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1529922158
    },
    {
        "content": "<p>It was meant in reference to the current approach. To make the search request work, you need to define the named query, which is almost identical to the already defined $document operation.</p>",
        "id": 153971538,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1529934572
    },
    {
        "content": "<p>I gave this issue another thought and still think that it has its usecase. </p>\n<div class=\"codehilite\"><pre><span></span>{{baseurl}}/Composition?patient=Patient/4953/$document\n{{baseurl}}/ValueSet?url=http://hl7.org/fhir/ValueSet/administrative-gender/$expand\n</pre></div>\n\n\n<p>are both examples where it would be very useful to be able to chain query with an operation. It safes you a http request. I know i could do the expanse with a POST with a Parameter Object, chaining queries with operations seems to be the more elegant way.</p>",
        "id": 153996980,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1536929230
    },
    {
        "content": "<p>Being able to combine search and an operation for sure is useful in some, probably many, cases. For such a \"conditional operation\", it would have to be clarified what would happen in the cases of zero/one/many matches. It might be necessary to define that differently for each operation. And in the first place, define which operations should be supported here.<br>\nAlso it might be necessary to extend OperationDefinition eccordingly.<br>\nI think that it's worth to further detail the idea.</p>",
        "id": 153998013,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1537343409
    },
    {
        "content": "<p>I defined in my operation the search parameters you can use with it.    e.g. _count</p>",
        "id": 153998238,
        "sender_full_name": "Eric Haas",
        "timestamp": 1537373943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> So you did add search parameters to the operation as parameters? This could be a solution, but you have to build your own operation+operation implementation.</p>",
        "id": 153998251,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1537374932
    },
    {
        "content": "<p>Looking at the Examples above ($expand, $document) i simply want to be able to chain a search with an operation. This safes a Roundtrip to the server.</p>",
        "id": 153998252,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1537374987
    },
    {
        "content": "<p>I don't think building operations, or named queries based on existing operations is very elegant. It duplicates logic and code.</p>",
        "id": 153998253,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1537375030
    },
    {
        "content": "<p>as <span class=\"user-mention\" data-user-id=\"191436\">@Stefan Lang</span> mentioned: if we want to chain searches with operations (working title: Conditional Operation), we have to select which operations could be supported and define the output of the search (none|one|many).</p>",
        "id": 153998254,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1537375124
    },
    {
        "content": "<p>I would be happy to let the operation fail if zero, or many results are returned from the search. Of course this would be only applicable to operations on a single resource</p>",
        "id": 153998255,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1537375172
    },
    {
        "content": "<blockquote>\n<p>So you did add search parameters to the operation as parameters? </p>\n</blockquote>\n<p>NO  here is my example ....  <a href=\"http://www.fhir.org/guides/argonaut/scheduling/OperationDefinition-appointment-find.html\" target=\"_blank\" title=\"http://www.fhir.org/guides/argonaut/scheduling/OperationDefinition-appointment-find.html\">http://www.fhir.org/guides/argonaut/scheduling/OperationDefinition-appointment-find.html</a></p>\n<p>In the notes I added <br>\n\"To set the upper limit on the total number of available appointment options to return use the standard _count search parameter. See the examples below for how this is implemented.<br>\nUsing Both GET and POST Syntax the operation can be invoked as follows:</p>\n<p>GET [base]/Appointment/$find?{parameters}&amp;?{_count}</p>\n<p>POST [base]/Appointment/$find?{_count}\"</p>\n<p>is this what you were looking to  do?:</p>",
        "id": 153998257,
        "sender_full_name": "Eric Haas",
        "timestamp": 1537375245
    },
    {
        "content": "<p>I think _count is a different case here, since it is not a search parameter, but just defines the number of entries in the returning bundle</p>",
        "id": 153998260,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1537375428
    },
    {
        "content": "<p>no i wanted to be able to something like this: </p>\n<div class=\"codehilite\"><pre><span></span>{{baseurl}}/Composition?patient=Patient/4953/$document\n{{baseurl}}/ValueSet?url=http://hl7.org/fhir/ValueSet/administrative-gender/$expand\n</pre></div>",
        "id": 153998270,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1537375722
    },
    {
        "content": "<p>the 2nd one,  $expand defines an input parameter \"url\". So it should be </p>\n<div class=\"codehilite\"><pre><span></span>{{baseurl}}/ValueSet/$expand?url=http://hl7.org/fhir/ValueSet/administrative-gender\n</pre></div>",
        "id": 153998357,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1537385415
    },
    {
        "content": "<p>i know, but maybe i'm selecting the ValueSet i'd like to expand by another search query. The question to me remains, why is a operation on a search result not valid. So i can chain search and operation in one request. Adding similar functionality to operations as input parameters seems more work to me and duplicating search mechanisms inside of the operation.</p>",
        "id": 153998361,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1537387535
    },
    {
        "content": "<p>this kind of thing is on my todo list but (a) it's actually really hard and (b) my todo list keeps getting knocked around</p>",
        "id": 153998907,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1537502470
    },
    {
        "content": "<p>Most operation is on single instance and search returns a list of instance in a bundle. Do we want to apply operation to all of them? For example, do we want to generate document for all male patients when such request come in:</p>\n<div class=\"codehilite\"><pre><span></span>{{baseurl}}/Composition?patient.gender=male/$document\n</pre></div>",
        "id": 153998988,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1537539441
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"191436\">@Stefan Lang</span> mentioned earlier: you could see this as a \"conditional\" operation, or as a chained operation behind a searchQuery. So you have to define what kind of input your are expecting.<br>\nFor $document this could be:</p>\n<ul>\n<li>0 found -&gt; Error</li>\n<li>1 found -&gt; create DocumentBundle</li>\n<li>2-* found -&gt; create a SearchBundle with one document for each found composition _OR_ Error as we want to expect only one.<br>\nThis would be up for definition/discussion</li>\n</ul>",
        "id": 153998998,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1537541579
    },
    {
        "content": "<p>If i can support this process in any way, let me know <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 153999000,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1537541605
    },
    {
        "content": "<p>Due to the fact that $document itself returns a search bundle, we might want to return an empty bundle if we have 0 matches. I fully support the rest of the proposal :)</p>",
        "id": 153999001,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1537541718
    },
    {
        "content": "<p>Right, the easiest, and probably most transparent, way would be returning a searchset bundle with the operation applied to each resource within that bundle. This would avoid the 0/1/many cases - from an implementation point of view just an iteration over all results of the search, so probably easier to implement.<br>\nThis for sure would work for $document, still not sure if that would apply for all, or at least for all idempotent operations (not checking, just guessing at the moment)</p>",
        "id": 153999028,
        "sender_full_name": "Stefan Lang",
        "timestamp": 1537544785
    },
    {
        "content": "<p>after discussing this during a breakout at the devdays18 in AMS, we came to the following solution:</p>",
        "id": 154019621,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1542650051
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/8vzpFMGhNDH_BZmg8myhnYcn/flipchart_devDays_breakout.pdf\" target=\"_blank\" title=\"flipchart_devDays_breakout.pdf\">flipchart_devDays_breakout.pdf</a></p>",
        "id": 154019622,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1542650066
    },
    {
        "content": "<p>To enable the functionality of operations on search results a new operation has to be defined.<br>\nThis operation takes as input parameters:</p>\n<ul>\n<li>0..1 search params string to define the search critereas</li>\n<li>1..* operation names. Multiple operations can be chained, the output of the first operation is used as the input of the second</li>\n</ul>",
        "id": 154019623,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1542650365
    },
    {
        "content": "<p>Sounds like a pipelining mechanism. Before you know it you want to execute a third step after, say, searching and expanding and then limiting the output with _summary.  In that case, it would be interesting to consider using a batch Bundle containing the operations - but instead of the output of the steps going into the response Bundle, they would go into the next step in the batch - the output is the result of the last step.  I am knowlingly skipping a lot of steps here, just try see how far I can push this ;-)</p>",
        "id": 154019788,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1542721624
    },
    {
        "content": "<p>the trouble with this - and I've been thinking about this quite a bit - is that the input and output are not the same type. So you'd have to specify some complicated transform between b and c. This operation is very specifically limited to avoid that - the output of a is a list of resources, and the input for b is a single resource, and the operation is defined as an iterator</p>",
        "id": 154019951,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1542776796
    },
    {
        "content": "<p>Yes, and the _summary is defined on a search, but if you'd like to do a _summary on the previous step, you need some kind of identity search.</p>",
        "id": 154020116,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1542801535
    },
    {
        "content": "<p>here is the current state of the discussion <span class=\"user-mention\" data-user-id=\"191506\">@Yunwei Wang</span></p>",
        "id": 155189272,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1547574736
    },
    {
        "content": "<p>Does someone has any suggestions for a good name for this operation, btw?</p>",
        "id": 156432639,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1547895184
    },
    {
        "content": "<p>searchOp or opSearch? <br>\nStanding for operation(s) on search queries</p>",
        "id": 156687891,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1548249569
    }
]