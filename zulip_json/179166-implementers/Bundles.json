[
    {
        "content": "<p>Would I be correct in understanding that the only bundle types processed upon upload are transaction and batch - the rest are stored as-is just like any other resource?</p>",
        "id": 153850701,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1474848743
    },
    {
        "content": "<p>server's discretion how to handle them</p>",
        "id": 153850705,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1474849629
    },
    {
        "content": "<p>Interesting question. Makes me think:<br>\nIf a server receives a document bundle, how does it know whether it is expected to store the document as-is or process the individual resources? There may be use cases for both \"persist document\" as well as \"process document content\". But since both go to the same endpoint, how does the server know what to do? Would the latter be an operation, as it potentially involves additional business logic such as mpi lookup?</p>",
        "id": 153851053,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1475068978
    },
    {
        "content": "<p>As Grahame has indicated... it is up to the server to decide. Some servers will be functioning as a simple storage system (aka IHE MHD base use-case), where it will just persist the binary as a binary (it will have the DocumentReference as the metadata about that document). Others (and this is fine with MHD too) will persist the binary as a binary, but will also bust it apart into parts. These are not requirements of the Interoperability specification, these would be requirements of the implementation specification. Both (and more) kinds of implementations will be needed in different cases.</p>",
        "id": 153851065,
        "sender_full_name": "John Moehrke",
        "timestamp": 1475071253
    },
    {
        "content": "<p>What if there's a server that needs to do both?</p>\n<p>e.g an EHR server with</p>\n<ul>\n<li>one Client composes Documents from internal resources and the documents posted to the server simply need to be archived.</li>\n<li>another Client sends external Documents  to the server that need to be both archived as well as processed into the Patient record</li>\n</ul>\n<p>How will the server tell these two cases apart if both clients POST to the same endpoint...?  Or is this unlikely to ever happen?</p>",
        "id": 153851092,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1475080471
    },
    {
        "content": "<p>It's probably possible to analyze the contend and figure out where stuff came from and whether it is already known to the server or needs to be added. But I guess that's pretty expensive escpecially if the internal documents outweigh the external ones by numbers. <br>\nI dunno. <br>\nNot a server implementer, just a girl with a vivid imagination.</p>",
        "id": 153851093,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1475080777
    },
    {
        "content": "<p>have you read this: <a href=\"http://hl7-fhir.github.io/documents.html#bundle\" target=\"_blank\" title=\"http://hl7-fhir.github.io/documents.html#bundle\">http://hl7-fhir.github.io/documents.html#bundle</a></p>",
        "id": 153851174,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1475117576
    },
    {
        "content": "<p>I am not clear on why this duality would exist. If there was a real need for different behaviors, then there would likely be different endpoints. An endpoint has a defined behavior. Or we bring in Operations to identify different behavior. </p>",
        "id": 153851251,
        "sender_full_name": "John Moehrke",
        "timestamp": 1475160621
    },
    {
        "content": "<p>yes that's what the section describes - the different end points</p>",
        "id": 153851257,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1475164683
    },
    {
        "content": "<p>Oh! I wasn't aware that document bundles can also go to the basurl. Makes perfect sense to send them there in order to have them processed like transactions/batches. Cool. <img alt=\":smiling_face_with_sunglasses:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smiling_face_with_sunglasses.png\" title=\":smiling_face_with_sunglasses:\"> </p>",
        "id": 153851385,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1475193367
    },
    {
        "content": "<p>I also found additional guidance at <a href=\"http://hl7.org/fhir/2016Sep/http.html#other-bundles\" target=\"_blank\" title=\"http://hl7.org/fhir/2016Sep/http.html#other-bundles\">http://hl7.org/fhir/2016Sep/http.html#other-bundles</a> that expanded on GG's comment </p>",
        "id": 153851409,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1475204595
    },
    {
        "content": "<p>We are looking to do a query for all patients on a certain hospital list. In the query we want to also provide a list of observation values we want returned. My thought was using a bundle, but I wasnt sure how to structure the query. Any pointers or examples I could check out?</p>",
        "id": 153856000,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1478626599
    },
    {
        "content": "<p>Maybe a better question would be how to model a patient list with included resources (not refs)</p>",
        "id": 153856005,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1478627748
    },
    {
        "content": "<p>would it be a bundle that includes sub bundles?</p>",
        "id": 153856006,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1478627801
    },
    {
        "content": "<p>So your base query, you'd be querying against Observation, filtering on the observation values and also filtering on subject.  Your subject would then need to do a \"_has\" to only include those patients present on the list.  You'd then do an _include to bring back the Observation.subject (i.e. patients) too.  Only downside is that you wouldn't see patients if they had no observations matching your list of codes.</p>",
        "id": 153856042,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1478635673
    },
    {
        "content": "<p>In general, we don't do \"included lists\".  The search response can include references to or from the selected resources, but we wouldn't want to \"store\" a Bundle that contains a bunch of patients.  You should use the List resource with references and use the query capabilities to include (or not) what you need in your response bundle.</p>",
        "id": 153856044,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1478635785
    },
    {
        "content": "<p>there's actually 3 options here:<br>\n- a single search with include (unlikely to be quite specific enough)<br>\n- a batch that has 2 searches, one with an include - that can be quite specific<br>\n- a profile on $everything (extending the ways $everything can be limited)</p>",
        "id": 153856062,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478639841
    },
    {
        "content": "<p>+1 on the batch using searches to span all the resource types that you're looking for, or the $everything if that works for you</p>",
        "id": 153856159,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1478670649
    }
]