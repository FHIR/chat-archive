[
    {
        "content": "<p>In the Vulcan RWD track, a topic that was brought up was around using future resources (e.g. NutritionProduct via R5 see <a href=\"http://hl7.org/fhir/2020Sep/nutritionproduct.html\">http://hl7.org/fhir/2020Sep/nutritionproduct.html</a>) as part of R4. It was mentioned that the basic resource (see <a href=\"https://www.hl7.org/fhir/basic.html\">https://www.hl7.org/fhir/basic.html</a>) could be leveraged to do this which requires heavy use of extensions. Has there ever been discussion on using non-release core resources that could be more formalized and accessible to the industry? Otherwise, such resources would be limited in implementation. Thoughts?</p>",
        "id": 253446040,
        "sender_full_name": "Mike Hamidi",
        "timestamp": 1631723813
    },
    {
        "content": "<p>I'll preface this post by saying that I do not love the current versioning strategy / upgrade story for FHIR.</p>\n<p>That said, there <em>is</em> a story, and it's quite valid.</p>\n<p>Generally speaking, a storage server can support arbitrary data, a workflow server <em>may</em> be able to (with a robust language), but more than that.. supporting artifacts you don't know about doesn't work.</p>\n<p>For example, if you add support for <code>NutritionProduct</code> to an R4 server, you can CRUD that data.  But, what clients can do anything with it?  None that support R4.  What if it uses new data types that were introduced in R5? Or contains links to <em>other</em> R5+ resources?  What could a client application displaying that 'type' of information from R4 do with it?  Practically speaking, I'm not aware of a good story here.  With a focus on interop, that level of fragmentation is terrifying.</p>\n<p>But, I also think that we need a better story around 'stable' resources vs. 'in development' resources.  There are a lot of <em>potential</em> ways of doing this (e.g., semver-style: need an appropriate level release change to modify something of that maturity (most stable are a full version release, down to 'new' things added/changed in point releases); independent 'stable' and 'supplemental' packages, etc.).  There have been a lot of discussions around the topic on a number of streams, but to my knowledge there hasn't been any 'push' in a direction.</p>",
        "id": 253468248,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1631732103
    },
    {
        "content": "<p>The base challenge is that the reference implementations, schemas, and a whole lot of servers depend on the fact that there's a single FHIR schema in use throughout the world for a single FHIR version.  That produces a lot of interoperability wins.  The cost is that as the specification grows and as industry's capacity to accept change slows, it's harder to move new content forward.  R4B was our first experiment with \"moving faster\" (and it turned out to not be nearly as fast as we might have hoped).  It certainly won't be our last experiment in that direction, as we recognize that 3.5 years between releases is way too long for immature content that needs a chance to iterate.  But it's unlikely that the end solution will be to allow mixing and matching whatever versions you like.</p>",
        "id": 253468902,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1631732337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span>  You bring up some great points. It is something that should be considered in the confines of the current release. How to mimic a future resource that does not disrupt the current release is another question in itself. What we don't want is for implementers and users of FHIR to wait until they upgrade.</p>",
        "id": 253470463,
        "sender_full_name": "Mike Hamidi",
        "timestamp": 1631732881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> The mixing of releases sounds like an interesting idea. Having an agile way to keep up over time would be a big win as well.</p>",
        "id": 253470715,
        "sender_full_name": "Mike Hamidi",
        "timestamp": 1631732987
    },
    {
        "content": "<p>I would prefer we get back to a two year cycle... period. we got distracted by the shiny ONC thing. No reason why we couldn't do regular releases on a regular basis</p>",
        "id": 253484991,
        "sender_full_name": "John Moehrke",
        "timestamp": 1631738781
    },
    {
        "content": "<p>workgroups get to add resources using the normal means.</p>",
        "id": 253485059,
        "sender_full_name": "John Moehrke",
        "timestamp": 1631738815
    },
    {
        "content": "<p>this does mean that workgroups likely need to have feature branches where they can work on things that take more than the release cycle window.</p>",
        "id": 253485152,
        "sender_full_name": "John Moehrke",
        "timestamp": 1631738868
    },
    {
        "content": "<p>I don't think the release timing had anything to do with ONC??  We were driven by three things - reduced community capacity (thanks Covid), a bigger product (which slows everything down), and less desire from the implementer community to have a 'new thing' any time soon - and in fact in some cases a push to defer.   If we push out a new release every 2 years, but the community (reference implementations, EHRs, etc.) ignore every second release, all we've bought is broken expectations and less interoperability.</p>",
        "id": 253617770,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1631812942
    },
    {
        "content": "<p>I think a release process where certain 'dynamic' resources (that only a subset of the community cares about or that have maturity of &lt;3) can change but everything else is limited to technical corrections only  might be viable.  Even there, I expect we'd be looking at \"big release\", 18 months, \"dynamic release\", 18 months, \"big release\".</p>",
        "id": 253618046,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1631813059
    }
]