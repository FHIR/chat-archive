[
    {
        "content": "<p>How would you go about creating a profile that defines a slice within a slice</p>",
        "id": 153823626,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461888231
    },
    {
        "content": "<p>For example, if I had two types of extensions on my resource, and each of those extensions could have two different extensions?<br>\n(extreme example, I'm aware, but it's along the same lines of what I'm thinking about)</p>",
        "id": 153823627,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461888283
    },
    {
        "content": "<p>Re-slicing is described here: <a href=\"http://hl7-fhir.github.io/profiling.html#reslicing\" target=\"_blank\" title=\"http://hl7-fhir.github.io/profiling.html#reslicing\">http://hl7-fhir.github.io/profiling.html#reslicing</a></p>",
        "id": 153823628,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461888291
    },
    {
        "content": "<p>Do you mean an extension within an extension (path=\"Patient.extension.extension\") or slicing an extension?</p>",
        "id": 153823629,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461888345
    },
    {
        "content": "<p>an extension on an extension</p>",
        "id": 153823630,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461888373
    },
    {
        "content": "<p>If the \"outer\" extension have a value[x], then you would extend that (path=\"Patient.extension.value[x].extension\")  If not, you have a complex extension (path=\"Patient.extension.extension\").  I'm working on examples for all these now.</p>",
        "id": 153823631,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461888474
    },
    {
        "content": "<p>My drafts are here:  <a href=\"https://github.com/chrisgrenz/FHIR-Primer/wiki\" target=\"_blank\" title=\"https://github.com/chrisgrenz/FHIR-Primer/wiki\">https://github.com/chrisgrenz/FHIR-Primer/wiki</a></p>",
        "id": 153823632,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461888509
    },
    {
        "content": "<p>Hopefully we'll have better examples within the spec shortly.</p>",
        "id": 153823633,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461888534
    },
    {
        "content": "<p>Disclaimer - these haven't been checked by anyone else yet!</p>",
        "id": 153823634,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461888587
    },
    {
        "content": "<p>I took a look at your github page. Looks like your complex extension example is very close to what I'm talking about. However, I'm wondering about an even more complex scenario where extensions are used, but there is a similar pattern on non-extension elements. In the scenario for extensions, separate profiles are used that describe each extension. But, what about a scenario where you have two slices (types) of Composition.section, and each slice/type of Composition.section can have a different Composition.section.content (for example). In this case, we aren't dealing with extensions, so they are not separate profiles. This hierarchy of requirements would have to be represented in a single profile. Any ideas?</p>",
        "id": 153823692,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461902971
    },
    {
        "content": "<p>If I were to represent this in print form, I might say:<br>\nSHALL contain Composition<br>\n--SHALL contain section, such that it   &lt;-- slice<br>\n----SHOULD contain content, such that it &lt;-- sub-slice<br>\n------SHALL contain ...<br>\n----MAY contain content, such that it &lt;-- sub-slice<br>\n--SHALL contain section, such that it &lt;-- slice<br>\n----SHALL contain content, such that it &lt;-- sub-slice<br>\n------SHALL contain ...</p>",
        "id": 153823693,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461903182
    },
    {
        "content": "<p>ugh... it removed my spacing</p>",
        "id": 153823694,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461903194
    },
    {
        "content": "<p>I think this is a realistic scenario when trying to represent C-CDA in FHIR profiles (as well as many other common implementation guide requirements)</p>",
        "id": 153823695,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461903279
    },
    {
        "content": "<p>Sean, it just sounds like nested slices to me, and is a simple use case. but perhaps I've missed something...</p>",
        "id": 153823725,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461918563
    },
    {
        "content": "<p>btw, if you want &lt;pre&gt; content, you can use 3 ` characters:</p>",
        "id": 153823726,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461918585
    },
    {
        "content": "<div class=\"codehilite\"><pre>this was started by 3 `\n</pre></div>",
        "id": 153823727,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461918593
    },
    {
        "content": "<p>cool. didn't realize you could do that</p>",
        "id": 153823786,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461936254
    },
    {
        "content": "<p>yes, nested slices sounds right to me</p>",
        "id": 153823787,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461936273
    },
    {
        "content": "<p>do we have examples?</p>",
        "id": 153823788,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461936277
    },
    {
        "content": "<p>must have missed them...</p>",
        "id": 153823789,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461936284
    },
    {
        "content": "<p>I haven't done any examples  because I didn't particularly think it was necessary, and also becuase they'd be very verbose</p>",
        "id": 153823791,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461938909
    },
    {
        "content": "<p>you could slice, say, Observation.component, and then within each slice, you could slice the reference range.</p>",
        "id": 153823792,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461938935
    },
    {
        "content": "<p>can you craft one example for me to following?</p>",
        "id": 153823794,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461940430
    },
    {
        "content": "<p>even pseudo-example?</p>",
        "id": 153823795,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461940434
    },
    {
        "content": "<p>Here's an example of an Encounter profile with a sliced type and a slicing within the first slice of coding:</p>",
        "id": 153823797,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461941249
    },
    {
        "content": "<div class=\"codehilite\"><pre>&lt;differential&gt;\n    &lt;element&gt;\n        &lt;path value=&quot;Encounter.type&quot; /&gt;\n        &lt;slicing&gt;\n            &lt;discriminator value=&quot;text&quot; /&gt;\n            &lt;rules value=&quot;open&quot; /&gt;\n        &lt;/slicing&gt;\n    &lt;/element&gt;\n    &lt;element&gt;\n        &lt;path value=&quot;Encounter.type.coding&quot; /&gt;\n        &lt;name value=&quot;sliceTextA.coding&quot; /&gt;\n        &lt;slicing&gt;\n            &lt;discriminator value=&quot;system&quot; /&gt;\n            &lt;rules value=&quot;open&quot; /&gt;\n        &lt;/slicing&gt;\n    &lt;/element&gt;\n    &lt;element&gt;\n        &lt;path value=&quot;Encounter.type.coding.system&quot; /&gt;\n        &lt;name value=&quot;sliceTextA.LOINC.system&quot; /&gt;\n        &lt;min value=&quot;1&quot; /&gt;\n        &lt;fixedUri value=&quot;http://loinc.org&quot; /&gt;\n    &lt;/element&gt;\n    &lt;element&gt;\n        &lt;path value=&quot;Encounter.type.coding.system&quot; /&gt;\n        &lt;name value=&quot;sliceTextA.SNOMED.system&quot; /&gt;\n        &lt;min value=&quot;1&quot; /&gt;\n        &lt;fixedUri value=&quot;http://snomed.info/sct&quot; /&gt;\n    &lt;/element&gt;\n    &lt;element&gt;\n        &lt;path value=&quot;Encounter.type.text&quot; /&gt;\n        &lt;name value=&quot;sliceTextA.text&quot; /&gt;\n        &lt;min value=&quot;1&quot; /&gt;\n        &lt;fixedString value=&quot;TextA&quot; /&gt;\n    &lt;/element&gt;\n    &lt;element&gt;\n        &lt;path value=&quot;Encounter.type.text&quot; /&gt;\n        &lt;name value=&quot;sliceTextB.text&quot; /&gt;\n        &lt;min value=&quot;1&quot; /&gt;\n        &lt;fixedString value=&quot;TextB&quot; /&gt;\n    &lt;/element&gt;\n&lt;/differential&gt;\n</pre></div>",
        "id": 153823798,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461941255
    },
    {
        "content": "<p>so is it a true statement that the name of the sub-slice is used to distinguish the parent slice that it belongs to?</p>",
        "id": 153823800,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461941462
    },
    {
        "content": "<p>ex: name = \"parentSlice.childSlice\"</p>",
        "id": 153823801,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461941473
    },
    {
        "content": "<p>That's how I interpret it...there's some discussion around that point I think</p>",
        "id": 153823802,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461941502
    },
    {
        "content": "<p>Also, some servers will choke on this differential because is doesn't provide all the implied paths (e.g. path:\"Encounter.type.coding\", name:\"sliceTextA.LOINC\")</p>",
        "id": 153823803,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461943401
    },
    {
        "content": "<p>There's no connection between the names of the slices and the names a nested element sliced inside a slice on that element</p>",
        "id": 153823805,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461943995
    },
    {
        "content": "<p>if you are re-slicing a slice in a derived profile, then there's rules. But nested slices are entirely separete</p>",
        "id": 153823806,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461944063
    },
    {
        "content": "<p>except that names are unique within a profile, so I slice a, and then I slice a(1).b.c and a(2).b.c, then the slices on c must all have different names, even though they are defined independently within each slice</p>",
        "id": 153823807,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461944145
    },
    {
        "content": "<p>so if there is no connection between the slice names, how could you know that slice a.b.c belongs to slice a(1).b</p>",
        "id": 153823833,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1461951582
    },
    {
        "content": "<p>and yet another reason for <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9843&amp;start=0\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9843&amp;start=0\">http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9843&amp;start=0</a></p>",
        "id": 153823852,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461964067
    },
    {
        "content": "<p>Basically (I think) <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> is asserting that each element (at any nesting level) is sliced independently, and there's a cartesian product kind of combination that would then have to be limited by constraint.  If you slice Element A sliced into A1 and A2 and then slice A.B into B1 and B2 and then slice A.B.C into C1 and C2, you'd have 3^3 combinations (A.B.C, A.B.C1, A.B.C2, A.B1.C, A.B1.C1,...,A1.B.C, A1.B.C1,...,A2.B2.C2)</p>",
        "id": 153823855,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461964544
    },
    {
        "content": "<p>This is pretty untenable I think...</p>",
        "id": 153823856,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461964690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> was this your understanding too?</p>",
        "id": 153823857,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461964754
    },
    {
        "content": "<p>Consider this scenario:<br>\nIn a profile (my-patient) I slice Patient.identifer by @profile into MRN and SSN.  The SSN Identifier profile includes an extension for issuingMethod.</p>\n<p>In this scenario, how do I set something on issuingMethod.valueCodeableConcept.text? Use an element with:<br>\na) name: \"SSN.issuingMethod.valueCodeableConcept.text\"<br>\nb) name: \"issuingMethod.valueCodeableConcept.text\" - is this legal? issuingMethod appears only in the type profile for SSN.</p>",
        "id": 153823858,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461965089
    },
    {
        "content": "<p>Effectively, without name:\"sliceA.sliceB.C\", slicing anything inside of an extension is ... hard?</p>",
        "id": 153823859,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1461965708
    },
    {
        "content": "<p>I don't see why it's untenable</p>",
        "id": 153823924,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461984637
    },
    {
        "content": "<p>what is true is that the slice id is not in the path, so there' s a duality in the structure, in that something is implicit in the sturcture not explicit in the path (that's Chris's task). So I see how that's annoying but I don't see why that makes any genuine difference here - you slice the lower level like you slice anything else</p>",
        "id": 153823925,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1461984752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> I don't see the alternative.</p>",
        "id": 153823935,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461998006
    },
    {
        "content": "<p>The alternative is composing names as in my example (name:\"SliceAName.SliceBName\").</p>",
        "id": 153823963,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1462066077
    },
    {
        "content": "<p>Maybe \"untenable\" is a bit strong...what it prevents is specialization of slices (such as my identifier example) where you might want to require an extension on one slice but not another.</p>",
        "id": 153823965,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1462066737
    },
    {
        "content": "<p>I think you're just commenting about the pathing issue, not the way things actually work</p>",
        "id": 153823966,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462073103
    },
    {
        "content": "<p>agree with <span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span>'s last comment. this is the exact scenario I'm talking about and I just don't see how to implement it</p>",
        "id": 153824082,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1462146263
    },
    {
        "content": "<p>\"where you might want to require something on one slice, but not another\"</p>",
        "id": 153824083,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1462146275
    },
    {
        "content": "<p>definitely need a concrete example of sub-slices</p>",
        "id": 153824084,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1462146293
    },
    {
        "content": "<p>otherwise I'm going to have to implement it the best way I see, which is to use path'd names (ex: \"SliceA.SliceB\"), until I get a clear understanding of how to handle this</p>",
        "id": 153824085,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1462146327
    },
    {
        "content": "<p>I'd also argue that the flattened hierarchy of elements on a profile is making this much more difficult than it needs to be</p>",
        "id": 153824086,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1462146364
    },
    {
        "content": "<p>if ElementDefinition could contain \"children:ElementDefinition\", then I think we would save a great deal of implementation logic trying to figure out where things belong</p>",
        "id": 153824087,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1462146401
    },
    {
        "content": "<p>well that last idea is definitely just moving the issue around </p>",
        "id": 153824093,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462156059
    },
    {
        "content": "<p>if I'm going to write an example, it needs to be a useful real world example. Where's an example of where you slice something inside a slice differently per slice? </p>",
        "id": 153824094,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462156147
    },
    {
        "content": "<p>Real world I've got:  slicing Patient.identifier by system and then requiring a particular extension in one slice but not another.</p>",
        "id": 153824154,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1462199912
    },
    {
        "content": "<p>This is possible now only by slicing by @profile with type profiles for each identifier slice...</p>",
        "id": 153824155,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1462199958
    },
    {
        "content": "<p>Yah. I'd agree with that real-world scenario.</p>",
        "id": 153824156,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1462200975
    },
    {
        "content": "<p>Another could be having a patient with two slices for contact, where one slice has a sub-slice for address of X, and another slice has address of Y</p>",
        "id": 153824158,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1462201125
    },
    {
        "content": "<p>another could be a MedicationAdministration that has two slices for dosage, where one dosage has a slice for site to be from X value set, and the other has a slice for site to be from Y value set</p>",
        "id": 153824159,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1462201283
    },
    {
        "content": "<p>I'll work on them tonight</p>",
        "id": 153824172,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462213561
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , any update on this?</p>",
        "id": 153824360,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1462293822
    },
    {
        "content": "<p>sorry, I didn't get to it - the character thing distracted me. I'll do it this afternoon.</p>",
        "id": 153824361,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462293857
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I look forward to seeing it (from the edge of my seat LOL)</p>",
        "id": 153824383,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1462305982
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , any update on this? :)</p>",
        "id": 153824466,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1462371455
    },
    {
        "content": "<p>sigh. just too mcuh going on....</p>",
        "id": 153824471,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462372648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Give me a hint and I'll take a shot - you can just verify.</p>",
        "id": 153824480,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1462375195
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , can you give <span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span>  and I hint (as he says)? I'm going to have to implement a solution here, but would prefer to have at least a \"generally correct\" implementation, so that I don't have to completely re-write this logic later</p>",
        "id": 153824657,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1462459254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191505\">@Sean McIlvenna</span> Here's my attempt following a discussion with <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> .  He'll have to verify when he gets a moment (HL7 working group meeting in progress this week).</p>\n<p><a href=\"https://github.com/chrisgrenz/FHIR-Primer/wiki/Slice-within-Slice-DSTU2\" target=\"_blank\" title=\"https://github.com/chrisgrenz/FHIR-Primer/wiki/Slice-within-Slice-DSTU2\">https://github.com/chrisgrenz/FHIR-Primer/wiki/Slice-within-Slice-DSTU2</a></p>",
        "id": 153825373,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1462654372
    },
    {
        "content": "<p>I need to slice my complex extension, ie reslice. <a href=\"https://www.hl7.org/fhir/profiling.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/profiling.html\">https://www.hl7.org/fhir/profiling.html</a> says I should call my slices <code>originalSlice/newSlice</code> per <a href=\"https://www.hl7.org/fhir/profiling.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/profiling.html\">https://www.hl7.org/fhir/profiling.html</a>:</p>\n<blockquote>\n<p>there's a need to reference both the name of the original slice from Profile B as well as to define a name for the slice defined within Profile C. This is done by separating the names using \"/\"</p>\n</blockquote>\n<p>But <code>eld-16</code> limits <code>sliceName</code> to exclude forward slashes: <code>^[a-zA-Z0-9\\\\-\\\\_]+$</code></p>\n<p>Who is incorrect here, the profiling page or the constraint?</p>",
        "id": 153884962,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1492509536
    },
    {
        "content": "<p>I think that the profiling page is correct, reslice name separator is defined as a forward slash. So I guess the eld-16 invariant needs to be updated.</p>",
        "id": 153884964,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1492510613
    },
    {
        "content": "<p>Ouch.  Please submit a change request.  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> - is this something we need to get out in the technical correction?</p>",
        "id": 153884997,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1492529990
    },
    {
        "content": "<p>yes</p>",
        "id": 153885018,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1492549097
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13217\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13217\">GF#13217</a></p>",
        "id": 153885048,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1492570804
    }
]