[
    {
        "content": "<p>I can't find anything in the standard about how to interpret sorting on a reference-type parameter. Like <code>/Patient?_sort=practitioner</code> or <code>/Appointment?_sort=location</code>. I'd like to retrieve a list of Patient resources sorted by their attached careProvider's name (i.e. by the fallback 'display' value for each reference) but I'm not sure how to structure that query under the standard. Patient sorted on practitioner seems like it could work, but the implementation of that seems somewhat undefined.</p>",
        "id": 153853021,
        "sender_full_name": "John Calvin Young",
        "timestamp": 1476739912
    },
    {
        "content": "<p>Anyone have any experience implementing reference parameters as sorts, or have thoughts on the intended semantics?</p>",
        "id": 153853022,
        "sender_full_name": "John Calvin Young",
        "timestamp": 1476739979
    },
    {
        "content": "<p>this is not presently defined, I'm afraid. </p>",
        "id": 153853023,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1476739989
    },
    {
        "content": "<p>That's unfortunate. Any alternate suggestions? I could query Practitioner, sort by name, and revInclude Patient:careProvider, but that feels rather painful when what I'm really curious about is patient.</p>",
        "id": 153853024,
        "sender_full_name": "John Calvin Young",
        "timestamp": 1476740226
    },
    {
        "content": "<p>The obvious way to make this work would be to allow sorting on a chained parameter - so Patient?_sort=practitioner.name.  But I don't think we support that at the moment.</p>",
        "id": 153853034,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1476756673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> I agree. Chained sort parameters seem to be the obvious solution...but I saw a conversation from a while back about how bad that might be to support in a generalized approach. Maybe when formalizing it, require _include of a resource if chaining into it for sort purposes?</p>\n<p>I'm managing a client application that badly needs this sort of thing (no pun intended) and coordinating with the server implementation team. Just trying to figure out how to formulate some very obvious queries for consumption over FHIR. The search api feels very constraining right now.</p>",
        "id": 153853087,
        "sender_full_name": "John Calvin Young",
        "timestamp": 1476803173
    },
    {
        "content": "<p>search is an impossible problem - it's incredibly powerful and scary from a server perspective, but whatever we define, it's not enough from a client perspectice. You can certainly go ahead and do sort by chained parameter as a private agreement, and you can propose a task to allow it; I don't know how it will go as a proposal </p>",
        "id": 153853102,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1476819434
    }
]