[
    {
        "content": "<p>Hi all, is the <code>packages.ini</code> file used in <code>.fhir/packages</code> documented anywhere?  I want to make sure I am using it correctly when downloading packages.  Thanks! (tagging <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> for best-guess-at-who-knows-what-this-is =)</p>",
        "id": 271624108,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1644607077
    },
    {
        "content": "<p>not documented anywhere. I think I'm the only one that uses it. And it's purely decorative - it caches the package size (sum of all the files in bytes) and the date it was downloaded (or first seen, if something else installs it). </p>\n<p>The only use of both these fields is if someone brings up my package cache browser, and then they have columns for package size and download date</p>",
        "id": 271624574,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1644607315
    },
    {
        "content": "<p>Hmm.. I assume it is preferable to use it for things like code-gen (instead of the separate cache it maintains today).  But, that means I need to be able to download and add to it.</p>\n<p>I am trying to reconcile the tagging/structure I used for published/ci/local with what is present.  Overall, it is straightforward, but I was grabbing the <code>version.info</code> from CI builds to figure out if I need to re-download the build or not.  I assume I should switch over to <code>package.json:date</code> for the logic?</p>",
        "id": 271625161,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1644607601
    },
    {
        "content": "<p>well, here's my logic:</p>",
        "id": 271626086,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1644608044
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Java\"><pre><span></span><code><span class=\"kd\">private</span> <span class=\"n\">NpmPackage</span> <span class=\"nf\">checkCurrency</span><span class=\"p\">(</span><span class=\"n\">String</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">NpmPackage</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">IOException</span> <span class=\"p\">{</span>\n    <span class=\"n\">checkBuildLoaded</span><span class=\"p\">();</span>\n    <span class=\"c1\">// special case: current versions roll over, and we have to check their currency</span>\n    <span class=\"k\">try</span> <span class=\"p\">{</span>\n      <span class=\"n\">String</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">ciList</span><span class=\"p\">.</span><span class=\"na\">get</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">);</span>\n      <span class=\"n\">JsonObject</span> <span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"n\">JsonTrackingParser</span><span class=\"p\">.</span><span class=\"na\">fetchJson</span><span class=\"p\">(</span><span class=\"n\">Utilities</span><span class=\"p\">.</span><span class=\"na\">pathURL</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"s\">\"package.manifest.json\"</span><span class=\"p\">));</span>\n      <span class=\"n\">String</span> <span class=\"n\">currDate</span> <span class=\"o\">=</span> <span class=\"n\">JSONUtil</span><span class=\"p\">.</span><span class=\"na\">str</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">,</span> <span class=\"s\">\"date\"</span><span class=\"p\">);</span>\n      <span class=\"n\">String</span> <span class=\"n\">packDate</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"na\">date</span><span class=\"p\">();</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">currDate</span><span class=\"p\">.</span><span class=\"na\">equals</span><span class=\"p\">(</span><span class=\"n\">packDate</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// nup, we need a new copy</span>\n      <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 271626102,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1644608051
    },
    {
        "content": "<p>in english: I use the date stated in the json at {url}/package.manifest.json where {url} is the source of the package, and I compare that to the date in the package manifest. And if all that fails somehow, then I don't check currency at all</p>",
        "id": 271626321,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1644608167
    },
    {
        "content": "<p>Sweet, thanks!  I assume I am correct in:</p>\n<ul>\n<li><code>#{number}</code> means published,</li>\n<li><code>#current</code> means CI-Build, and</li>\n<li><code>#dev</code> means local machine build?</li>\n</ul>",
        "id": 271626877,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1644608479
    },
    {
        "content": "<p>yes. that is documented somewhere. dev falls back to current if there's no local build</p>",
        "id": 271627251,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1644608666
    },
    {
        "content": "<p>Good stuff. I'll update mine to match, thanks.</p>",
        "id": 271627653,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1644608886
    }
]