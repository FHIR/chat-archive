[
    {
        "content": "<p>Is there a possibility for doing such a search in one request?:<br>\nAll ServiceRequests which don't have a Task.basedOn pointing to them</p>",
        "id": 159500352,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1551266121
    },
    {
        "content": "<p>i think i need a search filter (which our hapi doesn't support)</p>",
        "id": 159500474,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1551266280
    },
    {
        "content": "<p>In aidbox you can use SQL on FHIR for that :)</p>",
        "id": 159503992,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1551269911
    },
    {
        "content": "<p>I don't see a way of creating such a query. _has in the regular search api does not accept any modifiers, like :not, therefore is not an option. In my opinion not even _filter would solve your issue. It is still an open question how to combine _filter and _has (See <a href=\"#narrow/stream/179166-implementers/topic/_has.20.26.20_filter\" title=\"#narrow/stream/179166-implementers/topic/_has.20.26.20_filter\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/_has.20.26.20_filter</a>)</p>",
        "id": 159545096,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1551295959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span> Which parameter do you use for the sql statement? I'm interested in the solution!</p>",
        "id": 159545169,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1551296017
    },
    {
        "content": "<p>select s.* from ServiceRequest s<br>\nleft join Task t on <a href=\"http://s.id\" target=\"_blank\" title=\"http://s.id\">s.id</a> = t.resource#&gt;&gt;'{basedOn, id}'<br>\nwhere <a href=\"http://t.id\" target=\"_blank\" title=\"http://t.id\">t.id</a> is null;</p>",
        "id": 159579814,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1551331024
    },
    {
        "content": "<p>Sorry, I meant how do you pass this query from the client to the server in the REST API?</p>",
        "id": 159582250,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1551334635
    },
    {
        "content": "<p>In aidbox you can create a stored query, which will be exposed as custom search parameter or custom operation</p>",
        "id": 159590540,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1551345512
    },
    {
        "content": "<p>Sounds like <a href=\"http://hl7.org/fhir/R4/search.html#query\" target=\"_blank\" title=\"http://hl7.org/fhir/R4/search.html#query\">_query</a></p>",
        "id": 159590657,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1551345612
    },
    {
        "content": "<blockquote>\n<p>I don't see a way of creating such a query. _has in the regular search api does not accept any modifiers, like :not</p>\n</blockquote>\n<p>_has with a :not modifier sounds great. Is there a strong argument against _has with a :not modifier?</p>",
        "id": 159629076,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1551371350
    },
    {
        "content": "<p>i stumbled today on a related _has question:<br>\nHow to query only Patients which have a Task pointing to them?<br>\nWe ended up with: <code>{{baseurl}}/Patient?_has:Task:patient:code=[some_code]</code>, which works fine. But how to get all Patients with a referencing Task without independent of a code or other criteria? <code>{{baseurl}}/Patient?_has:Task:patient</code>doesn't work</p>",
        "id": 159629828,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1551371856
    },
    {
        "content": "<p>You’re asking that joins be included in the API.  Is that reasonable?  Why not fetch all the Tasks, create an array of patientIds from them, and then fetch that array of Patients?  You’re wanting the API to do something that it’s not really designed to do.</p>",
        "id": 159641027,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1551380007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span> You can always reverse chain on _id:missing=false. That's a criteria which should work without being an restriction to which resources to include. <code>{{BASE_URL}}/Patient?_has:Task:patient:_id:missing=false</code></p>",
        "id": 159695159,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1551434217
    },
    {
        "content": "<p>Regarding your other question: As much as I would like to have a way of expressing these queries in FHIR, I am not in favour of adding more complexity to the current way reverse chaining is handled. It's hard enough to handle the current modifiers. I would guess that it would not be completely sufficient to 'just' have a :not modifier on _has, but that you want to go one more level deeper and even restrict this result set, e.g. '_has:Task:patient:not=false' + another condition.</p>",
        "id": 159695803,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1551434578
    },
    {
        "content": "<p>We should rather explore on how to make _filter work and start implementing it. Or follow <span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span> idea of using SQL on FHIR.</p>",
        "id": 159695893,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1551434641
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 161333113,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1553164675
    },
    {
        "content": "<p>Hi, I'd created a query to retrieve the patients which have a DiagnosticReport where the code of diagnosis is XXX. So it's really simple to do following the examples,  But it doesnt'work. The spec shows two search parameters to reference the Patient resource. So I tried that;<br>\n<code>url/Patient?_has:DiagnosticReport:subject:code=[snomedCode]</code><br>\n<code>url/Patient?_has:DiagnosticReport:patient:code=[snomedCode]</code></p>\n<p>Some hint?</p>",
        "id": 172214837,
        "sender_full_name": "Marcelo Cabello",
        "timestamp": 1564661671
    },
    {
        "content": "<p>what does doesn't work mean? which server?</p>",
        "id": 172215386,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564662188
    },
    {
        "content": "<p>I was trying on a local server based on hapi-fhir-jpaserver-starter. <br>\nI replied the same request on UHN/HAPI Server (both DSTU3 &amp; R4) and works well!!<br>\nI notice the difference that Patients are in another server, wich maybe the references didn't resolved. I'll try again with local Patients to see what happens. <br>\nThanks!!!</p>",
        "id": 172216239,
        "sender_full_name": "Marcelo Cabello",
        "timestamp": 1564663030
    },
    {
        "content": "<p>After move the Patients resources to my local endpoint and then update the references to patients in DiagnosticReport, the search works fine!</p>",
        "id": 172234267,
        "sender_full_name": "Marcelo Cabello",
        "timestamp": 1564675379
    }
]