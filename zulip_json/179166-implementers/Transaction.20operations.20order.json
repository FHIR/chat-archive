[
    {
        "content": "<p>Operations in transaction bundle have explicit order.   I'm still very curious why do we need to force this rearrangement by HTTP methods - <a href=\"https://www.hl7.org/fhir/http.html#trules\" target=\"_blank\" title=\"https://www.hl7.org/fhir/http.html#trules\">https://www.hl7.org/fhir/http.html#trules</a>? It can just puzzle users. As well for testing, I would like to run  create, read, search and delete  operations in transaction and rollback - why this is impossible?</p>",
        "id": 161184905,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1553025701
    },
    {
        "content": "<blockquote>\n<p>force this rearrangement by HTTP methods</p>\n</blockquote>",
        "id": 161187614,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553027650
    },
    {
        "content": "<p>I'm not sure what that means</p>",
        "id": 161187682,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553027699
    },
    {
        "content": "<p>Generally, we do not say that you cannot implemnent some kind of transaction manager, but we have agreed not to describe that as part of the core standard</p>",
        "id": 161187694,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553027703
    },
    {
        "content": "<p>I mean this</p>",
        "id": 161189678,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1553029309
    },
    {
        "content": "<p>Because of the rules that a transaction is atomic where all actions pass or fail together and the order of the entries doesn't matter, there is a particular order in which to process the actions:</p>\n<ul>\n<li>Process any DELETE interactions</li>\n<li>Process any POST interactions</li>\n<li>Process any PUT or PATCH interactions</li>\n<li>Process any GET or HEAD interactions</li>\n<li>Resolve any conditional references</li>\n</ul>\n<p>If any resource identities (including resolved identities from conditional update/delete) overlap in steps 1-3, then the transaction SHALL fail.</p>",
        "id": 161189752,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1553029343
    },
    {
        "content": "<p>Why   <code>the order of the entries doesn't matter</code>?</p>",
        "id": 161189829,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1553029425
    },
    {
        "content": "<p>This is a simplified view of a transaction - in my test case - order does matter.</p>",
        "id": 161189914,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1553029483
    },
    {
        "content": "<p>In SQL transactions - order matters because next expression can expect previous one.</p>",
        "id": 161189984,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1553029559
    },
    {
        "content": "<p>I think at least it should be called out and possibly added element/extension to cap statements</p>",
        "id": 161193552,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553032218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span>  <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>   <span class=\"user-mention\" data-user-id=\"191757\">@Christiaan Knaap</span>  what is your opinion about this?</p>",
        "id": 161224923,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1553070005
    },
    {
        "content": "<p>I think the idea behind the specific order that's described by the spec is that it's the order that makes sense for the fairly common use-case of processing data from external non-FHIR sources (e.g. Hl7v2.x messages) by converting data sources into a transaction bundle that represents the appropriate conversion logic.</p>\n<p>Using a transaction in order to provide automatic cleanup for unit tests is a neat idea- why not just specify a custom extension for your server though that forces the transaction to roll back at the end?</p>",
        "id": 161234253,
        "sender_full_name": "James Agnew",
        "timestamp": 1553078961
    },
    {
        "content": "<p>I understand from this thread that you (<span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span> ) would prefer to have the client put the entries in the transaction in the right order if that matters to him (or is a FHIR client a 'her'?). Is that correct?</p>",
        "id": 161284438,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1553111332
    },
    {
        "content": "<p>i’m talking about server, to process operations in transaction in original order, which provided in bundle, because sometimes order matters</p>",
        "id": 161318402,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1553146613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span> so not the actual order in the XML or Json, right (as order is not guaranteed pr. spec at least in XML)? You would like to, regardless of the order of the interactions in the serialized XML or Json, to process it in the order as you have outlined (meaning that you would possibly rearrange the elements received to match your suggestion )?</p>",
        "id": 161392027,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1553199409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span>  can you elaborate on this - <code>as order is not guaranteed pr. spec at least in XML</code>? Entry in bundle is a sequence with guaranteed order both in xml and json?</p>",
        "id": 161417536,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1553226167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> can we have an explanatory block in spec about how this rules works and why with examples?  Another small problem is that HTTP method is not very robust - because we can do a search by POST and we do not know semantic of other Custom Operations on FHIR server.</p>",
        "id": 161417964,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1553226817
    },
    {
        "content": "<p>ok catching up with this... </p>\n<ul>\n<li>why does order matter?</li>\n<li>the key is that you must be able to do forward references in the transaction that are successfully resolved</li>\n<li>changing the way transaction works so it's order based has many problems around failing as a group</li>\n</ul>",
        "id": 161420651,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553231036
    },
    {
        "content": "<p>I don't really like your use case, btw</p>",
        "id": 161420702,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553231077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span> I forgot all about sequence <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> <span aria-label=\"gun\" class=\"emoji emoji-1f52b\" role=\"img\" title=\"gun\">:gun:</span></p>",
        "id": 161429139,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1553243278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  forward reference resolution probably should be implemented  in different way, because resources can mutually refer each other</p>",
        "id": 161472497,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1553279672
    },
    {
        "content": "<p>can you tell more about many problems as a group?</p>",
        "id": 161472677,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1553279862
    },
    {
        "content": "<p>Why you do not like my example - it’s a good way to test server without side effects</p>",
        "id": 161472821,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1553279981
    },
    {
        "content": "<p>because server needs to audit the operation, and there's always side effects. I guess I don't like the idea because for me, most operations operate on structures outside the acid bounds of the transaction</p>",
        "id": 161484838,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553289463
    },
    {
        "content": "<blockquote>\n<p>resources can mutually refer each other</p>\n</blockquote>\n<p>that's why transaction is how it is. Not sure what other way would be better.</p>",
        "id": 161484919,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553289520
    },
    {
        "content": "<p>and I don't remember all the details about the discussion around transactions. <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> might remember better than I</p>",
        "id": 161484938,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553289542
    },
    {
        "content": "<p>Specified ordering becomes very problematic when extended operations are taken into account. We are considering adding our own extension on a bundle to use client-specified ordering for running transaction bundles. <br>\nFor example, one of our operations sometimes we need to run before PUT and sometimes after.</p>",
        "id": 191572636,
        "sender_full_name": "Ivan Dubrov",
        "timestamp": 1585033985
    }
]