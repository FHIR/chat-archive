[
    {
        "content": "<p>I'm trying to improve the string regex. For the non-unicode characters, this is the correct regex:</p>",
        "id": 153979003,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532829042
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[\\S\\r\\n\\t ]*\n</pre></div>",
        "id": 153979004,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532829059
    },
    {
        "content": "<p>that is, any character, or end of line or tab or space</p>",
        "id": 153979005,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532829074
    },
    {
        "content": "<p>but I can't be convinced from reading the doco what that means for unicode whitespace characters</p>",
        "id": 153979006,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532829122
    },
    {
        "content": "<p>maybe this is better:</p>",
        "id": 153979007,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532829131
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[\\r\\n\\t\\x{0020}-\\x{FFFF}]*\n</pre></div>",
        "id": 153979008,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532829203
    },
    {
        "content": "<p>or</p>",
        "id": 153979009,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532829207
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[\\r\\n\\t\\u0020-\\uFFFF]*\n</pre></div>",
        "id": 153979010,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532829215
    },
    {
        "content": "<p>depending your flavor.... ;-(</p>",
        "id": 153979011,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532829223
    },
    {
        "content": "<p>I think that the latter is the intent, but is there a correct standard syntax?</p>",
        "id": 153979012,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532829247
    },
    {
        "content": "<p>all very messy....</p>",
        "id": 153979013,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532829283
    },
    {
        "content": "<p>According to the dotNET documentation, <code>\\S</code> (non-whitespace) is a shortcut for <code>[^\\f\\n\\r\\t\\v\\x85\\p{Z}]</code>where `\\p{Z}' represents a Unicode block/category that \"matches any separator character\":<br>\n<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#non-white-space-character-s\" target=\"_blank\" title=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#non-white-space-character-s\">https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#non-white-space-character-s</a></p>",
        "id": 153979326,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1532943184
    },
    {
        "content": "<p>\\x85? weird</p>",
        "id": 153979334,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532946833
    },
    {
        "content": "<p>does that help though?</p>",
        "id": 153979335,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532946839
    },
    {
        "content": "<p>According to MSDN, <code>\\x85</code> represents \"The ellipsis or NEXT LINE (NEL) character (â€¦), \\u0085.\":<br>\n<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions\" target=\"_blank\" title=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions\">https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions</a></p>",
        "id": 153979337,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1532948625
    },
    {
        "content": "<p>Never encountered this one in the wild</p>",
        "id": 153979338,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1532948652
    },
    {
        "content": "<p>What about for non- dotNet implementations of RegEx parsers?   This website has a RegEx tester (<a href=\"https://regex101.com/\" target=\"_blank\" title=\"https://regex101.com/\">https://regex101.com/</a> ) and they list \\s as:<br>\n\\s matches any whitespace character (equal to [\\r\\n\\t\\f\\v ])</p>\n<p>[The ellipsis might be auto-generated by MS-Word when you type three '.' together; I think Word does something similar when you use single quotes, it turns them into left apostrophe and right apostrophe.]</p>",
        "id": 153979492,
        "sender_full_name": "John Silva",
        "timestamp": 1532972279
    },
    {
        "content": "<p>so it seems to me that regex is just basically broken when it comes to unicode.</p>",
        "id": 153979516,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532975968
    },
    {
        "content": "<p>Not sure that's true -- some simple Google searches seem to indicate there is more RegEx Unicode support than we typically think of (or have to deal with).   </p>\n<p>This MS page talks about the difference between how .NET and JavaScript (ECMAScript) handle \\s:<br>\n<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#white-space-character-s\" target=\"_blank\" title=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#white-space-character-s\">https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#white-space-character-s</a></p>\n<p>If ECMAScript-compliant behavior is specified, \\s is equivalent to [ \\f\\n\\r\\t\\v]. For information on ECMAScript regular expressions, see the \"ECMAScript Matching Behavior\" section in Regular Expression Options.</p>\n<p>Then there's this page that talks about a bunch of 'fancy' RegEx patterns for Unicode support:</p>\n<p><a href=\"https://www.regular-expressions.info/unicode.html\" target=\"_blank\" title=\"https://www.regular-expressions.info/unicode.html\">https://www.regular-expressions.info/unicode.html</a></p>\n<p>Then the question becomes; how much Unicode RegEx support does FHIR (or FHIR test servers) want/need to support?</p>",
        "id": 153979522,
        "sender_full_name": "John Silva",
        "timestamp": 1532976802
    },
    {
        "content": "<p>so it appears to me that the implementations are split between \\p and \\x</p>",
        "id": 153979524,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532976964
    },
    {
        "content": "<p>and the specific question is this particular regex, not a general question</p>",
        "id": 153979525,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532976971
    }
]