[
    {
        "content": "<p>Hi. Could you help me to understand the semantic behind _include/_revinclude?</p>\n<p>I have next model: CarePlan which points to Tasks (via activity-reference search-param) and Goals (via goal search-param). And I have Provenance resources, which point to all three my resource types (CarePlan, Task, Goal) via target search-param.</p>\n<p>As I understood the doc, non-iterate <code>_include/_revinclude</code> depend only on the first resourceType we search on.<br>\n<code>:iterate</code> modifier says, that <code>_include/_revinclude</code> should be processed based on gathered result from previous includes.</p>\n<p>So, it looks like the order of <code>_include/_revinclude</code> in query-string only matter in the case we have <code>:iterate</code> modifier. Is it correct?</p>\n<p>Here are few examples:</p>\n<ol>\n<li>These requests will return the same results, which is bundle of CarePlans and Tasks&amp;Goals related to. So, the order or _include doesn't matter.</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>GET /CarePlan?_include=activity-reference,goal\nGET /CarePlan?_include=goal,activity-reference\nGET /CarePlan?_include=activity-reference&amp;_include=goal\nGET /CarePlan?_include=goal&amp;_include=activity-reference\n</code></pre></div>\n<ol start=\"2\">\n<li>Same results again. Same as previous one, but Provenance resources related to CarePlan will be added too.</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>GET /CarePlan?_include=activity-reference,goal&amp;_revinclude=Provenance:target\nGET /CarePlan?_revinclude=Provenance:target&amp;_include=activity-reference,goal\nGET /CarePlan?_include=activity-reference,goal&amp;_revinclude:iterate=Provenance:target:CarePlan\nGET /CarePlan?_revinclude:iterate=Provenance:target&amp;_include=activity-reference,goal\n</code></pre></div>\n<ol start=\"3\">\n<li>This one will return all CarePlans, related Goals,Task and Provenances related to CarePlans,Goals &amp; Tasks.</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>GET /CarePlan?_include=activity-reference,goal&amp;_revinclude:iterate=Provenance:target\n</code></pre></div>\n<ol start=\"4\">\n<li>This one will return all CarePlans, related Goals,Task and Provenances related to CarePlans &amp; Goals (not Tasks).</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>GET /CarePlan?_include=goall&amp;_revinclude:iterate=Provenance:target&amp;_include=activity-reference\n</code></pre></div>\n<p>P.S. By the same results per group I mean the set of returned resources, they may be returned in any order in the entry.</p>",
        "id": 255728498,
        "sender_full_name": "Vlad Ganshin",
        "timestamp": 1633087563
    },
    {
        "content": "<p>_(rev)include (without using :iterate) will only be related to the inclusion of resources referencing/referenced by the focal resource of the search, therefore the order in which one _(rev)includes doesn't matter one bit. <br>\nWith :iterate, the sequence also doesn't matter. The server will have to keep on expanding all :iterate includes (repeatedly, all of the :iterates, again and again and again) until it has reached the full result set.</p>",
        "id": 255747146,
        "sender_full_name": "René Spronk",
        "timestamp": 1633096366
    },
    {
        "content": "<p>This is by design, partly because the underlying web standards for URLs states that the order of the search parameters may be swapped around at will.</p>",
        "id": 255747372,
        "sender_full_name": "René Spronk",
        "timestamp": 1633096448
    },
    {
        "content": "<p>Thank you! It's clear now. One more thing I read up from the doc</p>\n<blockquote>\n<p>_include and _revinclude parameters do not include multiple values. Instead, the parameters are repeated for each different include criteria.</p>\n</blockquote>\n<p><a href=\"http://hl7.org/fhir/search.html#revinclude\">http://hl7.org/fhir/search.html#revinclude</a><br>\nSo, samples with multiple values (like <code>GET /CarePlan?_include=activity-reference,goal</code>) are invalid.</p>",
        "id": 255771768,
        "sender_full_name": "Vlad Ganshin",
        "timestamp": 1633106034
    },
    {
        "content": "<p>Iterate means you keep re-running the iterates until you quit finding new resources to include - or the server decides it's had enough fun iterating and quits for performance reasons.</p>",
        "id": 255830652,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633138888
    },
    {
        "content": "<p>And yes, _include=activyt-reference,goal would be invalid</p>",
        "id": 255830703,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633138925
    }
]