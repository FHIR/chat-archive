[
    {
        "content": "<p>For context, see <a href=\"https://wolandscat.net/2019/05/06/a-fhir-experience-models-or-just-definitions/#more-1524\" target=\"_blank\" title=\"https://wolandscat.net/2019/05/06/a-fhir-experience-models-or-just-definitions/#more-1524\">https://wolandscat.net/2019/05/06/a-fhir-experience-models-or-just-definitions/#more-1524</a>. </p>\n<p>My question: do you think that it would be useful for us to introduce at least an abstract ancestor for Patient/RelatedPerson/Practitioner? Vote with <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  or <span aria-label=\"thumbs down\" class=\"emoji emoji-1f44e\" role=\"img\" title=\"thumbs down\">:thumbs_down:</span> </p>\n<p>Note: I have not investigated yet whether this is actually possible - though I expect it is - nor do I know how far we can go given various operational constraints. Nor do I know how far I think we should go</p>",
        "id": 165055421,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557220889
    },
    {
        "content": "<p>Does it make sense for resources that follow the workflow pattern?  <a href=\"https://www.hl7.org/fhir/workflow.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/workflow.html\">https://www.hl7.org/fhir/workflow.html</a></p>",
        "id": 165057511,
        "sender_full_name": "John Silva",
        "timestamp": 1557223072
    },
    {
        "content": "<p>no, because the pattern semantics are looser that direct inheritance - the rules are much harder for the second. I am generating patterns into HAPI, but it's a more flexible pattern</p>",
        "id": 165057854,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557223429
    },
    {
        "content": "<p>Are you thinking of introducing another inheritance layer, or adding another design pattern?</p>",
        "id": 165070918,
        "sender_full_name": "Nick Radov",
        "timestamp": 1557236103
    },
    {
        "content": "<p>Strongly the first, but may fall back to the second.</p>",
        "id": 165071179,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557236300
    },
    {
        "content": "<p>Would Person have the same abstract ancestor?</p>",
        "id": 165071458,
        "sender_full_name": "Nick Radov",
        "timestamp": 1557236500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191447\">@Mark Kramer</span> has demonstrated the powerful benefits of introducing additional (abstract) base classes. As a software developer, common bases classes and interfaces usually make my life easier. So in general, I'd certainly like to investigate this approach.</p>",
        "id": 165072841,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1557237477
    },
    {
        "content": "<p>I don't know about Person. Probably not, but needs investigation</p>",
        "id": 165073167,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557237699
    },
    {
        "content": "<p>I like the idea from an architectural purity standpoint provided that it will be mostly just used as part of building the specification and largely hidden from regular implementers. One of the problems we had with V3 adoption is that some implementers who lacked a theoretical CS background simply didn't understand how RIM inheritance worked. So as long as we still end up with a single Patient resource page containing all of the elements and don't have to look up some common elements on a separate page for the superclass, then I think this would be a positive change.</p>",
        "id": 165073926,
        "sender_full_name": "Nick Radov",
        "timestamp": 1557238268
    },
    {
        "content": "<p>I think I can do that.</p>",
        "id": 165079828,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557241729
    },
    {
        "content": "<p>but then the CS guys complain bitterly about the duplication and run around telling everyone how stupid you are ...</p>",
        "id": 165079858,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557241756
    },
    {
        "content": "<p>...and other CS persons argue that implementation inheritance is evil  <a href=\"http://whats-in-a-game.com/implementation-inheritance-is-evil/\" target=\"_blank\" title=\"http://whats-in-a-game.com/implementation-inheritance-is-evil/\">http://whats-in-a-game.com/implementation-inheritance-is-evil/</a> ...can I vote for both approaches? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 165081116,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1557242576
    },
    {
        "content": "<p>I think from a FHIR standpoint, this looks more like providing a common interface. However in concrete implementations of FHIR API libraries, this may - or may not - be implemented using implementation inheritance.</p>",
        "id": 165081374,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1557242748
    },
    {
        "content": "<p>i.e. I don't feel like this proposal would introduce the notion of implementation inheritance into the FHIR spec itself.</p>",
        "id": 165081470,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1557242804
    },
    {
        "content": "<p>it goes a bit further than a fancy wrapper interface. it does specifically propose that you would have inheritance - maybe an abstract ancestor called 'Actor' and then you would do Reference(Actor) instead of Reference(Patient | RelatedPerson | Practitioner) - this is much more than just decorating with an interface</p>",
        "id": 165081617,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557242885
    },
    {
        "content": "<p>The RIM lives on!</p>",
        "id": 165081745,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1557242972
    },
    {
        "content": "<p>Would the next step be Reference(Event) instead of Reference(Observation|Condition)?  sound like a bad idea to me.</p>",
        "id": 165085846,
        "sender_full_name": "Eric Haas",
        "timestamp": 1557245539
    },
    {
        "content": "<p>why would that be a bad idea?</p>",
        "id": 165085936,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557245602
    },
    {
        "content": "<p>I assumed this would be exposed to human eyeballs.   We dislike indirection and abstraction when all we want to see it what it refers to.</p>",
        "id": 165086349,
        "sender_full_name": "Eric Haas",
        "timestamp": 1557245861
    },
    {
        "content": "<p>well, to a certain point. Indrection is useful too. depends on balance ....</p>",
        "id": 165086841,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557246162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> that sounds more like a presentation issue, which can be addressed.</p>",
        "id": 165086923,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1557246235
    },
    {
        "content": "<p>So the problem this would potentially solve would be lack of consistency across resources, right?  Is the goal this solution seeks to achieve having consistently named and described elements in similar resources?</p>",
        "id": 165087363,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1557246514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191936\">@Michael Donnelly</span>  we already have a mechanism in place a  through workflow patterns.  ( but not for 'person' entities )</p>",
        "id": 165090780,
        "sender_full_name": "Eric Haas",
        "timestamp": 1557249028
    },
    {
        "content": "<p>right. these are outside workflow. But the patterns are very loose. I'm working with them now</p>",
        "id": 165092248,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557250093
    },
    {
        "content": "<p>How well is it working in your opinion, Eric?</p>",
        "id": 165094842,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1557251854
    },
    {
        "content": "<p>Thought exercise:  if we go down the rabbit hole of making abstract ancestor classes available as interoperable resources, where does that end?  I'm imagining chatter between multiple systems using all of the abstract classes presented by <span class=\"user-mention\" data-user-id=\"191447\">@Mark Kramer</span>, and am reminded of these AI systems that are inventing their own languages that needed to be shut down.  </p>\n<p>So I sort of agree with Eric Haas, that we need to keep the human readability element in place for the time being.  There will be someday in the future when these abstract classes are all made available, but the tooling isn't entirely in place for what we currently have.  Save the abstract ancestor classes for HL7 2030.</p>",
        "id": 165096944,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1557253246
    },
    {
        "content": "<p>It was a s#$%load of work for editors and it did help with consistency.  We also tabulated all the variations which is exposed in the build here. <a href=\"http://build.fhir.org/event.html#mappings\" target=\"_blank\" title=\"http://build.fhir.org/event.html#mappings\">http://build.fhir.org/event.html#mappings</a></p>",
        "id": 165097193,
        "sender_full_name": "Eric Haas",
        "timestamp": 1557253444
    },
    {
        "content": "<blockquote>\n<p>and am reminded of these AI systems that are inventing their own languages that needed to be shut down.</p>\n</blockquote>\n<p>What does that mean?</p>",
        "id": 165097277,
        "sender_full_name": "Eric Haas",
        "timestamp": 1557253512
    },
    {
        "content": "<p>by definition, abstract resources are not available as interoperable resources, since they can't exist directly</p>",
        "id": 165097455,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557253644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span>   Microsoft Labs had to shut down one of their experiments:<br>\n<a href=\"https://www.fastcompany.com/90132632/ai-is-inventing-its-own-perfect-languages-should-we-let-it\" target=\"_blank\" title=\"https://www.fastcompany.com/90132632/ai-is-inventing-its-own-perfect-languages-should-we-let-it\">https://www.fastcompany.com/90132632/ai-is-inventing-its-own-perfect-languages-should-we-let-it</a></p>\n<p>Meanwhile, the reference model introduced by Mark Kramer has abstract classes like <code>AlbuminGlobulinMRtoPtSerPlasQnLabObs</code>, <code>ComprehensiveMetabolic2000SerumOrPlasmaPanel</code>, and such.  I'm just trying to say that going down the path of abstract ancestors to it's logical conclusion may leave us somewhere we don't want to be.</p>",
        "id": 165098268,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1557254205
    },
    {
        "content": "<p>The RIM never allowed pointing to individuals independent of their role - you were always pointing to an AssignedEntity (Practitioner), RelatedEntity (RelatedPerson) or Patient.  The difference with the RIM is that you <em>always</em> had to point to a different class to convey information such as gender, birthDate, etc. - and all such demographics was available for everyone.  With FHIR we said \"very few implementers actually store data that way - there are usually separate tables for practitioners, patients and relatives and each has distinct columns for gender, birthDate, etc.  Furthermore, the set of demographic information commonly tracked for Patients, Practitioners and RelatedPersons is generally quite distinct - and we don't want to munge the 80% for all three use-cases together.</p>",
        "id": 165098413,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557254307
    },
    {
        "content": "<p>The only benefit of adding a new resource is to say \"this was done by someone named John Smith - but I have no clue if they were the patient, a relative of the patient or someone acting in professional capacity\" - and that's a super limited edge-case.</p>",
        "id": 165098484,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557254375
    },
    {
        "content": "<p>In addition to the 80% rule issue challenges, adding inheritance creates visibility challenges (inherited elements aren't as visible/obvious to readers) and a sorting challenge (inherited elements always appear at the top - which isn't necessarily where they should logically fit in an instance)</p>",
        "id": 165098692,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557254509
    },
    {
        "content": "<p>umm no. The proposal would be to add <em>abstract</em> generalizations. So this is not a construct that can be used like that. Instead, it allows a software implementation to handle all 3 of those resources and share some common behavior</p>",
        "id": 165098704,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557254520
    },
    {
        "content": "<p>We'd talked about using an interface approach to doing that that wouldn't require inheritance.  I'm certainly happy for there to be an 'individual' pattern similar to the event/request/definition patterns that could be used for that purpose.</p>",
        "id": 165098826,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557254600
    },
    {
        "content": "<p>why are so opposed to inheritance?</p>",
        "id": 165098922,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557254658
    },
    {
        "content": "<p>Most of the pushback here relates to implementation inheritance. These concerns will be amplified if the FHIR Model is mapped to a relational database ( see the 'classic' essay on ORM at <a href=\"http://blogs.tedneward.com/post/the-vietnam-of-computer-science/\" target=\"_blank\" title=\"http://blogs.tedneward.com/post/the-vietnam-of-computer-science/\">http://blogs.tedneward.com/post/the-vietnam-of-computer-science/</a>) or FHIR resources are persisted as is. Interface inheritance at the application layer is another (and very elegant) thing - 22 of the 23 GoF Patterns can be implemented using this paradigm.</p>",
        "id": 165099694,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1557255204
    },
    {
        "content": "<blockquote>\n<p>Interface inheritance at the application layer</p>\n</blockquote>\n<p>Can you be specific as to what you mean by that?</p>",
        "id": 165103363,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557257715
    },
    {
        "content": "<p>The Business layer in a multi-layered software application - where, for example, an EHR application developer might reference and utilise the FHIR libraries.</p>",
        "id": 165104983,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1557258850
    },
    {
        "content": "<p>that didn't help explain</p>",
        "id": 165105011,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557258885
    },
    {
        "content": "<p>Maybe this is now 'old school', but multi-layered applications typically have presentation, application (business + data access) and persistence layers.  <a href=\"https://hub.packtpub.com/what-is-multi-layered-software-architecture/\" target=\"_blank\" title=\"https://hub.packtpub.com/what-is-multi-layered-software-architecture/\">https://hub.packtpub.com/what-is-multi-layered-software-architecture/</a>. The GoF patterns are applicable to the design of application/business layer functionality.</p>",
        "id": 165105456,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1557259221
    },
    {
        "content": "<p>I think you're saying, we should just abandon the general implementer and only specialist insiders can do smart things</p>",
        "id": 165105828,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557259530
    },
    {
        "content": "<p>As opposed to other application layer design patterns.  Inheritance somewhat presumes an object-oriented paradigm; but that's not necessarily always a safe assumption.  Node/Javascript developers might just as likely use decorators, chained methods, monads, or other functional programming patterns.  Object interfaces (denoted by IObject and similar notation in .NET) are a borrowed language feature from functional languages like lisp and scheme, and map nicely to FHIR extensions and the type of interface pattern that Michel and Lloyd have mentioned.  It's a sort of happy compromise between object and functional paradigms.</p>",
        "id": 165105836,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1557259547
    },
    {
        "content": "<blockquote>\n<p>I think you're saying, we should just abandon the general implementer and only specialist insiders can do smart things</p>\n</blockquote>\n<p>Not at all - more a case that implementation inheritance probably isn't the best way to model business information (works far better for computer artefacts such as UI controls). From an application development perspective, interface inheritance is far more robust.</p>",
        "id": 165106093,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1557259699
    },
    {
        "content": "<p>given that we don't separate between interface and implementation, I'm not sure what you're saying.</p>",
        "id": 165106344,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557259901
    },
    {
        "content": "<p>and the original discussion (or my reading of it) was about references to an abstract supertype, so its really a question of subtyping rather than inheritance in any case, I would have thought</p>",
        "id": 165106594,
        "sender_full_name": "Jim Steel",
        "timestamp": 1557260045
    },
    {
        "content": "<p>I'm not sure what the difference is there</p>",
        "id": 165106635,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557260073
    },
    {
        "content": "<p>inheritance is unpopular ;)</p>",
        "id": 165106677,
        "sender_full_name": "Jim Steel",
        "timestamp": 1557260106
    },
    {
        "content": "<p>I think the general sentiment is that if we're going to pick a language feature to lean on, there's interest in object interfaces rather than object inheritance.</p>",
        "id": 165106774,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1557260169
    },
    {
        "content": "<p>&lt;academic&gt; inheritance is about definitional things, so you define something in terms of another thing and it acquires the things (behaviour, structural features) of its parent. Subtyping is about whether a thing is substitutable for another thing for a given purpose. In a lot of implementations (most), inheritance will give you subtyping, but its not the only way you can get subtyping, and there are features (type parameters being a prominent one) that can mean that inheritance does not imply subtyping&lt;/academic&gt;. I'm writing this reluctantly, though. I don't think it really changes anything</p>",
        "id": 165106868,
        "sender_full_name": "Jim Steel",
        "timestamp": 1557260256
    },
    {
        "content": "<p>well... that all sounds interesting... but I don't see how it's different in practice in the context of the dsicussion</p>",
        "id": 165107191,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557260438
    },
    {
        "content": "<p>Yes, I think you're right. Perhaps the only upshot is, if people tell you that they hate inheritance, for something like the FHIR spec, you can probably tell them its subtyping. Or you could just ignore them. And either would probaby be justified</p>",
        "id": 165107357,
        "sender_full_name": "Jim Steel",
        "timestamp": 1557260559
    },
    {
        "content": "<p>At the moment the voting is 10-7 against an abstract ancestor (presumably a Person or Actor Resource) for Patient/RelatedPerson/Practitioner. If I've misunderstood that question, I'll get my coat.</p>",
        "id": 165107904,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1557260895
    },
    {
        "content": "<p>Going out on a limb here, because I'm not 100% sure what Lloyd had in mind regarding interfaces, but it might roughly be described as an 'extensions everything' approach.  So instead of creating an <code>Individual</code> resourceType as an abstract ancestor, it would be more like creating an <code>individual</code> extension which Patient, RelatedPerson, Practitioners and others use to get to their current schema definitions (presumably including the <code>patient</code> and/or <code>subject</code> field). But I'm being handwavy and non-formal in my use of the term extension here.</p>",
        "id": 165107930,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1557260916
    },
    {
        "content": "<p>I'm noting the vote with interest. I'm wondering why people are voting against it</p>",
        "id": 165107990,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557260953
    },
    {
        "content": "<blockquote>\n<p>I'll get my coat</p>\n</blockquote>\n<p>I had to look that one up ;-)</p>",
        "id": 165109887,
        "sender_full_name": "Eric Haas",
        "timestamp": 1557262228
    },
    {
        "content": "<p>It is now 11-7</p>",
        "id": 165110654,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1557262805
    },
    {
        "content": "<p>fascinating. I'm going to have a go at it anyway, and see what people think about what it looks like.  But I will be pessimistic about the outcome.</p>",
        "id": 165111658,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557263582
    },
    {
        "content": "<p>I'm not against inheritance.  I'm concerned about the behavior I think it'll drive.  As an example, take maritalStatus.  We've identified it as a core element for Patient, but not for Practitioner or RelatedPerson.  If we create a hierarchy, where will it live in the hierarchy?  Most modeling-oriented people will push to it to be moved to the common abstract on the grounds that it logically exists for all three and it's probably tracked by at least a tiny percentage of systems for Practitioner and perhaps RelatedPerson too.   Arguing to keep it where it is will be much harder.  And if we do move it up, then the 80% notion becomes messier for those implementing the specializations.  With patterns and interfaces, on the other hand, it's easy enough to expose the core element from Patient and extension elements from the other two as elements (if desired) and it doesn't change resource design.  It also allows for name variance where that makes things easier for the single-resource implementers while still allowing consistent names for those systems that want to manipulate resources generically.</p>",
        "id": 165123091,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557274745
    },
    {
        "content": "<p>there's a consistent theme here, which is that we like the pattern/interface construct for this use. But there's no way anyone other than a few insiders could turn the pattern stuff into code - I know, because I'm trying now, and I'm not entirely sure that I'm going to succeed, even given that I have the access to edit the mappings directly</p>",
        "id": 165150067,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557310542
    },
    {
        "content": "<p>so if we think that the pattern construct is useful, then we would need to:</p>\n<ul>\n<li>define a new approach for pattern where the pattern has teeth - e.g. the resources that claim to follow the pattern need to do so computationally</li>\n<li>allow for Reference(Pattern) so that we can leverage it in the design phase</li>\n</ul>",
        "id": 165150165,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557310656
    },
    {
        "content": "<p>fyi, here's a little table around the current relevant resources:</p>",
        "id": 165150178,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557310679
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/VVsRzASZB7uN52hOU6a6z5Rg/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/VVsRzASZB7uN52hOU6a6z5Rg/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/VVsRzASZB7uN52hOU6a6z5Rg/pasted_image.png\"></a></div>",
        "id": 165150235,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557310720
    },
    {
        "content": "<p>The most elegant solution of this problem, which I ever saw, is the Semantic Web/RDF  - an attribute level semantic - i.e. detaching attribute from an entity (element from resource) and reuse it . Your interfaces will be - is this instance/class has a set of specific attributes or not?</p>",
        "id": 165150829,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1557311380
    },
    {
        "content": "<blockquote>\n<p>detaching attribute from an entity </p>\n</blockquote>\n<p>To the degree that this is a statement about definitional method, I agree with this, and it's kind of how FHIR works. but to the degree that it's a claim that you can define data element separated from it's context of use... I don't believe in that, and the FHIR design framework is an expression of that belief</p>",
        "id": 165150934,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557311495
    },
    {
        "content": "<p>the highlighted cells in that table above are all problems for designing a clean heirarchy (and I didn't even count questions of order). </p>\n<ul>\n<li>PractitionerRole doesn't have a name to use as a display </li>\n<li>Device uses status - different to all the other resources</li>\n<li>Device Name is very complicated</li>\n<li>Organization Name is a simple name (= HumanName.text, in principle)</li>\n<li>Practitioner can't indicate a preferred communication</li>\n</ul>",
        "id": 165151072,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557311644
    },
    {
        "content": "<p>I go back to my question about the Workflow pattern -- not in the sense of using that as some object hierarchy, but that any resource that implements one of it's (sort of) abstract interfaces should at least use the names defined by the pattern.   So, o-o aside, it seems like there should be some consistent naming conventions, maybe defined by patterns like Workflow, so that users know what to expect when they 'pick up' any FHIR resource, that there will be consistency in naming similar conceptual things (property names).   It seems as a 'outsider to the committee discussions' that names are chosen that do not necessarily align with that of the Workflow pattern, maybe for good reason in the committee, but from an 'outsider/user' of the pattern these varied names might cause more confusion than help.   (This brings up this related question, what is this discussion trying to accomplish -- an oo paradigm for FHIR resources or a consistency in naming or something else?)</p>",
        "id": 165151794,
        "sender_full_name": "John Silva",
        "timestamp": 1557312433
    },
    {
        "content": "<blockquote>\n<p>so if we think that the pattern construct is useful, then we would need to:</p>\n<ul>\n<li>define a new approach for pattern where the pattern has teeth - e.g. the resources that claim to follow the pattern need to do so computationally</li>\n<li>allow for Reference(Pattern) so that we can leverage it in the design phase</li>\n</ul>\n</blockquote>\n<p>Thanks for taking this on. Those changes would be tremendously beneficial to the long term health of FHIR. Provided that the specification is still easy for new implementers to understand so that someone who just wants to hack together a simple JSON string for a Patient can find everything they need on the Patient page without having to hunt through a bunch of pattern pages. In other words the additional complexity introduced by using patterns (interfaces) in that way should be  hidden as much as possible in the build process and lower layers of the specification.</p>",
        "id": 165162400,
        "sender_full_name": "Nick Radov",
        "timestamp": 1557321921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194183\">@John Silva</span> The use of the pattern names is a 'should', not a 'SHALL'.  As a base principle, the need to be intuitive within a domain is more important than consistency across resources.   That said, where consistency doesn't interfere with domain intuitiveness, we expect names to be consistent</p>",
        "id": 165164139,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557323202
    },
    {
        "content": "<p>I'm proposing to step that up a bit, and make it so they are required to be consistent for selected patterns</p>",
        "id": 165164332,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557323328
    },
    {
        "content": "<p>Why?  If we have a mapping between the names, we can generate an interface.  I'd be cautious about making things harder for the 'simple' implementer for the benefit of making them easier for the 'sophisticated' implementer.</p>",
        "id": 165164613,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557323507
    },
    {
        "content": "<p>says you who haven't tried to generate the interface. I'm doing it right now... it's going to fearfully difficult to make the existing patterns work for code generation. I want to make it easier for people to do that. And I don't see why that means it needs to be harder for simple implementers</p>",
        "id": 165164923,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557323712
    },
    {
        "content": "<p>Has anyone thought of an aliasing mechanism?   The notion is that the pattern (e.g. Workflow) defines the SHALL properties but a committee can define an alias (prop name) that meets their domain's unique naming convention?  (Not sure if this makes sense or is possible in JSON/XML -- just putting it out there as a different perspective.)</p>",
        "id": 165165277,
        "sender_full_name": "John Silva",
        "timestamp": 1557323978
    },
    {
        "content": "<p>At least one of the XML serialization mechanisms in .NET allows the class property name to be either used as is for the XML element or attribute name, or be redefined to a different name. I think this will work with interfaces.</p>",
        "id": 165165835,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1557324411
    },
    {
        "content": "<p>I recognize that building an interface is going to be challenging - but I think the 'challenging' bit is where there isn't a 1..1 correspondence of elements, difference in types, variations in value sets, etc.  I would think that if the sole difference was name, that should be pretty easy to manage.</p>\n<p>What we've said is that if a domain has a common term that is widely recognized in that implementation community and the 'standard pattern' term is not widely recognized or is likely to be confusing/misleading in that community, the resource would use the name that was common in the domain.  Forcing the 'standard pattern' name would \"make things harder\" by increasing the learning curve for implementers who only care about that one domain and would also create confusion and all of the costs that come with misunderstanding/interpreting the specification.</p>",
        "id": 165166373,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557324818
    },
    {
        "content": "<p>well, the question here is of balance; smaller more focused patterns can/should be more demanding than the general patterns (which we already see with FiveWs vs Event/Request/Definition)</p>",
        "id": 165167622,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557325689
    },
    {
        "content": "<p>so we could define the patterns in my sheet above and say that it's reasonable for those to be more demanding again</p>",
        "id": 165167645,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557325723
    },
    {
        "content": "<blockquote>\n<p>any resource that implements one of it's (sort of) abstract interfaces should at least use the names defined by the pattern</p>\n</blockquote>\n<p>This to me is the biggest problem with the current \"patterns\".  I remember when FHIR first came out that committees were told that we could use names for data elements that matched what implementers within that community called things.  Thus, instead of occurrencePeriod on the Medication Dispense resource, we have \"whenPrepared\" and \"whenHandedOver\" which finally addressed a longstanding puzzle for implementers in the dispensing space about what \"effectiveTime.low and .high\" actually meant.  If you wanted blind consistency, you're effectively telling the pharmacy-space implementers \"forget what you call things, we have to use these generic names to meet some data modeler's requirement/bugaboo of consistency.</p>\n<p>I agree with consistency if there is no reason to be different - name vs deviceName, supportingInformation vs supportingInfo, etc.  but if a committee has a reason for being different, and the bar should be very low for this difference, then they should feel empowered to call things the way their community calls them.</p>\n<p>Thus the pattern should be a mappable construct where I show how my resource maps to the pattern and not a blind inheritance or consistency requirement.</p>",
        "id": 165173114,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1557329361
    },
    {
        "content": "<p>yes you've captured the current position well, I'm arguing, however, that there are smaller patterns - more focused than our current wide patterns) where the benefit of implementation justifies the requirement to stick to the rules. To be clear: the current patterns we have do not justify such rules</p>",
        "id": 165174217,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557330150
    },
    {
        "content": "<p>+1</p>",
        "id": 165174233,
        "sender_full_name": "Melva Peters",
        "timestamp": 1557330173
    },
    {
        "content": "<blockquote>\n<p>yes you've captured the current position well, I'm arguing, however, that there are smaller patterns - more focused than our current wide patterns) where the benefit of implementation justifies the requirement to stick to the rules.</p>\n</blockquote>\n<p>In principle some such patterns could be very small, perhaps as small as a single element to avoid repetitive element definitions across multiple resources.</p>",
        "id": 165174549,
        "sender_full_name": "Nick Radov",
        "timestamp": 1557330392
    },
    {
        "content": "<blockquote>\n<p>I agree with consistency if there is no reason to be different - name vs deviceName, supportingInformation vs supportingInfo, etc.  but if a committee has a reason for being different, and the bar should be very low for this difference, then they should feel empowered to call things the way their community calls them.</p>\n</blockquote>\n<p>Agree, with one reflection - scope changes, opinions and consensus changes with scope or with time. <br>\nI remember some occasions of \"no, this is what everyone calls it and we will never change it\" and then...</p>",
        "id": 165175491,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1557331098
    },
    {
        "content": "<p>so we should have some guidelines. still when such guidelines are asymptes and not bindind, we have some challenges.</p>",
        "id": 165175655,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1557331205
    },
    {
        "content": "<p>in terms of progress, I gained some peace with how we are looking at another pattern - Product. <br>\nWe let the resources (medication, device, nutrition, biologicallyderivedproduct) follow their path and get the people to join discussions  and eventually this means that resources can align. I think it wastes a lot of effort but at least does not impose any foreign language in the committees and it allows consensus, whenever it comes.</p>",
        "id": 165176053,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1557331478
    },
    {
        "content": "<p>I like the idea of patterns driven by real use cases, and some common discussions to force people to look at that pattern. Committees should be able to deviate by default, but there should be a check to see when deviation is no longer worth it.</p>",
        "id": 165176409,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1557331705
    },
    {
        "content": "<p>I think what makes sense is the evaluation of value.  If we're going to mandate a name change (or any other kind of change), we need to weigh the cost to the single-domain communities and implementers vs. the benefit of whomever the pattern is for.  That said, I really don't understand why names are such a big issue.  Structural and design issues create much more grief.</p>",
        "id": 165196087,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557345923
    },
    {
        "content": "<p>back to this then. Here's my proposal:</p>",
        "id": 165251774,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557408353
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/0tLG-isMAK1RmDBs9wxDmtOl/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/0tLG-isMAK1RmDBs9wxDmtOl/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/0tLG-isMAK1RmDBs9wxDmtOl/pasted_image.png\"></a></div>",
        "id": 165251780,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557408356
    },
    {
        "content": "<p>Actions:</p>\n<ul>\n<li>Introduce patterns for Actor, ContactableActor, and HiumanActor</li>\n<li>specialisation relationships amongst the patterns as implied in the table above</li>\n<li>created 3 tasks to resolve the consistency problems around <a href=\"http://PractitionerRole.name\" target=\"_blank\" title=\"http://PractitionerRole.name\">PractitionerRole.name</a>, <a href=\"http://Device.name\" target=\"_blank\" title=\"http://Device.name\">Device.name</a>, Practitioner.communication (all of which i think are supported by real life problems, not created by the pattern)</li>\n<li>make any inconsistencies with these patterns a hard error(unlike other patterns)</li>\n<li>the orange fields require some adaptation to meet the pattern requirements (in pattern implementations - will be specified in the mapping)</li>\n</ul>",
        "id": 165252100,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557408549
    },
    {
        "content": "<blockquote>\n<p><a href=\"/user_uploads/10155/0tLG-isMAK1RmDBs9wxDmtOl/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/0tLG-isMAK1RmDBs9wxDmtOl/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/0tLG-isMAK1RmDBs9wxDmtOl/pasted_image.png\"></a></div></blockquote>\n<p>Did you decide if and how Person should fit into that hierarchy?</p>",
        "id": 165252277,
        "sender_full_name": "Nick Radov",
        "timestamp": 1557408666
    },
    {
        "content": "<p>Why is \"name\" in orange for Patient, Practitioner, and RelatedPerson?</p>",
        "id": 165252381,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1557408727
    },
    {
        "content": "<p>because name in the pattern is string, but name in those resources is HumanName, so the pattern implementation will have to account for that</p>",
        "id": 165252636,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557408936
    },
    {
        "content": "<p>Person does not fit into that heirarchy because it's not an actor (not a role in v3 speak)</p>",
        "id": 165252665,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557408957
    },
    {
        "content": "<p>How many use cases do we have where we'd actually apply this inheritance/hierarchy/interface pattern?  Is it only for Actors?  Would we actually want to apply this to Events as Eric Hass mentioned?  If it is only Actors, is it worth the effort to build a formal solution for this rather than a KISS solution of just having WGs manually keep things in sync?  Most of the actors are owned by PA so it isn't even that much cross-WG coordination.</p>",
        "id": 165254384,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1557410265
    },
    {
        "content": "<p>I don't know how many other cases we have. I'm going to go looking for them.</p>",
        "id": 165254618,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557410396
    },
    {
        "content": "<p>we have event, and it's looser, and I'm going to keep working through it for consistency</p>",
        "id": 165254697,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557410414
    },
    {
        "content": "<p>I will be building a formal solution for this one if FHIR-I approves, so that committees know if they break it</p>",
        "id": 165254737,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557410439
    },
    {
        "content": "<p>I will also get PA to formally approve this one.</p>",
        "id": 165254747,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557410455
    },
    {
        "content": "<p>btw, I don't know with Actor/ContactableActor/HumanActor - whether the middle one is justified or not....</p>",
        "id": 165254815,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557410483
    },
    {
        "content": "<p>The model looks solid.  How would it actually be used?</p>",
        "id": 165255464,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1557410879
    },
    {
        "content": "<p>we have been discussed this same issue for Product - medication, device, devicedefinition, medicationKnowledge, regulatedxxx, biologicallyderivedproduct, nutrition...<br>\nNot only on the product resource, but also on the way we handle ordering, delivery, usage (MedicationStatement/MedicationUsage vs DeviceUseStatement)...</p>",
        "id": 165255633,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1557410998
    },
    {
        "content": "<p>does this problem grant such a pattern?</p>",
        "id": 165255708,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1557411024
    },
    {
        "content": "<p>Implementer impacts:<br>\n- instead of Reference(Patient|...) the specification would say \"Reference(Actor)\"<br>\n- we would ship StructureDefinitions for the patterns<br>\n- implementers generating source can generate the source for the patterns however they want (I'll do it automatically in HAPI)<br>\n- in HAPI, you'll be able to take a target of a reference and do factory.asActor(resource) and get an IActor facade to it if you want<br>\n- in non-typed languages, you can just treat them as if they are equivalent anyway, but this servers as helpful documentation</p>",
        "id": 165255912,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557411158
    },
    {
        "content": "<blockquote>\n<ul>\n<li>we would ship StructureDefinitions for the patterns</li>\n</ul>\n</blockquote>\n<p>Would we add another concept to the StructureDefinitionKind value set to distinguish patterns?</p>",
        "id": 165256354,
        "sender_full_name": "Nick Radov",
        "timestamp": 1557411467
    },
    {
        "content": "<p>we already ship some patterns, so I don't think anything new is needed</p>",
        "id": 165256637,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557411629
    },
    {
        "content": "<p>@Jose - Product, maybe.</p>",
        "id": 165256675,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557411660
    },
    {
        "content": "<p>I'm going to do analysis around this...</p>",
        "id": 165262823,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557415565
    },
    {
        "content": "<p>My use case isn’t about the admin resources, but I do believe that the ability to specify Reference(Pattern) is a good thing to add to the methodology.  I have seen a few resources where they are currently enumerating the choice of resources and I think that this will become onerous to add new choices in the future.  I also think that it puts the requirement to know on the owner of the resource with the choice rather than the resources that may decide they want to be part of that choice.<br>\nMy example is ChargeItemDefinition which currently lists three resources as the item being the choice of the charge definition.  There are plenty of other resources that might make sense there but that requires those resource owners to make a request to PA to update ChangeItemDefinition.  If, instead, ChargeItemDefinition just said instance: Reference(ChargeableItem), then I could introduce a new resource and declare it to match the pattern and it would automatically be allowed in a ChargeItemDefinition.</p>",
        "id": 165266598,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1557418247
    },
    {
        "content": "<p>yes that's where I want to go. I've been meaning to get to this but no one was pushing on it. I'm going to set it up as possible now</p>",
        "id": 165266653,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557418308
    },
    {
        "content": "<p>CatalogEntry is another case where Reference(Any) doesn’t make sense, but Reference(&lt;specific set of resources&gt;) also doesn’t seem sense.  Having it say Reference(CatalogableItem) and allowing me to specify at the Resource level or Profile level that my resource is catalogable seems a good thing.</p>",
        "id": 165266715,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1557418336
    },
    {
        "content": "<p>and supply is one other place where you would reference the product pattern</p>",
        "id": 165267759,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1557419122
    },
    {
        "content": "<p>you deliver a product, which can be a med, a device...</p>",
        "id": 165267859,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1557419178
    },
    {
        "content": "<p>So now for each reference we know which resources can be referenced - that makes validation trivial - in the future we'll have to navigate through a hierarchy to do that? How is that better?</p>",
        "id": 165269189,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1557420252
    },
    {
        "content": "<p>well, I think you are asking a presentation question, not a definition question</p>",
        "id": 165269824,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557420726
    },
    {
        "content": "<p>probably I'll just show the expanded list in the tree view and UML, and in the definitions I'll show the pattern and the expansion</p>",
        "id": 165269843,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557420757
    },
    {
        "content": "<p>can't we formalize the hierarchy as a valueset?</p>",
        "id": 165269854,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1557420771
    },
    {
        "content": "<p>I will have to think about what goes in the structure definitions</p>",
        "id": 165269883,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557420787
    },
    {
        "content": "<p>I'm opposed to HumanActor because Patient, Practitioner and RelatedPerson aren't necessarily humans.  BiologicActor would be better.</p>",
        "id": 165276141,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557425926
    },
    {
        "content": "<p>Also, Group isn't allowed to Act, only to be a subject.  Perhaps 'Participant' rather than 'Actor'?</p>",
        "id": 165276325,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557426062
    },
    {
        "content": "<p>(We thus need to be careful about using the pattern.  Devices, Patients, etc. can author things but Groups cannot.  And in other places, the list is more refined still.)</p>",
        "id": 165276581,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557426251
    },
    {
        "content": "<blockquote>\n<p>(We thus need to be careful about using the pattern.  Devices, Patients, etc. can author things but Groups cannot.  And in other places, the list is more refined still.)</p>\n</blockquote>\n<p>I would totally agree to this.  Although I truly believe that this new capability will help the better specification of our resources, it does force all of us to verify that resources are referencing the proper patterns appropriately.  This might end up be slightly harder than seeing a specific choice of resources.</p>",
        "id": 165276944,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1557426487
    },
    {
        "content": "<p>The biggest challenge is thinking about the 80% rule - adding things that are theoretically possible but in practice are rarely/not supported</p>",
        "id": 165277892,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557427058
    },
    {
        "content": "<p>Technically, in a RIM sense, these are roles not participants. I don't know if this is a naming problem or not</p>",
        "id": 165278312,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557427346
    },
    {
        "content": "<p>FYI, these are the current set of reference combinations found through the FHIR specification:</p>",
        "id": 165278544,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557427519
    },
    {
        "content": "<p>[ActivityDefinition, DeviceDefinition, HealthcareService, Location, MedicationKnowledge, ObservationDefinition, Organization, PlanDefinition, Practitioner, PractitionerRole, SpecimenDefinition, Substance]<br>\n[AllergyIntolerance, Condition, DiagnosticReport, DocumentReference, Observation, QuestionnaireResponse]<br>\n[AllergyIntolerance, Condition, DocumentReference, FamilyMemberHistory, Immunization, Media, Observation, Procedure]<br>\n[AllergyIntolerance, Condition]<br>\n[Appointment, AppointmentResponse, CarePlan, ServiceRequest, Task]<br>\n[Appointment, CommunicationRequest, DeviceRequest, ImmunizationRecommendation, MedicationRequest, NutritionOrder, RequestGroup, ServiceRequest, Task, VisionPrescription]<br>\n[CarePlan, DeviceRequest, ImmunizationRecommendation, MedicationRequest, NutritionOrder, ServiceRequest]<br>\n[CarePlan, ImmunizationRecommendation, MedicationRequest, NutritionOrder, ServiceRequest]<br>\n[CarePlan, ImmunizationRecommendation, MedicationRequest, ServiceRequest]<br>\n[CarePlan, MedicationRequest, ServiceRequest]<br>\n[CarePlan, RequestGroup]<br>\n[CarePlan, ServiceRequest]<br>\n[CareTeam, Device, Group, HealthcareService, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[CareTeam, Device, Group, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[CareTeam, Device, HealthcareService, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[CareTeam, Device, Location, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson, Substance]<br>\n[CareTeam, Device, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[CareTeam, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[CareTeam, Organization, Practitioner, PractitionerRole]<br>\n[Claim, DocumentReference, Observation, Procedure, QuestionnaireResponse, ServiceRequest]<br>\n[ClaimResponse, Coverage]<br>\n[ClinicalImpression, DiagnosticReport, Observation]<br>\n[Composition, DiagnosticReport, DocumentReference]<br>\n[Condition, DiagnosticReport, DocumentReference, Media, Observation]<br>\n[Condition, DiagnosticReport, DocumentReference, Observation, Procedure]<br>\n[Condition, DiagnosticReport, DocumentReference, Observation, Questionnaire, QuestionnaireResponse]<br>\n[Condition, DiagnosticReport, DocumentReference, Observation]<br>\n[Condition, DiagnosticReport, Observation]<br>\n[Condition, ImmunizationRecommendation, Observation, Procedure]<br>\n[Condition, Media, Observation]<br>\n[Condition, MedicationRequest, MedicationStatement, NutritionOrder, Observation, RiskAssessment, ServiceRequest]<br>\n[Condition, Observation]<br>\n[Condition, Procedure]<br>\n[Contract, SupplyDelivery]<br>\n[Device, Device, DeviceMetric]<br>\n[Device, DeviceMetric]<br>\n[Device, Group, Location, Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[Device, Group, Location, Patient, Practitioner, PractitionerRole, Specimen]<br>\n[Device, Group, Location, Patient, Substance]<br>\n[Device, Group, Location, Patient]<br>\n[Device, Group, Medication, Patient, Practitioner, PractitionerRole, Substance]<br>\n[Device, Group, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[Device, Group, Patient, Practitioner]<br>\n[Device, Group, Patient]<br>\n[Device, HealthcareService, Location, Organization, Patient, Practitioner, PractitionerRole]<br>\n[Device, HealthcareService, Location, Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[Device, HealthcareService, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[Device, Medication, Substance]<br>\n[Device, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[Device, Organization, Patient, Practitioner, PractitionerRole]<br>\n[Device, Organization, Practitioner, PractitionerRole]<br>\n[Device, Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[Device, Patient, Practitioner, PractitionerRole]<br>\n[Device, Person]<br>\n[Device, Practitioner, PractitionerRole]<br>\n[DeviceRequest, MedicationRequest, VisionPrescription]<br>\n[DiagnosticReport, ImagingStudy, Immunization, MedicationAdministration, MedicationDispense, Observation, Procedure, SupplyDelivery]<br>\n[DocumentReference, ImagingStudy, Media, MolecularSequence, Observation, QuestionnaireResponse]<br>\n[DocumentReference, Media]<br>\n[Encounter, EpisodeOfCare]<br>\n[Group, Location, Medication, Organization, Patient, PlanDefinition, Practitioner, PractitionerRole, Procedure]<br>\n[Group, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[Group, Organization, Patient]<br>\n[Group, Patient, Practitioner, RelatedPerson]<br>\n[Group, Patient]<br>\n[HealthcareService, Organization]<br>\n[ImagingStudy, Immunization, MedicationAdministration, MedicationDispense, MedicationStatement, Procedure]<br>\n[Immunization, ImmunizationEvaluation]<br>\n[Location, Organization, Patient]<br>\n[Location, Organization, Practitioner, PractitionerRole]<br>\n[Location, Organization]<br>\n[Location, Patient, Practitioner, RelatedPerson]<br>\n[Medication, MedicinalProduct, ObservationDefinition, Substance]<br>\n[Medication, MedicinalProduct, Substance]<br>\n[Medication, MedicinalProduct]<br>\n[Medication, Substance]<br>\n[MedicationAdministration, MedicationDispense, MedicationStatement, Observation, Procedure]<br>\n[MedicationAdministration, Observation, Procedure]<br>\n[MedicationAdministration, Procedure]<br>\n[MedicationRequest, VisionPrescription]<br>\n[MedicinalProduct, MedicinalProductPackaged]<br>\n[MolecularSequence, Observation, QuestionnaireResponse]<br>\n[Observation, Procedure]<br>\n[Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[Organization, Patient, Practitioner, PractitionerRole]<br>\n[Organization, Patient, Practitioner, RelatedPerson]<br>\n[Organization, Patient, RelatedPerson]<br>\n[Organization, Patient]<br>\n[Organization, Practitioner, PractitionerRole, RelatedPerson]<br>\n[Organization, Practitioner, PractitionerRole]<br>\n[Organization, PractitionerRole]<br>\n[Patient, Person, Practitioner, RelatedPerson]<br>\n[Patient, Practitioner, PractitionerRole, RelatedPerson]<br>\n[Patient, RelatedPerson]<br>\n[Practitioner, PractitionerRole, RelatedPerson]<br>\n[Practitioner, PractitionerRole]<br>\n[Substance, SubstanceDefinition]</p>",
        "id": 165278549,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557427522
    },
    {
        "content": "<p>97 combinations</p>",
        "id": 165278553,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557427526
    },
    {
        "content": "<p>There are some pretty random sets there.  rather than consistency in element names, consistency in resource referencing seems something we could try to fix.</p>",
        "id": 165278818,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1557427704
    },
    {
        "content": "<p>this is better analysis</p>",
        "id": 165279428,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557428085
    },
    {
        "content": "<p>[ActivityDefinition, DeviceDefinition, HealthcareService, Location, MedicationKnowledge, ObservationDefinition, Organization, PlanDefinition, Practitioner, PractitionerRole, SpecimenDefinition, Substance]: [CatalogEntry.referencedItem]<br>\n[CareTeam, Device, Group, HealthcareService, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]: [Communication.recipient, CommunicationRequest.recipient]<br>\n[CareTeam, Device, Group, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]: [Consent.provision.actor.reference]<br>\n[CareTeam, Device, HealthcareService, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]: [CarePlan.activity.detail.performer, DeviceRequest.performer, ServiceRequest.performer, Task.owner]<br>\n[CareTeam, Device, Location, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson, Substance]: [Contract.term.action.performer]<br>\n[CareTeam, Device, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]: [CarePlan.author, CarePlan.contributor, ChargeItem.performer.actor, ImagingStudy.series.performer.actor, Media.operator, MedicationRequest.performer]<br>\n[CareTeam, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]: [CareTeam.participant.member, Observation.performer]<br>\n[CareTeam, Organization, Practitioner, PractitionerRole]: [DiagnosticReport.performer, DiagnosticReport.resultsInterpreter]<br>\n[Device, Group, Location, Patient, Practitioner, PractitionerRole, RelatedPerson]: [MeasureReport.subject]<br>\n[Device, Group, Location, Patient, Practitioner, PractitionerRole, Specimen]: [Media.subject]<br>\n[Device, Group, Location, Patient, Substance]: [Specimen.subject]<br>\n[Device, Group, Location, Patient]: [DeviceRequest.subject, DiagnosticReport.subject, List.subject, Observation.subject, ServiceRequest.subject]<br>\n[Device, Group, Medication, Patient, Practitioner, PractitionerRole, Substance]: [Group.member.entity]<br>\n[Device, Group, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]: [Contract.term.offer.party.reference, Contract.term.action.subject.reference, Contract.term.action.requester]<br>\n[Device, Group, Patient, Practitioner]: [DocumentManifest.subject, DocumentReference.subject]<br>\n[Device, Group, Patient]: [ImagingStudy.subject]<br>\n[Device, HealthcareService, Location, Organization, Patient, Practitioner, PractitionerRole]: [Account.subject]<br>\n[Device, HealthcareService, Location, Patient, Practitioner, PractitionerRole, RelatedPerson]: [Appointment.participant.actor, AppointmentResponse.actor, Schedule.actor]<br>\n[Device, HealthcareService, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]: [Communication.sender, CommunicationRequest.sender]<br>\n[Device, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]: [Signature.who, Signature.onBehalfOf, AuditEvent.agent.who, AuditEvent.source.observer, ChargeItem.enterer, CommunicationRequest.requester, Composition.author, Composition.section.author, DocumentManifest.author, DocumentReference.author, Invoice.participant.actor, MedicationDispense.performer.actor, MedicationRequest.requester, Procedure.performer.actor, Provenance.agent.who, Provenance.agent.onBehalfOf, QuestionnaireResponse.author, ServiceRequest.requester, SupplyRequest.requester, Task.requester]<br>\n[Device, Organization, Patient, Practitioner, PractitionerRole]: [Flag.author]<br>\n[Device, Organization, Practitioner, PractitionerRole]: [DeviceRequest.requester]<br>\n[Device, Patient, Practitioner, PractitionerRole, RelatedPerson]: [AdverseEvent.detector, MedicationAdministration.performer.actor, RequestGroup.action.participant]<br>\n[Device, Patient, Practitioner, PractitionerRole]: [List.source]<br>\n[Device, Practitioner, PractitionerRole]: [AdverseEvent.contributor, DetectedIssue.author, RequestGroup.author, RiskAssessment.performer]<br>\n[Group, Location, Medication, Organization, Patient, PlanDefinition, Practitioner, PractitionerRole, Procedure]: [Flag.subject]<br>\n[Group, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]: [Task.restriction.recipient]<br>\n[Group, Organization, Patient]: [Goal.subject]<br>\n[Group, Patient, Practitioner, RelatedPerson]: [AdverseEvent.subject]<br>\n[Group, Patient]: [CarePlan.subject, CareTeam.subject, ChargeItem.subject, ClinicalImpression.subject, Communication.subject, CommunicationRequest.subject, Condition.subject, DeviceUseStatement.subject, Encounter.subject, GuidanceResponse.subject, Invoice.subject, MedicationAdministration.subject, MedicationDispense.subject, MedicationRequest.subject, MedicationStatement.subject, Procedure.subject, RequestGroup.subject, RiskAssessment.subject]<br>\n[HealthcareService, Organization]: [SupplyRequest.supplier]<br>\n[Location, Organization, Patient]: [SupplyRequest.deliverTo]<br>\n[Location, Organization, Practitioner, PractitionerRole]: [MeasureReport.reporter]<br>\n[Location, Organization]: [CoverageEligibilityRequest.item.facility, Encounter.hospitalization.origin, Encounter.hospitalization.destination, SupplyRequest.deliverFrom]<br>\n[Location, Patient, Practitioner, RelatedPerson]: [MedicationDispense.receiver]<br>\n[Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]: [Basic.author, Claim.payee.party, Composition.attester.party, Consent.performer, Contract.term.asset.valuedItem.responsible, Contract.term.asset.valuedItem.recipient, Contract.signer.party, DocumentManifest.recipient, ExplanationOfBenefit.payee.party, MedicationRequest.informationSource, MedicationStatement.informationSource]<br>\n[Organization, Patient, Practitioner, PractitionerRole]: [Contract.author]<br>\n[Organization, Patient, Practitioner, RelatedPerson]: [Annotation.author[x]]<br>\n[Organization, Patient, RelatedPerson]: [Account.guarantor.party, Coverage.policyHolder, Coverage.payor, Invoice.recipient]<br>\n[Organization, Patient]: [BiologicallyDerivedProduct.collection.source]<br>\n[Organization, Practitioner, PractitionerRole, RelatedPerson]: [Group.managingEntity]<br>\n[Organization, Practitioner, PractitionerRole]: [Claim.provider, Claim.careTeam.provider, ClaimResponse.requestor, ClaimResponse.addItem.provider, Contract.contentDefinition.publisher, CoverageEligibilityRequest.provider, CoverageEligibilityResponse.requestor, DocumentReference.authenticator, EnrollmentRequest.provider, EnrollmentResponse.requestProvider, ExplanationOfBenefit.provider, ExplanationOfBenefit.careTeam.provider, ExplanationOfBenefit.addItem.provider, Immunization.performer.actor, Linkage.author, MedicationDispense.substitution.responsibleParty, MessageHeader.destination.receiver, MessageHeader.sender, MessageHeader.responsible, Patient.generalPractitioner, PaymentNotice.provider, PaymentNotice.payee, PaymentReconciliation.requestor, PaymentReconciliation.detail.submitter, PaymentReconciliation.detail.payee, SupplyDelivery.supplier, VerificationResult.primarySource.who, VerificationResult.attestation.who, VerificationResult.attestation.onBehalfOf]<br>\n[Organization, PractitionerRole]: [MedicinalProduct.contact.contact]<br>\n[Patient, Person, Practitioner, RelatedPerson]: [Person.link.target]<br>\n[Patient, Practitioner, PractitionerRole, RelatedPerson]: [AdverseEvent.recorder, AllergyIntolerance.recorder, AllergyIntolerance.asserter, Condition.recorder, Condition.asserter, DeviceUseStatement.source, Goal.expressedBy, Procedure.recorder, QuestionnaireResponse.source]<br>\n[Patient, RelatedPerson]: [Consent.verification.verifiedWith, Coverage.subscriber, Patient.link.other]<br>\n[Practitioner, PractitionerRole, RelatedPerson]: [Encounter.participant.individual]<br>\n[Practitioner, PractitionerRole]: [AdverseEvent.suspectEntity.causality.author, BiologicallyDerivedProduct.collection.collector, Claim.enterer, ClinicalImpression.performer, CoverageEligibilityRequest.enterer, CoverageEligibilityRequest.item.provider, CoverageEligibilityResponse.insurance.item.provider, DetectedIssue.mitigation.author, EpisodeOfCare.careManager, ExplanationOfBenefit.enterer, ImagingStudy.referrer, ImagingStudy.interpreter, MedicationRequest.recorder, MessageHeader.enterer, MessageHeader.author, NutritionOrder.orderer, ResearchStudy.principalInvestigator, Specimen.collection.collector, SupplyDelivery.receiver, VisionPrescription.prescriber]</p>\n<p>[AllergyIntolerance, Condition, DiagnosticReport, DocumentReference, Observation, QuestionnaireResponse]: [FamilyMemberHistory.reasonReference]<br>\n[AllergyIntolerance, Condition, DocumentReference, FamilyMemberHistory, Immunization, Media, Observation, Procedure]: [AdverseEvent.subjectMedicalHistory]<br>\n[AllergyIntolerance, Condition]: [ClinicalImpression.problem]<br>\n[Appointment, AppointmentResponse, CarePlan, ServiceRequest, Task]: [ImagingStudy.basedOn]<br>\n[Appointment, CommunicationRequest, DeviceRequest, ImmunizationRecommendation, MedicationRequest, NutritionOrder, RequestGroup, ServiceRequest, Task, VisionPrescription]: [CarePlan.activity.reference]<br>\n[CarePlan, DeviceRequest, ImmunizationRecommendation, MedicationRequest, NutritionOrder, ServiceRequest]: [Observation.basedOn]<br>\n[CarePlan, ImmunizationRecommendation, MedicationRequest, NutritionOrder, ServiceRequest]: [DiagnosticReport.basedOn]<br>\n[CarePlan, ImmunizationRecommendation, MedicationRequest, ServiceRequest]: [MedicationRequest.basedOn]<br>\n[CarePlan, MedicationRequest, ServiceRequest]: [MedicationStatement.basedOn, ServiceRequest.basedOn]<br>\n[CarePlan, RequestGroup]: [GuidanceResponse.result]<br>\n[CarePlan, ServiceRequest]: [Media.basedOn, Procedure.basedOn, QuestionnaireResponse.basedOn]<br>\n[Claim, DocumentReference, Observation, Procedure, QuestionnaireResponse, ServiceRequest]: [DeviceUseStatement.derivedFrom]<br>\n[ClaimResponse, Coverage]: [DeviceRequest.insurance, MedicationRequest.insurance, ServiceRequest.insurance, Task.insurance]<br>\n[ClinicalImpression, DiagnosticReport, Observation]: [Condition.stage.assessment]<br>\n[Composition, DiagnosticReport, DocumentReference]: [Procedure.report]<br>\n[Condition, DiagnosticReport, DocumentReference, Media, Observation]: [DeviceUseStatement.reasonReference, ImagingStudy.reasonReference]<br>\n[Condition, DiagnosticReport, DocumentReference, Observation, Procedure]: [Procedure.re</p>",
        "id": 165279432,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557428088
    },
    {
        "content": "<ul>\n<li>Do we now get a limited set of references we can use. </li>\n<li>I don’t think having to remember what in the actor list or the event list is a step into the light.  </li>\n<li>How does this set of options carry over into an implementation where I support only two of the  three things. </li>\n<li>what is the cost of this change when applied.</li>\n</ul>",
        "id": 165280811,
        "sender_full_name": "Eric Haas",
        "timestamp": 1557429260
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/mkvysDYkxL3zpd5zFkux8Ena/reference-patterns.txt\" target=\"_blank\" title=\"reference-patterns.txt\">reference-patterns.txt</a></p>",
        "id": 165282337,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557430563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> </p>\n<ul>\n<li>if you want</li>\n<li>well, it allows you to delegate the choice, where that's appropriate - that saves you time, if you want to be saved time</li>\n<li>you can constrain it in an implementation</li>\n<li>I won't be charging you any $$ for this</li>\n</ul>",
        "id": 165283093,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557431187
    },
    {
        "content": "<p>:-)</p>",
        "id": 165286362,
        "sender_full_name": "Eric Haas",
        "timestamp": 1557433710
    },
    {
        "content": "<p>Resource referencing contains entropic information about how each resource differs, and is part of what makes each resource unique.  We’ve been using a lossy/handwavy schema definitions in our client under the idea of “be explicit when sending data, and be permissive when accepting it”.  So, we’ve effectively made all the resources references consistent at a lowest-common denominator.  And we lose a lot of functionality by doing so.  Those differing sets were hard-won through years of meetings and review.  Shouldn’t toss out the baby with the bath water.</p>",
        "id": 168069107,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1560448698
    }
]