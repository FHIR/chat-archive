[
    {
        "content": "<p>We are creating a FHIR service for support sending of electronic communication objects, like SMS and e-mail.<br>\nIt receives the CommunicationRequest object (POST), that  contain the message and the communication type<br>\n(and other properties). This might be a basic question but I could not find documentation for the type of response the service can send back;<br>\nshould it always be OperationOutcome, or would Communication or CommunicationRequest be usable? Should this be up to the implementers to decide, or is this predefined?</p>",
        "id": 153846445,
        "sender_full_name": "Odd A. S. Dahl",
        "timestamp": 1473091875
    },
    {
        "content": "<p>It depends on how you're transmitting.  If you're using pure REST - i..e. posting to [base]/Communication, you'll either get back a 201 response (Communication instance has been stored), or you'll get back a 4xx or 5xx error, possibly with an OperationOutcome, indicating that the instance wasn't stored.  If you want to use an operation (e.g. posting to [base]/Communication$foo where foo is a defined operation), then you have the option of alternative responses.  But at the moment, we don't have any operations defined for this purpose.  You can define and use your own and/or submit change requests for some to be defined as part of the core specification.</p>",
        "id": 153846452,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1473102988
    },
    {
        "content": "<p>OK, OperationOutcome is out of the question then, but we'll need to send back information about the instance id that was stored so I'll look into operations. I see that it is possible to define your own - <a href=\"http://hl7.org/fhir/operations.html\" target=\"_blank\" title=\"http://hl7.org/fhir/operations.html\">hl7.org/fhir/operations.html</a>: \"Implementations are able to define their own operations in addition to those defined here. \"<br>\nThanks for the reply!</p>",
        "id": 153846672,
        "sender_full_name": "Odd A. S. Dahl",
        "timestamp": 1473254900
    },
    {
        "content": "<p>If you only need the instance id, you will get that with a regular <code>POST</code>. You can look into the <code>Location</code> header that was returned or you can say that you want the created resource back (with a <code>Prefer</code> header of <code>return=representation</code>), which will also contain the created id. The FHIR libraries may already do that for you and update the instance object (the Swift library does).</p>",
        "id": 153846687,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1473265389
    },
    {
        "content": "<p><a href=\"http://hl7-fhir.github.io/http.html#2.42.0.5.2\" target=\"_blank\" title=\"http://hl7-fhir.github.io/http.html#2.42.0.5.2\">http://hl7-fhir.github.io/http.html#2.42.0.5.2</a></p>",
        "id": 153846689,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1473265481
    },
    {
        "content": "<p>Thanks for the replies <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  and <span class=\"user-mention\" data-user-id=\"191339\">@Pascal Pfiffner</span> !<br>\nWe'll look into if we'll want to make it an operation, return the deafult HTTP with location, or if we'll leave it up to the requester to specify the Prefer return type in the header, or both (I know it should be supported accoring to the standard). With this information we have more options for this and future services we'll create.</p>",
        "id": 153846742,
        "sender_full_name": "Odd A. S. Dahl",
        "timestamp": 1473316216
    },
    {
        "content": "<p>Using a REST \"create\" post vs. an operation invocation post is two different URLs and two very different things - no need to use the Prefer return type.  In STU 3, I believe you can now use Prefer to indicate whether you want the created resource echoed back to you or not. And if there's a failure, you'll likely get back an OperationOutcome whether you want one or not.  But there's no way to get a Communication back in response to a post of a CommunicationRequest unless you're using an Operation.</p>",
        "id": 153846796,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1473367075
    },
    {
        "content": "<p>or conventional REST (request-response), or some other request-response style exchange.</p>",
        "id": 153846936,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1473534072
    },
    {
        "content": "<p>You also haven't indicated whether you expect the exchange to be real time. If not then you can use a FHIR REST Create (receive the location and potentially an OperationOutcome in the return) and then poll via FHIR Search for a Communication resource which is the response to the CommunicationRequest. </p>\n<p>It really comes down to the exchange pattern you need to support the business, in all cases the Communication and CommunicationRequest resources are the right ones to be exchanging.</p>",
        "id": 153846937,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1473534301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span> The answers above are all about what can be done within the context of FHIR.  If you choose to step outside the FHIR framework, you can do what you wish.  But within FHIR, if you post to [base]/CommunicationRequiest, you can't ever get back a Communication.</p>",
        "id": 153846947,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1473603932
    },
    {
        "content": "<p>Correct, the FHIR REST framework doesn't provide a Response resource to the POSTing of a Request resource if POSTed to a [base url]/Request endpoint, but I never said it did.</p>\n<p>I think that Odd is looking for ways to use FHIR in his solution. FHIR includes both content models are exchange methods, but use of the exchange methods is not required. Therefore, the exchange of FHIR content models via any exchange including one which may better suit a business need is not stepping outside the context of FHIR, but it is stepping outside the space defined by FHIR.</p>",
        "id": 153846951,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1473610307
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span>, to be FHIR-conformant, you must define what you do using the Conformance resource and you must adhere to the rules set in the spec around URL naming.  Certainly you can take the FHIR schemas and pass around data however you like.  But if you want to be conformant, then you need to do things the way the specification defines.  Given that the specification defines a way to do what he envisions - passing in a CommunicationRequest and getting back a Communication, it sort of makes sense  to try to do that in a conformant way.</p>",
        "id": 153846952,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1473614050
    },
    {
        "content": "<p>This sounds like FHIR has been redefined to REQUIRE one to use one of the FHIR information exchange protocols if one wishes to claim FHIR conformance - which is a new assertion and one which was from the beginning strongly asserted not to be the case.</p>\n<p>Following the URL naming is required if you use any protocol, FHIR or other, which specifies an URL naming requirement - so...?</p>",
        "id": 153846953,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1473616219
    },
    {
        "content": "<p>The base rule of FHIR conformance has always been: your system must have a Conformance instance that defines what it does, and the system must do what the Conformance instance says it does.  Furthermore, interfaces defined by the specification are expected to be adhered to.  So if you do a POST to [base]/Patient, you must behave as the FHIR specification declares.  If you do a post to [base]/Patient_foo-bar, then (at least right now), the behavior is undefined and can be whatever you like - though you'd need extensions on the Conformance resource to define the nature of that behavior.  (Which means it's a whole lot easier and more interoperable to use the Operation mechanism if you're doing HTTP.)  And of course, if you're sending things over SMTP or SOAP or whatever, then things are totally unconstrained, though again, defining your behavior using the Operation mechanism at least gives you a standard way of specifying inputs and outputs.</p>",
        "id": 153846954,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1473618316
    },
    {
        "content": "<p>Ok, so not saying that using FHIR described protocols is mandatory.</p>",
        "id": 153846955,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1473622609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span> I'm saying that if you want to call yourself FHIR conformant, you need to declare what you do in your Conformance instance.  Outside of what that instance declares, you can do other things, but you can't claim they're FHIR conformant.</p>",
        "id": 153847002,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1473657902
    },
    {
        "content": "<p>Great discussion, this helped me wrap my head around how we should implement FHIR services.<br>\nWe decided to be compliant to the standard and return the CommunicationResponse object for the POST endpoint . It will support realtime message transfers, and in the future we'll also support scheduled message. We are also going to implement the solution <span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span> described with a Communication endpoint where it is possible to get the status about the transfer, using the same ID that the CommunicationRequest request returns. This way the systems using the FHIR service can get the status of scheduled messages after they are sent. We also have default support for OperationOutcome on errors.</p>",
        "id": 153847234,
        "sender_full_name": "Odd A. S. Dahl",
        "timestamp": 1473835865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192254\">@Odd A. S. Dahl</span> I'm having trouble understanding your solution.  You're planning to POST a Communication and synchronously get back either a CommunicationResponse or an OperationOutcome, is that correct?</p>",
        "id": 153847258,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1473859349
    },
    {
        "content": "<p>The input POST message will be CommunicationRequest, and the response message will be the same. OperationOutcome will only be sent back if the message fails, e.g. failure in parsing the message according to the profile.</p>",
        "id": 153847261,
        "sender_full_name": "Odd A. S. Dahl",
        "timestamp": 1473859837
    },
    {
        "content": "<p>ok</p>",
        "id": 153847263,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1473860639
    },
    {
        "content": "<p>IHE has used the CommunicationRequest and Communication in a profile out for Trial Implementation - Mobile Alert Communication Management (mACM) <a href=\"http://www.ihe.net/uploadedFiles/Documents/ITI/IHE_ITI_Suppl_mACM.pdf\" target=\"_blank\" title=\"http://www.ihe.net/uploadedFiles/Documents/ITI/IHE_ITI_Suppl_mACM.pdf\">http://www.ihe.net/uploadedFiles/Documents/ITI/IHE_ITI_Suppl_mACM.pdf</a>  It leverages that this is a request for communication, allowing the actual communication to be over email, sms, iMessage, or even the ACM profile (using v2), </p>",
        "id": 153847264,
        "sender_full_name": "John Moehrke",
        "timestamp": 1473860673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"lloyd@lmckenzie.com\">@Lloyd McKenzie</span> Can you explain what the difference would be between creating an operation outcome versus invoking an operation to a query?</p>",
        "id": 153863913,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482082433
    },
    {
        "content": "<p>I want to return a bundle populated with a query of patients and their last taken vitals. Would I be able to do something like Patients/$operationName?_list=1234  ?</p>",
        "id": 153863914,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482082687
    },
    {
        "content": "<p>I'm not sure that I follow this/ </p>",
        "id": 153863915,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482098575
    },
    {
        "content": "<p>there is a template for getting the last set of vital signs in the spec..</p>",
        "id": 153863916,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482098588
    },
    {
        "content": "<p>hmm no</p>",
        "id": 153863917,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482098656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> <span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> I thought we talked about this?</p>",
        "id": 153863918,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482098673
    },
    {
        "content": "<p>@GG we did GFORGE <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9964&amp;start=0\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9964&amp;start=0\">#9964</a>  but my staff is a bit behind. :-)</p>",
        "id": 153863919,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482100817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191384\">@Mat Coolidge </span> I'm not sure I understand what you mean by \"invoking an operation to a query\".  Queries can be RESTful - do a GET on a resource endpoint and specify filter parameters; or you can define an operation that defines more complex behavior with a different endpoint.</p>",
        "id": 153863924,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1482103763
    },
    {
        "content": "<p>Like what Grahame had noted here <a href=\"http://www.healthintersections.com.au/?p=2464\" target=\"_blank\" title=\"http://www.healthintersections.com.au/?p=2464\">http://www.healthintersections.com.au/?p=2464</a> I want to be able to search on the patient resources and return a group of other resources</p>",
        "id": 153863925,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482104222
    },
    {
        "content": "<p>well, you can batch request, just like that</p>",
        "id": 153863926,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482106551
    },
    {
        "content": "<p>GET [base]/Observation?patient=[id]&amp;code[vital sign LOINC]&amp;_count=1&amp;_sort=-date</p>",
        "id": 153863927,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482106603
    },
    {
        "content": "<p>one in the batch for each vital sign you want</p>",
        "id": 153863928,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482106620
    },
    {
        "content": "<p>else see Eric's task, which deals with some of the issues</p>",
        "id": 153863929,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482106680
    },
    {
        "content": "<p>We would like to be able to do a single request</p>",
        "id": 153863930,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482106681
    },
    {
        "content": "<p>ok</p>",
        "id": 153863931,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482106692
    },
    {
        "content": "<p>It would be nice to be able to do an operation like this for each patient in the query. <a href=\"http://www.healthintersections.com.au/wp-content/uploads/2016/02/simple_summary.txt\" target=\"_blank\" title=\"http://www.healthintersections.com.au/wp-content/uploads/2016/02/simple_summary.txt\">http://www.healthintersections.com.au/wp-content/uploads/2016/02/simple_summary.txt</a></p>",
        "id": 153863932,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482106816
    },
    {
        "content": "<p>the request might not be last N</p>",
        "id": 153863933,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482106914
    },
    {
        "content": "<p>it could be everything since a date or any other query</p>",
        "id": 153863934,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482106948
    },
    {
        "content": "<p>I beleive I now understand what you mean by Batch requests. I might have been confusing an operation (Questionnaire Populate) for a batch request. Where is the best place for examples of requests and responses of batches?</p>",
        "id": 153864065,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482174989
    },
    {
        "content": "<p>Also would it be possible to \"cache\" a batch call to be rerun. In that I mean reprocessing the request with the latest responses?</p>",
        "id": 153864066,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482175035
    },
    {
        "content": "<p>there's really only the examples you were looking at. </p>",
        "id": 153864068,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482175426
    },
    {
        "content": "<p>and it's certainly possible - do we need to do anything in the spec to help? I can't think of anything?</p>",
        "id": 153864069,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482175460
    },
    {
        "content": "<p>I would find it useful to see a detailed example of the POST calls with URL and body and the defined returns</p>",
        "id": 153864262,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482236702
    },
    {
        "content": "<p>For example do all batch operations occur at root? Can you perform one on a given resource like a patient and pass the param into the batch operations?</p>",
        "id": 153864263,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482236794
    },
    {
        "content": "<p>I would like to be able to perform it on a list that references patients and have the first patient GET take the resource ref then use the ref for the allergies, meds, ets</p>",
        "id": 153864264,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482236907
    },
    {
        "content": "<p>etc</p>",
        "id": 153864265,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482236910
    },
    {
        "content": "<p>it sounds like that might include one batch operation calling others, which we can do</p>",
        "id": 153864266,
        "sender_full_name": "Mat Coolidge ",
        "timestamp": 1482236990
    },
    {
        "content": "<p>you post the batch to root, but the things with in it have their own path. The examples include both request and response</p>",
        "id": 153864267,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482237270
    },
    {
        "content": "<p>I have implemented FHIR with protocol Buffers. It still exposes everything over a Restful JSON API also. Has anyone done this too . I am looking for collaborators and testers</p>",
        "id": 153864984,
        "sender_full_name": "Joe Blue",
        "timestamp": 1482846684
    }
]