[
    {
        "content": "<p>There are several sites that describe what contained resources are and when they should be used, but I've yet to find any documentation, containing sufficient examples, on how to structure the query. On <a href=\"http://HL7.org\" target=\"_blank\" title=\"http://HL7.org\">HL7.org</a> they mention a parameter that can be set to \"both\" to return both contained and non-contained resources, but I have not found any examples of that either. Any help would be appreciated.</p>",
        "id": 153835618,
        "sender_full_name": "Odd A. S. Dahl",
        "timestamp": 1467200823
    },
    {
        "content": "<p>You would construct the query according to the search syntax listed on the <a href=\"http://www.hl7.org/fhir/search.html\" target=\"_blank\" title=\"http://www.hl7.org/fhir/search.html\">search page</a> and add _contained as one of the parameters. For example:</p>\n<div class=\"codehilite\"><pre>GET Medication?ingredient=Substance/x23&amp;_contained=both\n</pre></div>",
        "id": 153835622,
        "sender_full_name": "Mirjam Baltus",
        "timestamp": 1467201817
    },
    {
        "content": "<p>Whouldn't searching for a specific entry like x23 defeat the purpouse of contained? The resource we want to have contained in the message do not have a queryable ID outside of the main object it is contained inside.</p>",
        "id": 153835623,
        "sender_full_name": "Odd A. S. Dahl",
        "timestamp": 1467202226
    },
    {
        "content": "<p>In my example search, I'm searching for all Medication resources that have an ingredient reference to a Substance resource with id x23. So the contained Medication resource still doesn't have its own id.<br>\nI could also have searched for Medication resources with a certain code, if that example makes it clearer to you:</p>\n<p>GET Medication?code=585007&amp;_contained=both</p>",
        "id": 153835625,
        "sender_full_name": "Mirjam Baltus",
        "timestamp": 1467202595
    },
    {
        "content": "<p>This would return all normal Medication resources, plus all contained Medication resources that have the specified code.</p>",
        "id": 153835626,
        "sender_full_name": "Mirjam Baltus",
        "timestamp": 1467202670
    },
    {
        "content": "<p>Thanks. Would it be possible to use it in an unspecific search?<br>\nOur service return Encounter objects, which contains Location objects that we cannot query direcly, and we want to support either containing or including them. Would it be possible/correct to ask something like \"GET Encounter?location&amp;_contained=both\"?</p>",
        "id": 153835628,
        "sender_full_name": "Odd A. S. Dahl",
        "timestamp": 1467203556
    },
    {
        "content": "<p>I'm not quite sure what you mean by \"either containing or including them\".<br>\nIf you search for all Encounters with<br>\n   GET [fhirbase]/Encounter<br>\nyou will get back all Encounter resources. If an Encounter resource contains a Location resource, by definition that Location resource will be returned in the search result in the Encounter.contained part. You will not get back any stand alone Location resources this way.<br>\nIf you want to retrieve all Location resources, both normal and contained ones, I would perform the search with:<br>\n  GET [fhirbase]Location?_contained=both</p>",
        "id": 153835632,
        "sender_full_name": "Mirjam Baltus",
        "timestamp": 1467203946
    },
    {
        "content": "<p>We only have an Encounter service, and do not have the data to support a pure Location service. The Location objects that are returned come from the data that we query when somebody search for an FHIR Encounter, so when somebody search for Encounters with id = xyz we get the data for that Encounter (which we map to a FHIR Encounter object) and also the Location data that this encounter contains (which we map to the FHIR Location object).</p>\n<p>.</p>\n<p>Our thoughts was that they could specify in the parameters if they wanted to include the Location objects (bundle the Encounter and Location objects, with internal references from the Encounter objects to the Location objects), or contain them inside the Encounter objects. The query for include is straight forward, but we couldn't find examples for contained.</p>\n<p>.</p>\n<p>Since we have no Location service we cannot do a GET [fhirbase]\\Location?_contained=both, it is only available from the Encounter query (so we cannot make Location a seperate service).<br>\nFor Encounter, with all Location data contained (instead of the default which is supplying an URL), would the query look something like this? : GET Encounter?location&amp;_contained=both\"?</p>",
        "id": 153835641,
        "sender_full_name": "Odd A. S. Dahl",
        "timestamp": 1467205199
    },
    {
        "content": "<p>well, you're the first person to actually explore this. I don't know whether any servers support it </p>",
        "id": 153835665,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467208454
    },
    {
        "content": "<p>Could this perhaps be solved by doing a search with an include?<br>\nSo something like:</p>\n<p>GET [fhirbase]/Encounter?_include=Encounter:location</p>\n<p>which would result in a Bundle of Encounters plus the Location objects they reference. Normally those Locations would be stored on the server Location endpoint, but from what you described your server is doing some processing anyway, mapping to the FHIR resources when the request is made.</p>",
        "id": 153835840,
        "sender_full_name": "Mirjam Baltus",
        "timestamp": 1467268894
    },
    {
        "content": "<p>If they're not interested in the Locations, they would just do the search without the _include.</p>",
        "id": 153835841,
        "sender_full_name": "Mirjam Baltus",
        "timestamp": 1467268991
    },
    {
        "content": "<p>That is correct, we are preprosessing the request from a FHIR query, select the data from a external HL7 v3 web service, then mapping the response back to FHIR.<br>\nSince we have both the Encounter and Location objects mapped to internal FHIR objects we can structure the response to support both _include and _contained. It is only a matter of where to put the Location-objects in the FHIR response.<br>\n.<br>\nSo we have the objects and know the mapping to support both methods, but what we lack is the query syntax for contained request. If there is no standard way of doing that query we might go with just supporting include.</p>",
        "id": 153835842,
        "sender_full_name": "Odd A. S. Dahl",
        "timestamp": 1467269693
    },
    {
        "content": "<p>Yes, there's no standard way for clients of saying: give me the Encounter resources and put the Locations in Encounter.contained.<br>\nThe _contained is for asking: if there are contained resources of the type I'm performing the search on, I would like to do the search on those contained ones as well.</p>",
        "id": 153835844,
        "sender_full_name": "Mirjam Baltus",
        "timestamp": 1467273025
    },
    {
        "content": "<p>Thanks for the feedback! We'll support only _include then, which in retrospect seems to be the most useful of the two options for this scenario anyway.</p>",
        "id": 153835858,
        "sender_full_name": "Odd A. S. Dahl",
        "timestamp": 1467286129
    },
    {
        "content": "<p>This might be the wrong channel for this, but has anyone ever come across a situation where you want to search, say, Observations with <code>code:in</code> a ValueSet that you'd like to send along with your search request as a contained resource?</p>",
        "id": 153841278,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1469629624
    },
    {
        "content": "<p>basically, you'd be doing a <code>POST</code> instead of a <code>GET</code>, and you'd have something like <code>?code:in=ValueSet/#contained-id</code> along with the contained resource in your request data</p>",
        "id": 153841279,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1469629674
    },
    {
        "content": "<p>is that supported / does anyone do that?</p>",
        "id": 153841281,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1469629686
    },
    {
        "content": "<p>That's a belieable use case, for sure, but it's not supported. Ony my server, I need to index the value set first - and I think that would be fairly normal </p>",
        "id": 153841305,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469644084
    }
]