[
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=16874\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=16874\">GF#16874</a> - we are going to allow the exponential form for decimals. For those of you who use the java reference implementation directly (as opposed to using HAPI), I am replacing the gson with my own JSON parser, since Gson doesn't preserve the number presentation properly in the corner cases. <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> you will need to pay careful attention to this in HAPI)</p>",
        "id": 153967837,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528372691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> I am also making a change to DecimalType: </p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"kd\">protected</span> <span class=\"n\">String</span> <span class=\"nf\">encode</span><span class=\"o\">(</span><span class=\"n\">BigDecimal</span> <span class=\"n\">theValue</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">getValue</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n</pre></div>",
        "id": 153967890,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528402926
    },
    {
        "content": "<p>instead of </p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"kd\">protected</span> <span class=\"n\">String</span> <span class=\"nf\">encode</span><span class=\"o\">(</span><span class=\"n\">BigDecimal</span> <span class=\"n\">theValue</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">getValue</span><span class=\"o\">().</span><span class=\"na\">toPlainString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n</pre></div>",
        "id": 153967891,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528402945
    },
    {
        "content": "<p>ok I have committed the changes. <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> <span class=\"user-mention\" data-user-id=\"191339\">@Pascal Pfiffner</span> <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> <span class=\"user-mention\" data-user-id=\"191318\">@nicola (RIO/SS)</span> + anyone else maintaining reference implementations etc, I found this a fairly long piece of string. It's fairly simple in concept:</p>\n<blockquote>\n<p>decimal now allows exponential form as well as normal form e.g. 1.023e+3 is now valid where it wasn't</p>\n</blockquote>\n<p>But it has a long tail:</p>\n<ul>\n<li>this will also apply to searching as well (e.g. search parameters that are numbers)</li>\n<li>the scale allowed is that allowed in the xsd schema for double. This is very large... </li>\n<li>special values like NaN and +INF and -INF are not allowed (no json form, not request, we have different ways of handling these)</li>\n<li>we still say that the presentation form must be maintained so e.g. 1.023e+3 should not be replaced by 1023. I had to do quite some work in the infrastructure to get this right. I think that reference implementations should get this right</li>\n<li>the schema type for decimal has changed to a union of decimal and double - this might be problematic for xml generators</li>\n<li>there's an example observation (observation-decimal.xml) that explores some of these issues. It's intended to support round -trip testing</li>\n</ul>",
        "id": 153967940,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528418771
    },
    {
        "content": "<p>searching those ridiculous numbers in observation-decimal is fun. For me, once the number gets into imaginary number status (&gt; 1e20 or closer to 0 than 1e-30) then I mash them all together into a special value and everything matches everything. I don't think we should make hard rules about functional behaviour at these limits</p>",
        "id": 153967994,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528432058
    },
    {
        "content": "<p>btw, both those numbers are configurable; it people start challenging those numbers, I'll up them, and all that will happen is my database indexes will get bigger...</p>",
        "id": 153967995,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528432140
    },
    {
        "content": "<p>Do you intend to menion those limits in the conformance statement?</p>",
        "id": 153968255,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1528698571
    },
    {
        "content": "<p>no</p>",
        "id": 153968264,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528702930
    },
    {
        "content": "<p>\"we still say that the presentation form must be maintained so e.g. 1.023e+3 should not be replaced by 1023. I had to do quite some work in the infrastructure to get this right. I think that reference implementations should get this right\"</p>\n<p>Mmmm...I have to check whether I can make the .NET Json parser do that.</p>",
        "id": 153968711,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1528812269
    },
    {
        "content": "<p>That seems to be doable. ok.</p>",
        "id": 153968713,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1528812420
    }
]