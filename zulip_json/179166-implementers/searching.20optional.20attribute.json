[
    {
        "content": "<p>AllergyIntolerance.category is an optional attribute with possible values drug, food, environment, and other. If I want to search for drug allergies, what is the best (most efficient and accurate) way to do that?  I can't simply search with category=drug because that would miss resources where 'category' is missing  (PS -- I am trying to build a drug allergy list, so the answer can't be 'get the drug allergy list')<br>\n(note - in original post, I confused type and category - what I meant was category)</p>",
        "id": 153813975,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1457219511
    },
    {
        "content": "<p>As far as I can tell right now, <span class=\"user-mention\" data-user-id=\"191447\">@Mark Kramer</span>, if you want to avoid non-drug allergies you have to write two queries:</p>\n<div class=\"codehilite\"><pre><span></span>GET /AllergyIntolerance?category=medication\nGET /AllergyIntolerance?category:missing=true\n</pre></div>\n\n\n<p>This is a pain, of course (and the \"include missing\" logic is harder than other \"or\" searches that could be handled like <code>category=food,medication</code>; perhaps it's worth an API level fix for this discrepancy). </p>\n<p>Don't forget that you could just get all allergies and filter client-side. This is unlikely to be a huge list, so it's probably the better approach :/</p>\n<p>(And note that for food vs. drug allergies you need <a href=\"http://hl7-fhir.github.io/allergyintolerance-definitions.html#AllergyIntolerance.category\" target=\"_blank\" title=\"http://hl7-fhir.github.io/allergyintolerance-definitions.html#AllergyIntolerance.category\"><code>category</code></a> rather than <a href=\"http://hl7-fhir.github.io/allergyintolerance-definitions.html#AllergyIntolerance.type\" target=\"_blank\" title=\"http://hl7-fhir.github.io/allergyintolerance-definitions.html#AllergyIntolerance.type\"><code>type</code></a>).</p>",
        "id": 153813980,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1457232058
    },
    {
        "content": "<p>I'm not sure what the API fix for this would be. But AllergyIntolerance.category is a pain - anytime you do analysis on this attribute with a bunch of clinical record stakeholders, you're going to get a lot of pain and argument. </p>",
        "id": 153813983,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457251705
    },
    {
        "content": "<p>are there other cases like this? </p>",
        "id": 153813984,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457251713
    },
    {
        "content": "<p>The API level fix would be something like replacing the :missing modifier with an empty value, so <code>?category=medication,,</code> (I'm not advocating this, just explaining what I meant by API level fix) </p>",
        "id": 153814029,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1457310602
    },
    {
        "content": "<p>no I wouldn't advocate it either, but what other options is there? </p>",
        "id": 153814030,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457310770
    },
    {
        "content": "<p>The only alternative I see is top level boolean (and/or)  structures  for the REST API.</p>",
        "id": 153814032,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1457311284
    },
    {
        "content": "<p>top level boolean? </p>",
        "id": 153814034,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457311353
    },
    {
        "content": "<p>Like the ability to create arbitrary and/or queries. </p>",
        "id": 153814035,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1457311395
    },
    {
        "content": "<p><code>?$or:[{category:{$missing: true}}, {$category: \"medication\"}}]</code></p>",
        "id": 153814036,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1457311514
    },
    {
        "content": "<p>should use _filter for that</p>",
        "id": 153814037,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457311670
    },
    {
        "content": "<p>I'm just saying that the REST API could supported this sort out logic. </p>",
        "id": 153814038,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1457311824
    },
    {
        "content": "<p>we do support it in the _filter parameter</p>",
        "id": 153814039,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457311849
    },
    {
        "content": "<p>_filter isn't on many people's radar (mine  included) </p>",
        "id": 153814040,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1457311850
    },
    {
        "content": "<p>Of course. </p>",
        "id": 153814041,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1457311856
    },
    {
        "content": "<p>yes. cause it's complicated. So lets clone the complications? </p>",
        "id": 153814042,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457312000
    },
    {
        "content": "<p>Hey now, I was just answering your question of how we could deal with this feature! </p>",
        "id": 153814043,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1457313827
    },
    {
        "content": "<p>ok fair enough. On the other hand, I'm not sure we want to impose _filter for this case.</p>\n<p>GET AllergyIntolerance?category:may=medication</p>",
        "id": 153814045,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457314485
    },
    {
        "content": "<p>or soemthing like that </p>",
        "id": 153814046,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457314491
    },
    {
        "content": "<p>Grahame, you asked if there are other cases like this, and I think there are many, many category-like elements that are both optional and searchable. </p>",
        "id": 153814517,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1457479831
    },
    {
        "content": "<p>and also where the idea of excluding known others but not unknowns arises? like Observation.category perhaps. </p>",
        "id": 153814518,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457481338
    },
    {
        "content": "<p>SQL deals with this with a double negative, right? </p>",
        "id": 153814519,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457481349
    },
    {
        "content": "<p>select * from AllergyIntolerance where IsNull(category, 'drug') = 'drug'</p>",
        "id": 153814520,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1457485282
    },
    {
        "content": "<p>Would be one way to do it.</p>",
        "id": 153814521,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1457485287
    },
    {
        "content": "<p>or select * from AllergyIntolerance where not categroy != 'drug'</p>",
        "id": 153814522,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457485332
    },
    {
        "content": "<p>You and your fancy SQL. <code>where category=NULL or category='drug'</code></p>",
        "id": 153814525,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1457490055
    },
    {
        "content": "<p>well, that's 3 ways to do it. Anyone want to try for 4? </p>",
        "id": 153814526,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457492721
    },
    {
        "content": "<p>GET [base]/AllergyIntolerance?category=drug,:missing</p>",
        "id": 153814527,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457492752
    },
    {
        "content": "<p>that would be the equivalent, except that :missing is a modifier and can't be combined like that. That's the core problem, I think</p>",
        "id": 153814528,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457492879
    },
    {
        "content": "<p>I actually like the :may modifier you proposed above:</p>",
        "id": 153814529,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1457493105
    },
    {
        "content": "<p>GET AllergyIntolerance?category:may=medication</p>",
        "id": 153814530,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1457493106
    },
    {
        "content": "<p>Reads pretty naturally, category may equal medication.</p>",
        "id": 153814531,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1457493122
    },
    {
        "content": "<p>great. Someone likes me. I was beginning to wonder...</p>",
        "id": 153814532,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1457494135
    },
    {
        "content": "<p>And that :missing assumes a true value</p>",
        "id": 153815571,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1458018982
    },
    {
        "content": "<p>Should :missing consider nullflavour extensions too?</p>",
        "id": 153815572,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1458019011
    },
    {
        "content": "<p>I would consider them missing</p>",
        "id": 153815573,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458020026
    },
    {
        "content": "<p>(as the node would exist, but its meaning is that it's not there)<br>\nAnd my search logic needs to be updated (and my servers fhirpath expressions for validation will want some internal checking also)</p>",
        "id": 153815574,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1458020116
    },
    {
        "content": "<p>I don't think it should care about the type of extension - if @value isn't there, it's \"missing\".  Do we need to clarify the text of the spec to make that explicit?</p>",
        "id": 153815650,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1458041855
    },
    {
        "content": "<p>as long as its the @value that exists, and not the parent node (which has the name in it)</p>",
        "id": 153815652,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1458042307
    },
    {
        "content": "<p>FYI -- this topic of searching on optional attributes came up in Patient Care (related to <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12136\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12136\">GF#12136</a>).  While PC agreed to add a usage note for AllergyIntolerance.category searches, does a broader statement exist anywhere to reiterate being careful when searching on optional attributes (e.g. consider how missing/null should be handled in each use case and if missing/null is needed then recommend which way to query for either missing or value XYZ)?</p>",
        "id": 153855519,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1478276373
    },
    {
        "content": "<p>logical place is to add a note to the implementers safety chcek list</p>",
        "id": 153855541,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478285748
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12324\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12324\">GF#12324</a> has been logged</p>",
        "id": 153855780,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1478526538
    }
]