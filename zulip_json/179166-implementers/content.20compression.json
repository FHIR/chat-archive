[
    {
        "content": "<p>I'm interested in the servers out there who believe's their server is supporting the gzip (or deflate) content compression. And those that support receiving compressed content, or those that will just return compressed output.<br>\n'Accept-Encoding: gzip' and `Content-Encoding: gzip' support is what I'm looking for.<br>\nWe're adding support to this in the .NET client, and wanted to know other servers that are supporting it so that we can test things (sqlonfhir supports both read and write)</p>",
        "id": 153852779,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1476363156
    },
    {
        "content": "<p>I just checked HAPI, and looks like it supports both request body and respinse body gzip encoded.</p>",
        "id": 153852780,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1476363580
    },
    {
        "content": "<p>You will also get automatic and transparet compression from using the new http protocol -- http/2 </p>",
        "id": 153852783,
        "sender_full_name": "John Moehrke",
        "timestamp": 1476376123
    },
    {
        "content": "<p>do you think there is any other advnatage from http/2?</p>",
        "id": 153852855,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1476472522
    },
    {
        "content": "<p>Resurrecting this thread... We are interested in the 'Accept-Encoding: gzip' and `Content-Encoding: gzip' headers to reduce the size of a very repetitive FHIR query response (400 kb compressed to 12 kb).  I see security considerations regarding BREACH but don't fully understand if a FHIR server supporting gzip and SMART/OAuth tokens would be vulnerable.  Assuming the app is a different origin than the FHIR server and the app uses an OAuth token, would the response from the server be subject to BREACH if it uses gzip?</p>",
        "id": 193224114,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1586281833
    },
    {
        "content": "<p>reading the details of the attack... it's in the incoming request, not the outgoing one, wher the problem is, right? <span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> can you confirm that? My read is that you should prohibit incoming gzip compression, but server -&gt; client content is variable anyway, so it isn't useful for BREACH</p>",
        "id": 193249549,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1586294079
    },
    {
        "content": "<p>This is my understanding as well. The vulnerability is upon the recipient of the gzip content. So a server would be at risk when accepting a PUT or POST with gzip; a client would be at risk accepting a GET with gzip. The vulnerability is because of gzip containing malicious encoding or content.  A mitigation, which is likely already in place, is the authentication of the sender of that gzip; thus lowering the risk of a malicious sender providing content leveraging gzip vulnerabilities. That is to say that your clients are authenticating the server, hopefully strongly and not just generic https; and your servers are authenticating the clients, likely thru OAuth, strongly and not just looking for auth header without validating it. Thus you have a contained community, something that the general internet use of http doesn't have as pre-conditions.</p>",
        "id": 193316331,
        "sender_full_name": "John Moehrke",
        "timestamp": 1586351188
    },
    {
        "content": "<p>note that http/2 compression is broader than gzip. The compression lookup  code table is maintained across a persistent TCP session for many sub-session (http) interactions (aka multiplexing). Thus the compression is benefiting from all of the FHIR modeling consistency for all sessions between that client and server; not needing to build that lookup table each http interaction like gzip needs to.</p>",
        "id": 193317778,
        "sender_full_name": "John Moehrke",
        "timestamp": 1586351832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> I don't understand the BREACH attack to be as you describe.  I believe it is an attack by a third party that observes a message encoded by HTTP compression where the compressed message contains secrets like CSRF token.  The malicious party sends repeated requests while guessing common secret strings like \"request_token=a\", \"request_token=b\" observing the length of the reply.  When the length decreases, the malicious party knows they've guessed a matching substring due to compressing a repeated value.  This attack isn't mitigated by authentication from what I understand.  It seems one proper mitigation involves hiding the exact length of the response (ex: TLS 1.3 record padding).</p>",
        "id": 193348306,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1586364895
    },
    {
        "content": "<p>where is that one documented? I guess I could understand it, but it is even more esoteric... I think client authentication does mitigate (lower risk), right?</p>",
        "id": 193348649,
        "sender_full_name": "John Moehrke",
        "timestamp": 1586365052
    },
    {
        "content": "<p>Here is the best reference I have seen: <a href=\"https://arstechnica.com/information-technology/2013/08/gone-in-30-seconds-new-attack-plucks-secrets-from-https-protected-pages/\" title=\"https://arstechnica.com/information-technology/2013/08/gone-in-30-seconds-new-attack-plucks-secrets-from-https-protected-pages/\">https://arstechnica.com/information-technology/2013/08/gone-in-30-seconds-new-attack-plucks-secrets-from-https-protected-pages/</a></p>",
        "id": 193350140,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1586365711
    },
    {
        "content": "<p>We are thinking that a FHIR server should only support compression when it can do so securely (or has no sensitive data).  For us, this likely means only returning compressed responses when we trust the client referrer value.  TLS 1.3 sounds good but it seems the EHR community allows TLS 1.0, 1.1, 1.2 and IE 10, 11.</p>",
        "id": 193365445,
        "sender_full_name": "Travis Cummings",
        "timestamp": 1586373100
    },
    {
        "content": "<p>the key is that the BREACH attack isn't by a random observing 3rd party - it's only from someone inside the process who can orchestrate it - it's a layer break. So if you can orchestrate the sender, but are not trusted by the sender, you can break the sender.</p>\n<p>so: </p>\n<ul>\n<li>an application running inside a browser is obviously susceptible. </li>\n<li>An native application requires that the application be reverse engineered, and any encryption is probably reverse engineerable - if it's not, and it's supposed to still be resistant to that, BREACH is a factor. </li>\n<li>a close server is only susceptible if someone can hack into the server</li>\n<li>a server running extensible code, but offering encryption to that code while that code is not trusted, that's also susceptible.</li>\n</ul>\n<p>so the take away: if you have a closed server, then you can safely return gzip content without worrying about BREACH (just all the standard worries about general server security)</p>",
        "id": 193379040,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1586380178
    },
    {
        "content": "<p>I cannot see how the server needs to worry about the state of the client. But if you really do, just add some random value somewhere in every response - a useless header or something.  Then there's no chance that an agent on the client can orchestrate the server response enough. But really, on a FHIR interface... how could you do that? I suppose there could be some PUT patient / GET patient cycle that made it susceptible...</p>",
        "id": 193379251,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1586380307
    }
]