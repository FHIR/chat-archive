[
    {
        "content": "<p>On my reading: if a FHIR search returns a specific set results, then adding search parameters would filter these down to a subset of those results. For example, searching for <code>Condition?patient=123</code> returns all conditions, and <code>Condition?patient=123&amp;clinicalStatus=resolved</code> returns a subset of all conditions.</p>\n<p>However, some implementation have different/special \"default\" rules, so that <code>Condition?patient=123</code> returns a restricted set of results. This behavior has surprised me, and caused me to miss out on relevant data in my \"fetch all\" queries. I've heard similar experiences from <span class=\"user-mention\" data-user-id=\"191414\">@Dan Gottlieb</span>  and from <span class=\"user-mention\" data-user-id=\"191339\">@Pascal Pfiffner</span>, with respect to default rules in open.epic.</p>\n<p>My take: an app developer following the FHIR spec, or Argonaut / US Core, expects to see all available conditions (and meds, etc) when searching without a status filter. Indeed, the spec and the IGs seem to require it.</p>\n<p><a href=\"http://www.hl7.org/fhir/us/core/StructureDefinition-us-core-condition.html\" target=\"_blank\" title=\"http://www.hl7.org/fhir/us/core/StructureDefinition-us-core-condition.html\">e.g. in US Core</a>, </p>\n<div class=\"codehilite\"><pre><span></span>GET /Condition?patient=[id]\nExample: GET [base]/Condition?patient=1032702\nSupport: Mandatory to support search by patient.\n</pre></div>\n\n\n<p>I'd like to discuss here. Would someone make a case that it's good for interoperability or patient safety for different EHRs to set different default rules on this kind of search?</p>\n<p>Cc <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <span class=\"user-mention\" data-user-id=\"191864\">@Isaac Vetter</span>  <span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span></p>",
        "id": 165634765,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1557849593
    },
    {
        "content": "<p>With default rules, does the search bundle's link.url indicate what search query the server is actually returning?</p>",
        "id": 165637612,
        "sender_full_name": "Paul Church",
        "timestamp": 1557851585
    },
    {
        "content": "<p>Let's assume for the moment that these are reflected in the self link.  Does that change your assessment?</p>",
        "id": 165640865,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1557853695
    },
    {
        "content": "<p>(it doesn't change mine.)</p>",
        "id": 165640887,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1557853715
    },
    {
        "content": "<p>Forgot to add from the US Core documentation:</p>\n<div class=\"codehilite\"><pre><span></span>Implementation Notes:Â Search for all problems and health concerns for a patient.\n</pre></div>",
        "id": 165641123,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1557853867
    },
    {
        "content": "<p>I would surely prefer that there were no special rules or defaults. Being things as they are we have vendor-specific configuration in our app that generate searches with the necessary parameters.</p>",
        "id": 165642254,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1557854631
    },
    {
        "content": "<p>(and no, having that information returned in the self link or in an OperationOutcome would not help - you still need to figure out which kind of search you have to generate to get all the data)</p>",
        "id": 165642353,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1557854688
    },
    {
        "content": "<p>I think vendor specific configuration isn't great -- though realistically we'll probably never get entirely away from it <span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span> . What scares me the most in this case is that the query is handled but silently (or at least, automatically) altered without an http error response -- so a developer is very likely not to notice what is going on. This happened to me and I've heard reports from others as well.</p>",
        "id": 165642498,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1557854779
    },
    {
        "content": "<p>One example is Epic MedicationOrder - it automatically filters out non-active ones: 'By default, active medications are returned.' (<a href=\"https://open.epic.com/Clinical/FHIR?whereTo=medication\" target=\"_blank\" title=\"https://open.epic.com/Clinical/FHIR?whereTo=medication\">https://open.epic.com/Clinical/FHIR?whereTo=medication</a>)</p>",
        "id": 165642978,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1557855111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>  It would push me towards acceptable. There are a lot of situations, such as handling=lenient or the thread about the server's discretion to apply only parts of a PUT request that it thinks are appropriate, where the spec is structured as \"the server has broad discretion but reports back to the client what it chose to do\".</p>\n<p>Based on that pattern, if the extra parameters are in the self link at least the client knows what it got.</p>",
        "id": 165643922,
        "sender_full_name": "Paul Church",
        "timestamp": 1557855701
    },
    {
        "content": "<p>The biggest challenge is: If a client <em>didn't</em> get what it wanted, how can it choose to then get it?  It's hard to program in advance to accommodate arbitrary extra filters that get added.  It's not as though you can just query again with no filters and say \"no, this is what I really want!\".</p>",
        "id": 165644093,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557855819
    },
    {
        "content": "<p>Considering this from a different angle, the search is always filtered by \"resources the client has access to\" which could be very opaque. The client often doesn't know the scope of what is hidden, and there are no query terms that will return more.</p>\n<p>Do \"default search terms\" contain some way to convince the server of what you really want? Is there a magic word to get Epic to give you non-active MedicationOrders?</p>",
        "id": 165644472,
        "sender_full_name": "Paul Church",
        "timestamp": 1557856068
    },
    {
        "content": "<p>Indeed, coping/updating queries in-band is unrealistic for all but the most sophisticated clients. I assume the expected behavior is \"1. read the docs, 2. recognize where they might contradict the base spec or any IGs, and 3. update your app's query configuration with special cases.\" Since the docs are long and largely redundant across vendors, 1 and 2 are hard in practice (and 3 is tedious) especially for apps that want to connect dynamically to a variety of API providers.</p>",
        "id": 165644623,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1557856151
    },
    {
        "content": "<p>I think the \"magic word\" is <code>&amp;status=resolved,active,...</code></p>",
        "id": 165644675,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1557856200
    },
    {
        "content": "<blockquote>\n<p>I think the \"magic word\" is &amp;status=resolved,active,...</p>\n</blockquote>\n<p>Yes</p>",
        "id": 165644755,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1557856220
    },
    {
        "content": "<p>But that's that same as the documented behavior in the absence of this search parameter.</p>",
        "id": 165644766,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1557856227
    },
    {
        "content": "<p>If Argonaut or US core wanted to eliminate the \"bare\" API call and document only the call with a status list, that'd be verbose but at least explicit / less surprising. Then a server could refuse queries that lacked a status.</p>",
        "id": 165644882,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1557856301
    },
    {
        "content": "<p>(I just can't see how that's an improvement over the standard FHIR definitions.)</p>",
        "id": 165645002,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1557856353
    },
    {
        "content": "<p>Regarding Epic's support - our intent is to represent data as safetly as possible. For medication searches especially, the thought is if by default you only get the active meds this would make it hard to miss represent what the patient is actively taking and avoid unsafe representations of a patient's meds. </p>\n<p>I do realize this behavior is hard to know without reading a given server's documentation and that isn't ideal. Maybe it is something we can more formally adopt in US Core/Argonaut profiles if others feel this scenario makes sense or sees a value in it. I'd be happy to discuss it further on an upcoming Argonaut call <span class=\"user-mention\" data-user-id=\"191410\">@Brett Marquard</span> or <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span></p>",
        "id": 165648364,
        "sender_full_name": "Danielle Friend",
        "timestamp": 1557858562
    },
    {
        "content": "<p>In what I would consider a more common scenario - it seems reasonable to me that servers would not return \"entered-in-error\" statuses by default as this information is no longer valid and maybe not even discoverable without the old reference (such as by FHIR ID). What do others think of that type of defaulting scenario?</p>",
        "id": 165648406,
        "sender_full_name": "Danielle Friend",
        "timestamp": 1557858587
    },
    {
        "content": "<p>The point of an \"entered in error\" status is that it's deemed important to let others know that the record existed.  (Otherwise, you'd just execute a delete.)  I guess the question is whether we trust systems to pay attention to 'modifier' elements  in resources they retrieve.  If they don't do that, there's no way such a system can be safe period.  (If they don't check status, there's little chance that they're looking for modifier extensions or at more esoteric elements such as Resource.implicitRules.)   I think the community would be better off with consistent APIs but with some up-front checking that systems you connect to have actually looked at all of the FHIR safety rules and do what they're supposed to do.  After all, all of the EHRs have processes they use to determine whether a given client/consumer is 'safe' to access the data.  It seems that this is something that could be verified as part of that process.</p>",
        "id": 165648828,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557858862
    },
    {
        "content": "<p>I agree with Lloyd on this point-- if an app developer doesn't understand the basic essential properties of a medication resource or a condition resource, there is zero chance that developer is going to build a safe app. Trying to fix this through clever defaults won't really put a dent in this.</p>",
        "id": 165649575,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1557859338
    },
    {
        "content": "<p>to my mind, it would be better to get agreement about this at the level of the base specification rather than in a particular community like Argonaut, unless we think there's really something community specific about the right answer.</p>",
        "id": 165649614,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1557859366
    },
    {
        "content": "<p>But wherever the agreement happens, it's particularly important that we have a shared understanding of how to make this work in time for the final US Core publication.</p>",
        "id": 165649683,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1557859419
    },
    {
        "content": "<p>returning 'entered-in-error' and 'inactive' for a unsophisticated client sounds equally scary to me..</p>",
        "id": 165653963,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1557862191
    },
    {
        "content": "<p>BUT, I completely agree this has to be more clear  that the current searches aren't returning 'all'</p>",
        "id": 165654030,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1557862216
    },
    {
        "content": "<p>\"more clear\" isn't really enough.  The client has to have some degree of control over what's coming back and it's very difficult for clients (without customizing on a per-server basis - which is the last thing we want) to be able to get what they want if a server applies filters by default.  When a server ignores certain filters and tells you, the client can let the user know and/or pick up the slack.  However, if a server adds extra stuff, the client can let the user know that they're missing stuff, but (without customization) can't actually get the data.</p>",
        "id": 165654775,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557862865
    },
    {
        "content": "<p>We already have more than one example of servers not returning everything when status isn't present. I think it's time we revisit including status in the base US Core/Argonaut Queries</p>",
        "id": 165654896,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1557862939
    },
    {
        "content": "<p>I trust the servers were thoughtful in how they decided to not return all statuses. We should be equally thoughtful in exposing this is a reality of implementations.</p>",
        "id": 165654999,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1557863014
    },
    {
        "content": "<p>I agree, I would like to revisit the statuses in our US Core/Argonaut IGs. Especially around meds.</p>",
        "id": 165655019,
        "sender_full_name": "Danielle Friend",
        "timestamp": 1557863035
    },
    {
        "content": "<p>Regarding Epic's search behavior, I do appreciate all the input and feedback - I plan to bring this back to the rest of the Epic FHIR team to revisit and discuss and will let folks know the outcome.</p>",
        "id": 165655078,
        "sender_full_name": "Danielle Friend",
        "timestamp": 1557863047
    },
    {
        "content": "<p>so this has tripped patients up, not just app developers. Making a default behavior not to return inactive or deleted medications unless specifically asked to resulted in inactive or deleted medications appearing in a patient's medication list. I've had 3 reports of that from end-users, for different apps.</p>",
        "id": 165657481,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557864544
    },
    {
        "content": "<p>so to be clear: what this was designed to is exactly what it created.</p>",
        "id": 165657492,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557864552
    },
    {
        "content": "<p>Can you explain the pathway by which that happened?</p>",
        "id": 165657531,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557864595
    },
    {
        "content": "<p>more generally, if I was going to identify critical safety risk areas in healthcare it, based on practical experience, the list would be <br>\n- misidentifying/mismatching patients (and it's special worst case, tripping up over patient merge)<br>\n- not consistently deleting information no longer considered current <br>\n- truncating text <br>\n- missing important qualifying/scoping elements</p>",
        "id": 165657672,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557864714
    },
    {
        "content": "<p>an application that doesn't manage/display status should not exist - or in this care, be certified. And there are multiple steps in the process to check this</p>",
        "id": 165657776,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557864767
    },
    {
        "content": "<p>all applications assumed that when meds were made inactive, their status would change, and so that when medications were removed from the list and were no longer returned, they were just left on the list. leading to the patients to ask why in some channel that lead to me (because there were kind of insiders anyway, which is scary)</p>",
        "id": 165657887,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557864852
    },
    {
        "content": "<blockquote>\n<p>an application that doesn't manage/display status should not exist - or in this care, be certified. And there are multiple steps in the process to check this</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191914\">@Danielle Friend</span>,  <span class=\"user-mention\" data-user-id=\"191356\">@Jenni Syed</span>, <span class=\"user-mention\" data-user-id=\"195722\">@Christopher Kundra</span> , <span class=\"user-mention\" data-user-id=\"197131\">@Danny Wise</span>  , <span class=\"user-mention\" data-user-id=\"195380\">@Kenny Blanchette</span>  - Do you review Client applications ability to manage/display statuses when approving for your app stores?</p>",
        "id": 165666751,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1557871327
    },
    {
        "content": "<blockquote>\n<p>Do you review Client applications ability to manage/display statuses when approving for your app stores?</p>\n</blockquote>\n<p>There is no (and there cannot be) approval process</p>",
        "id": 165667607,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1557872096
    },
    {
        "content": "<p>Thanks Michele -- are you aware of any client certifying body that all client apps go through? I am not...</p>",
        "id": 165667714,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1557872167
    },
    {
        "content": "<p>There is no certifying body<br>\nUS law is that patient should be able to access their data with an app of their choice - restricting access to certified apps (however the certification is done) risks to breach that</p>",
        "id": 165667934,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1557872392
    },
    {
        "content": "<p>Great, aligns with my understanding :)</p>",
        "id": 165668134,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1557872518
    },
    {
        "content": "<p>I will clarify a bit. </p>\n<p>We validate every application in our app store. Our health care systems expect that of us. Michele is right that patient facing applications cannot be forced through validation. A patient has the right to chose an application of their choosing to access the data. NPRM calls out that health systems have the final authority on connected applications, but vendors cannot force themselves in the middle of that process. Applications that aren't validated are not listed on the app store. The app store is not a requirement to obtain access to the APIs, but some health systems do prefer to know that the app has been validated.</p>\n<p>With regards to statuses and safety. There is an oversimplification of the problem, and potentially clarification on what the daily life of an EHR vendor is like. I think there is a level of ambiguity on expectations around client/server query and response behaviors. In the example listed in this thread, we returned all medications that have a statuses. We <em>DO NOT</em> under any circumstances return medications that we do not know the status for even though unknown is in the value set. It is clinically unsafe, and we would be putting patient safety at risk. As an EHR vendor, we have responsibilities and processes in place that require us to  to take all preventative measures to mitigate these risks and liability. Another example would be data that has been changed to \"entered-in-error\". We do not return any fields to mitigates concerns around unintended re-disclosure of health information. We return an ID, a status, and all other required fields return displays of \"unknown\". This is done to understand state change, but nothing else. We will never expose additional details because of concerns around comments/notes that may lead to someone learning information that they shouldn't have known in the first place.</p>\n<p>I would ask that instead of trying to \"fix\" the behaviors of the different servers, we take a moment to understand scenarios in which EHRs would \"hide\" data, and why it is done. This would then allow the collective community to propose viable options that both mitigates risks, increase patient safety, and improve the exchange of data.</p>",
        "id": 165671520,
        "sender_full_name": "Drew Torres",
        "timestamp": 1557876023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> there is no such certifying body in the US. There are examples in our validation process where we have caught developers not paging across the entire data set, not displaying statuses correctly, and not removing/updating resources that are no longer valid. I would love to be able to not let those developers connect, but that isn't possible the regulatory landscape we operate in. </p>\n<p>I think one option I have thought of in the past is actually not supporting queries without status filters. This creates a contract where the API consumer explicitly asks for the status they understand and are interested in. This mitigates concerns servers may have about the consumer not understanding statuses. Until some sort of guidance in provided like this, there will always be business rules applied to protect the implementation from undue liability.</p>",
        "id": 165671942,
        "sender_full_name": "Drew Torres",
        "timestamp": 1557876490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192087\">@Avinash Shanbhag</span> this is at least partially a regulatory problem</p>",
        "id": 165672724,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557877372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191357\">@Andrew Torres</span> </p>\n<blockquote>\n<p>We DO NOT under any circumstances return medications that we do not know the status for even though unknown is in the value set. It is clinically unsafe, and we would be putting patient safety at risk</p>\n</blockquote>\n<p>I would have thought that not returning information that could be value was also clearly a safety risk.</p>",
        "id": 165672759,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557877441
    },
    {
        "content": "<p>Most of the time I would agree. Status is the exception to that rule for us.</p>",
        "id": 165672856,
        "sender_full_name": "Drew Torres",
        "timestamp": 1557877516
    },
    {
        "content": "<p>so you have a record of a medication, but you don't know whether it's current or not, so you won't pass the information on? And then the patient dies because the clinician was not alerted to a medication that they might have been on?</p>",
        "id": 165672879,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557877552
    },
    {
        "content": "<p>note, btw: we detest status = unknown. we didn't add it because we think it's a good idea, but because there are lots of legacy records where the status is unknown, and people still need to communicate it (for reason stated just above)</p>",
        "id": 165672948,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557877612
    },
    {
        "content": "<p>Who is the logged in user accessing the APIs? If it is a licensed practitioner. We would release that information because they understand how to interrogate that information. </p>\n<p>A patient using an application that we have no visibility to? There is no perfect answer. We took the route recommended to us by physicians, and the guiding principles we have in place.</p>",
        "id": 165673037,
        "sender_full_name": "Drew Torres",
        "timestamp": 1557877724
    },
    {
        "content": "<p>hah - treating it differently? well, I can see the sense in that. And I appreciate that whatever you do has trade-offs. In fact, that's kind of my point here. But actually, I'm worried about a longer term point - the tradeoffs that have been chosen scope limit the API to a particular set of uses that will become problematic in the longer term because they assume current information only, and past information - records of past encounters, documents, and decisions made in particular - are going to be a problem given the short term decisions made</p>",
        "id": 165673275,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557877936
    },
    {
        "content": "<p>That is completely fair. In the race to expose APIs to meet regulations, things like this were left for different systems to figure out along the way. I know I have asked about \"defaulting\" behavior in the past, but competing priorities and timing are challenging to manage.</p>",
        "id": 165673538,
        "sender_full_name": "Drew Torres",
        "timestamp": 1557878163
    },
    {
        "content": "<p>One of the challenges with limiting patient access is that in some cases (e.g. an iPhone), the patient may be the conduit for information to another practitioner.</p>",
        "id": 165677225,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557882547
    },
    {
        "content": "<p>I'm also a little confused about the intersection of the patient's right to access their data with an app of their choosing and then the provider deciding that only some of that data will be made available.</p>",
        "id": 165705212,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1557919051
    },
    {
        "content": "<p>Hi, thanks for tagging me on this thread.  If you think this merits any regulatory guidance, then would suggest submitting feedback to the NPRM ( due date is June 3rd).  Additionally, just out of curiosity,  would like to hear additional insights from App developers,  in their expectations of the API response.</p>",
        "id": 165713509,
        "sender_full_name": "Avinash Shanbhag",
        "timestamp": 1557926360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  one clarification on the unknown status: in our underlying system, we should <em>always</em> know the status. When Drew said \"unknown\" that is more of a mapping issue in our system (something unexpected happened and for some reason we couldn't get to a FHIR status). We don't have any state in the underlying system that supports the concept of an unknown. If we hit this unexpected scenario in FHIR, we actually error the whole request - the server has been misconfigured</p>",
        "id": 165716900,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557928935
    },
    {
        "content": "<p>And it throws an alert to us to tell us something isn't configured correctly - so we know to go fix it. This is most common when we initially are building out mappings</p>",
        "id": 165716968,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557928987
    },
    {
        "content": "<p>As Drew mentioned, we have caught (many times) apps that don't pay attention to any of the statuses on resources. Even though it's part of the safety checklist (most of them have never heard of that). The errors those cause vary and go all the way to extremely scary (showing in error data as if it's accurate), or just slightly less so of showing inactive meds as if they're active.</p>",
        "id": 165717250,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557929212
    },
    {
        "content": "<p>But we are not allowed to do similar checks for patient access apps. The reason this is especially worrisome: we catch these with app vendors that have been in the healthcare field as their primary business for a while</p>",
        "id": 165717311,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557929266
    },
    {
        "content": "<p>and have all the best intentions</p>",
        "id": 165717322,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557929274
    },
    {
        "content": "<p>I think assuming that patient access apps are going to be built by only those with good intentions, or that have been in the healthcare field for a long time is a bad assumption (and putting the burden on patients to determine safety and privacy risks of an app they download is expecting a lot)</p>",
        "id": 165717507,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557929393
    },
    {
        "content": "<p>Even expecting providers to be able to do this in depth analysis of a practitioner-facing app means you expect a lot of FHIR-specific knowledge to be built, as well as web security knowledge</p>",
        "id": 165717658,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557929464
    },
    {
        "content": "<p>From my view, everything in this chain keeps pointing to explicitly including status in the query.</p>",
        "id": 165719782,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1557931051
    },
    {
        "content": "<p>You mean making it mandatory to specify the desired statuses?</p>",
        "id": 165719890,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557931126
    },
    {
        "content": "<p>Putting rules around what data is returned puts us in a \"well it depends\" scenario that defeats what we're trying to accomplish. The response should be an accurate representation of the data based on what's being asked for in the query.  Doing otherwise results in what <span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span>  has done - include vendor-specific rules to interpret the results. Conceivably we could end up with a situation where every app developer must code specifically for each service (to account for it's rules) and each server must code specifically for each application (what's \"safe\" to send to them).</p>",
        "id": 165719911,
        "sender_full_name": "Jeffrey Danford",
        "timestamp": 1557931145
    },
    {
        "content": "<p>Having said that, Allscripts also incorporates business rules into our results, including filtering by status (e.g. only sending lab Observations whose status is final). We have the same concern that not everything we send out will be properly handled by the receiving app. Which gets back to implementing an app certification process - we'd feel a lot better sending out data if we knew the app would be handling it appropriately.</p>",
        "id": 165720172,
        "sender_full_name": "Jeffrey Danford",
        "timestamp": 1557931340
    },
    {
        "content": "<p>I'm not actually sure that requiring the statuses in the request help this. Grahame's example is a common miss: You may not want to show inactive or in error meds, but you sure are going to need to query for them if you're storing or caching data from previous calls. Otherwise, you won't know to <em>remove</em> something from the list.</p>",
        "id": 165721807,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557932530
    },
    {
        "content": "<p>S4S and Apple Health are examples of that use case in the wild.</p>",
        "id": 165722009,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557932666
    },
    {
        "content": "<p>Just seeing this thread now, but completely agree with <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> and will add my name to the list of people who have been bitten by vendors adding their own special rules regarding default queries.  More specifically, I had an app for which historical med data was important -- so one vendor's choice to return only active medications caused some confusion in testing.  Developers of interoperable applications (like SMART Apps) cannot read the documentation of <em>every</em> Health IT product w/ a FHIR interface.  The point of standards is to allow some basic assumptions to be made -- and this specific topic (behavior of search queries) falls into that category for me.</p>\n<p>IMO, If we want to allow vendor variance in areas like this, then the FHIR spec should explicitly call out these areas where vendors are allowed to add their own rules.  That way responsible app developers who <em>do</em> know and understand the FHIR specification aren't burned and know to program more defensively in those spots.  And if this is allowed, then I think there needs to be a mechanism for the client to know that additional non-standard rules have been applied.  But my personal preference is that a \"standard\" should be implemented in a \"standard\" way across all vendors as much as is possible.</p>",
        "id": 165722383,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1557932938
    },
    {
        "content": "<p>Note: I'm not against requiring a specific parameter to be set in an implementation (and erring if it's not there) if a server doesn't support the \"default get everything\" query.</p>",
        "id": 165722743,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557933172
    },
    {
        "content": "<p>This is pretty common for the patient or subject parameter, for example. If it's not set, the server will error vs. defaulting</p>",
        "id": 165722801,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1557933242
    },
    {
        "content": "<blockquote>\n<p>developers of interoperable applications (like SMART Apps) cannot read the documentation of every Health IT product w/ a FHIR interface. </p>\n</blockquote>\n<p>I don't agree. developer shall read the documentation of every Health IT that he want to connect to.<br>\nMy app targets three EHR vendors. I did read all of them. I would be surprised if there's any SMART developer who do NOT read server documents.<br>\nMy concern is that server may change the \"default\" behavior in the future release and mess up client implementation logic.</p>",
        "id": 165726349,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1557935532
    },
    {
        "content": "<p>I don't think that reading documentation of every health IT product scales.  Yes, if you're targeting three vendors, sure.  But there are <em>way</em> more than three vendors out there that support FHIR -- and part of the point of SMART (I <em>think</em>) is to one day support an App Store paradigm that is at least partially vendor-agnostic.  Things are a whole lot easier if we can set some ground rules that allow vanilla apps to work across the widest variety of vendors' products.  If vendors have to rely on app-developers specifically targeting their system, I worry that the smaller vendors will have a real hard time surviving in the future marketplace.</p>",
        "id": 165742328,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1557946136
    },
    {
        "content": "<p>It just reminds me a little of all those websites and web libraries that targeted (and grew to depend on) non-standard quirks in early web browsers.  The beauty of the modern web standards is that as a web developer, I can worry a lot less about what browser someone is using (although we're not 100% there yet).</p>",
        "id": 165742493,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1557946213
    },
    {
        "content": "<p>In reality, each server has its own capability. You cannot expect all servers support the same set of resources and same set of search parameter. I cannot image how a client developer can get that information w/o reading vendor documents no matter how many system he want to connect. IMHO, the beauty of FHIR is that it sets the framework and certain flexibility at the same time. If we want to  one modal for all, why don't we just use CDA?</p>",
        "id": 165755048,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1557954505
    },
    {
        "content": "<p>Adapting to some servers supporting different bits is something you can do at run-time by hitting the CapabilityStatement.  You don't necessarily need to write server-specific code to deal with that.  But if servers require that queries be constructed on a custom basis, that's something different.</p>",
        "id": 165755236,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557954720
    },
    {
        "content": "<p>Right.  Any variation that can be described in the CapabilityStatement is totally fair game.</p>",
        "id": 165758809,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1557957615
    },
    {
        "content": "<p>That's what it's for.</p>",
        "id": 165758818,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1557957628
    },
    {
        "content": "<p>We are already off topic. Again, what I don't agree is that \"developer cannot read document of all servers he want connect to\". I don't mind to continue our discussion in separate thread</p>",
        "id": 165763258,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1557961790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192087\">@Avinash Shanbhag</span> I think that one part of this is tricky - the question of the safety of apps for the patient. If the US Govt requires patients to be able to choose their apps - for very good reasons - where can a patient turn for a good app that's reliable? if supposedly experienced healthcare developers can't get the basics like checking status correct, what does the govt expect to happen for patients?</p>",
        "id": 165763264,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557961801
    },
    {
        "content": "<p>I know that no one pays attention to the safety checklist. I wonder whether we can extend the application registration process to include some basic declarations that an application must make. <span class=\"user-mention\" data-user-id=\"194368\">@Julie Maas</span> - what if we extended it so that a server could require some specific values somewhere, and document those as linked to the safety checklist?</p>",
        "id": 165763381,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557961907
    },
    {
        "content": "<blockquote>\n<p>we can extend the application registration process </p>\n</blockquote>\n<p>Which registration process?</p>",
        "id": 165763455,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1557961970
    },
    {
        "content": "<p>Julie and Luis Maas run a track at the last connectation looking at dynamic application registration. It's applicable for patient apps, and also enterprise/x-enterprise apps</p>",
        "id": 165763572,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557962088
    },
    {
        "content": "<p>Thanks - did not know that</p>",
        "id": 165763615,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1557962126
    },
    {
        "content": "<p>I'd like to see that approach become much more ubiquitious, and it's basically required for the NPRM but it isn't called out</p>",
        "id": 165763620,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557962132
    },
    {
        "content": "<p>That makes a lot of sense--this is exactly the type of information that the certifications extension is intended for (<a href=\"http://www.udap.org/udap-dynamic-client-registration.html\" target=\"_blank\" title=\"http://www.udap.org/udap-dynamic-client-registration.html\">http://www.udap.org/udap-dynamic-client-registration.html</a>). An app can already self certify to conforming to a linked privacy policy, redirect URI etc. and server can make policy decisions using that info. Additional self assertions about safety checklist items could easily be added: <a href=\"https://www.hl7.org/fhir/safety.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/safety.html\">https://www.hl7.org/fhir/safety.html</a>. Third party validation could be added on with the same mechanism plus a step to validate the endorser when needed.</p>",
        "id": 165765765,
        "sender_full_name": "Julie Maas",
        "timestamp": 1557964473
    },
    {
        "content": "<p>So I should enhance that page to give each of those entries in the list a formal uri then</p>",
        "id": 165768370,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557967264
    },
    {
        "content": "<p>Maybe yes--if a summary declaration of conformance with the entire checklist is not sufficient/more useful (or applicable subset of list related to clients). Question for the community: Does it always need to be item-by-item? Would relying parties realistically want to parse through 42 of these elements (plus the others already mentioned) or would there be a natural minimum bar that would make sense as a threshold for \"safety checklist\" compliance for a given checklist version #?</p>",
        "id": 165770263,
        "sender_full_name": "Julie Maas",
        "timestamp": 1557969565
    },
    {
        "content": "<p>I think different kinds of systems would have different concerns, and would want to be specific about the concerns they have. Based on the discussion weâve had here.</p>",
        "id": 165770587,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557969924
    },
    {
        "content": "<p>It wouldnât be all of them, I think</p>",
        "id": 165770598,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557969943
    },
    {
        "content": "<p>E.g. for an Argonaut server, Iâd be interested in rules 1, 2, 4, 5, 8 and 11 (though we could come up with a more appropriate wording of those for the specific EHR access problem in the US-Core guide)</p>",
        "id": 165770763,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557970129
    },
    {
        "content": "<p>At the least, I propose that we add a safety page with a check list to US-Core R4 before we publish it (though that may be challenging timing wise)</p>",
        "id": 165770785,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557970172
    },
    {
        "content": "<p>I think part of the challenge is that servers should not make assumptions about the use-case of their clients.  The EHRs created their interface with a presumption that it was going to be used by patient-centric apps and focused on meeting meaningful-use criteria - specifically the ability to share a list of a patient's active medicaitons.  But the MedicationRequest query endpoint isn't intrinsicly use-case specific and there are lots of valid use-cases for retrieving things other than the active med list (and for performing queries that aren't patient-centric).  It is certainly ok to have limintations in query parameters that focus on the initial use-cases for a first release, but default filtering for a presumed use-case is more problematic.  Lack of search parameters doesn't prevent a use-case from being satisfied, it just makes it inefficient.  But automatic filters can prevent a use-case from being predictably satisfied at all.  Eventually, the EHR MedicaionRequest endpoints will likely need to expose draft ordrs, recommendations that came in as part of a referral response from 5 years ago and all sorts of other MedicationRequest instances that have no relationship to the \"active medication list\" at all - but for which there's absolutely a valid use-case for exchange.  (And as that evolution happens, we'll start to see some of the pain of not having List to filter the sets of records that are truly part of the active med list as opposed to being resources that are part of the record for other reasons.)</p>",
        "id": 165775020,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557976039
    },
    {
        "content": "<p>Chiming in a bit late, but I think we need to recognize the split between FHIR \"insiders\" vs. \"outsiders\" as client developers.  I'd estimate that ~95%+ of the app vendors we deal with don't know or care about the FHIR spec.  They just want data, an if we gave that to them in a CSV, custom JSON/XML, HL7v2, or valid FHIR response, they wouldn't care either way.  They will never be parsing CapabilityStatement in a meaningful way.  The other ~5% are the insiders like <span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span>  and <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> who understand both the FHIR spec and the complexities of healthcare data.  EHR vendors are in the position where we need to support both sets of users.  My experience is overwhelmingly that we cannot expect the majority of clients to handle the complexity of healthcare data on their own.</p>",
        "id": 165805213,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1558010148
    },
    {
        "content": "<p>Speaking from the server/EHR vendor perspective, the basic issue is a lack of comfort about how the data will be used once it leaves our curatorship. Some sort of app certification process or a registration process (dynamic or otherwise) based on an agreed-upon set of rules (no idea how that would work) would go a long way towards increasing that comfort level.</p>",
        "id": 165806472,
        "sender_full_name": "Jeffrey Danford",
        "timestamp": 1558011091
    },
    {
        "content": "<p>the counter point is : it's left your curatorship. So you don't need to be concerned about it</p>",
        "id": 165806560,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558011128
    },
    {
        "content": "<p>it's an interesting problem, since we are taught to worry about this</p>",
        "id": 165806603,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558011177
    },
    {
        "content": "<p>In many ways this is a no-win scenario for the EHR vendors.  If we develop our API to support the 5% insiders, then the 95% will end up misusing or misrepresenting the data.  If we target the 95% outsiders, then the 5% insiders will be unhappy.</p>",
        "id": 165806703,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1558011244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I don't understand your comment about curatorship.  Don't the (older) MU3 and current ONC NPRM explicitly remove the ability of EHR vendors to act as curators?  At least in the US.</p>",
        "id": 165806779,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1558011333
    },
    {
        "content": "<p>I think that the split is not so simple as that. Anyway, where we've ended up is... the 5% who know what they're doing end up displaying non-current information as current, while those who don't know any better... will eventually discover they are missing data and they'll ask for it and (probably) still display it wrong</p>",
        "id": 165806852,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558011371
    },
    {
        "content": "<p>that's what i meant: once the patient gets it, what follows is not the EHR vendors responsibiblity</p>",
        "id": 165806894,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558011423
    },
    {
        "content": "<p>At least for the Epic implementation, I don't see the split as current vs. non-current data.  It is more about relevant vs. non-relevant.  The data we return in our API is the same data we have determined is appropriate to show the user when they are operating within the EHR UI.</p>",
        "id": 165807037,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1558011568
    },
    {
        "content": "<p>I'll push back really hard on the \"insider/outsider\" concept <span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span>. I mean, I agree that most developers on any platform just want to get the data, and they'll jump through whatever hoops necessary. But we're here talking about predictable behavior -- standards for interoperability.</p>",
        "id": 165807145,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1558011641
    },
    {
        "content": "<p>If a platform is going to offer an interoperable API, I can't see the rationale to tweak it with defaults that will be inconsistent with other implementations.</p>",
        "id": 165807252,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1558011722
    },
    {
        "content": "<p>I'm not sure what that has to do with the concept of \"insiders and outsiders\".</p>",
        "id": 165807300,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1558011746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>  My insider/outsider comments are driven by my real-world experiences to date. I've been on design or troubleshooting calls or e-mail chains with vendors probably ~5-10 times per week for the past several years.  I'm just trying to represent the reality of FHIR use today.  I'm open to practical and implementable solutions that move the needle, but, for example, the calls with S4S and MyFHR developers go <em>very</em> differently than the calls with most other app developers...</p>",
        "id": 165807450,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1558011857
    },
    {
        "content": "<p>And can you say something about how your 1000+ email threads relate to the question about default search parameters?</p>",
        "id": 165807657,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1558012009
    },
    {
        "content": "<p>I'm all and pretty much only about \"real world experience\". So if there are pervasive developer usability  issues, we want to treat those as bugs in the spec.</p>",
        "id": 165807799,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1558012109
    },
    {
        "content": "<p>Typically the \"default search parameters\" are just a way to allow the EHR to make sure the data that is returned in the API matches what is shown to clinical users inside the EHR.  Within the EHR, we often have some sort of \"more info\" or \"show all\" button that clinicians can use to get the full picture, but a lot of time and effort has gone into determining what data is relevant to show in the primary lists.  E.g. if a resident ordered a bunch of labs the the supervisor determined those labs were unnecessary and canceled them (prior to specimen draw), then it normally isn't useful to show those canceled labs to users 6 months later.    The way I understand this thread is that we want to replicate the \"more info\" option that we have in the EHR (which today we support by the documented additional (vendor specific, but spec compliant) search parameters that can be provided).</p>",
        "id": 165808195,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1558012428
    },
    {
        "content": "<p>One solution is to return everything by default with some sort of flag to indicate if it should be in the \"default\" view.  However this means we have to just \"hope\" that clients will understand that flag.  And I'm very much pessimistic about that.</p>",
        "id": 165808287,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1558012503
    },
    {
        "content": "<p>What about instead of filtering by default make the corresponding search parameter required? So the client has to specify what it wants (and for the 95% just tell them 'do the search like this')</p>",
        "id": 165808479,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1558012658
    },
    {
        "content": "<p>I follow the logic for matching the system standard view. I feel that matching a no parameters query to the limited system view is where we get into trouble. Given your concerns, I would:<br>\n- refuse to answer any query that doesn't explicitly say which status codes to return <br>\n- explain in the return error that you either specify the status codes, or use something like argonaut-view=default to request what would be the default view in the system<br>\n- support the default-view parameter<br>\n- publish a safety check list - preferably through Argonaut<br>\n- ask applications to confirm that they've done the checklist on registration</p>",
        "id": 165808777,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558012897
    },
    {
        "content": "<p>I kinda like the idea of pre-defined\"views\".  Let me chew on that.</p>",
        "id": 165808938,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1558013019
    },
    {
        "content": "<p>On the interaction between \"default views\" and the meaningful use requirements in, USCDI it's just <a href=\"https://www.healthit.gov/isa/us-core-data-interoperability-uscdi\" target=\"_blank\" title=\"https://www.healthit.gov/isa/us-core-data-interoperability-uscdi\">\"medications\"</a> as far as I'm aware. Does someone have a reference to a requirement like \"active medication list\"?</p>",
        "id": 165809090,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1558013122
    },
    {
        "content": "<p>You're seeing years of institutional memory, guidance from clinical SME's and HIPAA-ingrained reflexes in that curatorial(?) instinct that's going to take a lot to overcome. And FWIW I do agree that we shouldn't be applying our own business rules and the query response should be faithful to what was requested. There's just a lot of uneasiness that isn't mollified by being told not to be concerned.</p>",
        "id": 165809194,
        "sender_full_name": "Jeffrey Danford",
        "timestamp": 1558013189
    },
    {
        "content": "<p>I think I might blog about this. There's basically a tension here between safety and access. as a long term HIT person who's seen people die due to bad interop implementations, I understand how absolute the culture is around this and that's <em>completely appropriate</em>.</p>",
        "id": 165809440,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558013386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197491\">@Dave deBronkart</span> subscribing you to this stream- you should read this thread from start; I'm interested in your perspective on it - the problem is real</p>",
        "id": 165809569,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558013455
    },
    {
        "content": "<p>Do we want to include security filtering in this discussion as well?  Or keep that out of scope?  E.g. if the requesting user doesn't  have authorization to see data in the behavioral health department, so that data is also not returned in the open-ended default query.</p>",
        "id": 165809601,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1558013477
    },
    {
        "content": "<p>that data is never returned whatever. even if you ask for it, and you can not find out</p>",
        "id": 165809616,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558013509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> and <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>  Even though our server defaults to \"all statuses\" if you don't pass in any status filter (in error etc), I can provide the stat that 0 times has any app made it through our validation without an issue found</p>",
        "id": 165813461,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1558015974
    },
    {
        "content": "<p>and that crosses both people with experience in the spec and people new, people with experience in healthcare and people new to it</p>",
        "id": 165813514,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1558016013
    },
    {
        "content": "<p>*without a safety issue found</p>",
        "id": 165813533,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1558016025
    },
    {
        "content": "<p>That makes sense <span class=\"user-mention\" data-user-id=\"191356\">@Jenni Syed</span>; but how many of these problems do you think are directly attributable to issues with default status parameters?</p>",
        "id": 165818482,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1558019057
    },
    {
        "content": "<p>(I'm not disputing that developing health apps correctly is hard and important and requires feedback/experience/iteration)</p>",
        "id": 165818520,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1558019082
    },
    {
        "content": "<p>We have no default status parameter</p>",
        "id": 165819185,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1558019511
    },
    {
        "content": "<p>if you pass no status, you get everything</p>",
        "id": 165819247,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1558019527
    },
    {
        "content": "<p>which is what the spec describes</p>",
        "id": 165819257,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1558019535
    },
    {
        "content": "<p>We have had issues in apps that both define their status list and leave it as the \"everything\" (in error etc)</p>",
        "id": 165819923,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1558020007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span> \"Relevant\" presupposes a known use-case.  The API should not do that.  The whole point of REST is that the API is use-case independent.  It's not supposed to reflect what's on a particular screen or view.  It's supposed to reflect all data that fits that resource category that's available from the persistence layer of the system.  Consumers of the API then filter to reflect whatever their use-case happens to be.  The key is to make sure that app implementers <em>expect</em> the feed to contain non-relevant data - and know that it's their responsibility to filter accordingly.</p>",
        "id": 165827296,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1558025705
    },
    {
        "content": "<p>(And test sites should ideally include liberal amounts of non-typically-relevant data so they learn early :&gt;)</p>",
        "id": 165827348,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1558025755
    },
    {
        "content": "<blockquote>\n<p>We have had issues in apps that both define their status list and leave it as the \"everything\" (in error etc)</p>\n</blockquote>\n<p>Right, and I think highlights my point: you can't solve deep issues with developer knowledge/attention by tweaking defaults. You'll have issues ether way, so you might as well make defaults that are consistent with the standard.</p>",
        "id": 165832494,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1558029231
    },
    {
        "content": "<blockquote>\n<p>At the least, I propose that we add a safety page with a check list to US-Core R4 before we publish it (though that may be challenging timing wise)</p>\n</blockquote>\n<p>Is there something I can help with here, or a starting point someone can point to? Thx in advance!</p>",
        "id": 165838738,
        "sender_full_name": "Julie Maas",
        "timestamp": 1558033172
    },
    {
        "content": "<p>All the trackers from the US Core R4 from the ballot have been applied and it is undergoing QA and just about ready to be published.   There is a planned \"STU Update\" for the Fall closer to the ONC Rulemaking deadline.  We will be take up this issue on the Argonaut R4 call.</p>",
        "id": 165839704,
        "sender_full_name": "Eric Haas",
        "timestamp": 1558033759
    },
    {
        "content": "<p>yes please take it up.</p>",
        "id": 165855271,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558046233
    },
    {
        "content": "<p>Can you let me know when this will be? I don't generally have the time free but I will try to make it available.</p>",
        "id": 165860510,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1558051658
    },
    {
        "content": "<p>not next week</p>",
        "id": 165862883,
        "sender_full_name": "Eric Haas",
        "timestamp": 1558054562
    },
    {
        "content": "<blockquote>\n<p>I agree with Lloyd on this point-- if an app developer doesn't understand the basic essential properties of a medication resource or a condition resource, there is zero chance that developer is going to build a safe app. Trying to fix this through clever defaults won't really put a dent in this.</p>\n</blockquote>\n<p>Well observed and well articulated.</p>",
        "id": 165989285,
        "sender_full_name": "Dave deBronkart",
        "timestamp": 1558210162
    },
    {
        "content": "<p>[Does this branch need to get renamed?]</p>\n<p>The following must be read with awareness that I haven't read (and am unlikely to competently absorb) FHIR safety rules or anything else.  I don't have the background or bandwidth to claim competence on it.  Having said that, I think I understand the issue; I can loosely understand the issue, what's going on in the sample URLs, etc.</p>\n<blockquote>\n<p>[From Grahame]<br>\n<span class=\"user-mention silent\" data-user-id=\"197491\">Dave deBronkart</span> subscribing you to this stream- you should read this thread from start; I'm interested in your perspective on it - the problem is real</p>\n</blockquote>\n<p>Dude, no wonder I had trouble finding this thread from your email - your email cited \"patient safety\" which is absolutely true but not mentioned verbatim. Hey,  this is almost meta: How would I inform you algorithmically that what I queried in your data store (the thread) was not found, even though it's there? (I know that's not the same as inactive rx; work with me here...)</p>\n<p>I have a feeling that some queriers basically want to say \"Hey system, tell me everything I need to know, and don't screw up.\"  And some servers prefer to be passive-aggressive, saying \"If you want a useful response, you can bloody well be explicit about it, or don't blame me.\" Who's responsible, and what can be done about the dysfunction / lack of accepting responsibility?</p>\n<p>Yes, this is real, and it's really really hard for either party to know what datum might blow up in one's face - especially since the answer to that may change as the patient history gets older and as patient circumstances get added.  Right??  Is this solvable?  So how can one judge who should bear responsibility?  Responsibility connotes having the wisdom and facts to avoid danger and to warn at appropriate times.</p>\n<p>In clinical reality does the issue get more predictable after N days of a patient encounter?  Perhaps not reliably so. </p>\n<p>To really handle issues like this well, we should recruit <em>seriously experienced</em> care coordinators (e.g. years-long care managers for elder family members) who have the scars and savvy to help us consider real-world hazards. Names that come to mind are Janice McCallum and Maryanne Sterling. And I bet they'll say they want at LEAST a read-only \"view window\" to check on the daily chatter ... people like those two could absolutely qualify as competent for that.</p>\n<p>In fact, what a hot idea - enrolling \"atrics\" caregivers (pediatrics and geriatrics).  At the other end of the lifespan there are numerous parents of seriously sick kids who have all too much experience with the need for bedside vigilance, having repeatedly rescued their sick kids from accidental harm.  Tyson Ortiz is one of these.  </p>\n<p>All three of them are members of SPM, not surprisingly.</p>",
        "id": 165989765,
        "sender_full_name": "Dave deBronkart",
        "timestamp": 1558210941
    },
    {
        "content": "<p><strong>Hey, folks! Sorry for the late reply here, I'm just catching up. Here are my observations:</strong></p>\n<ul>\n<li>One of the <em>most important principles</em> in safety is consistency. This is the entire point of Atul Gawande's book, The Checklist Manifesto. No matter the intention, we are actively creating and perpetuating a patent safety issue if the standard is inconsistently applied.<ul>\n<li>The example given by <span class=\"user-mention\" data-user-id=\"191356\">@Jenni Syed</span> is perfect: \"I can provide the stat that 0 times has any app made it through our validation without an issue found\" - this is exactly the outcome I would expect with inconsistent implementations across vendors.</li>\n</ul>\n</li>\n<li>On the issue of the implementation itself, I don't have a super strong opinion. The current convention of passing along all data if no status is specified seems to be the most logical and future-proof (i.e., if a new status is ever added in the future, it would still work as expected), but explicitly requiring statuses would also be acceptable assuming it was implemented by everyone consistently.</li>\n<li>EHR vendors can't make assumptions about how data will be used by apps that consume the API. We ran into this early because some EHR vendors assumed data would be queried each time and never persisted. As has been mentioned, this is why returning entered-in-error and inactive status is critical vs simply not sending anything anymore.<ul>\n<li>As an example, <span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span> pointed out that one of their goals is to ensure that the data \"returned in the API matches what is shown to clinical users inside the EHR.\" This is reasonable on its face, but makes the assumption that all apps will behave like their EHR, or has the same access to historical data as their EHR.</li>\n</ul>\n</li>\n<li>Agree with comments above by <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> that reading the documentation of all vendors doesn't scale. Does anyone believe that OAuth 2.0 implementors read the documentation of every site where it has been implemented, or do they refer to the IETF specs? Same should be true here - the US Core or Argonaut IGs should be the source(s) of truth for documentation.</li>\n<li>Data is not the responsibility of health systems or EHR vendors once it leaves the system, assuming the app developer is not a business associate of the covered entity. This question has been laid to rest ages ago and is described in more detail on <a href=\"https://www.hhs.gov/hipaa/for-professionals/faq/3009/does-a-hipaa-covered-entity-bear-liability.html\" target=\"_blank\" title=\"https://www.hhs.gov/hipaa/for-professionals/faq/3009/does-a-hipaa-covered-entity-bear-liability.html\">the OCR FAQ page here</a>.</li>\n</ul>\n<p><strong>Where do we go from here? Some thoughts:</strong></p>\n<ul>\n<li>We should align on one approach. I agree with <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> that it makes the most sense to do this as part of the base spec, although having the conversation as part of the Argonaut R4 discussions would also be fine, assuming the outcome was applied to the base spec.</li>\n<li>It would be more valuable to provide a comprehensive safety overview/how-to for inexperienced developers along with a consistent API than it would be to attempt to protect developers from themselves in inconsistent and dangerous ways (which is current state). Agree with <span class=\"user-mention\" data-user-id=\"194368\">@Julie Maas</span> that we should try something like this.</li>\n</ul>\n<p>Tagging <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> and <span class=\"user-mention\" data-user-id=\"197491\">@Dave deBronkart</span> as well.</p>",
        "id": 166041801,
        "sender_full_name": "Ricky Bloomfield",
        "timestamp": 1558302352
    },
    {
        "content": "<p>This is such an important topic! I fully agree that apps should understand and properly handle the full resource life cycle, especially the entered-in-error status. With regard to apps that locally persist resources, I think we also need to look carefully at other ways resources may become \"invalid\" with respect to an app's use case where resource status might not communicate this. A few observations:<br>\n1. It seems to me that any time a resource element that is a Reference is updated, this could cause resources to no longer be valid for the app's use case, and could also prevent the app from receiving any future updates about status changes. In the simplest example, if an Observation resource is updated to change the subject reference, it will no longer be a valid Observation for the original patient and will simply disappear for an app that only has access to the original subject's Observations (i.e. the app will not receive a status change).<br>\n2. I expect some will argue that a server should never allow the subject of an Observation to be updated, and should instead mark the original resource as entered-in-error and create a second resource with the correct subject reference, but I don't think that this part of the formal FHIR spec (? <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ). It gets more difficult to manage when apps rely on chaining in their searches, so if such a rule were imposed in the interest of safety, it should probably be extended to prohibit changing any element of an existing resource that is a reference. I don't think such a rule would be very popular.<br>\n3. It gets even worse if an app is \"deauthorized\" from a particular resource after it has retrieved it, because if that resource's status is later changed to entered-in-error or the resource is otherwise changed in a clinically relevant way, the app will not receive the update.<br>\n4. Patient unmerge/unlink: similar to #1.<br>\n5. Given the above, it seems that there is no easy way for an app to be certain it is synchronized with a server's database using only RESTful calls; to be fully protected from the above, it may need to repeat queries for all data it wishes to persist every time and remove or otherwise invalidate any locally persisted resources that had \"disappeared\" from the search results. It seems like this might be a best practice from a safety perspective. Grahame touched on this earlier in the thread in the context of medication lists.<br>\n6. It follows from 5 that apps that use a _lastUpdated parameter in their searches set relative to their last search would have no way to determine that a previously retrieved resource had disappeared, and are vulnerable to persisting data that becomes clinically invalid for one of the above reasons.</p>",
        "id": 166112224,
        "sender_full_name": "Luis Maas",
        "timestamp": 1558380288
    },
    {
        "content": "<blockquote>\n<p>* As an example, <span class=\"user-mention silent\" data-user-id=\"191764\">Cooper Thompson</span> pointed out that one of their goals is to ensure that the data \"returned in the API matches what is shown to clinical users inside the EHR.\" This is reasonable on its face, but makes the assumption that all apps will behave like their EHR, or has the same access to historical data as their EHR.</p>\n</blockquote>\n<p>I'd think the word \"matches\" is a recipe for mischief, true?  Both the encoding and the display of data, <em>as perceived and interpreted by the reader</em>, can be substantially affected by context and by user experience, both within that EHR (e.g. Cerner) and within that institution, yes?</p>",
        "id": 166113538,
        "sender_full_name": "Dave deBronkart",
        "timestamp": 1558381220
    },
    {
        "content": "<p>EHR screens are use-case-specific.  FHIR APIs <em>should</em> be use-case agnostic.  Expecting them to expose exactly the same data isn't appropriate/reasonable.</p>",
        "id": 166114554,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1558381954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"195299\">@Luis Maas</span> that's a good list. There's some really tricky stuff there - the app might decide how to proceed differently between the entered-in-error case and the security withdrawn case, but I don't think it can separate them. </p>\n<p>I strongly believe that subject should never be changed - if you created something with the wrong subject, you should not just 'fix' it. But in practice, lots of systems do just that</p>",
        "id": 166122469,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558388785
    },
    {
        "content": "<p>Adding to Luis' list, data may also become unavailable because of storage policies on the server, e.g. a server only making data available for the past 5 years. So an app is not seeing a resource again doesn't mean that a resource has been deleted or entered-in-error. And who knows what HTTP status such a server can return for data that's no longer available.</p>",
        "id": 166124603,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1558390856
    },
    {
        "content": "<p><a href=\"http://www.healthintersections.com.au/?p=2950\" target=\"_blank\" title=\"http://www.healthintersections.com.au/?p=2950\">http://www.healthintersections.com.au/?p=2950</a></p>",
        "id": 166136221,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558404706
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=22500\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=22500\">GF#22500</a></p>",
        "id": 166419801,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558668250
    },
    {
        "content": "<p>OK...but do we agree that system should _not_ silently add default filters? Like automatically returning only the active medications when the client requested all of the?<br>\nAnd if system are concerned about that they should rather made search parameters mandatory - like you have to always specify the status when searching medication?</p>",
        "id": 166448700,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1558702160
    },
    {
        "content": "<p>yes there seems to be general in principle agreement about that in principle, but it's not clear how to transition to an actuaal agreement about that</p>",
        "id": 166449302,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558702631
    },
    {
        "content": "<p>Follow up on this - I added <a href=\"http://build.fhir.org/codesystem-safety-entries.html\" target=\"_blank\" title=\"http://build.fhir.org/codesystem-safety-entries.html\">http://build.fhir.org/codesystem-safety-entries.html</a> to support formal computability around the safety checklist. I expect that this list will grow as argonaut etc add their own check list variants. Thereâs a task for FHIR-I to approve this change. (Use as a URI is explained here: <a href=\"http://build.fhir.org/safety.html\" target=\"_blank\" title=\"http://build.fhir.org/safety.html\">http://build.fhir.org/safety.html</a>)</p>",
        "id": 166593500,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558906930
    }
]