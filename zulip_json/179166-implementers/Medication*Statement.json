[
    {
        "content": "<p>Hi all,</p>\n<p>a Newbie question: For the statement \"Aspirin 500mg Tbl. 1-0-0\", do I need a Medication and a MedicationStatement? Everything seems to be in the MedicationStatement except for the form ('tablet') which is an attribute of Medication.</p>\n<p>Thanks for your help<br>\nPhilipp</p>",
        "id": 154018697,
        "sender_full_name": "Philipp Daumke",
        "timestamp": 1542266593
    },
    {
        "content": "<p>it depends on your code - most codes for medications are specific about the form</p>",
        "id": 154018698,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1542266757
    },
    {
        "content": "<p>if the code system is not... then you'll need a medication</p>",
        "id": 154018699,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1542266771
    },
    {
        "content": "<p>but RxNorm, etc, usually are</p>",
        "id": 154018700,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1542266776
    },
    {
        "content": "<p>OK, thanks a lot.</p>",
        "id": 154018701,
        "sender_full_name": "Philipp Daumke",
        "timestamp": 1542267162
    },
    {
        "content": "<p>Although I would argue that the implementation shouldn't be dependent from the terminology binding. Otherwie, there's another interoperability problem.</p>",
        "id": 154018706,
        "sender_full_name": "Philipp Daumke",
        "timestamp": 1542268497
    },
    {
        "content": "<p>That's pretty much impossible.  Form code, strength, ingredients, etc. are all impacted by choice of terminology.  If you're sending something where those characteristics are implicit in the code, it's almost impossible to get implementers to want to send them redundantly elsewhere - first because it's more work and second because it provides opportunity for inconsistency/error.  And standardization of terminologies on an international basis is not in the cards because the terminologies are so tightly tied to regulation and regulation is tightly tied to jurisdiction.</p>",
        "id": 154018709,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542268832
    },
    {
        "content": "<p>In the absense of shared codes, interoperability will happen through CodeableConcept.text and narrative.  Both of those are relatively accomodating of differences in which elements are populated.</p>",
        "id": 154018710,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542268892
    },
    {
        "content": "<blockquote>\n<p>the implementation shouldn't be dependent from the terminology binding.</p>\n</blockquote>\n<p>I absolutely agree, but that's not the world we live in</p>",
        "id": 154018725,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1542272221
    },
    {
        "content": "<p>I think it's a localization issue. It depends on the CodeSystem used in a specific realm. Any implementation that supports different jurisdictions may have to adapt to the local situation.</p>\n<p>On a side note: I believe the version where you <em>always</em> reference a Medication resource should work in any situation...<br>\nYour catalogue of Medication resources could be loaded into your server at configuration time and you could then at runtime search for  them by code to get the references.<br>\n....or even do it in one step by bundeling MedicationStatement ans Medication into a transaction and use a conditional create by code on the Medication entry... The server would then update the temporary uuid of the entry reference with the actual reference that matches the Medication resource...</p>",
        "id": 154018833,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1542288342
    }
]