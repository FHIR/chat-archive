[
    {
        "content": "<p>Hello, In all official profile StructureDefinitions the root elements have a min-max-cardinality of 0-*. What is meant with this information ? What would happen if I had a custom profile with a different min-max-cardinality ? As the cardinality of all elements is always given when they are used, the information in the root elements seems redundant, if not possibly contradicting to its possible uses as elements.</p>",
        "id": 154024377,
        "sender_full_name": "Georg Fette",
        "timestamp": 1544519263
    },
    {
        "content": "<p>In a StructureDefinition for an extension, this cardinality is used to indicate whether the extension may be repeated.</p>",
        "id": 154024407,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1544535776
    },
    {
        "content": "<p>The cardinality of the root element places limits on what the cardinality can be when referencing that type.  So if you define an extension whose root cardinality is 0..1, you're not allowed to reference it with a cardinality of 0..*.</p>",
        "id": 154024442,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1544543875
    },
    {
        "content": "<p>There is a difference between <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> and my interpretation - and I cannot find a normative statement in the specification about this. Would you know where Lloyd?  </p>\n<p>The main difference between our viewpoints is that for me cardinality is enforced at validation time - so dependent on what actually appears in an instance, while for Lloyd it places restrictions on profiles that reference other types (including extensions).  I agree this should also be done by authoring tools, but it means that unprofiled resources, that reference an extension with a cardinality constraint, go unchecked.</p>",
        "id": 154024451,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1544545027
    },
    {
        "content": "<p>I think the rules apply both for profiles and for instances.  If you reference an extension, you're intrinsicly bound by the profile that defines that extension.  I'm not sure where in the spec it would be defined though.  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ?</p>",
        "id": 154024468,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1544545995
    },
    {
        "content": "<p>Note: the implementation of the snapshot generator in the .NET FHIR API library confirms to Lloyd's interpretation. In other words, if a profile element references an external type profile, then the cardinality of the referencing element is constrained by the cardinality of the referenced root element in the external profile. Optionally, the referencing profile can further constrain (but not relax) the inherited cardinality.<br>\nThe snapshot generator logic simply applies any inherited constraints by overriding, but does no attempt to verify the actual values. It is up to the validator to verify that the applied constraints are actually valid.</p>",
        "id": 154024475,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1544546805
    },
    {
        "content": "<p>technically, what we say is that it has no meaning: </p>\n<p><code>min/max  optional (irrelevant)</code></p>",
        "id": 154024550,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1544558345
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/elementdefinition.html#interpretation\" target=\"_blank\" title=\"http://build.fhir.org/elementdefinition.html#interpretation\">http://build.fhir.org/elementdefinition.html#interpretation</a></p>",
        "id": 154024552,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1544558362
    },
    {
        "content": "<p>but I do agree with Lloyd's interpretation</p>",
        "id": 154024553,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1544558377
    },
    {
        "content": "<p>ah, thank you. Interesting to see that the answer was already there in the specs :-)</p>",
        "id": 154024594,
        "sender_full_name": "Georg Fette",
        "timestamp": 1544562147
    },
    {
        "content": "<p>Added <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19756\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19756\">GF#19756</a></p>",
        "id": 154024640,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1544566165
    },
    {
        "content": "<p>This is exactly why we included what's in the spec today.  The snapshot generator (and validator) is <em>not</em> supposed to pull the root element cardinality into the element snapshot - it's supposed to ignore the root element cardinality.</p>",
        "id": 154026211,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1545177106
    },
    {
        "content": "<p>If the root cardinality of an extension definition is 0..1, it's <em>illegal</em> for a profile that references the extension to have a cardinality of 0..*</p>",
        "id": 154026213,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1545177504
    },
    {
        "content": "<p>The root cardinality can't be ignored.</p>",
        "id": 154026214,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1545177513
    },
    {
        "content": "<p>But it can be constrained</p>",
        "id": 154026215,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1545177520
    },
    {
        "content": "<p>That's not what the spec says...and not what my implementations have done.  Generally, I've not found it good practice to allow a type definition to constrain it's parent's ability to use it...</p>",
        "id": 154026216,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1545177986
    },
    {
        "content": "<p>although I'm aware that's what SD.context does...</p>",
        "id": 154026217,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1545178073
    },
    {
        "content": "<p>If you have an extension that's not allowed to repeat, the extension definition needs to be able to enforce that.  That's always been the rule.  The change request is to ensure it's properly documented.</p>",
        "id": 154026218,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1545178228
    },
    {
        "content": "<p>We don't have a whole lot of use-cases for constraints other than prohibiting extension repetition, but that's still a necessary and valid one.</p>",
        "id": 154026220,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1545178265
    },
    {
        "content": "<p>Is there somewhere in the spec that confirms your assertion?  Extension definitions are simply type profiles. They're only special because they're implicitly applied via the url attribute.  Is it your intention that this would also apply to say, a profile on Identifier?</p>",
        "id": 154026225,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1545182384
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 154026226,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1545182572
    },
    {
        "content": "<p>If someone creates a profile on identifier that has a cardinality of 0..1 (e.g. a profile for a particular MRN), then yes, that would apply.  You could define in the profile a requirement that the cardinality of the declaring element would have to be a proper constraint on the profile of the type.  And there are places that might be reasonable to do.</p>",
        "id": 154026227,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1545184232
    },
    {
        "content": "<blockquote>\n<p>If the root cardinality of an extension definition is 0..1, it's illegal for a profile that references the extension to have a cardinality of 0..*</p>\n</blockquote>\n<p>That was my interpretation too.  My point was not so much about what happens or can be done when authoring profiles, but more what happens in an instance.  I can have a resource instance that does not claim conformance to any profile, yet the instance can use an extension, in fact, if it has multiple repeats of an extension, and the extension referenced then says 0..1 in the root - should't the validator complain?</p>",
        "id": 154026454,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1545255337
    },
    {
        "content": "<p>The validator <em>could</em> but that would mean inferring (and possibly locating) the extension profile based on the url.  That's not magic we've assumed just yet.</p>",
        "id": 154026504,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1545269198
    }
]