[
    {
        "content": "<p>So using the AuthorizationInterceptor works great for catching declaring resources. One interesting caveat seems to be when it comes to operations like <code>http://hapi.fhir.org/baseR4/metadata</code></p>\n<p>In this case, the CapabilityStatement that is returned isn't really a \"resource\" per say, but rather is an operation called \"metadata.\" I don't see a means to allow operations through than by checking the requestDetails for the operations and allowing \"return new RuleBuilder().allowAll(\"Allow access to metadata\").build();\" </p>\n<p>Allowing just \"new RuileBuilder.allow(\"Allow access of CapabilityStatement resource type.\").read().resourcesOfType(CapabilityStatement.class).withAnyId();\" does not work because the resource isn't identified, and when I tried to identify it against the resources, combining and extending with \"CapabilityStatementRestSecurityComponent\" and \"IResourceProvider\" throws a contractual failure because the returned object is a \"OperationDefinition\" type. </p>\n<p>What is the proper way to allow operations against \"metadata\" through?</p>",
        "id": 215135799,
        "sender_full_name": "James Fadeley",
        "timestamp": 1604083741
    },
    {
        "content": "<p>Disregard. Didn't realize there was a special builder method of \".metadata()\" against the RuleBuilder. That seems more logical.</p>",
        "id": 215137862,
        "sender_full_name": "James Fadeley",
        "timestamp": 1604084829
    }
]