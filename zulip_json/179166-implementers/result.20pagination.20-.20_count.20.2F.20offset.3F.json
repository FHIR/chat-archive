[
    {
        "content": "<p>How can we get only the 10th to 19th set of results in a search?<br>\nis there a _offset parameter?</p>",
        "id": 185791798,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579159722
    },
    {
        "content": "<p>No. In general, the size of the page can neither be fully defined by the client nor by the server. What's your use case?</p>",
        "id": 185793911,
        "sender_full_name": "René Spronk",
        "timestamp": 1579162757
    },
    {
        "content": "<p>if we use _count to get only a few results, how do we get the few next?</p>",
        "id": 185794431,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579163390
    },
    {
        "content": "<p>i don't want my mobile app to get all the results. Something like whatsapp</p>",
        "id": 185794505,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579163443
    },
    {
        "content": "<p>The result bundle contains &lt;links&gt;. The 'next' link is the URL to GET, which will return the next page.</p>",
        "id": 185794989,
        "sender_full_name": "René Spronk",
        "timestamp": 1579163992
    },
    {
        "content": "<p>thanks. <br>\nSo I see this translates in _getpages,  getpageoffset.. I was looking for these as part of the spec</p>",
        "id": 185795801,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579164880
    },
    {
        "content": "<p>Ok, that answers my question. <br>\nSide question: are these (_getpages, _getpageoffset) documented? should they?</p>",
        "id": 185795890,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579164987
    },
    {
        "content": "<p>Not as part of the FHIR spec. As part of HAPI perhaps.</p>",
        "id": 185796229,
        "sender_full_name": "René Spronk",
        "timestamp": 1579165333
    },
    {
        "content": "<p>I'll see where this is in Grahame's server, but i think _offset is a relatively standard way of working, we could adopt it</p>",
        "id": 185796286,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579165404
    },
    {
        "content": "<p>We made a conscious decision in the spec to <em>not</em> support searching by offset - because some search technologies and architectural approaches have challenges doing that.  The only search navigation mechanism supported right now is 'next', 'previous' and sometimes 'first' and 'last'.</p>",
        "id": 185824871,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1579188554
    },
    {
        "content": "<p>FYIW <code>_pages</code> and <code>_getpageoffset</code> are just HAPI FHIR internal things that HAPI uses in its own paging links. They are intended to just be opaque parts of the next/prev URLs (which sure has not stopped people from figuring out how they work and directly modifying them. :) )</p>",
        "id": 185854731,
        "sender_full_name": "James Agnew",
        "timestamp": 1579205580
    },
    {
        "content": "<p>Key thing is that if you changed your architecture or syntax tomorrow to not use those, you'd still be fully conformant</p>",
        "id": 185856233,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1579206419
    },
    {
        "content": "<p>I thought that page or offset were standard options for pagination, next/previous not so much, but my experience is very limited.</p>",
        "id": 185864476,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579211054
    },
    {
        "content": "<p>One problem with page/offset is that if some resources are modified between the time you retrieve the first page and the second page, some results near the page boundary could be returned two or zero times. Having next/previous links makes this stable in the sense that when you look at the next page, it will always start from the same place regardless of changes to earlier pages.</p>",
        "id": 185866074,
        "sender_full_name": "Paul Church",
        "timestamp": 1579211804
    },
    {
        "content": "<p>And the server might impose different page sizes if you try to define one bigger than it supports.</p>",
        "id": 186965451,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1580375224
    },
    {
        "content": "<p>Hi Team,</p>\n<p>We are exposing FHIR resources following facade pattern.<br>\nThe implementation is stateless. To support \"next\", \"previous\" etc. we have to pass some information about offset in those URLs.</p>\n<p>My question is, to support that, are there any restrictions (is it allowed) to introduce implementer specific (custom) query parameter?</p>\n<p>Thanks,</p>",
        "id": 238291602,
        "sender_full_name": "Milinda Perera",
        "timestamp": 1620732898
    },
    {
        "content": "<p>Yes, you can use custom query parameters in the next / previous / first / last URLs. The clients will always just use those entire URLs, so they can contain anything</p>",
        "id": 238298827,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1620736547
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span> for confirmation</p>",
        "id": 238320510,
        "sender_full_name": "Milinda Perera",
        "timestamp": 1620744569
    },
    {
        "content": "<p>We have been trying to add pagination functionality to my FHIR server. just want to check with you guys that any  wrong doing below implementation or can you advise the better way to do it.  Let's assume the client is requesting the below query <strong>http://localhost:80/Patient/ABC|123/DocumentReference</strong> to get the Documentrefrence bundle of the Patient( ABC|123), it might have n number of records in the backend system, so its big load for the server to serve the request as single bundle and also it's going to be a delay to get the response from the server. so we decided to implement pagination as below which will give you the first 20 records and the next link, next link will take you to another set of the 20 records and will give you the next page as page=3 for another 20 <a href=\"http://records.it\">records.it</a> keeps going until it reaches the last page. is it acceptable as per FHIR  standard <br>\n**Note page size =20 <br>\n **\"link\": [<br>\n        {<br>\n            \"relation\": \"self\",<br>\n            \"url\": \"<a href=\"http://localhost:5000/Patient/ABC|123/DocumentReference\">http://localhost:5000/Patient/ABC|123/DocumentReference</a>\"<br>\n        },<br>\n        {<br>\n            \"relation\": \"next\",<br>\n            \"url\": \"<a href=\"http://localhost:5000/Patient/ABC|123/DocumentReference?page=2\">http://localhost:5000/Patient/ABC|123/DocumentReference?page=2</a>\"<br>\n        }<br>\n    ],**</p>",
        "id": 276488883,
        "sender_full_name": "shuhaib k",
        "timestamp": 1648134313
    },
    {
        "content": "<p>What you are describing sounds generally consistent with how FHIR pagination works. Do you have a specific question or do you want to share more details that you're unsure about? I will note that 20 seems like a very low cap; would think about 1000 or 100.</p>",
        "id": 276489205,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1648134456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>: As per my understanding, the parameter name <strong>page</strong> is not part of the FHIR search parameter, I am afraid it is breaking the FHIR base standard if I use page parameter in URL on my system or I can use it since its part of the Rest API concept. I agreed 20 is the very low cap and we use 100, just for the describing whole story I mentioned some numbers with 20.</p>",
        "id": 276492157,
        "sender_full_name": "shuhaib k",
        "timestamp": 1648135698
    },
    {
        "content": "<p>Ahh. The URL that you supply in your next (or prev) link is opaque from the perspective of the client. It does not need to look anything like a FHIR search URL, and indeed could be something like <code>https://server.example.org/_fhir/continue/19758492838485859</code>. The only requirement is that a client should be able to be reference this URL via HTTP get, and it should receive the next page of the search.</p>",
        "id": 276492473,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1648135830
    },
    {
        "content": "<p>In general, it is probably a good practice not to embed parameter names like <code>page=</code> because you might find that clients try to get clever and directly manipulate those parameters. Conveying an opaque URL that simply acts as a continuation token is probably safer. On the other hand, maybe you want to support this kind of \"under the abstraction barrier\" client behavior for arbitrary jumps :-) These are your internal design choices to make.</p>",
        "id": 276492590,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1648135877
    },
    {
        "content": "<p>And when your FHIR server supports this it has to maintain state so that when the user (FHIR client) requests page=2 you know where to start from, i.e. that is unique to that FHIR client's search.</p>",
        "id": 276514780,
        "sender_full_name": "John Silva",
        "timestamp": 1648144090
    },
    {
        "content": "<p>If using a server farm the use of page=2 is probably easier to deal with by a server.. if the continuation token is only known by one specific server which responded, the continuation queries may not be answerable by any other server.</p>",
        "id": 276581765,
        "sender_full_name": "René Spronk",
        "timestamp": 1648190896
    },
    {
        "content": "<p>Thanks all for your suggestions. Really appreciated your prompt response on this <span class=\"user-mention\" data-user-id=\"191372\">@René Spronk</span>: even I felt the same passing parameter value on page is much easier and easy implementation.</p>",
        "id": 276873587,
        "sender_full_name": "shuhaib k",
        "timestamp": 1648474472
    }
]