[
    {
        "content": "<p>Documentation Template knowledge artifacts from the current standard are intended to be represented by the CQIF profile of Questionnaire.  I am trying to create a FHIR example of a current template that supports data collection for a cardiac referral. The first issue I hit was how to achieve the external data retrieval functions. It seems the reasonable approach is to define a CQL library with the appropriate definitions (equivalent to the external data definitions in the KAS schema), and then bind them to a question somehow. Is the item extension cqif-initialValue the appropriate way to do this? Thoughts <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> ?</p>",
        "id": 153943158,
        "sender_full_name": "Lorraine Constable",
        "timestamp": 1520552481
    },
    {
        "content": "<p>Follow on question. The other Clinical Reasoning resources have a means to capture RelatedResources, SupportingEvidence, Contributors, etc. These elements are  missing from the metadata sections of Questionnaire. Should they be added to this profile?</p>",
        "id": 153943159,
        "sender_full_name": "Lorraine Constable",
        "timestamp": 1520552646
    },
    {
        "content": "<p>We should probably have extensions to support those elements.  It's not clear they're part of core for Questionnaires - Questionnaires are used in a whole lot of places that aren't nearly as concerned about that sort of metadata as folks tend to be in the CDS space.</p>",
        "id": 153943165,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1520554342
    },
    {
        "content": "<p>In terms of external data retrieval, that's one of the things we're working on with the SDC project - though we probabaly won't get into deep discussions about it for about a month or so.</p>",
        "id": 153943166,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1520554404
    },
    {
        "content": "<p>If you want to keep up-to-date on discussions, you might follow <a class=\"stream\" data-stream-id=\"102\" href=\"/#narrow/stream/questionnaire\">#questionnaire</a></p>",
        "id": 153943167,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1520554425
    },
    {
        "content": "<p>I was suggesting we add them to the profile, not the base resource, so they would be extensions. My deliverable will have to deal with the issue (and I assume it will be using the CQIF extensions) long before a month from now, so I will have to work out an approach</p>",
        "id": 153943179,
        "sender_full_name": "Lorraine Constable",
        "timestamp": 1520567707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191408\">@Lorraine Constable</span> , yes, the intent is to use the CQIF extensions to provide those types of values. So you would define a CQL Library with the data you wanted, and you would use cqif-library and cqif-initialValue to provide link the questions to the external data.</p>",
        "id": 153943414,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1520609864
    },
    {
        "content": "<p>For the follow on question, yes, especially relatedArtifact for supporting documentation. They haven't been defined thus far because extensions didn't support using those data types as values, but I think that's allowed now so those extensions could be defined.</p>",
        "id": 153943416,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1520609960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> Do you want me to add a tracker item for the additional extensions? if so, all in one, or one per?</p>",
        "id": 153943562,
        "sender_full_name": "Lorraine Constable",
        "timestamp": 1520636958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191408\">@Lorraine Constable</span> yes please, one tracker is fine.</p>",
        "id": 153943599,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1520694750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> - when would you use the cqif-initialValue extension on Item in Questionnaire versus the Initial element in the base resource?</p>",
        "id": 153943968,
        "sender_full_name": "Lorraine Constable",
        "timestamp": 1520888717
    },
    {
        "content": "<p>When you want the initial value to be provided by the evaluation of an expression, rather than statically specified in the resource.</p>",
        "id": 153943971,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1520888849
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span></p>",
        "id": 153943972,
        "sender_full_name": "Lorraine Constable",
        "timestamp": 1520889282
    },
    {
        "content": "<p>You're welcome!</p>",
        "id": 153943977,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1520890142
    },
    {
        "content": "<p>Have we thought about just moving to an \"expression\" extension - which we could put on any resource wherever we needed/wanted it?</p>",
        "id": 153944024,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1520897466
    },
    {
        "content": "<p>i have, and decided not to - the semantics of the expression might be portable, but in each case , you need to say something about the binding - how the outcome of evaluating the expression is is interpreted - and how the expression connects to data from the context</p>",
        "id": 153944030,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520897910
    },
    {
        "content": "<p>Well, we do that in Clinical Reasoning, with cqif-cqlExpression and cqif-fhirPathExpression, but the semantics are always \"the value of this element is the result of evaluating this expression\". And as Grahame says, the semantics for this case are variable enough that it made sense to keep the specific initialValue and calculatedValue for use with Questionnaire.</p>",
        "id": 153944108,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1520909164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>   I have a situation where I want to \"enableWhen\" a question based on a boolean expression that relies on 4 previous questions. Do I have to create a item with a calculated value and then reference that item from the enableWhen? If so,  is there a way to say \"don't display this\"? or can enableWhen reference an expression that uses responses from previous questions?</p>",
        "id": 153944921,
        "sender_full_name": "Lorraine Constable",
        "timestamp": 1521074048
    },
    {
        "content": "<p>Is it only enabled if all 4 of the previous questions are answered, or is there some calculation?</p>",
        "id": 153944941,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1521082155
    },
    {
        "content": "<p>sorry was on a plane <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> Here is the logic:<br>\n  &lt;condition&gt;<br>\n                                &lt;logic xsi:type=\"elm:Or\"&gt;<br>\n                                    &lt;elm:operand xsi:type=\"elm:And\"&gt;<br>\n                                        &lt;elm:operand xsi:type=\"elm:Property\" path=\"ongoingRestingChestPain\"&gt;<br>\n                                            &lt;elm:source xsi:type=\"elm:ParameterRef\" name=\"Responses\"/&gt;<br>\n                                        &lt;/elm:operand&gt;<br>\n                                        &lt;elm:operand xsi:type=\"elm:Property\" path=\"onsetOfNewRestingChestPain\"&gt;<br>\n                                            &lt;elm:source xsi:type=\"elm:ParameterRef\" name=\"Responses\"/&gt;<br>\n                                        &lt;/elm:operand&gt;<br>\n                                    &lt;/elm:operand&gt;<br>\n                                    &lt;elm:operand xsi:type=\"elm:And\"&gt;<br>\n                                        &lt;elm:operand xsi:type=\"elm:Property\" path=\"onsetOfRecurrentChestPain\"&gt;<br>\n                                            &lt;elm:source xsi:type=\"elm:ParameterRef\" name=\"Responses\"/&gt;<br>\n                                        &lt;/elm:operand&gt;<br>\n                                        &lt;elm:operand xsi:type=\"elm:Property\" path=\"previouslyStableExertionalAngina\"&gt;<br>\n                                            &lt;elm:source xsi:type=\"elm:ParameterRef\" name=\"Responses\"/&gt;<br>\n                                        &lt;/elm:operand&gt;<br>\n                                    &lt;/elm:operand&gt;<br>\n                                &lt;/logic&gt;<br>\n                                &lt;conditionRole/&gt;<br>\n                            &lt;/condition&gt;</p>",
        "id": 153944942,
        "sender_full_name": "Lorraine Constable",
        "timestamp": 1521082327
    },
    {
        "content": "<p>lost the indenting, sorry</p>",
        "id": 153944943,
        "sender_full_name": "Lorraine Constable",
        "timestamp": 1521082337
    }
]