[
    {
        "content": "<p>Is it possible to create a StructureDefinition whose derivation is \"specialization\" and whose baseDefinition is a StructureDefinition whose derivation is \"constraint\"?  It appears that this is not possible if the parent SD has a sliced element (because of sdf-1 unique path rule) but if the baseDefinition has not sliced, then I don't see any constraint that would prevent this. Is it legal?</p>",
        "id": 153963914,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1526934689
    },
    {
        "content": "<p>we've certainly not thought about this before. I don't know whether it's legal or whether the tools support it.</p>",
        "id": 153963915,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1526936230
    },
    {
        "content": "<p>but I wonder whether you really need it...</p>",
        "id": 153963916,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1526936325
    },
    {
        "content": "<p>Yes, we need it in CIMI. We build hierarchies in the logical model and apply constraints intermixed with definition of new \"native\" properties. It would be good to actually have a way in logical models to do <em>both</em> constraints and new elements in the same SD, and use that as a baseDefinition for another SD that adds <em>both</em> constraints and new elements, etc.</p>",
        "id": 153963917,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1526936513
    },
    {
        "content": "<p>i wonder whether you really do. you can apply constraints to existing elements in a specialization</p>",
        "id": 153963918,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1526936548
    },
    {
        "content": "<p>Really?   I thought that was illegal to add constraints to a specialization. That's what Chris Moesel says -- didn't you say that to him? <br>\n<a href=\"#narrow/stream/4-implementers/topic/Logical.20Models.20and.20Inheritance\" title=\"#narrow/stream/4-implementers/topic/Logical.20Models.20and.20Inheritance\">https://chat.fhir.org/#narrow/stream/4-implementers/topic/Logical.20Models.20and.20Inheritance</a></p>",
        "id": 153963919,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1526936875
    },
    {
        "content": "<p>so there's some misunderstanding there. You can't mix both. but adding constraints to an element is not what I had in mind there - you can do that when specializing. kind = constraint vs kind = specialization has special meaning in the typing system, but is orthogonal to adding constraints to an existing element</p>",
        "id": 153963920,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1526936983
    },
    {
        "content": "<p>my apologies to <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> if that means I misunderstood him</p>",
        "id": 153963921,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1526937003
    },
    {
        "content": "<p>I don't know if you misunderstood me or I misunderstood you, <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, but apology accepted and likewise extended if applicable. ;-)</p>",
        "id": 153963923,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1526937126
    },
    {
        "content": "<p>well, generally, misunderstandings are mutual.</p>",
        "id": 153963926,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1526937237
    },
    {
        "content": "<p>So to be clear, if A has an element <code>mycode</code>, and B is a specialization of A, then B can apply a new constraint on the inherited <code>mycode</code> element?</p>",
        "id": 153963927,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1526937314
    },
    {
        "content": "<p>but let's try and be clear:</p>\n<ul>\n<li>you can't mix constraint and specialization, because they are mutually exclusive in the typing system</li>\n<li>but when specializing a structure, you can add new rules about an existing element:<br>\n** tighter bindings<br>\n** new invariants<br>\n** narrower documentation<br>\n** tighter cardinality constraints</li>\n</ul>",
        "id": 153963928,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1526937357
    },
    {
        "content": "<p>and possible others... and yes, a new constraint</p>",
        "id": 153963929,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1526937373
    },
    {
        "content": "<p>And, see my original message, it seems slicing might be an exception, because of the unique path invariant?</p>",
        "id": 153963930,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1526937407
    },
    {
        "content": "<p>yes, slicing is an exception</p>",
        "id": 153963931,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1526937431
    },
    {
        "content": "<p>just like you couldn't slice in an OO class</p>",
        "id": 153963932,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1526937446
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 153963933,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1526937447
    },
    {
        "content": "<p>no problems</p>",
        "id": 153963934,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1526937460
    },
    {
        "content": "<p>Just a thought -- but -- since slicing is an outlier -- would you be open to a tracker that proposed removing constraint sdf-1?</p>",
        "id": 153963949,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1526943118
    },
    {
        "content": "<p>we can certainly talk about it. But I'm extremely dubious about the idea. Slicing is hard. And I think that it's important to be able to generate code for concrete classes</p>",
        "id": 153963950,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1526943321
    }
]