[
    {
        "content": "<p>We are investigating design space around creating special kinds of CodeSystems (eg SNOMED CT) and wondering whether it would be legitimate to have the CREATE interaction on CodeSystem support an additional MIME type (<code>application/zip</code> in this  case) along with some custom parameters.<br>\nThis has the appeal of symmetry with POSTing a FHIR CodeSystem Resource.</p>\n<p>The alternative would be a custom operation.</p>",
        "id": 178445392,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1571377413
    },
    {
        "content": "<p>you can do that legitimately - it's just an extension outside the specification space. I don't think we'll standardise that... unless enough people ask</p>",
        "id": 178461262,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571394298
    },
    {
        "content": "<p>Thanks.  So if we do it inside the specification space then we'd defined an operation like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n    <span class=\"nt\">&quot;resourceType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;OperationDefinition&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;cf-1571444803740&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;text&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;status&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;generated&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;div&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&lt;div xmlns=\\&quot;http://www.w3.org/1999/xhtml\\&quot;&gt;&lt;a name=\\&quot;mm\\&quot;&gt;&lt;/a&gt;&lt;/div&gt;&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://ontoserver.csiro.au/profiles/CodeSystem-x-create&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Create CodeSystem from native format&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;status&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;draft&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;kind&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;operation&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;code&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;x-create&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;resource&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;CodeSystem&quot;</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;parameter&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;code&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;binary&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;use&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;in&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;min&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;max&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;documentation&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;For SNOMED CT, a ZIP of the RF2 SNAPSHOT content&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Binary&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;code&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;system&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;use&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;in&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;min&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;max&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;uri&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;code&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;version&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;use&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;in&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;min&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;max&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;string&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;code&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;return&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;use&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;out&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;min&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;max&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;OperationOutcome&quot;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I'd kind of like this to be async by default.  Is there a way to document this?</p>",
        "id": 178522235,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1571447636
    },
    {
        "content": "<p>The other issue is that the preferred way to interact with this would be a POST of the ZIP with the additional parameters (system &amp; version) as query parameters.  Is that also legit?  HAPI seems to ignore query parameters when there's a POST body, requiring the use of a Parameters resource.</p>",
        "id": 178522351,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1571447800
    },
    {
        "content": "<p>I'm not sure about the query parameters. There's no way to talk about async in capability statement or operation definition at this time</p>",
        "id": 178542374,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571485083
    }
]