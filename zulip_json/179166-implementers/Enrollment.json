[
    {
        "content": "<p>When designing provider edge application workflows, a common mental model is \"Enrollment\" -&gt; \"Supplementation\" -&gt; \"Writeback\"</p>\n<p>Enrollment is the moment at which an app knows there is work to be done for a given patient. For example, for a surgical application, this might be the moment that a patient is scheduled for a case. For a diagnostic testing application, it could be the moment that a provider places an order for the test. In any circumstance, this is the first time that you know of the patient and your trigger to do something with their data.</p>\n<p>Enrollment in an pre-FHIR world was primarily driven off of HL7v2 ADT, ORMs and SIU, with the occasional single sign-on launch passing patient ID via SAML or encrypted URL.</p>\n<p>Enrollment is different with FHIR. SSO is encapsulated well with SMART, but the query-based nature of FHIR (at least the capabilities we see on the market) doesn't lend itself to the ideal enrollment scenario. FHIR subscriptions are undeveloped and not seen with EHRs yet, polling is inefficient and often not widely supported (I can't hit most EHRs' ProcedureRequest endpoints to get the newest updates; I need to pass patient or encounter as a required parameter), and no one seems to like messaging.</p>\n<p>So applications are forced to develop clunky flows where providers have to select patients in the application, it seems. How are people thinking about / solving for this?</p>",
        "id": 214869895,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1603905779
    },
    {
        "content": "<p>\"Enrollment is the moment at which an app knows there is work to be done for a given patient. \" --&gt; generally that is expected to be done via Task. At least that is the goal, AFAIK it is still not widely adopted.</p>",
        "id": 214871537,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1603906433
    },
    {
        "content": "<p>For a concrete example: if I were a LIS and use ORM / ORU today, how do I accomplish my workflow in a FHIR world?</p>",
        "id": 214888865,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1603914764
    },
    {
        "content": "<p>For a general background, take a look at <a href=\"http://build.fhir.org/workflow.html\">http://build.fhir.org/workflow.html</a></p>\n<p>For a more specific (but still general and higher-level) diagram, take a look at <a href=\"http://hl7.org/fhir/us/dme-orders/2020Sep/restful_fhir_exchanges.html\">http://hl7.org/fhir/us/dme-orders/2020Sep/restful_fhir_exchanges.html</a></p>",
        "id": 214889985,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1603915269
    },
    {
        "content": "<p>Thanks Vassil.</p>\n<p>It just doesn't feel like we're close to that flow being real. I don't see Task supported by many (any?) EHRs and it's not like upcoming regulatory changes affect that. So some of the most common integration use cases (EHR - LIS, EHR - PACS, etc) aren't serviced in the FHIR world.</p>",
        "id": 214926817,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1603947542
    },
    {
        "content": "<p>Most of those workflows occur within one single organization, so HL7 v2 will reign such workflows for the foreseeable future. It only makes sense to switch to FHIR if there are real advantages ($-wise), or if one is dealing with exchange scenarios v2 wasn't designed for.  To me, this is the sole reason for the low uptake of Task and Task-based workflow scenarios.</p>",
        "id": 214933335,
        "sender_full_name": "Ren√© Spronk",
        "timestamp": 1603956532
    },
    {
        "content": "<p>I generally describe interoperability as having 4 levels of complexity:</p>\n<ul>\n<li>read-only</li>\n<li>write for 'single-owner/write-once' (e.g. Observation, QuestionnaireResponse)</li>\n<li>write for shared/multi-write resources (e.g. Encounter, Condition, AllergyIntolerance)</li>\n<li>integrated workflow (external system asks for order fulfillment, manages orders)</li>\n</ul>\n<p>EHRs have broad support for the first.  Most have support for the second.  They're starting to roll out the third.  The fourth is hardest, so it's not surprising it's not implemented yet.  However, Da Vinci, Gravity and others are pushing for this capability, at least in some areas, so I suspect we'll start to see it happening.</p>",
        "id": 214966588,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1603978500
    },
    {
        "content": "<p>Why is FHIR inherently cross organization?</p>\n<p>Provider SMART launch is \"in-enterprise\" /\"one organization\". Seemingly a paradox that capability being built out en-masse (at least in the US) when corresponding FHIR resources necessary for the most meaningful and common workflows can't be accommodated. </p>\n<p>IHE is well established for cross organizational flows. Not advocating for XDS by any means, but it's an example of how the precedence of a well deployed standard isn't explanation enough. </p>\n<p>The only greenfield is patient authorized applications, which certainly has seen adoption and opens up a new class of consumers applications, but it doesn't \"fix\" broken problems.</p>\n<p>From my experiences, the Netherlands just as much as the US is still hindered in innovation by HL7v2. It seems wild to me that diagnostic ordering is not accommodated and nowhere on the EHR roadmap. When remote care, digital therapeutics, and other rapidly growing need order/resulting, they're forced to live in the 90s and set up VPNs, learn MLLP, and start counting pipe delimiters. That seems wrong.</p>",
        "id": 214972723,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1603981262
    },
    {
        "content": "<p>Lloyd, that's an interesting framework.</p>\n<p>To be clear, I'm not critical of the standard level of things here (as Task exists and there's detail on how things could be), but I'm concerned and dismayed about the direction of regulatory and implementation adoption levels. The mixed standards of healthcare are only going to get muddier for the forseeable future.</p>",
        "id": 214974129,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1603981838
    },
    {
        "content": "<blockquote>\n<p>they're forced to live in the 90s and set up VPNs, learn MLLP, and start counting pipe delimiters. That seems wrong</p>\n</blockquote>\n<p><a href=\"http://v3ballot.hl7.org/v3ballotarchive/v3ballot2014sep/html/infrastructure/its_hoh/its_hoh.html\">HL7 over HTTP</a> has been around for a while. It probably needs an update, but it is in use.</p>",
        "id": 214975461,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1603982503
    },
    {
        "content": "<p>EHRs haven't really adopted that. 87.9% of the HL7v2 traffic we see is MLLP over VPN. Another 9.8% is SFTP. Only 1% is HTTPS.</p>",
        "id": 214980327,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1603984311
    },
    {
        "content": "<p>FHIR isn't inherently cross-organization.  FHIR is quite neutral into how it's used.  However, implementation typically has been in places where interoperability hasn't already existed or been poor - and that's generally been in the cross-organization space.  Organizations have long experience getting systems within the walls of a hospital to talk to each other via complex interface engine configurations.  But that doesn't scale well across organizations.  Certainly you <em>could</em> rip out all of an organizations v2 interfaces and use FHIR for everything.  However: lots of internal systems still have zero FHIR support; spending lots of money to replace an interface and not accomplishing anything that wasn't already being done tends not to be career-enhancing; in-institution exchanges are typically 'mission critical' while external interfaces are perceived as less so.  All of those factors tend to drive an 'external' focus.  All that said, at least a few organizations <em>have</em> chosen to replace most/all of their v2 with FHIR because moving to a single modern platform was deemed to provide benefits worth the risk/cost</p>",
        "id": 215010122,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1603996735
    },
    {
        "content": "<p>Hi All, I have a query around Enrollment - in a nutshell a broader scope that includes particularly enrolling patients to mHealth / wellness programs. My real-world requirement is for an EMR to be able to tell our ePRO platform (patient reported outcome) to add a patient to a predefined project (e.g. Hip Replacement) so that a series of questionnaires and educational material can be sent to patients. In this case, there is the notion of setting a baseline data collection date (can be others). Comments/Feedback/Advice welcome</p>\n<p>I'm carrying over a related discussion from #Questionnaire channel; between myself and Lloyd</p>\n<p>Koray&gt; I'm looking to model a request from EMR to our PROMs solution to add (enroll/recruit) a particular patient to a predefined project. Once the patient is added to a particular project our system defines the questionnaires and the schedule by which they'll be sent out to the patients. In essence this is similar to the ADT A01 type of transaction.</p>\n<p>If I breakdown the actions I'm needing:<br>\n1) Create a new Patient in ePROMs solution (ZEDOC) (if already exists then update)<br>\n 2) Add patient to an existing PROMs project (via an agreed Project Id)<br>\n 3) Set baseline data collection date</p>\n<p>Lloyd: Lloyd McKenzie3:36 AM<br>\nRight now, we have a couple of 'enrollment'-related resources, but those are currently specific to coverage/insurance rather than to programs in general, though personally I'd like to see them generalized. (As well, there's a need to transition the notion of 'enrollment response' to just 'enrollment' because sometimes enrollment isn't driven by a request.)</p>\n<p>Koray: That's great, I was thinking about exactly the same resource but then realised the use case was for insurance. Another one that got my attention is the Measure resource, which includes PROMs in its type description. But I reckon this isn't for an action but rather definitional. I can see the enrolment concept would apply more broadly, for example including things like recruiting patients to a smoking cessation programs or blood glucose control mHealth interventions etc. Not sure if there's already a resource for it specifically but should also apply to patient recruitment to a clinical trial as well</p>\n<p>Lloyd McKenzie: Measure is for defining what information should be collected - it has no notion of \"sign-up\".<br>\nLloyd McKenzie: You might experiment with EnrollmentRequest and response, and if they're \"close\", you can submit a change request to have their scope broadened</p>\n<p>Koray:  I reckon for the time being I can create an an extension for baseline data collection date, which probably in the end will most likely not be part of resource proper anyways. The more I think about this I think it is worth having a dedicated resource for enrolling patients to a program that involves data collection points with certain semantics (e.g. pre-visit, baseline, post-op, 30days follow up etc.). Which I believe could be done via a repeating generic date element and through slicing these tags could be added. That's what I'd do with an openEHR archetype</p>\n<p>Lloyd McKenzie9:12 AM<br>\nA new resource is definitely an option too. We look forward to your feedback :)</p>",
        "id": 217109482,
        "sender_full_name": "Koray Atalag",
        "timestamp": 1605689934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span></p>",
        "id": 217133785,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1605706101
    },
    {
        "content": "<p>This is something we've been looking at too for the New Zealand context. We currently have a National enrolment service using SOAP APIs to record a patient's enrolment for publicly funded primary care. We're now looking at offering FHIR APIs for our various services including a version of the enrolment service, but the existing Enrolment-related FHIR resources don't seem well suited to recording participation in a program like this.</p>",
        "id": 217211717,
        "sender_full_name": "Daniel Thomson",
        "timestamp": 1605742673
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"195365\">@Daniel Thomson</span> any progress with this? I've been referred to the <a class=\"stream\" data-stream-id=\"179262\" href=\"/#narrow/stream/179262-patient-empowerment\">#patient empowerment</a> stream and had a chat with Dave deBronkart who encouraged to bring this</p>",
        "id": 218273761,
        "sender_full_name": "Koray Atalag",
        "timestamp": 1606734695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192685\">@Vassil Peytchev</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> circling back on this. for the LIS workflow, why wouldn't the ordering system just send/push ServiceRequest (rather than sending Task and expecting the rendering system to pull it? </p>\n<p>We have a group that's interested in replacing their standard ORM/ORU with FHIR, but they are proposing just:<br>\nEHR (as client) sends ServiceRequest to LIS FHIR Server as a POST Create<br>\nLIS (as client) sends DiagnosticReport/Observations to EHR FHIR server as POST Create</p>",
        "id": 218352138,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1606773583
    },
    {
        "content": "<ol>\n<li>ServiceRequest does not reflect the state of the workflow, in this case, \"received\", \"accepted\", \"Specimen received\", \"Specimen Collected\", \"Specimen Insufficient\", \"Preliminary results\", \"Final results\"  etc. Task.status + Task.businessStatus + Task.statusReason can handle that.</li>\n<li>ServiceRequest is the authorization. It belongs to the ordering provider, and needs to exist on the EHR side. The \"mirror\" copies on the LIS are not of interest to the ordering provider</li>\n<li>The \"results\" in the EHR need to be matched to the original ServiceRequest. Instead of creating DiagnosticReport/Observations on the EHR side, the LIS can notify the EHR of changes to the Task, so that the EHR can GET the results (and expose the EHR version in separate resources). This way the EHR can be (mostly) read-only from the CRUD perspective, while the LIS only needs to allow CRU for the Task resource.</li>\n</ol>",
        "id": 218353777,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1606774343
    },
    {
        "content": "<p>Sending a ServiceRequest is a possibility, though you need to put a tag on it that says \"action this\".  Posting a ServiceRequest alone doesn't imply that the recipient needs to act on it.  There are lots of reasons to share a ServiceRequest as an FYI.</p>",
        "id": 218355519,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1606775252
    },
    {
        "content": "<p>The workflow section in the spec covers all the different ways you can say \"please do this\" and their various pros and cons.  A bare ServiceRequest is one of the options there, but be sure you understand all the cons and the necessity of adding the 'action' tag.</p>",
        "id": 218355674,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1606775324
    },
    {
        "content": "<p>The term enrollment has a variety of meanings depending upon context. Financial Management created the stub of this resource to address enrollment in insurance plans, but this resource could be generalized to address other 'enrollment' activities as well. Please join the conference calls Tuesdays at 11 Eastern at <a href=\"https://us02web.zoom.us/j/82031005986\">https://us02web.zoom.us/j/82031005986</a>     Passcode: 098894.</p>",
        "id": 218868697,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1607104688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span> thanks for the heads up - unfortunately that'd be my 5am so won't be able to join. What would be the best way to follow up offline? Here on Zulip or on Confluence / Jira?</p>",
        "id": 218923495,
        "sender_full_name": "Koray Atalag",
        "timestamp": 1607153370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"200498\">@Brendan Keeler</span> In many cases, I also like the ServiceRequest push model rather than the Task based model.  The task model <em>assumes</em> that the pushing system knows which external parties should be acting on the ServiceRequest.  In my experience, very of then the knowledge of which system is responsible for what actions based on a ServiceRequest is just organization knowledge and is codified in a routing layer.  The EHR system (for example) that is sending out the ORM/ServiceRequest may not (in general) know which parties will be acting on it.</p>",
        "id": 219082706,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607349700
    },
    {
        "content": "<p>Using Task and ServiceRequest adds a tight coupling between the request for something to be done, and the workflow for doing it.  I think there are different opinions on on whether that tight coupling is good or bad.</p>",
        "id": 219082829,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607349752
    },
    {
        "content": "<p>I personally prefer the loose coupling.  EHRs aren't generally going to know all the systems in an enterprise that want to know about a ServiceRequest and do something when an order is placed.  The lab system usually has tight integration, so maybe the EHR and Lab are tightly coordinated, but you also have infection control systems, data warehouses, back-end CDS services, care management, HIEs, etc.  The HL7 decoupled model is nice because the EHR system doesn't have to be aware of all the systems that need to know about something, you can have a separate routing layer that has that knowledge.  If you move that knowledge in to the EHR, then either 1) you have to duplicate that routing logic for other content that isn't sourced from the EHR or 2) make every system in your enterprise aware of every other system that needs to know about stuff.</p>",
        "id": 219083338,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607350017
    },
    {
        "content": "<p>Or 3) you still have that intermediary doing the routing, they just have to spawn and track all the Tasks, which makes the routing layer a lot more complicated since it needs a stateful FHIR server.</p>",
        "id": 219083485,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607350090
    },
    {
        "content": "<p>Task-based doesn't presume the pushing system knows.  The Task might be stored on the placer system, and filler systems come along and query or subscribe and claim the Task.  Or they might be stored on an intermediary system and do the same.  Choosing to use ServiceRequest doesn't really change that, other than the 'source of truth' ServiceRequest should never be posted to anywhere other than the placer system.</p>\n<p>ServiceRequest alone is <em>just</em> an authorization.  It doesn't trigger any action unless there's a flag on it that says 'actionable'.  (In which case it needs to be posted to the filling system and should have an 'intent' of 'filler-order'.)</p>",
        "id": 219085103,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1607350938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/Enrollment/near/219085103\">said</a>:</p>\n<blockquote>\n<p>ServiceRequest alone is <em>just</em> an authorization.  It doesn't trigger any action unless there's a flag on it that says 'actionable'. </p>\n</blockquote>\n<p>Agree here.  I guess my opinion is that sending the authorization for the service is the thing that FHIR should be communicating across the wire.  What action is appropriate for that authorization is something a receiving system would determine for themselves upon receipt of the ServiceRequest.</p>",
        "id": 219089424,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607353001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/Enrollment/near/219085103\">said</a>:</p>\n<blockquote>\n<p>The Task might be stored on the placer system, and filler systems come along and query or subscribe and claim the Task.  Or they might be stored on an intermediary system and do the same.  </p>\n</blockquote>\n<p>This is the part I don't get.  How would the placer know all of the tasks that exist in an enterprise based on an authorization for a service?  The placer might know that the lab would be actually executing the test, but there are a lot of other tasks that an enterprise might be doing based on an authorization for a lab test.  It seems needlessly complicated to either have the placer manage all those, or have an intermediary (that formerly just did routing) manage all those.  Distributing the management/creation of Task to the filler systems seems like a much more flexible design, but in that case the Task could just be internal to the filler and isn't really part of the workflow, so it doesn't really need to be FHIR.</p>",
        "id": 219090086,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1607353317
    },
    {
        "content": "<p>The receiver of an authorization cannot safely determine what they should do.  There are lots of situations where authorizations get shared when there is <em>not</em> an expectation for the authorization to be acted on.  The presumption is that when an authorization is pushed, that it's an FYI unless there is a specific tag that indicates otherwise.  As well, if you don't have a Task, then there's no ability to say \"yes I will/no I won't\", communicate progress, etc.</p>",
        "id": 219096986,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1607356376
    },
    {
        "content": "<p>There <em>always</em> needs to be something beyond just the base Task that says 'please fulfill'.  The workflow section of the spec describes the options (setting a tag, calling an operation, sending a message or using Task).  If you're sticking with pure REST, then your choices are 'tag' or Task.  And 'tag' is pretty limited in what you can accomplish.  It's essentially a \"toss it over the wall, presume it'll be acted on, and hope a result/set of results get tossed back over the wall.</p>",
        "id": 219097220,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1607356502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191420\">@Koray Atalag</span> <br>\nKoray, we've added your JIRA Ticket 22812 to the MAY WGM Friday Q4 session.<br>\nFMWG Co-Chairs</p>",
        "id": 238666953,
        "sender_full_name": "MaryKay McDaniel",
        "timestamp": 1620933477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191884\">MaryKay McDaniel</span> <a href=\"#narrow/stream/179166-implementers/topic/Enrollment/near/238666953\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"191420\">Koray Atalag</span> <br>\nKoray, we've added your JIRA Ticket 22812 to the MAY WGM Friday Q4 session.<br>\nFMWG Co-Chairs</p>\n</blockquote>\n<p>Sorry I seem to have missed this - what was the resolution?</p>",
        "id": 244511816,
        "sender_full_name": "Koray Atalag",
        "timestamp": 1625106264
    },
    {
        "content": "<p>Following...we had a similar need. I'd raised it with the task group- <a href=\"#narrow/stream/179166-implementers/topic/Existing.20valuesets.20for.20Patient.20Portal.20enrollment.20status\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Existing.20valuesets.20for.20Patient.20Portal.20enrollment.20status</a>. We went ahead and used the EnrollmentRequest/Response to implement it- even though it's a stub state. I know- we probably broke a few rules here, but it fit our use case really well! In DSTU2, this resource was more generic.</p>",
        "id": 249781539,
        "sender_full_name": "Priya Mathew",
        "timestamp": 1629235802
    }
]