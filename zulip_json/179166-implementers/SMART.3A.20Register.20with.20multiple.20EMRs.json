[
    {
        "content": "<p>In the SMART Simple authorization app here:<br>\n<a href=\"http://docs.smarthealthit.org/tutorials/authorization/\" target=\"_blank\" title=\"http://docs.smarthealthit.org/tutorials/authorization/\">http://docs.smarthealthit.org/tutorials/authorization/</a> </p>\n<p>And in the Cerner Sandbox tutorial here:<br>\n<a href=\"http://engineering.cerner.com/smart-on-fhir-tutorial/\" target=\"_blank\" title=\"http://engineering.cerner.com/smart-on-fhir-tutorial/\">http://engineering.cerner.com/smart-on-fhir-tutorial/</a> </p>\n<p>There is a step in the process of making a SMART application that requires the application to be registered with the EHR.  The EHR then provides an application id.  This application id is then hardcoded into the redirect page:</p>\n<div class=\"codehilite\"><pre><span></span>&lt;script&gt;\n  FHIR.oauth2.authorize({\n    &#39;client_id&#39;: &#39;d6b5406a-fb9e-439e-987e-d1afd0c5ee2c&#39;,\n    &#39;scope&#39;:  &#39;patient/Patient.read patient/Observation.read launch online_access openid profile&#39;\n  });\n&lt;/script&gt;\n</pre></div>\n\n\n<p>This seems to limit the application to a single EHR vendor that is hardcoded (or require the SMART application to maintain some sort of map of registered EHRs and client_id values).  </p>\n<p>Is there a standard way to allow a SMART application to be registered with multiple EHR endpoints?  Is there a standard way I can add the application I created for the Cerner sandbox to also use the SMART sandbox at <a href=\"https://sandbox.smarthealthit.org/smartdstu2#/manage-apps\" target=\"_blank\" title=\"https://sandbox.smarthealthit.org/smartdstu2#/manage-apps\">https://sandbox.smarthealthit.org/smartdstu2#/manage-apps</a>?  </p>\n<p>What have others done in the past?</p>",
        "id": 153941752,
        "sender_full_name": "John Martin",
        "timestamp": 1519995786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span></p>",
        "id": 153941776,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1520003165
    },
    {
        "content": "<p>In general you'll need a map of clients IDs, and you'd look up an entry bases on the launch issuer. <span class=\"user-mention\" data-user-id=\"191355\">@Kevin Shekleton</span> <span class=\"user-mention\" data-user-id=\"191356\">@Jenni Syed</span>  do you agree it'd make sense to generalize this example?</p>",
        "id": 153941777,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1520003249
    },
    {
        "content": "<p>Sure, generalizing this would be fine. The SMART tutorial we wrote here at Cerner is open source and we would love any PRs to improve it! <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 153941789,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1520005485
    },
    {
        "content": "<p>Also, the tutorial we wrote isn't intended to be used as production code which is why we kept it as simple as possible. With that being said, I realize that most people start from some example code snippet and use that as the basis for their production apps (I see that all the time)</p>",
        "id": 153941790,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1520005869
    },
    {
        "content": "<p>In production, you definitely would need to map client ids to launch issuers</p>",
        "id": 153941791,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1520005902
    },
    {
        "content": "<p>I have a similar-ish question, In my SMART app I want to map <br>\na) users from and EMR to their existing accounts in my application<br>\nb) patients in an EMR to corresponding information about that patient in my application (i.e.,  Lookup of the status of referrals in a SMART app for a patient that were previously submitted via a SMART app)</p>\n<p>What approaches have people taken to do this, my current thought is as follows</p>\n<p>For a), look up the in-context user data launching the SMART app, and in conjunction with a registered app ClientID map the user to an existing user in my application?<br>\nI thought that perhaps also when the user launches my SMART app for the first time, it could include a step when they open the window to ask for the user's credentials in my application, and then save the in-context user info in conjunction with the Client ID so that they don't need to enter their credentials to my application the second time.</p>\n<p>for b), user the EMR supplied patient ID, and in conjunction with the client ID, map to the patient data saved in my application.</p>\n<p>Are there others show have experienced similar processes?</p>",
        "id": 153941800,
        "sender_full_name": "Tim Berezny",
        "timestamp": 1520014968
    },
    {
        "content": "<p>The trick is how to assure that the electronic user identity is indeed that which is know as the patient identity. Once you get this confirmed, then it is just a mapping as you have identified (provided stable identity pools).  I have a short article on this <a href=\"https://healthcaresecprivacy.blogspot.com/2016/02/patient-as-user-becoming-known-to.html\" target=\"_blank\" title=\"https://healthcaresecprivacy.blogspot.com/2016/02/patient-as-user-becoming-known-to.html\">https://healthcaresecprivacy.blogspot.com/2016/02/patient-as-user-becoming-known-to.html</a></p>",
        "id": 153941804,
        "sender_full_name": "John Moehrke",
        "timestamp": 1520016603
    },
    {
        "content": "<p>Also</p>\n<p>On this page:<br>\n<a href=\"http://docs.smarthealthit.org/tutorials/server-quick-start/\" target=\"_blank\" title=\"http://docs.smarthealthit.org/tutorials/server-quick-start/\">http://docs.smarthealthit.org/tutorials/server-quick-start/</a> </p>\n<p>The link for \"SMART on FHIR Authorization protocols\" (<a href=\"http://docs.smarthealthit.org/authorization/public\" target=\"_blank\" title=\"http://docs.smarthealthit.org/authorization/public\">http://docs.smarthealthit.org/authorization/public</a>) in the paragraph shown below seems to be broken:</p>\n<p>Once you’ve implemented the SMART on FHIR Authorization protocols, you can wire up your “launch” button to launch the app in production mode (with authorization) by completing the following sequence:</p>",
        "id": 153941805,
        "sender_full_name": "John Martin",
        "timestamp": 1520017128
    },
    {
        "content": "<p>Also...</p>\n<p>Does someone have an answer for this question on stackoverflow?<br>\n<a href=\"https://stackoverflow.com/questions/49057210/in-a-smart-fhir-application-can-the-application-authenticate-the-ehr\" target=\"_blank\" title=\"https://stackoverflow.com/questions/49057210/in-a-smart-fhir-application-can-the-application-authenticate-the-ehr\">https://stackoverflow.com/questions/49057210/in-a-smart-fhir-application-can-the-application-authenticate-the-ehr</a> </p>\n<p>Thanks</p>",
        "id": 153941811,
        "sender_full_name": "John Martin",
        "timestamp": 1520019071
    },
    {
        "content": "<p>Responded to the Stackoverflow question.</p>",
        "id": 153941861,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1520033407
    },
    {
        "content": "<p><a href=\"https://github.com/smart-on-fhir/smart-on-fhir.github.io/commit/49de3d31116328a32c8354e082d574189b2e2a9a#diff-2ed410309a14b83097890c3c6d9fdf74\" target=\"_blank\" title=\"https://github.com/smart-on-fhir/smart-on-fhir.github.io/commit/49de3d31116328a32c8354e082d574189b2e2a9a#diff-2ed410309a14b83097890c3c6d9fdf74\">Fixed</a> broken link</p>",
        "id": 153941862,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1520033458
    },
    {
        "content": "<p>Josh - you get a signed openid token too- isn't that a verification point?</p>",
        "id": 153941872,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520035563
    },
    {
        "content": "<p>The openid token comes after the launch is complete -- yes, that's signed and non-repudiable. But as far as just authenticating: the entire token response comes from the TLS-protected EHR authorization server, so should fit the bill.</p>",
        "id": 153941907,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1520052585
    },
    {
        "content": "<p>On <span class=\"user-mention\" data-user-id=\"193959\">@Tim Berezny</span>'s question, there are a few ways to skin this:</p>\n<p>1. Pure relying party.  Allow users to sign into your app via OIDC, where the SMART EHR acts as an ID provider.<br>\n2. Hybrid. Allow users to create accounts within your app using their own credentials (e.g., username + password) and allow each account to be associated with 0..* EHR-supplied IDs. This requires some setup the first time for each user, but after that point users can sign in with an EHR account or with credentials you supply.</p>",
        "id": 153941908,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1520052684
    }
]