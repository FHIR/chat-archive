[
    {
        "content": "<p>I'm looking at <a href=\"http://hl7.org/fhir/STU3/datatypes.html#date\" target=\"_blank\" title=\"http://hl7.org/fhir/STU3/datatypes.html#date\">hl7.org/fhir/STU3/datatypes.html#date</a> <br>\nThe Regex for date: -?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)? allows the following<br>\n000<br>\n0000-01<br>\n0000-01-00<br>\nbut prohibits<br>\n0000-00-00<br>\nWhy allow 00 for day but not for month?</p>",
        "id": 153897600,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1500616415
    },
    {
        "content": "<p>dateTime is the same.</p>",
        "id": 153897601,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1500616453
    },
    {
        "content": "<p>how does it allow 000?</p>",
        "id": 153897756,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500672460
    },
    {
        "content": "<p>allowing 00 for the day is an oversight</p>",
        "id": 153897757,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500672498
    },
    {
        "content": "<p>[0-9]{4} allows 0000</p>",
        "id": 153897807,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1500858902
    },
    {
        "content": "<p><a href=\"http://www.freeformatter.com/regex-tester.html\" target=\"_blank\" title=\"http://www.freeformatter.com/regex-tester.html\">http://www.freeformatter.com/regex-tester.html</a> processes it that way.</p>",
        "id": 153897808,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1500858932
    },
    {
        "content": "<p>ok. it does allow 0000 (but not 000). I don't think it's worth complicating the regular expression enough to prohibit 0000 as a year</p>",
        "id": 153897809,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500859005
    },
    {
        "content": "<p>Oops, I meant 0000. :)</p>",
        "id": 153897810,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1500859058
    },
    {
        "content": "<p>Allowing a year 0000 permits 0000-12-31 for birthday is 31st of December, but year of birth is unknown. Is that intended?</p>",
        "id": 153897811,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1500859168
    },
    {
        "content": "<p>no that would be wrong</p>",
        "id": 153897812,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500859185
    },
    {
        "content": "<p>Prohibiting 9999-12-00 can be done with<br>\n -?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?</p>",
        "id": 153897813,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1500859664
    },
    {
        "content": "<p>Replacing <code>[0-9]{4}</code> with <code>[0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000</code> should prevent a year of 0000</p>",
        "id": 153897815,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1500861899
    },
    {
        "content": "<p>Issue <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13684\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13684\">#13684</a> created</p>",
        "id": 153897817,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1500862680
    },
    {
        "content": "<p>is that worth it is it?</p>",
        "id": 153897818,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500862742
    },
    {
        "content": "<p>That depends upon what the point of the Regex expression is. <br>\nIt is so nasty to read that making it worse does not seem to be much of a problem.<br>\nMaking it exact means it could be used to validate dates or generate validations.</p>",
        "id": 153897858,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1500871301
    },
    {
        "content": "<p>For describing what strings <code>date</code> allows, examples are easier for casual readers than a Regex</p>",
        "id": 153897859,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1500871394
    },
    {
        "content": "<p>There's a limit to how exact it can be.  If we wanted to be wild and crazy, we could factor in leap years too.  The existing structure makes clear that month comes before day and communicates the syntax.  That plus \"and must be a valid date\" is all that's needed.</p>",
        "id": 153897951,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1500917342
    },
    {
        "content": "<p>leap-seconds are important... make sure you can process a 'second' indicator that is 0-60; not just 0-59</p>",
        "id": 153897957,
        "sender_full_name": "John Moehrke",
        "timestamp": 1500919104
    },
    {
        "content": "<p>can you make a task, because we don't.</p>",
        "id": 153897958,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500919240
    },
    {
        "content": "<p>done <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13685\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13685\">GF#13685</a></p>",
        "id": 153897959,
        "sender_full_name": "John Moehrke",
        "timestamp": 1500919541
    },
    {
        "content": "<p>thanks</p>",
        "id": 153897960,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500919557
    }
]