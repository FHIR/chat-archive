[
    {
        "content": "<p>What do people think about adding a property to CapabilityStatement.rest.operation for representing whether the server fully supports the operation. In the case of the $expand operation, it is common for servers to support GET /ValueSet/[id]/$expand, but not very common for servers to support POST /ValueSet/$expand. There is no way that I can see to determine if a server fully supports $expand or not based on the CapabilityStatement.</p>",
        "id": 153932058,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517162103
    },
    {
        "content": "<p>Not sure what the additional property would look like... but, I think <em>something</em> more is needed.</p>",
        "id": 153932059,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517162129
    },
    {
        "content": "<p>Should be an element or extension of opdef not the cs  just like profiles</p>",
        "id": 153932743,
        "sender_full_name": "Eric Haas",
        "timestamp": 1517214041
    },
    {
        "content": "<p>yes it is a property of OperationDefinition</p>",
        "id": 153932800,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517234357
    },
    {
        "content": "<p>Can I use that to determine the behavior of a particular server?</p>",
        "id": 153932816,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1517235407
    },
    {
        "content": "<p>you're supposed to be able to  - but it's up to the server</p>",
        "id": 153932817,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517235432
    },
    {
        "content": "<p>in this case, does the server list valueSet as a possible parameter</p>",
        "id": 153932818,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517235454
    },
    {
        "content": "<p>a lot of the terminology servers I hit (I believe) didn't even implement OperationDefinition</p>",
        "id": 153932866,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517239422
    },
    {
        "content": "<p>they just reference the core ValueSet-expand operation definition from <a href=\"http://hl7.org/fhir\" target=\"_blank\" title=\"http://hl7.org/fhir\">http://hl7.org/fhir</a></p>",
        "id": 153932867,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517239439
    },
    {
        "content": "<p>i reference those because I implement those</p>",
        "id": 153932873,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517239604
    },
    {
        "content": "<p>yes, you do... but few others do</p>",
        "id": 153932880,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517239823
    },
    {
        "content": "<p>Um... There is currently no parameter on OD to define this.   I will create a tracker but wondering if propose it should be an extension or element.</p>",
        "id": 153932931,
        "sender_full_name": "Eric Haas",
        "timestamp": 1517243740
    },
    {
        "content": "<p>to define what?</p>",
        "id": 153932945,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517245625
    },
    {
        "content": "<p>whether use GET or POST or BOTH ( if you only have simple inputs case)</p>",
        "id": 153932953,
        "sender_full_name": "Eric Haas",
        "timestamp": 1517246181
    },
    {
        "content": "<p>OperationDefinition.affectsState</p>",
        "id": 153932954,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517246779
    },
    {
        "content": "<p>I think either we need to make it clear to terminology servers that they should support OperationDefinition, and they need to define their own version of the $expand OperationDefinition that represents their implementation, OR we should consider making changes to CapabilityStatement to make it easier for people to express their supported implementations of OperationDefinition</p>",
        "id": 153932999,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517249915
    },
    {
        "content": "<p>the intent is clearly the first. We moved this stuff into operationDefinition.</p>",
        "id": 153933000,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517249967
    },
    {
        "content": "<p>as it stands, I get the impression that terminology servers think it is enough to support /metadata (CapabilityStatement) and just reference core profiles... but, that doesn't seem to be the intent based on what you guys are saying</p>",
        "id": 153933001,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517249969
    },
    {
        "content": "<p>you can make it clear by complaining that they are not living up to their contract</p>",
        "id": 153933002,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517249982
    },
    {
        "content": "<p>it's very clearly not the intent</p>",
        "id": 153933003,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517249999
    },
    {
        "content": "<p>I'll bring it up with the terminology group</p>",
        "id": 153933004,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517250021
    },
    {
        "content": "<p>.affectState   does not answer the question.  That tells whether is Idempotent and you can <em>only</em> use POST as a result.  If you <em>may</em> use either a GET or  a POST then you should be able to specify it too.  agree?</p>",
        "id": 153933005,
        "sender_full_name": "Eric Haas",
        "timestamp": 1517250242
    },
    {
        "content": "<p>Mea culpa. I'll endeavor to implement this before C18. I suspect that it's not only terminology server implementers who are guilty.</p>",
        "id": 153933006,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1517250252
    },
    {
        "content": "<p>we are using operations the most</p>",
        "id": 153933007,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517250277
    },
    {
        "content": "<p>...and (some of) our operations are the most mature.</p>",
        "id": 153933008,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1517250376
    },
    {
        "content": "<p>So, assuming that this is specified in the referenced OperationDefinition resource for each rest.resource.operation element in the CapabilityStatement that is returned from the 'metadata' interaction, then I think this should work.</p>",
        "id": 153933009,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1517250423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> , the problem is that almost none of the terminology servers even support OperationDefinition resources. I tried GET /OperationDefinition on almost all terminology servers I played with, and got mixed error responses (most saying \"not supported\" in one way or another)</p>",
        "id": 153933010,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517250616
    },
    {
        "content": "<p>they can publish their operation definitions on a web site and reference thenm</p>",
        "id": 153933011,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517250977
    },
    {
        "content": "<p>... but besides saying its idempotent and hence you need to POST, there is no way to define whether you can use POST/GET/BOTH and I think that relates to Sean's original post.</p>",
        "id": 153933038,
        "sender_full_name": "Eric Haas",
        "timestamp": 1517257155
    },
    {
        "content": "<p>servers SHALL support post for all operations.</p>",
        "id": 153933039,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517257283
    },
    {
        "content": "<p>OK what about GET?</p>",
        "id": 153933040,
        "sender_full_name": "Eric Haas",
        "timestamp": 1517257436
    },
    {
        "content": "<p>shall support GET for affectsState=false</p>",
        "id": 153933041,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517257520
    },
    {
        "content": "<p>Thanks</p>",
        "id": 153933042,
        "sender_full_name": "Eric Haas",
        "timestamp": 1517257541
    },
    {
        "content": "<p>in the resource :<br>\n\"Operations that have affects state = false (see HTTP specification definition of idempotent ) may be invoked by performing an HTTP GET operation instead of a POST.\"  vs</p>\n<p>in Operations page:<br>\n\"If all the parameters for the operation are primitive types, and the operation has affectsState = false (see HTTP specification definition of idempotent ), the operation may be invoked by performing an HTTP GET operation where all of the values of the parameters are appended to the URL in the search portion of the URL (e.g. after the '?' character). Servers SHALL support this method of invocation. ...\"</p>\n<p>What if <em>some</em> of the parameters are primitive and you only send those.  MAY/SHALL the server support the GET method?</p>\n<p>And I can't find the bit about \"servers SHALL support post for all operations.\"</p>",
        "id": 153933064,
        "sender_full_name": "Eric Haas",
        "timestamp": 1517258290
    },
    {
        "content": "<p>yah... I can't find that bit either</p>",
        "id": 153933065,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517258554
    },
    {
        "content": "<p>this info should be more obvious, somewhere, I think</p>",
        "id": 153933066,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517258580
    },
    {
        "content": "<p>well, you can make a task asking for more clarity</p>",
        "id": 153933069,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517258684
    },
    {
        "content": "<p>server can support get if it makes sense to only send primitives</p>",
        "id": 153933070,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517258700
    },
    {
        "content": "<p>I'm formulating a GForge .... to clarify this</p>",
        "id": 153933072,
        "sender_full_name": "Eric Haas",
        "timestamp": 1517258719
    },
    {
        "content": "<p>I trust somewhere it says Server's SHALL support POST just can't find it</p>",
        "id": 153933076,
        "sender_full_name": "Eric Haas",
        "timestamp": 1517258760
    },
    {
        "content": "<p>In operationdefinition.html, I see this:<br>\nExecuting Operations and Named Queries: \"operations are executed by POSTing to a URL that is defined by the operation definition. \"</p>",
        "id": 153933077,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517258863
    },
    {
        "content": "<p>this kinda makes it sound like POST is <em>all</em> you can do</p>",
        "id": 153933078,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517258874
    },
    {
        "content": "<p>and I see no reference in there to \"GET\"</p>",
        "id": 153933079,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517258908
    },
    {
        "content": "<p><a href=\"http://www.hl7.org/fhir/operations.html\" target=\"_blank\" title=\"http://www.hl7.org/fhir/operations.html\">http://www.hl7.org/fhir/operations.html</a></p>",
        "id": 153933080,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517258958
    },
    {
        "content": "<p>there's some more in there</p>",
        "id": 153933082,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517258970
    },
    {
        "content": "<p>it focuses, again, on POST scenarios</p>",
        "id": 153933083,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517258979
    },
    {
        "content": "<p>with only a small note about GET</p>",
        "id": 153933084,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517258983
    },
    {
        "content": "<p>\"Some Operations with primitive input types and a single Resource output parameter named 'return' can be invoked using a GET directly, with parameters as HTTP URL parameters. In this case, the response is simply the resource that is the return value, with no Parameters resource. These kinds of usage are discussed further below.\"</p>",
        "id": 153933085,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517258989
    },
    {
        "content": "<p>I think we need a section here that makes it a bit more clear how GET vs. POST is used, and how servers should indicate conformance with GET vs. POST operations.</p>",
        "id": 153933087,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517259037
    },
    {
        "content": "<p>I'm not surprised.  I just replied to your email.</p>",
        "id": 153933101,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1517262345
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14960\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14960\">GF#14960</a>]</p>",
        "id": 153933228,
        "sender_full_name": "Eric Haas",
        "timestamp": 1517279751
    },
    {
        "content": "<p>Should server support GET /OperationDefinition/[id] if OperationDefinition profiles are already published on FHIR registry?</p>",
        "id": 153933696,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1517335470
    },
    {
        "content": "<p>FYI... this is my original gForge tracker regarding this: <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14670&amp;start=0\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14670&amp;start=0\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14670&amp;start=0</a><br>\n<span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> I mentioned your ticket in the comments of my ticket, as well.</p>",
        "id": 153933707,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517335532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191506\">@Yunwei Wang</span> , I'm not sure what you mean here... I'm unsure why the operation being published on FHIR registry would impact its implementation.</p>",
        "id": 153933712,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517335612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191505\">@Sean McIlvenna</span> I will clarify my question. Let's say I have a OperationDefinition instance called my-expand-op for $expand operation. I upload this to Simplifier and reference to it in my metedata. Do I still need to provide GET /OperationDefinition/my-expand-op endpoint? Because I can pointing to my metadata and say follow the link to get that operation definition from Simplifier.</p>",
        "id": 153933733,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1517335936
    },
    {
        "content": "<p>I'd expect OperationDefinition instances to be held on the relevant FHIR Server, not an external registry.</p>",
        "id": 153933741,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1517336021
    },
    {
        "content": "<p>While I treat OperationDefinition instance more like a profile based on base OperationDefinition than a regular resource instance.</p>",
        "id": 153933752,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1517336293
    },
    {
        "content": "<p>I view it more as an extension of the Capability Statement (or will when I actually implement it!)</p>",
        "id": 153933753,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1517336353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191506\">@Yunwei Wang</span> - it is perfectly valid to put your operation definition on an external registry and refer to it from your capability statement.</p>",
        "id": 153933761,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517337832
    },
    {
        "content": "<p>and if you do this, there is no need to support Get /OperationDefinition on your server</p>",
        "id": 153933762,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517337867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , <span class=\"user-mention\" data-user-id=\"191506\">@Yunwei Wang</span> <br>\nI mostly agree... However, I think you need to implement the operation definition exactly as defined on the external registry. Otherwise, you run into the same issue that I was discussing earlier about implementing $expand, but only supporting GET, and not supporting POST. In that case, there is no way to tell <em>how much</em> of the operation your server supports.<br>\nSo, as soon as your implementation deviates or doesn't fully implement the operation definition defined in the external registry, you should support GET /OperationDefinition with your customizations to the operation.</p>",
        "id": 153933774,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517341182
    },
    {
        "content": "<p>yes the external opdef has to describe your server. But presumably that's what Yunwei had in mind when he defined his own opdefs on the external server</p>",
        "id": 153933777,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517341338
    },
    {
        "content": "<p>agreed. just wanted to be very clear :)</p>",
        "id": 153933779,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517341369
    },
    {
        "content": "<blockquote>\n<p>and if you do this, there is no need to support Get /OperationDefinition on your server</p>\n</blockquote>\n<p>...just assume/hope/pray that the external registry does.</p>",
        "id": 153933789,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1517342174
    },
    {
        "content": "<p>my favourite kind of repository is the one that allows you to PUT/POST some content, but not GET it</p>",
        "id": 153933792,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1517342405
    },
    {
        "content": "<p>lol</p>",
        "id": 153933848,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1517347834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191364\">@Peter Jordan</span> Note that Ontoserver doesn't support SEARCH on OperationDefinition, but it does support READ on specific ids.  These are the ones referenced in the CapabilityStatement.  For example, GET <a href=\"http://ontoserver.csiro.au/stu3-latest/OperationDefinition/ValueSet--expand\" target=\"_blank\" title=\"http://ontoserver.csiro.au/stu3-latest/OperationDefinition/ValueSet--expand\">http://ontoserver.csiro.au/stu3-latest/OperationDefinition/ValueSet--expand</a> resolves, but GET <a href=\"http://ontoserver.csiro.au/stu3-latest/OperationDefinition\" target=\"_blank\" title=\"http://ontoserver.csiro.au/stu3-latest/OperationDefinition\">http://ontoserver.csiro.au/stu3-latest/OperationDefinition</a> does not</p>",
        "id": 153934105,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1517381409
    }
]