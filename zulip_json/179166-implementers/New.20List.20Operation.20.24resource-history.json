[
    {
        "content": "<p>One of the things we've been struggling with is getting histories for a subset of resource instances.<br>\nSomeone on a call today suggested could we introduce an operation on list e.g. <code>List/42/$resource-history</code> that will return the equivalent of the _history for each entry instance referenced in the list.<br>\nThis could then be used along with a subscription resource, and now we have a way of getting changes to a subset of data handled.<br>\nWe plan to use this for managing an internal \"black book\" of providers/organizations in a local system and sync the set with this.</p>",
        "id": 153936009,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518056564
    },
    {
        "content": "<p>Each client will maintain a list resource representing their local cached content</p>",
        "id": 153936028,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518056923
    },
    {
        "content": "<p>Think I'll implement this to see how it goes today</p>",
        "id": 153936858,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518382474
    },
    {
        "content": "<p>i meant to comment about this.... I didn't follow this, and particularly the issue of things falling out of scope</p>",
        "id": 153936937,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518463740
    },
    {
        "content": "<p>Not sure I get the falling out of scope you describe.<br>\nThe list is a set of references, so just remove items from the list if you don't want to get changes from them.</p>",
        "id": 153936994,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518476700
    },
    {
        "content": "<p>The list resource just contains the IDs of all the resources in my \"black book of resources\" that I care about updates to</p>",
        "id": 153936996,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518476735
    },
    {
        "content": "<p>but if something is removed from the list, that you already have updates for.... do you no longer care about it? then it comes back into the list? you don't get updates for the time it wasn't in the list?</p>",
        "id": 153937050,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518513448
    },
    {
        "content": "<p>but this would be better done with the _list parameter,  not a new operation on List</p>",
        "id": 153937051,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518513479
    },
    {
        "content": "<p>The owner of the list is responsible for maintaining it, so you only remove the item from the list if you no longer care to receive updates for it.</p>",
        "id": 153937052,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518513548
    },
    {
        "content": "<p>Use case:<br>\n1. user does search for set of organizations<br>\n2. user selects some of them and saves them in their own internal system (may not be fhir)<br>\n3. user creates a list on the fhir server with this list of IDs<br>\n4. later the user asks if there have been updates to that list of resources<br>\n5. user updates own internal system with the changes<br>\n6. user no longer interested in a particular org, removes it from internal system<br>\n7. user removes the specific ID from the list</p>",
        "id": 153937054,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518513720
    },
    {
        "content": "<p>Hope this makes more sense as to how I was thinking it could be used.<br>\nServer doesn't remove things from the list, the user does.</p>",
        "id": 153937055,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518513761
    },
    {
        "content": "<p>and if they put it back in the list? there's no history for the time it wasn't in the list?</p>",
        "id": 153937056,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518513786
    },
    {
        "content": "<p>and you should still look at _list</p>",
        "id": 153937057,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518513798
    },
    {
        "content": "<p>if you put it back in the list, then I'd have expected that they would have grabbed it from a search to find it.</p>",
        "id": 153937058,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518513841
    },
    {
        "content": "<p>why wouldn't there be a history for when it wasn't in the list?</p>",
        "id": 153937059,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518514008
    },
    {
        "content": "<p>well, are you doing _since on the history? or just getting everything all the time?</p>",
        "id": 153937060,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518514028
    },
    {
        "content": "<p>I'm just expecting this to be the same as the resource type history, filtering to the ID values in the list</p>",
        "id": 153937061,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518514043
    },
    {
        "content": "<p>(and maybe across resource types, which would be a global history list - filtered to the list of IDs)</p>",
        "id": 153937062,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518514095
    },
    {
        "content": "<p>yes, do want _since</p>",
        "id": 153937063,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518514108
    },
    {
        "content": "<p>didn't we have a matching search param for _till? can't see it in the spec.</p>",
        "id": 153937064,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518514256
    },
    {
        "content": "<p>no no one has ever asked for it.</p>",
        "id": 153937065,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518514313
    },
    {
        "content": "<p>but if you're asking for _since since the last update, and something drops out of the list and then back in again, then there'll be a gap while it was out, since you don't fetch history during that gap. In fact, more generally, you won't get history for new things added to the list from before the last _since after they were addded</p>",
        "id": 153937067,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518514387
    },
    {
        "content": "<p>How can it drop into the list then out, its an ID.</p>",
        "id": 153937068,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518514441
    },
    {
        "content": "<p>Don't care about this history of the list resource itself.</p>",
        "id": 153937069,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518514522
    },
    {
        "content": "<p>implementation = [base]/_history?_list=List/42<br>\nThis could be another syntax for it (filter by resources identified in the selected list)<br>\n(not interested in the history of the list, just the current version-less references in the list)</p>",
        "id": 153937070,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518514704
    },
    {
        "content": "<p>I'm going to try again one last time....</p>",
        "id": 153937071,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518516389
    },
    {
        "content": "<p>I have resource X.<br>\nI add it to list 42. <br>\nI ask for history on everything in list 42 since Time T1. <br>\n  (I won't get any older history on X)<br>\nI ask for history on everything in list 42 since T2<br>\nI take it out of the list<br>\nI ask for history on everything in list 42 since Time T3. <br>\nI ask for history on everything in list 42 since Time T4. <br>\nI add it to list 42. <br>\nI ask for history on everything in list 42 since Time T15 <br>\n  (I won't get any older history on X)<br>\nI ask for history on everything in list 42 since T2</p>\n<p>So I have T1-T2 nnd T5 but not T3/4</p>",
        "id": 153937072,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518516753
    },
    {
        "content": "<p>I write a blog post on it trying to explain through examples</p>",
        "id": 153937090,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518520232
    },
    {
        "content": "<p>Consider this sequence of operations are called on a server</p>\n<div class=\"codehilite\"><pre><span></span>T1 PUT http://example.org/Patient/1 (v1)\nT2 PUT http://example.org/Patient/2 (v1)\nT3 PUT http://example.org/Patient/3 (v1)\nT4 PUT http://example.org/Patient/4 (v1)\nT5 DEL http://example.org/Patient/2 (v2)\nT6 PUT http://example.org/Patient/1 (v2)\nT7 PUT http://example.org/Patient/1 (v3)\nT8 DEL http://example.org/Patient/1 (v4)\n</pre></div>\n\n\n<p>Then if I have List/42 that contains <code>Patient/1</code> and <code>Patient/2</code><br>\nThe results of the operation would be</p>\n<div class=\"codehilite\"><pre><span></span>GET http://example.org/List/42/$resource-history\n&gt; T8 DEL http://example.org/Patient/1/_history/4\n&gt; T7 PUT http://example.org/Patient/1/_history/3\n&gt; T6 PUT http://example.org/Patient/1/_history/2\n&gt; T5 DEL http://example.org/Patient/2/_history/2\n&gt; T2 PUT http://example.org/Patient/2/_history/1\n &gt; T1 PUT http://example.org/Patient/1/_history/1\n</pre></div>\n\n\n<p>Then if I also include the _since option</p>\n<div class=\"codehilite\"><pre><span></span>GET http://example.org/List/42/$resource-history?_since=T6\n&gt; T8 DEL http://example.org/Patient/1/_history/4\n&gt; T7 PUT http://example.org/Patient/1/_history/3\n&gt; T6 PUT http://example.org/Patient/1/_history/2\n</pre></div>",
        "id": 153937092,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518522321
    },
    {
        "content": "<p>In this example, doesnt matter when the entries were added or removed from the list, this $resource-history isn't reflecting that.</p>",
        "id": 153937093,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518522377
    },
    {
        "content": "<p><a href=\"https://wordpress.com/post/brianpos.com/348\" target=\"_blank\" title=\"https://wordpress.com/post/brianpos.com/348\">https://wordpress.com/post/brianpos.com/348</a></p>",
        "id": 153937094,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518523103
    },
    {
        "content": "<p>I think you're saying that the back history doesn't matter. But it's the _since that's at issue - you don't get the current state of Patient/2</p>",
        "id": 153937216,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518552545
    },
    {
        "content": "<p>It's the history of the resource, i thought the example does this, where patient/1 gets multiple value in the returned bundle</p>",
        "id": 153937223,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518554236
    },
    {
        "content": "<p>You don't get the current patient/2 as it hadn't changed, so i don't want to know about it. I already have that value from a previous call. Same as using Patient/_history</p>",
        "id": 153937226,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518554482
    },
    {
        "content": "<p>+1 for ?_list=List/42 instead of $resource-history. I would not mind implementing other search parameters on _history either.</p>",
        "id": 153937450,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1518634504
    },
    {
        "content": "<p>Update on this one, I've put an experimental implementation of this in my server.<br>\nIts now just simply the <code>_list=42</code> syntax on the regular _history operation<br>\nAnd it works a charm, and was super easy to implement<br>\n(in my case a simple join on the results to the references in the list)<br>\nA working example from my server:</p>\n<div class=\"codehilite\"><pre><span></span>http://sqlonfhir-stu3.azurewebsites.net/fhir/Patient/_history?_list=42\n</pre></div>",
        "id": 153954359,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1524692671
    },
    {
        "content": "<p>what does this do again?</p>",
        "id": 153954362,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1524692904
    },
    {
        "content": "<p>Permits you to filter the resources coming through the _history</p>",
        "id": 153954363,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1524693144
    },
    {
        "content": "<p>We plan to use it for managing synchronising local addressbooks.</p>",
        "id": 153954364,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1524693163
    },
    {
        "content": "<p>User registers a List resource instance with references to all the resources that they have in their local addressbook (say 100 resources out of 100k).<br>\nThen can use the <code>Practitioner/_history?_list=42</code>  to be able to detect when changes happen to the resources I have cloned locally.</p>",
        "id": 153954366,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1524693295
    },
    {
        "content": "<p>Makes the volume of data processed much smaller on client, and server</p>",
        "id": 153954367,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1524693343
    },
    {
        "content": "<p>But with overhead of maintaining the List resource</p>",
        "id": 153954368,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1524693374
    },
    {
        "content": "<p>(Added tracker #16022)</p>",
        "id": 153954372,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1524693633
    }
]