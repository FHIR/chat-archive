[
    {
        "content": "<p>Somewhat theoretical question, when we talk about canonical references, should resource type be implicitly or explicitly provided? When I'm asking some registry to resolve canonical resource, I have three options:</p>\n<ol>\n<li>I can explicitly tell the registry type of the resource I am looking for.</li>\n<li>Resource type be implicitly inferred from the reference itself. For example, <code>http://hl7.org/fhir/StructureDefinition/Patient</code> implies <code>StructureDefinition</code>.</li>\n<li>Registry can resolve any canonical resource without even knowing its type (and then I can validate I found type I wanted).</li>\n</ol>\n<p>So far in APIs I've been building (both internal and external), I sort of assumed #1: you ask registry to resolve resource and you give it both canonical reference and resource type as well.</p>\n<p>#2 I don't think is correct, primarily due to <a href=\"https://www.hl7.org/fhir/references.html#canonical-fragments\">\"fragmented\" canonical references</a>. <br>\nFor example, <code>http://fhir.example/CodeSystem/seasons#full-valueset</code> could be a <code>ValueSet</code> stored inside <code>CodeSystem</code>, but you cannot tell it is <code>ValueSet</code> from looking just at the URI alone. Also, what about non-URL references, like <code>urn:uuid:5f82d9e2-8e84-4916-a9e7-3b7abf64720d</code>? Is that okay to have such a canonical reference (say, for testing purposes)? </p>\n<p>At the same time, I saw systems rejecting canonical references if they cannot parse resource type from it (<a href=\"https://launch.smarthealthit.org/\">https://launch.smarthealthit.org/</a> is one such system, it wanted to parse my <code>QuestionnaireResponse.questionnaire</code> reference). My interpretation is that this is not correct behavior, though.</p>\n<p>Lately, I'm starting to think that maybe #3 is the correct model: canonical reference is supposed to be globally unique, and registry should be able to search resource of any type (then maybe validate that type it found is what client expected).</p>\n<p>However, #3 cannot be expressed in FHIR search API if resource type is not explicitly known: you cannot do <code>?url=&lt;url&gt;</code> as <code>url</code> is not defined for <code>Resource</code>. Even in R5 where we have an explicit <code>CanonicalResource</code>, I don't think one can search it via <code>CanonicalResource?url=&lt;url&gt;</code>.</p>\n<p>To workaround this, so far I've been using pattern like <code>?_type=StructureDefinition,&lt;list every possible canonical resource&gt;&amp;url=&lt;url&gt;</code>, for looking up canonical resource without knowing its type, but it probably won't work for every FHIR server (I so happened to have FHIR servers I have control over, so wasn't an issue).</p>\n<p>#1 also has issues with fragmented canonical references and FHIR search API as well: you either have to search for contained resource like <code>ValueSet?url=&lt;reference with fragment&gt;</code> (<a href=\"#narrow/stream/179166-implementers/topic/Searching.20by.20canonical.20URI.20with.20a.20fragment\">see this topic for the context</a>) or you have to search for its container without knowing its type: <code>?url=&lt;reference with fragment stripped&gt;</code> so you can later get the contained resource.</p>",
        "id": 220178623,
        "sender_full_name": "Ivan Dubrov",
        "timestamp": 1608155795
    },
    {
        "content": "<p>AFAIK it's #3 ; the recommendation / best practice is to include the resource type, but that's not a requirement.</p>",
        "id": 220216074,
        "sender_full_name": "Ren√© Spronk",
        "timestamp": 1608192636
    }
]