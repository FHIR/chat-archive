[
    {
        "content": "<p>I was digging into why a Patient compartment search was not working for AuditEvent search, on a server implementation, this search:<br>\n<code>[base]/Patient/FCC-PAT-00001/AuditEvent</code> where I knew I had an AuditEvent for this patient 'FCC-PAT-00001'<br>\nIt turned out that the 'patient' search parameter was never being indexed based on the FHIR path expression for the search parameter. That Search parameter being  'patient' on the AuditEvent resource. The expression in the FHIR R4 spec definitions.xml file  SearchParameters  resource for this parameter was this:<br>\nExpression = <code>AuditEvent.agent.who.where(resolve() is Patient) | AuditEvent.entity.what.where(resolve() is Patient)</code><br>\nIn the FHIR .NET API that expression fails on 'resolve()'. I'm no FHIR path expert but I think 'resolve()' means got get the resource the ResourceReference points to. That's never going to happen in this context, well not for me.  I feel that the expression should be this, which then works for me .<br>\nExpression = <code>AuditEvent.entity.what.where(reference.startsWith('Patient')) | AuditEvent.agent.who.where(reference.startsWith('Patient'))</code><br>\nDoes anyone else agree with me that the currect expression in the R4 Spec is wrong? It can be found here: <a href=\"http://hl7.org/fhir/2018Sep/auditevent.html#search\" target=\"_blank\" title=\"http://hl7.org/fhir/2018Sep/auditevent.html#search\">http://hl7.org/fhir/2018Sep/auditevent.html#search</a></p>",
        "id": 153997306,
        "sender_full_name": "Angus Millar",
        "timestamp": 1537176169
    },
    {
        "content": "<p>not it's not wrong. I understand why you don't like it, but the change you propose would only be right if only local references are allowed</p>",
        "id": 153997312,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1537176343
    },
    {
        "content": "<p>we've actually removed this in R4</p>",
        "id": 153997313,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1537176355
    },
    {
        "content": "<blockquote>\n<p>not it's not wrong. I understand why you don't like it, but the change you propose would only be right if only local references are allowed</p>\n</blockquote>\n<p>Humm, good point did not think of that. Still, don't understand how it works as it is though.</p>\n<p>Actualy I now feel the issue lies with the .NET R4 FHIR Path expression implementation. The FHIR Path spec says this for resolve():<br>\n\"The items in the collection may also represent a Reference, in which case the Reference.reference is resolved.\"<br>\nThat appears to not happen.</p>",
        "id": 153997322,
        "sender_full_name": "Angus Millar",
        "timestamp": 1537176646
    },
    {
        "content": "<p>then you can make a task but I think actually it is implemented but you need to implement some kind of service (<span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> )</p>",
        "id": 153997341,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1537187213
    },
    {
        "content": "<p>I'm not sure on that one.</p>",
        "id": 153997342,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1537187443
    },
    {
        "content": "<p>In my server I'm going to be reprocessing those specific fhirpath queries with specific code so that it dowant actually resolve, but checks that it is a patient reference.</p>",
        "id": 153997344,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1537187498
    },
    {
        "content": "<p>Haven't done it yet though</p>",
        "id": 153997345,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1537187528
    },
    {
        "content": "<p>Well it is a little ugly but I can't see how it will fail unless someone creates a server base with '/Patient/' within. So I chnanged the expression to this:<br>\nExpression = $\"AuditEvent.entity.what.where(reference.startsWith('Patient/') or reference.contains('/Patient/')) | AuditEvent.agent.who.where(reference.startsWith('Patient/') or reference.contains('/Patient/'))\";</p>",
        "id": 153997350,
        "sender_full_name": "Angus Millar",
        "timestamp": 1537189526
    },
    {
        "content": "<p>And don't need to hit the DB either,  and read the whole resource just to find out if it is a patient.</p>",
        "id": 153997351,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1537189903
    },
    {
        "content": "<p>Yeah exsactly ,that was what I never wanted to do and yet that older expression was implying that is what was to happen.</p>",
        "id": 153997354,
        "sender_full_name": "Angus Millar",
        "timestamp": 1537192921
    },
    {
        "content": "<p>are the patterns intended to be literal? Or instructional? I expected a system could optimize the query parameters in many ways based on their technology.</p>",
        "id": 153997355,
        "sender_full_name": "John Moehrke",
        "timestamp": 1537193129
    },
    {
        "content": "<p>where is it that you see the specific language you have shown? In the AuditEvent there is only <code>  AuditEvent.agent.who.where(resolve() is Patient) | AuditEvent.entity.what.where(resolve() is Patient)</code></p>",
        "id": 153997356,
        "sender_full_name": "John Moehrke",
        "timestamp": 1537193287
    },
    {
        "content": "<p>I changed the FHIR Path in the specification, as you have posted, to a different FHIR Path expression for my use case as I posted.  The issue I have with the one in the spec is that it tries to resolve to a Patient resource instance rather than a ResourceReferance to a Patient resource. Given the expression is in  a SearchParameterDefinition Resource and that  search paramter is defined as a search type 'reference' I would personaly expect the FHIR Path expression to resolve to a ResourceReferance and not a Resource instance.</p>",
        "id": 153997360,
        "sender_full_name": "Angus Millar",
        "timestamp": 1537194605
    },
    {
        "content": "<p>As a server implementation I expected the SearchParameterDefinition expressions to be literal as I process them programaticaly to create search indexes. Personaly I though that was the intent.</p>",
        "id": 153997361,
        "sender_full_name": "Angus Millar",
        "timestamp": 1537194744
    },
    {
        "content": "<p>I am happy to entertain an improvement submitted as a change request. You are likely correct in that this expression was written before Reference changed to include identifier... so I am not sure what would be a proper expression today. Happy to see recommendations.</p>",
        "id": 153997389,
        "sender_full_name": "John Moehrke",
        "timestamp": 1537196641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191391\">@Angus Millar</span> I'm confused by this:</p>",
        "id": 153997877,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1537318762
    },
    {
        "content": "<blockquote>\n<p>The issue I have with the one in the spec is that it tries to resolve to a Patient resource instance rather than a ResourceReferance to a Patient resource. Given the expression is in a SearchParameterDefinition Resource and that search paramter is defined as a search type 'reference' I would personaly expect the FHIR Path expression to resolve to a ResourceReferance and not a Resource instance</p>\n</blockquote>",
        "id": 153997878,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1537318773
    },
    {
        "content": "<p>it does</p>",
        "id": 153997879,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1537318775
    },
    {
        "content": "<p>resolve to a reference, that is. Unless you mean something different by \"ResourceReference\"</p>",
        "id": 153997880,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1537318804
    },
    {
        "content": "<p>Lookig again Graham you are correct, the <code>.where(resolve() is Patient)</code> portion should retun a Reference.reference as is stated by the FHIR Path specification for resolve() as below. So my root problem is that the .NET FHIR API FHIR Path is not handleing resolve for me as documented. I will try address that in the dotnet stream. </p>\n<div class=\"codehilite\"><pre><span></span>B.3.3. resolve() : collection\nFor each item in the collection, if it is a string, locate the target of the reference, and add it to the resulting collection. If the item is not a string, the item is ignored and nothing is added to the output collection.\n\nThe items in the collection may also represent a Reference, in which case the Reference.reference is resolved.\n\nIf fetching the resource fails, the failure message is added to the output collection.\n</pre></div>",
        "id": 153997891,
        "sender_full_name": "Angus Millar",
        "timestamp": 1537320272
    }
]