[
    {
        "content": "<p>I downloaded the <a href=\"http://hl7.org/fhir/R4/fhir-all-xsd.zip\" target=\"_blank\" title=\"http://hl7.org/fhir/R4/fhir-all-xsd.zip\">R4 schemas/schematrons</a> today. I found a number of technical errors that seem to stem from fhirPath conversions. Shouldn't these be fixed? I've added the existing Jira tracker items to them for as far as I could find them.</p>\n<ul>\n<li><a href=\"https://jira.hl7.org/browse/FHIR-13187\" target=\"_blank\" title=\"https://jira.hl7.org/browse/FHIR-13187\">dom-3</a> says <ul>\n<li>&lt;sch:assert test=\"not(exists(for $id in f:contained/<em>/f:id/@value return <strong>$contained</strong>[not(parent::</em>/descendant::f:reference/@value=concat('#', <strong>$contained</strong>/*/id/@value) or descendant::f:reference[@value='#'])]))\"&gt; but should be</li>\n<li>&lt;sch:assert test=\"not(exists(for $id in f:contained/<em>/f:id/@value return $id[not(parent::</em>/descendant::f:reference/@value=concat('#', $id/*/id/@value) or descendant::f:reference[@value='#'])]))\"&gt;</li>\n</ul>\n</li>\n<li>ppc-2, ppc-3, ppc4, ppc-5 have one closing ) too many, e.g<ul>\n<li>&lt;sch:assert test=\"exists(f:patient) or not(exists(f:scope/f:coding[f:system/@value='something' and f:code/@value='adr'])))\"&gt;ppc-4 should be</li>\n<li>&lt;sch:assert test=\"exists(f:patient) or not(exists(f:scope/f:coding[f:system/@value='something' and f:code/@value='adr']))\"&gt;ppc-4</li>\n</ul>\n</li>\n<li><a href=\"https://jira.hl7.org/browse/FHIR-25088\" target=\"_blank\" title=\"https://jira.hl7.org/browse/FHIR-25088\">trd-3</a> says<ul>\n<li>&lt;sch:assert test=\"((not(f:type/@value = 'named-event')) or name.exists()) and (not(f:type/@value = 'periodic') or timing.exists()) and (not(starts-with(f:type/@value, 'data-')) or data.exists())\"&gt; but should be</li>\n<li>&lt;sch:assert test=\"(not(f:type/@value = 'named-event') or exists(f:data)) and (not(f:type/@value = 'periodic') or exists(f:timing)) and (not(f:type[starts-with(@value, 'data-')]) or exists(f:data))\"&gt; </li>\n</ul>\n</li>\n<li><a href=\"https://jira.hl7.org/browse/FHIR-19968\" target=\"_blank\" title=\"https://jira.hl7.org/browse/FHIR-19968\">eld-19</a> says<ul>\n<li>&lt;sch:assert test=\"matches(path/@value, '[^\\s\\.,:;\\'&amp;amp;quot;\\/|?!@#$%&amp;amp;amp;*()\\[\\]{}]{1,64}(\\.[^\\s\\.,:;\\'&amp;amp;quot;\\/|?!@#$%&amp;amp;amp;*()\\[\\]{}]{1,64}(\\[x\\])?(\\:[^\\s\\.]+)?)*')\"&gt; but should be</li>\n<li>&lt;sch:assert test=\"matches(path/@value, '[^\\s\\.,:;''&amp;quot;\\/|?!@#$%&amp;amp;*()\\[\\]{}]{1,64}(\\.[^\\s\\.,:;''&amp;quot;\\/|?!@#$%&amp;amp;*()\\[\\]{}]{1,64}(\\[x\\])?(\\:[^\\s\\.]+)?)*')\"&gt;</li>\n</ul>\n</li>\n<li><a href=\"https://jira.hl7.org/browse/FHIR-17904\" target=\"_blank\" title=\"https://jira.hl7.org/browse/FHIR-17904\">inv-1</a> says<ul>\n<li>&lt;sch:assert test=\"(exists(f:resource) or exists(f:part) or exists(f:<em>[starts-with(local-name(.), 'value')])) and not(exists(f:</em>[starts-with(local-name(.), 'value')])) and exists(f:resource))) and not(exists(f:*[starts-with(local-name(.), 'value')])) and exists(f:part))) and not(exists(f:part) and exists(f:resource))\"&gt; but should be</li>\n<li>&lt;sch:assert test=\"count(f:part | f:*[starts-with(local-name(), 'value')] | f:resource) = 1\"&gt;</li>\n</ul>\n</li>\n</ul>",
        "id": 182378298,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1575313715
    },
    {
        "content": "<p>This raises several issues for me:</p>\n<ul>\n<li>Why only now are issues like this being raised? What is the minimum testing approach we should have?</li>\n</ul>\n<p>hmm. I was going to say that they are tested during the build, but that bit is currently turned off</p>\n<ul>\n<li>I really really don't want to do another technical correction. The last one took about 8 weeks of work to do - another one would be smaller, but I don't know how much smaller. We're still dealing with the last one. is there an alternative way to deal with this than another technical correction?</li>\n</ul>",
        "id": 182380571,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575315142
    },
    {
        "content": "<p>The schematrons seem to be present in just the zips for download? If so, could you just update that? Fixing the downloads for R4 does not fix any inherent fhirPath to xpath conversions yet though.</p>\n<p>It seems most people are on the JSON train so maybe (combined with validation being switched off apparently) that's why it went unnoticed?</p>",
        "id": 182381015,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1575315407
    },
    {
        "content": "<p>The schematron errors could have been caught by any tool that can either process them directly or after conversion to xslt. I noticed by running the validate option in oXygen on the folder.</p>",
        "id": 182381171,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1575315517
    },
    {
        "content": "<p>I don't think we're allowed to just fix stuff like that. I'd have to update all the structure definitions, and the package. I guess we just make the download available beside the spec,until we have other reasons for a technical correction? Subject for FMG...</p>",
        "id": 182381210,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575315546
    },
    {
        "content": "<p>Do the SDs have the schematron too? In any case it looks like all but the ppc things actually have approved issues that promise to fix them. I understand that fixing this comes with a cost.  I'm sorry to be the messenger. I hope that FMG can find a low impact solution.</p>",
        "id": 182381452,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1575315681
    },
    {
        "content": "<p>We could take the approach that HL7 often does for other specs, which is to publish an Erratum.  We could link to that from the home page of the spec and the erratum would list known errors and the corrections.  (In this case, a link to a corrected zip of schematrons.)</p>",
        "id": 182399622,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1575328383
    },
    {
        "content": "<p>that wouldn't be a technical correction?</p>",
        "id": 182400825,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575329490
    },
    {
        "content": "<p>Adding a pointer to an erratum?  I don't think so.  Can check with Austin or <span class=\"user-mention\" data-user-id=\"191808\">@Wayne Kubick</span></p>",
        "id": 182401929,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1575330525
    },
    {
        "content": "<p>I don't believe there's any real difference between a technical correction and an erratum, the former follow the same GOM process as for errata.  If I understand Lloyd's suggestion, we could just post an announcement of discovered errors with the schematrons with a link to the corrected zip file without changing the actual core spec.  That seems like a reasonable approach to ensure that implementers are getting the correct information without modifying the spec directly.</p>",
        "id": 182464965,
        "sender_full_name": "Wayne Kubick",
        "timestamp": 1575389692
    },
    {
        "content": "<p>Could we make a change to the home page that points to the erratum location?</p>",
        "id": 182475874,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1575395293
    }
]