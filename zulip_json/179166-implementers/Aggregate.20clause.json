[
    {
        "content": "<p>I am trying to test the aggregate clause in the Atom extension. I'm using the following code from the developer's guide:</p>\n<p>define \"FactorialOfFive\":<br>\n  ({ 1, 2, 3, 4, 5 }) Num<br>\n    aggregate Result starting 1: Result * Num </p>\n<p>This returns the original list ({ 1, 2, 3, 4, 5 }) instead of 120. </p>\n<p>It looks like the aggregate clause is a new feature of CQL 1.5. And, the atom extension lists CQL 1.5 in its dependencies. How do I know if this is a bug or hasn't truly been implemented yet?</p>\n<p>Thanks in advance.</p>",
        "id": 256086710,
        "sender_full_name": "Joel Montavon",
        "timestamp": 1633364505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span></p>",
        "id": 256088871,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633365140
    },
    {
        "content": "<p>Hi Joel!</p>\n<p>The cql-engine used by Atom doesn’t (yet) implement all of the 1.5 features. Aggregate is a missing one. There’s an issue tracking that here:</p>\n<p><a href=\"https://github.com/DBCG/cql_engine/issues/373\">https://github.com/DBCG/cql_engine/issues/373</a></p>",
        "id": 256167255,
        "sender_full_name": "JP",
        "timestamp": 1633401588
    },
    {
        "content": "<p>Asked this in a different channel but feel like it might be appropriate to ask on this thread. I'm trying to write a function similar to this:</p>\n<div class=\"codehilite\"><pre><span></span><code>define function AggregateFunction():\n  (expand Interval[1, 4]) C\n  aggregate S starting ({\n    A: null,\n    B: null,\n    C: null,\n    D: null\n  } as Tuple {\n    A Boolean,\n    B Boolean,\n    C Boolean,\n    D Boolean\n  }):\n  case\n    when C &gt; 1 then S.A is true\n    when C = 1 then S.B is true\n    when C &lt; 1 then S.C is true\n    when C = 0 then S.D is true\n    else S\n  end\n</code></pre></div>\n<p>But I'm getting this syntax error: <code>Expected an expression of type 'System.Boolean', but found an expression of type 'tuple of A: System.Boolean, B: System.Boolean, C: System.Boolean, D: System.Boolean'.</code> </p>\n<p>I thought that by specifying the starting value as the tuple the cql would expect the tuple as a response. Any help? Thoughts on what I'm getting wrong here?</p>",
        "id": 259544537,
        "sender_full_name": "Rebecca Green",
        "timestamp": 1635522926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span></p>",
        "id": 259559012,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1635529290
    },
    {
        "content": "<p>I think i understand the error. because I am returning a boolean and when with <code>S.A is true</code>. It seems that cql doesn't allow you do multiple thing after <code>then</code> ideally i would write <code>assign S.A to true then return S</code> but not sure that's possible.</p>",
        "id": 259566217,
        "sender_full_name": "Rebecca Green",
        "timestamp": 1635532616
    },
    {
        "content": "<p>Yes, the aggregate clause is letting you specify the accumulating expression, and optionally the starting expression. In this case you've specified the starting expression as a tuple { A: Any, B: Any, C: Any, D: Any }, so that determines the shape of the accumulator, and it's expecting the accumulating expression to return that same shape.</p>",
        "id": 259572273,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1635535713
    },
    {
        "content": "<p>In theory, a case expression could return a choice of all the types of all the <code>then</code> expressions and the <code>else</code> expression, but the translator takes the more conservative approach of using the type of the first case to determine the expression, and then seeing if there are implicit conversions to/from the type of all the conditions. So the case expression will do some promotion, but not a completely general choice like that, and it falls back to a type error on the else condition.</p>",
        "id": 259572518,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1635535833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"427685\">@Rebecca Green</span></p>",
        "id": 259572544,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1635535845
    },
    {
        "content": "<p>Thanks! That makes sense. Do you know if there's a way to update the value in the Tuple and return the Tuple itself  in one line? So for example that same code would look something like this: </p>\n<div class=\"codehilite\"><pre><span></span><code>define function AggregateFunction():\n  (expand Interval[1, 4]) C\n  aggregate S starting ({\n    A: null,\n    B: null,\n    C: null,\n    D: null\n  } as Tuple {\n    A Boolean,\n    B Boolean,\n    C Boolean,\n    D Boolean\n  }):\n  case\n    when C &gt; 1 then S.A is true return S\n    when C = 1 then S.B is true return S\n    when C &lt; 1 then S.C is true return S\n    when C = 0 then S.D is true return S\n    else S\n  end\n</code></pre></div>\n<p>That way I wouldn't get a Type error and could keep track of what conditions of have been updated.</p>",
        "id": 259573528,
        "sender_full_name": "Rebecca Green",
        "timestamp": 1635536380
    }
]