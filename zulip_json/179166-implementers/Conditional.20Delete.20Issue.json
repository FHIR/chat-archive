[
    {
        "content": "<p>Query about <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=8779\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=8779\">GF#8779</a>. The resolution this task proposes means that there will no longer be any way to find out whether you deleted something when you delete it </p>",
        "id": 153840420,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469143843
    },
    {
        "content": "<p>given the ferocity with which some implementers claimed that they needed to be able to do that, taking it away makes me nervous </p>",
        "id": 153840421,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469143870
    },
    {
        "content": "<p>the ask dispostion says \"Since this is a breaking change we will consult the community about this change.\" - well, I can't see that this happened anytime, so here you are... the community is being consulted</p>",
        "id": 153840422,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469143912
    },
    {
        "content": "<p>I'm not familiar with the issue so this may be off-beam, but shouldn't there be an AuditEvent?  If there was, then you know that the thing had been deleted.</p>",
        "id": 153840475,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469152676
    },
    {
        "content": "<p>The client doesn't necessarily have access to the audit log, nor do they want to query it to determine if their operation succeeded or not</p>",
        "id": 153840480,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1469153969
    },
    {
        "content": "<p>I'm unclear why the client would need to query the audit log to determine that.  The client should simply ask the server \"Did my operation succeed?\" and the server would use whatever means necessary, presumably including querying the audit log, to answer the question.</p>",
        "id": 153840488,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469157042
    },
    {
        "content": "<p>how does the client ask that? how do they refer to an operation when they ask that?</p>",
        "id": 153840492,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469157716
    },
    {
        "content": "<p>I don't know; <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> was the one who said they need to determine if the operation was successful or not.  If you need to know that, then you need to have a mechanism to ask the server if it was, not try to figure it out on your own.</p>",
        "id": 153840496,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469158100
    },
    {
        "content": "<p>right now, the server just tells you directly. That's being proposed to be removed</p>",
        "id": 153840498,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469158160
    },
    {
        "content": "<p>Then I would suggest you either do not do that or you provide a query operation that the client can use to ask about the operation after the fact; I definitely would not rely on clients being able to determine for themselves if an operation was successful or not.</p>",
        "id": 153840501,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469158417
    },
    {
        "content": "<p>I'll take that as a vote that you think that a client needs to be able to know </p>",
        "id": 153840517,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469164365
    },
    {
        "content": "<p>Not necessarily.  I don't really have enough experience with this to vote one way or another; I'm just saying the <strong>_if_</strong> you want the client to know, don't make them work it out for themselves.  Having said that, I find it hard to imagine that a 200 response would not be enough acknowledgement of success, but I'm not working with complex transactions.</p>",
        "id": 153840521,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469164819
    },
    {
        "content": "<p>Okay; so I just actually read the issue again, and I agree that the client does need to be able to know and that returning a 404 response is not really a good idea.  To my way of thinking, successfully deleting no records is still a success and it's more important to know that there was no failure than that there were no records deleted.  Of course, the response could contain a deletion count, but not sure how that might affect the specification.</p>",
        "id": 153840524,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469165348
    },
    {
        "content": "<p>So I support the resolution.</p>",
        "id": 153840525,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469165401
    },
    {
        "content": "<p>After reviewing the tracker item for this, I see that the resolution is to simply modify the returned response code in the specific case of a conditonal delete operation not matching any resources to now return a 204 (No Content) instead of the 404 (Not Found). This change provides consistent behavior with the delete operation when the resource to be deleted does not exist at all.</p>",
        "id": 153840552,
        "sender_full_name": "Richard Ettema",
        "timestamp": 1469192851
    },
    {
        "content": "<p>So, I also support the resolution.</p>",
        "id": 153840553,
        "sender_full_name": "Richard Ettema",
        "timestamp": 1469192860
    },
    {
        "content": "<p>ok, made the change</p>",
        "id": 153840758,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469345574
    },
    {
        "content": "<p>I just implemented Conditional delete alowing for the delete all the matching resources. But then I thought about the consequences of this operation and it got me worried. If a client sends delete operation such as <code>DELETE [base]/Patient</code> then all patient records will be deleted, sounds dangerous, it's only a slip away from GET all Patient resource. And even worse if some sends an incorrect search parameter i.e <code>DELETE [base]/Patient?identiphier=http://acme.org/patient|23</code> then the unknown search parameter will be ignored and once again all Patient resource deleted.<br>\nIn light of this, I want to implement conditional delete whereby zero search parameters or any unknown search parameters returns 412 - Precondition Failed. Does this sound fair?</p>",
        "id": 153857970,
        "sender_full_name": "Angus Millar",
        "timestamp": 1479729877
    },
    {
        "content": "<p>yes</p>",
        "id": 153858006,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479757949
    },
    {
        "content": "<p>Thanks Grahame</p>",
        "id": 153858046,
        "sender_full_name": "Angus Millar",
        "timestamp": 1479771104
    },
    {
        "content": "<p>While we're on the conditional subject, the spec is quiet on what should happen if the resource instance PUT to the conditional update has an id in it (and clashes with the one that comes back from the call)<br>\nShould I report a bad request (like I do when POST is used, or PUT without)</p>",
        "id": 153858191,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1479880421
    },
    {
        "content": "<p>that's changed; we should provide guidance, and it should be cosistent (ignore and overwrite)</p>",
        "id": 153858194,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479880646
    },
    {
        "content": "<p>So ignore rather than fail (like we do with a POST that has the Id inside)</p>",
        "id": 153858196,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1479880750
    },
    {
        "content": "<p>And with the delete, the spec is pretty clear that if your server only wants to permit single record conditional deletes, that's perfectly normal.</p>",
        "id": 153858199,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1479880813
    },
    {
        "content": "<p>(from the FHIR spec) Update PUT:<br>\nThe request body SHALL be a Resource with an id element that has an identical value to the [id] in the URL. If no id element is provided, or the value is wrong, the server SHALL respond with a HTTP 400 error code, and SHOULD provide an operation outcome identifying the issue.</p>\n<p>(from the FHIR spec) Create POST:<br>\nThe request body SHALL be a FHIR Resource. The resource does not need to have an id element (this is the one of the few case where a resource exists without an id element). If an id is provided, the server SHALL ignore it.</p>\n<p>Condition Update PUT:<br>\nSo when the resource does have and id and it does not match the located resource's id (located by search) we are in a 50/50 decision. Do we behave like a Create or like an Update. Create would ignore the id whereas Update would reject it. I would argue that a Condition Update should behave live an Update. A normal Create can ignore the id as there is no conflicting id's, yet Condition Update can detect the conflict in ids and should report it, not ignore it.</p>",
        "id": 153858206,
        "sender_full_name": "Angus Millar",
        "timestamp": 1479885365
    },
    {
        "content": "<p>+1 <span class=\"user-mention\" data-user-id=\"191391\">@Angus Millar</span> Update (conditional or otherwise) needs to be more conservative than Create</p>",
        "id": 153862645,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1481261750
    },
    {
        "content": "<p>This is how HAPI's server works by default FYI</p>",
        "id": 153862765,
        "sender_full_name": "James Agnew",
        "timestamp": 1481309668
    }
]