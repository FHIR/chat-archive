[
    {
        "content": "<p>working on the vitals profile and replacing some invariant with slicing and discovering that the nested slices like in <a href=\"http://build.fhir.org/bp.html\" target=\"_blank\" title=\"http://build.fhir.org/bp.html\">this profile</a></p>\n<p>cause the following error when validating instances...<br>\n\"Error in discriminator at Observation.component:foo2.code.coding: slicing found\"</p>\n<p>so is this a limitation of slicing or of the validator?</p>\n<p>my goal is have at one coding in one component to contain a code.</p>",
        "id": 153940043,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519362345
    },
    {
        "content": "<p>also one category to contain one coding with a fixed code and system  for Obs.category</p>\n<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  or <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  looking at past posts I'm guessing is not prohibited and is a validation issue.</p>",
        "id": 153940142,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519408244
    },
    {
        "content": "<p>Without seeing the spreadsheet, it's hard to know what you're doing.</p>",
        "id": 153940144,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1519408542
    },
    {
        "content": "<p>here you go and thanks  ( this is not the vitals profile , but a simplified version to test it out in ig-pub  - gets same errors)<a href=\"/user_uploads/10155/UAKA9XhKGlDo8ZO1s-vdBHyh/Screen-Shot-2018-02-23-at-4.30.10-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-02-23-at-4.30.10-PM.png\">Screen-Shot-2018-02-23-at-4.30.10-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/UAKA9XhKGlDo8ZO1s-vdBHyh/Screen-Shot-2018-02-23-at-4.30.10-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-02-23-at-4.30.10-PM.png\"><img src=\"/user_uploads/10155/UAKA9XhKGlDo8ZO1s-vdBHyh/Screen-Shot-2018-02-23-at-4.30.10-PM.png\"></a></div>",
        "id": 153940229,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519432346
    },
    {
        "content": "<p>slice foo1 is nested under slice foo , and slice  foo4 is nested under slicefoo4  (should be slice foo3 and slice foo4 in the image above)</p>",
        "id": 153940230,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519432431
    },
    {
        "content": "<p>Why not slice by pattern?  Then you can specify a pattern on the coding and be done (and you can include the code system too - slicing by code alone is not safe)</p>",
        "id": 153940236,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1519434261
    },
    {
        "content": "<p>well I simplified it  and did not include system  - my reason for not using pattern is easier to read this way.</p>",
        "id": 153940241,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519434723
    },
    {
        "content": "<p>and I think easier to reslice</p>",
        "id": 153940242,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519434743
    },
    {
        "content": "<p>but my question really is whether you can nest a slice like this or not.</p>",
        "id": 153940243,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519434813
    },
    {
        "content": "<p>if yes then whether the validator should handle that  - at least one layer deep</p>\n<p>unless I am way off base  I think this is common case:</p>\n<ul>\n<li>at least one code value pair needs to exist in a coding in a repeating element of type CodeableConcept  - like Obs,category</li>\n</ul>",
        "id": 153940244,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519434950
    },
    {
        "content": "<p>I have nested slices like that before.  However, I've had some issues with doing it in spreadsheets.</p>",
        "id": 153940245,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1519434993
    },
    {
        "content": "<p>I don't remember the specifics though.</p>",
        "id": 153940246,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1519435001
    },
    {
        "content": "<p>I went to patterns because it was cleaner.</p>",
        "id": 153940247,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1519435011
    },
    {
        "content": "<p>k</p>\n<p>but I have to use the spreadsheet for the build right</p>",
        "id": 153940248,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519435026
    },
    {
        "content": "<p>and your profile instances  validated using the build or ig validator?</p>",
        "id": 153940249,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519435100
    },
    {
        "content": "<p>I guess I'll use patterns.  I can pattern a coding but had no success patterning a CodeabeConcept.  Can you send me an example</p>",
        "id": 153940251,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519435218
    },
    {
        "content": "<p>pattern</p>",
        "id": 153940252,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519435231
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/fi3mxiczRobXsMfFLNlcAq9f/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/fi3mxiczRobXsMfFLNlcAq9f/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/fi3mxiczRobXsMfFLNlcAq9f/pasted_image.png\"></a></div>",
        "id": 153940254,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1519435355
    },
    {
        "content": "<p>ty</p>",
        "id": 153940257,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519435604
    },
    {
        "content": "<p>Can you point me to where there is documentation (presuming that there is some) and I can get up to date on the details for slicing by pattern?  I haven't done that, but I believe it's what I'm going to be needing to do.  I appreciate the image from Lloyd, but I don't think that's enough to be comfortable with how it works and how to do it.</p>",
        "id": 153940270,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1519439599
    },
    {
        "content": "<p>If you're slicing by pattern, in the slicing path you declare the path to the note that will have a pattern and say \"@pattern\".  In the slices, for those nodes, you fill in the pattern element with the pattern that needs to be matched by nodes.  The patterns need to be mutually exclusive across all of the declared slices.</p>",
        "id": 153940274,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1519439873
    },
    {
        "content": "<p>OK, that seems to make sense.  And if I look at an example I think that should make it clear.  Thanks.</p>",
        "id": 153940276,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1519440047
    },
    {
        "content": "<p>OK so the patterns didn't validate either and I can't get over how opaque they look.  I don't need to publish as a spreadsheet in the build so that is not the issue - but in XML doesn't work either.  Here is what I want.  One code to be \"foo\" in one instance of one coding in category.</p>\n<p>but still getting the instance vaildation error (in Ig-publisher but assuming will be same in the build.)  \"    Error in discriminator at Observation.category:foo.coding: slicing found\"</p>\n<p>my question is again is this an issue with my slicing or an issue with the validation getting stuck on a nested slice.</p>\n<p>here is the xml</p>\n<div class=\"codehilite\"><pre><span></span>  &lt;differential&gt;\n    &lt;element id=&quot;Observation&quot;&gt;\n      &lt;path value=&quot;Observation&quot;/&gt;\n      &lt;definition value=&quot;This is a simple example Template.&quot;/&gt;\n      &lt;mustSupport value=&quot;false&quot;/&gt;\n      &lt;isModifier value=&quot;false&quot;/&gt;\n    &lt;/element&gt;\n    &lt;element id=&quot;Observation.category&quot;&gt;\n      &lt;path value=&quot;Observation.category&quot;/&gt;\n      &lt;slicing&gt;\n        &lt;discriminator&gt;\n          &lt;type value=&quot;value&quot;/&gt;\n          &lt;path value=&quot;coding.code&quot;/&gt;\n        &lt;/discriminator&gt;\n        &lt;rules value=&quot;open&quot;/&gt;\n      &lt;/slicing&gt;\n      &lt;min value=&quot;1&quot;/&gt;\n      &lt;max value=&quot;*&quot;/&gt;\n      &lt;type&gt;\n        &lt;code value=&quot;CodeableConcept&quot;/&gt;\n      &lt;/type&gt;\n\n    &lt;/element&gt;\n    &lt;element id=&quot;Observation.category:foo&quot;&gt;\n      &lt;path value=&quot;Observation.category&quot;/&gt;\n      &lt;sliceName value=&quot;foo&quot;/&gt;\n      &lt;min value=&quot;1&quot;/&gt;\n      &lt;max value=&quot;1&quot;/&gt;\n      &lt;type&gt;\n        &lt;code value=&quot;CodeableConcept&quot;/&gt;\n      &lt;/type&gt;\n    &lt;/element&gt;\n    &lt;element id=&quot;Observation.category:foo.coding&quot;&gt;\n      &lt;path value=&quot;Observation.category.coding&quot;/&gt;\n      &lt;slicing&gt;\n        &lt;discriminator&gt;\n          &lt;type value=&quot;value&quot;/&gt;\n          &lt;path value=&quot;code&quot;/&gt;\n        &lt;/discriminator&gt;\n        &lt;rules value=&quot;open&quot;/&gt;\n      &lt;/slicing\n      &lt;type&gt;\n        &lt;code value=&quot;Coding&quot;/&gt;\n      &lt;/type&gt;\n    &lt;/element&gt;\n    &lt;element id=&quot;Observation.category:foo.coding:foo1&quot;&gt;\n      &lt;path value=&quot;Observation.category.coding&quot;/&gt;\n      &lt;sliceName value=&quot;foo1&quot;/&gt;\n      &lt;min value=&quot;1&quot;/&gt;\n      &lt;max value=&quot;1&quot;/&gt;\n      &lt;type&gt;\n        &lt;code value=&quot;Coding&quot;/&gt;\n      &lt;/type&gt;\n\n    &lt;/element&gt;\n    &lt;element id=&quot;Observation.category:foo.coding:foo1.code&quot;&gt;\n      &lt;path value=&quot;Observation.category.coding.code&quot;/&gt;\n      &lt;min value=&quot;1&quot;/&gt;\n      &lt;max value=&quot;1&quot;/&gt;\n      &lt;type&gt;\n        &lt;code value=&quot;code&quot;/&gt;\n      &lt;/type&gt;\n      &lt;fixedCode value=&quot;81260-2&quot;/&gt;\n    &lt;/element&gt;\n  &lt;/differential&gt;\n&lt;/StructureDefinition&gt;\n</pre></div>",
        "id": 153940418,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519594409
    },
    {
        "content": "<p>That should work.  Though you really need to include 'system' too.</p>",
        "id": 153940420,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1519597725
    },
    {
        "content": "<p>Well yes if this worked then I would add system to ...  i am trying to debug why is not working.</p>",
        "id": 153940621,
        "sender_full_name": "Eric Haas",
        "timestamp": 1519662986
    }
]