[
    {
        "content": "<p>so there's going to be a connectathon stream around the subscription resource in January, and it's already being worked on....</p>",
        "id": 153855125,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478118511
    },
    {
        "content": "<p>It's raised a question for me: </p>",
        "id": 153855126,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478118518
    },
    {
        "content": "<p>the websocket documentation says:</p>",
        "id": 153855127,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478118532
    },
    {
        "content": "<p>Client authenticates to server using a server-specified Web socket protocol (e.g. OAuth bearer token presentation)</p>",
        "id": 153855128,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478118541
    },
    {
        "content": "<p>just so we're clear about this: do we think that the server should OAuth on the the main end-point, and then use the same protocol? or do we think that the OAuth should occur on the web socket end-point? </p>",
        "id": 153855129,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478118604
    },
    {
        "content": "<p>I don't know what that would even mean....</p>",
        "id": 153855130,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478118613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> <span class=\"user-mention\" data-user-id=\"191661\">@Praveen Ekkati</span> <span class=\"user-mention\" data-user-id=\"191703\">@Claude Nanjo</span> .. comments?</p>",
        "id": 153855131,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478118655
    },
    {
        "content": "<p>more on this: then we say:</p>",
        "id": 153855181,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478127563
    },
    {
        "content": "<p>Server sends a \"ping :id\" message to notify the client each time a new result is available</p>",
        "id": 153855182,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478127564
    },
    {
        "content": "<p>if you can only subscribe to a single :id (that's what we imply, but not actually what we say explicitly) then why send :id? </p>",
        "id": 153855184,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478127600
    },
    {
        "content": "<p>can we also change it so that if you specify a payload type, then you get ping {resource}</p>",
        "id": 153855185,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478127615
    },
    {
        "content": "<p>(deleted) I read the meaning of :id wrong!</p>",
        "id": 153855257,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478170105
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 153855259,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478170191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I'm not sure I get your question on the OAuth part. I'd assume the OAuth authentication process is external to the FHIR server (as it always is of course) so by the time the client wants to open a websocket connection it presents the bearer token in its initial request before the connection gets upgraded to a websocket</p>",
        "id": 153855414,
        "sender_full_name": "James Agnew",
        "timestamp": 1478211529
    },
    {
        "content": "<p>Also how do we imply that you can only subscribe to a single ID? You can subscribe to any search result, so by definition it's lots of IDs no?</p>\n<p>I do agree that the protocol needs work (and/or further fleshing out) though. This would be a nice time to do that.</p>",
        "id": 153855415,
        "sender_full_name": "James Agnew",
        "timestamp": 1478211618
    },
    {
        "content": "<p>well, if you connect to a web socket end point, and it doesn't like your authentication, does it redirect the client to an OAuth end point instead of doing the websocket upgrade? </p>",
        "id": 153855417,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478211975
    },
    {
        "content": "<p>do web socket clients handle that? what's the expectation with this elsewhere</p>",
        "id": 153855418,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478212001
    },
    {
        "content": "<p>as for binding - once you have a wb socket, then you (the client) send bind :[id]</p>",
        "id": 153855419,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478212058
    },
    {
        "content": "<p>and then you get messages for that subscription, by it's logical id </p>",
        "id": 153855420,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478212071
    },
    {
        "content": "<p>that is, for the one logical id</p>",
        "id": 153855421,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478212080
    },
    {
        "content": "<p>also, you assume that the client just... knows... where to get the bearer token that it needs from....</p>",
        "id": 153855424,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478212679
    },
    {
        "content": "<p>At the FHIR specification for a subscription stream, you can only specify that authentication and authorization apply. For Connectathon you can define a specific policy to enforce. Subscriptions often do an access control check at both the subscription request, and prior to returning results. The first check is to confirm that the subscriber has proper rights to ask the subscription(question). This is often broad, meaning it doesn't do fine-grain rejections. The second (N) check(s) do the fine grain check (and re-verification that the requester is still authorized to subscribe). The second check(s) can choose to silently discard unauthorized data, or notify the subscriber (policy decision).</p>",
        "id": 153855493,
        "sender_full_name": "John Moehrke",
        "timestamp": 1478261814
    },
    {
        "content": "<p>and that answered the question how?</p>",
        "id": 153855540,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478285683
    },
    {
        "content": "<p>I definitely don't think we'd be doing any redirecting. Websockets are initiated by Javascript request so a simple 403 is probably all a client would be able to do anything useful with.</p>\n<p>I guess a more fundamental question is why we get into the authorization stuff at all on the subscription page? I mean I would equally assume that searches are appropriately secured, but we don't mandate any particular authorization scheme there.</p>",
        "id": 153855584,
        "sender_full_name": "James Agnew",
        "timestamp": 1478298856
    },
    {
        "content": "<p>Re. the ID you're right. I'm now remembering that when I originally implemented the websocket protocol I read it wrong and assumed it was sending the IDs of the changed resources but that turned out to be incorrect and I had to fix it.</p>\n<p>It probably makes sense to revisit the protocol as a whole, allowing for the server to send resource IDs or even bodies. I have trouble envisioning a use case where receiving the subscription ID would be useful for anything other than causing me to execute a follow-on search. Might as well just do the follow-on search proactively and send the results..</p>",
        "id": 153855585,
        "sender_full_name": "James Agnew",
        "timestamp": 1478299023
    },
    {
        "content": "<p>the id of just sending the id of the subscription is that you could do that in the clear, or at least, with a lot less security </p>",
        "id": 153855587,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478301028
    },
    {
        "content": "<p>I think from that point of view, if you're going to send the resource id, you might as well just send the resource</p>",
        "id": 153855588,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478301065
    },
    {
        "content": "<p>I think it would be useful if you could bind more than one id </p>",
        "id": 153855589,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478301079
    },
    {
        "content": "<p>e.g. bind :1 :2 :3</p>",
        "id": 153855590,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478301086
    },
    {
        "content": "<p>as for security.. I agree we would say less e.g. remove the point \"Client authenticates to server using a server-specified Web socket protocol (e.g. OAuth bearer token presentation).\" and just add a note after the list to the effect that the web socket end-point must be appropriately secured</p>",
        "id": 153855592,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478301225
    },
    {
        "content": "<p>Ah... trying to implement a websocket pub/sub protocol and run FHIR resources over it?  The Meteor community has had a pub/sub protocol called DDP (Data Distribution Protocol) running for the past 4 years, and have been running FHIR resources over it for the past year.   This may be relevant.  :)</p>\n<p><a href=\"https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md\" target=\"_blank\" title=\"https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md\">https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md</a></p>",
        "id": 153862584,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1481251055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> - link to DDP is <a href=\"https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md\" target=\"_blank\" title=\"https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md\">https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md</a></p>",
        "id": 153862772,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481310771
    },
    {
        "content": "<p>Also, just as an FYI.... the DDP protocol has open-source clients in a dozen major languages...<br>\n<a href=\"http://meteorpedia.com/read/DDP_Clients\" target=\"_blank\" title=\"http://meteorpedia.com/read/DDP_Clients\">http://meteorpedia.com/read/DDP_Clients</a></p>",
        "id": 153862773,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1481310897
    }
]