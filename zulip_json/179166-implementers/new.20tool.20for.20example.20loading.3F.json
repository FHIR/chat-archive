[
    {
        "content": "<p>Hi all - I'm building a tool as I have the need my self to be able to send the example resources from an IG to a designated FHIR server. Before I spend too much time on it, I would like to know that I'm not building something that already exists out there. FYI I'll be piggybacking on the HAPI FHIR stack as well as the utilities from the org.hl7.fhir.utilities so much of the heavy lifting is already done. (<span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> )</p>",
        "id": 266127481,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640552435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> / <span class=\"user-mention\" data-user-id=\"191335\">@Martijn Harthoorn</span>  and others - are you familiar with such a tool already?</p>",
        "id": 266127507,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640552488
    },
    {
        "content": "<p>well, it sounds like bulk import to me. I believe that the bulk data spec covers that now?</p>",
        "id": 266128701,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1640554345
    },
    {
        "content": "<p>I have some code somewhere to do it in hapi core, but it's not organised or packaged up for a command line thing. And the code itself isn't a very big deal</p>",
        "id": 266128715,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1640554391
    },
    {
        "content": "<p>I agree - it isn't a big deal codewise</p>",
        "id": 266130271,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640556821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> - having had a quick look at <a href=\"https://github.com/smart-on-fhir/bulk-import/blob/master/import.md\">https://github.com/smart-on-fhir/bulk-import/blob/master/import.md</a> I'd say that my need is of a different nature. My need is to 'prepare' a given server for a given set of scenarioes exemplified by the example instances that follows an IG. Nothing more. It puts no other requirements on the server but the need to support <code>transaction</code> as there are so few example instances in the IG's. I guess that the IGpublisher just as well could do it - simply bundling all example instances in a transaction bundle as part of the build process - but whether that is a good idea I cannot say.</p>",
        "id": 266133376,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640561647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> / <span class=\"user-mention\" data-user-id=\"191478\">@Oliver Egger</span>  what tools do you guys use for bootstrapping IHE test cases when doing IHE Connectathons? Do you still heavily rely on the textual descriptions in Gazelle, or could you just as well have the need for at least formulat a given state with a certain set of test resources?</p>",
        "id": 266133489,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640561812
    },
    {
        "content": "<blockquote>\n<p>I guess that the IGpublisher just as well could do it - simply bundling all example instances in a transaction bundle as part of the build process</p>\n</blockquote>\n<p>a typical IG contains a set of incompatible resources that represent different scenarios or transations covered  by the IG</p>",
        "id": 266140989,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1640572852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191427\">Jens Villadsen</span> <a href=\"#narrow/stream/179166-implementers/topic/new.20tool.20for.20example.20loading.3F/near/266133489\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> / <span class=\"user-mention silent\" data-user-id=\"191478\">Oliver Egger</span>  what tools do you guys use for bootstrapping IHE test cases when doing IHE Connectathons? Do you still heavily rely on the textual descriptions in Gazelle, or could you just as well have the need for at least formulat a given state with a certain set of test resources?</p>\n</blockquote>\n<p>During the connectathon vendors can add FHIR resources to a  hapif-fhir instance. Test descriptions are done in gazelle, i don't think they need much bootstrapping. In case of MHD there is special tooling support developped with <a href=\"https://github.com/usnistgov/asbestos/releases/\">asbestos</a>.</p>",
        "id": 266152166,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1640589013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span> the hapi-fhir CLI command tooling has code to upload FHIR resources using the transaction approach as you mentioned, see <a href=\"https://github.com/hapifhir/hapi-fhir/blob/master/hapi-fhir-cli/hapi-fhir-cli-api/src/main/java/ca/uhn/fhir/cli/ExampleDataUploader.java\">ExampleDataUploader.java</a></p>",
        "id": 266152671,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1640589665
    },
    {
        "content": "<p>i usually just load an implementation guide and do then form the client side the actions I want to do: <a href=\"https://github.com/ahdis/matchbox/blob/main/src/test/java/ch/ahdis/validation/IgValidateR4TestStandalone.java#L55\">https://github.com/ahdis/matchbox/blob/main/src/test/java/ch/ahdis/validation/IgValidateR4TestStandalone.java#L55</a></p>",
        "id": 266152977,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1640590053
    },
    {
        "content": "<p>if somebody has already typescript support for loading implementation guides I would be very interested, without wanting to hijack jens thread ..</p>",
        "id": 266153057,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1640590127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> whats 'incompatible resources'?</p>",
        "id": 266155463,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640593401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191478\">@Oliver Egger</span> it looks like the hapi-cli only considers the FHIR releases and not 'random' IGs</p>",
        "id": 266155781,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640593772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191427\">Jens Villadsen</span> <a href=\"#narrow/stream/179166-implementers/topic/new.20tool.20for.20example.20loading.3F/near/266155781\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"191478\">Oliver Egger</span> it looks like the hapi-cli only considers the FHIR releases and not 'random' IGs</p>\n</blockquote>\n<p>some work left for you to do <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 266156123,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1640594197
    },
    {
        "content": "<p>Ok - Im doing the tool regardless if anyone needs it</p>",
        "id": 266156439,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640594528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> is this the full list of dependencies returned here (<a href=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/npm/NpmPackage.java#L787\">https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/npm/NpmPackage.java#L787</a>) - or do I need to recursively look into those?</p>",
        "id": 266159245,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640597674
    },
    {
        "content": "<p>Sounds like something the Firely Terminal toolkit would also support, but as a trainer/analyst  I tend not to use command line tools.</p>",
        "id": 266161499,
        "sender_full_name": "René Spronk",
        "timestamp": 1640600053
    },
    {
        "content": "<p>(but then again: I use a Py script to seed a FHIR server with resource examples prior to a training course)</p>",
        "id": 266161540,
        "sender_full_name": "René Spronk",
        "timestamp": 1640600113
    },
    {
        "content": "<blockquote>\n<p>@Grahame Grieve whats 'incompatible resources'?</p>\n</blockquote>\n<p>content of the example resources represents sets of transactions that imply different things about the state of the data - the overall picture is not always consistent with being treated as a single transaction</p>",
        "id": 266161627,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1640600197
    },
    {
        "content": "<p>you have to look into the dependencies recursively - that's just the dependencies for this package</p>",
        "id": 266161640,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1640600229
    },
    {
        "content": "<p>The examples in the IG would have to jointly form a consistent (in terms of references etc, but also clinically) web of resources. That's rarely the case in an IG. But still, it makes sense to have these 'fragments' as instances on a server, for people to play with.</p>",
        "id": 266161829,
        "sender_full_name": "René Spronk",
        "timestamp": 1640600451
    },
    {
        "content": "<p>Mostly what IHE has been doing is validation with the SD profiles. There is movement to create IGs that are the peer of a definition IGs. These second IGs would be more focused on defining the test scenario. In this way they can be versioned independent of the definition IG, and thus more time can be spent on making, and keeping, them consistent with the testing needs. That is to emphasize that testing needs tend to change over time as it is determined what implementers have tended to not have any problem implementing, vs the specific scenarios where implementers didn't notice a constraint. These IGs can also contain non-conformant resources, that are leveraged by the test plan to be sure the system-under-test behaves properly (proper Postel's Law).</p>",
        "id": 266173762,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640612983
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"191478\">@Oliver Egger</span> points out, we would very much like an easy way to standup a HAPI server instance with a set of IGs loaded. <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> was working with <span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span> .. right? I presumed this was ready for experimentation.</p>",
        "id": 266173853,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640613065
    },
    {
        "content": "<p>We do have a TestScript based testing for the IHE-MHD IG. <br>\nAnd we are working on integrating Inferno.<br>\n<span class=\"user-mention\" data-user-id=\"193468\">@Lynn Felhofer</span>  can you provide other details about how IHE-Connectathon prepares (pre-loads servers)?</p>",
        "id": 266174889,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640614027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> the <a href=\"https://github.com/hapifhir/hapi-fhir-jpaserver-starter\">hapi-fhir-jpasever-starter</a> has the capability to load ig's. what we do with <a href=\"https://github.com/ahdis/matchbox\">matchbox</a> is to load the ig's and the expose a $validate operation, which then can be used with the IHE EVS Client tooling, we did this already in switzerland on our own gazelle instance and are looking how to incorporate that also for future connectathons</p>",
        "id": 266174894,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1640614038
    },
    {
        "content": "<p>so is that what matchbox is? I have seen that lately, and couldn't quite figure out what it was.</p>",
        "id": 266174973,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640614087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> just one thing about the testing need changing more often than the content and being separate - I am very much in favour of not separating those. Otherwise there goes TDD, right?</p>",
        "id": 266183120,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640621134
    },
    {
        "content": "<p>I don't think that separation is a negative to TDD. It is more a recognition that even in pure TDD, the tests continue to evolve as the code is developed. This is exactly why I think it is useful to separate the specification IG from the test IG. This is not to say that I am against them being the same IG, I would love for that to happen. I would also love a perfect world where the tests (happy-path) are written before any constraints. But I don't think it is practical today. I expect that evolution of the test IG that I am promoting is never contrary to the spec IG. The evolution of the test IG would be around the edges, failure-modes, etc.  If there is a need to change the spec IG, then one does that and everyone get a revised spec IG.</p>",
        "id": 266183979,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640621826
    },
    {
        "content": "<p>My experience tells me specifications and testing criteria belong together. Otherwise where would we put things like Acceptance Criteria?</p>",
        "id": 266190183,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640626492
    },
    {
        "content": "<p>If testing evolves at a different pace, sounds like waterfall</p>",
        "id": 266190235,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640626525
    },
    {
        "content": "<p>Versioning would also be more difficult if we have different IGs</p>",
        "id": 266190328,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640626572
    },
    {
        "content": "<p>fwiw: Happy path testing does not need to be written before specs. But should be published at the same time and versioned together with the specs.</p>",
        "id": 266190793,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640626979
    },
    {
        "content": "<p>I could add something to the FHIR toolkit like this</p>",
        "id": 266196179,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1640631518
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/Ho7C-uYLL5OFNgGA2slcWsFI/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/Ho7C-uYLL5OFNgGA2slcWsFI/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/Ho7C-uYLL5OFNgGA2slcWsFI/image.png\"></a></div>",
        "id": 266196180,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1640631520
    },
    {
        "content": "<p>Requirements (profiles) should be bundled in the same set (IGs) as its verifications (test instances) at all times, IMHO.</p>",
        "id": 266198925,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640633757
    },
    {
        "content": "<p>Test IGs sounds like the wrong way to me</p>",
        "id": 266199039,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640633844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191372\">@René Spronk</span> the examples in an IG would have to jointly form a consistent set of resources - or a set of consistent sets?</p>",
        "id": 266206342,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640640529
    },
    {
        "content": "<p>I explain: if an IG puts together different types of content (e.g. a medication IG that mixes supply chain, pharmacovigilance, prescription and analytics) those may be different sets of resources with consistency within the set but not necessarily consistent altogether.</p>",
        "id": 266206450,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640640642
    },
    {
        "content": "<p>Aldo resources may refer to intermediate steps (e.g. Task, CarePlan and their evolution) and thus may not be consistent as a snapshot altogether</p>",
        "id": 266206502,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640640718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I presume this feature in th toolkit would take those resources, make a transaction Bundle and post to the server?</p>",
        "id": 266206589,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640640825
    },
    {
        "content": "<p>Well, wouldn’t need to be a transaction</p>",
        "id": 266206663,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1640640898
    },
    {
        "content": "<p>But otherwise yes</p>",
        "id": 266206678,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1640640912
    },
    {
        "content": "<p>Question: would it make sense to optionally allow the editor to define their (transaction) Bundles? In which case we can select which ones to upload?</p>",
        "id": 266206690,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640640937
    },
    {
        "content": "<p>E.g. Bundle1 to set the server to KnownState1, Bundle2....</p>",
        "id": 266206747,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640640979
    },
    {
        "content": "<p>This idea (and it's just a new idea) would mean that the upload logic would be:</p>",
        "id": 266206768,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640641027
    },
    {
        "content": "<p>For GUI: if there is no Bundle, show the resource types and allow user to select. If there are Bundles, show those</p>",
        "id": 266206828,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640641085
    },
    {
        "content": "<p>For CLI: default to upload all, or if there are Bundles, allow user to select which bundles by ID in the command line?</p>",
        "id": 266206860,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640641133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span> for your thoughts on CLI</p>",
        "id": 266206875,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640641145
    },
    {
        "content": "<p>(I don't know how much this diverges from your initial idea and I don't know how much Java work this is)</p>",
        "id": 266206915,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640641196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I can perhaps do some coding on the toolkit once I have it compiling and after you set the direction</p>",
        "id": 266206990,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640641248
    },
    {
        "content": "<p>So the idea is that a bundle could be defined that is a starting-point? Where the IG contains many steps in a workflow, and thus the whole IG would not put the server in the starting-point?</p>",
        "id": 266213378,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640646741
    },
    {
        "content": "<p>Those bundles would be tied to example scenarios, wouldn’t they?</p>",
        "id": 266213564,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1640646937
    },
    {
        "content": "<p>As for toolkit compile.. should be sorted?</p>",
        "id": 266213645,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1640646992
    },
    {
        "content": "<p>But I’m out at the cricket today…</p>",
        "id": 266213659,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1640647004
    },
    {
        "content": "<p>CLI-wise I now have the default implementation ready - including recurse lookups</p>",
        "id": 266214631,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640647896
    },
    {
        "content": "<p>Whitelist of bundle id's can be added</p>",
        "id": 266214697,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640647939
    },
    {
        "content": "<p>I'll look at the toolkit after I manage some digital detox (today wasn't it). I think Bundles could be tied to TestScripts - perhaps also ExampleScenarios but I wasn't thinking of those</p>",
        "id": 266216930,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640649422
    },
    {
        "content": "<p>The problem I quite often see is that example resources are always in the 'present tense' (which makes sense: show an active medication or problem), and rarely any historic data (inactive conditions, irrelevant observations from 10 years ago, etc.). But having something to play with, even if not very realistic nor complete, is still better than having nothing at all.</p>",
        "id": 266239398,
        "sender_full_name": "René Spronk",
        "timestamp": 1640678204
    },
    {
        "content": "<p>When we handle testing and dynamic ExampleScenarios and CarePlans we'll surely have to have data at different times, right?</p>",
        "id": 266252630,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1640691619
    },
    {
        "content": "<p>The Firely VonkLoader tool might be considered:   <a href=\"https://docs.fire.ly/vonkloader/\">https://docs.fire.ly/vonkloader/</a><br>\n(currently it doesn't support authentication methods; hopefully that will be available in the future.)</p>",
        "id": 266280606,
        "sender_full_name": "John Silva",
        "timestamp": 1640716063
    },
    {
        "content": "<blockquote>\n<p>VonkLoader is a free, multithreaded tool for Windows / macOS / Linux to upload resources in bulk to any FHIR STU3 server. To install, go to <a href=\"http://simplifier.net/downloads\">simplifier.net/downloads</a> and log in.</p>\n</blockquote>",
        "id": 266280712,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640716148
    },
    {
        "content": "<p><strong>STU3</strong></p>",
        "id": 266280848,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640716253
    },
    {
        "content": "<p>Anyways ... I'm done now with the first version now <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span></p>",
        "id": 266280874,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640716276
    },
    {
        "content": "<p>You can run it using eg. <code>docker run jkiddo/ember --igIdAndVersion=ch.fhir.ig.ch-core#2.0.0</code></p>",
        "id": 266280905,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640716312
    },
    {
        "content": "<p>There are 3 parameters: <code>serverBase</code>, <code>igIdAndVersion</code> (mandatory) and <code>loadRecursively</code>. If <code>serverbase</code> is omitted, the total bundle transaction is printed in the terminal - if provided it will send the bundle transaction to the server address. The <code>igIdAndVersion</code>is the IG id and version. <code>loadRecursively</code> is by default false - if set to true, all example instances from parent dependencies recursively are also included in the total transaction bundle</p>",
        "id": 266281128,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640716512
    },
    {
        "content": "<p>Let me know what you think. It is FHIR versino agnostic</p>",
        "id": 266281170,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640716555
    },
    {
        "content": "<p>I have done this for USCore.  But as in the case of US Core,  there are several examples in this (as many other IG's_ where the references are stubs using the <code>display</code> element or \"example/org\" urls and that may be insufficient for the testing purposes,  so  I am not sure how useful it would be to be as an IG artifact.  You will Likely will need to do some post processing to clean em up.</p>",
        "id": 266292056,
        "sender_full_name": "Eric Haas",
        "timestamp": 1640725292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> All the samples Ive seen in US core looks fine to me. Have you tried the tool against us core?</p>",
        "id": 266300711,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640733208
    },
    {
        "content": "<p>I have not.  However, I loaded the examples successfully using my script.  My point is for testing you may need to bulk up the examples with actual working references where they are stubbed in.</p>",
        "id": 266301768,
        "sender_full_name": "Eric Haas",
        "timestamp": 1640734384
    },
    {
        "content": "<p>OK I tried it part way and it creates a transaction using POSTs .. But a couple of issues I had ....</p>\n<ol>\n<li>included some search bundle which causes servers to choke (at least HAPI server).</li>\n<li>includes the text elements  (I like to pop them off to make it less bulky)</li>\n<li>includes the id elements even though a POST transaction  (doesn't choke on HAPI but may on other servers)</li>\n<li>POSTs instead of PUTs so can't predefine the ids for easier referencing downstream.  ( US Core has &gt;100 examples so would need to map the input ids to the the output ids from the operation outcome for searching and testing ) <p>- perhaps could output a table of old and new ids too ?<br>\n  - allow a PUT option with a unique prefix (like '2021-01-USCore') to allow PUTing so the reference mapping is known and done at the input.</p>\n</li>\n</ol>",
        "id": 266305862,
        "sender_full_name": "Eric Haas",
        "timestamp": 1640739562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> - ok, 1 is now done. By default search bundles are now no longer included - they can be by setting <code>includeSearchBundles</code> to true.</p>",
        "id": 266322949,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640761735
    },
    {
        "content": "<p>2 - I don't like changing the actual resources in the IG.</p>",
        "id": 266322965,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640761759
    },
    {
        "content": "<p>3 - sound like you found yourself some servers that do not follow the spec: <a href=\"http://hl7.org/fhir/http.html#create\">http://hl7.org/fhir/http.html#create</a> - on POSTs the server shall ignore the id. If its a cardinal issue, this can ofc be removed</p>",
        "id": 266323131,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640761942
    },
    {
        "content": "<p>4 - (US Core has exactly 84 examples, including search bundles - at least according to my tool ;) - named <em>ember</em>). You cannot assume that the server allows client assigned Id's when using PUT's. HAPI allows this if configured so, but doesn't by default, if I recall correctly. Since you cannot assume client assiged Id's is allowed, you instead should rely on the use of identifiers, or - I could add the feature that client assigned Id's is expected and then do it as PUT and as well include a configurable prefix.</p>",
        "id": 266323416,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640762371
    },
    {
        "content": "<p>PS - I just overwrote the <code>latest</code>tag on ember</p>",
        "id": 266323506,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640762506
    },
    {
        "content": "<p>source can be found here <a href=\"https://github.com/jkiddo/ember/tree/main\">https://github.com/jkiddo/ember/tree/main</a></p>",
        "id": 266363512,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640799320
    },
    {
        "content": "<p>OK thanks for the follow-up.   Still a mapping table that shows new fhir_ids, old fhir_id would be a nice to have output.  That's what I did anyway.</p>",
        "id": 266366388,
        "sender_full_name": "Eric Haas",
        "timestamp": 1640801413
    },
    {
        "content": "<p>Well - the mapping table is pretty hard to compute - if not impossible. If you have eg. two patient resources that you POST in a single transaction, you cannot deduce from the transaction response which patient ended up with which Id.</p>",
        "id": 266389981,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1640822685
    },
    {
        "content": "<p>The order is the same...</p>",
        "id": 266393095,
        "sender_full_name": "Eric Haas",
        "timestamp": 1640826062
    },
    {
        "content": "<blockquote>\n<p>...the response the server SHALL return a Bundle with type set to batch-response or transaction-response that contains one entry for each entry in the request, in the same order, with the outcome of processing the entry.</p>\n</blockquote>\n<p>(<a href=\"http://hl7.org/fhir/http.html#transaction-response\">http://hl7.org/fhir/http.html#transaction-response</a>)</p>",
        "id": 266393197,
        "sender_full_name": "Eric Haas",
        "timestamp": 1640826186
    },
    {
        "content": "<p>I meant to say I created this table on the front end of the transaction since I used PUTs.  But could create from the backend of the transaction using the OO.  ( again is just a thought and may not be worth the effort)</p>",
        "id": 266393381,
        "sender_full_name": "Eric Haas",
        "timestamp": 1640826457
    },
    {
        "content": "<p>Hi All, <br>\nI installed ibm-fhir-server on ubuntun in AWS from dockerhub (<a href=\"https://hub.docker.com/r/ibmcom/ibm-fhir-server\">https://hub.docker.com/r/ibmcom/ibm-fhir-server</a>). To do some configurations, I need to get access to server.xml file. But, I don't find /opt/ol/wlp folders etc... Does anyone run into this issue and found resolution? Thanks in advance</p>",
        "id": 266719129,
        "sender_full_name": "Srinivas Mylarapu",
        "timestamp": 1641233871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197072\">@Paul Church</span></p>",
        "id": 266719959,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1641234286
    },
    {
        "content": "<p>sorry, not my cloud</p>",
        "id": 266722044,
        "sender_full_name": "Paul Church",
        "timestamp": 1641235575
    },
    {
        "content": "<p>hi srinivas, feel free to reach out on <a class=\"stream\" data-stream-id=\"212434\" href=\"/#narrow/stream/212434-ibm\">#ibm</a></p>",
        "id": 266764025,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1641265101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/179166-implementers/topic/new.20tool.20for.20example.20loading.3F/near/266173762\">said</a>:</p>\n<blockquote>\n<p>... These IGs can also contain non-conformant resources, that are leveraged by the test plan to be sure the system-under-test behaves properly (proper Postel's Law).</p>\n</blockquote>\n<p>How do you mark these non-conformant resources, so you know they will trigger an error/warning/information? </p>\n<p>Filename? A tag? A list?</p>\n<p>a <code>meta.!profile=</code> or <code>meta.profile!=</code>would be nice, to indicate explicit non-conformance.</p>",
        "id": 272008632,
        "sender_full_name": "David Simons",
        "timestamp": 1644946047
    },
    {
        "content": "<p>I think declaration of non-conformance would be in the TestScript itself.</p>",
        "id": 272011725,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1644947324
    },
    {
        "content": "<p>Yeah, I am also leaning toward separating Example instances (happy path with meta.profile conformance claims), from strict Test instances (with an expected validation test-result in the test script, as you say) to help get the profiles to be valid _and_ strict (ie. raise info/warnings/errors if and only if desired).</p>",
        "id": 272088868,
        "sender_full_name": "David Simons",
        "timestamp": 1645002029
    }
]