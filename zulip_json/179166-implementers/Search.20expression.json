[
    {
        "content": "<p>so one thing we've discussed often here is that there's no way to implement a server without hand-coding the search routines. </p>",
        "id": 153820969,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460432035
    },
    {
        "content": "<p>we've been working towards automating them for a long time, and I'm now trying to move my server to actually do this</p>",
        "id": 153820970,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460432064
    },
    {
        "content": "<p>but it's hard work - the index declarations aren't quite strong enough to automate, so I'm having to do a lot of work as I go. </p>",
        "id": 153820971,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460432093
    },
    {
        "content": "<p>here's a case I'm not sure how to resolve:</p>",
        "id": 153820972,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460432101
    },
    {
        "content": "<p>onset   | date  \"Date related onsets (dateTime and Period)\" Condition.onset[x]<br>\nonset-info  | string    \"Other onsets (boolean, age, range, string)\"    Condition.onset[x]</p>",
        "id": 153820974,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460432131
    },
    {
        "content": "<p>these 2 expressions have the same path, but they are documented as being different...</p>",
        "id": 153820975,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460432152
    },
    {
        "content": "<p>actually, there's only one way to resolve those, to write explicitly correct expressions</p>",
        "id": 153820976,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460432476
    },
    {
        "content": "<p>Then there are search parameters that can't be automatically generated, like the near geo ones in location, I think I had a special case which handled the soundex style ones</p>",
        "id": 153820986,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460436339
    },
    {
        "content": "<p>they have a type on them </p>",
        "id": 153820987,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460436405
    },
    {
        "content": "<p>I'm cross-comparing my hand-written routines with the generated ones </p>",
        "id": 153820988,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460436423
    },
    {
        "content": "<p>it's educational</p>",
        "id": 153820989,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460436427
    },
    {
        "content": "<p>The soundex ones, yes, not the geo ones. (can't think of any other examples though)</p>",
        "id": 153820990,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460436745
    },
    {
        "content": "<p>more about this: list.comment was changed to list.note :Annotation, with a search parmeter note, mapped to List.note. I think it should point to List.note.text</p>",
        "id": 153820999,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460442823
    },
    {
        "content": "<p>Some what on this topic, are the xpath expressions as provided for the search-parameters for each resource going to remain as xpath, or now that we have FluentPath will they become FluentPaths? <br>\nSo for instance we have search paths expressed like this:  <code>XPath = \"f:Patient/f:telecom[system/@value='email']\"</code>, will they remain into the future or will they become <code>FluentPaths = Patient.telecom.Where(system='email')</code></p>\n<p>I ask because I was parseing them, xpath,  to ceate my database indexes, is that work now lost?</p>",
        "id": 153821003,
        "sender_full_name": "Angus Millar",
        "timestamp": 1460448697
    },
    {
        "content": "<p>The fluentpath expressions are also included in the generated code.</p>",
        "id": 153821019,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460454204
    },
    {
        "content": "<p>(and in the .net model classes too)</p>",
        "id": 153821020,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460454213
    },
    {
        "content": "<p>and the xpath is currently in there too</p>",
        "id": 153821021,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460454231
    },
    {
        "content": "<p>Wil the xpath remain?</p>",
        "id": 153821022,
        "sender_full_name": "Angus Millar",
        "timestamp": 1460454259
    },
    {
        "content": "<p>I'm still working with DSTU 2 .Net API so don't see the fluentpaths as yet. Need to update</p>",
        "id": 153821023,
        "sender_full_name": "Angus Millar",
        "timestamp": 1460454304
    },
    {
        "content": "<p>They are already in the DSTU2 version, I know as I'm using them.</p>",
        "id": 153821043,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460455697
    },
    {
        "content": "<p>In:<br>\nModel.ModelInfo.SearchParameters[0].XPath<br>\nModel.ModelInfo.SearchParameters[0].Expression</p>",
        "id": 153821045,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460455907
    },
    {
        "content": "<p>Thanks Brian, yes I have those and they are what I am using as well. My question is will these remain in time or will the standard move away from these and towards a FluentPath expression style. Will the xpath and Expression properties be replaced by a new property named FluentPath</p>",
        "id": 153821047,
        "sender_full_name": "Angus Millar",
        "timestamp": 1460456143
    },
    {
        "content": "<p>Cool, no intention I know about to remove them at this point.</p>",
        "id": 153821048,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460456315
    },
    {
        "content": "<p>Ok, thanks for your helps</p>",
        "id": 153821049,
        "sender_full_name": "Angus Millar",
        "timestamp": 1460456350
    },
    {
        "content": "<p>or help, lol</p>",
        "id": 153821050,
        "sender_full_name": "Angus Millar",
        "timestamp": 1460456364
    },
    {
        "content": "<p>Also note that I'm working on getting the .net fluentpath evaluator running off the model classes rather than requiring parsing out into another form. But don't have a timeline on it at the moment.</p>",
        "id": 153821051,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460456388
    },
    {
        "content": "<p>We are however using it for validating QuestionnaireResponse resourcces in its current form.</p>",
        "id": 153821052,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460456411
    },
    {
        "content": "<p>Since this is a discussion on search indexing (I think) jsut an FYI,<br>\nWe currently have a mix of SQLXML parsing the resources in sqlserver triggers on insert/update, and some custom code.<br>\nWe do however plan to move over to using the fluentpath extraction once my model based fluentpath is complete</p>",
        "id": 153821054,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460456544
    },
    {
        "content": "<p>Thanks for your advice post the NEHTA connectathon, since then I have done as you suggested and now build my database structure of the .net api with templates, much better. Working on trying to do the same for the add &amp; update routines. Would love to do the same for most of the search but that might be harder </p>",
        "id": 153821055,
        "sender_full_name": "Angus Millar",
        "timestamp": 1460456643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> May be worth challenging the List search parameter note.  It's hard to imagine that falling within the 80%.</p>",
        "id": 153821263,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1460476100
    },
    {
        "content": "<p>Angus - at some stage I'll be investigating generating the xpath from the fluentpath. but are you really using the xpath? how? you said you're using .net api, so you don't have xslt2 support....</p>",
        "id": 153821288,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460488512
    },
    {
        "content": "<p>Do our current search param xpaths rely on xpath 2.0?</p>",
        "id": 153821300,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1460490876
    },
    {
        "content": "<p>umm no, I think none of them do. I got confused there</p>",
        "id": 153821305,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460491355
    },
    {
        "content": "<p>My server is using the xpath for much of the index generation, but is done inside sqlserver, and yes, the current expressions don't have any 2.0 specific bits (thankfully)</p>",
        "id": 153821328,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460496590
    },
    {
        "content": "<p>I'm doing something simular to Brian. Using the search parameter's xpath properties, for example this <code>XPath = \"f:Patient/f:telecom[system/@value='phone']\"</code> to then navigate the .net API via it's Introspection classes to create my database index structure. I'm not using XPath as in navigating XML, i'm manualy parsing the string provided as a searchparameter path</p>",
        "id": 153821406,
        "sender_full_name": "Angus Millar",
        "timestamp": 1460526129
    },
    {
        "content": "<p>I want to search MedicationOrder with status active or completed. Is this correct? MedicationOrder?status=active|completed</p>",
        "id": 153822891,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1461419996
    },
    {
        "content": "<p>MedicationOrder?status=active,completed<br>\n<a href=\"http://hl7.org/fhir/search.html#escaping\" target=\"_blank\" title=\"http://hl7.org/fhir/search.html#escaping\">http://hl7.org/fhir/search.html#escaping</a></p>",
        "id": 153822900,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1461468943
    }
]