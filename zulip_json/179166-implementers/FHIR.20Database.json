[
    {
        "content": "<p>I want to ask some questions about FHIR database and storing data in FHIR server's database</p>\n<p>1. Is FHIR has a specific database schema? or we can use custom database schema with FHIR?<br>\n2. Let's say I have stored a practitioner in  FHIR server and a patient in FHIR server now I want to create a relationship between practitioner and patient for example patient with id=1 is belong to a practitioner with id=2? how can I achieve this being under the umbrella of FHIR? </p>",
        "id": 153873044,
        "sender_full_name": "Muhammad Abubakar Ikram",
        "timestamp": 1487773069
    },
    {
        "content": "<p>Take a look at fhirbase, it uses advanced features of PostgreSQL - <a href=\"http://fhirbase.github.io/\" target=\"_blank\" title=\"http://fhirbase.github.io/\">http://fhirbase.github.io/</a></p>",
        "id": 153873045,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1487773138
    },
    {
        "content": "<p>You could link patients with practitioners using <a href=\"http://build.fhir.org/careteam.html\" target=\"_blank\" title=\"http://build.fhir.org/careteam.html\">http://build.fhir.org/careteam.html</a> resource, using standard *references* approach</p>",
        "id": 153873051,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1487777553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193100\">@Muhammad Abubakar</span> FHIR is an exchange standard, so it's silent about how data is persisted.  There is no official database schema - and there are a variety of relational and noSQL approaches to storing data, including managing references between both local and remote resources.</p>",
        "id": 153873061,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1487794538
    },
    {
        "content": "<p>@<strong>nicola (RIO)</strong> Thanks. please tell me, for using fhirbase <br>\n1. I just have to stand up a fhir server <br>\n2. download and install fhirbase<br>\n3. connect fhir server with fhirbase<br>\n4. start creating resource, Done</p>\n<p>I just have to do this? and I don't have to create the database?</p>",
        "id": 153873129,
        "sender_full_name": "Muhammad Abubakar Ikram",
        "timestamp": 1487853380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> Thank you</p>",
        "id": 153873130,
        "sender_full_name": "Muhammad Abubakar Ikram",
        "timestamp": 1487853418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193100\">@Muhammad Abubakar</span>  fhirbase is not fhir-server - it's just partial implementation of FHIR spec inside database and you could build your own server on top of it. If you are looking for ready to use FHIR servers, take a look at Spark (.net), HAPI (java), Grahame server (delphy) or our commercial cloud server (<a href=\"http://aidbox.io\" target=\"_blank\" title=\"http://aidbox.io\">aidbox.io</a>)</p>",
        "id": 153873163,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1487873704
    },
    {
        "content": "<p>@<strong>nicola (RIO)</strong> yea yea understand this. Thank you</p>",
        "id": 153873222,
        "sender_full_name": "Muhammad Abubakar Ikram",
        "timestamp": 1487918632
    },
    {
        "content": "<p>hello , i have some questions about the database using fhir : 1/ how could i use FHIR database and modify it so it can fit my UML shema of database    2/ i can't find the UML shema of all FHIR in the documentation exemple ( practionner with patient are not linked)    3/ im working with intellij with maven project and in the documentation of hapi fhir they said you have to use the JAR , where could i download this JAR's , because on github i found just source codes , THAAAANKS</p>",
        "id": 153873518,
        "sender_full_name": "wassim",
        "timestamp": 1488097595
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"192990\">@wassim</span>, there is no official FHIR database.  FHIR's purpose isn't to define databases, just interfaces.  If you want to generate a database schema from the resource definitions, you can, but figuring out the design parameters, indexing, etc. and how best to map the complex structures to  database tables is up to you.  The tradeoffs around how you break  things down will be driven by how you expect your database to be used.</p>",
        "id": 153873564,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1488122484
    },
    {
        "content": "<p>2. There's no UML representation of FHIR that integrates all resources.  We've tried and it's just unreadable.  Too many things connect to too many other things.</p>",
        "id": 153873565,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1488122521
    },
    {
        "content": "<p>The easiest way to get the HAPI jars is to use Maven.  See <a href=\"http://hl7api.sourceforge.net/getting_started.html\" target=\"_blank\" title=\"http://hl7api.sourceforge.net/getting_started.html\">http://hl7api.sourceforge.net/getting_started.html</a></p>",
        "id": 153873566,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1488122602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192990\">@wassim</span> , have a look at <a href=\"http://hapifhir.io/download.html\" target=\"_blank\" title=\"http://hapifhir.io/download.html\">http://hapifhir.io/download.html</a> and <a href=\"https://github.com/jamesagnew/hapi-fhir/releases\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/releases\">https://github.com/jamesagnew/hapi-fhir/releases</a></p>",
        "id": 153873575,
        "sender_full_name": "Igor Sirkovich",
        "timestamp": 1488131696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> thanks for your answer , i have my own oracle database , data definitions are not the same as the umd representation of ressources ,1/  i don't understand how could i communicate with another EHR ,   2/ now i have started a maven project on intellij , i will add the dependencies , and then connect to a database oracle , just this ? what about the JPA server , tomcat and hibernate that i had to install and configure  ??  sorry for all the questions i'm little bit lost </p>",
        "id": 153873728,
        "sender_full_name": "wassim",
        "timestamp": 1488184959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191393\">@Igor Sirkovich</span>  thank you for your answer </p>",
        "id": 153873729,
        "sender_full_name": "wassim",
        "timestamp": 1488184989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> if FHIR doesn't have a database where i'm i gonna use the resources if i had already defined my entities and associations on UML</p>",
        "id": 153873743,
        "sender_full_name": "wassim",
        "timestamp": 1488186922
    },
    {
        "content": "<p>you have your own persistent store. and you have the FHIR API - an interface. You have to write some kind of server adaptor that maps from the FHIR API to your persistence model. That's what nearly everybody does</p>",
        "id": 153873744,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1488187390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  okey thanks how do i do that ? </p>",
        "id": 153873751,
        "sender_full_name": "wassim",
        "timestamp": 1488189079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"wassim_c25@hotmail.com\">@wassim</span> - You're going to have to do some reading on hibernate.  This isn't really the forum to get that sort of help.  If you have questions about some particular mappings you're having trouble with, that might be an appropriate question.  But the actual writing of the code to link a persistence layer to the reference implementation objects you'll have to manage on your own.  (To get a basic sense of how it's done, you can look at some of the open source java servers, but be aware that because you have a legacy data base, the mappings won't necessarily be as straight-forward and some transformation will likely be needed.)</p>",
        "id": 153873752,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1488189463
    },
    {
        "content": "<p>Presuming your environment is java. Have a look at this HAPI page <a href=\"http://hapifhir.io/doc_rest_server.html\" target=\"_blank\" title=\"http://hapifhir.io/doc_rest_server.html\">http://hapifhir.io/doc_rest_server.html</a> I've followed that page and then built my own providers that access our data using Hibernate.</p>",
        "id": 153873754,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1488189559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> thanks , please my second question ...</p>",
        "id": 153873756,
        "sender_full_name": "wassim",
        "timestamp": 1488189726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194909\">@Kevin Mayfield</span> thank you </p>",
        "id": 153873758,
        "sender_full_name": "wassim",
        "timestamp": 1488189744
    },
    {
        "content": "<p>The purpose of FHIR is to share data between systems.  For example, an iPhone app talking to an EHR system or two hospital systems talking to each other or a hospital system sending data to a regulatory system or clinical trial system.</p>",
        "id": 153873759,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1488189809
    },
    {
        "content": "<p>FHIR is not focused on how data is stored.  Every system stores things differently.  Our purpose is to define a standardized way of sharing the data regardless of how it's stored.  Every system maps their particular data store (whether relational or noSQL or whatever, using whatever data structures they happen to have) to and from the FHIR standard so they can send and receive data exchanged with other systems.</p>",
        "id": 153873760,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1488189901
    },
    {
        "content": "<p>So your first question should be: \"Who will I be sharing data with?\"  If the answer is no-one, you may have no need of FHIR, particularly if you've already got a database defined.</p>",
        "id": 153873761,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1488189963
    },
    {
        "content": "<p>so can i build my own EHR java application with a relational database ,, and then use hapi FHIR to communicate with the hospital for example ? </p>",
        "id": 153873762,
        "sender_full_name": "wassim",
        "timestamp": 1488190018
    },
    {
        "content": "<p>Yes.  But you'll need to write the code that converts between your native java object representation and HAPI's FHIR-based object representation</p>",
        "id": 153873763,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1488190104
    },
    {
        "content": "<p>okey , what i wanted to do is to build my database FHIR-BASED object representation and make it fit to what i need , so then i will not be obliged to write the code that converts , what do you think</p>",
        "id": 153873764,
        "sender_full_name": "wassim",
        "timestamp": 1488190201
    },
    {
        "content": "<p>If you're building your database from scratch, that can work.  You might take a look at one of the existing open source FHIR servers as a starting point</p>",
        "id": 153873765,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1488190273
    },
    {
        "content": "<p><a href=\"http://wiki.hl7.org/index.php?title=Open_Source_FHIR_implementations\" target=\"_blank\" title=\"http://wiki.hl7.org/index.php?title=Open_Source_FHIR_implementations\">http://wiki.hl7.org/index.php?title=Open_Source_FHIR_implementations</a></p>",
        "id": 153873766,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1488190291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192990\">@wassim</span> building a storage from the standards is not a bad idea (you can build upon the outcome of several discussions and save yourself many design flaws), but I am afraid if you are doing it to save implementation effort, then you must take care.</p>",
        "id": 153873767,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1488190317
    },
    {
        "content": "<p>You'll still need to write a fair bit of code. I'd started with HAPI's JPA server but found I needed to store the data in more traditional SQL tables, so although my underlying database structure mirrors FHIR I still need to code many of the queries (which is simplified by using hibernate)</p>",
        "id": 153873768,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1488190341
    },
    {
        "content": "<p>either the scope is really under your control, or eventually that may backfire. I do think that aligning a design with FHIR by default is a good point</p>",
        "id": 153873769,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1488190381
    },
    {
        "content": "<p>so you're saying work step by step , developping an EHR with java and sql database , and when the project is finished and ready , preceeed with hibernate , jpa server of hapi fHIR ??</p>",
        "id": 153873770,
        "sender_full_name": "wassim",
        "timestamp": 1488190496
    },
    {
        "content": "<p>I'd agree, starting with FHIR model works really well and fits majority data storage requirements well - mostly for administrative resources but in a number of areas it doesn't (e.g. terminology services)</p>",
        "id": 153873771,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1488190503
    },
    {
        "content": "<p>i'm working on a military EHR based on their paper health record , so the informations are differernt a little bit</p>",
        "id": 153873772,
        "sender_full_name": "wassim",
        "timestamp": 1488190579
    },
    {
        "content": "<p>paper record i mean </p>",
        "id": 153873773,
        "sender_full_name": "wassim",
        "timestamp": 1488190603
    },
    {
        "content": "<p>If you're implementing FHIR, just recognize that it's an interface.  You will have to map and some of the mappings won't be straight-forward.   Whether you base your persistance model on the paper forms and do the mapping in code between persistance and the interface or base your persistance on FHIR and do the mapping between your database and your user interface, you're going to be doing the mapping analysis and writing translation code either way.  You'll need to figure out what approach is most advantageous for your circumstance.</p>",
        "id": 153873818,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1488213152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> i found on github a project wich name is (fhir-base) i've found in it sql files and a postagre sql database , i could use this database and modify it to fit my project ??? it's gonna be fhir model , so it's won't take me long to make it work with hapi-fhir for the communication with the hospital later ??</p>",
        "id": 153873839,
        "sender_full_name": "wassim",
        "timestamp": 1488218462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192990\">@wassim</span> One thing to consider is how you will migrate to a newer version of FHIR when it's released and also how you will communicate with servers running a different version of FHIR.</p>",
        "id": 153873844,
        "sender_full_name": "Kevin Olbrich",
        "timestamp": 1488221142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193229\">@Kevin Olbrich</span> yes this is important too , for me this is the first time im trying to use fhir , so i've decided to build my database a fhir object model based database , so that i won't do a big coding to mapping data after that </p>",
        "id": 153873879,
        "sender_full_name": "wassim",
        "timestamp": 1488229932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> i've decided to devlop my application with javaFX and relational database oracle , and when it's finished i will do the data mapping and use hapi fhir , you think i should learn hibernate in same time ??</p>",
        "id": 153873983,
        "sender_full_name": "wassim",
        "timestamp": 1488273611
    },
    {
        "content": "<p>Hibernate is a technology that helps map between object representations and relational representations.  It's certainly not mandatory to use, but you may find it helpful.</p>",
        "id": 153874041,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1488298057
    },
    {
        "content": "<p>If a JSON data store is used (such as MongoDB), FHIR resources can be used as database schemas.  It's fabulously productive.  We use Meteor, a full-stack javascript platform, and happily use FHIR on the server, client, and database.  It allows different apps to seamlessly connect to each other, using the JSON datastore to seamlessly cache what's happening on the wire.  The major downside to this architecture is that it requires a denormalized NoSQL data architecture.</p>",
        "id": 153874157,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1488333716
    },
    {
        "content": "<p>scanned it quickly - it looks nice, but it seems that you didn't get to the big gotcha around resource identity...?</p>",
        "id": 153874167,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1488334842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> - response to wrong thread?</p>",
        "id": 153874185,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1488339443
    },
    {
        "content": "<p>oh yes - it was in response to the right person though ;-)</p>",
        "id": 153874188,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1488339774
    },
    {
        "content": "<p>New SQL standard  (released couple of month ago) includes JSON type and partially supported by Oracle, PostgreSQL, MySQL, MSSQL - i think, in a year all of them will support essential part of specification (at least standard is mostly based on Oracle impl. and PostgreSQL team work agressivlly to support it to) - <a href=\"https://www.iso.org/standard/63556.html\" target=\"_blank\" title=\"https://www.iso.org/standard/63556.html\">https://www.iso.org/standard/63556.html</a></p>",
        "id": 153874190,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1488345511
    },
    {
        "content": "<p>Yup.  JSON type will be invaluable in interoperability efforts; for both writing incoming messages to disk; and prepping outgoing messages.  It will definitely keep MySQL, Oracle, and others in the game for quite a while; but they'll still have clustering and scale out issues after the first silo, due to their CAP theorem architecture.  In particular, their support of map/reduce over distributed JSON collections will be precisely as challenging as Mongo's lack of a JOIN operator.  It really all boils down to whether we're talking about a FHIR database or a FHIR data warehouse.  </p>",
        "id": 153874194,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1488348606
    },
    {
        "content": "<p>We are thinking about National Ehealth repository in Oman based on FHIR standard.<br>\nAs per the current requirement, the architecture should be provisioned to receive <br>\naverage of 500,000 messages daily basis. We are using Oracle db to store the messages<br>\nand it is stored as clob data. We made a setup of another Oracle DB to extract<br>\nrelation structure out of the json messages in order to serve the web and mobile portal clients.<br>\nI am skeptical about this data architecture to manage the future requirements.<br>\nBigdata arachitecture scale better in this case?</p>",
        "id": 153874195,
        "sender_full_name": "Binu DGIT",
        "timestamp": 1488349786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191678\">@Abigail Watson</span> Health IT mostly is not big data and not high load  :) One instance of PostgreSQL could keep medical records of small country without any problems. But with NoSQL you are without transactions and sql and this is paintfull.  And people who do not understand this trade-offs - after write articles like this <a href=\"http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/\" target=\"_blank\" title=\"http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/\">http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/</a></p>",
        "id": 153874196,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1488350502
    },
    {
        "content": "<p>At least for Heath IT, i think, \"C\" is very important.</p>",
        "id": 153874197,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1488350669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192834\">@Binu DGIT</span>  At 500k messages per day, that's like 186m messages per year.  So a 32 bit index would last about 23 years, if the volume of messages stays consistent.  Now figure your average FHIR record size....  is it 1kb or 10kb?  If the former, you're talking 200GB a year; the later would be 2TB a year.  The 10kb assumption results in a number that's just at the lower end of when you need to start clustering disks.  That's per year, though.  So, over 20 years, you'll generate 40TB of data.  Honestly, you could run it either way.  </p>",
        "id": 153874198,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1488351143
    },
    {
        "content": "<p>@<strong>nicola (RIO)</strong> - You're not working with genomics data or biometrics, are you?  :)  You might be surprised how many healthcare use cases where convergence-to-consistency is an acceptable trade-off for availability and scale.  </p>",
        "id": 153874199,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1488351342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191678\">@Abigail Watson</span> i agree about genomic and imaging - but this is also not use case for document databases.  @Binu May i ask you what kind of 500k messages do you have?</p>",
        "id": 153874200,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1488351630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192834\">@Binu DGIT</span>  in high load messages processing now is very popular persistent queues like kafka.</p>",
        "id": 153874201,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1488351972
    },
    {
        "content": "<p>@<strong>nicola (RIO)</strong>   We have almost 300 health institutions varying from health centres, poly clinics to bigger hospitals sending FHIR messages to central repository based on their patient visits everyday. Initially we work with hospitals under govt. later to extend to the private and other non-govt institutions. There are 14 FHIR resource types selected for communication. So based on patient visits in the hospitals, average 5Million FHIR messages are expected (correction from the earlier statment 500K). As I explained earlier, right now we are using Oracle in database level, Apache camel and Active MQ for message processing. Apache kafka is a good suggestion to be explored again..</p>",
        "id": 153874202,
        "sender_full_name": "Binu DGIT",
        "timestamp": 1488352702
    },
    {
        "content": "<p>Typical architecture for such systems is get raw messages into Kafka, then feed  from Kafka into RDBMS, analytical databases like vertica, timeseries DBS like druid and/or do some stream processing. Kafka could handle millions messages per second.</p>",
        "id": 153874203,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1488352837
    },
    {
        "content": "<p>Because Kafka is persistent - you could reprocess or connect new subscribers without big pain - so you will be able add new databases downstream. Most of analytical guys usually do some nightly reprocessing - to fix daily inconsistency, because lost or reordered messages</p>",
        "id": 153874204,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1488353161
    },
    {
        "content": "<p>Thats interesting. Since we are considering asynchronous messages Kafka would be a better option but I am not much familiar about time series db like druid and all. Infact we have Please find the attached snap tells you the current architecture in place.<a href=\"/user_uploads/10155/CzTwNEKEWdWbu4quyE_WkJbN/MessageArhiecture.JPG\" target=\"_blank\" title=\"MessageArhiecture.JPG\">MessageArhiecture.JPG</a> <br>\nwith the current architecture itself, I have a problem in managing the retry Q.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/CzTwNEKEWdWbu4quyE_WkJbN/MessageArhiecture.JPG\" target=\"_blank\" title=\"MessageArhiecture.JPG\"><img src=\"/user_uploads/10155/CzTwNEKEWdWbu4quyE_WkJbN/MessageArhiecture.JPG\"></a></div>",
        "id": 153874205,
        "sender_full_name": "Binu DGIT",
        "timestamp": 1488353636
    },
    {
        "content": "<p>Looks quite reasonable ;) we've designed architecture for very similar use case for Saint-Peterburg government for ~300 EHR integration. I hope, I will share it with community. The core point in our design was some inversion of control:  EHR generate log of all internal changes encoded as FHIR transactions and with increasing transactions counter. Central system polls and merges all EHRs logs and provide it's own TX log for backward integration.</p>",
        "id": 153874208,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1488354950
    },
    {
        "content": "<p>The good property of this design - that everything is async and persistent - so we have some time travel  (reprocessing, node fails ) ability to fight with a lot of problems in such a distributed system.</p>",
        "id": 153874209,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1488355224
    },
    {
        "content": "<p>Also this architecture is more sutable to create  \"really\" distributed system, i.e. without critical dependency from central integration service at all -  for example one EHR could feed tx log of another to sync.</p>",
        "id": 153874210,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1488355373
    },
    {
        "content": "<p>@<strong>nicola (RIO)</strong> It would really appreciated if you can extend the details of the above mentioned project. Reprocessing to manage failed messages is a critical task..</p>",
        "id": 153874211,
        "sender_full_name": "Binu DGIT",
        "timestamp": 1488356377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> you are mentioning some noSQL DBs.  Can you please point me to an implementation using MongoDB for a Java platform.  We are currently using HAPI FHIR, but the HAPI JPA version is using RDBMS underneath.  I know Furore is using Mongo for a .NET implementation, but I am hoping we can find something for JPA. (question also for <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> )</p>",
        "id": 153875307,
        "sender_full_name": "Radu Craioveanu",
        "timestamp": 1488920060
    },
    {
        "content": "<p>I'm not aware of any currently.. </p>\n<p>Out of curiosity, why do you feel that Mongo would be better/preferable to using a relational database? All of my tests have shown that performance is similar, and you get the added advantage of atomic transactions across multiple documents, referential integrity, etc. when you use an RDBMS like Postgres or MySQL</p>",
        "id": 153875316,
        "sender_full_name": "James Agnew",
        "timestamp": 1488922160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> , <span class=\"user-mention\" data-user-id=\"192785\">@Satya</span>  Hi James, you have been also chatting with some other folks on my team re Mongo and Hibernate on the HAPI FHIR google group.  The reason I am interested in Mongo is that we have built a multi data center highly available Mongo infrastructure that is relatively inexpensive as compared to our Oracle licensing.  It is not a simple task for us to introduce a new DB, such as postgres.  It took me years to make Mongo an enterprise acceptable solution.  I could go with Oracle with the HAPI FHIR JPA implemetation, but I am trying to avoid that path.  If you can help out Satya with the Hibernate issues and questions, it may be sufficient for us to use most of your stack and just plop it on top of Mongo.  Do you think that is doable?</p>",
        "id": 153875320,
        "sender_full_name": "Radu Craioveanu",
        "timestamp": 1488923031
    },
    {
        "content": "<p>That does sound theoretically possible, but it's certainly not how the library works today so it would require a fair bit of engineering effort.</p>",
        "id": 153875325,
        "sender_full_name": "James Agnew",
        "timestamp": 1488923671
    },
    {
        "content": "<p>Ok.  We already have implemented about 40 resources using the HAPI FHIR in OSGI containers, on top of Mongo for those resources that do not currently exist in our EHR (like CarePlans, Tasks..) and require Read/Write and on top of MS SQL, ORACLE and/or HL7 for those resources that data already exists in our EHR (we use Siemens SOARIAN, now part of CERNER) (observations, medications, encounters...).  We are looking for ways to accelerate the development cycle by jumping onto something like the JPA so that our developers can focus more on building out integration components between the existing EHR and the JPA servers for those cased where the EHR needs to be updated with data that is written to the JPA server as well as updating the JPA server with data as it it being updated in the EHR in real time (orders, lab results, ...).  Maybe I am missing something, so I wonder if we can get on a call at some point to better explain what we are trying to do and how we can get there the most efficient way.</p>",
        "id": 153875347,
        "sender_full_name": "Radu Craioveanu",
        "timestamp": 1488924783
    },
    {
        "content": "<p>+1 for Mongo.  Former Cerner/Oracle admin here.  Mongo has better approach to CAP theorem for use-cases that require clustering scale out and can accept convergence-to-consistency.  Particularly relevant with biometrics, wearable devices, interfaces, monitoring, etc.   </p>",
        "id": 153875356,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1488925577
    },
    {
        "content": "<p>Sure thing, happy to jump on a call if that's useful. Shoot me an email at <a href=\"mailto:jamesagnew@gmail.com\" title=\"mailto:jamesagnew@gmail.com\">jamesagnew@gmail.com</a></p>",
        "id": 153875358,
        "sender_full_name": "James Agnew",
        "timestamp": 1488926013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191429\">@Peter Hendriks</span>   Could you please provide the required steps to build hapi-server using mysql.? I have gone through your site.Its great(<a href=\"http://hapi.simplifier.net\" target=\"_blank\" title=\"http://hapi.simplifier.net\">http://hapi.simplifier.net</a>)<br>\nMention the link to download HAPI packages and steps to deploy it in the server .Thanks in Advance</p>",
        "id": 153875568,
        "sender_full_name": "Jack Anelson",
        "timestamp": 1488997699
    },
    {
        "content": "<p>There are some instructions on how to do this here: <a href=\"https://www.openhealthhub.org/t/howto-build-a-health-database-and-fhir-api-server-in-15-mins-using-open-source/155\" target=\"_blank\" title=\"https://www.openhealthhub.org/t/howto-build-a-health-database-and-fhir-api-server-in-15-mins-using-open-source/155\">https://www.openhealthhub.org/t/howto-build-a-health-database-and-fhir-api-server-in-15-mins-using-open-source/155</a></p>\n<p>(Shoutout to <span class=\"user-mention\" data-user-id=\"194909\">@Kevin Mayfield</span> for these!)</p>",
        "id": 153875633,
        "sender_full_name": "James Agnew",
        "timestamp": 1489013720
    },
    {
        "content": "<p>Hi Jack,</p>",
        "id": 153875738,
        "sender_full_name": "Peter Hendriks",
        "timestamp": 1489057135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193460\">@Jack Anelson</span> <br>\nAssuming that you just want to have the HAPI-FHIR JPA server example that stores it's data in MySQL instead of (standard) Derby. </p>\n<p>Personally I used Netbeans IDE, .  Note that you need a basic servlet container so I suggest that you setup that first (Tomcat/Jetty/Glassfish etc.). Of course you need MySQL running with proper user rights.</p>\n<p>I just cloned the enire HAPI-FHIR repo from github and opened the HAPI FHIR JPA Server project. Then I edited the dataSource() in  FhirServerConfig.java class so that it would use MySQL over Derby and added the MySQL dependencies to the POM file. </p>\n<p>Then I ran the project and noticed that resources where arriving as BLOB in MySQL when posted to the JPAServer example.</p>\n<p>public DataSource dataSource()<br>\n{<br>\nBasicDataSource retVal = new BasicDataSource();<br>\n//retVal.setDriver(new org.apache.derby.jdbc.EmbeddedDriver());<br>\n//retVal.setUrl(\"jdbc:derby:directory:target/jpaserver_derby_files;create=true\");<br>\ntry<br>\n{<br>\nretVal.setDriver(new com.mysql.jdbc.Driver());<br>\nretVal.setUrl(\"jdbc:mysql://localhost:3306/db_hapi\");<br>\n} catch (Exception e)<br>\n{<br>\ne.printStackTrace(System.out);<br>\n}<br>\nretVal.setUsername(\"myusername\");<br>\nretVal.setPassword(\"mypassword\");<br>\nreturn retVal;<br>\n}</p>",
        "id": 153875747,
        "sender_full_name": "Peter Hendriks",
        "timestamp": 1489058839
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"191429\">@Peter Hendriks</span>  I have done...<span class=\"emoji emoji-1f64c\" title=\"raised hands\">:raised_hands:</span><span class=\"emoji emoji-1f604\" title=\"big smile\">:big_smile:</span></p>",
        "id": 153875796,
        "sender_full_name": "Jack Anelson",
        "timestamp": 1489084106
    }
]