[
    {
        "content": "<p>I have a little bit of confusion around the usage of \"entered-in-error\". Is \"entered-in-error\" a convention that all FHIR resources will/should support to represent a \"soft-deleted\" record? It seems that most (but strangely, not all) resources have some sort of status attribute that can be set to \"entered-in-error\". From a general framework perspective, I would think a consistent representation of \"soft-deleted\" should be adhered to.</p>\n<p>Does anyone have insight into why there are resources that don't support this status (or resources that don't have a status attribute at all)?</p>",
        "id": 219878354,
        "sender_full_name": "Brian Forbis",
        "timestamp": 1607968786
    },
    {
        "content": "<p>All resources are required to have entered-in-error or receive a waiver.  Some resources (Parameters, OperationOutcome, etc.) aren't generally persisted and there isn't a use-case for it</p>",
        "id": 219878958,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1607969023
    },
    {
        "content": "<p>Ok, I think that makes sense for non-persistable resources. So it seems like an alternative to \"entered-in-error\" might be the use of \"active\". Are there guidelines for when \"active\" is used instead of \"status\".</p>",
        "id": 219880485,
        "sender_full_name": "Brian Forbis",
        "timestamp": 1607969697
    },
    {
        "content": "<p>If you've got a state machine that is essentially a boolean, then we allow just 'active'.</p>",
        "id": 219884605,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1607971571
    },
    {
        "content": "<p>Ok, another tangential question regarding soft-deleted: Have implementers generally redacted resources that are returned in search bundles that are in \"entered-in-error\" status? I have seen this referenced in this conversation <a href=\"#narrow/stream/179166-implementers/topic/Are.20search.20parameters.20like.20filters.3F/near/165671520\">here</a>, however I have not seen it referenced much outside of that one conversation. Would the proper way to implement that involve returning the resource with a \"REDACTED\" meta field in the bundle, but allowing for a full non-redacted read on that resource using the READ interaction for legitimate uses of that soft-deleted resource?</p>",
        "id": 219896243,
        "sender_full_name": "Brian Forbis",
        "timestamp": 1607977025
    },
    {
        "content": "<p>I don</p>",
        "id": 219897432,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1607977642
    },
    {
        "content": "<p>I don't recall ever having discussion about this.</p>",
        "id": 219897450,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1607977654
    },
    {
        "content": "<p>No, resource that are entered-in-error MUST be returned by searches, otherwise downstream systems would not be able to fix their copies (if they retain copies)</p>",
        "id": 219903398,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1607980739
    },
    {
        "content": "<p>I wasn't referring to removing the entries entirely from the search, that conversation I linked goes into great detail into why that is a bad idea.. There was a comment in that thread about returning a REDACTED resource, as the attributes aside from \"id\" and \"status\" may no longer be relevant or pose patient safety risks to return.</p>",
        "id": 219904680,
        "sender_full_name": "Brian Forbis",
        "timestamp": 1607981385
    },
    {
        "content": "<p>Oh got it, sorry I misunderstood</p>",
        "id": 219911836,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1607985115
    }
]