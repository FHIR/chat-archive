[
    {
        "content": "<p>I am writing StructureDefinitions for logical models.  Is there a way to define a choice in which each individual option is a BackBone element?</p>\n<p>Looking through some of the resources, I haven't found any examples.  Most things that have a choice (e.g., value[x]) list out the options as an array in the \"type\" field -- which works if the choice option is a named resource, datatype, or primitive -- but doesn't work so well if it is structure defined inline using BackboneElement.</p>\n<p>Is there a way to do this using foo[x]?  If not, is there another way?  Could I define the individual elements (fooBar, fooBaz, fooBat, etc) and then use invariants to specify it's choice?  Or is there some fancy way to do it with slicing?</p>",
        "id": 153853435,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1476988241
    },
    {
        "content": "<p>I'm not exactly sure what you're trying to do. We don't use BackboneElement in logical models because we don't think modifierExtensions make sense. Perhaps you disagree with that? </p>",
        "id": 153853452,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1476992040
    },
    {
        "content": "<p>but how are you writing the logical models?</p>",
        "id": 153853453,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1476992053
    },
    {
        "content": "<p>We use BackboneElement because we want an inline nested structure (an example in FHIR resources would be that Patient.contact is a BackboneElement).  Is there something else I should use instead?</p>",
        "id": 153853481,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1476993427
    },
    {
        "content": "<p>However inline nested structures get represented, we want to be able to say that there is a choice between some of them (in other words, you must use one or the other, but not both).</p>",
        "id": 153853486,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1476993581
    },
    {
        "content": "<p>well, you can use Element for an inline nested structure. You don't need to use BackboneElement</p>",
        "id": 153853508,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1476996176
    },
    {
        "content": "<p>but I see that I was missing the point. </p>",
        "id": 153853514,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1476996332
    },
    {
        "content": "<p>the only way to do choice between inline types (whether using BackboneElement or Element) is to use an invariant</p>",
        "id": 153853515,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1476996369
    },
    {
        "content": "<p>Thanks, Grahame.  Yes, actually Element would be more appropriate.  I think that because I always saw resources using BackboneElement, I didn't think to use the more appropriate plain Element.  I'll switch over to that.  And thanks for confirming that invariant is the only way to allow choice between inline types.</p>",
        "id": 153853745,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1477081814
    },
    {
        "content": "<p>np</p>",
        "id": 153853749,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1477083374
    }
]