[
    {
        "content": "<p>We have a case where a client wishes to create an extension for a data element that already exists, but it's across a relationship on a different resource, so it would be computationally expensive to retrieve. I'd like to suggest some other approach, e.g., creating query bundles so you can get your data with one request, or using compartments to facilitate access, or using graphs to define what's expected in a particular case (query? profile?)</p>\n<p>I'm scanning the specification for guidance on performance engineering and not finding a good overview. Is there such a thing?</p>",
        "id": 154021113,
        "sender_full_name": "Jay Lyle",
        "timestamp": 1543341018
    },
    {
        "content": "<p>You might be looking for _include or you might be wanting to create an Operation</p>",
        "id": 154021115,
        "sender_full_name": "John Moehrke",
        "timestamp": 1543341114
    },
    {
        "content": "<p>Be aware that using extensions for data that already exists in core means that you're trading interoperability for performance.</p>",
        "id": 154021117,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1543341418
    },
    {
        "content": "<p>My concern exactly, and not just with others, but internally:  the reconciliation of instances of a field that shows up in two places sounds unpleasant.</p>",
        "id": 154021125,
        "sender_full_name": "Jay Lyle",
        "timestamp": 1543343504
    },
    {
        "content": "<p>I'm not sure what advice you're looking for. Extensions are often created for denormalization for performance reasons. We can't solve the integrity issues associated with that kind of denormalization....</p>",
        "id": 154021451,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1543457962
    }
]