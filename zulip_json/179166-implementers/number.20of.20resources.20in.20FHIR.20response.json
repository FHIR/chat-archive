[
    {
        "content": "<p>does FHIR IG talks about number of resources that should be part of a response? i mean do we must support count, or paging?</p>",
        "id": 265668874,
        "sender_full_name": "Lital Inghel",
        "timestamp": 1640081905
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/search.html#count\">http://build.fhir.org/search.html#count</a> is pretty clear on this: servers don't have to support paging, but if they support any search capabilities at all, they SHALL support _count and return the specified max amount of responses.</p>",
        "id": 265670307,
        "sender_full_name": "René Spronk",
        "timestamp": 1640082930
    },
    {
        "content": "<p>More specifically, return <em>no more than</em> the specified max amount of 'matching' resources.  They can return less.  And _count doesn't control the number of _include and _revinclude resources.</p>",
        "id": 265691352,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1640097308
    },
    {
        "content": "<p>so _count is a shall? couldn't see that in the IG</p>",
        "id": 265692688,
        "sender_full_name": "Lital Inghel",
        "timestamp": 1640098029
    },
    {
        "content": "<p>It states \"NOTE: This means that all servers that support search or history SHALL support checking the _count parameter. \"</p>",
        "id": 265692863,
        "sender_full_name": "René Spronk",
        "timestamp": 1640098122
    },
    {
        "content": "<p>interesting, I think in R4 (which is the version I'm working on) it has different wording<br>\n<a href=\"/user_uploads/10155/fXQZ87HIL1ZefzQEUT3WTquf/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/fXQZ87HIL1ZefzQEUT3WTquf/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/fXQZ87HIL1ZefzQEUT3WTquf/image.png\"></a></div>",
        "id": 267501425,
        "sender_full_name": "Lital Inghel",
        "timestamp": 1641849522
    },
    {
        "content": "<p>does _count specify the max total or the max of the primary search resources? Meaning if I query on X and _include X.references to Y... the resulting bundle will include both X and Y resources. Is _count a limit on X or the limit on X plus Y?</p>",
        "id": 276347480,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648048121
    },
    {
        "content": "<p>just X</p>",
        "id": 276347561,
        "sender_full_name": "Paul Church",
        "timestamp": 1648048153
    },
    {
        "content": "<p>I like that answer, but am not sure everyone sees it that way.</p>",
        "id": 276347661,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648048196
    },
    {
        "content": "<p>there is no ambiguity, \"In the same way, the _count parameter only applies to resources with entry.search.mode = search, and does not include included resources or operation outcomes.\" from <a href=\"http://hl7.org/fhir/search.html#count\">http://hl7.org/fhir/search.html#count</a></p>",
        "id": 276347976,
        "sender_full_name": "Paul Church",
        "timestamp": 1648048309
    },
    {
        "content": "<p>ah, the critical statement</p>\n<blockquote>\n<p>...  and does not include included resources or operation outcomes.</p>\n</blockquote>",
        "id": 276348254,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648048405
    },
    {
        "content": "<p>excellent. this is what I was hoping, as it assures paging is by full counts of the primary thing I am searching on.</p>",
        "id": 276348464,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648048478
    },
    {
        "content": "<p>It makes _revinclude super dangerous.  A _count of 100 can still result in a Bundle of 10k+</p>",
        "id": 276362516,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1648053371
    },
    {
        "content": "<p>understood.</p>",
        "id": 276364758,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648054161
    },
    {
        "content": "<p>yeah revinclude is very tricky - the Google implementation retrieves one page of 100 for each revinclude clause, and then stops because you have to draw the line somewhere and there's no non-arbitrary way to choose</p>",
        "id": 276368191,
        "sender_full_name": "Paul Church",
        "timestamp": 1648055342
    },
    {
        "content": "<p>I suppose you could return fewer primary resources than count, to account for a very large number of secondary resources, but that only means it works until you run into that one primary resource with thousands of revinclude secondary resources.</p>",
        "id": 276387673,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1648063710
    },
    {
        "content": "<p>that is what I was trying to make very clear. systems that return less than _count of the primary will make paging not functional.</p>",
        "id": 276393918,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648066701
    },
    {
        "content": "<p>Return less that _count is ok, it is explicitly called out in the specs '...but may return less than the client requested.'</p>",
        "id": 276405312,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1648072096
    },
    {
        "content": "<p>Returning less than _count won't break pagination - the client has to trust that the next link provided by the server is appropriate for the actual page size.</p>",
        "id": 276421862,
        "sender_full_name": "Paul Church",
        "timestamp": 1648083300
    },
    {
        "content": "<p>well, if the UI is fixed at 10 entries, and you return 9... that does, in my view, break pagination. I asked for 10 because I have a UI that shows 10.</p>",
        "id": 276471412,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648126762
    },
    {
        "content": "<p>The _count is the way I can tell the server that I really want 10... I get that there can be exceptions, but I think it is better to put the hard-problem on the server.</p>",
        "id": 276471621,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648126828
    },
    {
        "content": "<p>an ask for _count of 10 really should be strongly urged to return 10 (except, clearly, for the last page).</p>",
        "id": 276471704,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648126859
    },
    {
        "content": "<p>I doubt many implementations will arbitrarily return you 9 resources when you request 10, but many may cap you at say 100 were you to request _count=1000000. The server needs to protect itself from overruns.</p>",
        "id": 276479459,
        "sender_full_name": "Craig McClendon",
        "timestamp": 1648130575
    },
    {
        "content": "<p>Correct. In practice the returned page size is max(client-side _count, server-side page max size). That's also what the FHIR spec defines. <br>\nIf as a client you assume that a server will always return 10 hits, you'll be in for a surprise..</p>",
        "id": 276484462,
        "sender_full_name": "René Spronk",
        "timestamp": 1648132650
    },
    {
        "content": "<p>not saying that exceptions won't be appropriately handled.. just wanted to make clear that the requested _count is first the count of primary resources (vs requested _include/_revinclude additions), and second that the server is expected to fill out _count sized pages when possible. - if these were not true, then I would question why we have a _count parameter at all.</p>",
        "id": 276500385,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648138736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191372\">René Spronk</span> <a href=\"#narrow/stream/179166-implementers/topic/number.20of.20resources.20in.20FHIR.20response/near/276484462\">said</a>:</p>\n<blockquote>\n<p>Correct. In practice the returned page size is max(client-side _count, server-side page max size). That's also what the FHIR spec defines. </p>\n</blockquote>\n<p>Isn't that <code>min(client-side _count, server-side page max size). </code>?</p>",
        "id": 276500741,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1648138869
    },
    {
        "content": "<p>the number of Resources in a search set can be larger than _count... in that the primary resources would not be more than _count.</p>",
        "id": 276501541,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648139168
    },
    {
        "content": "<p>I don't think there is anything about the min.</p>",
        "id": 276501578,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648139186
    },
    {
        "content": "<p>I meant the number of primary resources returned is the smallest of of client-side count, server-side page max, and actual number of matches.</p>",
        "id": 276501741,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1648139274
    },
    {
        "content": "<p>_count says \"don't give me more than this\".  The server is <em>always</em> allowed to send you less, and is under no obligation to try to provide the number you asked for.</p>",
        "id": 276502371,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1648139516
    },
    {
        "content": "<p>An example for sending less that client-requested _count ---- Imagine the result set in the bundle was a set of VERY large Binary resources; the server may choose to optimize the number of these it sends to minimize it's internal memory footprint, and/or HTTP transfer payload, etc.</p>",
        "id": 276514370,
        "sender_full_name": "John Silva",
        "timestamp": 1648143927
    }
]