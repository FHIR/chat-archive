[
    {
        "content": "<p>Hello everyone,</p>\n<p>I'm new to FHIR so apologies if this question has been asked before. Any ideas of to add the $docref operation to the DocumentReference call in C# code? Any examples? I'm currently reviewing the FHIR Library but can't find much.</p>\n<p>We need something like this <a href=\"http://fhir.cerner.com/millennium/dstu2/infrastructure/document-reference/#example-3\">http://fhir.cerner.com/millennium/dstu2/infrastructure/document-reference/#example-3</a> where we are passing the CCD LOINC code to get a CCD from Cerner. It looks like by default $docref isn't included in the DocumentReference call so instead of a CCD we are getting back documents.</p>\n<p>Thanks in advance,</p>\n<p>Victor</p>",
        "id": 214879467,
        "sender_full_name": "Victor Castillo",
        "timestamp": 1603909867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> <span class=\"user-mention\" data-user-id=\"203235\">@Ward Weistra</span></p>",
        "id": 214882118,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1603911227
    },
    {
        "content": "<p>something like <code>client.TypeOperation( \"DocumentReference\", \"docref\", . . . .)</code></p>",
        "id": 214882290,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1603911299
    },
    {
        "content": "<p>This is a snippet of the code for reference, it returns documents but no CCD since I'm not passing $docref:</p>\n<div class=\"codehilite\"><pre><span></span><code>   public async Task&lt;WrappedApiResponseBody&gt; GetCcda(GetCcdaRequest request, Connection connection)\n    {\n        #region Validate inputs\n\n        try\n        {\n            ValidateInputs(request, connection);\n        }\n        catch (ArgumentNullException e)\n        {\n            Log.Error(e);\n            throw;\n        }\n        catch (ArgumentException e)\n        {\n            Log.Error(e);\n            throw;\n        }\n\n        #endregion\n\n        #region Query for DocumentReferences\n\n        var client = await BuildFhirClient(connection);\n\n        var results = await Search(client, request);\n\n        #endregion\n\n        #region Return bundle\n\n        return new WrappedApiResponseBody(results.ToJson(), null);\n\n        #endregion\n    }\n</code></pre></div>",
        "id": 214883121,
        "sender_full_name": "Victor Castillo",
        "timestamp": 1603911662
    },
    {
        "content": "<p>See my answer above - use  <code>TypeOperation</code> to call $docref</p>",
        "id": 214883435,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1603911781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"359731\">@Victor Castillo</span> Also feel welcome to join the <a class=\"stream\" data-stream-id=\"179171\" href=\"/#narrow/stream/179171-dotnet\">#dotnet</a> stream for a C# crowd!</p>",
        "id": 214950615,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1603968445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191912\">Michele Mottini</span> <a href=\"#narrow/stream/179166-implementers/topic/.24docref.20operation/near/214883435\">said</a>:</p>\n<blockquote>\n<p>See my answer above - use  <code>TypeOperation</code> to call $docref</p>\n</blockquote>\n<p>Hey Michele, </p>\n<p>I tested your suggestion but TypeOperation returns a Resource instead of a Bundle. Do you have any other idea of how we can accomplish this? </p>\n<p>Thanks, </p>\n<p>Victor</p>",
        "id": 215028317,
        "sender_full_name": "Victor Castillo",
        "timestamp": 1604005764
    },
    {
        "content": "<p>Bundles are resources, cast the returned value (assuming the server actually returned a bundle)</p>",
        "id": 215030242,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1604006622
    }
]