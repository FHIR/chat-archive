[
    {
        "content": "<p>Hi,<br>\nI'm looking for a description on what it means to do ValueSet binding on CodableConcept-level vs on Coding level vs on code level. As an example: I want to do a required binding on MedicationRequest.reasonCode. It seems possible to do it on CodableConcept level or Coding or code. I want to allow one or more codes and optionally a text but all codes must code from one required ValueSet. How would you profile it, and what is the actual difference to do binding on CodableConcept level or Coding?</p>",
        "id": 207137792,
        "sender_full_name": "Elisabeth Adelgren",
        "timestamp": 1597668047
    },
    {
        "content": "<p>If you want to get really creative with slicing you may want to only bind a specific coding or code in a codableconcept, but to my knowledge you normally just want to bind whichever datatype you have in the resource (i.e. if you want to bind MedicationRequest.status you must bind on the code level) <br>\nAnd with your usecase it sounds like you just want to bind CodableConcept without any slicing or anything.</p>",
        "id": 207157497,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1597678051
    },
    {
        "content": "<p>When you bind on CodeableConcept  the constraint is that <strong>at least one</strong> coding will/should/preferred etc from the value set. This allows alternate values from other value sets in other instances of coding.<br>\nIf you bind Coding the effect is different because Coding contains only a single code and system.</p>",
        "id": 207234705,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1597738934
    },
    {
        "content": "<p>If you have a required binding on MedicationRequest.reasonCode.coding you are saying that all codes will come from your value set. Unless you make the cardinality of coding 1..*, it will still be possible to just supply text.</p>",
        "id": 207234899,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1597739087
    },
    {
        "content": "<p>MedicationRequest.reasonCode is 0..* To say that <strong>every</strong> reasonCode has at least one value from your value set, and translations are permitted from other value sets, bind reasonCode. <br>\nTo say that every reasonCode has at least one value from your value set, and any translations come from the same value set, bind reasonCode.coding.</p>",
        "id": 207235299,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1597739398
    },
    {
        "content": "<p>Prohibiting translations reduces interoperability, and should be done sparingly.</p>",
        "id": 207235416,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1597739452
    },
    {
        "content": "<p>This was news to me, that binding on CodableConcept level means \"at least one\" and this clarifies a lot! Seems that we should bind on Coding level. Thanks for the explanation :-)</p>",
        "id": 207254204,
        "sender_full_name": "Elisabeth Adelgren",
        "timestamp": 1597754749
    },
    {
        "content": "<p>It seems to me your requirement is satisfied by binding at the CodableConcept level, as you are guaranteed that every MedicationRequest.reasonCode will have a value from your value set. Why do you think you need to prohibit possible translations?</p>",
        "id": 207263925,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1597759941
    },
    {
        "content": "<p>You shouldn't ever bind on 'code' if it appears inside a Coding.  You only bind an element of type 'code' if it's stand-alone (e.g. Patient.gender).  If you're dealing with Coding.code, the binding can't apply to the code alone because it also has to apply to the system.</p>",
        "id": 207795039,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1598223190
    }
]