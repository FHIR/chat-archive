[
    {
        "content": "<p>I've been creating some FHIR packages for the Flutter platform (<a href=\"https://pub.dev/publishers/fhirfli.dev/packages\">https://pub.dev/publishers/fhirfli.dev/packages</a>). One of them is for RESTFul requests. I've been trying to create a way to enable easier querying, and I'm comfortable with what I have (create, delete, patch, transaction, etc) but not for searching. </p>\n<p>I've thought about just letting anyone pass in a json map object as search parameters, but then I run the risk that they haven't formatted their values correctly (plus prefixes and whatnot). In the other direction, I could become extremely prescriptive, having a class object for composite, date, number, etc. That would include the value and any prefixes that were allowed. Something like this:<br>\nclass SearchDate{<br>\n  DateTime date;<br>\n  bool missing;<br>\n  DatePrefix prefix;<br>\n}</p>\n<p>enum DatePrefix {<br>\n  eq,<br>\n  ne,<br>\n  gt,<br>\n  lt,<br>\n  ge,<br>\n  le,<br>\n  sa,<br>\n  eb,<br>\n  ap,<br>\n}</p>\n<p>Then I would have a class for each resource that can be searched for, along with fields of lists for each value that can be searched for:<br>\nPatientSearch {<br>\n  List&lt;Id&gt; id;<br>\n  List&lt;searchDate&gt; lastUpdated;<br>\n  List&lt;searchToken&gt; deceased;<br>\n  List&lt;searchReference&gt; link;<br>\n...<br>\n}</p>\n<p>But together all of that feels pretty cumbersome. I guess I'm looking for some middle ground (or just some direction). Does anyone else know of an implementation that has done something like this that I could look at?</p>",
        "id": 223255291,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1611075212
    },
    {
        "content": "<p>Pass the search parameters as simple strings - don't over-think it</p>",
        "id": 223276473,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1611083210
    }
]