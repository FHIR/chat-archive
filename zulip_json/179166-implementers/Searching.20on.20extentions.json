[
    {
        "content": "<p>Is there something we should consider doing to define a standard pattern that exposes extensions to search? (Just thinking aloud here - e.g. <code>?extension-string={{uri}}$value</code>) The implication wouldn't necessarily be that servers should index every extension, but it could be nice to have some common pattern for when such indexing was desirable.) </p>",
        "id": 153834328,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466680538
    },
    {
        "content": "<p>i see several problems with that. we've otherwise followed the map/reduce approach, and there's parameter types and modifiers. Introducing thie new approach is going to challenge these things</p>",
        "id": 153834330,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466680735
    },
    {
        "content": "<p>and it helps how? </p>",
        "id": 153834331,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466680747
    },
    {
        "content": "<p>Its helps for reference servers and data warehouses that want to offer powerful search across lots of FHIR data that may not aways be well specified ahead of time. That's a very practical thing, to say \"here's a store where  you can write anything you want, and have it available and sharable and searchable  in convenient ways.\"  yes, there are parameter types, but these are explicit in the extensions value[x], so I don't see a hard constraint there. I'd be most worried about whether the syntax could be made useable. </p>",
        "id": 153834336,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466681167
    },
    {
        "content": "<p>but if they are exposing the extensions, they can expose them with a name using the existing infrastructure</p>",
        "id": 153834340,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466681831
    },
    {
        "content": "<p>But the server  might never have seen these extensions until a client posts them.  So a convention would be useful (I'm not sure I see how to make this work without a convention -- even if the convention itself is not standardized). </p>",
        "id": 153834341,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466681947
    },
    {
        "content": "<p>It's similar to how clients can add arbitrary tags and make their resources searchable via standard FHIR. Only, tags have very limited semantics (no dates, or codes for example). </p>",
        "id": 153834343,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466682045
    },
    {
        "content": "<p>I would suggest that you would at least want a profile with the extensions defined in them, and use the names from these.</p>",
        "id": 153834344,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466683191
    },
    {
        "content": "<p>Grahame's question on how to know which type of search parameter processing to use if not defined.</p>",
        "id": 153834345,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466683220
    },
    {
        "content": "<p>Do like the idea though</p>",
        "id": 153834346,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466683332
    },
    {
        "content": "<p>It would have to be part of the query syntax (like \"extension-string\" or \"extension-dateTime\"). </p>",
        "id": 153834347,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466683335
    },
    {
        "content": "<p>That was the concept anyway. </p>",
        "id": 153834348,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466683343
    },
    {
        "content": "<p>Using names from a profile: which name is guaranteed to be unique (other than the url)? </p>",
        "id": 153834349,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466683410
    },
    {
        "content": "<p>The one in the structuredefinition of the profile.</p>",
        "id": 153834350,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466683451
    },
    {
        "content": "<p>But, I mean globally unique? </p>",
        "id": 153834351,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466683465
    },
    {
        "content": "<p>(means you have to use a profile to define searchable content, but that seems to make sense to me)</p>",
        "id": 153834352,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466683478
    },
    {
        "content": "<p>But for a generic server to work, it couldn't just take names from StructureDefinition right? Because they could clash across 2 StructureDefinitions? </p>",
        "id": 153834354,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466683526
    },
    {
        "content": "<p>Hence my comment that its a single profile for the searchable content (and add in any extensions that you want to support searching with)</p>",
        "id": 153834355,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466683562
    },
    {
        "content": "<p>But I'm not following: different clients will post different resources with different extensions, and new ones all the time. Where would the server's \"single profile\" come from? </p>",
        "id": 153834356,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466683638
    },
    {
        "content": "<p>And these would need to be in the searching profile.</p>",
        "id": 153834358,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466683694
    },
    {
        "content": "<p>It's just an idea off the cuff, i'm sure there are issues with it too.</p>",
        "id": 153834359,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466683727
    },
    {
        "content": "<p>Yeah, I think the conflict resolution is a challenge there. </p>",
        "id": 153834361,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466683787
    },
    {
        "content": "<p>The search profile would need to be manually created covering all the extensions on the server, and extensions that hadn't been seen wouldnt be available without updating the search profile.<br>\nYes, these are the holes, but its just an idea.</p>",
        "id": 153834362,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466683803
    },
    {
        "content": "<p>Not sure what you mean by conflict resolution there.</p>",
        "id": 153834363,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466683818
    },
    {
        "content": "<p>I think the real question Josh has is, the servers will all name extension search parameters differently. </p>",
        "id": 153834364,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466683865
    },
    {
        "content": "<p>too bad for clients. really. </p>",
        "id": 153834365,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466683870
    },
    {
        "content": "<p>Manual  curation to resolve the case where two extensions want to use the same \"name\" - means that clients don't have a procedure to follow. And the \"right\" queries differs from server to server. </p>",
        "id": 153834366,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466683877
    },
    {
        "content": "<p>Yes, what <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> said :) </p>",
        "id": 153834367,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466683887
    },
    {
        "content": "<p>we could denormalise this by putting a search name on the extension definition</p>",
        "id": 153834368,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466683933
    },
    {
        "content": "<p>But unless the search name was globally unique, we still have conflicts, no? </p>",
        "id": 153834369,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466683968
    },
    {
        "content": "<p>that doesn't solve all a client's problems, but there is a facility in the conformance statement for remapping search names. So you could say, use the extension defined name, but we recommend the client consults the conformance statement for certainty</p>",
        "id": 153834370,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466683985
    },
    {
        "content": "<p>or you can just say, if you want this, the clients haev to read the conformance statement, and you can always know because you will find the extension url in the conformane statement </p>",
        "id": 153834371,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684023
    },
    {
        "content": "<p>that would be much more consistent with our intended approach </p>",
        "id": 153834372,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684046
    },
    {
        "content": "<p>That's true. Can you help us see why it would better the extension url as a \"search name\"?</p>",
        "id": 153834373,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466684080
    },
    {
        "content": "<p>specifically, that means that you look at the search parameters, and if Conformance.rest.resource.searchParam.definition is the url, then you know the search parameter name to use </p>",
        "id": 153834374,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684110
    },
    {
        "content": "<p>not sure what you're asking there</p>",
        "id": 153834375,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684126
    },
    {
        "content": "<p>Would we include something in the conformance statement that said, we support searching any property, including extensions.</p>",
        "id": 153834376,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466684177
    },
    {
        "content": "<p>And should that go into the filter section?</p>",
        "id": 153834377,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466684195
    },
    {
        "content": "<p>The procedure you're describing makes senses and it works. It also relies on a level of indirection (asking the server to map extension URLs to query parameter names) that could be avoided by using a convention. I'm just probing that choice. </p>",
        "id": 153834378,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466684227
    },
    {
        "content": "<p>uh? but you can't support 'everything'. Want to take a fluent path search? </p>",
        "id": 153834379,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684245
    },
    {
        "content": "<p>Is that something that CQL wants to do too?</p>",
        "id": 153834380,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466684279
    },
    {
        "content": "<p>no. and please no </p>",
        "id": 153834381,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684296
    },
    {
        "content": "<p>Well, \"fluent path search\" wouldn't be  indexable (because productions are unbounded). </p>",
        "id": 153834382,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466684297
    },
    {
        "content": "<p>Searching based on (all) extentions could be indexed and made performant in some data warehouse environmentally at least. </p>",
        "id": 153834383,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466684330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> : well, it makes for simpler syntax in the search, which is a known problem already. and it leverages the existing system - and clients are already supposed to check the conformance statement. (though size is a known problem). And it means the servers can continue to use the map/reduce based system which has real advantages. and it means that the type of the search parameter is known, and there's no problems with guessing the search name, or imposing glbal unqieuness, which is a problem we've explored before </p>",
        "id": 153834384,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684382
    },
    {
        "content": "<p>I'm not sure that searching based on all extensions is a particularly boundable problem either. but the scheme I'm outlining does make it work&lt;, I think </p>",
        "id": 153834385,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684435
    },
    {
        "content": "<p>I can't follow  what you mean about map/reduce. Why would a naming convention change the viability of your indexing strategy ? </p>",
        "id": 153834386,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466684443
    },
    {
        "content": "<p>not so much the naming converntion as boudning the problem, saying, 'these are the names we search on'. Using auto-genreated names makes it unclear whether it's a bounded problem. If you think of it as a bounded problem, only with controlled names, then that's not a factor. but that wasn't obvious to me</p>",
        "id": 153834387,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684526
    },
    {
        "content": "<p>It's bounded by the size of your resource data! </p>",
        "id": 153834388,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466684556
    },
    {
        "content": "<p>so you do it on the fly? you better have a good naming system. So much fun. I prefer just declaring the assigned name in the conformance resource</p>",
        "id": 153834390,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684600
    },
    {
        "content": "<p>When you say \"good naming system\" I'm still trying to understand why extension URLs aren't  \"good names\" in this sense. </p>",
        "id": 153834391,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466684635
    },
    {
        "content": "<p>(On teh size of the conformance statement, did you see the tracker I looged suggesting that we should be able to filter the conformance statement to reduce its size, just to a specific resource type)</p>",
        "id": 153834392,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466684663
    },
    {
        "content": "<p>the full url? they're great names, but we now khow well people amange syntax in URLs. also, extensions may not have fixsed types</p>",
        "id": 153834393,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684680
    },
    {
        "content": "<p>yes I did. </p>",
        "id": 153834394,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684720
    },
    {
        "content": "<p>Extension Values have fixed types in instance data though and searches could be tied to those (that is, you'd writer a search to find string values, or dates values) . Re URLs in URLs, yes it's a pain but we already live this pain every time we search by token types (embedding codings as search parameters). </p>",
        "id": 153834396,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466684781
    },
    {
        "content": "<p>so you're only going to solve a subset of this problem, then, only for when the data is already known. And as the data grows, the searches get altered? </p>",
        "id": 153834397,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684847
    },
    {
        "content": "<p>sounds like a problem to me</p>",
        "id": 153834398,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684857
    },
    {
        "content": "<p>I wasn't suggesting searches would 'get akterrd\". Or that those is a subset of the problem. </p>",
        "id": 153834399,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466684911
    },
    {
        "content": "<p>Today when we have choice types in fhir, we have multiple search parameters (one per type). Like Observation value-xxx. The thing I'm describing with extensions is totally equivalent. </p>",
        "id": 153834401,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466684950
    },
    {
        "content": "<p>but it seems to me that you are making assumptions that mean it will be a subset of the problem </p>",
        "id": 153834402,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684954
    },
    {
        "content": "<p>e.g. the server knows how to search because the of the data it already has. Ergo, new data revise the search method </p>",
        "id": 153834404,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466684972
    },
    {
        "content": "<p>I'm not seeing how the method is \"revised\"  by new data. The method is always \"index each incoming resource based on the extension value[x]s found inside\". You'd never go back and revise or change results,  because they'd remain correct until a resource's content changed. </p>",
        "id": 153834405,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466685050
    },
    {
        "content": "<p>hmm I misread you, I think. so you're thinking about </p>\n<div class=\"codehilite\"><pre>GET Observation?code=XXX&amp;http://acme.org/fhir/StructureDefinition/my-long-extension-name-string=yyyy\n</pre></div>",
        "id": 153834407,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466685444
    },
    {
        "content": "<p>How would I know which search type to use on the item? a string property could be a token or string</p>",
        "id": 153834408,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466685575
    },
    {
        "content": "<p>that's the -string at the end. it doesn't really stand out does it?</p>",
        "id": 153834409,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466685646
    },
    {
        "content": "<p>ok, I think I get it too.</p>",
        "id": 153834413,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466685686
    },
    {
        "content": "<p>I guess I could implement that for some extensions (I wouldn't necessarily do all of them). I'd like a syntax that makes the type stand out rather than using a character that is part of a valid resoruce id</p>",
        "id": 153834418,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466685929
    },
    {
        "content": "<p>Yes that's the basic idea I was trying to get across. Agreed, making the type stand out (and parseable separate from the extension URL, unambiguously) would clearly help :-)</p>",
        "id": 153834455,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466693235
    },
    {
        "content": "<p>OK for the rest of us ...can you point out in your generic notation and example where the type would be?</p>",
        "id": 153834530,
        "sender_full_name": "Eric Haas",
        "timestamp": 1466703639
    },
    {
        "content": "<p>(grahame's example was cut off  too )  </p>",
        "id": 153834531,
        "sender_full_name": "Eric Haas",
        "timestamp": 1466703679
    },
    {
        "content": "<p>Sure <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> ! I was thinking, imagine you have a resource like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;resourceType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Patient&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;extension&quot;</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"nt\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://example.com/astrological-sign&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;valueCoding&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;system&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://example.com/astrology/signs&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;code&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;pisces&quot;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://example.com/favorite-word&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;valueString&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;supercalifragilisticexpialidocious&quot;</span>\n  <span class=\"p\">}]</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Then you could write queries like (and don't take my syntax too literally, please):</p>\n<div class=\"codehilite\"><pre><span></span>GET /Patient?_extension=http://example.com/astrological-sign$coding$pisces\nGET /Patient?_extension=http://example.com/favorite-word$string:contains$cali\n</pre></div>",
        "id": 153834539,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466705879
    },
    {
        "content": "<p>I would have thought that this would be better:</p>\n<div class=\"codehilite\"><pre>GET /Patient?http://example.com/astrological-sign$coding=pisces\n</pre></div>",
        "id": 153834571,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466716547
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 153834575,
        "sender_full_name": "Eric Haas",
        "timestamp": 1466716807
    },
    {
        "content": "<p>nm</p>",
        "id": 153834576,
        "sender_full_name": "Eric Haas",
        "timestamp": 1466716856
    },
    {
        "content": "<p>IMO - using the existing SearchParameter infrastructure and allowing clients to easily query for the extension they're after would be preferable...</p>",
        "id": 153834577,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1466717113
    },
    {
        "content": "<p>Yes that's nice! I said not to take my syntax too seriously :) </p>",
        "id": 153834579,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466717306
    },
    {
        "content": "<p>Could be, <span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span>! But I'm not sure the \"easy\" aspect is what is most appealing about the two step process in our current infrastructure :-)</p>",
        "id": 153834581,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466717510
    },
    {
        "content": "<p>I'm thinking about access control...we currently secure by SearchParameter...this is unbounded</p>",
        "id": 153834582,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1466717542
    },
    {
        "content": "<p>Also indexing, but that could be handled...</p>",
        "id": 153834583,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1466717554
    },
    {
        "content": "<p>Might be better for a server that wants wide flex on this to just create new SearchParameters whenever a new extension is encountered....</p>",
        "id": 153834584,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1466717594
    },
    {
        "content": "<p>not necessarily. You'd still actually need to support this with a SearchParameter. In essence, this is just an approach to fixing the name that the server declares in it's search parameter in order to allow a client to skip the reflection step  if it wants</p>",
        "id": 153834585,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466717609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> were you expecting that?</p>",
        "id": 153834586,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1466717660
    },
    {
        "content": "<p>Yes, I was expecting that servers *could* still expose this information in Metadata. </p>",
        "id": 153834593,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466718602
    },
    {
        "content": "<p>I think Grahame is saying *must*.</p>",
        "id": 153834594,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1466718630
    },
    {
        "content": "<p>I mean, that wouldn't bother me, if clients aren't required to invoked it :p</p>",
        "id": 153834595,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466718671
    },
    {
        "content": "<p>Fair enough...so the server (or some actor) would have to create these as extensions are encountered...</p>",
        "id": 153834596,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1466718738
    },
    {
        "content": "<p>Could do this today</p>",
        "id": 153834598,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1466718761
    },
    {
        "content": "<p>As in \"no deep architectural  impediments\", or \"less than 4 hours of work\"?  ;) </p>",
        "id": 153834599,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466718835
    },
    {
        "content": "<p>Yes?</p>",
        "id": 153834600,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1466718860
    },
    {
        "content": "<p>:p</p>",
        "id": 153834601,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466718885
    },
    {
        "content": "<p>It's not going to be terribly portable though</p>",
        "id": 153834602,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1466718918
    },
    {
        "content": "<p>I didn't quite say 'must', Servers are allowed to support search parameters they don't declare. </p>",
        "id": 153834618,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466724130
    },
    {
        "content": "<p>I've had a chance to think overnight on this, and I don't like it anymore.<br>\nIts trying to say that here is a naming convention for search parameters that is excplicit for extensions.<br>\nWhy do we not have the same thing for regular fields too?</p>\n<div class=\"codehilite\"><pre>GET /Patient?animal.genderStatus=intact\n</pre></div>",
        "id": 153834685,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466732023
    },
    {
        "content": "<p>This of course clashes with the chained search parameters, but I guess so do the URLs with dots in them.</p>",
        "id": 153834686,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466732066
    },
    {
        "content": "<p>Regular search params don't always point to a single path (they can be <code>Observation.code | Observation.component.code</code> for example), so the simple rule wouldn't quite work. That said, <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span>:  I would rather see some conventions on how regular search params were named, too (but I think that ship has sailed).</p>",
        "id": 153834691,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466733350
    },
    {
        "content": "<p>Agreed.</p>",
        "id": 153834704,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466735053
    },
    {
        "content": "<p>Then again, if you're defining an extension, maybe you should be defining a search name to use also.</p>",
        "id": 153834706,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466735096
    },
    {
        "content": "<p>Then the registry would not only have the extension definition, but the search definition too.<br>\nWould that assist in resolving the issue?</p>",
        "id": 153834707,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1466735127
    },
    {
        "content": "<p>Challenge when searching by extension is that extensions can appear at different places in an instance - and you might want to search on those that appear in one location but not another (even though they'll have the same URI. </p>",
        "id": 153834750,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1466738196
    },
    {
        "content": "<p>You might!</p>",
        "id": 153834751,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466738273
    },
    {
        "content": "<p>really? is that important? </p>",
        "id": 153834752,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466738285
    },
    {
        "content": "<p>I wasn't saying I thought it was important. Just possible. I'd be fine with context-free, or nearly.</p>",
        "id": 153834755,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466738531
    }
]