[
    {
        "content": "<p>I am looking to adopt if possible or write if necessary an app that will convert data in FHIR format to a tabular format. </p>\n<p>My questions are:</p>\n<ul>\n<li>Does anybody know of any existing code for FHIR-&gt;CSV (or any other tabular format) conversion?</li>\n<li>Is this the correct stream on which to discuss this topic and if not, can anybody recommend appropriate streams?</li>\n</ul>\n<hr>\n<hr>\n<hr>\n<p>In anticipation of the \"what are you trying to do?\" question:</p>\n<p>From a statistics and data science point of view, a huge number of use cases are variations on the theme of \"the analysis-ready dataset is a single flat table where each subject is a series of one or more rows ordered in time, each variable is a column; time-invariant values are repeated\". </p>\n<p>I expect that insofar as they exist, current FHIR-&gt;CSV converters will dump each resource as a separate table. If that's the case, the gap for me to fill will be joining these separate tables on patient and encounter in a resource-aware manner (single flat table where each subject is a series of one or more rows ordered in time) and providing the user with a way to choose between the various scalar representations supported by each resource (each variable is a column) with reasonable default selections as a fallback.</p>\n<p>If this too already exists, then the thing for me to do will be to learn to use it, champion it, use it in my own research, and submit PRs to its maintainers.</p>\n<p>In summary, I'm trying to wrap my head around what's already done in FHIR-&gt;CSV export so that I am filling a genuine gap instead of duplicating anybody else's work.</p>",
        "id": 187932675,
        "sender_full_name": "Alex F. Bokov, Ph.D.",
        "timestamp": 1581441721
    },
    {
        "content": "<p><a class=\"stream\" data-stream-id=\"179219\" href=\"/#narrow/stream/179219-analytics-on-FHIR\">#analytics on FHIR</a> is likely relevant</p>",
        "id": 187933527,
        "sender_full_name": "Paul Church",
        "timestamp": 1581442229
    },
    {
        "content": "<p>FHIR data often has hierarchy, so a straight CSV conversion can be challenging and involves trade-offs.  You need to tune the conversion based on the type of analysis you intend to perform.</p>",
        "id": 187938552,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581445290
    },
    {
        "content": "<p>FHIR to CSV is generally easier than the other direction, since the JSON/XML tree structures encode more entropy than a tabular format.  Generally one wants to use a utility library like <code>lodash</code> or <code>underscore</code>, and use a tree plunking function such as <a href=\"https://lodash.com/docs/4.17.15#get\" target=\"_blank\" title=\"https://lodash.com/docs/4.17.15#get\">get</a> which lets you pluck values from the JSON and map it into the CSV.  We went through and hand coded a mapping function for each of the Resources in the Common Clinical Data Set (aka Argonaut), but they're distributed among 60+ libraries.  But we've been thinking of consolidating them all into a single place.  </p>\n<p>Are you looking for every field and value in the FHIR resource mapped to CSV?  Or curating 'just the useful' stuff?  The former will result in a CSV file that has many columns and empty cells, while the later is rather subjective.</p>",
        "id": 187939299,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1581445693
    },
    {
        "content": "<p>publisher creates CSV for conformance resources.  <span class=\"user-mention\" data-user-id=\"191447\">@Mark Kramer</span>  created a flattened list too.  There are some Python packages that flatten arbitrary json, but since some resources are deeply nested it gets ugly fast with lots of indexing.</p>",
        "id": 187950954,
        "sender_full_name": "Eric Haas",
        "timestamp": 1581452658
    },
    {
        "content": "<p>Our \"data dictionary\" is created from the CIMPL source format, not from StructureDefinitions directly. In the future, we might do something similar from FHIR Shorthand, but not guarantee this will happen.</p>",
        "id": 188009078,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1581513847
    },
    {
        "content": "<blockquote>\n<p>FHIR data often has hierarchy, so a straight CSV conversion can be challenging and involves trade-offs.  You need to tune the conversion based on the type of analysis you intend to perform.</p>\n</blockquote>\n<p>The way my current <em>non-</em>FHIR, i2b2-specific app works is that some crude tuning is done up front-- e.g. is this data element numeric, does it ever use modifiers, does it ever have more than one distinct value per visit, and many other heuristics. This informs the default conversion to a scalar form, and the options for alternative conversion presented to the end-user.</p>\n<p>I imagine what will be different with FHIR is that instead of deriving it from the data and from assumptions about how most deployers of i2b2 use the available fields, the properties of each data type will be spelled out somewhere in the FHIR specification.</p>",
        "id": 188038891,
        "sender_full_name": "Alex F. Bokov, Ph.D.",
        "timestamp": 1581531936
    },
    {
        "content": "<blockquote>\n<p>Are you looking for every field and value in the FHIR resource mapped to CSV?  Or curating 'just the useful' stuff?  The former will result in a CSV file that has many columns and empty cells, while the later is rather subjective.</p>\n</blockquote>\n<p>I propose <em>starting</em> with 'just the useful stuff' so that the initial version covers at least some use-cases and then extending support to more categories with each release.</p>\n<p>For retrospective mining of patient data a tentative starting list of resources is: Condition, Procedure, Observation, Medication, Patient, and EpisodeOfCare</p>\n<p>For not-yet-supported resources some kind of graceful fallback based on what the FHIR specification says about their category, code, and value.</p>",
        "id": 188040726,
        "sender_full_name": "Alex F. Bokov, Ph.D.",
        "timestamp": 1581533153
    },
    {
        "content": "<blockquote>\n<p>The former will result in a CSV file that has many columns and empty cells</p>\n</blockquote>\n<p>I submit that this is not a technical problem, it is an inherent quality of health data that needs to be confronted by the statistician or data scientist.</p>\n<p>I guess an assumption I didn't explicitly state is that the researcher comes with a list of data elements deemed relevant to the question they are asking, they don't ask for \"all the things\". But you're right, usually there still are many columns, which is to be expected from high-dimensional data, though some columns (e.g. equivalent codes) can be merged.</p>\n<p>The empty cells I encounter most often mean one of these: </p>\n<ul>\n<li>actual missing data (left empty)</li>\n<li>negative data, such as diagnoses (can be recoded to missing=FALSE, nonmissing=TRUE)</li>\n<li>one level of a categorical variable (can be assigned an explicit code)</li>\n<li>falling during an interval between observations, like a lab or vital (can be interpolated or carried forward from previous observations if there are any within a certain time interval and left empty otherwise)</li>\n</ul>\n<p>With the rigorous definitions available for FHIR resources, it may be possible to move some of these common patterns up the pipeline to the extraction app and have them offered to the user up-front when they are first extracting the data to a tabular format.</p>",
        "id": 188044050,
        "sender_full_name": "Alex F. Bokov, Ph.D.",
        "timestamp": 1581535132
    },
    {
        "content": "<p>in general, there's more than just a technical transform that's part of the ETL to get to tabular data suitable for statistical analysis. A key part of this is that the data preparation depends on the underlying assumptions that you want to do statistics about</p>",
        "id": 188045810,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581536177
    },
    {
        "content": "<blockquote>\n<p>in general, there's more than just a technical transform that's part of the ETL to get to tabular data suitable for statistical analysis. A key part of this is that the data preparation depends on the underlying assumptions that you want to do statistics about</p>\n</blockquote>\n<p>Absolutely. As a statistician, I have observed a number of recurring patterns that I want to move to a reusable tool rather than re-written for each data analysis project.</p>\n<p>I guess my underlying assumptions are that I am analyzing a multi-variable repeated measures dataset for a cohort of patients with many missing observations and irregularly spaced visits rounded to the nearest day (though it could be other time-intervals without fundamentally changing the use-case).</p>",
        "id": 188046199,
        "sender_full_name": "Alex F. Bokov, Ph.D.",
        "timestamp": 1581536426
    },
    {
        "content": "<p>right. so there's space for a nice sophisticated ETL tool for converting data to a tabular format. I haven't thought that there's anything inherently FHIR specific about that task, so I've been expecting that off the shelf tools will be applicable to the task</p>\n<p>Of course, those tools do not avail themselves of the all the computable definitions available for FHIR content, which might help during the ETL design. I'm not sure how directly applicable that would be, but if I was looking into it, I'd be looking for some kind of open source tooling where there was a modular approach and I could write a module to inform it about FHIR content</p>",
        "id": 188046707,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581536773
    },
    {
        "content": "<blockquote>\n<p>right. so there's space for a nice sophisticated ETL tool for converting data to a tabular format. I haven't thought that there's anything inherently FHIR specific about that task, so I've been expecting that off the shelf tools will be applicable to the task</p>\n</blockquote>\n<p>FHIR brings to the table a self-documenting compatibility layer to unite i2b2, OMOP, PCORNet CDM, and of course EHR systems. All I/we need to write is a FHIR-&gt;tabular data ETL.</p>",
        "id": 188047026,
        "sender_full_name": "Alex F. Bokov, Ph.D.",
        "timestamp": 1581536981
    },
    {
        "content": "<blockquote>\n<p>I haven't thought that there's anything inherently FHIR specific about that task, so I've been expecting that off the shelf tools will be applicable to the task</p>\n</blockquote>\n<p>I probably shouldn't be emphasizing the CSV/tabular aspect of the problem. The FHIR-specific problems that a converter needs to solve are programatically generating the correct joins and transforming the cell values into data types usable for analysis.</p>",
        "id": 188066956,
        "sender_full_name": "Alex F. Bokov, Ph.D.",
        "timestamp": 1581552856
    },
    {
        "content": "<blockquote>\n<p>right. so there's space for a nice sophisticated ETL tool for converting data to a tabular format.</p>\n</blockquote>\n<p>If you're willing to go through XML rather than JSON, XSLT solutions to convert structured to tabular are common. Not that it would be hard to run XSLT over JSON, if the JSON community wasn't so vehemently opposed to using anything from the XML universe; the data models are essentially compatible. (Indeed, IBM's internal optimizing XSLT compiler (which was briefly seen as the \"Traditional Websphere\" XML Feature but otherwise sunk without a trace) was specifically designed to easily adapt to APIs other than XML's DOM and SAX. I wish we had time to revive that work...)</p>\n<p>But JSON is the structured-data notation of the day. And while the JSON community has spawned several transformation languages -- and FHIR seems to be reinventing that yet again in the mapper proposal -- as far as I know nothing has yet been strongly accepted as a base for shared effort, and they tend to focus more on transcoding within the notation than on going from one notation to another.</p>\n<p>If the FHIR mapper was farther along, I'd suggest adding text and/or CSV output capability to that, rather than being strictly FHIR-to-FHIR. </p>\n<p>Meanwhile... well, I'm writing a FHIR-JSON-to-specific-CSV converter right now, and hope to grow it or replace it with something a bit more general. I'll note here that one of the challenges of going from JSON to CSV is deciding what to do about arrays containing structures and vice versa. Exploding an array to produce multiple CSV lines makes retaining context hard and will not always be the best solution.</p>",
        "id": 188117025,
        "sender_full_name": "Joe Kesselman",
        "timestamp": 1581607884
    },
    {
        "content": "<blockquote>\n<p>FHIR brings to the table a self-documenting compatibility layer to unite i2b2, OMOP, PCORNet CDM, and of course EHR systems. All I/we need to write is a FHIR-&gt;tabular data ETL.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"263598\">@Alex F. Bokov, Ph.D.</span> Just to check: Are you familiar with the mappings between those models the Common Data Models Harmonization project is describing? <a href=\"http://build.fhir.org/ig/HL7/cdmh/cdmh-overview.html\" target=\"_blank\" title=\"http://build.fhir.org/ig/HL7/cdmh/cdmh-overview.html\">http://build.fhir.org/ig/HL7/cdmh/cdmh-overview.html</a></p>",
        "id": 188124221,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1581611925
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"263598\">Alex F. Bokov, Ph.D.</span> Just to check: Are you familiar with the mappings between those models the Common Data Models Harmonization project is describing? <a href=\"http://build.fhir.org/ig/HL7/cdmh/cdmh-overview.html\" target=\"_blank\" title=\"http://build.fhir.org/ig/HL7/cdmh/cdmh-overview.html\">http://build.fhir.org/ig/HL7/cdmh/cdmh-overview.html</a></p>\n</blockquote>\n<p>Yes.</p>\n<p>Downstream from the mappings is CD2H's proposed FHIR Result Server, and that in turn would feed data to what the CD2H calls <a href=\"https://github.com/data2health/clinical-adaptor/wiki#step-4-create-result-export-formats-cdisc-sdtm-fhir-csv\" target=\"_blank\" title=\"https://github.com/data2health/clinical-adaptor/wiki#step-4-create-result-export-formats-cdisc-sdtm-fhir-csv\">CSV/FHIR Export for Investigators</a>. I was hoping to find work-in-progress code for that app so I could help complete it but as far as I can tell it's not there yet.</p>",
        "id": 188157557,
        "sender_full_name": "Alex F. Bokov, Ph.D.",
        "timestamp": 1581631639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261143\">@Joe Kesselman</span> </p>\n<blockquote>\n<p>If you're willing to go through XML rather than JSON</p>\n</blockquote>\n<p>As far as I can tell, most of the FHIR servers can present output in either format. I have no problem going through XML.</p>\n<blockquote>\n<p>If the FHIR mapper was farther along, I'd suggest adding text and/or CSV output capability to that, rather than being strictly FHIR-to-FHIR. </p>\n</blockquote>\n<p>Do you mean the CDMH one that <span class=\"user-mention\" data-user-id=\"203235\">@Ward Weistra</span> just mentioned?</p>\n<blockquote>\n<p>Meanwhile... well, I'm writing a FHIR-JSON-to-specific-CSV converter right now, and hope to grow it or replace it with something a bit more general. I'll note here that one of the challenges of going from JSON to CSV is deciding what to do about arrays containing structures and vice versa. Exploding an array to produce multiple CSV lines makes retaining context hard and will not always be the best solutionquote</p>\n</blockquote>\n<p>Aha. This may be the collaboration I have been seeking. Do you have a repo link you could share? </p>\n<p>What are the main use-cases you have in mind for your converter?</p>",
        "id": 188158094,
        "sender_full_name": "Alex F. Bokov, Ph.D.",
        "timestamp": 1581631998
    },
    {
        "content": "<p>FHIR mapper: <a href=\"https://www.hl7.org/fhir/mapping-language.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/mapping-language.html\">https://www.hl7.org/fhir/mapping-language.html</a>. Note that its maturity is currently marked as 0; it's just getting started. I have quibbles with some of its base assertions, but it's not an unreasonable design. I don't remember the spec discussing anything but FHIR output, but in theory... I assume there's an open-source version of that in development.</p>\n<p>My draft isn't ready to go public yet, even if IBM does eventually decide to open-source it. Right now it's targeted to adapt FHIR output to a specific application which currently insists on CSV-based input, but it may be generalizable. Or it may be a stopgap, discarded while we find better answers. If we open it up, I'll make a more formal announcement; I just wanted to say \"yeah, we're considering the same issues\". (And, admittedly, couldn't resist an XML/JSON rant. I have no objection to JSON, I just wish the JSON fans were more willing to leverage all the work we put into developing XML tools.)</p>",
        "id": 188214145,
        "sender_full_name": "Joe Kesselman",
        "timestamp": 1581692994
    },
    {
        "content": "<p>The old wiki page (can't find the Confluence counterpart) on using the FHIR mapping language points to the Java and Pascal implementations: <a href=\"https://wiki.hl7.org/index.php?title=Using_the_FHIR_Mapping_Language\" target=\"_blank\" title=\"https://wiki.hl7.org/index.php?title=Using_the_FHIR_Mapping_Language\">https://wiki.hl7.org/index.php?title=Using_the_FHIR_Mapping_Language</a><br>\nThe C# one is now available as a plugin for Vonk: <a href=\"https://fire.ly/products/fhir-mapper/\" target=\"_blank\" title=\"https://fire.ly/products/fhir-mapper/\">https://fire.ly/products/fhir-mapper/</a></p>",
        "id": 188381202,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1581949165
    },
    {
        "content": "<p>If your server provides SQL on FHIR - it can be done with SQL. We have this handy operation - <a href=\"https://docs.aidbox.app/basic-concepts/bulk-api-1#usddump-sql\" target=\"_blank\" title=\"https://docs.aidbox.app/basic-concepts/bulk-api-1#usddump-sql\">https://docs.aidbox.app/basic-concepts/bulk-api-1#usddump-sql</a></p>",
        "id": 188394633,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1581959956
    }
]