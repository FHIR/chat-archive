[
    {
        "content": "<p>Can a code, in a CodeSystem have a decimal property?</p>",
        "id": 153836326,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467682871
    },
    {
        "content": "<p>What I have is a table of codes and descriptions for physical activity, such as<br>\n01003 - bicycling, mountain, uphill, vigorous</p>",
        "id": 153836327,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467682944
    },
    {
        "content": "<p>However, each code also has a METs value - sort of the calories burned doing this thing for 1 min. e.g.</p>",
        "id": 153836328,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467682983
    },
    {
        "content": "<p>Code   METS        Description01003 14.0        bicycling, mountain, uphill, vigorous</p>",
        "id": 153836329,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467683025
    },
    {
        "content": "<p>this is a set of mulitpliers for an actiivity, right? so you can take a time based observation and covert to an amount of energy? </p>",
        "id": 153836331,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467683063
    },
    {
        "content": "<p>Is METs a property of the code, and if not,  how do I associate a code in a CodeSystem with a decimal value?</p>",
        "id": 153836332,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467683066
    },
    {
        "content": "<div class=\"codehilite\"><pre>&quot;MET (Metabolic Equivalent): The ratio of the work metabolic rate to the resting metabolic rate. One MET is defined as 1 kcal/kg/hour and is roughly equivalent to the energy cost of sitting quietly.&quot;\n</pre></div>",
        "id": 153836334,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467683253
    },
    {
        "content": "<p>Yes, a multiplier. The units are fixed [kcal/kg/hour]. So if I have an observation of '01003' for 10 minutes, and another observation of '01004' - 'competitive cycling', which has a METs of 16.0, then the observations are comparable. See <a href=\"https://sites.google.com/site/compendiumofphysicalactivities/\" target=\"_blank\" title=\"https://sites.google.com/site/compendiumofphysicalactivities/\">https://sites.google.com/site/compendiumofphysicalactivities/</a></p>",
        "id": 153836336,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467683560
    },
    {
        "content": "<p>try using this extension which assign as decimal value to a code <a href=\"http://hl7-fhir.github.io/extension-codesystem-ordinalvalue.html\" target=\"_blank\" title=\"http://hl7-fhir.github.io/extension-codesystem-ordinalvalue.html\">http://hl7-fhir.github.io/extension-codesystem-ordinalvalue.html</a></p>",
        "id": 153836337,
        "sender_full_name": "Eric Haas",
        "timestamp": 1467683917
    },
    {
        "content": "<p>The wrinkle here is, of course, that with the advances in bicycling technology, the METs value drops over time. What was 16.0 METs in 1993, is now 15.8 METs in 2011</p>",
        "id": 153836338,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467684258
    },
    {
        "content": "<p>I could define a new extension, that contains three extensions for startDate, endDate and decimalValue, but that doesn't seem right.</p>",
        "id": 153836339,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467684476
    },
    {
        "content": "<p>or define a version of  a codesystem for each recalibration?</p>",
        "id": 153836340,
        "sender_full_name": "Eric Haas",
        "timestamp": 1467684613
    },
    {
        "content": "<p>And let the application use the date of the observation to work out which CodeSystem to use. I could use DataElement for the METs values; one instance of the resource for each physical activity code and put the date bound METS values in the repeating element structure. But ElementDefinition doesn't have a start and end date, so I would have to add an extension for that. And I still don't have a way of asserting, in CodeSystem, that each code has a matching DataElement resource.</p>",
        "id": 153836341,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467685228
    },
    {
        "content": "<p>I think this is a use of data element. Maybe <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> has some comment on that </p>",
        "id": 153836343,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467685285
    },
    {
        "content": "<p>or else a more general question - has OO talked about conversion factors before?</p>",
        "id": 153836344,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467685306
    },
    {
        "content": "<p>Yes but not recently.  That was in the context of an operation.    Maybe you need a new code when the concepts value changes  which is equivalent to creating  a new version. </p>",
        "id": 153836345,
        "sender_full_name": "Eric Haas",
        "timestamp": 1467685500
    },
    {
        "content": "<p>This does sound like a data element property - DataElement is intended to capture metadata about the meaning of a particular type of data that can be captured, though you'd end up needing to use extensions there too for something like the metabolic effort of a given activity in a given year.</p>",
        "id": 153836348,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1467686328
    },
    {
        "content": "<p>I agree - one DataElement resource with multiple DataElement.elements [one or more for each code in the CodeSystem]. Just a question about the cardiality. Options are a) one DataElement resource with an extension for date range on the DataElement.element, which would mean multiple DataElement.element.code values returned when you search by 'code'. OR b) one DataElement resource for each date range, with only the DataElement.element.codes that are valid in the associated date range. At a crude level I could use DataElement.version to select the right instance for the observation date. The definition of the DataElement would be 'METs  value' and the DateElement.element.type.code would be 'decimal' and the DataElement.element.defaultValueDecimal would be the MET value.</p>",
        "id": 153836349,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467690216
    },
    {
        "content": "<p>The question is, should DataElement have a 'validPeriod', or should DataElement.element have a 'validPeriod'?</p>",
        "id": 153836350,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467690245
    },
    {
        "content": "<p>Multiple elements are for complex data elements (e.g. address) where you want to list multiple parts.  If we wanted different characteristics per time range, then we'd need validity period</p>",
        "id": 153836355,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1467695335
    },
    {
        "content": "<p>So your suggesting one DateElement resoure, for each code, in any system that assigns any additional attributes/metrics to the code.</p>",
        "id": 153836356,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467695466
    },
    {
        "content": "<p>And a validity period on DataElement itself.</p>",
        "id": 153836357,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467695481
    },
    {
        "content": "<p>So, to lookup the METs value for a physical activity code I would search for a DataElement resoure, with 'code' == physical activity code and observation date within DataElement.validityPeriod. That would should return one instance of DataElement, with DataElement.element.defaultValueDecimal being the METs value. Have I got it right?</p>",
        "id": 153836358,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467695701
    },
    {
        "content": "<p>Correct</p>",
        "id": 153836359,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1467697900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> By using DataElement in this way would this be a code system supplement? And I assume the DataElement that stores this MET value for the code would also have the code listed so you can link them, correct?</p>",
        "id": 153836452,
        "sender_full_name": "Robert McClure",
        "timestamp": 1467731462
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191503\">@Robert McClure</span> - it's not really a code system supplement.  That's about capturing additional properties, relationships and representations - i.e. content that would be expected to be usable in value set definition and exposed as part of a terminology service.  I wouldn't expect that to be the case here.</p>",
        "id": 153836454,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1467732681
    },
    {
        "content": "<p>so the element definition changes over time?   or it versioned as well?</p>",
        "id": 153836478,
        "sender_full_name": "Eric Haas",
        "timestamp": 1467745034
    },
    {
        "content": "<p>If its static and versioned then no net benefit to versioning the code system for each generation ?</p>",
        "id": 153836479,
        "sender_full_name": "Eric Haas",
        "timestamp": 1467745095
    },
    {
        "content": "<p>Probably multiple DataElement instances each with a different version and effective time, all pointing to the same code</p>",
        "id": 153836510,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1467749224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> I think you have too narrow a definition of what I think of as a code system supplement - this is something that does not only exist to make value sets but is supplemental information not found in the code system but is directly tied to the concepts in the code system. Just because this specific example is not being used to define a value set who says it can't be? What if I wanted to define a value set based on MET values? We'd want to use this as a code system supplement.</p>",
        "id": 153836600,
        "sender_full_name": "Robert McClure",
        "timestamp": 1467819603
    },
    {
        "content": "<p>Well, you can define anything as a concept \"property\", so yes you could do it this way too.  However FHIR doesn't currently support code system supplements.  It does support DataElements.</p>",
        "id": 153836610,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1467822048
    },
    {
        "content": "<p>an alternative is to say that \"data element\" is one way to do a code system supplement. In fact, Data Element is always a code system supplment from this perspective. So is Medication, btw</p>",
        "id": 153836697,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467841094
    },
    {
        "content": "<p>On reflection, I'm not convinced. DataElement is about capturing/recording data. I'm not capturing or recording the METs value, it's a fixed property of the code,  not a defaultValue. If you select a code, and the system displays a METs value, which you think is too small, then you can't override it - you have to pick a different code.</p>",
        "id": 153836731,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467858176
    },
    {
        "content": "<p>I also suspect that you cannot reasonably support integer properties and not also support decimal properties. It seems to me unreasonable to assert that, if you have properties of \"1\" and \"3\", that you can add a new property of \"2\", but if you have properties of \"5\" and \"6\" you cannot add a new property of \"5.5\". You should be able to create new category levels. And if I know that I will be creating new category levels, then I should be able to chose a data type that suites my requirements.</p>",
        "id": 153836732,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467858355
    },
    {
        "content": "<p>Now most of this I can see. The different values on different dates is not different to the problem of a different set of codes on different data. You model that with versions. There's the 1993 version, the 2000 version and the 2011 version. It is up to the application to know which version to choose when recording activity for a specific date. Further more, activites are grouped as in 'Walking', 'Running', 'Home Duties'. So that's another property on each code. And I could store 'METs * 1000\" as an integer property on each code. So why not support decimal as a property of a code?</p>",
        "id": 153836733,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467858620
    },
    {
        "content": "<p>And B.T.W. - I do want to create ValueSets from this CodeSystem, such as the 'Walking' ValueSet. Now I understand that there is some current limitations on ValueSet.compose.filter.op which prevents me from creating a ValueSeet of 'Laziest exercises', being the 'bottom(10)' METs. But that might change. We might add a 'sort' and 'limit' to the parameters of $expand.</p>",
        "id": 153836734,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1467859334
    },
    {
        "content": "<p>you really want a quantity, not a decimal </p>",
        "id": 153836738,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467886633
    },
    {
        "content": "<p>I think that the code should be different as Eric suggested and then the MET value is just fixed on that.<br>\nMakes more sense to be as the definition of the concept is different over time, hence a new value feels right to me.</p>",
        "id": 153836933,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1467959616
    },
    {
        "content": "<p>CodeSystems that vary over time are frequently modelled as \"the same CodeSystem, just different versions\".  It shouldn't matter whether the set of concept/code changes from version to version, or whether the properties of a concept/code varies from version to version. Which version the user choses to use is handled outside the CodeSystem. For example, there is a different issue of the DRG code set every year, with different $ re-embursements. Hospitals usually match all of last year's episodes with next years code set, in order to predict future revenue, assuming the same patient load and mix. The Compendium of Physical Activity fits that model, being issued in 1993, 2000 and 2011; each issue had mainly the same codes and same METs values, however each version had some new codes added, a few old gloves removed, and occasionally different METs value for an existing code. So versioning makes sense.</p>",
        "id": 153837068,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1468116758
    },
    {
        "content": "<p>You're right - quantity would be better than decimal. I can see that we may need both one day, but I don't have Use Case for decimal at the moment. However, if 'property' is meant to cover all possible properties of a concept, then we've only begun to scratch the surface. Let's see, we need Address as a property and property needs to repeat to what we can represent the boundaries of a 'postalcode' [after we add longitude, latitude and elevation to the Address data type].</p>",
        "id": 153837069,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1468117459
    },
    {
        "content": "<p>Code System is not meant to be used for everything. </p>",
        "id": 153837077,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468133218
    },
    {
        "content": "<p>But codes are used for everything.</p>",
        "id": 153837938,
        "sender_full_name": "Russell McDonell",
        "timestamp": 1468399962
    }
]