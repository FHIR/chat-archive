[
    {
        "content": "<p>how can we retrieve a bunch of resources <br>\n\"As they were at t=2017-07-01T13:01:00\"?</p>",
        "id": 153928615,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1515742591
    },
    {
        "content": "<p>That's not currently a defined feature (in part because it's rather tricky to implement)</p>",
        "id": 153928649,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1515771479
    },
    {
        "content": "<p>could we store the \"version's validity period\" in the resource metadata?</p>",
        "id": 153928831,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1516014281
    },
    {
        "content": "<p>The start is there, you would just need to add the end, then propose an operation to scan the resources.</p>",
        "id": 153928856,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1516021659
    },
    {
        "content": "<p>There is no \"validity period\".  There is a date indicating when the version happened to change on a given server.  We have the technical structures needed to do it (if a server chooses to support history), but it makes for an ugly and usually ill-performing query.  In any case, you can certainly submit a change request.</p>",
        "id": 153928879,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1516031596
    },
    {
        "content": "<p>by \"validity period\" for a version N I meant something that would allow us to know when that version was the latest. <br>\nHaving the change dateTime, this would be [(time of update for version N) , (time of update for version N+1 )], which would be a challenge to query.<br>\nwould it make sense to have a \"deprecated dateTime\" in the resource, thus saving (?) that query challenge?</p>",
        "id": 153928908,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1516043047
    },
    {
        "content": "<p>That could be a possible optimization in a servers storage layer, it doesn't need to be in the interface.</p>",
        "id": 153928933,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1516053655
    },
    {
        "content": "<p>Agree that we shouldn't add a deprecated dateTime to the interface.</p>",
        "id": 153928938,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1516055848
    },
    {
        "content": "<p>so this would allow that i could query for \"...?timeEffective=20170701T13:01:00\" and get whatever-versions-of-the-resources-were-effective-then?</p>",
        "id": 153929035,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1516083634
    },
    {
        "content": "<p>if it is on the server, but not in the interface, would I be able to query on that? Or I'd have to find other mechanisms?</p>",
        "id": 153929036,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1516083684
    },
    {
        "content": "<p>The _at parameter on history does something like that.</p>",
        "id": 153929316,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1516215389
    },
    {
        "content": "<p>where can i find info on that?<br>\nI can't see it in search</p>",
        "id": 153929318,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1516215690
    },
    {
        "content": "<p>That's because it's on history :-)<br>\n<a href=\"http://www.hl7.org/implement/standards/fhir/http.html#history\" target=\"_blank\" title=\"http://www.hl7.org/implement/standards/fhir/http.html#history\">http://www.hl7.org/implement/standards/fhir/http.html#history</a></p>",
        "id": 153929393,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1516254357
    }
]