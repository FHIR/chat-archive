[
    {
        "content": "<p>I am trying to understand whether some output from Forge is correct (NHS Digital's DSTU2 version).</p>\n<p>We have profiled the Patient resource. In the resultant snapshot, there is now a Patient.birthDate.value element present, containing the regexes for the date datatype. In the differential, this element doesn't appear at all. <br>\nBy contrast, in our profiled version of the Practitioner resource (which includes an element of type date at Practitioner.birthDate) there is no Practitioner.birthDate.value element in the snapshot or differential. Likewise in Argonaut's profile of Patient, there is no Patient.birthDate.value element.</p>\n<p>My specific question is: should the patient.birthDate.value element have been included in the snapshot? <br>\nIn case it makes any difference, we have sliced Patient.birthDate.extension and added the patient-birthTime extension.</p>\n<p>For context, I am working on displaying our profile information and deciding whether/how to display the Patient.birthDate.value element. Simplifier seems to ignore it, but if I follow that example, I'll need to figure out the general case for what to ignore.</p>",
        "id": 153896084,
        "sender_full_name": "Jonathan Mew",
        "timestamp": 1499261325
    },
    {
        "content": "<blockquote>\n<p>In case it makes any difference, we have sliced Patient.birthDate.extension and added the patient-birthTime extension.</p>\n</blockquote>\n<p>Yes, that does make a difference!  If you walk into an element (in this case you are walking \"into\" Patient.birthDate  to the \"extension\" child, the snapshot generator will need to include all siblings in the snapshot, since the original reference to just the type (date) is now replaced by an full include of all the children of that type - just so to be able to constrain extension!</p>",
        "id": 153896212,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1499354289
    },
    {
        "content": "<p>Ah thank you <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span>, in that case I can implement an appropriate rule to hide it.<br>\nI'm a little confused though - the Patient.birthDate node still has type \"date\", so I'd expect the constraint to still implicitly be there. How does including the value explicitly help to constrain the extension?</p>",
        "id": 153896215,
        "sender_full_name": "Jonathan Mew",
        "timestamp": 1499355746
    },
    {
        "content": "<p>The snapshot is supposed to have \"everything\" so a tool like yours (or mine - the validator) does not need to go out and fetch external definitions. In my validator I get a performance improvement - I'll validate what's in the snapshot and I don't need to fetch the type \"date\" too - it would probably result in duplicate error messages on top of that. So, including value helps me validate the contents of the constrained Patient.birthDate!</p>",
        "id": 153896216,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1499356230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> Let me check my understanding: when validating against a snapshot, if a primitive is somehow extended/constrained, you can't rely on the default constraints on the type. Instead you need to inspect all of the additional constraints AND the original constraints and infer a set of rules for valid data.<br>\nIn that case, it is more efficient to explicitly include the original type constraints in the snapshot so you can just iterate over the child nodes and apply their constraints, rather than separately fetching the rules for the type itself.<br>\nI still don't think I've quite understood - I would expect the rules for built-in primitive types to be readily available to the tool, in which case the performance improvement would be negligible. And wouldn't duplicate error reporting be more likely, not less, now that you encounter the date type (with its implicit constraints) as well the value node?<br>\nOr, on a related note, wouldn't it be a similar improvement to explicitly write out every primitive's constraints, not just those you have stepped into?<br>\nThank you for your help and patience!</p>",
        "id": 153896224,
        "sender_full_name": "Jonathan Mew",
        "timestamp": 1499357824
    },
    {
        "content": "<p>Yes - it is true that you still might need access to the core SDs and also external SDs referred to in &lt;profile&gt; in the typeref - the validator certainly does.  While rendering though - you might not need to do it, just show the contents of the snapshot and/or the differential.  Grahame and I have defined an extension which we can put in the snapshot to signal which parts have been changed by the differential, so you could have a \"total\" view, yet display which parts have changed. I don't think the snapshots in the spec have it, we will have simplifier allowing you to re-generate the snapshot and make this visible soon.</p>\n<p>The logic around snapshots has grown from DSTU1, where we did not have the notion of a \"differential\", there was just the snapshot with \"all\" data in it.  In DSTU2 we introduced the differential, which -obviously- has just the differences (i.e. as the author probably created them) and the snapshot remained unchanged, just keeping all siblings.  If we'd have just the changed constraints in the snapshot, it would actually start to be a kind of differential.</p>",
        "id": 153896305,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1499410803
    },
    {
        "content": "<p>Hmmm. Since the type is still present on the parent in the snapshot, it doesn't seem to me that you would lose/hide any information by adding the extension and not explicitly adding the constraint (so your snapshot should still be 'complete' without adding the regexes). However, I'm sure your code makes good use of the value element's presence, in any case :)<br>\nAnyway, thank you very much for some insight into how Forge deals with snapshots, primitives and extensions!</p>",
        "id": 153896309,
        "sender_full_name": "Jonathan Mew",
        "timestamp": 1499417770
    }
]