[
    {
        "content": "<p>Hello All ,</p>\n<p>Have some basic questions of profiling with extensions ..<br>\nSay I have an extension with its canonical property : URL : <strong>http://xyz.com/fhir/test-extension</strong> Version: <strong>1.0</strong> with data type <strong>valueInt</strong> .</p>\n<p>Set of questions</p>\n<ul>\n<li>When I introduce new version of above extension say <strong>2.0</strong> is it allowed to change data type from \"int\" to \"string\" ? Or should be with same data type only i.e int. </li>\n<li>What are the guidance provided only specific to the extension w.r.t the data type and cardinalities ..</li>\n</ul>\n<p>Best Regards,<br>\nMitul</p>",
        "id": 273603397,
        "sender_full_name": "Mitul Adhia",
        "timestamp": 1646122684
    },
    {
        "content": "<p>There are no hard &amp; fast rules for extensions defined outside HL7.  For extensions published by HL7, we're driven by the 'standards status'.  While the extension is still STU, we reserve the right to make breaking changes between releases.  Once an extension goes normative (none have yet), then we couldn't make breaking changes any longer.</p>\n<p>For those outside the HL7 publication process, they need to define their own policy.</p>",
        "id": 273653766,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646146950
    },
    {
        "content": "<p>I think its worth noting that, other than claiming conformance to a given version of a profile, resource instances have no way to indicate which version of a given extension they are using.  So I wouldn't recommend breaking changes to extensions.</p>",
        "id": 273818766,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1646233131
    },
    {
        "content": "<p>this because Extension.url is a uri, not a canonical reference (which I still think is maybe a mistake)</p>",
        "id": 273818995,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1646233211
    },
    {
        "content": "<blockquote>\n<p>So I wouldn't recommend breaking changes to extensions.</p>\n</blockquote>\n<p>+1 -- best to deprecate and introduce new ones under the current rules, if your extension is used in the wild</p>",
        "id": 273820908,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1646233852
    },
    {
        "content": "<p>We've tried our best to leverage the <a href=\"https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.version\">Business version</a> as an overall version of all our extensions for the whole of our FHIR API. So, a client can at least have a pointer to what semantic version all extensions the current FHIR API is using and line up the documentation/tooling. In addition, we've also done everything we can to make our extensions as loosely defined as possible to help prevent reverse/forward compatibility woes. For example: using CodeableConcept instead of ValueSets , defining References to any as opposed to specific resources and creating new extensions and fields when we hit breaking changes that don't merit the time/$ of a full extension major version. This generally works to funnel changes to minor versions but pushes a lot of the complexity of versioning to the clients and doesn't allow for clients to pin to a specific version for both the interface and behavior. Which despite this versioning scheme being technically correct and us providing documentation/tooling that account for the loosely defined nature of our extension versioning, will undoubtedly lead to failures in production in clients.</p>\n<p>For major version changes to our extensions, we're looking at having to run different infrastructures for each major business version to separate by base API URL the breaking changes for clients. Luckily, we have been able to address most change to extensions via the loosely defined definitions and have avoided breaking changes to our extensions that merit a new major business version  like the plague.</p>",
        "id": 273832780,
        "sender_full_name": "Mike Lohmeier",
        "timestamp": 1646238021
    }
]