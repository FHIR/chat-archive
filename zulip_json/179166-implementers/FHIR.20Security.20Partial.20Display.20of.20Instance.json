[
    {
        "content": "<p>Hi,</p>\n<p>In FHIR is is possible to view certain attributes of a specific resource only? Can an example of how this can be achieved with FHIR Security Labels be shared? If it is posisble, do the FHIR queries depending on the role differ or is it common practice to have the token/username/password in the HTTP header, this means that the query is the same but the security access engine will decide if the request can be fulfilled.</p>\n<p>Thanks,</p>\n<p>Joel</p>",
        "id": 187955791,
        "sender_full_name": "Joel Francis",
        "timestamp": 1581455481
    },
    {
        "content": "<p>Systems can absolutely filter what data elements (and even which resource instances) are exposed - be it to a specific user or a specific system.  Such filtering rules could take security labels into account in doing this.  Alternatively, users can request filtering using the _elements criteria.  Typically authentication/authorization is managed via OAuth tokens, but FHIR doesn't mandate a specific mechanism.</p>",
        "id": 187968978,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581465323
    },
    {
        "content": "<p>filtering of data can happen if the trust framework is established between sending and receiving systems is established that all interpret the security labels uniformly but if the same query is executed by two different roles then it is the access engine that uses the labels to determine what pieces of the resource to share? for example if a patient wanted to see a practioner profile but their home address needed to be hidden vs the practioners supervisor viewing the same practioner resource?</p>",
        "id": 187969627,
        "sender_full_name": "Joel Francis",
        "timestamp": 1581465775
    },
    {
        "content": "<p>It could be driven by system, user, user role, time of day or any other considerations.  FHIR doesn't specify what the rules are for determining access, nor the architecture by which the decisions are made.  It just defines the data model used to share the information.</p>",
        "id": 187969889,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581465981
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  . i think using security labels attached to roles is most logical to hide sections of a resource.</p>",
        "id": 187970059,
        "sender_full_name": "Joel Francis",
        "timestamp": 1581466168
    },
    {
        "content": "<p>Please provide examples of where a Resource type needs sub-level segmentation. I suspect there are some, and the FHIR community needs to see these use-cases as rational for separating that Resource into two or more Resources so that we need mostly only Resource level controls. This is not to say that there will be no cases where sub-level segmentation is needed, just that we should try to avoid cases where sub-level segmentation is going to be needed 80% of the time.</p>",
        "id": 188152715,
        "sender_full_name": "John Moehrke",
        "timestamp": 1581628749
    },
    {
        "content": "<p>As lloyd has pointed out a resource server (authorization enforcement point) can provide a filtered view. If it does, then it should set the flag indicating the data has been subsetted. see the discussion of SUBSETTED on the _elements parameter <a href=\"http://build.fhir.org/search.html#elements\" target=\"_blank\" title=\"http://build.fhir.org/search.html#elements\">http://build.fhir.org/search.html#elements</a></p>",
        "id": 188153258,
        "sender_full_name": "John Moehrke",
        "timestamp": 1581628969
    },
    {
        "content": "<p>seems this should be exposed on the security page, not only on the _summary and _elements section. Can you enter a Change Request?</p>",
        "id": 188153319,
        "sender_full_name": "John Moehrke",
        "timestamp": 1581629016
    },
    {
        "content": "<p>Sub level segmentation, are you referring to an example where some properties of a specific resource should be filtered based on security context?<br>\nIf that's what you're looking for, check these examples from the VhDir IG<br>\n<a href=\"http://build.fhir.org/ig/HL7/VhDir/Bundle-womens-shelter.xml.html\" target=\"_blank\" title=\"http://build.fhir.org/ig/HL7/VhDir/Bundle-womens-shelter.xml.html\">http://build.fhir.org/ig/HL7/VhDir/Bundle-womens-shelter.xml.html</a><br>\nNote the <code>http://hl7.org/fhir/uv/vhdir/StructureDefinition/usage-restriction</code> extension usage there.</p>",
        "id": 188173906,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581648749
    },
    {
        "content": "<p>Yes I think that is what people are thinking about.. BUT it is an unfortunate divergence from use of security tags, by inventing a non-standard extension and non-standard vocabulary. I would rather we drive this into a standard extension using standard vocabulary. The reason is that the benefit of security tags is that a security layer could process them without knowing the structure of the Resource. I recognize that this is within a specific IG, so has the benefit of only affecting those claiming conformance to that IG.  <br>\nThis might happen in the context of one of the security IG. Possibly as part of the DS4P?</p>",
        "id": 188210582,
        "sender_full_name": "John Moehrke",
        "timestamp": 1581690687
    },
    {
        "content": "<p>Would love to see it done. The approach we took doesn't require knowledge of the structure, you tag the parts of the resource you want masked to whom.<br>\nWould be much happier if it was used as \"inspiration\" to go into something more core.<br>\nSexurity tags at the top of the resource imply knowledge, and preagreement. This way doesn't.</p>",
        "id": 188242162,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581711258
    },
    {
        "content": "<p>Vocab, yes would rather use someone else's.</p>",
        "id": 188242259,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581711355
    },
    {
        "content": "<p>Question: Are you indicating that one can apply security tags to attributes, not just Resource (through .meta)?  If so, where is it documented how to do so?  Is anybody currently using that? v2 has that ability through ARV, but not aware that attribute/field level security tags are in play.</p>",
        "id": 188391287,
        "sender_full_name": "Hans Buitendijk",
        "timestamp": 1581956987
    },
    {
        "content": "<p>The VhDir IG has it drafted for consideration, and the example of it I've listed above.</p>",
        "id": 188416309,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581987418
    },
    {
        "content": "<p>To my knowledge isn't used anywhere as yet.</p>",
        "id": 188416314,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581987433
    },
    {
        "content": "<p>The intent was this was information to be used into the consuming system so that when IT exposed the FHIR resources, it would use that information to mask it on use, depending on the users calling for the data in the secondary system that received the content with masking definitions in it.</p>",
        "id": 188416398,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581987553
    },
    {
        "content": "<p>Do we want to tag attributes individually, or do we want to inform at the resource level \"the attributes below have the following classifications: ...\" ?</p>",
        "id": 188422879,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1581999846
    },
    {
        "content": "<p>+1 : would love to see this happening</p>",
        "id": 188422882,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1581999857
    },
    {
        "content": "<p>We explicitly tagged the element to reference the consent rules, rather than putting fhirpath refs to the elements (less indirection)</p>",
        "id": 188423471,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1582001155
    },
    {
        "content": "<p>(and had it contained, so that the rules weren't disconnected from the content)</p>",
        "id": 188423512,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1582001171
    },
    {
        "content": "<p>Putting this on the element level may be adding a lot of metadata, especially if it repeats.</p>",
        "id": 188424521,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582003291
    },
    {
        "content": "<p>also, we are putting this in the resource instance - perhaps we could put also this on the conformance resource - <br>\nfor example - <br>\nIn this country, the MedicationRequest resource has the following fields classified as \"sensitive\" - .reason, .supportingInformation, .detectedIssue.</p>",
        "id": 188424621,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582003480
    },
    {
        "content": "<p>then the server knows what to do for every resource instance, even if they are not individually tagged.</p>",
        "id": 188424630,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582003505
    },
    {
        "content": "<p>(this is just for brainstorming)</p>",
        "id": 188424634,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582003527
    },
    {
        "content": "<p>BTW, the draft Permission resource is intended to hold exactly such metadata. <br>\nI will update it to have .dataScope as a list of fhirPath expressions - feedback welcome.</p>",
        "id": 188424738,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582003683
    },
    {
        "content": "<p>If you can constrain based on type, then you're ok. The cases we were dealing with, any property could have been masked. And in the case of addresses and Telecoms, they do repeat, but only some of them need to be masked.</p>",
        "id": 188431369,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1582014050
    },
    {
        "content": "<p>Not sure I follow - My idea would be to \"tag\" any property or slice of a resource (or a resource instance), but not to expose that on the property, but rather on the resource metadata somewhere (e.g. using a Permission that says what is tagged).</p>",
        "id": 188431966,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582014732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span>  thanks for the response. To make sure the data is tage as subsetted, can security tags not be used for this purpose. The intent is that if a resource was marked \"R\" (restricted) then certain key data would not be displayed and this would depend on the framework/understanding setup by the parties involved.</p>\n<p>Also can security tags be added for each attribute? I guess I am echoing <span class=\"user-mention\" data-user-id=\"191689\">@Hans Buitendijk</span>  question which didn't get answered.</p>",
        "id": 188468691,
        "sender_full_name": "Joel Francis",
        "timestamp": 1582044937
    },
    {
        "content": "<p>The code subsetted is intended to be used in a case where the data has been subsetted for non-security purposes like the use of _summary or _elements query parameter. When the data are removed for security reasons the tag REDACTED should be used to indicate that (Or one of the others as appropriate).</p>",
        "id": 188486919,
        "sender_full_name": "John Moehrke",
        "timestamp": 1582056924
    },
    {
        "content": "<blockquote>\n<p>Also can security tags be added for each attribute? I guess I am echoing <span class=\"user-mention silent\" data-user-id=\"191689\">Hans Buitendijk</span>  question which didn't get answered.</p>\n</blockquote>\n<p><a href=\"/user_uploads/10155/gIqGklRqD8shXkj9cmkWrf-V/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/gIqGklRqD8shXkj9cmkWrf-V/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/gIqGklRqD8shXkj9cmkWrf-V/pasted_image.png\"></a></div>",
        "id": 188630792,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582199671
    },
    {
        "content": "<p>Not out of the box.</p>",
        "id": 188630800,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582199698
    },
    {
        "content": "<p>Security labels are on meta which is in Resource, not in Element</p>",
        "id": 188630811,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582199726
    },
    {
        "content": "<p>We just got some requirements for this purpose. An interesting one:</p>",
        "id": 188630979,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582199976
    },
    {
        "content": "<p>If the rule is that nurses cannot see the patients' SSN, then nurses can also not search Patients using SSN as criteria.</p>",
        "id": 188631034,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582200010
    },
    {
        "content": "<p>While we could use an extension like <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> shows, I think this would be best served with a definition in the resource instance metadata or in the profile itself - e.g. \"in Belgium, SSN has a classification 'Private'\"</p>",
        "id": 188631141,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582200153
    },
    {
        "content": "<p>The security tag meta is more appropriate for this, as our purpose is for a specific record in a specific resource instance, not a general rule that always applies to the ssn field.</p>",
        "id": 188676987,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1582232306
    },
    {
        "content": "<p>Interestingly, would the nurse be able to search with other identifiers? Drivers license or healthcare card num, but not ssn?<br>\nIn which case it's a specific system within the identifier.</p>",
        "id": 188677107,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1582232390
    },
    {
        "content": "<p>in Belgium I think we'll indeed limit visibility on SSN, but not on other ids</p>",
        "id": 188707055,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582267287
    },
    {
        "content": "<p>Ok so there are different cases for segmentation / partitioned access to resources:</p>\n<ol>\n<li>by type or profile - all belgian prescriptions have the elements X, Y, Z with a given classification</li>\n<li>by instance - each instance may have some classified items</li>\n</ol>",
        "id": 188707177,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582267517
    },
    {
        "content": "<p>I'm thinking of classifying the elements on the logical models, so by type.</p>",
        "id": 188707252,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1582267649
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span>  this helps.</p>",
        "id": 189792153,
        "sender_full_name": "Joel Francis",
        "timestamp": 1583415941
    },
    {
        "content": "<p>There is a group of security tags specifically defined for indicating in a policy (permission, consent, contract, rules) that there is a requirement to blind XYZ type of data regardless of where that data is within the data schema. Where the valueSet of XYZ includes types of data such as (not a complete list): <br>\n*Demographics<br>\n*Date of Birth<br>\n*Gender<br>\n*Living Arrangements<br>\n*Marital Status<br>\n*Patient Location<br>\n*Race<br>\n*Religion<br>\n*Employer<br>\nThis in practice can be used as tags on the Resource (meta.security) to indicate that somewhere within this resource is this type of data as an indication of 'meta' about the data. There is discussion that this tags could be on the specific element (specific index of address...). This is an indication of fact, not an indication of policy.<br>\nIt is the combination of the indication of policy to blind Gender, combined with the processing of Resources with that are tagged as containing Gender; that one then processes deeper that Resource to bind the Gender. <br>\nHow one tags data is not an easy task. The Security workgroup defined that a 'service' would be able to inspect data and tag it with these meta tag 'decorations'. Likely this service (SLS) would be based on CDS like magic.  <br>\nThe valueSet one uses in a realm will depend on that realm need. It likely will use some of the codes in HL7, but might have other codes beyond (e.g. Belgium SSN)<br>\n<a href=\"http://build.fhir.org/security-labels.html\" target=\"_blank\" title=\"http://build.fhir.org/security-labels.html\">http://build.fhir.org/security-labels.html</a><br>\nThis is all within the DS4P</p>",
        "id": 189794546,
        "sender_full_name": "John Moehrke",
        "timestamp": 1583417397
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/yRw0N27xkunvN3siaPR64JnP/image.png\">image.png</a> <br>\nRe John's list of types of data above - all of these are in the Sensitivity codes - seehttps://build.fhir.org/ig/HL7/UTG/ValueSet-v3-ActCode.html @ _InformationSensitivityPolicy.  So a resource in which both DOB and gender have a higher level of confidentiality protection could have a security label with confidentiality = R (restricted), sensitivity = DOB and GENDER, and any  compartment to which a requester must belong, e.g., research or care team, any limitations on the purpose of use, obligations, such as redact/mask, and refrains such as NOORGPOL (no disclosure without organizational authorization).</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/yRw0N27xkunvN3siaPR64JnP/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/yRw0N27xkunvN3siaPR64JnP/image.png\"></a></div>",
        "id": 213729753,
        "sender_full_name": "k connor",
        "timestamp": 1603060597
    },
    {
        "content": "<p>I'm curious about Brian's statement <a href=\"/user_uploads/10155/Fec2ldf8WgnLaRp1hBPJGsLU/image.png\">image.png</a> Brian Postlethwaite 8:45 PM <br>\n\"We explicitly tagged the element to reference the consent rules, rather than putting fhirpath refs to the elements (less indirection)\" in comparison to the the level of effort a security labeling service takes to parse a resource looking for a sensitive element type based on a <a href=\"http://meta.security\">meta.security</a> tag.  Seems like comparable tasks.  And either case, if the policy is to mask a sensitive type/instance, there still needs to be a Privacy Protective Service that does the actual masking.  Also, what happens when there's a mix of sensitive types tagged with a security label and sensitive instances tagged inline?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/Fec2ldf8WgnLaRp1hBPJGsLU/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/Fec2ldf8WgnLaRp1hBPJGsLU/image.png\"></a></div>",
        "id": 213730053,
        "sender_full_name": "k connor",
        "timestamp": 1603061160
    },
    {
        "content": "<p>I'm looking for an approach to partial display as well, and came across this thread. Very interested to see how this could be implemented in the core, as every engagement I've been a part of has had to solve this problem... show different things to different people. <br>\nFWIW - solutions I've seen have either fallen into the bucket of a custom service that masks the data (whether on request, or tokenizing/encrypting at rest) OR store different versions of the same resource, and structure those resources accordingly. </p>\n<p>Coming from a data engineering background it occurs to me, this is somewhat a problem of how to construct a view on data. That is, given the same source data, can we construct different views on it that can be used to access the data. I know alot of this discussion is how to manage this problem with metadata, but could it be possible to define a different resourcetype that serves as a mask on the base resource? That resource would have the same elements as the base resource, but the value of those fields would describe some sort of transformation on that element, in this case perhaps security operations (tag to scope, encrypt, hide, etc.) but could be extended to other operations (expose as KG not LB, convert MR to Mister, etc etc)....</p>\n<p>Then a user would have access to only that view resource (if defined), and you could store different versions of that view for different audiences, rather than duplicating the content wholesale... Also search operations could check the views you have access to prior to completing a search operation. (And similar logic for post-ing/updating resoruces).</p>",
        "id": 215375014,
        "sender_full_name": "OS",
        "timestamp": 1604349380
    },
    {
        "content": "<p>Multiple views can work, but get tricky if you allow subsequent update.</p>",
        "id": 215381012,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1604352291
    },
    {
        "content": "<p>Do you mean the scenario of if I change the underlying structuredefinition? And so lead to 2 classes of resources (one set using the 'old' definition, one using the 'new' definition)?</p>\n<p>In that case, (and just shooting from the hip here), you could probably expand the definition of the view resource to include a superset of fields in both definitions. That way, your view could be a living document... Depending on the number of audiences (and views) you have, I'd imagine this would be entirely feasible, and anyway would be the responsibility of the implementer of how they want to plan to manage changes etc.</p>\n<p>Am I thinking about this the right way?</p>",
        "id": 215382911,
        "sender_full_name": "OS",
        "timestamp": 1604353271
    },
    {
        "content": "<p>anything is possible. but we are certainly no longer talking about http REST.</p>",
        "id": 215402207,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604366798
    },
    {
        "content": "<p>I have advocated for a long time that if a Resource definition is found to need sub structure segmentation for Privacy or Security purposes; then the Resource should be broken up into two(or more) Resources. It seems clear to me that these mega Resources may initially seem good, but present operational issues that should be avoided with more intelligent Resource design.  I would recommend that you point out specific Resource definitions that present this kind of a problem. Not all will justify breaking up, but some might.</p>",
        "id": 215402402,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604366958
    },
    {
        "content": "<p>Thanks for that perspective <span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span>  - one example I might consider is a practitioner - with NPI, SSN, maybe some other personal information. And lets say we have 3 different audiences - one can see everything, one can see everything but the SSN, and one can only see NPI. </p>\n<p>In this case, per your suggestion I'd have to maintain an 'other info' resource, an SSN only resource, and an NPI only resource. Additonally, for the first consumer, I'd have to have logic to make sure they get all three. Also, I'd have to keep all the IDs in sync, etc, and if there's an update that may impact all 3, there's potential transactional complexity there. Not to mention the question of which resource I use as reference. Would you advise using this approach despite the difficulties, or is there another way to approach this?</p>\n<p>In my experience, this is cumbersome enough that folks have elected the options I described above, which made me think it might be beneficial to separate the view logic from the storage logic (similarly to an MVC argument). Largely, though, I do agree with your point that resources should be intelligently designed</p>",
        "id": 215501695,
        "sender_full_name": "OS",
        "timestamp": 1604432837
    },
    {
        "content": "<p>Having 3 different instances is definitely going to create serious challenges.  You don't want some allergies tied to the NPI one and some to the SSN one.  Typically you have a single resource instance and then have logic that strips out information the recipient isn't allowed to see and - if appropriate - add on a security tag that indicates the resource has been redacted.  That way all of the references still work.  If someone tries to update a redacted resource, you'll have to have logic that considers what data exists vs. what they had access to when applying their updates (or deciding if they can safely update at all)</p>",
        "id": 215502095,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1604433067
    },
    {
        "content": "<p>You certainly wouldn't be able to split out the identifiers for a patient from the patient resource itself - because the identifiers don't themselves have independent manageable state and aren't useful outside the context of the Patient resource.</p>",
        "id": 215502176,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1604433116
    },
    {
        "content": "<p>Lloyd, don't switch to allergies... the use-case is Practitioner and the variation of sensitivity is Practitioner.identifier... that is my understanding of the use-case</p>",
        "id": 215502707,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604433374
    },
    {
        "content": "<p>With this, there should be no problem with View.. right? a subset of the Practitioner can be returned with SSN removed, and this marked as a subset (much like a summary is marked as a subset).</p>",
        "id": 215502795,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604433429
    },
    {
        "content": "<p>What I'm saying is that if you create multiple Patient instances, all of the other resources (allergies, procedures, whatever) can only point to one of them.  And that's going to break things.</p>",
        "id": 215502798,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1604433431
    },
    {
        "content": "<p>The problem is with Update. right?</p>",
        "id": 215502808,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604433437
    },
    {
        "content": "<p>You should only ever have one <a href=\"http://Patient.id\">Patient.id</a> independent of view.</p>",
        "id": 215502853,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1604433469
    },
    {
        "content": "<p>Practitioner and .identifier... not Patient and not .id</p>",
        "id": 215502942,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604433510
    },
    {
        "content": "<p>with Practitioner.identifier being subsetted for some users, where those users do have authority to UPDATE... what is the likelyhood of being able to use PATCH rather than UPDATE?</p>",
        "id": 215503055,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604433571
    },
    {
        "content": "<p><a href=\"http://Practitioner.id\">Practitioner.id</a> is consistent regardless of full or subset returned.. just like how summary is handled.</p>",
        "id": 215503207,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604433629
    },
    {
        "content": "<p>right  <span class=\"user-mention\" data-user-id=\"285887\">@OS</span> ?</p>",
        "id": 215503386,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604433726
    },
    {
        "content": "<p>There are even security label tags that can indicate that the full version of the Practitioner contains sensitive (e.g. SSN), and that is why you got a subset -- #ABSTRED -- this is used just like #SUBSETTED  --&gt; <a href=\"http://hl7.org/fhir/v3/SecurityIntegrityObservationValue/vs.html\">http://hl7.org/fhir/v3/SecurityIntegrityObservationValue/vs.html</a></p>",
        "id": 215503758,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604433916
    },
    {
        "content": "<p>actually I think #REDACTED is likely more proper</p>",
        "id": 215503919,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604433996
    },
    {
        "content": "<p>I would very much like to see these kind of use-cases get formally documented so others can get guidance on some methods that can be used. As it stands they tend to not be discussed openly, and thus many feel there are no solutions.</p>",
        "id": 215504302,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604434220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/FHIR.20Security.20Partial.20Display.20of.20Instance/near/215502095\">said</a>:</p>\n<blockquote>\n<p>Having 3 different instances is definitely going to create serious challenges.  You don't want some allergies tied to the NPI one and some to the SSN one.  Typically you have a single resource instance and then have logic that strips out information the recipient isn't allowed to see and - if appropriate - add on a security tag that indicates the resource has been redacted.  That way all of the references still work.  If someone tries to update a redacted resource, you'll have to have logic that considers what data exists vs. what they had access to when applying their updates (or deciding if they can safely update at all)</p>\n</blockquote>\n<p>I certainly share this perspective, though it requires custom logic to strip out the information, which lead to my question of whether it could be done natively in FHIR</p>\n<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/179166-implementers/topic/FHIR.20Security.20Partial.20Display.20of.20Instance/near/215503207\">said</a>:</p>\n<blockquote>\n<p><a href=\"http://Practitioner.id\">Practitioner.id</a> is consistent regardless of full or subset returned.. just like how summary is handled.</p>\n</blockquote>\n<p>I may be a little out of my league here, but I'm not sure I understand. If you take the approach of splitting the resource, how would the <a href=\"http://practitioner.id\">practitioner.id</a> be the same, wouldn't each have it's own id? As far as summary, my apologies, could you clarify what you mean there?</p>\n<p>I do see the security labels you linked to, but those seem to be specific for Observations. But on the whole, I do very much agree that this would be a great use case to get formally documented and have some suggested patterns to address, as (at least in my experience) it's a very common need.<br>\nHappy to help document, or in any way I can.</p>",
        "id": 215505404,
        "sender_full_name": "OS",
        "timestamp": 1604434853
    },
    {
        "content": "<p>sorry, I was not clear that I had looked at the use-case and then decided that masking was the best approach for THAT use-case.  meaning that use-case is not a good one for breaking up a Resource that was overengineered.</p>",
        "id": 215505574,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604434959
    },
    {
        "content": "<p>the security labels are intended to be used with ALL resource types. they are NOT observation specific</p>",
        "id": 215505615,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604434990
    },
    {
        "content": "<p>it is true that observation tends to bring to the surface the need more than others..</p>",
        "id": 215505676,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604435019
    },
    {
        "content": "<p>Defining what data to strip is something they're theoretically trying to define in an automated fashion with contract, though even that's sort of magic.  CQL might be able to do it too.</p>",
        "id": 215506222,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1604435329
    },
    {
        "content": "<p>things like identifiers are easy... you have a set of assigning authorizes that are considered sensitive.,..<br>\n<a href=\"https://www.hl7.org/fhir/identifier-registry.html\">https://www.hl7.org/fhir/identifier-registry.html</a><br>\nso any identifier with the assiging authority of    <a href=\"http://hl7.org/fhir/sid/us-ssn\">http://hl7.org/fhir/sid/us-ssn</a></p>",
        "id": 215506466,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604435467
    },
    {
        "content": "<p>this rule could be put into a \"Security Labeling Service\"...</p>",
        "id": 215506514,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604435503
    },
    {
        "content": "<p>This is very much what General IT Security does with \"Data Loss Prevention\". This is  general IT security (cybersecurity) tools.</p>",
        "id": 215506615,
        "sender_full_name": "John Moehrke",
        "timestamp": 1604435555
    }
]