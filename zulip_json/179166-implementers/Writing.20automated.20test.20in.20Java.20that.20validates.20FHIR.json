[
    {
        "content": "<p>Hello! I am writing a FHIR-compatible API for a service and would like to have automated tests in my test JUnit 5 suite that validate that the responses are valid FHIR JSON. Is there a tool that will let me do this? I have found this: <a href=\"https://github.com/hapifhir/org.hl7.fhir.core/\">https://github.com/hapifhir/org.hl7.fhir.core/</a> – but I'm not sure if it can be used emvedded in Java, or only as a standalone tool?</p>",
        "id": 216750165,
        "sender_full_name": "Simon Kågedal Reimer",
        "timestamp": 1605387920
    },
    {
        "content": "<p>This post seems to say that you can do exactly this... <a href=\"https://medium.com/@kevin.mayfield/testing-care-connect-resources-hl7-fhir-3680421dda23\">https://medium.com/@kevin.mayfield/testing-care-connect-resources-hl7-fhir-3680421dda23</a></p>",
        "id": 216750675,
        "sender_full_name": "Simon Kågedal Reimer",
        "timestamp": 1605388752
    },
    {
        "content": "<p>Yup, I got something working with ValidationEngine.validate :) Super nice! If there's some kind of wrapper that makes it even more ready-made for using with JUnit, I'd love to know!</p>",
        "id": 216752573,
        "sender_full_name": "Simon Kågedal Reimer",
        "timestamp": 1605391048
    },
    {
        "content": "<p>We use it with JUnit - org.hl7.fhir.validation.  All of the test cases are here: <a href=\"https://github.com/FHIR/fhir-test-cases\">https://github.com/FHIR/fhir-test-cases</a></p>",
        "id": 216752622,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1605391129
    },
    {
        "content": "<p>Thanks! So, hmm – where is the actual Java code for running the test cases in junit?</p>",
        "id": 216783967,
        "sender_full_name": "Simon Kågedal Reimer",
        "timestamp": 1605435758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248736\">@Mark Iantorno</span> is working on packaging the validator now, but in the meantime, ValidationHostServices is the least worst package, or else maybe you could look at HAPI full</p>",
        "id": 216784709,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1605436759
    },
    {
        "content": "<p>Where do i find that? (ValidationHostServices)</p>",
        "id": 216805777,
        "sender_full_name": "Simon Kågedal Reimer",
        "timestamp": 1605463874
    },
    {
        "content": "<p>So what i tried was basically creating a ValidationEngine and run \"validate\" on my JSON, and it seems to work, but I'm a bit confused as to how to use the OperationOutcome. I first thought that I could \"assertFalse(outcome.hasIssue())\" but it appears also the \"all ok\" state is an \"issue\"...</p>",
        "id": 216806488,
        "sender_full_name": "Simon Kågedal Reimer",
        "timestamp": 1605465023
    },
    {
        "content": "<p>I guess using the Json Schema is more on the right level for what I need to do?</p>",
        "id": 216806954,
        "sender_full_name": "Simon Kågedal Reimer",
        "timestamp": 1605465544
    },
    {
        "content": "<p>you certainly don't want to use Json Schema if you can avoid it - there are many problems with it, and many things it doesn't do anyway</p>",
        "id": 216815407,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1605475953
    },
    {
        "content": "<p>it's true that the operation outcome explicitly includes an issue for all ok. We've found that's confusing either way - some people are confused when it says nothing, and others are confused when it says 'all 'ok'</p>\n<p>anyway, if the only issues present have level = information and type = information, there's no issues to report (and there'll only be one)</p>",
        "id": 216815874,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1605476442
    },
    {
        "content": "<p>Thank you! Will not use Json Schema then, and use that method of checking the outcome. Just to check – when you said \"ValidationHostServices is the least worst package\" – did you mean the thing I am using now or something else?</p>",
        "id": 216841954,
        "sender_full_name": "Simon Kågedal Reimer",
        "timestamp": 1605514321
    },
    {
        "content": "<p>Also, what's the best outlet (RSS feed or such) to follow for updates in this area (as the thing you mentioned that <span class=\"user-mention\" data-user-id=\"248736\">@Mark Iantorno</span> is working on)?</p>",
        "id": 216842071,
        "sender_full_name": "Simon Kågedal Reimer",
        "timestamp": 1605514421
    },
    {
        "content": "<p>probably #hapi. Turns out I renamed ValidationHostServices to NativeHostServices</p>",
        "id": 216843619,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1605515492
    },
    {
        "content": "<p>Ah nice, found it. So the benefit of using NativeHostServices instead of ValidationEngine would be that it operates locally, is that correct?</p>",
        "id": 216845787,
        "sender_full_name": "Simon Kågedal Reimer",
        "timestamp": 1605517072
    },
    {
        "content": "<p>well, it just hosts ValidationEngine for re-use</p>",
        "id": 216846708,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1605517679
    },
    {
        "content": "<p>without reinitialising it every time</p>",
        "id": 216846761,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1605517693
    },
    {
        "content": "<p>For updates regarding what I'm working on, you can always check the documentation on the project website:</p>",
        "id": 216877815,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1605536980
    },
    {
        "content": "<p><a href=\"https://github.com/hapifhir/org.hl7.fhir.validator-wrapper\">https://github.com/hapifhir/org.hl7.fhir.validator-wrapper</a></p>",
        "id": 216877822,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1605536981
    },
    {
        "content": "<p>I'm actively working on the project</p>",
        "id": 216877924,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1605537014
    },
    {
        "content": "<p>Ok, I think I'm missing the benefit of NativeHostServices. :) Can't I just hold on to the ValidationEngine object instead and call validate repeatedly if needed? From looking at the code, it seems that NativeHostServices just wraps ValidationEngine in a less nice Java interface.</p>",
        "id": 216911846,
        "sender_full_name": "Simon Kågedal Reimer",
        "timestamp": 1605551304
    },
    {
        "content": "<p>Yeah that's true. It's just that we reserve the right to make breaking changes to ValidationEngine</p>",
        "id": 216933129,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1605561258
    }
]