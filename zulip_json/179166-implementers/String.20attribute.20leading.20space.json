[
    {
        "content": "<p>Hi!<br>\nThe datatype spec says the following:</p>\n<blockquote>\n<p>According to XML schema, leading and trailing whitespace in the value attribute is ignored for the types boolean, integer, decimal, base64Binary, instant, uri, date, dateTime, oid, and uri. Note that this means that the schema aware XML libraries give different attribute values to non-schema aware libraries when reading the XML instances. For this reason, the value attribute for these types SHOULD not have leading and trailing spaces. <strong>String values should only have leading and trailing spaces if they are part of the content of the value</strong>. In JSON and Turtle whitespace in string values is always significant. Primitive types other than string SHALL NOT have leading or trailing whitespace.</p>\n</blockquote>\n<p>(Emphasis added)</p>\n<p>The XML representation spec says the following:</p>\n<blockquote>\n<p>Implementers SHOULD trim leading and trailing whitespace before writing and SHOULD trim leading and trailing whitespace when reading attribute values</p>\n</blockquote>\n<p>These two quotes seem to contradict one another. When adding a leading (or trailing) space to a string value, can one expect it to be present in an XML representation of that string value?</p>",
        "id": 212546922,
        "sender_full_name": "Jorn Duwel",
        "timestamp": 1602071736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span></p>",
        "id": 212554615,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1602075817
    },
    {
        "content": "<p>there's no way to say. you cannot have any expectations; the problem is in xml itself.</p>",
        "id": 212607509,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602098838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, thank you  for your reply. I actually would have the expectation that if my string data is valid following the datatype specification, it would be parsed correctly. If there is no way to guarantee that because of the representation method, shouldn't this ambiguous situation be reflected in the specification somehow?</p>",
        "id": 212658425,
        "sender_full_name": "Jorn Duwel",
        "timestamp": 1602144717
    },
    {
        "content": "<p>Does it help that this only affects schema aware processing? If you don't need and don't use the PSVI, is this an issue?</p>",
        "id": 212661718,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1602146812
    },
    {
        "content": "<p>I thought that the comments were reflecting the problem into the specification</p>",
        "id": 212665203,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602149046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191651\">@Rik Smithies</span> I am not sure if this issue has to do with schema aware processing (I am aware of the difficulty with whitespace and schema). We are having an issue where a sending party sends a string \" III\" (with a relevant leading space). The receving party parses is as \"III\" via XML. Both are pointing to the quoted parts of the specification, both are right in their way, but nevertheless a difference between the sent and received data now exists. Based on the specification as it is I cannot tell who is right or wrong. </p>\n<p>For our implementation a possible way of solving this would be a solution where we do not use any leading spaces as relevant information in strings, but perhaps it could be discussed if the specification could identify or prevent this issue in the future.</p>",
        "id": 212716275,
        "sender_full_name": "Jorn Duwel",
        "timestamp": 1602174751
    },
    {
        "content": "<p>hi Jorn - The issue is documented  in the FHIR spec though? Is that not identifying the issue? What would you like to see? (Other than a fix, which might not be possible). <br>\nThe warning talks about non-string types not preserving spaces. Why would that affect string handling? What data type is your \" III\"?</p>",
        "id": 212719532,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1602176252
    },
    {
        "content": "<p>the spec says \"you can, but you might have problems'.</p>",
        "id": 212757503,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602196443
    },
    {
        "content": "<p>and you are</p>",
        "id": 212757517,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602196449
    },
    {
        "content": "<p>It's not PSVI, it's in the core XML spec which predates Schema by a lot. Since conformant XML processors should implement the XML spec, they will drop leading/trailing spaces in attribute content. (Not sure this is an XML problem, one might as well say it's FHIR's problem since they want to store strings with leading spaces in attribute content, not element content. I realize that this remark is utterly unhelpful, since no-one will want to change that now.). The dataype spec might add a warning: \"Don't expect leading/trailing spaces to persist in XML serialization.\" I don't think a fix is possible indeed.</p>",
        "id": 213007484,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1602489292
    },
    {
        "content": "<p>hi Marc - that is interesting. The datatype spec does already warn about this though doesn't it? What more do we think should be added? It may want to not say \"XML schema\" but instead \"the XML standard\". <br>\nI still don't understand why this affects what seems to be a string datatype attribute though for <span class=\"user-mention\" data-user-id=\"280644\">@Jorn Duwel</span>. Is this not limited to the datatypes mentioned?</p>",
        "id": 213008585,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1602489970
    },
    {
        "content": "<p>Hi Rik, the datatypes spec does not really warn against leading space in string datatypes, it allows those (and this is fine for JSON). The schema remark is a bit vague - does this refer to the FHIR XML Schema for datatypes? For XML itself, there is no \"XML Schema\" for XML itself, so if that's intended \"the XML standard\" or \"specification\" would be better indeed.</p>",
        "id": 213009611,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1602490731
    },
    {
        "content": "<p>~the  spec does not really warn against leading space in string datatypes<br>\nand is that a problem? I take it this applies to all datatypes in all XML attributes?<br>\nIn fact if it's the base XML standard, that doesn't even have datatypes.</p>",
        "id": 213009796,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1602490841
    },
    {
        "content": "<p>FHIR datatypes says value attributes other than string SHALL NOT have leading/trailing spaces. For string, it says they can have leading/trailing spaces it that's part of the content. For XML, this wil break. We know this now, so we could warn. And it's not about XML datatypes, but core attribute processing: <a href=\"https://www.w3.org/TR/xml/#AVNormalize\">https://www.w3.org/TR/xml/#AVNormalize</a> : \"...the XML processor must ... discarding any leading and trailing space\"</p>",
        "id": 213010875,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1602491616
    },
    {
        "content": "<p>I can make a Jira issue, unless people see reason not to.</p>",
        "id": 213011158,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1602491787
    },
    {
        "content": "<p>The link doesn't simply say \"...the XML processor must ... discarding any leading and trailing space\" - there is a discussion about attribute being a string (CDATA), or tokenized sequence (NMTOKEN) which would be DTD definitions (as opposed to XML schema), and there are examples of leading white space. It seems that leading white space can be preserved if explicitly represented as <code>&amp;#x20;</code></p>",
        "id": 213047305,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1602513843
    },
    {
        "content": "<p>XML schema adds more to the above, but essentially, if an XML attribute is declared to be of type <code>string</code>, then white space must be preserved. If it is not, then it is the lack of schema awareness that unnecessarily removes the leading white space, not because of XML schema.</p>\n<p>See<br>\n<a href=\"https://www.w3.org/TR/2004/REC-xmlschema-2-20041028/datatypes.html#rf-whiteSpace\">for string the value of <code>whiteSpace</code> is <code>preserve</code>;</a><br>\nand<br>\n<a href=\"https://www.w3.org/TR/2004/REC-xmlschema-1-20041028/structures.html#d0e1654\">https://www.w3.org/TR/2004/REC-xmlschema-1-20041028/structures.html#d0e1654</a></p>",
        "id": 213050092,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1602515146
    },
    {
        "content": "<p>Yes, you're right, <span class=\"user-mention\" data-user-id=\"192685\">@Vassil Peytchev</span>  and XML + Schema does allow it. But FHIR datatypes (<a href=\"http://build.fhir.org/datatypes.html#string\">http://build.fhir.org/datatypes.html#string</a>) says: \"Leading and Trailing whitespace is allowed, but SHOULD be removed when using the XML format\".</p>",
        "id": 213054898,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1602517562
    },
    {
        "content": "<p>And digging further, the fhir-base.xsd defines a derived type for the actual attribute, <code>string-primitive</code>. Then the following XML schema rule applies: </p>\n<blockquote>\n<p>For all ·atomic· datatypes other than string (and types ·derived· by ·restriction· from it) the value of <code>whiteSpace</code> is <code>collapse</code> and cannot be changed by a schema author.</p>\n</blockquote>\n<p><code>collapse</code> is what prohibits leading (or trailing) white space. The only purpose of string-primitive is to define the minLength to 1, and I am wondering if that is necessary (even though it is shown as an example in the XML schema spec). If we change the following</p>\n<div class=\"codehilite\" data-code-language=\"XML\"><pre><span></span><code><span class=\"nt\">&lt;xs:complexType</span> <span class=\"na\">name=</span><span class=\"s\">\"string\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;xs:annotation&gt;</span>\n      <span class=\"nt\">&lt;xs:documentation</span> <span class=\"na\">xml:lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>A sequence of Unicode characters<span class=\"nt\">&lt;/xs:documentation&gt;</span>\n      <span class=\"nt\">&lt;xs:documentation</span> <span class=\"na\">xml:lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>Note that FHIR strings SHALL NOT exceed 1MB in size<span class=\"nt\">&lt;/xs:documentation&gt;</span>\n      <span class=\"nt\">&lt;xs:documentation</span> <span class=\"na\">xml:lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>If the element is present, it must have either a @value, an @id, or extensions<span class=\"nt\">&lt;/xs:documentation&gt;</span>\n    <span class=\"nt\">&lt;/xs:annotation&gt;</span>\n    <span class=\"nt\">&lt;xs:complexContent&gt;</span>\n      <span class=\"nt\">&lt;xs:extension</span> <span class=\"na\">base=</span><span class=\"s\">\"Element\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;xs:attribute</span> <span class=\"na\">name=</span><span class=\"s\">\"value\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string-primitive\"</span> <span class=\"na\">use=</span><span class=\"s\">\"optional\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/xs:extension&gt;</span>\n    <span class=\"nt\">&lt;/xs:complexContent&gt;</span>\n  <span class=\"nt\">&lt;/xs:complexType&gt;</span>\n</code></pre></div>\n\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"XML\"><pre><span></span><code><span class=\"nt\">&lt;xs:complexType</span> <span class=\"na\">name=</span><span class=\"s\">\"string\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;xs:annotation&gt;</span>\n      <span class=\"nt\">&lt;xs:documentation</span> <span class=\"na\">xml:lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>A sequence of Unicode characters<span class=\"nt\">&lt;/xs:documentation&gt;</span>\n      <span class=\"nt\">&lt;xs:documentation</span> <span class=\"na\">xml:lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>Note that FHIR strings SHALL NOT exceed 1MB in size<span class=\"nt\">&lt;/xs:documentation&gt;</span>\n      <span class=\"nt\">&lt;xs:documentation</span> <span class=\"na\">xml:lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>If the element is present, it must have either a @value, an @id, or extensions<span class=\"nt\">&lt;/xs:documentation&gt;</span>\n    <span class=\"nt\">&lt;/xs:annotation&gt;</span>\n    <span class=\"nt\">&lt;xs:complexContent&gt;</span>\n      <span class=\"nt\">&lt;xs:extension</span> <span class=\"na\">base=</span><span class=\"s\">\"Element\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;xs:attribute</span> <span class=\"na\">name=</span><span class=\"s\">\"value\"</span> <span class=\"na\">type=</span><span class=\"s\">\"xs:string\"</span> <span class=\"na\">use=</span><span class=\"s\">\"optional\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/xs:extension&gt;</span>\n    <span class=\"nt\">&lt;/xs:complexContent&gt;</span>\n  <span class=\"nt\">&lt;/xs:complexType&gt;</span>\n</code></pre></div>\n\n<p>the JSON and XML representations will not have this discrepancy.</p>",
        "id": 213065625,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1602523640
    },
    {
        "content": "<p>so you see why I said it's a schema related issue. And it will work for some conformant XML processors, and not for others. WHich is why we decided a long time ago to not prohibit it but just to warn about it.</p>",
        "id": 213115778,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602570163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192685\">@Vassil Peytchev</span>  \"...(the) purpose of string-primitive is to define the minLength to 1, and I am wondering if that is necessary...\" - string-primitive implements: (<a href=\"http://build.fhir.org/xml.html\">http://build.fhir.org/xml.html</a>): \"Attributes cannot be empty. Either they are absent, or they are present with at least one character of non-whitespace content.\"<br>\n<span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> \"...it will work for some conformant XML processors, and not for others\" - Yes, I tested yesterday with Expat, and leading whitespace is preserved there.</p>",
        "id": 213121245,
        "sender_full_name": "Marc de Graauw",
        "timestamp": 1602575529
    },
    {
        "content": "<p>My question was whether it is necessary to use a schema construct to enforce the rule that attributes are either \"absent or they are present with st least one character of non-whites pace content.\"</p>\n<p>Can that rule be enforced via schematron or directly at the FHIR processing level?</p>",
        "id": 213164911,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1602600084
    },
    {
        "content": "<p>I don't know what's 'necessary' since schema doesn't enforce all validations. It does what it can. Why should it not do this one?</p>",
        "id": 213215507,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602622578
    },
    {
        "content": "<p>Maybe I am missing the background of this point. From the FHIR specification perspective, without regards to the wire format, what is the <strong>desired</strong> property of the string data type:</p>\n<ol>\n<li>Strings shall not have leading or trailing whitespace</li>\n<li>Strings can have leading but no trailing whitespace</li>\n<li>Strings can have leading or trailing whitespace<br>\nFor each of 1, 2, or 3 I am assuming that there is the desired property of at least one non-whitespace character.</li>\n</ol>",
        "id": 213242065,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1602644978
    },
    {
        "content": "<p>desired by who?</p>",
        "id": 213242438,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602645512
    },
    {
        "content": "<p>the simplest thing do say would be </p>\n<p>\"String values SHALL not have leading or trailing blanks\"</p>",
        "id": 213242441,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602645531
    },
    {
        "content": "<p>but of course, we can't say that. </p>\n<p>various databases already have strings with leading and trailing blanks. Also, markdown is a string</p>",
        "id": 213242450,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602645559
    },
    {
        "content": "<p>the next thing we could say is 'leading and trailing whitespace SHALL be respected', but there's lots of leading XML parsers out there that don't. And these are well into production too</p>",
        "id": 213242501,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602645605
    },
    {
        "content": "<p>so we have to allow both leading and trailing whitespace, but we warn implementers about the pitfalls</p>",
        "id": 213242523,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602645653
    },
    {
        "content": "<p>In this case the pitfalls are at least partially (mostly) due to the FHIR schema which states that string values shall not have leading or trailing spaces. If the data type of the fhir:string/@value attribute were of type xs:string, there would be fewer processors that would not respect the white space.</p>",
        "id": 213242883,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1602646147
    },
    {
        "content": "<p>where does it say that?</p>",
        "id": 213247250,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602652003
    },
    {
        "content": "<p>In my <em>misreading</em> of the XML Schema spec. I am going to try some examples on a few platforms to see if there is a possible improvement in the schema definition to respect white space.</p>",
        "id": 213317394,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1602693391
    },
    {
        "content": "<p>So far I have confirmed that .NET (core 3.1), Java OpenJDK 11 (default Xerces parser implementation), and Java JAXB all preserve leading spaces when parsing an attribute. This was tested with and without schema validation. Earlier, there was a confirmation that Expat also preserves leading white space. What other leading XML parsers would need to be tested? nodejs?</p>\n<p><span class=\"user-mention\" data-user-id=\"280644\">@Jorn Duwel</span>, is there more specific information on the use case where the leading space is not preserved?</p>",
        "id": 213474556,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1602789449
    },
    {
        "content": "<p>At the very least, the sentence</p>\n<blockquote>\n<p>Implementers SHOULD trim leading and trailing whitespace before writing and SHOULD trim leading and trailing whitespace when reading attribute values (for XML schema conformance)</p>\n</blockquote>\n<p>is not accurate regarding XML schema conformance.</p>",
        "id": 213475264,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1602789800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192685\">@Vassil Peytchev</span> , I was out of office for a few days. I will try to get more information on the parser used. Thanks for your efforts btw.</p>",
        "id": 213788546,
        "sender_full_name": "Jorn Duwel",
        "timestamp": 1603115728
    },
    {
        "content": "<blockquote>\n<p>is not accurate regarding XML schema conformance</p>\n</blockquote>\n<p>I think it is. We could perhaps clarify that tools are not necessarily conformant here. Where it really gets complicated is with digital signatures</p>",
        "id": 213873171,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1603166210
    },
    {
        "content": "<p>I am looking at that point next, but I still want to find those production parsers that strip spaces.</p>\n<p>The schema can actually enforce the \"at least one non-whitespace character\" rule using a regex pattern (similar to the markdown one).</p>",
        "id": 213874042,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1603167601
    }
]