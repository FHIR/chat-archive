[
    {
        "content": "<p>When using the _history interaction to poll a server for changes, how can I know up until which exact time the server reported the changes?<br>\nE.g. I'm querying <br>\n<a href=\"http://fhir3.healthintersections.com.au/open/Observation/_history?_since=2017-01-03T13:00:00.000Z+01:00\" target=\"_blank\" title=\"http://fhir3.healthintersections.com.au/open/Observation/_history?_since=2017-01-03T13:00:00.000Z+01:00\">http://fhir3.healthintersections.com.au/open/Observation/_history?_since=2017-01-03T13:00:00.000Z+01:00</a><br>\nWith the next query interval, I want to make sure, I'm missing nothing, so which timestamp should I use?</p>\n<p>Using the time at which I sent the last query seems unsafe to me.</p>",
        "id": 153865263,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1483447600
    },
    {
        "content": "<p>I noticed, that when I call the _history without parameters, Grahame's server returned a \"_prior\" timestamp in the url of the returned bundle. That would be pretty much exactly what I'm looking for, however, this is not documented in the spec.</p>",
        "id": 153865264,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1483447720
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/d3mONXxy1iqAc9EQUxS8q7M4/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/d3mONXxy1iqAc9EQUxS8q7M4/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\"><img src=\"/user_uploads/10155/d3mONXxy1iqAc9EQUxS8q7M4/pasted_image.png\"></a></div>",
        "id": 153865266,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1483447816
    },
    {
        "content": "<p>Ah, I get the _prior parameter added by Grahame's server if I call _history with params also, except that there's the \"&amp;\" missing between _since and _prior!<br>\n<a href=\"/user_uploads/10155/YWzauJDK9JMgJOoHVhI8CFJQ/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/YWzauJDK9JMgJOoHVhI8CFJQ/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\"><img src=\"/user_uploads/10155/YWzauJDK9JMgJOoHVhI8CFJQ/pasted_image.png\"></a></div>",
        "id": 153865267,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1483448027
    },
    {
        "content": "<p>HAPI does not return a _prior parameter. But in turn I get a  value for Bundle.meta.lastUpdated, that I could (safely?) use.</p>",
        "id": 153865269,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1483448767
    },
    {
        "content": "<p>brings me to another question: If I receive multipaged bundles, are the timestamps for Bundle.meta.lastUpdated the same for every page?<br>\nIf not: which one represents the exact time at which the result (total count) was composed/valid?</p>",
        "id": 153865270,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1483448919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> : Due to this issue, all of the self/first/next/last links in the history bundle from your server are broken...</p>",
        "id": 153865283,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1483467111
    },
    {
        "content": "<p>I'll fix the bug in _prior. I would think that you would use the date header in the response as your time</p>",
        "id": 153865291,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483473690
    },
    {
        "content": "<p>Rrrr.. the one timestamp that's not properly formatted to use as parameter for the next call :P</p>",
        "id": 153865295,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1483473840
    },
    {
        "content": "<p>where is not it not formatted properly?</p>",
        "id": 153865301,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483474302
    },
    {
        "content": "<p>in the http header?</p>",
        "id": 153865303,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1483474336
    },
    {
        "content": "<p>yes</p>",
        "id": 153865304,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483474351
    },
    {
        "content": "<p>not formatted the same, right</p>",
        "id": 153865305,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483474357
    },
    {
        "content": "<p>I've been using the last meta last modified from the bundle</p>",
        "id": 153865394,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1483508718
    },
    {
        "content": "<p>Grahame's Server doesn't return bundle.meta.lastUpdated.<br>\nBut if I get you right, you're using bundle.entry.resource.meta.lastUpdated of the last entry on the last page of the results?</p>",
        "id": 153865431,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1483536296
    },
    {
        "content": "<p>What do you do if there are no results? Make the Server check again in the next polling period? ;-)<br>\nLike: \"Really? NOTHING!?!\"</p>",
        "id": 153865433,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1483536547
    },
    {
        "content": "<p>why wouldn't you poll again? I poll quicker if I got something than if I didn't. </p>",
        "id": 153865469,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483560654
    },
    {
        "content": "<p>my server will start returning meta.lastUpdated in the future</p>",
        "id": 153865470,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483560678
    },
    {
        "content": "<p>Well, in a scenario where very few changes ever happen but you poll with short intervals, it wouldn't be very economic to poll the same interval over and over again, even though you already know that nothing happened during that period.</p>",
        "id": 153865472,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1483560841
    },
    {
        "content": "<p>Thanks for adding meta.lastUpdated. That seems he easiest and most reliable way for me (even though I already implemented using the HTTP Date header yesterday)</p>",
        "id": 153865474,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1483560917
    },
    {
        "content": "<p>yes. that's why to delay if nothing. In fact, I sometimes let polling gradually get longer to a pre-defined limit if nothing is happening. I think gmail has the same approach if it can't contact the server</p>",
        "id": 153865475,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483560943
    },
    {
        "content": "<p>Good case for long-polling</p>",
        "id": 153865621,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1483573933
    }
]