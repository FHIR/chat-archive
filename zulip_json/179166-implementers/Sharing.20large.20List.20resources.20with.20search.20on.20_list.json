[
    {
        "content": "<p>I was talking earlier with <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, <span class=\"user-mention\" data-user-id=\"191356\">@Jenni Syed</span>, and <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> about what to do with List resources with many entries.  Unlike a search, List doesn't have any way to page when there are too many entries for the server and/or client to handle easily.  Grahame pointed out that you can use the <a href=\"http://hl7.org/implement/standards/fhir/search.html#list\" target=\"_blank\" title=\"http://hl7.org/implement/standards/fhir/search.html#list\">_list</a> search parameter (which is available to all resources). For example, if </p>\n<div class=\"codehilite\"><pre><span></span>    [base]/List/015ea13f29034217a8d51e42e88a7724\n</pre></div>\n\n\n<p>would be unmanageably large, you could instead get</p>\n<div class=\"codehilite\"><pre><span></span>    [base]/Patient?_list=015ea13f29034217a8d51e42e88a7724\n</pre></div>\n\n\n<p>There are some challenges with this approach.  </p>\n<ol>\n<li>How does the client know it needs to do a search instead of just reading the List?</li>\n<li>How does the client know that the List in question is a list of Patients?</li>\n<li>What if the List contains more than one type of resource?</li>\n<li>The entries in a List are just references; how can you constrain the results of a _list search to not include unnecessary, additional data?</li>\n</ol>\n<p><strong>How does the client know it needs to do a search instead of just reading the List?</strong><br>\nThe server can return an OperationOutcome with an issue type of <strong>too-costly</strong>.</p>\n<p><strong>How does the client know that the List in question is a list of Patients?</strong><br>\nSee the next one - it's harder to solve than this one, and that solution handles both cases.</p>\n<p><strong>What if the List contains more than one type of resource?</strong><br>\nInstead of searching on a specific resource</p>\n<div class=\"codehilite\"><pre><span></span>    [base]/Patient?_list=015ea13f29034217a8d51e42e88a7724\n</pre></div>\n\n\n<p>we can use the _list parameter without a resource</p>\n<div class=\"codehilite\"><pre><span></span>    [base]?_list=015ea13f29034217a8d51e42e88a7724\n</pre></div>\n\n\n<p><strong>The entries in a List are just references; how can you constrain the results of a _list search to not include unnecessary, additional data?</strong><br>\nThe <a href=\"http://hl7.org/implement/standards/fhir/search.html#summary\" target=\"_blank\" title=\"http://hl7.org/implement/standards/fhir/search.html#summary\">summary parameter</a> looks good in theory, but none of its options returns the right set of data.  </p>\n<ul>\n<li><code>_summary=true</code> would return a whole bunch of stuff List wouldn't (e.g. gender, birthDate, and telecom for Patient).  </li>\n<li><code>_summary=text</code> would be weird and also doesn't include the name</li>\n</ul>\n<p>What do people think about another option which would include the identifier and whatever is used as the display in references to that Resource?  Maybe <code>_summary=reference</code>, making the whole thing</p>\n<div class=\"codehilite\"><pre><span></span>    [base]?_list=015ea13f29034217a8d51e42e88a7724&amp;_summary=reference\n</pre></div>",
        "id": 187184593,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1580606944
    },
    {
        "content": "<p>You could also use _elements=id,name (just as you noted with summary)</p>",
        "id": 187184706,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1580607214
    },
    {
        "content": "<p><a href=\"#narrow/stream/179166-implementers/topic/Operations.20to.20manage.20big.20List.20and.20Group.20resources\" title=\"#narrow/stream/179166-implementers/topic/Operations.20to.20manage.20big.20List.20and.20Group.20resources\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Operations.20to.20manage.20big.20List.20and.20Group.20resources</a></p>",
        "id": 187184732,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1580607242
    },
    {
        "content": "<p>(we sort of already went through that and there is a proposal to have operations to page through lists and groups - that we actually implemented )</p>",
        "id": 187184753,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1580607309
    },
    {
        "content": "<p>I prototyped an implementation of updating/managing the list resource using an operation $apply-changes which takes a List resource of type changeset as the only parameter, and then makes the changes listed in the resource to the list.<br>\ne.g. <code>PUT [base]/List/45/$apply-changes</code></p>",
        "id": 187184754,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1580607310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191936\">@Michael Donnelly</span> this bit I didn't understand:</p>\n<blockquote>\n<p>_summary=text would be weird and also doesn't include the name</p>\n</blockquote>",
        "id": 187184960,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580607828
    },
    {
        "content": "<p>I think Michael is implying that text only includes mandatory fields and the narrative, hence <a href=\"http://patient.name\" target=\"_blank\" title=\"http://patient.name\">patient.name</a> isn't there for example</p>",
        "id": 187185009,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1580607925
    },
    {
        "content": "<p>Right <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span></p>",
        "id": 187185102,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1580608093
    },
    {
        "content": "<blockquote>\n<p><a href=\"#narrow/stream/179166-implementers/topic/Operations.20to.20manage.20big.20List.20and.20Group.20resources\" title=\"#narrow/stream/179166-implementers/topic/Operations.20to.20manage.20big.20List.20and.20Group.20resources\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Operations.20to.20manage.20big.20List.20and.20Group.20resources</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span> has a better memory than I do.  Yes, we definitely already discussed this.</p>",
        "id": 187185650,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1580609307
    },
    {
        "content": "<p>Here's the <a href=\"https://jira.hl7.org/browse/FHIR-21650\" target=\"_blank\" title=\"https://jira.hl7.org/browse/FHIR-21650\">tracker</a></p>",
        "id": 187185657,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1580609324
    },
    {
        "content": "<p>Patch is problematic to me as for deletions, don't you need to know the index to remove? And is version specific?</p>",
        "id": 187185806,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1580609614
    },
    {
        "content": "<p>The tracker says </p>\n<blockquote>\n<p>To proceed, James A. will add to List and Group a resource-level operation $getPage and try this out at a future connectathon.</p>\n</blockquote>\n<p>Did anything happen with this?</p>",
        "id": 187186062,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1580610045
    },
    {
        "content": "<p>We (CareEvolution) did implement $getPage</p>",
        "id": 187186571,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1580611107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> technically? Probably yes. For jsonPatch there's also a test operation, assuming you have something that would uniquely identify an entry (eg: patient id for patient list) - but you would have to be more lenient than expected and ignore the index... :)</p>",
        "id": 187187155,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1580612505
    },
    {
        "content": "<blockquote>\n<p>We (CareEvolution) did implement $getPage</p>\n</blockquote>\n<p>Client or server?</p>",
        "id": 187187807,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1580613790
    },
    {
        "content": "<p>Server</p>",
        "id": 187188375,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1580615019
    },
    {
        "content": "<p>ok but name is not in the List.item... so that's no different. Which was that the context was, I thought.</p>",
        "id": 187188876,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580616140
    },
    {
        "content": "<p>(the tracker suggest to use count and offset for the paging, but if you look at the Zulip conversation what was decided was  to use next links like in search results paging - and that's what we implemented for Group - for List we still have the offset method but we are going to align that to use next links)</p>",
        "id": 187189474,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1580617474
    },
    {
        "content": "<p>Nice.</p>",
        "id": 187189524,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1580617586
    },
    {
        "content": "<p>well, I think it's simpler to just use the search API, as Michael and I discussed earlier .</p>",
        "id": 187189527,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580617599
    },
    {
        "content": "<p>I think none of us were aware of that last fall. :(</p>",
        "id": 187189536,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1580617621
    },
    {
        "content": "<p>I don't have a strong opinion which way to use, so I'll leave it to people with stronger opinions to fight it out.</p>",
        "id": 187189542,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1580617656
    },
    {
        "content": "<p>That does not work for groups, does it?</p>",
        "id": 187189699,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1580617967
    },
    {
        "content": "<p>for groups?</p>",
        "id": 187189702,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580618003
    },
    {
        "content": "<p>There is no way to do a search for all the members of a Group like there is for a List, is there it?</p>",
        "id": 187189797,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1580618232
    },
    {
        "content": "<p>The semantics of Group are \"a set of subjects to be acted upon as a collective group\".  Is that's what's wanted here?  (List lets you have any arbitrary collection for any purpose you like - and can't be an actor anywhere.)</p>",
        "id": 187190261,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1580619350
    },
    {
        "content": "<p>I thought we had defined _group just like _list, but apparently not</p>",
        "id": 187190863,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580620633
    },
    {
        "content": "<p>Group was defined as a passive actor.  List is not an actor at all.</p>",
        "id": 187191769,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1580622325
    },
    {
        "content": "<blockquote>\n<p>I thought we had defined _group just like _list, but apparently not</p>\n</blockquote>\n<p>Any reason not to?</p>",
        "id": 187192365,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1580623551
    },
    {
        "content": "<p>not sure. group is more complicated</p>",
        "id": 187192415,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580623633
    }
]