[
    {
        "content": "<p>Say we had a very opinionated server that wanted to put some rules on FHIR resources stored on it. Is it acceptable behaviour for the server to make alterations to a Resource as it is being put onto the server?</p>\n<p>To some extent it already does this with changes to metadata like last updated. Could it also add a code to an Observation? Generate a narrative and insert it into the resource (if the narrative was empty)?</p>\n<p>If it did make these alterations, would it be required to make the altered resource be a new version? So client saves resource at version 5, server notices that it can helpfully generate a nice narrative - can it add the narrative to version 5 on save, or does it now need to generate a version 6 with narrative?</p>",
        "id": 153904951,
        "sender_full_name": "Andrew Patterson",
        "timestamp": 1504853160
    },
    {
        "content": "<p>Pretending it is the same version sounds very nasty.<br>\nSomeone could reasonably complain, \"That is not what I sent\".</p>",
        "id": 153904952,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1504854704
    },
    {
        "content": "<p>it's allowed - we very carefully don't say that this can't be done</p>",
        "id": 153904967,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1504863485
    },
    {
        "content": "<p>but that doesn't make it wise</p>",
        "id": 153904968,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1504863488
    },
    {
        "content": "<p>Do you mean not wise in all scenarios, or just not wise to fix up say version 5 of a resource on the server as it is being saved and still call it resource 5?</p>",
        "id": 153904970,
        "sender_full_name": "Andrew Patterson",
        "timestamp": 1504863673
    },
    {
        "content": "<p>I presume there might be lots of scenarios where a server might receive version 5 of a resource and decide for whatever business reason that something needs to change - and have the server itself create version 6</p>",
        "id": 153904971,
        "sender_full_name": "Andrew Patterson",
        "timestamp": 1504863729
    },
    {
        "content": "<p>That wouldn't be 'unwise'?</p>",
        "id": 153904972,
        "sender_full_name": "Andrew Patterson",
        "timestamp": 1504863750
    },
    {
        "content": "<p>more the first. The server can alter as it saves. it doesn't have to update the version, but that might be useful to underscore that it changed it.</p>",
        "id": 153904973,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1504863752
    },
    {
        "content": "<p>I was generally saying, the server altering the semantics as it saves the resource can be an unwise thing to do.</p>",
        "id": 153904974,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1504863791
    },
    {
        "content": "<p>the clean approach is to increment the version as you make alterations. the server alterations is just another version increment. That also makes auditing a lot more simple</p>",
        "id": 153904977,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1504863970
    },
    {
        "content": "<p>and your client will not be surprised</p>",
        "id": 153904978,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1504864001
    },
    {
        "content": "<p>Ok thanks. I think if I did do it I would definitely do a bump version and server to server POST.</p>",
        "id": 153904980,
        "sender_full_name": "Andrew Patterson",
        "timestamp": 1504864023
    },
    {
        "content": "<p>Altering is going to be pretty common actually - lots of servers won't be able to store all extensions received, or possibly even some of the core elements.  A bigger change is adding new elements or change data values.  That'll be less common, but is posisble if the system doesn't \"trust\" the sender for certain data, or if it has supplemental data it chooses to integrate.  Doing any of these things will break any digital signatures that happen to be present though.  The possibility of this occurring is one of the reasons we support echoing back the stored resource as part of the response to a 'create'.</p>",
        "id": 153905048,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1504906105
    },
    {
        "content": "<p>I was pondering this question with regards to fields like <code>CodeSystem.count</code> which may differ from the actual number of defined concepts (and where <code>CodeSystem.content == complete</code>)</p>",
        "id": 153905057,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1504914456
    },
    {
        "content": "<p>Is the unaltered (submitted) 'version' made available as a first version, or somewhere? I would recommend a Provenance record explain this sever modification and why. (Provenance.agent = server identity)</p>",
        "id": 153906009,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505085442
    },
    {
        "content": "<p>Yeah, I think in my head there are 2 approaches - an almost silent 'fixing' of something submitted - I'm pretty wary of that. And the 2nd approach would just be to accept the submitted version as per normal, and then the server itself submit a new version with its 'fixes' (with as you say a proper Provenance recorded with server as agent)</p>",
        "id": 153906011,
        "sender_full_name": "Andrew Patterson",
        "timestamp": 1505085709
    }
]