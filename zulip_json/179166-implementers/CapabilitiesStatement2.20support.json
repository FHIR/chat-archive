[
    {
        "content": "<p>I've just set up <a href=\"http://test.fhir.org/r5\">test.fhir.org/r5</a> - the first end point for 4.6.0, the current draft of R5</p>\n<p>This endpoint has support for the R5 CapabilitiesStatement2. To see this:</p>\n<ul>\n<li><a href=\"http://test.fhir.org/r5/metadata?mode=capabilities2\">http://test.fhir.org/r5/metadata?mode=capabilities2</a> (arbitrarily cut off after the first resource - a testing bug I need to fix)</li>\n<li><a href=\"http://test.fhir.org/r5/$features\">http://test.fhir.org/r5/$features</a> - all the features defined in the server (quite a lot)</li>\n<li><a href=\"http://test.fhir.org/r5/$features?feature=rest:server.resource:Account\">http://test.fhir.org/r5/$features?feature=rest:server.resource:Account</a> - a filtered list of features.</li>\n</ul>",
        "id": 240036693,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1621854748
    },
    {
        "content": "<p>except, of course, that I just found a bug in the last thing</p>",
        "id": 240036717,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1621854776
    },
    {
        "content": "<p>Also maybe server is down?</p>",
        "id": 240041840,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1621858011
    },
    {
        "content": "<p>that was upgrading to fix the bug</p>",
        "id": 240042482,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1621858399
    },
    {
        "content": "<p>which it is now</p>",
        "id": 240042498,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1621858411
    },
    {
        "content": "<p><a href=\"http://test.fhir.org/r5/$features?feature=rest.Codesystem:http://loinc.org\">http://test.fhir.org/r5/$features?feature=rest.Codesystem:http://loinc.org</a></p>",
        "id": 240057720,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1621866098
    },
    {
        "content": "<p>Hello,</p>\n<p>I attended the Q2 discussion today about the CapabilityStatement and CapabilityStatement2. The discussion between <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> , <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  and <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> was very complex .</p>\n<p>I am struggling to understand why we would need a CapabilityStatement with so many features? Is there a usecase where a client application searches for a \"capable\" server at runtime? In order to be able to process and parse a CapabilityStatement, the software to process and parse it also becomes complex. Is a client application going to \"query\" using the \"features\" at run time using code value pairs?  Implementing this type  of parsing of CS2 would be very difficult due to the number of features that may need to be supported and the <br>\nValueSets of the code/value pairs that would need to be maintained by the client application.</p>\n<p>Any clarification on the need and usecase would be greatly appreciated,.</p>\n<p>Thanks,</p>\n<p>Joel and <span class=\"user-mention\" data-user-id=\"192545\">@Alex Goel</span></p>",
        "id": 240099886,
        "sender_full_name": "Joel Francis",
        "timestamp": 1621884595
    },
    {
        "content": "<p>I generally agree with your question <span class=\"user-mention\" data-user-id=\"193795\">@Joel Francis</span>. In many (most, I'd bet) cases \"read the docs out of band\" is a good enough alternative to in-band negotiation. And it can convey a ton of nuance that our carefully modeled features sometimes miss.</p>",
        "id": 240100371,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1621884761
    },
    {
        "content": "<p>That said, we do have a lot of variability across server behaviors, and as we look at more flexible/dynamic ways of creating connections, I totally get why there's interest here.</p>",
        "id": 240100789,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1621884945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> I am not sure what \"flexible/dynamic ways of creating connections\" necessarily means in this context, unless you are suggesting that a client application is expected to query for what features are available at runtime, which as <span class=\"user-mention\" data-user-id=\"193795\">@Joel Francis</span> mentioned would be very difficult to implement in a production client application. </p>\n<p>From our perspective the main time when the content from the CapabilityStatement would be leveraged is when a Service Level Agreement (SLA) and/or Data Sharing Agreement (DSA) is established. This SLA/DSA will likely specify what is contractually required to be shared between two entities. It is unlikely given the security and privacy constraints of healthcare that anyone would need to do this on the fly. Is our interpretation of the potential use case incorrect?</p>",
        "id": 240102483,
        "sender_full_name": "Alex Goel",
        "timestamp": 1621885780
    },
    {
        "content": "<p>Agreed. Honestly I  do not see a situation where a production application queries features on the fly. I think the only time this  would happen is at the Connectathon or during initial testing</p>",
        "id": 240102825,
        "sender_full_name": "Joel Francis",
        "timestamp": 1621885935
    },
    {
        "content": "<blockquote>\n<p>I am not sure what \"flexible/dynamic ways of creating connections\" necessarily means in this context, unless you are suggesting that a client application is expected to query for what features are available at runtime, which as @Joel Francis mentioned would be very difficult to implement in a production client application.</p>\n</blockquote>\n<p>Yeah, these are patterns that groups like <a href=\"https://confluence.hl7.org/display/SEC/FHIR+at+Scale+%28FAST%29%3A+Scalable+Registration%2C+Authentication%2C+and+Authorization+for+FHIR+Ecosystem+Participants+PSS\">\"FAST\"</a> are looking at. There's significant complexity here, as you note.</p>",
        "id": 240102899,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1621885977
    },
    {
        "content": "<p>Our (production) client queries feature on the fly. It checks for availability of search parameters to decide which query to generate</p>",
        "id": 240102995,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1621886032
    },
    {
        "content": "<blockquote>\n<p>SLA/DSA will likely specify what is contractually required to be shared between two entities</p>\n</blockquote>\n<p>I think you're describing a kind of offline or static use case for publishing and/or evaluating a CapabilityStatement, which is certainly fair game. Even in this context, knowing specific features (whether documented in prose, or in concrete tags/extensions/feature-json format) matters.</p>",
        "id": 240103087,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1621886062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span> <br>\nGiven that the CS2 is brand new for FHIR R5, I assume that your production application dynamically generates search parameters (which is something I would expect a production app to do), and does not query for features. Is that correct? Does it search the CapabilityStatement for what REST parameters are accepted by the server?</p>\n<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> In the registration use case for FAST, what is the purpose of the CapabilityStatement? What would it be used for? From the PSS, this appears to mostly be focused on registering authentication endpoints. It seems for this use case a client app would not need to dynamically process a CapabilityStatement, it would be known once the app was registered automatically. Am I missing something? </p>\n<p>I agree that having these features documented, especially from a testing perspective in a CapabilityStatement is necessary and valuable, but where I do not understand when a client server would dynamically respond to what is in a CapabilityStatement.  </p>\n<p>I think a key point we want to emphasize is that we are asking when this would need to be done at runtime.</p>",
        "id": 240104717,
        "sender_full_name": "Alex Goel",
        "timestamp": 1621886814
    },
    {
        "content": "<blockquote>\n<p>It seems for this use case a client app would not need to dynamically process a CapabilityStatement, it would be known once the app was registered automatically. Am I missing something?</p>\n</blockquote>\n<p>I'm just saying that in the FAST pattern there's an expectation of more flexible config, where clients and servers might be introduced automatically and start interacting right away without developers \"doing an integration\" or reading a specific server's docs. I'm not the best person to weigh in on this; just trying to infer what I can about where folks are trying to take this work in the future.</p>",
        "id": 240105155,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1621887010
    },
    {
        "content": "<blockquote>\n<p>I think a key point we want to emphasize is that we are asking when this would need to be done at runtime.</p>\n</blockquote>\n<p>For any given use case, there may not be a need. Clearly we can imagine some use cases where there <em>is</em> a need; whether these are going to be important and achievable (from a pragmatic perspective) isn't totally clear; that's part of what we want to figure out through use case discussion and a connectathon track.</p>",
        "id": 240105298,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1621887105
    },
    {
        "content": "<blockquote>\n<p>Does it search the CapabilityStatement for what REST parameters are accepted by the server?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 240105767,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1621887333
    },
    {
        "content": "<p>My main concern here is how complex this is becoming, before we can do the simple things at a wide scale. I agree that we need to innovate through discussion and testing, but we need clear problems to solve otherwise we're just adding complexity which could actively hurt how easy FHIR is to implement</p>",
        "id": 240119318,
        "sender_full_name": "Alex Goel",
        "timestamp": 1621894303
    },
    {
        "content": "<p>I strongly agree!</p>",
        "id": 240119491,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1621894419
    },
    {
        "content": "<p>I think the primary initial application here is safety. There is very definitely a desire to right smart applications that are portable across applications, and that don't require redevelopment across servers. </p>\n<p>Either the servers can be forced to be consistent, which is not possible even amongst ourselves, or we let the applications find out information about the servers, or at least, insist that some kinds of server behaviors be true</p>",
        "id": 240124073,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1621897370
    },
    {
        "content": "<blockquote>\n<p>Is there a usecase where a client application searches for a \"capable\" server at runtime? I</p>\n</blockquote>\n<p>there is, but for me, the use cases are less ambitious, and more compelling</p>\n<blockquote>\n<p>In order to be able to process and parse a CapabilityStatement, the software to process and parse it also becomes complex</p>\n</blockquote>\n<p>The point is to avoid that. Make a list of features you need, ask the server if it supports them all. No processing needed.</p>",
        "id": 240124192,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1621897441
    },
    {
        "content": "<blockquote>\n<p>we need clear problems to solve otherwise we're just adding complexity which could actively hurt how easy FHIR is to implement</p>\n</blockquote>\n<p>Well, there's a tension between narrowly defined fragile software that is easier to write, and where you do not want to have to deal with that complexity, and robust adaptable software where you have no choice but to engage with it. That's a trade-off that runs through all of what we do</p>",
        "id": 240124328,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1621897540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179166-implementers/topic/CapabilitiesStatement2.20support/near/240124192\">said</a>:</p>\n<blockquote>\n<p>In order to be able to process and parse a CapabilityStatement, the software to process and parse it also becomes complex</p>\n<p>The point is to avoid that. Make a list of features you need, ask the server if it supports them all. No processing needed.</p>\n</blockquote>\n<p>To this point, the CapabilityStatement would be retrieved during app development/testing to ensure that the correct data could be retrieved. It wouldn't necessarily be done at run time correct? <br>\n<span class=\"user-mention\" data-user-id=\"193795\">@Joel Francis</span> please jump in</p>",
        "id": 240125361,
        "sender_full_name": "Alex Goel",
        "timestamp": 1621898284
    },
    {
        "content": "<p>Sharing my understanding......The whole SMART concept is to make apps that are substitutable and reuseable. The fact that their on FHIR and a particular version on FHIR meant that I can interchange without any redevelopment and simply have to sign a service level agreement .While signing the service level agreement I will make sure the FHIR server can provide that data otherwise my app would be useless. So based on that why would my app need to re-query the capabilities of the server???</p>",
        "id": 240126281,
        "sender_full_name": "Joel Francis",
        "timestamp": 1621899015
    },
    {
        "content": "<p>It sounds like you may be expecting too much from FHIR; it's best to keep in mind that the specification defines a wide surface area and different servers implement different subsets and make different choices around optional features</p>",
        "id": 240129625,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1621902047
    },
    {
        "content": "<p>Some of the use-cases for FHIR involve developing clients where the developer will <em>never</em> read the documentation of the server - or even know what servers it will be connected to.  That application will have to determine when pointed at an arbitrary server:<br>\na) whether it is capable of safely operating at all; and<br>\nb) if it needs to alter what it does based on the server's limitations</p>\n<p>And that's actually a desirable target state for much of the FHIR environment.  We're trying, where we can, to reduce the amount of site-to-site negotiation and customization necessary for systems to operate.  One of the primary purposes of CapabilityStatement is to allow that runtime negotiation.</p>\n<p>The other purpose of CapabilityStatement is to make clear what a system does from a conformance perspective.  The more implementation guides define variations in potential behavior, the greater the set of things a server may need to declare.</p>",
        "id": 240132345,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1621904939
    },
    {
        "content": "<p>From a safety perspective the CapabilityStatement makes sense, but we're wondering what is the necessity of CS2? It seems like this would be negotiated well in advance, even if the developers did not have an SLA to work of. It wouldn't be negotiated at run time. </p>\n<p>Patient safety would also likely be negotiated in an SLA, since you wouldn't want to share any data with an entity you are allowed to share data with. Data should not be opened up to potential privacy breaches in this regard. We believe that if you're connecting to a FHIR server, in the majority of use cases (certainly 80%) you'd be connecting to a known FHIR server; one which you have an SLA and Data Sharing Agreement with.</p>",
        "id": 240216189,
        "sender_full_name": "Alex Goel",
        "timestamp": 1621960949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191315\">Josh Mandel</span> <a href=\"#narrow/stream/179166-implementers/topic/CapabilitiesStatement2.20support/near/240129625\">said</a>:</p>\n<blockquote>\n<p>It sounds like you may be expecting too much from FHIR; it's best to keep in mind that the specification defines a wide surface area and different servers implement different subsets and make different choices around optional features</p>\n</blockquote>\n<p>I don't think we're expecting too much from FHIR, I believe we're anticipating how real world implementations of FHIR will operate at a governance level. People will need to agree to use the same specifications, and profiles from FHIR, IHE, etc. to ensure what can be shared is interoperable. FHIR provides a data sharing model, not governance on how data can, should, and will be shared. It's still up to legal agreements to determine that</p>",
        "id": 240216478,
        "sender_full_name": "Alex Goel",
        "timestamp": 1621961101
    },
    {
        "content": "<p>I was referring specifically to this assertion:</p>\n<blockquote>\n<p>The fact that their on FHIR and a particular version on FHIR meant that I can interchange without any redevelopment and simply have to sign a service level agreement .</p>\n</blockquote>",
        "id": 240217756,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1621961628
    },
    {
        "content": "<p>Sorry for being vague, but what I meant to say is, a SMART app would need to know what it will retrieve (and what is available) from a FHIR server it is interacting with. What I meant by this was that assertion is that if during the SLA, if a SMART client knew that the server was not capable of providing data in a specific version of the FHIR model, not understood by both the server of the client, regardless of if it was FHIR or any other data exchange format, then it would be pointless to sign the service level agreement.</p>",
        "id": 240220551,
        "sender_full_name": "Joel Francis",
        "timestamp": 1621962933
    },
    {
        "content": "<p>In most cases there is no SLA not any direct contact between the client developer and the server. This is the case for all patient apps in the US market</p>",
        "id": 240220739,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1621963020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span> so there's no legal agreement or business rules around what patient data is allowed to be exchanged?</p>",
        "id": 240221492,
        "sender_full_name": "Alex Goel",
        "timestamp": 1621963371
    },
    {
        "content": "<p>Yes, there is no legal agreement between patient app developers and providers / payers hosting the FHIR APIs. Providers and payers have to make the API available  and allow any app to connect.</p>",
        "id": 240222253,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1621963707
    },
    {
        "content": "<p>not an explicit one between developer and server, no. Now you might always ensure that this is the case - fine, you can. And if you do, then you won't value any reflection features we add, since this is all sorted out by engineers during contract negotiations. </p>\n<p>but that's not how all exchanges will work, and we're added reflection features and feature negotiation to support other users</p>",
        "id": 240222375,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1621963767
    },
    {
        "content": "<p>Yes but there are still rules around what data is to be made available, and in what format, and there is still negotiation of those rules. I assume you're referring to information blocking <span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span></p>",
        "id": 240222396,
        "sender_full_name": "Alex Goel",
        "timestamp": 1621963777
    },
    {
        "content": "<p>+1 to Michele - there are a lot of providers (and payors) in the US, and a lot of patient apps. Most of them have no contractual relationship to each other. Capability statements are very useful here, although I'm skeptical that many of the smaller apps are truly sophisticated enough to adapt their behaviour according to the server's capabilities.</p>\n<p>I would consider the use case where a data holder and a data consumer have an SLA and a data sharing agreement as distinct from that model.</p>",
        "id": 240222444,
        "sender_full_name": "Paul Church",
        "timestamp": 1621963798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197072\">Paul Church</span> <a href=\"#narrow/stream/179166-implementers/topic/CapabilitiesStatement2.20support/near/240222444\">said</a>:</p>\n<blockquote>\n<p>I'm skeptical that many of the smaller apps are truly sophisticated enough to adapt their behaviour according to the server's capabilities.</p>\n</blockquote>\n<p>Agreed</p>",
        "id": 240222635,
        "sender_full_name": "Alex Goel",
        "timestamp": 1621963873
    },
    {
        "content": "<blockquote>\n<p>I'm skeptical that many of the smaller apps are truly sophisticated enough to adapt</p>\n</blockquote>\n<p>It's not first about <em>adapt</em>. First, it's <em>check</em>, and we all have a vested interest in that</p>",
        "id": 240222636,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1621963873
    },
    {
        "content": "<p>Agreed, I think the first bar to clear is \"don't talk to the server if it doesn't have enough capabilities for your expectations\"</p>",
        "id": 240222798,
        "sender_full_name": "Paul Church",
        "timestamp": 1621963927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192545\">@Alex Goel</span> Yes, there are rules about the minimum set of resources providers and payers have to make available, but beyond that there are a lot of variations, and as I wrote our app definitely use the CapabilityStatement at run time to detect these variations and act accordingly</p>",
        "id": 240222852,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1621963951
    },
    {
        "content": "<p>Ok, but if the use case is check if the capability is there, that's different than dynamically responding to the server's capabilities at run time - which if you return to the beginning of this conversation, where <span class=\"user-mention\" data-user-id=\"193795\">@Joel Francis</span> and I had an issue</p>",
        "id": 240222933,
        "sender_full_name": "Alex Goel",
        "timestamp": 1621963983
    },
    {
        "content": "<p>CareEvolution is a good example of the next level up, adapt your approach according to the capabilities</p>",
        "id": 240222961,
        "sender_full_name": "Paul Church",
        "timestamp": 1621963997
    },
    {
        "content": "<blockquote>\n<p>where @Joel Francis and I had an issue</p>\n</blockquote>\n<p>your issue has always appeared to be \"I don't want to do this, so no one else can reasonably want to\"</p>",
        "id": 240223170,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1621964069
    },
    {
        "content": "<p>If you set the system to favour these level'd up apps only, you're creating an uneven playing field for all of the small apps, and preventing those small apps from being innovative, our issue is that, dynamically responding to CapabilityStatements is an unfair expectations for all interactions</p>",
        "id": 240223316,
        "sender_full_name": "Alex Goel",
        "timestamp": 1621964131
    },
    {
        "content": "<p>OK. It's reasonable concern, and I'm happy to make sure that the final outcome doesn't require servers and clients to adapt to feature availability, or even perform feature negotiation, or have dynamically adjusting capability statements, though IGs will be able to require those things</p>",
        "id": 240223702,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1621964302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179166-implementers/topic/CapabilitiesStatement2.20support/near/240223702\">said</a>:</p>\n<blockquote>\n<p>OK. It's reasonable concern, and I'm happy to make sure that the final outcome doesn't require servers and clients to adapt to feature availability, or even perform feature negotiation, or have dynamically adjusting capability statements, though IGs will be able to require those things</p>\n</blockquote>\n<p>That's all I was hoping for you to say <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> :) . This is was fun!</p>",
        "id": 240224101,
        "sender_full_name": "Joel Francis",
        "timestamp": 1621964492
    },
    {
        "content": "<p>Thank you! I think that's a good conclusion</p>",
        "id": 240224213,
        "sender_full_name": "Alex Goel",
        "timestamp": 1621964525
    },
    {
        "content": "<p>Sorry for my late input. Inferno uses server's CapabilityStatement to decide which test case to run. For example, if the server's CS does not indicate searchparameter for patient's name, Inferno assumes that server does not support search patient by name and skips the corresponding test.</p>",
        "id": 241156149,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1622643964
    }
]