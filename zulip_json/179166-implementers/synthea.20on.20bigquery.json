[
    {
        "content": "<p><a href=\"https://bigquery.cloud.google.com/dataset/fhir-org-starter-project:synthea\" target=\"_blank\" title=\"https://bigquery.cloud.google.com/dataset/fhir-org-starter-project:synthea\">https://bigquery.cloud.google.com/dataset/fhir-org-starter-project:synthea</a> is a copy of the Synthea \"Synthetic MA\" data that I just loaded into BQ.  <span class=\"user-mention\" data-user-id=\"194832\">@Eyal Oren</span> <span class=\"user-mention\" data-user-id=\"194833\">@Patrik Sundberg</span> <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 153920213,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1510928716
    },
    {
        "content": "<p>(Code used to do the loading -- very rough, since I just put this together during the DevDays keynote... <a href=\"https://github.com/jmandel/synthea-to-bigquery\" target=\"_blank\" title=\"https://github.com/jmandel/synthea-to-bigquery\">https://github.com/jmandel/synthea-to-bigquery</a>)</p>",
        "id": 153920214,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1510928776
    },
    {
        "content": "<p>(and source .ndjson files in Google Cloud Stotrage are at <a href=\"https://storage.googleapis.com/fhir-synthetic-ma/2017-05-24/AllergyIntolerance.ndjson.gz\" target=\"_blank\" title=\"https://storage.googleapis.com/fhir-synthetic-ma/2017-05-24/AllergyIntolerance.ndjson.gz\">https://storage.googleapis.com/fhir-synthetic-ma/2017-05-24/AllergyIntolerance.ndjson.gz</a> and so on... changing the resource.)</p>",
        "id": 153920218,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1510929003
    },
    {
        "content": "<p>+1</p>",
        "id": 153920219,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1510929139
    },
    {
        "content": "<p>try count(*) from synthea.Encounter or so</p>",
        "id": 153920220,
        "sender_full_name": "Eyal Oren",
        "timestamp": 1510929192
    },
    {
        "content": "<p>it's fun</p>",
        "id": 153920221,
        "sender_full_name": "Eyal Oren",
        "timestamp": 1510929195
    },
    {
        "content": "<p>or e.g., select format_timestamp(\"%A\", period.start), count(*) from synthea.Encounter group by 1</p>",
        "id": 153920222,
        "sender_full_name": "Eyal Oren",
        "timestamp": 1510929242
    },
    {
        "content": "<p>(Patient and Observation are <del>still loading</del> loaded.)</p>",
        "id": 153920223,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1510929247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191381\">@Jason Walonoski</span> FYI  -- the synthea publications made this super easy, thanks!</p>",
        "id": 153920227,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1510932687
    },
    {
        "content": "<p>awesome, thanks <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>  now we need to do a nice little tutorial</p>",
        "id": 153920228,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1510935539
    },
    {
        "content": "<p>Yeah, definitely.  For anyone looking to whet their appetite, here's a mildly interesting kind of query that shows off a bunch of features -- it's definitely something that would be hard to do from the FHIR REST API alone. (Definitely a toy example, but with a realistic shape to it.)</p>\n<p><em>Goal: see what fraction of patients are diagnosed with hypertension, stratified by the patient's maximum observed systolic blood pressure.</em>  </p>\n<ul>\n<li><a href=\"https://bigquery.cloud.google.com/savedquery/1026763011045:af2600264add402db85a96d06fced950\" target=\"_blank\" title=\"https://bigquery.cloud.google.com/savedquery/1026763011045:af2600264add402db85a96d06fced950\">Link to saved query for exploration</a></li>\n<li><a href=\"/user_uploads/10155/h2b08SZbwx3s5nTv2Xb3zttB/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">Example output</a></li>\n</ul>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/h2b08SZbwx3s5nTv2Xb3zttB/pasted_image.png\" target=\"_blank\" title=\"Example output\"><img src=\"/user_uploads/10155/h2b08SZbwx3s5nTv2Xb3zttB/pasted_image.png\"></a></div>",
        "id": 153920248,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1510962046
    },
    {
        "content": "<p>You start to see pretty quickly that the synthetic data are \"way too clean\" for real life, with a sharp diagnostic cutoff right at the guideline-compatible boundary of 140mmHg.</p>",
        "id": 153920249,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1510962136
    },
    {
        "content": "<p>We'd like to make the Mimic dataset available - a real de-identified value set. But it's not currently available in public, and so we need to negotiate with the owners to make it so</p>",
        "id": 153920250,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1510978554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194832\">@Eyal Oren</span> reading <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>'s query makes me wonder about introducing terminology service logic into BigQuery. How would we get it so that instead of   </p>\n<div class=\"codehilite\"><pre><span></span>where a_coding.code=&#39;55284-4&#39;\n</pre></div>",
        "id": 153920252,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1510978777
    },
    {
        "content": "<p>we can write something like </p>\n<div class=\"codehilite\"><pre><span></span>where a_coding.code in valueset &quot;http://my.com/ValueSet/all-blood-pressures&quot;\n</pre></div>",
        "id": 153920253,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1510978835
    },
    {
        "content": "<p>? (and I know that we've specifically been ensuring you don't need to in this case, I'm interested in the myriad other cases where we won't and can't)</p>",
        "id": 153920254,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1510978864
    },
    {
        "content": "<p>in general, I'd look to define a closure table.... see <a href=\"http://build.fhir.org/terminology-service.html#closure\" target=\"_blank\" title=\"http://build.fhir.org/terminology-service.html#closure\">http://build.fhir.org/terminology-service.html#closure</a></p>",
        "id": 153920255,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1510978941
    },
    {
        "content": "<p>Having a set of authoritative vocabularies to join in here will be super helpful, I agree. Definite strength of the platform is being able to join across disparate data sets including reference data and instance data. (E.g. there is a public dataset of NPI data that could be directly joined with our \"private\" synthea data)</p>",
        "id": 153920257,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1510985582
    },
    {
        "content": "<p>I can share an example of what the join would look like with rxnorm for example, since I have that loaded in a place that I can access. It's obviously not the same text that you suggested Graham but it is going to be reasonably straightforward and does allow on the fly creation of (effectively) value sets.</p>",
        "id": 153920258,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1510985694
    },
    {
        "content": "<p>I think what you are saying is that it would be useful for a terminology service to be able to push expansions to a bigquery data set for this purpose</p>",
        "id": 153920259,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1510985759
    },
    {
        "content": "<p>Yes indeed <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span> There are a couple of directions to explore, including what you've described here as well as loading tables directly from source schema (e.g. for rxnorm, the <code>rxnrel</code>, <code>rxnsat</code>, <code>rxnconso</code> tables and so on). I think each approach will have some utility.</p>",
        "id": 153920260,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1510987525
    },
    {
        "content": "<p>Well, my attempt to show a cool join is a bit delayed -- looks like the synthea data has <code>MedicationRequest</code> resources with references like</p>\n<div class=\"codehilite\"><pre><span></span>&quot;medicationReference&quot;: {\n  &quot;reference&quot;: &quot;&quot;\n}\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"191381\">@Jason Walonoski</span>  is this a known issue with the data set?</p>",
        "id": 153920261,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1510992500
    },
    {
        "content": "<p>(Also, I will have to update my loader to turning bundle-internal <code>urn:</code>  references into regular id-based references.)</p>",
        "id": 153920262,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1510992589
    },
    {
        "content": "<p>agreed w/ wanting to join terminologies in, esp directly from their definition URLs.<br>\nfyi that we have rxnorm already available on bigquery to be joined in : <a href=\"https://cloud.google.com/bigquery/public-data/rxnorm\" target=\"_blank\" title=\"https://cloud.google.com/bigquery/public-data/rxnorm\">https://cloud.google.com/bigquery/public-data/rxnorm</a><br>\nwe can &amp; will do the same for loinc (i think folks are already worknig on that -- <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> you could load loinc into this same project just to demonstrate)</p>",
        "id": 153920269,
        "sender_full_name": "Eyal Oren",
        "timestamp": 1511024781
    },
    {
        "content": "<p>also agreed that a condition such as \"where a_coding.code = '55284-4' \" is in reality unlikely to be very useful, given the myriad of blood pressures in loinc ;-)</p>",
        "id": 153920270,
        "sender_full_name": "Eyal Oren",
        "timestamp": 1511024878
    },
    {
        "content": "<p>so of course you should load the terminologies. But I'm talking about value sets - not the same thing</p>",
        "id": 153920271,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511028325
    },
    {
        "content": "<p>Indeed the example query was just a toy (and for the Synthea data set, a single fixed code was good enough to demonstrate the rest of the logic -- it's quite homogenous).</p>",
        "id": 153920272,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511029006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> definitely terminologies are different from value sets, and we need support for both. For \"intensional\" value sets, having access to the full terminology structure can help define/reconstitute the value set directly within an analytical query; the flexibility can be nice.</p>",
        "id": 153920273,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511029124
    },
    {
        "content": "<p>Do we have a FHIR representation of some/all value sets from the NLM Value Set Authority Center?</p>",
        "id": 153920274,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511029150
    },
    {
        "content": "<p>That'd be nice for various reasons, and we could load it into an abalytical db as well.</p>",
        "id": 153920275,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511029230
    },
    {
        "content": "<p>I've processed all the CDA value sets; I don't know if that's all the value sets.</p>",
        "id": 153920276,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511029410
    },
    {
        "content": "<p>It's quite a lot of code to do expansions; let's say we decide to get on the terminology servers to push the expansions up (for those that are not infinite) - how would that happen?</p>",
        "id": 153920277,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511029461
    },
    {
        "content": "<p>Does VSAC host (definitions for) any non-finite value sets? I didn't think so.</p>",
        "id": 153920281,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511039886
    },
    {
        "content": "<p>no VSAC doesn't. But FHIR has several of them - and it's because VSAC can't, not because there's no need</p>",
        "id": 153920290,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511066763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191381\">@Jason Walonoski</span> one other note on the data: looks like Immunizations don't have any <code>id</code>. Is this expected?</p>",
        "id": 153920335,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511120680
    },
    {
        "content": "<p>Cool -- so using the public rxnorm data set, a join with clinical synthea data might ask: \"How many synthea meds contained hydrocodone as an ingredient?\" Knowing that hydrocodone is RxNorm concept <code>5489</code>, the query can be done with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"k\">FROM</span>\n  <span class=\"o\">`</span><span class=\"n\">fhir</span><span class=\"o\">-</span><span class=\"n\">org</span><span class=\"o\">-</span><span class=\"n\">starter</span><span class=\"o\">-</span><span class=\"n\">project</span><span class=\"p\">.</span><span class=\"n\">synthea</span><span class=\"p\">.</span><span class=\"n\">Medication</span><span class=\"o\">`</span><span class=\"n\">meds</span><span class=\"p\">,</span> <span class=\"k\">unnest</span><span class=\"p\">(</span><span class=\"n\">meds</span><span class=\"p\">.</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">coding</span><span class=\"p\">)</span>  <span class=\"n\">med_coding</span>\n   <span class=\"k\">join</span> <span class=\"o\">`</span><span class=\"n\">bigquery</span><span class=\"o\">-</span><span class=\"k\">public</span><span class=\"o\">-</span><span class=\"k\">data</span><span class=\"p\">.</span><span class=\"n\">nlm_rxnorm</span><span class=\"p\">.</span><span class=\"n\">rxn_all_pathways_current</span><span class=\"o\">`</span> <span class=\"n\">pathways</span>\n     <span class=\"k\">on</span> <span class=\"n\">pathways</span><span class=\"p\">.</span><span class=\"n\">source_rxcui</span><span class=\"o\">=</span><span class=\"k\">cast</span><span class=\"p\">(</span><span class=\"n\">med_coding</span><span class=\"p\">.</span><span class=\"n\">code</span> <span class=\"k\">as</span> <span class=\"n\">string</span><span class=\"p\">)</span>\n<span class=\"k\">where</span>\n  <span class=\"n\">med_coding</span><span class=\"p\">.</span><span class=\"k\">system</span><span class=\"o\">=</span><span class=\"ss\">&quot;http://www.nlm.nih.gov/research/umls/rxnorm&quot;</span> <span class=\"k\">and</span>\n  <span class=\"n\">pathways</span><span class=\"p\">.</span><span class=\"n\">target_rxcui</span><span class=\"o\">=</span><span class=\"ss\">&quot;5489&quot;</span>\n</pre></div>\n\n\n<p>... this matches any single-ingredient drug, multi-ingredient drug, brand name, generic, pack, dose form, etc, that <em>contains hydrocodone as an ingredient</em>. It's otherwise quite challenging to do this kind of thing without pre-processing.</p>",
        "id": 153920383,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511185021
    },
    {
        "content": "<p>And now for an example query joining LOINC to clinical data! (This isn't an officially hosted copy of LOINC, but I've added it to our sample project just to illustrate the point.)</p>\n<p><em>See how often deprecated, discouraged, or trial LOINC terms are used in the data set</em>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">#</span><span class=\"n\">standardSQL</span>\n<span class=\"k\">select</span> <span class=\"n\">loinc</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"k\">count</span>\n<span class=\"k\">from</span>\n  <span class=\"n\">synthea</span><span class=\"p\">.</span><span class=\"n\">Observation</span><span class=\"p\">,</span>\n  <span class=\"k\">unnest</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">coding</span><span class=\"p\">)</span> <span class=\"n\">observation_coding</span>\n  <span class=\"k\">join</span> <span class=\"o\">`</span><span class=\"n\">loinc_test</span><span class=\"p\">.</span><span class=\"n\">loinc</span><span class=\"o\">`</span> <span class=\"n\">loinc</span> <span class=\"k\">on</span> <span class=\"n\">loinc</span><span class=\"p\">.</span><span class=\"n\">loinc_num</span><span class=\"o\">=</span><span class=\"n\">observation_coding</span><span class=\"p\">.</span><span class=\"n\">code</span>\n<span class=\"k\">where</span>\n  <span class=\"n\">observation_coding</span><span class=\"p\">.</span><span class=\"k\">system</span> <span class=\"o\">=</span> <span class=\"ss\">&quot;http://loinc.org&quot;</span>\n<span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">loinc</span><span class=\"p\">.</span><span class=\"n\">status</span>\n<span class=\"k\">order</span> <span class=\"k\">by</span> <span class=\"k\">count</span>\n</pre></div>\n\n\n<table>\n<thead>\n<tr>\n<th>status</th>\n<th>count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TRIAL</td>\n<td>202426</td>\n</tr>\n<tr>\n<td>DISCOURAGED</td>\n<td>7037333</td>\n</tr>\n<tr>\n<td>ACTIVE</td>\n<td>50339669</td>\n</tr>\n</tbody>\n</table>",
        "id": 153920471,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511218883
    },
    {
        "content": "<p>BTW, I re-loaded the synthea data with:</p>\n<ul>\n<li>Proper references now enabled across resources</li>\n<li>An updated schema that includes descriptions for all fields (drawn from the FHIR spec)</li>\n</ul>\n<p>This approach avoids the auto-guessed schema that (wrongly) concluded thing like \"<code>Observation.coding.code</code> is  an integer\" (just 'cause only SNOMED codes were used in the data set, and those happen to be integers).</p>",
        "id": 153920479,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511228703
    },
    {
        "content": "<p>thanks</p>",
        "id": 153920480,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511229765
    },
    {
        "content": "<p>we do terminology in postgresql by introducing Concept resource- this simplify valuesets queries</p>",
        "id": 153920493,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1511243223
    },
    {
        "content": "<p>Is there some alternative to XMLHttpRequest the can be used in BigQuery's UDFs?</p>",
        "id": 153920550,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1511254840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span>  Do you mean for fetching external data from within a udf? I don't think so, from <a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/user-defined-functions\" target=\"_blank\" title=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/user-defined-functions\">https://cloud.google.com/bigquery/docs/reference/standard-sql/user-defined-functions</a> . You'd need a js interpreter to  expose a special synchronous http request function, but udfs run in an environment  with only (a subset of) standards js built-ins. What's the use case you have in mind?</p>",
        "id": 153920656,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511270910
    },
    {
        "content": "<p>Hmm... seems like you found some interesting things with the Synthea data, as well as some issues.</p>\n<p>Did you load the STU3 or DSTU2 data? I'm assuming STU3.</p>\n<p>Immunizations were not assigned IDs because they aren't referenced by other resources in the Bundle. It is assumed the FHIR server will assign the ID during the transaction.</p>\n<p>At the time the data was generated, we had MedicationRequest reference Medication resources. We later changed this just to have medicationCodeableConcept instead (Medication doesn't add any value here, since we're just using RxNorm codes). Apparently we did not regenerate the data to include this change. At any rate, the medicationReferences should point to a Medication by <code>\"urn:uuid:#{resource_id}\"</code> (that is Ruby syntax). Not sure why they are empty. But this is fixed in the latest version of Synthea.</p>",
        "id": 153920675,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1511273688
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191381\">@Jason Walonoski</span>! I just downloaded the published data set, using the most recent version (Version 2, which uses STU3) listed at <a href=\"https://syntheticmass.mitre.org/download.html\" target=\"_blank\" title=\"https://syntheticmass.mitre.org/download.html\">https://syntheticmass.mitre.org/download.html</a>. Details <a href=\"https://github.com/jmandel/synthea-to-bigquery/blob/master/01-prepare.sh\" target=\"_blank\" title=\"https://github.com/jmandel/synthea-to-bigquery/blob/master/01-prepare.sh\">here</a>. Is there a newer release I should be using?</p>",
        "id": 153920751,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511281964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> Thanks for posting your work on this -- it is very interesting, and I always like to see how others use the data. The link to Version 2 is the latest release of the <strong>data</strong>, so that is good. The latest release of the <strong>code</strong> has fixed those problems. So, we'll need to update the data. TBD on timeline for that.</p>",
        "id": 153920774,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1511289524
    },
    {
        "content": "<p>I'm looking for a way to connect up to a FHIR terminology server</p>",
        "id": 153920872,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1511315228
    },
    {
        "content": "<p>todo what?</p>",
        "id": 153920874,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511315465
    },
    {
        "content": "<p>Clearly there are performance concerns about REST calls during query evaluation.  What would work is being able to populate a table as a result of REST call.  In particular I'm thinking about the results of $closure.  i.e., I'm hoping to be able to perform code:below type queries</p>",
        "id": 153920875,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1511315575
    },
    {
        "content": "<p>well, Josh is effectively saying that if you upload the code system directly to the bigquery repository, you can do those things in sql.</p>",
        "id": 153920876,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511316630
    },
    {
        "content": "<p>unless the semantics of the code systems are as complicated as SNOMED Ct</p>",
        "id": 153920877,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511316643
    },
    {
        "content": "<p>in which case the most effective way would be to generate the entire closure table and upload it once</p>",
        "id": 153920878,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511316696
    },
    {
        "content": "<p>I'm indeed saying what Grahame says I'm saying <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span> It's very useful to load closure tables especially for these recursive structures since BQ doesn't have \"connect by\" or \"with recursive\".</p>",
        "id": 153920880,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511318188
    },
    {
        "content": "<p>and this works for some cases. Michael and I are interested in the rest of the cases where the value set machinary brings real value</p>",
        "id": 153920881,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511318418
    },
    {
        "content": "<p>though code:below is not one of those cases</p>",
        "id": 153920882,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511318433
    },
    {
        "content": "<p>Can you share some examples of where the value set machinery helps (and especially if helps in places where a closure table can't stand in for it)?</p>",
        "id": 153920883,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511318996
    },
    {
        "content": "<p>so there's several things a txserver - with logic - does over this:<br>\n- in a value set, you make an arbitrary list of codes that are part of the value set that aren't purely derived from the semantics of the code system. So you really want the tx server to be able to push the final list up so you can join across them<br>\n- but there's some value sets where the list of codes is not finite (ones with grammar). So in this case, generating the join table (loosely called a closure table so far) is a shared responsibility - the data source says 'here's the codes I have' and the terminology server says 'ok, here's the table for this set of codes'<br>\n- the value set can cross code systems (makes people's skin crawl, but it happens)</p>",
        "id": 153920885,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511320637
    },
    {
        "content": "<p>Most of the VSAC value sets cross code systems, fwiw</p>",
        "id": 153920886,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511322311
    },
    {
        "content": "<p>I'm not sure I understand the interaction you're describing with respect to \"join tables\" - - what does the resulting table say/mean/include?</p>",
        "id": 153920887,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511322397
    },
    {
        "content": "<p>For value sets that are finite: pushing these up into an analytics environment seems very natural.</p>",
        "id": 153920888,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1511322468
    },
    {
        "content": "<p>yes. I think that's the first of the 2 use cases here: post the value set to the Tx Server, and it pushes the expansion to the analytics store</p>",
        "id": 153920889,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511322617
    },
    {
        "content": "<p>then you can join using it</p>",
        "id": 153920890,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511322640
    },
    {
        "content": "<p>the infinite value sets need an additional step where the TS knows the set of codes in the join space</p>",
        "id": 153920891,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511322667
    },
    {
        "content": "<p>Yep. And of course you can do most of this on a code system basis with SQL stuff.  But generally that means you need to invest in learning about the table structure for every code system you're interested in.  And, of course, there's the whole SNOMED thing with (to a lesser extent) post coordination, but more common (IMO) valuesets defined with ECL.</p>\n<p>Then there's ConceptMaps, but they're a problem at the moment as there's only the code-by-code $translate rather than an analogue to $expand (or $closure) for bulk-translation</p>",
        "id": 153920900,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1511330537
    },
    {
        "content": "<p>well, when would you need an operation, as opposed to joining across a concept map content?</p>",
        "id": 153920948,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511336356
    },
    {
        "content": "<p>We have some ConceptMaps that are algorithmic - effectively infinite - so you can't grab the content, store it in a table and then do a join with your data.  It's a similar scenario to the $closure use-case</p>",
        "id": 153920995,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1511349267
    },
    {
        "content": "<p>what's an example?</p>",
        "id": 153921030,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511360306
    },
    {
        "content": "<p>A concept map that looks at a code's display in order to find an appropriate match - we have a range of algorithms for this and expose them as different ConceptMaps.  The usual use-case is mapping a large number of codes at once</p>",
        "id": 153921196,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1511400956
    },
    {
        "content": "<p>what does the concept map look like?</p>",
        "id": 153921198,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1511401132
    },
    {
        "content": "<p>It's implicitly defined and doesn't have an extension, only a URI that you pass to $translate (although the missing parameter to $translate that allows this still hasn't been added to 3.1.0 - <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13509\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13509\">GF#13509</a>)</p>",
        "id": 153921215,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1511403721
    },
    {
        "content": "<blockquote>\n<p>We'd like to make the Mimic dataset available - a real de-identified value set. But it's not currently available in public, and so we need to negotiate with the owners to make it so</p>\n</blockquote>\n<p>Has there been any progress in mapping Mimic to FHIR directly (but not via OMOP)? That is, anyone knows anyone doing this? :-)</p>",
        "id": 153992296,
        "sender_full_name": "Zoran Milosevic",
        "timestamp": 1535717280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191398\">@Zoran Milosevic</span> Hi, I'm interested in mapping MIMIC 3.0 to FHIR, and recently started to work on it. <a href=\"https://github.com/linewalks/mimic-fhir\" target=\"_blank\" title=\"https://github.com/linewalks/mimic-fhir\">https://github.com/linewalks/mimic-fhir</a></p>",
        "id": 154010733,
        "sender_full_name": "Cinyoung Hur",
        "timestamp": 1540034136
    }
]