[
    {
        "content": "<p>I see that the FHIR spec has recommendations for how to handle <a href=\"http://build.fhir.org/http.html#ccreate\">resource idempotency</a> but I'm curious to know if there are any recommendations for handling <strong>HTTP request idempotency</strong>.</p>\n<p>My team has some thoughts on how we might do it, but we'd like to follow precedent if there is any. Does anyone here have any experience with this or recommendations?</p>",
        "id": 206096882,
        "sender_full_name": "Lonnie King",
        "timestamp": 1596678020
    },
    {
        "content": "<p>that's a pretty wide open question. can you be more specific?</p>",
        "id": 206097240,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1596678486
    },
    {
        "content": "<p>Sure, happy to spell this out in more details. I'll also include some additional thinking in terms of solutions.</p>\n<p><strong>Scenario:</strong> I operate a FHIR server and one of my (external) clients accidentally sends the same HTTP <code>POST</code> request to my server twice.</p>\n<p>There are cases where this might affect the patient's clinical outcomes, and I want my application to provide some functionality that will allow a client to uniquely identify a request (or possibly resources within that request) so that I can avoid the accidental creation/duplication of resources. I understand that <code>POST</code> is not, by default, an idempotent operation according the the HTTP spec, but in instances where it could be harmful to a patient's safety I should want to provide some functionality to protect against this.</p>\n<p><strong>Using Request Idempotency</strong><br>\nSome <a href=\"https://stripe.com/docs/api/idempotent_requests\">banking APIs</a> <a href=\"https://developer.paypal.com/docs/api-basics/#api-idempotency\">handle it</a> <a href=\"https://developer.squareup.com/docs/working-with-apis/idempotency\">this way</a>. Which provides a nice clean way for my application to handle duplicate request identification at the transport layer. I will know immediately if this request has accidentally come to me twice and can respond before I even look at the request body.</p>\n<p><strong>Using Resource Idempotency</strong><br>\nAnother way to approach this might be to allow clients to supply their system's unique identifier as the <code>URI</code> in a <code>Meta</code> for each resource. I could store and check these <code>URI</code>s at creation time for any resource and only create resources that have unique <code>URI</code>s provided.</p>\n<p>For a complete solution, I might choose to implement both of these to solve both problems of Resource and Request idempotency.</p>\n<p>Would love to get some thoughts and feedback on this. Thanks!</p>",
        "id": 206099513,
        "sender_full_name": "Lonnie King",
        "timestamp": 1596681629
    },
    {
        "content": "<p>Have you looked at Conditional Create? (<a href=\"https://build.fhir.org/http.html#ccreate\">https://build.fhir.org/http.html#ccreate</a>)</p>",
        "id": 206101267,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1596684307
    },
    {
        "content": "<blockquote>\n<p>one of my (external) clients accidentally sends the same HTTP POST request to my server twice</p>\n</blockquote>\n<p>use a payload header is interesting, but implies that that the problem happens in the stack. I'm interested to know if other people have this problem or how they've solved it</p>",
        "id": 206101467,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1596684608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/Request.20Idempotency/near/206101267\">said</a>:</p>\n<blockquote>\n<p>Have you looked at Conditional Create? (<a href=\"https://build.fhir.org/http.html#ccreate\">https://build.fhir.org/http.html#ccreate</a>)</p>\n</blockquote>\n<p>Yes, I have looked at this, but I'm not sure how it could solve the problem described in my scenario as the client has no knowledge of the IDs for the resources when it creates the duplicate requests. Maybe there is something I'm missing?</p>",
        "id": 206101813,
        "sender_full_name": "Lonnie King",
        "timestamp": 1596685246
    },
    {
        "content": "<p>You wouldn't use the 'id' - but you might use an 'identifier' or some other element that you know to be unique.</p>",
        "id": 206101933,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1596685396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/Request.20Idempotency/near/206101933\">said</a>:</p>\n<blockquote>\n<p>You wouldn't use the 'id' - but you might use an 'identifier' or some other element that you know to be unique.</p>\n</blockquote>\n<p>Oh, yes, I think I understand. That's exactly what I'm suggesting in my description for Using Request Idempotency.</p>\n<p>I think you're suggesting that, more concretely,  I use something like <code> If-None-Exist: &lt;requiest-identifier&gt;</code> to identify unique requests coming into the application and respond appropriately. Did I understand you correctly?</p>",
        "id": 206102202,
        "sender_full_name": "Lonnie King",
        "timestamp": 1596685826
    },
    {
        "content": "<p>I'm also very curious to know if anyone has opinions/thoughts on the suggested use of the <code>Meta.uri</code> property as a resource idempotency key.</p>",
        "id": 206102215,
        "sender_full_name": "Lonnie King",
        "timestamp": 1596685892
    },
    {
        "content": "<p>I would suggest <code>If-None-Exist</code> as well.  You need to have some (client side) notion of uniqueness (ie what is a key for the resource being created), and then map that into the _search_ criteria.<br>\nI'm not sure what property <code>Meta.uri</code> is? <a href=\"https://www.hl7.org/fhir/resource.html#Meta\">https://www.hl7.org/fhir/resource.html#Meta</a></p>",
        "id": 206102357,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1596686143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191343\">Michael Lawley</span> <a href=\"#narrow/stream/179166-implementers/topic/Request.20Idempotency/near/206102357\">said</a>:</p>\n<blockquote>\n<p>I would suggest <code>If-None-Exist</code> as well.  You need to have some (client side) notion of uniqueness (ie what is a key for the resource being created), and then map that into the _search_ criteria.<br>\nI'm not sure what property <code>Meta.uri</code> is? <a href=\"https://www.hl7.org/fhir/resource.html#Meta\">https://www.hl7.org/fhir/resource.html#Meta</a></p>\n</blockquote>\n<p>Sorry, I need to correct that. I meant to say the <code>Meta.source</code> property which is of type <code>uri</code>.</p>",
        "id": 206102833,
        "sender_full_name": "Lonnie King",
        "timestamp": 1596686783
    },
    {
        "content": "<p>Meta.source is not expected to be unique across instances.  In fact, that would defeat its purpose which is to act as a quick flag about where a record originated.</p>",
        "id": 206104584,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1596689374
    },
    {
        "content": "<p>it might be unique in particular circumstances, and it might meet the requirement, but it feels inherently problematic compared to something more directly linked to a business identifier.</p>",
        "id": 206106639,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1596692182
    },
    {
        "content": "<p>but that assumes there is such a thing. I presume our working use case is prescribing a medication?</p>",
        "id": 206106649,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1596692203
    }
]