[
    {
        "content": "<p><a href=\"http://build.fhir.org/http.html#history\">http://build.fhir.org/http.html#history</a> says</p>\n<blockquote>\n<p>The return content is a Bundle with type set to history containing the specified version history, sorted with oldest versions last, and including deleted resources.</p>\n</blockquote>\n<p>Does that sort ordering apply to just the resources on a single page, or also to the overall order of the pages?<br>\nIs a request like <code>GET [base]/_history</code> required to return the latest changes, or is it valid for that to return the oldest changes in the system?<br>\nDoes the <code>next</code> link need to page backward in time, or is it valid for <code>next</code> to go forward in time?</p>",
        "id": 230511972,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1615901574
    },
    {
        "content": "<p>It applies to overall order of pages.  'next' would go backward in time.</p>",
        "id": 230515047,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615902785
    },
    {
        "content": "<p>(It also applies within a page)</p>",
        "id": 230515353,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615902912
    },
    {
        "content": "<p>The spec states \"The history interaction can be used to set up a subscription from one system to another, so that resources are synchronized between them\". This is problematic using pages going back in time. To sync, systems need to roll forward in time order. Consider a scenario where there's an outage and a large gap appears between the state of two systems. In order to fill that gap, the client system would need to hit the last page (oldest change first) and walk the timeline forward. Paging like this is impractical when the ingestion rate is high and potentially continuous. It is particularly expensive on the server side.</p>",
        "id": 230518562,
        "sender_full_name": "Robin Arnold",
        "timestamp": 1615904038
    },
    {
        "content": "<p>Hmm.  That's a really good point.  The needs for synchronization (oldest to newest) and the needs for a user who's browsing history (which typically is newest to oldest) aren't the same.  Given that this is now normative, I guess the solution for synchronization is to run the query and use the 'last' link to get the oldest page and then navigate the result set using the 'previous' link.  It's not ideal, but at this point, it's the best we can do for prior releases.  For future releases, we could introduce the notion of allowing a sort parameter that would allow you to override the default behavior.  Do you want to submit a change request?</p>",
        "id": 230525320,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615906196
    },
    {
        "content": "<p>thanks Lloyd.  FWIW, thats basically just what I had in mind (we are trying to support a \"changes\" feed that moves forward in time and I wanted to re-use the _history endpoint for it)</p>",
        "id": 230526404,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1615906549
    },
    {
        "content": "<p>either robin or I will open a change request for the introducing a <code>_sort</code> parameter (and I think we'll prototype this on our end as well)</p>",
        "id": 230526776,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1615906673
    },
    {
        "content": "<p>Finally got around to creating this one:  <a href=\"https://jira.hl7.org/browse/FHIR-31709\">https://jira.hl7.org/browse/FHIR-31709</a></p>",
        "id": 233355378,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1617728798
    }
]