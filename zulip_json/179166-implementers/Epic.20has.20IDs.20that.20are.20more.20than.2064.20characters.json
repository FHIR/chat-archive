[
    {
        "content": "<p>I'm using HAPI libraries to communicate with an Epic FHIR servers and store the responding data from HAPI on a HAPI FHIR server. In a couple cases, it has responded with IDs that are 80+ characters long, which causes HAPI to throw an exception because FHIR has a requirement that IDs are no longer that 64 characters. Does anyone have any ideas on how to work around this? Does hapi-fhir-jpaserver-starter have any configurations or options to work around this issue?</p>",
        "id": 247715918,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1627655574
    },
    {
        "content": "<p>Just a thought --- what if you stored the Epic id as one of the identifier elements and then created your own (UUID?) id for the resource.   Of course then you'd have to fix up all FHIR references though so that might not be ideal.   Another, related thought it so have an algorithm that converts the long ids into 64 chars (or less) for the Id.  You'd still have the resource referencing  problem though.    (One advantage of putting the Epic Id in the identifier array is that you have traceability back to the original Epic id.)</p>",
        "id": 247719202,
        "sender_full_name": "John Silva",
        "timestamp": 1627657254
    },
    {
        "content": "<blockquote>\n<p>a couple cases, it has responded with IDs that are 80+ characters long, which causes HAPI to throw an exception because FHIR has a requirement that IDs are no longer that 64 characters. Does anyone have any ideas on how to work around this?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span>  we saw some related issues with IDs in Epic's SMART Scheduling Links implementation. Is this on your radar?</p>",
        "id": 247730237,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1627662267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191505\">@Sean McIlvenna</span> of course this is broken server behavior and should be fixed by the server.</p>\n<p>That said: even in <em>general</em> with <em>correctly behaving servers</em> it can be hard to re-use an external server's IDs, because if you talk with &gt;1 server, you might see an ID like <code>Patient/123</code> being used differently across them.</p>\n<p>One pattern you can use is to explicitly remap <code>(server, resourceType, resourceId)</code> tuples into your own IDs, and keep track of the mappings you create. A sub-pattern is to accomplish this mapping by feeding the tuple into a hash function, like</p>\n<div class=\"codehilite\"><pre><span></span><code> $ echo -n &quot;https://server.example.org/Patient/123&quot; | openssl dgst -sha256\n 6cebb4ef2ce81ed08cbc094ee54e5513ebc2463a02bf2d73024004e6b7572704\n</code></pre></div>\n<p>(This works, of course, even if the source IDs are too long.)</p>",
        "id": 247730749,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1627662506
    },
    {
        "content": "<p>So, I think all roads lead to \"change the id and update references to it\"...<br>\nDoes anyone know if there is any functionality in the HAPI libraries to aid in doing this? Or, do I need to create some custom logic to go through Java objects and find any instances of \"Reference\" class, and check if the reference needs to be updated with a new ID...</p>",
        "id": 247734645,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1627664227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>  The 64-character ID limit is separate than the issues we ran into with SMART Scheduling Links.  We've been aware of the 64-charactacter issue for a while, but there really just isn't a practical, straightforward way for us to address it.  I think we have a project on our backlog to see what we can do about it, but we've been kept busy by a bunch of regulatory related FHIR  dev recently <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> .</p>",
        "id": 247738916,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627666514
    },
    {
        "content": "<p>This has come up before in industry discussions, and I think there were Jira (or gforge) tickets asking if we could increase the ID length.  If there were tickets, they were not accepted, or it might have just been chat.fhir discussion that ended up in a \"no - not going to change the length in the FHIR spec\" answer.</p>",
        "id": 247739157,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627666661
    },
    {
        "content": "<p>Fascinating. Does this come up as an issue in Inferno testing today?</p>",
        "id": 247745246,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1627669743
    },
    {
        "content": "<p>Inferno uses the hl7 validator, so we'll catch that error if the validator catches it. Some initial testing is leading me to believe that the validator doesn't, though, which seems odd...</p>",
        "id": 247746789,
        "sender_full_name": "Stephen MacVicar",
        "timestamp": 1627670593
    },
    {
        "content": "<p>Huh <span class=\"user-mention\" data-user-id=\"225612\">@Stephen MacVicar</span> you're quite right -- not only does the validator happily accept <code>id</code>s &gt;64 chars, but it also accepts <code>id</code>s  &gt;1M chars (i.e., longer than any FHIR <code>string</code> is allowed to be -- the data type that <code>id</code> specializes).</p>",
        "id": 247748291,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1627671412
    },
    {
        "content": "<p>I added comments on <a href=\"https://github.com/hapifhir/org.hl7.fhir.core/issues/513\">https://github.com/hapifhir/org.hl7.fhir.core/issues/513</a> which raises the broader issue.</p>",
        "id": 247748679,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1627671615
    },
    {
        "content": "<p>aversable</p>",
        "id": 247924971,
        "sender_full_name": "David deRoode",
        "timestamp": 1627913989
    },
    {
        "content": "<p>I don't think it makes sense to keep an Epic to UUID mapping table. Epic is publishing these IDs as FHIR IDs, so they need to be compliant with the spec. They are welcome to create an identifier or extension if they want to share their 80+ character internal ID in addition to a legal FHIR ID.</p>",
        "id": 247934851,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1627919201
    },
    {
        "content": "<p>I think once the validator is updated per Josh's comment we should see some movement because their data will start failing validation.</p>",
        "id": 247934993,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1627919295
    },
    {
        "content": "<p>It's already failing when trying to load into HAPI. <br>\n<span class=\"user-mention\" data-user-id=\"192685\">@Vassil Peytchev</span> <span class=\"user-mention\" data-user-id=\"191936\">@Michael Donnelly</span> any thoughts here?</p>",
        "id": 247935635,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1627919653
    },
    {
        "content": "<p>Both things are true: IDs should be spec compliant <em>and</em> systems consuming resources from &gt;1 external source will need to remap (or use some full URI representation, not just bare IDs), else conflicts arise.</p>",
        "id": 247935722,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1627919696
    },
    {
        "content": "<p>Agreed Josh. In our initial use case we are assuming a single tenent thus no ID conflicts, but if/when we move to multi-tenent we will need to deal with mappings.</p>",
        "id": 247935939,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1627919832
    },
    {
        "content": "<p>The other options is that we could update the spec to allow longer IDs.  I know of at least a few non-Epic system that have also run into issues with the 64-character limit.</p>",
        "id": 247942059,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627923544
    },
    {
        "content": "<p>And to pre-empt any comments about that being normative content, at some point, FHIR is going to have to sort out how to change normative content.  It wouldn't apply retroactively to R4 of course, but there is an increasingly large list of normative content that needs updating.</p>",
        "id": 247942449,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627923702
    },
    {
        "content": "<p>Also, for reference, some previous threads about ID length:</p>\n<ul>\n<li><a href=\"#narrow/stream/179166-implementers/topic/Resource.2Eid.20Data.20Type\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Resource.2Eid.20Data.20Type</a></li>\n<li><a href=\"#narrow/stream/179166-implementers/topic/Confused.20about.20URN.20fullUrl's.20and.20resource.2Eid's\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Confused.20about.20URN.20fullUrl's.20and.20resource.2Eid's</a></li>\n</ul>",
        "id": 247942454,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627923706
    },
    {
        "content": "<p>At this point, the id type is normative.  Changing it to allow larger ids would be a breaking change and would be a very challenging thing to do at this point in the core spec's life cycle.</p>",
        "id": 247942957,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1627923955
    },
    {
        "content": "<p>At some point, we're going to have to figure out how to make updates to normative content when the spec isn't meeting the needs of the industry.  ID length maybe isn't on the top of the list, but there are other areas both in infrastructure and PA where I know we'll need to look at normative updates.</p>",
        "id": 247944470,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627924518
    },
    {
        "content": "<p>The problem is that it's been 64chars for a long time and changing to a longer limit would break a lot of systems.  We need to create not only an update but a transition plan  for systems that rely on that 64char limit</p>",
        "id": 247944672,
        "sender_full_name": "David Pyke",
        "timestamp": 1627924619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> , I understand your point about breaking changes... But, I don't think loosening the rule is the same as tightening the rule when it comes to breaking changes. To implementers that are following the rule, it doesn't break anything for them.</p>",
        "id": 247947646,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1627926166
    },
    {
        "content": "<p>Of course, if they <em>consume</em> FHIR resources, they would need to account for longer IDs, but my main concern of \"breaking changes\" would be for those that create resources and distribute the resources to others.</p>",
        "id": 247947793,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1627926245
    },
    {
        "content": "<p>I'm going to have to agree that changing the max length is <em>definitely</em> a breaking change.  If a database currently has a field with a 64-character limit (since that's what it is defined to be), this change will be incompatible.  Same thing for any system doing validation outside of the official FHIR validator (e.g., checking field lengths, regex expressions, etc.).</p>\n<p>Note that I'm not arguing for or against right now, just noting that changing it will potentially break <em>any</em> existing system.</p>",
        "id": 247948453,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1627926604
    },
    {
        "content": "<p>Breaking change is any change that could cause systems to fail when consuming conformant data.  We've defined the types of changes that systems are expected to be able to handle between versions (e.g. new elements, new codes, new resources, new reference types).  Relaxing invariants wasn't one of those.  I'm not saying it's impossible, just that it will be very hard - so we'd need to be convinced that workarounds weren't possible or that the pain of workarounds to the community would be higher than the pain of making the change.</p>",
        "id": 247948757,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1627926755
    },
    {
        "content": "<p>One variable you can take into consideration, is that any system that works with Epic already can support longer FHIR IDs <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 247949240,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627927021
    },
    {
        "content": "<p>Sometimes the best way to make a change like this is through grass-roots civil disobedience. If you can invent a label for the new variant and get a bunch of vendors to use your test suite, you can reduce the FUD for early adopters. They will still have to go through their tool chain with a fine-toothed comb to see if some field in a database or a fixed memory allocation in a misc script somewhere will break their data flow, but that's stuff that would have to happen anyways if v5 were to suddenly announce longer IDs.</p>",
        "id": 247949333,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1627927069
    },
    {
        "content": "<p>That's a great way to lose your rights to call yourself FHIR Conformant.</p>",
        "id": 247949447,
        "sender_full_name": "David Pyke",
        "timestamp": 1627927119
    },
    {
        "content": "<p>the data is not FHIR but the tools still are (unless everyone's expected to reject IDs that are too long)</p>",
        "id": 247949750,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1627927251
    },
    {
        "content": "<p>and if that goes well, you can make that case for changing the FHIR definition to adopt the new industry practice</p>",
        "id": 247949918,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1627927312
    },
    {
        "content": "<p>if it doesn't, you probably weren't going to convince the world to change anyways</p>",
        "id": 247950020,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1627927351
    },
    {
        "content": "<p>if you add a must-understand extension, you also provide a nice way to weed out the <code>FHIR+longIDs</code> from the <code>FHIR</code> instance data.</p>",
        "id": 247950354,
        "sender_full_name": "Eric Prud'hommeaux",
        "timestamp": 1627927515
    },
    {
        "content": "<p>We just need to create a FHIR <a href=\"http://bit.ly\">bit.ly</a> service that can create short ids that expand into longer ids. ;-)</p>",
        "id": 247951364,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1627928131
    },
    {
        "content": "<p>A hexadecimal representation of a guid, takes 32 characters to assign a unique value to every grain of sand on earth and have values left over. If you use something like base64 it takes even less. How many unique values does one EHR need for a given resource? How you cross 64 characters is by doing things like compositing all the attribute values into making a PK, \"Epic-Condition-Site-Client-Provider-ConditionCode-Patient-number\" rather than assigning a guid as a primary key and be done with it.</p>",
        "id": 247952717,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1627928923
    },
    {
        "content": "<p>The issue (which I've seen non-Epic systems run in to as well), is that sometimes it is <em>very</em> useful to have reversible IDs rather than mapped IDs.  That means you need to encode enough data in the ID such that when decoded, it has enough info for you to resolve it to the data you are addressing.</p>",
        "id": 247953159,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627929151
    },
    {
        "content": "<p>If you have a reversible id, one that is calculated and can be decoded. Take my example above. I used the condition code in my id value let's just assume that the condition was 12345678. Turns out I made a typo and the actual condition code was supposed to be 12345679. Now that code attribute has been fixed to 12345679 but the decode of the id still has 12345678 in it. What is the correct code value?  Since the id value of a given resource can never change, then in the case of generated id's, the components that comprise the id shall never change. Otherwise you end up with conflicts. My opinion: the id attribute should only ever have 1 definition, \"the PK of the resource\".</p>",
        "id": 247963475,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1627934128
    },
    {
        "content": "<p>I don't think we need to get in to the details of <em>how</em> the \"encoded\" FHIR IDs get generated. I'll make the claim that reasonable and competent developers can do it in a way that works, and is not afflicted by the issue you describe, though not necessarily in a way that fits into 64 characters.</p>",
        "id": 247969085,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627937063
    },
    {
        "content": "<p>Though the example of the composite FHIR server might help.  Say you have a FHIR facade that is the front for two backend FHIR servers.  The facade might  generate a FHIR ID their own outward-facing FHIR ID that is just the composite of the namespace and the FHIR ID of a backend FHIR server.</p>",
        "id": 247969322,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627937197
    },
    {
        "content": "<p>See a presentation Grahame gave at DevDays November 2020 on this topic -- <a href=\"https://youtu.be/stFGtk-YKPQ\">https://youtu.be/stFGtk-YKPQ</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"stFGtk-YKPQ\" href=\"https://youtu.be/stFGtk-YKPQ\"><img src=\"https://uploads.zulipusercontent.net/838d5d22646dd83f5546fee8d94f9353f989e07e/68747470733a2f2f692e7974696d672e636f6d2f76692f73744647746b2d594b50512f64656661756c742e6a7067\"></a></div>",
        "id": 247969837,
        "sender_full_name": "John Moehrke",
        "timestamp": 1627937461
    },
    {
        "content": "<p>useful conclusion he gives on the 64 character limit... essentially... no matter what limit we give, someone will come up with a need for more. Thus we stick with 64 character...</p>",
        "id": 247970033,
        "sender_full_name": "John Moehrke",
        "timestamp": 1627937551
    },
    {
        "content": "<p>Thus. It is those that might produce issues with more than 64 characters that must come up with a solution to their own problem. The limit is normative.</p>",
        "id": 247970146,
        "sender_full_name": "John Moehrke",
        "timestamp": 1627937616
    },
    {
        "content": "<p>makes sense. so, I'm fine with that normative limit, generally speaking...<br>\none thing I'd like to know is if there is standard guidance on how to handle IDs when taking resources from one FHIR server and putting them on another?</p>",
        "id": 247970515,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1627937796
    },
    {
        "content": "<p>that is a task left to a systems design engineer... get a good one.</p>",
        "id": 247971887,
        "sender_full_name": "John Moehrke",
        "timestamp": 1627938596
    },
    {
        "content": "<p>I'm fine if the industry settles on a 64-character limit.  But I don't accept the \"it is normative now and forever\" argument.  That comes up more and more in FHIR, and if FHIR can't evolve, then it will become obsolete.  I am not saying the 64-character limit is an essential evolution point, but if something is not right in the spec, we need a path to get it updated, normative or not.</p>",
        "id": 247972473,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627938966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/179166-implementers/topic/Epic.20has.20IDs.20that.20are.20more.20than.2064.20characters/near/247971887\">said</a>:</p>\n<blockquote>\n<p>that is a task left to a systems design engineer... get a good one.</p>\n</blockquote>\n<p>\"Good\" is relative in engineering, as all engineering disciplines are about evaluating tradeoffs.  One the one hand you have strict spec compliance, and on the other hand you have lower system cost, faster time to market for the API (so patients  can get their data sooner), and in some cases, significantly simpler system design (for example, the facade server in front of other FHIR servers), which leads to lower system maintenance.</p>",
        "id": 247973592,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627939540
    },
    {
        "content": "<p>Following ...<br>\nThe notion of trying to 'encode info' in an id seems like a bad idea. [This might be the 'root cause' of Epic's long FHIR IDs -- remember, behind the facade is a MUMP string-based 'database' system.]   I remember reading articles about NOT doing that for coding systems, and I think the same applies for FHIR IDs.</p>\n<p>The DB world frequently deals with 'schema changes', which this is in essence.   The process is not cheap but it's typically a migration process that includes not only the schema migration but also the data migration, tooling, client code.   Definitely not easy but can be done if there is value in doing it. </p>\n<p>(not saying that is the case here but for system integrators that do not have the ability to change what Epic (or other system) gives them they need to work around this to get the job done, even if the spec says \"not supported\".)</p>",
        "id": 247973616,
        "sender_full_name": "John Silva",
        "timestamp": 1627939560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298707\">John Silva</span> <a href=\"#narrow/stream/179166-implementers/topic/Epic.20has.20IDs.20that.20are.20more.20than.2064.20characters/near/247973616\">said</a>:</p>\n<blockquote>\n<p>Following ...<br>\nThe notion of trying to 'encode info' in an id seems like a bad idea.</p>\n</blockquote>\n<p>I feel like the notion of composite IDs is fairly standard.  <a href=\"https://en.wikipedia.org/wiki/Composite_key\">https://en.wikipedia.org/wiki/Composite_key</a></p>",
        "id": 247973744,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627939629
    },
    {
        "content": "<p>Ok, yes, in DBs they have primary keys that are composites of multiple columns.   It just seems like exposing that composite key as an external identifier is problematic.    What if the composite key is 5 columns -- the length becomes unmanageable -- and fragile if the DB owner decides to change the schema design.</p>",
        "id": 247974437,
        "sender_full_name": "John Silva",
        "timestamp": 1627940053
    },
    {
        "content": "<p>Hi, Need help on the authorization for backend systems. Getting client invalid error... <br>\nWhat is the resolve on that?</p>",
        "id": 247975369,
        "sender_full_name": "Tejvir Saggu",
        "timestamp": 1627940682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"430197\">@Tejvir Saggu</span> please create a new topic. Also, we'll need some more details. Also also: probably better to ask to whoever support the server you are trying to connect to</p>",
        "id": 247975606,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1627940767
    },
    {
        "content": "<blockquote>\n<p>It just seems like exposing that composite key as an external identifier is problematic. What if the composite key is 5 columns -- the length becomes unmanageable -- and fragile if the DB owner decides to change the schema design.</p>\n</blockquote>\n<p>Being Epic maybe maybe they actually know what they are doing and they have good reason to do things that way</p>",
        "id": 247975913,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1627940980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span>  Thanks for the response. Will do that</p>",
        "id": 247975936,
        "sender_full_name": "Tejvir Saggu",
        "timestamp": 1627940999
    },
    {
        "content": "<p>I'm half arguing on behalf of Epic, but half on behalf of other systems I know have the same problem.  Epic may actually adjust our approach in the future.  I know some other systems that will have a harder time.</p>",
        "id": 247976021,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1627941052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span>  - if Epic has this \"problem\" of needing long IDs, and as you're suggesting, other systems do too, then maybe there's something to be learned from this.   It seems like the internals of whatever system is providing a FHIR Facade (I assume that's what Epic and like-minded systems are doing) have this problem then there seems like there must be a way to provide an intermediary mechanism to implement a mechanism that creates FHIR IDs that fit the 64 char limit and are not dependent on composite keys, or at least not with the IDs they expose to FHIR clients.</p>",
        "id": 247978201,
        "sender_full_name": "John Silva",
        "timestamp": 1627942488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298707\">@John Silva</span>  if you add an intermediary, then you are trading overall system complexity for the 64-character length, since you are now adding a mapping table to the integration.  In some cases (like Epic), we <em>could</em> implement that intermediary mapping internally.  However other systems I know of would need an external mapping layer, which means you need a database for the mapping table, DBA to maintain that database, network engineers to maintain the two new network connects (public-&gt;mapping tier and mapping tier -&gt; backend server), and a web server with enough code to execute the mapping and proxy the request, and then another admin to maintain and patch that web server.  </p>\n<p>Many of those features could be incorporated into a product (API Gateway) of course, similar to the <a href=\"http://bit.ly\">bit.ly</a> pseudo-suggestion.  But products aren't free, so that cost always lands somewhere.</p>",
        "id": 248227203,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1628000396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span> - yes, there would need to be an intermediary, which brings extra complexity and cost.   However, when an integrator needs to get the job done and does NOT have the ability to change the backend system (e.g. Epic or other that isn't following the 64-char limit) what other alternatives does one have?   I think the better question, which I think was already raised, is WHY would a system choose to be non-conformant to start with?</p>",
        "id": 248228943,
        "sender_full_name": "John Silva",
        "timestamp": 1628001121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298707\">@John Silva</span>  The vast majority of our IDs are shorter than 64-characters -  only a few IDs in a few resource types get too long.  We may look at revisiting our ID strategy at some point, but now we have to deal with backwards compatibility, so the  tradeoff is \"breaking backwards compatibility\" vs. \"be strictly compliant with the spec\".   For us, making sure FHIR integrations continue to work in real world healthcare settings is more important than strict spec compliance.  </p>\n<p>For other systems I know of, their choice is driven by a desire to keep system complexity low.  Healthcare IT is expensive, and keeping system complexity low keeps costs low.  So for them, the trade off is just cost vs. \"strict spec compliance\".  Even though I'm a standards nerd, I respect that engineering choice.  Being too much of a purist can be very impractical (and expensive).</p>",
        "id": 248231268,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1628002139
    },
    {
        "content": "<p>Is a FHIR integration actually \"working\" if it produces data that other conformant systems can't consume? What is the point of a FHIR integration?</p>",
        "id": 248232485,
        "sender_full_name": "Paul Church",
        "timestamp": 1628002634
    },
    {
        "content": "<p>We have been happily consuming data from Epic for over five years....</p>",
        "id": 248239811,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1628005692
    },
    {
        "content": "<p>Any FHIR client, especially those used by integrators, depend on the spec.  If a system doesn't comply then they have to 'special case' around that; assuming they have the ability to do that.   Having 'outlier systems' that do not conform makes the work of integrators more complex and problematic.   [Does Epic's FHIR API docs specify these 'resource with long/non-standard length IDs', I haven't seen this on the <a href=\"https://fhir.epic.com/Specifications\">API pages</a>.].</p>",
        "id": 248242902,
        "sender_full_name": "John Silva",
        "timestamp": 1628006992
    },
    {
        "content": "<p>Agree in principle, but of all the possible issues consuming FHIR data ID length is really not that big of a deal</p>",
        "id": 248244330,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1628007640
    },
    {
        "content": "<p>buffer overflows often don't cause trouble... until they do.</p>",
        "id": 248245467,
        "sender_full_name": "John Moehrke",
        "timestamp": 1628008261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197072\">Paul Church</span> <a href=\"#narrow/stream/179166-implementers/topic/Epic.20has.20IDs.20that.20are.20more.20than.2064.20characters/near/248232485\">said</a>:</p>\n<blockquote>\n<p>Is a FHIR integration actually \"working\" if it produces data that other conformant systems can't consume? What is the point of a FHIR integration?</p>\n</blockquote>\n<p>In my mind, a FHIR integration is \"working\" if the data provided by the integration is being used to improve patient health, whether that is a FHIR app used by clinical staff to improve the care they provide, or by a patient access their own data for whatever purpose they choose.</p>",
        "id": 248247188,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1628009163
    },
    {
        "content": "<p>Also, \"FHIR Conformant\" is a harmful myth IMO.  We <a href=\"https://confluence.hl7.org/display/PA/Appointment+Scheduling+-+Industry+Divergence\">surveyed a bunch of systems</a> that implemented a \"FHIR Conformant\" scheduling API, but none of them were remotely interoperable.</p>",
        "id": 248247383,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1628009257
    },
    {
        "content": "<blockquote>\n<p>that is a task left to a systems design engineer... get a good one.</p>\n</blockquote>\n<p>LOL <span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span>, I could design a solution. But, before I do that, I was hoping there would be some guidance for the general community and/or FHIR spec itself.<br>\nSeems like this is <strong>not</strong> an uncommon issue, but should have common guidance.</p>",
        "id": 248248613,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1628009835
    },
    {
        "content": "<p>I am not saying it should not be asked about. I am saying that it is also right to be left to systems design.</p>",
        "id": 248250752,
        "sender_full_name": "John Moehrke",
        "timestamp": 1628010842
    },
    {
        "content": "<p>an interop standard needs to focus on interop. it might include guidance on systems design, but systems design should be allowed</p>",
        "id": 248250973,
        "sender_full_name": "John Moehrke",
        "timestamp": 1628010949
    },
    {
        "content": "<p>So a FHIR integration is \"working\" if it successfully interoperates with other Epic systems or apps that were designed to handle the quirks of Epic data. Sounds like the Judy Faulkner definition of interoperability.</p>",
        "id": 248251808,
        "sender_full_name": "Paul Church",
        "timestamp": 1628011387
    },
    {
        "content": "<p>Conformant and interoperable are different things.  Ideally conformance aids in interoperability, but it certainly doesn't guarantee it.  That said, conformance is what tends to be evaluated by regulation and certification.  Any system that sends ids over the limit is at risk in those processes - and also carries the risk of not interoperating with systems that depend on the length limit being respected.</p>",
        "id": 248252573,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628011797
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"197072\">@Paul Church</span>, let's avoid the use of names and keep the conversation technical.)</p>",
        "id": 248252687,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628011839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197072\">@Paul Church</span>  - Epic does consider this a bug, but we have a lot of FHIR dev on our plate (ONC stuff, but also a bunch of other countries have their own FHIR regs now), so we just can't prioritize a fix right now.  I've tried to make it clear that part of why I'm pushing back here is because I'm aware of other (non-Epic) systems that have the same problem and they don't have an easy solution.   This is not just an Epic issue.</p>",
        "id": 248258301,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1628014459
    },
    {
        "content": "<p>If it's ok that the length can be exceeded, then I suppose it's ok for the id to have a % character in it, if it's ok for a % char, then I suppose it's ok to not do X, if that's ok then it's probably ok to do Y...... Eventually you get interfaces that don't interface.</p>",
        "id": 248264777,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1628017523
    },
    {
        "content": "<p>\"aware of other (non-Epic) systems that have the same problem\" ...</p>\n<p>Are these also facades around EHR 'backends' (w/o naming them)?   It seems like a facade should be able to deal with this because it's already the intermediary between the backend and the \"FHIR server face\" it's providing.    As folks more knowledgable than me pointed out, a 64-char id can represent a huge number but if Ids are generated by concatenating strings in the 'backend' then it's susceptible to this problem.</p>\n<p>Oh well, it is what it is ...</p>",
        "id": 248278806,
        "sender_full_name": "John Silva",
        "timestamp": 1628023865
    }
]