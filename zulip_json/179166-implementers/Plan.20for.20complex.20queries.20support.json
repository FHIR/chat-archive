[
    {
        "content": "<p>I wonder what the plan of FHIR for complex queries is.</p>\n<p>Currently we have:</p>\n<p>1) standard queries as per <a href=\"https://www.hl7.org/fhir/search.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/search.html\">https://www.hl7.org/fhir/search.html</a> but as it does not support OR, (), sub-queries etc, it can work for very simple resource retrievals only<br>\n2) _filter as per <a href=\"https://www.hl7.org/fhir/search_filter.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/search_filter.html\">https://www.hl7.org/fhir/search_filter.html</a> which seems promising however it is not completely documented,  HAPI doesn't support it and the maturity is still N/A.<br>\n3) fluentPath <a href=\"http://hl7.org/fhir/2016May/fluentpath.html\" target=\"_blank\" title=\"http://hl7.org/fhir/2016May/fluentpath.html\">http://hl7.org/fhir/2016May/fluentpath.html</a> which aligns with HL7 CQL.<br>\n4) Advanced search as per 2.1.1.7 in <a href=\"https://www.hl7.org/fhir/search.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/search.html\">https://www.hl7.org/fhir/search.html</a>.  This is actual a custom interface and needs client and server setup the parameters so cannot be used as a P&amp;P standard. for that reason I can't call it  a standard.</p>\n<p>Which one is going to be the FHIR complex query protocol of choice?</p>\n<p>PS&gt; (example for complex queries: Show me all patients having Dr A as care provider, having at least 2 diagnosis coded as X and born between D1 and D2)</p>",
        "id": 153826595,
        "sender_full_name": "Behrad Sadoughian",
        "timestamp": 1462914192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191903\">@Behrad Sadoughian</span> See this thread for a discussion that would satisfy your example: <a href=\"#narrow/stream/implementers/subject/_has.20parameter.20proposal\" title=\"#narrow/stream/implementers/subject/_has.20parameter.20proposal\">https://chat.fhir.org/#narrow/stream/implementers/subject/_has.20parameter.20proposal</a></p>",
        "id": 153826681,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1462933643
    },
    {
        "content": "<p>Thanks. That's interesting however my example is just one example. There are many complex queries and I wonder which approach is going to be the strategic protocol development choice.</p>",
        "id": 153826704,
        "sender_full_name": "Behrad Sadoughian",
        "timestamp": 1462937438
    },
    {
        "content": "<p>(1) - see 2<br>\n(2) - please explain how _filter is not completely documented. Maturity is FMM 1. I should document that. As far as support in servers other than mine, I cannot say <br>\n(3) I am sure that fluent path will not be part of the standard search interface. But you can define parameters that are defined by fluent path expressions - that's how my server works now</p>",
        "id": 153826745,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462963240
    },
    {
        "content": "<p>(4) advanved search is your extensibility point </p>",
        "id": 153826746,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462963263
    },
    {
        "content": "<p>we do not think that we have solved query requirements yet. It was on the slate for STU 3, but it has missed the boat now. </p>",
        "id": 153826747,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1462963348
    },
    {
        "content": "<p>My concern is that to the extent the formal specification adds complexity, it decreases interoperability in inverse proportion. </p>",
        "id": 153826909,
        "sender_full_name": "Peter Bernhardt",
        "timestamp": 1462982027
    },
    {
        "content": "<p>Peter, yes, I also expect the number of servers implementing this kind of search will be low, so in practice you couldn't count on it when writing a client...</p>",
        "id": 153826940,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1462983526
    },
    {
        "content": "<p>Agreed, there are so many use cases for complex query, and various ways of meeting that. The CQL specification in particular focuses on enabling complex queries to be expressed in a way that supports translation to simpler queries through a data access layer, such as FHIR, or a B-Tree style index API.</p>",
        "id": 153827606,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1463091426
    },
    {
        "content": "<p>Hi Bryn, never looked at it that way... so you made that work? Translate CQL into separate FHIR REST calls?</p>",
        "id": 153827622,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1463094935
    },
    {
        "content": "<p>Yes, that's what we got working at the connect-a-thon Saturday. Going to host a HAPI server that has it plugged in for more testing, but it's basically functional.</p>",
        "id": 153827668,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1463124774
    },
    {
        "content": "<p>Cool.</p>",
        "id": 153827835,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1463164561
    }
]