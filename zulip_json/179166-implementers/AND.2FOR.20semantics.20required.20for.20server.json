[
    {
        "content": "<p>While the support for search-parameter modifiers (:exact, :contains, etc.) is optional (and indicated by the CapabilityStatement),  I can't find any indication on whether a server is allowed to NOT support AND/OR combinations of search parameters.<br>\nIs there any way of doing this? Or is every FHIR-server required to support AND/OR combinations on EVERY search parameter ?</p>",
        "id": 153858666,
        "sender_full_name": "Robert Lichtenberger",
        "timestamp": 1480328107
    },
    {
        "content": "<p>Servers are definitely not required to support any particular combination of parameters. The specification outlines how AND/OR works, but that just means you can't choose your own way of doing AND/OR in FHIR.</p>\n<p>The public test servers pretty much all support all combinations.. In the real world however I've seen lots of examples of FHIR interfaces on pre-existing systems where the exposed AND/OR combinations aligned to whatever database indexes already existed.</p>\n<p>FWIW there is a CapabilityStatement (aka Conformance) extension which can be used to declare support for particular combinations: <a href=\"http://build.fhir.org/extension-capabilitystatement-search-parameter-combination.html\" target=\"_blank\" title=\"http://build.fhir.org/extension-capabilitystatement-search-parameter-combination.html\">http://build.fhir.org/extension-capabilitystatement-search-parameter-combination.html</a></p>",
        "id": 153859740,
        "sender_full_name": "James Agnew",
        "timestamp": 1480629805
    },
    {
        "content": "<p>right. restricting to what indexes you have is expected. </p>",
        "id": 153859741,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480629846
    },
    {
        "content": "<p>Josh's proposal solves *this* problem. But it breaks the general case. And his hybrid is ... a mess </p>",
        "id": 153859742,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480629874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> wrong topic :)</p>",
        "id": 153859743,
        "sender_full_name": "James Agnew",
        "timestamp": 1480629904
    },
    {
        "content": "<p>sorry</p>",
        "id": 153859744,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480629932
    },
    {
        "content": "<p>Thank you for the pointer to the extension. But as far as I can see, this extension only specifies combinations of search parameters that are allowed, i.e. you must specify \"a\" and \"b\" and optionally \"c\". What I was looking for would be a way to declare that: for \"a\" you can only specify a single value; for \"b\" you must not use comma to give different values.</p>",
        "id": 153859841,
        "sender_full_name": "Robert Lichtenberger",
        "timestamp": 1480659364
    },
    {
        "content": "<p>I'd rather that information was in the SearchParameter resource than in the capability statement, that thing is huge enough as it is.<br>\n(I'd also like to see the Search param and operations removed from the capability statement too, and have a seperate operation to ask for the ones supported by the system (that you could search for too, limiting to only stuff you're interested in - but that's another story...)</p>",
        "id": 153859842,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1480659394
    },
    {
        "content": "<p>we moved the most verbose details out of CapabilityStatement</p>",
        "id": 153859868,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480675360
    }
]