[
    {
        "content": "<p>We have a case where we would like to build a claim (in our case pre-authorization) where we need to send clinical data, including Observations and an OrderSet. Also would love to include an actual Condition resource (instead of a diagnosis code). Has anyone else worked in this area and could share some ideas on how to use existing resources or extending (so we aren't doing this in a vacuum)?</p>",
        "id": 153822610,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1461162469
    },
    {
        "content": "<p>Yes. can you give me a bit more of the business case?</p>",
        "id": 153822616,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461165109
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span> -- yea, we need to send over the Condition, labs and bio-markers, and an order template (for chemotherapy) to get a pre-autorization to start chemo.</p>",
        "id": 153822619,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1461166136
    },
    {
        "content": "<p>We are thinking about using an extension to Claim that would be a reference to a Composition document of qualification resources (for the OrderSet, Condition and n-number of Observations)</p>",
        "id": 153822640,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1461171796
    },
    {
        "content": "<p>I suggest instead that you send a Pre-Authorization and we change Condition 0..* coding to condition[x] 0..* coding | Reference(Condition), and that you send the supporting resources via a DocumentManifest where the Attachment.content.pReference 0..* Reference(Any).</p>",
        "id": 153822648,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461176070
    },
    {
        "content": "<p>You send the Pre-Auth first, then send the Documentmanifest referecing the pre-auth adn the supporting resources. And if they need more supporting resources you can send another DocumentManifest refering to more documents, images, resources etc.</p>",
        "id": 153822649,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461176186
    },
    {
        "content": "<p>See teh only DocumentManifest example which shows how to reference a Claim and included or referred to artifacts.</p>",
        "id": 153822650,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461176256
    },
    {
        "content": "<p>DO you want Condition as a code or as the resource?</p>",
        "id": 153822651,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461176285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span> I see, I think I understand what you are proposing, and will put together an example just to confirm. I was thinking we would need the full condition, as we can include staging information more simply (alternatively, it could be part of the supporting document, but may loose some of the semantics without directly connecting to the Condition).</p>",
        "id": 153822657,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1461178609
    },
    {
        "content": "<p>that's why I suggested that perhaps the claim needs to have condition modeified to be the choice of a code or a resource just like we do with bodySite and a few similar cases.</p>",
        "id": 153822658,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461178817
    },
    {
        "content": "<p>sorry for clarification, look at the current build not DSTU - it is diagnosis which would be a choice of a coe or the Condition resource. </p>",
        "id": 153822659,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461179132
    },
    {
        "content": "<p>or you could just add condition to the list of resources to share via DocumentManifest</p>",
        "id": 153822660,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461179668
    },
    {
        "content": "<p>Why would you need to use a DocumentManifest?  Most places there's a need to send supporting resources we just link to the resources directly.</p>",
        "id": 153822678,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461188978
    },
    {
        "content": "<p>For example, with ReferralRequest, you just link to whatever allergies, conditions, past procedures and other clinical history is relevant.</p>",
        "id": 153822680,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461189011
    },
    {
        "content": "<p>The DocumentManifest references the supporting resources, external or internal documents and references the resource which those materials are supporting.</p>",
        "id": 153822720,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461227813
    },
    {
        "content": "<p>But there's no need to have it.  Just reference the supporting resources or documents directly.  If you need metadata for an external document, then use DocumentReference.</p>",
        "id": 153822739,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461246381
    },
    {
        "content": "<p>Are you redesigning the business with the content model and exchange pattern you have in mind? </p>\n<p>FM isn't, we are supporting the existing business with the technology we are creating and not deciding for the business what their exchange pattern must be.</p>\n<p>The difference applies to your comment above. I think that what you are saying above is that a provider would create, for example, a Claim and include in that references to supporting resources (which would contain or reference the actual supporting content) and send that (Create, Send, etc.) to the Insurer. The Insurer would then either retrieve the referred to materials from the client, or other servers, or the supporting resources would be packaged with the Claim for submission.</p>\n<p>If the Insurer needed more information then the Claim could be modiffied with new/different references and the Claim (or Claim plus supporting resources and content) be Updated or re-submitted.</p>",
        "id": 153822827,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461315862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> Are you sending all of that clinical information to an Insurer or to a licensed party to make a clinical determination to initiate treatment?</p>",
        "id": 153822828,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461316463
    },
    {
        "content": "<p>DocumentManifest was created specifically to support the XDS notion of \"Folder\" - an ability to retrieve a particular pre-packaged set of documents that have no other grouping justification.  For a Claim, the grouping mechanism is the claim itself, so there's no need for an intervening resource.  Whether you're using DocumentManifest or not, from a pure REST perspective, you'd be creating and maintaining all of the resources with independent transactions.  If you're doing messaging or documents, you can bundle all of the related resources together with no need for DocumentManifest.</p>",
        "id": 153822847,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461335740
    },
    {
        "content": "<p>(Or at least, I don't understand the use-case for adding it in the middle)</p>",
        "id": 153822848,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461335756
    },
    {
        "content": "<p>Well that is not how the business works. We had created an Attachments resource (SupportingDocumumentation) to model the business then we were told it was redundant with DocumentManifest, which is wasn't, but the owners kindly modified DocumentManifest so that it was redundant and we then dropped using it in favour of DocumentManifest.</p>",
        "id": 153822862,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461338738
    },
    {
        "content": "<p>Attachments are a document architecture.  But in REST, there's no need to think of attachments as documents at all.  Just attach all of the resources that are relevant.  We don't want to force adherence to a document-centric architecture when moving to FHIR. </p>",
        "id": 153822867,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461344560
    },
    {
        "content": "<p>But, \"attachments\" in the claims processing are very specific.  The document form may be important.  Granted, the resources are would contain the required information, but payers and processors can be very particular.</p>",
        "id": 153822868,
        "sender_full_name": "Scott Robertson",
        "timestamp": 1461348779
    },
    {
        "content": "<p>Attachments, or the SupportingDocumentation resource, which FM had proposed was not-document centric - it supported the provision of resources, files and references to files - and it was the FHIR core team who said we had to use DocumentManifest not the resource we proposed - and then we had to ask the overseeing committee to change DocumentMAnifest as it could not support the actual inclusion of a file!. It was clear at that time DocumentMAnifest and DocumentReference were build for a completely different purpose - so why is that suddenly an issue for you now?</p>\n<p>So if you think we should fall back to what we had proposed in the first place then say so. - but the notion that people will submit a new claim or update the claim because the payor asks for some addition supporting information is a non-starter. If you would like to discuss this in committee in Montreal I'd be happy to coordinate a time. </p>",
        "id": 153822888,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461394248
    },
    {
        "content": "<p>I'm not clear on the need for a wrapper at all - why not just reference CarePlan, Condition, Procedure, FamilyMemberHistory, Binary and whatever other information is relevant directly.</p>",
        "id": 153822897,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461467133
    },
    {
        "content": "<p>That's what we'd do for referrals</p>",
        "id": 153822898,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461467149
    },
    {
        "content": "<p>You should check with referrals that you aren't redefining their business as well. If they consider the referral to be immutable or the target of the referrral may request additional information after the submission of the referral then that approach may not allign with their business or be found by them to be efficient. I understand the model you are proposing, but its up to the business to determine whether it is efficient for them.</p>",
        "id": 153822901,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461499192
    },
    {
        "content": "<p>If the referral is immutable, then you wouldn't add links but instead would simply supply additional resources as needed (linked by the Task or MessageHeader that solicited the information).  No need to treat the information as being a \"document\".</p>",
        "id": 153822902,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461509989
    },
    {
        "content": "<p>You are considering DocumentManifest and DocumentReference to be document centric, by document do you mean 'CDA and variants' or 'CDA/.doc/.xls/.pdf (etc)' or 'CDA plus any file format including images'? I expect you don't mean 'and resources'. <br>\nI am raising this as it increasingly appears that the use and intention of the Document* resources is more about documents and document repository management which does not align well with the concept of the provision of 'supporting materials' which is A) independant of the sender and receivers static information management technology (and doesn't preclude the use of) and B) broader in terms of supported information types - files, references to content, resources, actual provision of file and content-model contents, content format to any standard and marked up in any standard. <br>\nTherefore the decision to collapse SupportingDocumentation into DocumentManifest may have been wrong for both communities, less efficient overall and if so should be reversed.</p>",
        "id": 153823094,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461648945
    },
    {
        "content": "<p>Sending related information as an \"attachment\" is an architecture choice.  That shouldn't be baked into FHIR.  I.e. You should be able to send related conditions, allergies, medications, family history, etc. without ever thinking of them as attachments or using any infrastructure that behaves that way.  However, we definitely need to provide a means to enable that support where that is the architecture (and I recognize that in the financial space, it may currently be the predominant architecture).  To enable that, I'd expect the model to allow direct linkage from Claim to the supporting clinical resources.  I'd also expect DocumentManifest to allow linkage to those.  If it was important to communicate the claim, the clinical details and the packaging mechanism that was used to deliver those clinical details, then I'd expect all of the resources to be present in the bundle.  On the RESTful side, I'd expect there to be an operation that allowed you to submit a DocumentManifest together with the stuff it was referencing that would establish the linkage from the Claim (or CarePlan or ReferralRequest or whatever) to the content being referenced.  You may be right that DocumentManifest isn't necessarily the right resource and we may need a distinct infrastructure resource to convey a bundle of things that are intended to be associated with another resource (if we find that OperationDefinition and/or MessageHeader aren't enough).  But I really don't think it's appropriate to force that \"packaging\" structure to have to exist or to appear between the Claim/CarePlan/Referral and the supporting resources.</p>",
        "id": 153823157,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461684363
    },
    {
        "content": "<p>Given that the 'things' being referred to are distinct from the 'thing' doing the referring there must be some means of doing that referral and holding those references - that is the architecture.<br>\nYou are suggesting an architecture where the content model doing the referring, eg Claim or Referral, hold all the references. That would be fine if: A) the referring content model is not immutable or C following; B) the referring content model submission is not prone to error; and C) the creator of the resource knew all of the supporting information to include and D) the receiver cannot request and the creator cannot subsequently supply additional information. Your architecture would require the creator to resubmit (update, send, etc) the referring content model should the referred to information change.</p>\n<p>The business of the finanacial domain treats content models as immutable - once it has been said it cannot be unsaid. This is why accounting systems do not permit edits on posted entries, they require reversing entries to change a fact so that there is a trail of actions. Yes, your architecture provides history on content models (resources) but you shouldn't assume that the financial industry will stop what they do so they can rewrite their systems to do what you are proposing.</p>\n<p>The reality in eClaims, and I expect referrals as well, is: A) supporting information is typically significatly larger than the content model they are supporting; B) supporting information tends to only be supplied once (per endpoint) and only for the content model it is supporting; C) content models are considered to be immutable not amendable; D) supporting information is often requested and supplied in multiple occurrences and after the submission of the content model. The approach, architecture if you will, used in Financial Management is to recognise these realities and support implementers in addressing them.</p>\n<p>The architecture which I think you are proposing could be viable if the financial world worked that way. And if that business space wanted to adopt that model they could have decades ago - they didn't need to wait for these content models or http. I expect they haven't as they don't find it to be net beneficial.</p>\n<p>I have gone back and reviewed the SupportingDocumentation content model and find it to be more targetted and efficient that Document*. I think it is worth a reconsideration and prefer that we don't create or define even more complex ways to get stuff from A to B or to convey the association of A with B.</p>",
        "id": 153823335,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461735303
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span>.  The referring thing cannot be immutable.  At minimum, it'll have a status that must evolve.  The <em>version</em> submitted may be immutable.  And in some submission paradigms, the submission \"package\" may be immutable.  But from a business perspective, if you did an internal query of a claim after supplemental information is submitted and said \"what information is associated with this claim now?\" or after payment and said \"what's the status of this claim now?\", the answer would be different.  It's fully appropriate to be able to expose this over the RESTful interface.  I'm not saying implementers must do this, but I'm suggesting that the resource design shouldn't prevent it.</p>\n<p>You can think of a prescription as an \"immutable\" object too.  But the resource is definitely updatable.  And in the base FHIR spec, there's nothing to stop you from changing the drug, the prescriber and even the patient.  What changes are permitted in a given context will be driven by business rules and/or implementation guides - because there are definitely changes that <em>are</em> permitted, in at least some situations.  For example, changing the end date, changing the status, etc.  That doesn't change the immutability of the original version - you still know exactly what the original prescription said, but the object itself evolves.</p>\n<p>The resources, when created, need to support a wide variety of architectures, including architectures that may never have been used for the content.  Constraining what architecture gets used in a particular environment is done through profiling and implementation guides and is based on the context.  The base resource needs to be context-independent.</p>",
        "id": 153823348,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461755484
    },
    {
        "content": "<p>Lloyd, the immutability depends on the location and purpose of the resource. Clearly while something is in the client system while they are composing it the contents change - and I'd suggest it isn't a 'prescription' until the edits are done.</p>\n<p>If you give a prescription to a pharmacy you can't change what you gave them after submission. You may be allowed to cancel but not change. If you still feel that you actually can change it then you must have advised the parmacy that they must elsewhere record the Id of the prescription and the Version on the label and any other records of the dispense as what you are saying is that they cannot rely on the 'prescription' as being a stable thing or that multiple reads may not result in the same thing - only versioned reads will.</p>\n<p>Therefore the systems you are interacting that way MUST support versioning of resources and they MUST record the versions they acted on - are you being explicit in that requirement?</p>\n<p>I seems that you are favouring a persistance architecture over an exchange architecture.</p>\n<p>If you'd like to discuss in committee then I'd suggest Tuesday Q2 in Attachments. I don't know that they have agenda time, but this is 'bread and butter' for them and they could provide valuable input.</p>",
        "id": 153823354,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461757403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span> You absolutely <em>can</em> change a prescription after it's been given to the pharmacy in some paradigms.  A prescriber can suspend or even abort a prescription after it's been given to the pharmacy.  It's not an immutable object.  And in some cases, it's legitimate to change the end date or do other things.  Certainly the ability to change may result in a need to manage versions.  The exchange architecture interacts with the persistence architecture.  From an exchange perspective, I'm passing around different snapshots of the business object at different times.  Whether older snapshots are accessible and how they're manipulated will vary by architecture.  My key point is that the architecture decisions should not impose on the fundamental resource design.  The attachment approach needs to be supported, but it should not be forced as part of the resource design.  It should simply be one option among many.</p>",
        "id": 153823355,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461760456
    },
    {
        "content": "<p>And I will reiterate that the FM resources are not limited by architecture. You would need to include those elements, if you wish them, as extensions as we are not aware of anyone doing what you suggest - so that doesn't meet the 80%.</p>",
        "id": 153823356,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461761766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span> All systems are linking claim information to supplemental health record information.  Therefore that's in the 80%.  Linking it via \"attachments\" vs. not is architectural and shouldn't be baked into the resource design (just as it's not baked in for referrals or anything else).</p>",
        "id": 153823378,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461764947
    },
    {
        "content": "<p>I agree, I'd though you had said you wanted the link IN the claim - that's architecture isn't it.</p>",
        "id": 153823416,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1461769973
    },
    {
        "content": "<p>Well, the link either needs to be from Condition/FamilyHistory/Observation/etc. to Claim or vice versa.  Pointing from Claim makes sense per FHIR rules that the thing created second does the pointing.  Doing that in no way keeps you from doing the attachment approach.</p>",
        "id": 153823445,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461778838
    },
    {
        "content": "<p>You can send the claim once.  Keep a frozen \"Version\" of it.  Receive a bunch of \"attachment\" submissions and never expose a version of the Claim that has the linkages that are implicitly created by those submissions</p>",
        "id": 153823446,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461778898
    },
    {
        "content": "<p>Yes, the clinical information is part of the determination of prior authorization</p>",
        "id": 153826994,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1462992514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> were you thinking of a new attribute of Claim that would be a polymorphic 0..* reference to any of Condition/Observation/etc.</p>",
        "id": 153826996,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1462992970
    },
    {
        "content": "<p>I was thinking of something similar to \"supportingInformation\" on ReferralRequest and DiagnosticOrder</p>",
        "id": 153827144,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463018096
    },
    {
        "content": "<p>Question about <a href=\"http://hl7.org/fhir/2016May/valueset-claim-type-link.html\" target=\"_blank\" title=\"http://hl7.org/fhir/2016May/valueset-claim-type-link.html\">http://hl7.org/fhir/2016May/valueset-claim-type-link.html</a> -- what type would an in-clinic infusion for say chemotherapy be?</p>",
        "id": 153828072,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1463431073
    },
    {
        "content": "<p>I think it would be a professional claim</p>",
        "id": 153828073,
        "sender_full_name": "Andy Stechishin",
        "timestamp": 1463431339
    },
    {
        "content": "<p>It is coming up to midnight for Paul, he will chime in when he gets up</p>",
        "id": 153828074,
        "sender_full_name": "Andy Stechishin",
        "timestamp": 1463431409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> we are going with just that, a <code>supportingInformation</code> extension to Claim. It could be considered common enough to add it to the resource down the road.</p>\n<p>In cases like this, is there a way in FHIR to specify what the requirements would be for this information ought to be? e.g. observations of codes in a value set, conditions for the patient, careplans, etc.</p>",
        "id": 153828141,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1463493037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> : Are you sending this Claim to a US insurer?<br>\nI reviewed, again, exactly the pattern which I have described above in Montreal with the HL7 Attachments work group which, again, confirmed the pattern of: sending the Claim followed by the supporting materials which in FHIR REST would be creating the Claim Resource and then creating the supporting resources on the target server OR sending/creating a Bundle (Transaction) containing all of the resources. </p>\n<p>If you wish to replace diagnosis with an extension containing Condition resources you may with the agreement of the receiver do that.</p>\n<p>Question? How do you know that is the required information and that no further information will be required?</p>",
        "id": 153828160,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1463503511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span> This is what I was thinking -- <a href=\"http://goo.gl/MXwW7H\" target=\"_blank\" title=\"http://goo.gl/MXwW7H\">http://goo.gl/MXwW7H</a> -- When you say \"sending the Claim followed by the supporting materieals...creating the Claim Resource\" are you talking about two HTTP requests, the first a POST and then the second a PATCH to update the resource with the supporting info? Or do you mean include the supporting info in the initial POST?</p>",
        "id": 153828172,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1463510228
    },
    {
        "content": "<p>Are exchanging this information with an actual insurer?<br>\nIf there was a modifable list of referenced resources within the claim and the claim was modifiable then a POST of a each of the supporting resources and a POST of the Claim (PATCH isn't approved yet).</p>",
        "id": 153828173,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1463511654
    },
    {
        "content": "<p>It's a financial entity that will be able to pre-authorize treatment. Not sure how you would semantically relate the initial series of supporting resources to the eventual Claim resource.. Seems to have that semantic relationship from Claim 0..* Ref-&gt;(any) is more intentional.</p>",
        "id": 153828174,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1463511820
    },
    {
        "content": "<p>Have you spoken with that financial entity? Have they told you that claims are immutable? Or is this a proprietary system which you are setting up, in which case you can do whatever you want?</p>",
        "id": 153828175,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1463511973
    },
    {
        "content": "<p>Yes, I am working with the financial entity. Once submitted with the supporting information, the claim is immutable.</p>",
        "id": 153828176,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1463512014
    },
    {
        "content": "<p>I might be misunderstanding you, but it seems like you are proposing POST'ing /Observation /Condition, etc. as the \"supporting information\" then eventually a POST to /Claim. How would you draw the semantic relationship that the prior supporting information ought to be considered supporting the claim?</p>",
        "id": 153828177,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1463512104
    },
    {
        "content": "<p>It seem like the pattern in ReferralRequest.supportingInformation is exactly what we would like to have</p>",
        "id": 153828178,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1463512134
    },
    {
        "content": "<p>I was echoing back what you seemed to be presenting, not what actually ocurrs in the claims industry. One of the difficulties with your model is how you would know when the claim is complete.<br>\nFor example: you send in 3 supporting resources then the claim and figure it is complete, the payor review the supporting material and wants more so now it is incomplete? So how do you send more info without making the Claim immutable - not immutable - then immutable again - which isn't the definition of immutable.<br>\n I have described how this works in the financial space several times above. You send in the Claim, which stays immutable, then a DocumentManifest (ignore the 'document' word it is misleading) which contains or refers to any type of content, not limited to FHIR Resources, and refers to the Claim. If they want more info you send in another (Create) DocumentManifest and related resources). The DocumentManifest resources  perform the linkage between objects.<br>\nIf the Pre-Auth has been supplied the supporting info there would be no need to send it again with the claim, you would have the CLaim refer to the Pre-Auth.</p>",
        "id": 153828180,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1463512803
    },
    {
        "content": "<p>There are several other issues here. In FHIR the last resource in points to the prior resources,so the supporting resources should refer to the resource being supported. Typically insures want to receive all of the information associated with a 'processable set' not gragments where they can't tell if they have all arrived, or when to purge fragments from incomplete submissions, so a Bundle with all of the resources would suit their busness better if you are using REST rather than a Request-Responce protocol.</p>",
        "id": 153828182,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1463513240
    },
    {
        "content": "<p>I see, so instead of submitting all at once with a Claim + extension, you are proposing two FHIR requests, one for a Claim, and a subsequent for the information (with a reference to the Claim). Is this appealing because the Claim would be immutable, but you could change the supporting documentation? We would rather submit it all at once...</p>",
        "id": 153828189,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1463513599
    },
    {
        "content": "<p>no your supporting documentation is typically immutable too, but you could send in several DocumentManifests all referring to the pre-auth or Claim.</p>",
        "id": 153828190,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1463513701
    },
    {
        "content": "<p>Use a Bundle (transaction) to correctly send it all in at once.</p>",
        "id": 153828193,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1463513735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span> There's a few alternatives to dealing with supporting information in REST:<br>\n1. If the initial fulfillment request for the claim is rejected due to missing information, either update the claim and resubmit or create a new claim containing references to all of the needed information.<br>\n2. Add the additional information as \"inputs\" to the Task resource that is seeking fulfillment of the Claim. </p>\n<p>Either of those patterns could be used with a referral request.  (While in the messaging world, financial requests might be treated as immutable, they don't necessarily have to be fully immutable in the REST space.)</p>\n<p>Sending content in a transaction doesn't tie anything together - each step in the transaction is processed independently, so there'd be nothing to tie the supporting information to the claim.</p>",
        "id": 153828351,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463534866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> you can profile the claim and slice \"supportingInformation\" to identify exactly what types of resources you expect to be included for a particular profiled version of Claim.</p>",
        "id": 153828353,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463534900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"lloyd@lmckenzie.com\">@Lloyd McKenzie</span>: You are taking or creating a particular architecural viewpoint and imposing it on teh business rather than using the technology (in a FHIR REST or non FHIR REST exchange) to meet the business needs. This will require that implementers make all of the following changes:<br>\n1) change to the FHIR content models for information <br>\n2) change to the FHRI REST exchange protocol and behaviour<br>\n3) change their business and information flows to suit your design</p>\n<p>You are free to bring that design and other designs to the FInancial Management or Attachments committeess for discussion with people well versed in the business, but promoting here a design which doesn't meet the business requirements, or which hasn't been reviewed by the domain, isn't helpful. </p>\n<p>You may also wish to build demonstration clients and servers to flush out your design and to illustrate the efficiencies and how the industry could transition from the current business flow (which has been successfully implemented using paper and a variety of electronic standards for both content models and content exchange) to your model.</p>\n<p>Others have implemented claims exchange using REST and FHIR REST and you and they may wish to compare approaches and outcomes.. I expect that REST itself dictates little of the business model being proposed.</p>\n<p>The DocumentManifest ties he resources together, just as the SupportingInformation Resource did before it.</p>",
        "id": 153828417,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1463550392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191430\">@Paul Knapp</span> I'm attempting to remove all architectural viewpoints.  FHIR shouldn't force systems to do things any particular way.  I'm not saying that systems have to change to REST.  If they want to stick with a services or messaging approach, they can.  But, the design must support a RESTful approach and the RESTful approach should be consistent across all types of resources - clinical, administrative and financial - so that when you learn how to do FHIR REST, you can be confident of it working the same way regardless of domain.   In the RESTful space, there's no need for supporting information to be tied together because the Claim would be updated.  The challenge is that the messaging paradigm is trying to be applied to the RESTful space and that doesn't work.  It may be that nothing from the financial space will ever use REST.  And that's ok.  But if REST is used, it should be used consistently.</p>",
        "id": 153828438,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463578419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> whether or not you can update the  Claim is completely irrelevant to the use of REST (FHIR or otherwise). The challenge has nothing to do with applying a messaging paradigm to REST. The proposed approach is completely RESTful. This disagreement has nothing to do with REST, both approaches would meet the full criteria of the International REST Certification Board (sarcasm).</p>",
        "id": 153828448,
        "sender_full_name": "Andy Stechishin",
        "timestamp": 1463584592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"lloyd@lmckenzie.com\">@Lloyd McKenzie</span>: If you wish to add an extension to hold your list then fine the specification supports that, and given that we can't identify any existing systems which do that it must not be in the 80%. You may use UPDATE if you wish, you may allow the client to DELETE if you wish, the specification supports that. The business doesn't support these notions but that doesn't mean you can't.</p>",
        "id": 153828466,
        "sender_full_name": "Paul Knapp",
        "timestamp": 1463592964
    },
    {
        "content": "<p>My point is that the need for using the notion of \"attachment\" shouldn't be baked into the design of the resource.  It's perfectly fine to *support* an attachment approach, but we absolutely shouldn't *require* an attachment approach.</p>",
        "id": 153828519,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463618634
    },
    {
        "content": "<p>So you are advising that we abandon the 80% of implementers that are asking for this approach and instead make them change their business practices to follow a design that doesn't support the 80%?</p>",
        "id": 153828525,
        "sender_full_name": "Andy Stechishin",
        "timestamp": 1463623184
    },
    {
        "content": "<p>Not at all.  It's perfectly possible to support attachments without requiring their use.  It means the initial Claim submission should be able to reference resources directly rather than forcing them to be sent as separate Attachment submissions.  It doesn't mean forcing any change on anyone, but does mean allowing for supporting information to be included directly as is done with all other FHIR resources where it's relevant.</p>",
        "id": 153828545,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1463629815
    },
    {
        "content": "<p>Where it is relevant, your words. No one is FORCING anyone to do separate attachment resources, why do you keep using loaded language. All of the busniess experts that we have communicated with so far have REQUESTED to do separate attachments. This is the way it is done in the X12 processing. This is the way it is done in every use that we have been able to research. Please bring your examples of the use cases where it is done according to your model. I just can't see why we would insist on designs that only support the 0% of current application, that is not like you Lloyd. And we certainly don't want to create something for a possible future use case that no one has identified, that is not the FHIR way, we want to do things the FHIR way</p>",
        "id": 153828546,
        "sender_full_name": "Andy Stechishin",
        "timestamp": 1463630253
    }
]