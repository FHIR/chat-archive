[
    {
        "content": "<p>Hi. Can i search for (example) \"patients or staff whose ID is 007\" ? Or do I have to issue different GETs? <br>\nIn other words, the cardinality of [type] in a GET, is it 1..1 ?</p>",
        "id": 153906108,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505143641
    },
    {
        "content": "<p>There are ways.. but they would be very specific to a full-featured FHIR server. Why do you not want to use a  simple solution, that just requires two search? So I am asking for clarification on the desire that is behind your question so as to point at the best solution.</p>",
        "id": 153906115,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505145757
    },
    {
        "content": "<p>see here:</p>",
        "id": 153906116,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505146323
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhir/searchparameter-registry.html\" target=\"_blank\" title=\"http://hl7.org/fhir/searchparameter-registry.html\">http://hl7.org/fhir/searchparameter-registry.html</a></p>",
        "id": 153906117,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505146324
    },
    {
        "content": "<p>identifier is not common across Patient, RelatedPerson, and Practitioner, but it should be.</p>",
        "id": 153906118,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505146352
    },
    {
        "content": "<p>Ok so if i take the Type out to search any resource, is this the right query? <br>\n<a href=\"http://test.fhir.org/r3?identifier=444222222\" target=\"_blank\" title=\"http://test.fhir.org/r3?identifier=444222222\">http://test.fhir.org/r3?identifier=444222222</a></p>",
        "id": 153906123,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505146682
    },
    {
        "content": "<p>that should give me all the resources that have one identifier whose value is 444222222. I'm getting lots of other stuff.</p>",
        "id": 153906125,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505146762
    },
    {
        "content": "<p>really you need this:</p>\n<div class=\"codehilite\"><pre><span></span>http://test.fhir.org/r3?_type=Patient,RelatedPerson,Practitioner&amp;identifier=44422222222\n</pre></div>",
        "id": 153906126,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505146808
    },
    {
        "content": "<p>Wonder how many servers support this...I'd be surprised if many/any other that Grahame's</p>",
        "id": 153906128,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505146893
    },
    {
        "content": "<p>well, right now, none will - even mine.</p>",
        "id": 153906129,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505146917
    },
    {
        "content": "<p>but cross research search absolutely is an important thing, and may servers will support it</p>",
        "id": 153906130,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505146937
    },
    {
        "content": "<p>language from the spec:  All resource types: GET [base]?parameter(s) (parameters common to all types only)</p>",
        "id": 153906131,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505146980
    },
    {
        "content": "<p>In other words, the spec actually forbids this...</p>",
        "id": 153906132,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505147001
    },
    {
        "content": "<p>Use case is simple, possibly misplaced: I just scanned a barcode. Who is this?</p>",
        "id": 153906133,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505147025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> : In this case, the only parameters that can be used are those defined for both Condition and Observation (using SearchParameter.base - see Cross-resource Search Parameters), or the parameters defined for all resources.</p>",
        "id": 153906134,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505147073
    },
    {
        "content": "<p>On Vonk we actually only check whether the parameter by the same name and searchparametertype is supported across the requested resourcetypes, and then accept it.<br>\nTry http://vonk.furore.com?_type=Patient,RelatedPerson,Practitioner&amp;identifier=jElTRIDQrgnesGVo</p>",
        "id": 153906136,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1505147129
    },
    {
        "content": "<p>or other use case: I just scanned a barcode. What is this?</p>",
        "id": 153906137,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505147146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191757\">@Christiaan Knaap</span> So you use the _type list to interrogate SearchParameter?</p>",
        "id": 153906138,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505147187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> can't find that language?</p>",
        "id": 153906139,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505147306
    },
    {
        "content": "<p>Found the language I referenced in the list here:  <a href=\"http://build.fhir.org/search.html#2.21.1.2\" target=\"_blank\" title=\"http://build.fhir.org/search.html#2.21.1.2\">http://build.fhir.org/search.html#2.21.1.2</a></p>",
        "id": 153906140,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505147337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> Yes. And I just found an exception if no _type is provided at all :-)</p>",
        "id": 153906141,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1505147362
    },
    {
        "content": "<p>That's clever...maybe should be standard/required: if _type is provided, then all other parameters SHALL be common to all types listed</p>",
        "id": 153906143,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505147412
    },
    {
        "content": "<p>you would also need to manually handle query of multiple FHIR servers. so querying multiple resources is just one spread</p>",
        "id": 153906144,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505147436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span>  the top of the page shows the common parameters incl _type</p>",
        "id": 153906145,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505147438
    },
    {
        "content": "<p>it's actually like this:</p>\n<ul>\n<li>if you include _type, then all parameters must be explicitly identified as common to the listed resources, or common to all resources</li>\n<li>if you don't include type, all parameters must be for all resources</li>\n</ul>",
        "id": 153906146,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505147488
    },
    {
        "content": "<p>I second - I already implemented it that way...</p>",
        "id": 153906149,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1505147633
    },
    {
        "content": "<p>Yes, sounds great. Language needs to change.</p>",
        "id": 153906150,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505147683
    },
    {
        "content": "<p>Thank you all!</p>",
        "id": 153906152,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505147747
    },
    {
        "content": "<p>someone want to create a task?</p>",
        "id": 153906155,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505147873
    },
    {
        "content": "<p>will do</p>",
        "id": 153906157,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505147908
    },
    {
        "content": "<p>thx</p>",
        "id": 153906159,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505147925
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13836\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13836\">GF#13836</a></p>",
        "id": 153906160,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505148181
    },
    {
        "content": "<p>Back to <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> If you are setting operational requirements, then this is one that would need to be mandated.  Although this will provide an optimal way, you must have a fallback (robust design) when the server you have doesn't support this.   Right?</p>",
        "id": 153906162,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505148214
    },
    {
        "content": "<p>for the changes in documentation: if I search for <br>\n_type=X,Y,Z;&amp;attribute=VAL<br>\nand if type Z does not have \"attribute\", then the search will <br>\na)fail <br>\nb)only return resources of type X and Y<br>\n?</p>",
        "id": 153906169,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505148511
    },
    {
        "content": "<p>Fail</p>",
        "id": 153906171,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505148556
    },
    {
        "content": "<p>Otherwise you'll silently not get resources you explicitly requested</p>",
        "id": 153906172,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505148609
    },
    {
        "content": "<p>Actually, search is allowed to ignore parameters it cannot support, so at least in Vonk you'll get all parameters of the types X,Y and Z. And an operationoutcome stating that 'attribute' is not supported across all types.</p>",
        "id": 153906173,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1505148668
    },
    {
        "content": "<p>That does limit some use cases where you have 2+ parameters with some of them applying to some mix of resources.  But, I'm not sure that's common/wise enough to outweigh the potential for silent error</p>",
        "id": 153906174,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505148670
    },
    {
        "content": "<p>Vonk will give results + OperationOutcome?</p>",
        "id": 153906175,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505148695
    },
    {
        "content": "<p>or just OperationOutcome</p>",
        "id": 153906176,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505148702
    },
    {
        "content": "<p>i requested but they don't meet my query criteria. So I would not find any problem with returning types X and Y</p>",
        "id": 153906177,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505148707
    },
    {
        "content": "<p>Both, OO as last item in the bundle</p>",
        "id": 153906178,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1505148716
    },
    {
        "content": "<p>Sounds risky to me.</p>",
        "id": 153906179,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505148737
    },
    {
        "content": "<p>this triggers a question just for discussion: is it possible to do logical ORs in a GET search?<br>\nname=smith or age=90</p>",
        "id": 153906182,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505148792
    },
    {
        "content": "<p>note that the client can have it's say about this in the preference header</p>",
        "id": 153906183,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505148821
    },
    {
        "content": "<p>only via _query</p>",
        "id": 153906184,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505148826
    },
    {
        "content": "<p>ok.</p>",
        "id": 153906186,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505148847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> good point. I'm still not there, but I would rather rely on this being core behaviour</p>",
        "id": 153906187,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505148863
    },
    {
        "content": "<p>\"In general, servers SHOULD ignore unknown or unsupported parameters for the following reasons\", that's why Vonk does it this way. Support for the preference header is not implemented yet though.</p>",
        "id": 153906190,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1505148922
    },
    {
        "content": "<p>Yes, but that would imply you just didn't include the partially support parameter, NOT that you selectively applied it</p>",
        "id": 153906195,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505149047
    },
    {
        "content": "<p>not only via _query. See <a href=\"http://hl7.org/fhir/search.html#errors\" target=\"_blank\" title=\"http://hl7.org/fhir/search.html#errors\">http://hl7.org/fhir/search.html#errors</a></p>",
        "id": 153906197,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505149065
    },
    {
        "content": "<p>Indeed, I don't apply it selectively, it's all or none</p>",
        "id": 153906198,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1505149084
    },
    {
        "content": "<p>So for <code>[base]?_type=Patient,Practitioner,Encounter&amp;name=Knaap</code>, what would you return?</p>",
        "id": 153906199,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505149151
    },
    {
        "content": "<p>error on my server</p>",
        "id": 153906202,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505149172
    },
    {
        "content": "<p>at least, that's what I would expect, and would think of anything else as a bug</p>",
        "id": 153906203,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505149190
    },
    {
        "content": "<p>Vonk seems cool with it?\"</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n    <span class=\"nt\">&quot;resourceType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bundle&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;5db83841-88e6-46c1-bcc6-93396faacc51&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;meta&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;versionId&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;5a1703ea-cec8-4f03-8ee2-c1fe80604764&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;lastUpdated&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2017-09-11T17:00:18.615+00:00&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;searchset&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;total&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;link&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;relation&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;self&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://vonk.furore.com/?_type=Patient,Practitioner,Encounter&amp;name=Knaap&quot;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 153906209,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505149255
    },
    {
        "content": "<p>James doesn't like it.</p>",
        "id": 153906220,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505149376
    },
    {
        "content": "<p>Grahame actually:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n    <span class=\"nt\">&quot;resourceType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bundle&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;5b398bf4-eb6e-4cc5-b589-633750b723&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;meta&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;lastUpdated&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2017-09-11T17:02:37Z&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;searchset&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;total&quot;</span><span class=\"p\">:</span> <span class=\"mi\">358</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;link&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;relation&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;self&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://test.fhir.org/r3/?_format=application/fhir+json&amp;search-id=3fb0c0f3-fa9a-44f9-b365-554bc63b4f&amp;&amp;_type=Patient%2CPractitioner%2CEncounter&amp;name=Knaap&amp;_sort=_id&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;relation&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;first&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://test.fhir.org/r3/?_format=application/fhir+json&amp;search-id=3fb0c0f3-fa9a-44f9-b365-554bc63b4f&amp;&amp;_type=Patient%2CPractitioner%2CEncounter&amp;name=Knaap&amp;_sort=_id&amp;search-offset=0&amp;_count=50&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;relation&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;next&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://test.fhir.org/r3/?_format=application/fhir+json&amp;search-id=3fb0c0f3-fa9a-44f9-b365-554bc63b4f&amp;&amp;_type=Patient%2CPractitioner%2CEncounter&amp;name=Knaap&amp;_sort=_id&amp;search-offset=50&amp;_count=50&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;relation&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;last&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://test.fhir.org/r3/?_format=application/fhir+json&amp;search-id=3fb0c0f3-fa9a-44f9-b365-554bc63b4f&amp;&amp;_type=Patient%2CPractitioner%2CEncounter&amp;name=Knaap&amp;_sort=_id&amp;search-offset=350&amp;_count=50&quot;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">&quot;entry&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;fullUrl&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://test.fhir.org/r3/Practitioner/1&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;resource&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\n<span class=\"err\">...</span>\n</pre></div>",
        "id": 153906222,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505149406
    },
    {
        "content": "<p>pfft. I will try and get to it</p>",
        "id": 153906224,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505149424
    },
    {
        "content": "<p>I really love working with this group. Best developer community out there.</p>",
        "id": 153906228,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505149504
    },
    {
        "content": "<p>I should at least return myself ;-)<br>\nBut frankly, since name is not valid for Encounter, I would have expected it to be reported as not supported. What did you expect?</p>",
        "id": 153906232,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1505149573
    },
    {
        "content": "<p>Discussion came up that is somewhat related, but very different... that is when the user uses parameters that would be forbidden given their Security/Privacy authorizations. Should these be silent removals (like unknown parameters)? Or should this be a failure?</p>",
        "id": 153906234,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505149587
    },
    {
        "content": "<p>failure</p>",
        "id": 153906237,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505149607
    },
    {
        "content": "<p>I expected an error for malformed search request (since Encounter doesn't have name)</p>",
        "id": 153906239,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505149613
    },
    {
        "content": "<p>I intend to just point it out.. and tell the implementers that they need to look to policy... thus clients must be ready for both</p>",
        "id": 153906241,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505149637
    },
    {
        "content": "<p>the idea of ignoring unknown parameters is driven by the many reasons for having extra parameters be added for http stack reasons</p>",
        "id": 153906243,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505149640
    },
    {
        "content": "<p>otherwise, errors should be reported</p>",
        "id": 153906245,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1505149654
    },
    {
        "content": "<p>Specifically, the parameter is not invalid.. it is just not allowed by that user.</p>",
        "id": 153906246,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505149662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> I'd expect a forbidden failure</p>",
        "id": 153906247,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505149664
    },
    {
        "content": "<p>I don't think (correct if I'm wrong) its a security risk to expose capability rights failures</p>",
        "id": 153906249,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505149694
    },
    {
        "content": "<p>Yes, it is a risk... but it is a low impact risk. Hence why I want to just point out the risk, and thus deployment environments can choose how important that is. Most will choose to expose it as a failure, because the user is already authorized to do something, so they are not outright hacker.</p>",
        "id": 153906253,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505149796
    },
    {
        "content": "<p>Checked the code: the all-or-none is not actually how it is implemented: if at least one of the types has that searchparameter, it will apply it. Any type that does not have it will return no results, since it won't have any entry for that searchparameter. I should probably change it to return an error on that parameter.</p>",
        "id": 153906255,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1505149887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> Is there a standard way of expressing users can/cannot use certain search parameters? Or do you mean that in general sense - when there is such a restricting in any form?</p>",
        "id": 153906256,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1505149973
    },
    {
        "content": "<p>My personal assumption would be that a search for SearchParameter would return only those I'm authorized to use. But that's certainly not (and won't be?) in the spec.</p>",
        "id": 153906264,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505151097
    },
    {
        "content": "<p>There are MANY ways of expressing security and/or privacy policy. That is not the focus of the issue. The focus of the issue is what  server should do when a security/privacy policy must be enforced that forbids an otherwise valid search parameter. -- One example is when one uses the SMART scope for Patient, and yet the patient includes a patient search parameter on a value other than their own identifier.</p>",
        "id": 153906285,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505153691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> There have been discussions on if a retrieve of the server CapabilityStatement should return a customized CapabilityStatement, customized to the rights that user has. Thus it would not include capabilities that the user would not be allowed to use. I don't know what the result of those discussiions have been</p>",
        "id": 153906286,
        "sender_full_name": "John Moehrke",
        "timestamp": 1505153842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> very interested in that discussion as well</p>",
        "id": 153906297,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505157188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191757\">@Christiaan Knaap</span> One more thing to consider - the possibility that a single named query parameter could have different types across resource (may be Token on one and string on another).  Is there a reasonable thing to do with this?</p>",
        "id": 153906300,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505157245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> Filtering the CapabilityStatement is something we have done with the CMS BlueButton API. We only show the Resources and Functions that the patient has access to.</p>",
        "id": 153906301,
        "sender_full_name": "Mark Scrimshire",
        "timestamp": 1505157303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192609\">@Mark Scrimshire</span> Do you have a link to how this works?</p>",
        "id": 153906318,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1505157644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> currently working on updating to add OAuth Extension but python/django code is here: <a href=\"https://github.com/TransparentHealth/hhs_oauth_server/blob/master/apps/fhir/bluebutton/views/home.py\" target=\"_blank\" title=\"https://github.com/TransparentHealth/hhs_oauth_server/blob/master/apps/fhir/bluebutton/views/home.py\">https://github.com/TransparentHealth/hhs_oauth_server/blob/master/apps/fhir/bluebutton/views/home.py</a> - we have a SupportedResourceType Table that identifies the resources and actions that are available to the end user (beneficiary/Patient).</p>",
        "id": 153906335,
        "sender_full_name": "Mark Scrimshire",
        "timestamp": 1505158009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> : We check for that. If the're not all of the same searchparametertype, we discard it.</p>",
        "id": 153907055,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1505240263
    },
    {
        "content": "<p>Revisiting this for products: I am looking for some harmonization between devices and  medications - and any other resources we expect people to come up with like nutritionProduct, or donationOrgan, ...</p>",
        "id": 153908090,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505384192
    },
    {
        "content": "<p>i'd want to be able to search for:<br>\n1. Gime whatever-this-is, from the code i just scanned.<br>\n2. Gimme all the things here that are expiring within a month.<br>\nAccording to this discussion, this is not possible because the attributes are not consistent so the search would fail, right?</p>",
        "id": 153908091,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505384331
    },
    {
        "content": "<p>medication has code, device doesn't. <br>\nand expirationDate is not at the same level (not sure that matters)</p>",
        "id": 153908096,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505386815
    },
    {
        "content": "<p>Correct. If you want that you indeed have to harmonize the searchparameter(s) for this across the resourcetypes involved. I encourage them being in the spec, but as servers are getting the ability to process custom search parameters, you can try to make it work on one of them first.</p>",
        "id": 153908163,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1505406432
    },
    {
        "content": "<p>Good. Well, not good, but another argument for doing something about that Kind/instance we spoke in Madrid, and align between Medication, Device, and BiologicallyDerivedProduct. (IMO all of these should be specialization of a base resource called \"product\".</p>",
        "id": 153908181,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505407239
    },
    {
        "content": "<p>pinging <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> :  As just mentioned: One reason to harmonize \"instance\" across devices - to support searches like the 2 examples above( 1. Get characteristics of an item and 2. Get Expired Items) across different resources.</p>",
        "id": 153908187,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505407375
    },
    {
        "content": "<p>and pinging <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> although he is ahead of this curve.</p>",
        "id": 153908194,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1505407446
    },
    {
        "content": "<p>We try to avoid deep specialization hierarchies.  I can't imagine us having a base resource of Product, though we could have a \"pattern\" resources might map to.  Certainly getting query parameters that are shared across all of those resources would be a good thing</p>",
        "id": 153908335,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1505414593
    },
    {
        "content": "<p>I would question whether a pattern is needed consider only 3-4 resources across 2 working groups.  Should be easy to be consistent on pattern without the additional overhead of creating and maintaining a Product logical model.    I think the search params should be common among the resources that is low hanging fruit</p>",
        "id": 153908554,
        "sender_full_name": "Eric Haas",
        "timestamp": 1505426582
    },
    {
        "content": "<p>Is there really a need to do a query for \"anything expiring in the next month\"? How many systems track multiple kinds of resources that can expire, and would want to deal with them all in one list? I recognize that \"expiring in the next month\" is an example, but my question would apply more widely.</p>",
        "id": 153908642,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1505432513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> Did you ever get an answer to your question about barcodes?</p>",
        "id": 153912581,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1507201157
    }
]