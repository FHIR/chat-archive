[
    {
        "content": "<p>Our Appointment Resource is going to support a business identifier for Appointments created/defined by external systems (Diagnostic Imaging - currently four different vendor-systems have been identified). We have also identified future similar usage for other types of systems.<br>\nI am wondering whether I should choose </p>\n<p>A) a very strict approach:<br>\n- The possible values for identifier.system must be known by our server<br>\nHence the Appointment Structure Definition can be very explicit about the known possible identifiers; and other systems may use this.<br>\nLikewise, we can choose to have special business rules for special systems (some systems may e.g. want us to treat \"their\" appointments as read-only).<br>\nThe major drawback is the integration of new external systems: their identifiers will not be accepted by the server without whitelisting the new identifier.system (and we currently only have a few yearly releases...)<br>\nThe major advantage is the strictness - we know the possible identifier.system and can be clear about the meaning and possible restrictions on the identifier.value in the structure definition.   </p>\n<p>Or <br>\nB) a very loose approach:<br>\n- Everything goes for the identifier.system (as long as the format is valid) and likewise for the identifier.value.<br>\n(we may also need a displayable system value).</p>\n<p>Or <br>\nC) Something in between:<br>\n- some of the possible identifier.system are known and will be part of the structure definition.<br>\n- new/unknown identifiers are supported but we will encourage a governance in which they are added to the structure definitions as part of the next release.</p>\n<p>I am currently in favor of C) - any inputs/suggestions?</p>",
        "id": 162283219,
        "sender_full_name": "Allan Bro Hansen",
        "timestamp": 1554155976
    },
    {
        "content": "<p>Why don't you want the loose approach?  It seems like a configuration headache every time you add a new partner.</p>",
        "id": 162283733,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1554156423
    },
    {
        "content": "<p>For identifiers you need to recognize due to business rules, you'll need to ensure that everyone uses the correct 'system'.  For everything else, it shouldn't matter.  You shouldn't constrain people from sending identifiers that you might not recognize/care about as others you pass the data on to might well care/recognize them.</p>",
        "id": 162283882,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1554156550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span> Yes - the \"headache\" is the drawback of approach A. Approach C mitigates this (and we not expect new partners to turn up frequently).<br>\n<span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> Agree - and good point about possible just being a kind of identifier-repository (although that will not currently be our role)</p>",
        "id": 162284456,
        "sender_full_name": "Allan Bro Hansen",
        "timestamp": 1554157095
    }
]