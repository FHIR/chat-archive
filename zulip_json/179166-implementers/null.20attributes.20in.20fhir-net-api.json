[
    {
        "content": "<p>I'm confused about when I can expect attributes to be null or not in fhir-net-api. It seems that lists, such as Patient.Relationship can never be null because the property creates the list implicitly when it is null. On the other hand, Patient.animal.species which is a mandatory attribute does not automatically create an instance when the attribute is accessed.<br>\nIs there a general principle for when attributes can be null?</p>",
        "id": 153886772,
        "sender_full_name": "Mattias Flodin",
        "timestamp": 1493808324
    },
    {
        "content": "<p>Lists are never null - everything else (that is nullable) can be null</p>",
        "id": 153886773,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1493808460
    },
    {
        "content": "<p>Alright, thanks</p>",
        "id": 153886775,
        "sender_full_name": "Mattias Flodin",
        "timestamp": 1493808697
    },
    {
        "content": "<p>There seems to be a redundancy here then. The generated CopyTo() code checks whether list properties are null. But they can never be null since the property implementation always creates the list if it is null.</p>",
        "id": 153886776,
        "sender_full_name": "Mattias Flodin",
        "timestamp": 1493809105
    },
    {
        "content": "<p>additionally, it calls DeepCopy() and then passes the result into the List constructor, so it's actually creating a copy of a copy</p>\n<div class=\"codehilite\"><pre><span></span>if(Relationship != null) dest.Relationship = new List&lt;Hl7.Fhir.Model.CodeableConcept&gt;(Relationship.DeepCopy());\n</pre></div>",
        "id": 153886777,
        "sender_full_name": "Mattias Flodin",
        "timestamp": 1493809191
    },
    {
        "content": "<p>Ah no, not an efficiency issue, more like a consistency issue. List&lt;Resource&gt;.DeepCopy doesn't create a copy of the List, it returns a LINQ enumerable is based on the original object.</p>",
        "id": 153886778,
        "sender_full_name": "Mattias Flodin",
        "timestamp": 1493809494
    },
    {
        "content": "<p>I always check null or empty before enumerating list.</p>",
        "id": 153886865,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1493841166
    }
]