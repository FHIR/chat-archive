[
    {
        "content": "<p>Is a server allowed to add referenced resources in the returned searchset Bundle (with a <code>.entry.search.mode</code> = include) <strong>without</strong> the client actually using the _include parameter in the request?</p>",
        "id": 255383469,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1632915600
    },
    {
        "content": "<p>I don't believe we forbid this, but it's the kind of behavior that can lead to brittle clients</p>",
        "id": 255396095,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1632921247
    },
    {
        "content": "<p>(they'll start making assumptions that work in one environment and will fail elsewhere.)</p>",
        "id": 255396143,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1632921267
    },
    {
        "content": "<p>I'd also be concerned about unsuspecting clients misinterpreting the results.  While it is good practice to check the <code>entry.search.mode</code>, I'm willing to bet there are clients that don't (or only do if they've specifically requested <code>_include</code>).  It would probably be bad (in some cases) for clients to treat unexpected <code>include</code> resources like <code>match</code> resources.</p>",
        "id": 255397130,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1632921624
    },
    {
        "content": "<p>To give more insight into our use case in the Nederlands (MedMij): we have a mixed environment of servers that are truly restful and ones that are based on facades and do not have an endpoint for everything. We state that all references should be resolvable. Servers can choose to support this by either allowing a read or include the referenced resource straight away in the Bundle. In this case, you would have them as contained resources or as included entries in the Bundle. The latter seems a better solution. Do you agree?</p>",
        "id": 255397698,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1632921845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> that's a really good point. In theory defensive clients would be consistent in checking bundle self links and entry modes before processing results; in practice I expect these checks happen ~never. (Are there other checks a client should do here? Was discussing with <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> that this would be a good subject for a tutorial video or blog.)</p>",
        "id": 255398939,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1632922259
    },
    {
        "content": "<blockquote>\n<p>would be consistent in checking bundle self links and entry modes before processing results</p>\n</blockquote>\n<p>Our clients definitely do _not_ do that when processing generic search result - it expects that references are resolvable via REST call, not in the bundle</p>",
        "id": 255461605,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1632944536
    },
    {
        "content": "<p>Would the use case for the Netherlands be better served by requiring unresolvable-via-REST references to use identifiers?</p>",
        "id": 255472897,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1632948990
    },
    {
        "content": "<p>You'd still have the problem of returning them as Bundle.entry[] elements right alongside the \"match\" results, right?</p>",
        "id": 255503202,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1632965646
    },
    {
        "content": "<p>well, we can't mandate that systems aren't brittle. You can return included resources now, since we didn't say that you can't. I'd just document the issue clearly in the IG</p>",
        "id": 255505607,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1632967596
    },
    {
        "content": "<p>It might be worthwhile making that possibility explicit in the spec - change request <span class=\"user-mention\" data-user-id=\"192301\">@Ardon Toonstra</span> ?</p>",
        "id": 255505959,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1632967863
    },
    {
        "content": "<p>We can't mandate that clients aren't brittle, but it might still be good for us here in the chat to encourage patterns (especially for high profile national implementations with careful design) where clients opt in to this kind of inclusion.</p>",
        "id": 255513133,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1632973897
    },
    {
        "content": "<p>Patient safety concerns may also lead a server to include resources that a client perhaps wasn't expecting. \"You can't safely interpret this without also looking at these other things. Ignore the other things at your peril\".</p>",
        "id": 255523259,
        "sender_full_name": "Ren√© Spronk",
        "timestamp": 1632982555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span> ,</p>\n<blockquote>\n<p>Our clients definitely do _not_ do that when processing generic search result - it expects that references are resolvable via REST call, not in the bundle</p>\n</blockquote>\n<p>The <a href=\"https://hl7.org/FHIR/bundle.html#references\">Bundle section about resolving references</a> states:<br>\n\"<em>Applications reading a Bundle should always look for a resource by its identity in the bundle first before trying to access it by its URL externally.</em>\"</p>",
        "id": 255538005,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1632991643
    },
    {
        "content": "<blockquote>\n<p>I'd just document the issue clearly in the IG</p>\n</blockquote>\n<p>You are right, I think we can improve our IG regarding this (made a ticket). I also made a ticket per Lloyds request: <a href=\"https://jira.hl7.org/browse/FHIR-34042\">https://jira.hl7.org/browse/FHIR-34042</a></p>",
        "id": 255538305,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1632991795
    },
    {
        "content": "<p>We do that for _transaction_ bundles, but not for search results one, if there are no requested includes seem pointless (and actually _is_ pointless on all servers we connect to now).</p>",
        "id": 255573499,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1633008499
    },
    {
        "content": "<p>Sending stuff that's not expected only helps with patient safety if the receiver can and will consume and do useful things with them - which strikes me as very unlikely.</p>",
        "id": 255578856,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633010506
    },
    {
        "content": "<p>seems it might be useful to define a query parameter, similar to _include and _revInclude, that a client can declare their interest.     I fully understand and agree that clients should expect extra stuff, but if you are not aware why that extra stuff is there then it is hard for me to expect clients will do the right thing. Where a query parameter is an indicator that the client is aware of this 'kind' of extra stuff and will use it appropriately.</p>",
        "id": 255579671,
        "sender_full_name": "John Moehrke",
        "timestamp": 1633010762
    },
    {
        "content": "<p>How could you pre-plan to use something appropriately?  If you're going to build the capability to consume and do something useful with data, I can't think of any reason why you wouldn't then always ask for it.  Building the capacity to consume the data but not ask for it seems like a super-odd design choice.</p>",
        "id": 255580460,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633011049
    }
]