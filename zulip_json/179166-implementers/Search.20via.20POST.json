[
    {
        "content": "<p><a href=\"https://www.hl7.org/fhir/search.html\">https://www.hl7.org/fhir/search.html</a> mentions that search can be invoked via a POST to [base]/[type]/_search.</p>\n<p>However, in the swagger definitions being generated for the various implementation guides, I don't see this endpoint listed.  Are servers required to support this search variant?  Should I open an issue to have this endpoint added to all the generated swagger?</p>",
        "id": 221665804,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1609863384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 221666201,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1609863537
    },
    {
        "content": "<p>This seems important to me because if its not clear then not all servers will support it and then clients can't depend on it.  Any thoughts?</p>",
        "id": 221945977,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1610029018
    },
    {
        "content": "<p>in US Core we specify the search requirements in the CapabilityStatements,  I would expect that would drive the swagger definitions too.</p>",
        "id": 221971428,
        "sender_full_name": "Eric Haas",
        "timestamp": 1610039938
    },
    {
        "content": "<blockquote>\n<p>Are servers required to support this search variant?  </p>\n</blockquote>\n<p>short answer is no.</p>",
        "id": 221971514,
        "sender_full_name": "Eric Haas",
        "timestamp": 1610039984
    },
    {
        "content": "<p>It is a shall requirement <a href=\"http://hl7.org/fhir/http.html#search\">in the base spec</a> though:</p>\n<blockquote>\n<p>Because of the way that some user agents and proxies treat GET and POST requests, in addition to the get based search method above, servers that support search SHALL also support a POST based search</p>\n</blockquote>",
        "id": 221985103,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1610045891
    },
    {
        "content": "<p>The conflict above from base spec to IG seems to highlight the need for clarification here and so I went ahead and opened <a href=\"https://jira.hl7.org/browse/FHIR-30577\">https://jira.hl7.org/browse/FHIR-30577</a></p>",
        "id": 223891021,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1611578575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> is there a better spot to leave the \"add the <code>_search</code> endpoints to the generated openapi\" request?</p>",
        "id": 223891103,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1611578638
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 224940240,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612301742
    },
    {
        "content": "<p>It wasn't Eric's intention to indicate that US-core relaxes the base spec requirement - and support for POST to _search is mandatory.  (i.e. it must be supported for any US core implementation that supports search at all).</p>",
        "id": 231370753,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1616441373
    },
    {
        "content": "<p>see <a href=\"http://jira.hl7.org/browse/FHIR-31585\">FHIR#31585</a></p>",
        "id": 231382167,
        "sender_full_name": "Eric Haas",
        "timestamp": 1616446105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> Cannot open the reference guidance in your ticket</p>\n<blockquote>\n<p>Add guidance on \"POST ... _search\" in general guidance here: file:///Users/ehaas/Documents/FHIR/US-Core-R4/output/general-guidance.html#search-syntax</p>\n</blockquote>",
        "id": 231864281,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1616701284
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/ig/HL7/US-Core/general-guidance.html#search-syntax\">http://build.fhir.org/ig/HL7/US-Core/general-guidance.html#search-syntax</a></p>",
        "id": 231873447,
        "sender_full_name": "Eric Haas",
        "timestamp": 1616705185
    },
    {
        "content": "<p>basically going to say server reuqired to support the POST syntax per the FHIR spec but we are only going to use the GET syntax in the guide.</p>",
        "id": 231873724,
        "sender_full_name": "Eric Haas",
        "timestamp": 1616705300
    },
    {
        "content": "<blockquote>\n<p>However, in the swagger definitions being generated for the various implementation guides, I don't see this endpoint listed. Are servers required to support this search variant? Should I open an issue to have this endpoint added to all the generated swagger?</p>\n</blockquote>\n<p>Can anyone please point me to the swagger definition of endpoints</p>",
        "id": 232256529,
        "sender_full_name": "Ayush Shrivastava",
        "timestamp": 1617019373
    },
    {
        "content": "<p>Is an implementer conformant if only the Search via POST is supported or are all implementers required to support the GET method for searches?</p>",
        "id": 234364987,
        "sender_full_name": "Mona O",
        "timestamp": 1618333707
    },
    {
        "content": "<p>You must support GET. I don't know if that's actually written somewhere but it is what most / all clients would expect</p>",
        "id": 234367837,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1618334783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191912\">Michele Mottini</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/234367837\">said</a>:</p>\n<blockquote>\n<p>You must support GET. I don't know if that's actually written somewhere but it is what most / all clients would expect</p>\n</blockquote>\n<p>Are there any exceptions to this rule? Due to PHI in the URL our security dept. does not allow us to support GET.</p>",
        "id": 234378901,
        "sender_full_name": "Mona O",
        "timestamp": 1618339120
    },
    {
        "content": "<p>here is the text:  <a href=\"http://build.fhir.org/http.html#search\">http://build.fhir.org/http.html#search</a></p>\n<blockquote>\n<p>.... <em>in addition</em> to the get based search method above, servers that support search <strong>SHALL</strong> also support a <code>POST</code> based search:<br>\n(emphasis mine)</p>\n</blockquote>",
        "id": 234379139,
        "sender_full_name": "Eric Haas",
        "timestamp": 1618339225
    },
    {
        "content": "<p>I did not read this as \"all servers shall support GET search\". in fact, we discussed excluding GET search.</p>",
        "id": 234446596,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1618380962
    },
    {
        "content": "<p>'...in addition.... SHALL also....' seems pretty clearly requiring GET to me</p>",
        "id": 234499029,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1618407152
    },
    {
        "content": "<p>Am I'm hearing that companies are forced to follow conformance over their own security policies? Are there no exceptions?</p>",
        "id": 234520968,
        "sender_full_name": "Mona O",
        "timestamp": 1618414253
    },
    {
        "content": "<p>Forced by whom? Your legal counsel can advise you of the risks.</p>\n<p>In practice, most clients use GET and every server I've ever seen supports GET.</p>",
        "id": 234531010,
        "sender_full_name": "Paul Church",
        "timestamp": 1618417860
    },
    {
        "content": "<p>We decided that all searches should be by POST. does this mean we are not FHIR conformant?</p>",
        "id": 234565264,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1618430479
    },
    {
        "content": "<p>\"servers shall also support\" does not mean \"implementations must also enable\". I may be wrong here</p>",
        "id": 234565434,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1618430531
    },
    {
        "content": "<p>is there a reason why all implementations would need to support GET search?</p>",
        "id": 234566878,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1618431115
    },
    {
        "content": "<p>Servers supporting the usage of GET does not require or even recommend the usage of the GET method. Choice of which method to use is up to the client application. If the client chooses to use the GET method then they are the ones placing the potentially restricted information in the URL.</p>\n<p>Every resource in USCore says, \"SHALL support searching using the combination of the patient and intent search parameters:<br>\nincluding support for composite OR search on intent (e.g.intent={system|}[code],{system|}[code],...)<br>\nGET [base]/MedicationRequest?patient=[reference]&amp;intent=order,plan\". </p>\n<p>Some people will read that and say, must support GET. Other's will read that and say that the usage of GET in the example doesn't mandate the usage of the GET method or the requirement to support the GET method. Some client applications won't even attempt to use the POST because they \"know\" all servers SHALL support GET.</p>",
        "id": 234567394,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1618431329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191912\">Michele Mottini</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/234499029\">said</a>:</p>\n<blockquote>\n<p>'...in addition.... SHALL also....' seems pretty clearly requiring GET to me</p>\n</blockquote>\n<p>I think the sentence is not that unequivocal. A implies B does not mean A is true, or that B implies A,  right?</p>",
        "id": 234567404,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1618431332
    },
    {
        "content": "<p>hey, if I'm using HAPI or some FHIR server to send data to our EMR, do EMRs like Athena provide a different means of passing data to/from them (perhaps with more access or benefits ) ASIDE from their usual API? I guess I'm wondering if a FHIR server would exchange data with an EMR via their API just like any other program or if there's another way.</p>",
        "id": 234567700,
        "sender_full_name": "Tony ThaDee",
        "timestamp": 1618431477
    },
    {
        "content": "<p>Also, the prohibition against using the GET method and requiring the usage of only the POST method, doesn't prevent the client app from putting the values on the URL, in exactly the same manner as they would using the GET method. HAPI will even conveniently merge the two sets of parameters together for you (URL + post body).</p>",
        "id": 234568530,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1618431804
    },
    {
        "content": "<p>I know the FHIR server wouldn't do the data exchange, but I mean to ask, do EMRs provide teams/projects that utilize certain technologies that utilize something like a FHIR server greater or special access that anyone here is aware of.</p>",
        "id": 234568545,
        "sender_full_name": "Tony ThaDee",
        "timestamp": 1618431813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"405774\">@Tony ThaDee</span> not to hijack this thread, but every implementation is going to be different. Some will be more features using FHIR others will be more features using custom API.</p>",
        "id": 234568730,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1618431889
    },
    {
        "content": "<p>didn't mean to distract from the thread.</p>",
        "id": 234569127,
        "sender_full_name": "Tony ThaDee",
        "timestamp": 1618432063
    },
    {
        "content": "<p>getting back to the topic:</p>\n<blockquote>\n<p>'...in addition.... SHALL also....' seems pretty clearly requiring GET to me</p>\n</blockquote>\n<p>I think the sentence is not that unequivocal. A implies B does not mean A is true, or that B implies A,  right?</p>",
        "id": 234569144,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1618432070
    },
    {
        "content": "<p>This wordsmithing seems confusing to me. The definition of search is a GET operation.  The spec doesn't say you SHALL support it  - you don't have to support all API methods, just declare what you do support in your capability statement. But if you support search, this is the definition. If you don't support GET, you don't support search. POST is the additional thing, which the spec goes out of its way to say is required <em>if</em> you support search.</p>\n<p>Look at any other operation, like create: \"The create interaction creates a new resource in a server-assigned location [...] The create interaction is performed by an HTTP POST command\" - the word SHALL does not appear here, nor does it need to.</p>",
        "id": 234570230,
        "sender_full_name": "Paul Church",
        "timestamp": 1618432486
    },
    {
        "content": "<p>is the definition of Search a GET operation? I understood that GET is one way to implement search</p>",
        "id": 234570463,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1618432574
    },
    {
        "content": "<p>I think <a href=\"https://www.hl7.org/fhir/http.html#search\">https://www.hl7.org/fhir/http.html#search</a> is pretty clear?</p>\n<ol>\n<li>The interaction can be performed by several different HTTP commands.</li>\n<li>Because of the way that some user agents and proxies treat GET and POST requests, in addition to the get based search method above, servers that support search SHALL also support a POST based search:</li>\n</ol>",
        "id": 234570705,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1618432683
    },
    {
        "content": "<p>This interaction searches a set of resources based on some filter criteria. The interaction can be performed by several different HTTP commands.\" <br>\nI don't think this unambiguously mean this is a GET</p>",
        "id": 234570755,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1618432695
    },
    {
        "content": "<p>Right <span class=\"user-mention\" data-user-id=\"191478\">@Oliver Egger</span>. This reads indeed that servers shall support both.</p>",
        "id": 234570976,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1618432799
    },
    {
        "content": "<p>I read it the same same way, SHALL support GET and POST. </p>\n<p>-This allows the client application to determine if the usage of a GET method is problematic for them.<br>\n-No matter which method is used/allowed, the http logs have to be treated as protected. This probably tells all clients that they SHOULD use only post, but they don't have to.</p>",
        "id": 234571162,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1618432859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191832\">Jose Costa Teixeira</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/234446596\">said</a>:</p>\n<blockquote>\n<p>I did not read this as \"all servers shall support GET search\". in fact, we discussed excluding GET search.</p>\n</blockquote>\n<p>This sentence is not correct. </p>\n<p>What I should have said is that </p>\n<blockquote>\n<p>I didn't read this as \"all implementations shall support GET search\"</p>\n</blockquote>",
        "id": 234571336,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1618432927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"335936\">Daniel Venton</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/234571162\">said</a>:</p>\n<blockquote>\n<p>I read it the same same way, SHALL support GET and POST. </p>\n<p>-This allows the client application to determine if the usage of a GET method is problematic for them.<br>\n-No matter which method is used/allowed, the http logs have to be treated as protected. This probably tells all clients that they SHOULD use only post, but they don't have to.</p>\n</blockquote>\n<p>Right. And I'd say that some implementations may disable GET. If there is a reason that an IG cannot exclude GET search, I'd like to see it so that I can transmit to the implementers</p>",
        "id": 234571567,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1618433025
    },
    {
        "content": "<p>For this very reason, I've built FHIR servers that disallowed certain searches with GET searches depending on the parameters  whereas the search can always safely be performed using POST</p>",
        "id": 234571593,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1618433035
    },
    {
        "content": "<p>I agree that no client is under an obligation to use GET, and an IG can say \"don't use GET\". I was just arguing that servers are obligated to support both.</p>",
        "id": 234572011,
        "sender_full_name": "Paul Church",
        "timestamp": 1618433185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191427\">Jens Villadsen</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/234571593\">said</a>:</p>\n<blockquote>\n<p>For this very reason, I've built FHIR servers that disallowed certain searches with GET searches depending on the parameters  whereas the search can always safely be performed using POST</p>\n</blockquote>\n<p>If you reject the GET method, for any reason, then the damage has already been done. That URL with the PHI/PII has already been written to your logs and the log of every router between you and the client. Perhaps this will train clients to not use the GET method, but I suspect your capability statement doesn't say, 'POST parameters allowed X, GET parameters allowed X-n\"</p>",
        "id": 234572478,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1618433398
    },
    {
        "content": "<p>This concern seems a bit archaic to me - we know how to do TLS now. The URL is not getting written to the log of any router between you and the client.</p>",
        "id": 234572878,
        "sender_full_name": "Paul Church",
        "timestamp": 1618433559
    },
    {
        "content": "<p>\"the damage has already ben done\" - not a lot. <br>\nThe client can try once but it will not do all searches using GET. So I hope that a client, even if it forgot to undergo the testing phase to see what is allowed, can try one search but after that search it will realize that it doesn't work. Stubborn clients may give away a few searches, but even then I don't think the first search a client would do would contain sensitive parameters.</p>",
        "id": 234575872,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1618434436
    },
    {
        "content": "<p>I encourage my customers to do GET searches. Seriously. We designed for the presence of sensitive data in the query parameters and there's no \"damage\".</p>",
        "id": 234576482,
        "sender_full_name": "Paul Church",
        "timestamp": 1618434584
    },
    {
        "content": "<p>The intention was very much that servers would be allowed to NOT support GET - because there are environments that have architectural requirements (well-founded or not) that prohibit using GET.  We don't want to prevent those systems from being FHIR conformant.  The only mechanism you can count on ALL conformant systems supporting is POST.</p>",
        "id": 234885719,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618591342
    },
    {
        "content": "<p>That said, all systems SHOULD support GET.</p>",
        "id": 234885746,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618591356
    },
    {
        "content": "<p>Then the IG should explicitly state SHALL support search via POST method, SHOULD support search via GET method. The way it's currently worded SHALL also support POST implies that there is another SHALL. It doesn't read right if it's \"MAY support GET and SHALL also support POST.\" If you don't support GET then you aren't also doing anything.</p>",
        "id": 234893881,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1618594960
    },
    {
        "content": "<p>If you feel the current wording needs clarification, please submit a change request.</p>",
        "id": 234894438,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618595204
    },
    {
        "content": "<p>some will only support GET, some will only support POST, some will support both... right? I don't think the core should declare either as manditory.</p>",
        "id": 234895926,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618595820
    },
    {
        "content": "<p>The core spec <em>does</em> declare POST as mandatory.</p>",
        "id": 234895979,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618595844
    },
    {
        "content": "<p>And I don't think we can relax that at this point...</p>",
        "id": 234896004,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618595855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/234885719\">said</a>:</p>\n<blockquote>\n<p>The intention was very much that servers would be allowed to NOT support GET - because there are environments that have architectural requirements (well-founded or not) that prohibit using GET.  We don't want to prevent those systems from being FHIR conformant.  The only mechanism you can count on ALL conformant systems supporting is POST.</p>\n</blockquote>\n<p>I was racting to this statement... I don't think you can \"count\" on \"ALL conformant systems supporting is POST\"</p>",
        "id": 234897014,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618596206
    },
    {
        "content": "<p>If it doesn't support POST, it's not a conformant system.</p>",
        "id": 234897081,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618596236
    },
    {
        "content": "<p>ah, that is news to me. where is that stated?</p>",
        "id": 234897530,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618596407
    },
    {
        "content": "<p>search page seems to speak to GET and POST equally <a href=\"http://hl7.org/fhir/search.html\">http://hl7.org/fhir/search.html</a></p>",
        "id": 234898995,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618597033
    },
    {
        "content": "<p>well, if equal is (POST = 2 mentions) vs (GET =124 mentions)</p>",
        "id": 234899421,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618597205
    },
    {
        "content": "<p>It baffles me that the intent would be for GET to be optional. The entire search spec is written around GET.</p>",
        "id": 234899643,
        "sender_full_name": "Paul Church",
        "timestamp": 1618597306
    },
    {
        "content": "<p>I find on the http page is a hint about POST being mandatory - <a href=\"http://build.fhir.org/http.html#search\">http://build.fhir.org/http.html#search</a></p>",
        "id": 234899731,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618597335
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Because of the way that some user agents and proxies treat GET and POST requests, in addition to the get based search method above, servers that support search SHALL also support a POST based search:\n</code></pre></div>",
        "id": 234899763,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618597352
    },
    {
        "content": "<p>I don't see how an explicit SHALL statement is a 'hint'?</p>",
        "id": 234899852,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618597388
    },
    {
        "content": "<p>does this mean that an Implementation Guide can not forbid POST and mandate GET?</p>",
        "id": 234899857,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618597392
    },
    {
        "content": "<p>We don't <em>want</em> GET to be optional, but in some environments, it's banned.  It would be non-conformant to ban POST.</p>",
        "id": 234899912,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618597428
    },
    {
        "content": "<p>I say hint.. because it is passive voice, and at the very end of a oddly phrased statement</p>",
        "id": 234899931,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618597439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/234899912\">said</a>:</p>\n<blockquote>\n<p>We don't <em>want</em> GET to be optional, but in some environments, it's banned.  It would be non-conformant to ban POST.</p>\n</blockquote>\n<p>I think this is wrong. FHIR core should not have taken a position.</p>",
        "id": 234900097,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618597503
    },
    {
        "content": "<p>not all uses of FHIR are PHI (Personal health information).     Many people know how to properly configure their web-servers to not log GET parameters.</p>",
        "id": 234900474,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618597682
    },
    {
        "content": "<p>POST search is not used just for security/privacy reasons. The practical limits on a query string are orders of magnitude lower than the limits on a POST body. It makes good sense to have POST support required for servers, while GET is strongly recommended. \"some servers will have this, other servers will have that\" doesn't cut it in this case.</p>",
        "id": 234903879,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1618599279
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 234905415,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1618599972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/234900474\">said</a>:</p>\n<blockquote>\n<p>not all uses of FHIR are PHI (Personal health information).     Many people know how to properly configure their web-servers to not log GET parameters.</p>\n</blockquote>\n<p>\"Many\" is very relative...  Be careful about bias here.  People in your circle probably do know about this, but you're a security guy in a security-conscious group of experts.</p>",
        "id": 234905754,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1618600143
    },
    {
        "content": "<p>I am well aware of my credentials. But failure to configure your server is poor security.</p>",
        "id": 234908456,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618601452
    },
    {
        "content": "<p>and those that can't protect logs, should not be given the responsibility to protect the data.... it is such a rediculous fallacy that a server can have PHI but can't protect http server log files.</p>",
        "id": 234908606,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618601524
    },
    {
        "content": "<p>the size limits of GET vs POST are far more useful discussion.. . I don't think this is a reason to mandate POST, but it is a consideration that should be voiced.</p>",
        "id": 234908911,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618601658
    },
    {
        "content": "<p>my biggest complain is that I am being told that it is non-conformant to FHIR for me to have an implementation guide that focuses on GET and does not include POST.</p>",
        "id": 234909014,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618601717
    },
    {
        "content": "<blockquote>\n<p>focuses on GET and <strong>does not include</strong> POST</p>\n</blockquote>\n<p>or</p>\n<blockquote>\n<p>focuses on GET and <strong>prohibits</strong> POST</p>\n</blockquote>\n<p>?</p>\n<p>There is a difference. If the latter, what would be the reason to prohibit POST searches?</p>",
        "id": 234909454,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1618601947
    },
    {
        "content": "<p>I agree that I was tactful in my words... but I don't think there is a difference.   as absence of a statement is often seen as a strong implication.</p>",
        "id": 234909804,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618602125
    },
    {
        "content": "<p>plus, I was about to add a shall-not to an implementation guide... as asked for by that community... but now need to reverse direction and force that community  to do POST searches that they don't want to be forced to do.</p>",
        "id": 234909920,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618602210
    },
    {
        "content": "<p>No one is forcing them to <strong>do</strong> POST searches. The <strong>server</strong> must support POST searches. Why would an implementation guide promote incomplete server implementations?</p>",
        "id": 234910141,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1618602328
    },
    {
        "content": "<p>that is a confusing message... I am hearing that any search must be supported by way of POST search, not just by GET... right?    Thus I must tell the servers that they must implement POST search, not just GET search... right?</p>",
        "id": 234910509,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618602496
    },
    {
        "content": "<p>I understand that this does not mean clients must be able to query by POST... but it does mean that servers must implement POST search, even when they will never be asked to do it in real-life.</p>",
        "id": 234910669,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618602574
    },
    {
        "content": "<p>Yes, servers must support POST search - this is a basic property of a FHIR server. </p>\n<p>A FHIR implementation guide that describes some type of use of the FHIR RESTful API  expects that there will be FHIR servers to support that API. We don't want to promote the illusion that the implementation of a FHIR server is trivial, and does not require rigorous software engineering. The existence of reference implementations and various products already satisfies that requirement by default. </p>\n<p>If someone needs to create a FHIR server from scratch, the ability to support search via POST doesn't seem to be such an onerous requirements compared to the overall requirements a FHIR server needs to meet.</p>",
        "id": 234911636,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1618603003
    },
    {
        "content": "<p>It just seems odd to me that all the documentation is on GET and I am confident that all the testing is using GET... yet we are comfortable that POST is what we mandate.</p>",
        "id": 234913053,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618603640
    },
    {
        "content": "<p>POST is the common denominator.  We <em>can</em> mandate support for that everywhere (and have).  We can't do the same for GET.  And whether anyone feels we ought to or not, we did, and given that the requirement is normative, it's not something we can reasonably revisit - nor have I heard a strong reason why we should try.</p>",
        "id": 234913502,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618603837
    },
    {
        "content": "<p>John does make a good point though - do certification testing actually test this? I will ask in the Inferno stream...</p>",
        "id": 234913960,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1618604070
    },
    {
        "content": "<p>According to our experience in real life it is also a POST for clients due to organisational regulations. We had this discussion already for IHE MHD implementations in a project (MHD implies GET for search queries). Since <a href=\"https://profiles.ihe.net/ITI/\">IHE MHD is in public comment phase</a> added just a comment to <a href=\"https://github.com/IHE/ITI.MHD/issues/39\">clarify</a>, thanks for that interesting discussion here!</p>",
        "id": 234914074,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1618604127
    },
    {
        "content": "<blockquote>\n<p>John does make a good point though - do certification testing actually test this? I will ask in the Inferno stream...</p>\n</blockquote>\n<p>No. We are well aware of this though it will in by the next release.  Anecdotally, if an IG doesn't (re)state that POST is required, this requirement will be missed.  FHIR is a big spec, and much of it is optional depending on use case.</p>",
        "id": 234915083,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1618604597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191478\">Oliver Egger</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/234914074\">said</a>:</p>\n<blockquote>\n<p>According to our experience in real life it is also a POST for clients due to organisational regulations. We had this discussion already for IHE MHD implementations in a project (MHD implies GET for search queries). Since <a href=\"https://profiles.ihe.net/ITI/\">IHE MHD is in public comment phase</a> added just a comment to <a href=\"https://github.com/IHE/ITI.MHD/issues/39\">clarify</a>, thanks for that interesting discussion here!</p>\n</blockquote>\n<p>yup, I noticed... drat</p>",
        "id": 234917688,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618605825
    },
    {
        "content": "<p>I am still worried that we are driving this use of POST for search purely academically... adding testing is not changing that academic point... what we need to understand is.. clients support for POST search..</p>",
        "id": 234917920,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618605933
    },
    {
        "content": "<p>I have had many discussions about the security fallacy... not helpful that it continues. (I am not saying it is 100% false, but rather that it is a configuration failure by incompetent security. Either protect your logs, or configure your auditing properly. I prefer you protect your logs).</p>",
        "id": 234918480,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618606186
    },
    {
        "content": "<p>Right.  But that's only one of the reasons.  The length limits of URLs is a more valid reason</p>",
        "id": 234918769,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618606284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"192576\">Robert Scanlon</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/234915083\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>John does make a good point though - do certification testing actually test this? I will ask in the Inferno stream...</p>\n</blockquote>\n<p>No. We are well aware of this though it will in by the next release.  Anecdotally, if an IG doesn't (re)state that POST is required, this requirement will be missed.  FHIR is a big spec, and much of it is optional depending on use case.</p>\n</blockquote>\n<p>See this update for the next version of US Core: <a href=\"http://build.fhir.org/ig/HL7/US-Core/general-guidance.html#search-syntax\">http://build.fhir.org/ig/HL7/US-Core/general-guidance.html#search-syntax</a>.  Which I now realized  misinterprets the shoddy conformance language in the FHIR spec.  So based on this conversation it will have to say <strong>SHALL</strong> POST and <strong>SHOULD</strong> GET (we will need to clarify the CapabilityStatement narrative too).</p>",
        "id": 234931438,
        "sender_full_name": "Eric Haas",
        "timestamp": 1618612695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/234894438\">said</a>:</p>\n<blockquote>\n<p>If you feel the current wording needs clarification, please submit a change request.</p>\n</blockquote>\n<p><a href=\"http://jira.hl7.org/browse/FHIR-31912\">FHIR#31912</a></p>",
        "id": 234933620,
        "sender_full_name": "Eric Haas",
        "timestamp": 1618614196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> said:</p>\n<blockquote>\n<p>So based on this conversation it will have to say SHALL POST and SHOULD GET (we will need to clarify the CapabilityStatement narrative too).</p>\n</blockquote>\n<p>This feels more like a substantive change to US Core requirements from v3.1.1 to v3.2.0, and not just  a clarification.  I know this wasn't necessarily your intent, but the language in the <a href=\"http://hl7.org/fhir/us/core/general-guidance.html#search-syntax\">search syntax section</a>, and the hundreds of GET-based search examples throughout the guide (without POST being mentioned anywhere), very strongly implies that search by GET is a requirement.  I absolutely do not think impacts to test tooling should drive your decision here, but to illustrate one downstream effect of this change, we will have to alter all of our tests to no longer ever rely on search by GET working, because from our perspective it is no longer required.  I suspect most clients would need to do the same.</p>",
        "id": 234995452,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1618672327
    },
    {
        "content": "<p>US Core is free to mandate support for GET too.  The key thing is that it can't loosen the mandate to support POST that's already in the core spec.</p>",
        "id": 235003026,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618679295
    },
    {
        "content": "<p>Or mandate support for search by GET for only the specific searches required by the US Core CapabilityStatement, but make no statement about other searches that may be supported by the API.  Then you can objectively look at the finite set of searches and ask the question: \"do these searches realistically need more characters than what you can fit in a GET request?\" and maybe \"do the search parameters themselves constitute PHI?\"</p>",
        "id": 235010122,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1618686296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192576\">@Robert Scanlon</span>  my concern was that in order to comply with the base spec we would need to add this language and I agree what you proposed is a better solution.  But I have concerns that implementers are going to push back and say that they only support  POST.  But I imagine that pushback will be experienced by your team first.</p>",
        "id": 235013415,
        "sender_full_name": "Eric Haas",
        "timestamp": 1618689658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> -- understood, adding constraints on top of base FHIR (in this case, search by GET is required, not optional) needs to be done intentionally and with an understanding of why the flexibility in the base spec isn't needed for the use cases that an IG applies to.  And if you don't feel like you have that yet, then you shouldn't have that constraint.  I do think that you can make a good case that this constraint  is appropriate, but it may take some work to properly validate it, and if may feel safer to stick with what base FHIR says.</p>",
        "id": 235173486,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1618836332
    },
    {
        "content": "<p>The problem is that  I believe US Core very strongly implies that it already added the constraint \"GET is required, on top of whatever other requirements come from the base spec\" , and at this point stating that it doesn't will incur some costs.  But that is just my opinion, and \"very strongly implies\" doesn't mean anything from a conformance perspective, and even if it did you are still free to change it in v3.2.0.</p>",
        "id": 235175940,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1618837316
    },
    {
        "content": "<p>If you state that GET isn't a requirement, I do think that you should rewrite US Core so that search requirements within the Capability Statement are presented in terms of POST for clarity's sake.  It's a lot of changes, and a pain, because the POST syntax isn't nearly as concise.  But that's why we like GET, it is concise.  Also, do you need to add a constraint on top of the flexibility in search by post so that servers can't do something strange, like support POST but decide to ignore the body and only obey the querystring parameters?</p>",
        "id": 235177766,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1618838000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/234918480\">said</a>:</p>\n<blockquote>\n<p>I have had many discussions about the security fallacy... not helpful that it continues. (I am not saying it is 100% false, but rather that it is a configuration failure by incompetent security. Either protect your logs, or configure your auditing properly. I prefer you protect your logs).</p>\n</blockquote>\n<p>I'm sure that your system has correct controls on your logs. I'm sure mine does. But what about those I'm not control of, ie every router and sniffer between the client and me, treating their logs as might contain PHI. Do you think Starbucks treats their logs as protected?</p>",
        "id": 235177943,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1618838070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"335936\">Daniel Venton</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/235177943\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/234918480\">said</a>:</p>\n<blockquote>\n<p>I have had many discussions about the security fallacy... not helpful that it continues. (I am not saying it is 100% false, but rather that it is a configuration failure by incompetent security. Either protect your logs, or configure your auditing properly. I prefer you protect your logs).</p>\n</blockquote>\n<p>I'm sure that your system has correct controls on your logs. I'm sure mine does. But what about those I'm not control of, ie every router and sniffer between the client and me, treating their logs as might contain PHI. Do you think Starbucks treats their logs as protected?</p>\n</blockquote>\n<p>so you are communicating PHI without TLS?</p>",
        "id": 235178056,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618838117
    },
    {
        "content": "<p>Does the URL parameters get encrypted now? I thought the url was only in plain text. If the URL is encrypted what is everybody's problem with using GET in the 1st place?</p>",
        "id": 235178273,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1618838199
    },
    {
        "content": "<p>see what I mean by a security fallacy... The URL has always been encrypted using https (TLS). ALWAYS.</p>",
        "id": 235178346,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618838235
    },
    {
        "content": "<p>I learned something today, thanks!</p>",
        "id": 235178404,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1618838269
    },
    {
        "content": "<p>The whole TLS encryption point isn't a boolean \"security: yes\" thing.  You'll normally have TLS between the client and wherever you terminate the TLS connection, but you might terminate TLS near your front-door, and have non-TLS connections for some hops behind the front-end reverse proxy and the back-end FHIR server.  Depending on network architecture and what hops are involved with which parties, you may still have some areas that are not using TLS.  POST <em>can</em> add one layer to a defense-in-depth security posture.</p>",
        "id": 235183235,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1618840244
    },
    {
        "content": "<p>Operation has similar GET format, such as <code>ValueSet/$validate-code?url=xxx&amp;code=yyy&amp;system=zzz</code> Will this <code>SHALL POST SHOULD GET</code> thing apply to operation too?</p>",
        "id": 235187034,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1618841615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191764\">Cooper Thompson</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/235183235\">said</a>:</p>\n<blockquote>\n<p>The whole TLS encryption point isn't a boolean \"security: yes\" thing.  You'll normally have TLS between the client and wherever you terminate the TLS connection, but you might terminate TLS near your front-door, and have non-TLS connections for some hops behind the front-end reverse proxy and the back-end FHIR server.  Depending on network architecture and what hops are involved with which parties, you may still have some areas that are not using TLS.  POST <em>can</em> add one layer to a defense-in-depth security posture.</p>\n</blockquote>\n<p>I don't disagree... but my point still  stands. You have chosen to not encrypt and thus you don't seem to care about the PHI in the body either. So there is no difference here. GET vs POST are identical.</p>",
        "id": 235194493,
        "sender_full_name": "John Moehrke",
        "timestamp": 1618844350
    },
    {
        "content": "<p>I'm not sure why we're relitigating something that is decidedly not FHIR specific<br>\n<a href=\"https://security.stackexchange.com/questions/233795/are-url-parameters-of-get-and-post-requests-over-https-secure\">https://security.stackexchange.com/questions/233795/are-url-parameters-of-get-and-post-requests-over-https-secure</a><br>\n<a href=\"https://stackoverflow.com/questions/3063530/whats-the-difference-between-get-and-post-encryption\">https://stackoverflow.com/questions/3063530/whats-the-difference-between-get-and-post-encryption</a> <br>\n<a href=\"https://stackoverflow.com/questions/499591/are-https-urls-encrypted\">https://stackoverflow.com/questions/499591/are-https-urls-encrypted</a> </p>\n<p>HTTPS protects GET and POST equally against man in the middle. Only the FQDN is really exposed (due to unencrypted SNI pre TLS 1.3).</p>\n<p>Server logs have unencrypted URLs is the main point of contention. We need to think whether that's a real risk</p>",
        "id": 235346263,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1618926504
    },
    {
        "content": "<p>on this whole topic, is there a way to (in the capability statement) declare support for search as POST-only vs GET and POST?<br>\nwould that have to go in interaction.documentation?</p>",
        "id": 235383256,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1618939942
    },
    {
        "content": "<p>I will most likely put in documentation here for each SP defined in IG: </p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code><span class=\"nt\">searchParam</span><span class=\"p\">:</span>\n            <span class=\"nt\">definition</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">&gt;-</span>\n              <span class=\"no\">http://hl7.org/fhir/us/core/SearchParameter/us-core-allergyintolerance-clinical-status</span>\n            <span class=\"nt\">documentation</span><span class=\"p\">:</span>   <span class=\"c1\">#&lt;&lt;&lt;&lt;&lt;&lt; put it here &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n</code></pre></div>",
        "id": 235386887,
        "sender_full_name": "Eric Haas",
        "timestamp": 1618941461
    },
    {
        "content": "<p>if you declare across the board then here:  CapabilityStatement.rest.documentation</p>",
        "id": 235387943,
        "sender_full_name": "Eric Haas",
        "timestamp": 1618941820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237342\">@ryan moehrke</span> Not computably - at least not right now.  As documentation, it could show up a few places.</p>",
        "id": 235424725,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618956949
    },
    {
        "content": "<p>I have submitted a request to reevaluate this with a request to relax. To at the very least allow an Implementation Guide to constrain out POST. Better to eliminate this misguided requirement and replace it with a design consideration.  <a href=\"https://jira.hl7.org/browse/FHIR-31943\">https://jira.hl7.org/browse/FHIR-31943</a></p>",
        "id": 235522859,
        "sender_full_name": "John Moehrke",
        "timestamp": 1619016530
    },
    {
        "content": "<p>add to the fallacy that POST is better than GET.... that POST allows exactly the same encoding of the parameters on the URL... Thus without further refinement to forbid URL parameters, there exactly the same concern with POST as GET.</p>\n<div class=\"codehilite\"><pre><span></span><code>This has exactly the same semantics as the equivalent GET command. Note that in the POST variant, parameters may appear in both the URL and the body. Parameters have the same meaning in either place. Since parameters can repeat, putting them in both places is the same as repeating them (which is valid for some parameters and not for others).\n</code></pre></div>",
        "id": 235535196,
        "sender_full_name": "John Moehrke",
        "timestamp": 1619020308
    },
    {
        "content": "<p>Once again, POST is required to work around URL size limitations. You cannot predict or force a limit on the URL size, since the base is variable. All FHIR servers support search over POST. There is no value in IGs being able to constrain out POST searches.</p>",
        "id": 235537183,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1619021084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192685\">@Vassil Peytchev</span> that only works if you require POST search parameters in the body... our spec allows them on the URL.</p>",
        "id": 235538466,
        "sender_full_name": "John Moehrke",
        "timestamp": 1619021555
    },
    {
        "content": "<p>I am not at all opposed to making a strong statement about considerations for size.. that is a very legitimate need.</p>",
        "id": 235538546,
        "sender_full_name": "John Moehrke",
        "timestamp": 1619021591
    },
    {
        "content": "<p>Once a SHALL statement is normative, I don't know that we have a mechanism that would allow that to be relaxed - and we'd certainly need a compelling reason to try to do that.  Right now, all I've heard is \"some people might maybe have issues with it\" rather than \"this is a serious issue here, here and here\".</p>",
        "id": 235542023,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1619022944
    },
    {
        "content": "<p>relaxing a requirement is not a breaking change. right? (Especially one that few knew about)<br>\nI have stated my case in the jira ticket <a href=\"http://jira.hl7.org/browse/FHIR-31943\">FHIR-31943</a><br>\nI have offered many potential paths.<br>\nOthers are encouraged to weight in</p>",
        "id": 235544366,
        "sender_full_name": "John Moehrke",
        "timestamp": 1619023914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> : If I understand well, it is not possible to search with extension in HAPI now (I'm sorry if wrong topic)?</p>",
        "id": 236454186,
        "sender_full_name": "Jame Dang",
        "timestamp": 1619589172
    },
    {
        "content": "<p>HAPI does support search by POST if that's what you mean.</p>",
        "id": 236500772,
        "sender_full_name": "James Agnew",
        "timestamp": 1619614239
    },
    {
        "content": "<p>You would have to define a new SearchParameter instance to allow search by the desired extension.  However, so long as you do that and register it with the HAPI server, HAPI will support the search.</p>",
        "id": 236515370,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1619619805
    },
    {
        "content": "<p>with a POST based search. what is the Content-Type header to hold? Is <code>application/x-www-form-urlencoded</code>?  This is defined as the encoding, but is not clear it is defined to be the content-type header value</p>",
        "id": 239154932,
        "sender_full_name": "John Moehrke",
        "timestamp": 1621283345
    },
    {
        "content": "<p>Sorry to bring this topic back. The resolution for <a href=\"http://jira.hl7.org/browse/FHIR-18551\">FHIR-18551</a> is not aligned with what we discussed here.. Quote the resolution</p>\n<blockquote>\n<p>In section 3.1.1.2, right in front of the paragraph starting \"The server determines which of the set of resources...\", will add a new paragraph stating:</p>\n<p>Conformant FHIR servers SHALL support both the GET and POST-based mechanism for all FHIR queries they support.</p>\n</blockquote>\n<p>Since this is an old ticket which was resolved two years ago, I am wondering if the resolution is still correct based on the discussion here that POST search is mandatory and GET search is optional.<br>\n<span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 240727413,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1622331011
    },
    {
        "content": "<p>I'm a bit confused about how we thought we could make GET mandatory given that R4 was already normative?</p>",
        "id": 240731625,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1622338402
    },
    {
        "content": "<p>I think, the ticket was based on the assumption that GET was already mandatory by FHIR spec. The resolution was to add POST as mandatory also. It is the same misunderstanding at the beginning of this thread.</p>",
        "id": 240733122,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1622341022
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 240733251,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1622341236
    },
    {
        "content": "<p>I don't think we can make GET mandatory - too many organizations have policies (sensible or not) that prohibit it.</p>",
        "id": 240733812,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1622342325
    },
    {
        "content": "<p>That is my question about this resolution. Should we reopen it?</p>",
        "id": 240734169,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1622343031
    },
    {
        "content": "<p>I think so.  Can you add it to our agenda?</p>",
        "id": 240736916,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1622347752
    },
    {
        "content": "<p>done</p>",
        "id": 240757444,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1622383729
    },
    {
        "content": "<p>Neither should be mandatory in FHIR core.</p>",
        "id": 240936745,
        "sender_full_name": "John Moehrke",
        "timestamp": 1622552109
    },
    {
        "content": "<p>POST is mandatory.  It's a SHALL that's normative.</p>",
        "id": 240944851,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1622555606
    },
    {
        "content": "<p>(Sorry-NotSorry for resurrecting this thread!)</p>\n<p>When you use POST for a search, and you return a bundle that must have a the self-link (to communicate back the parameters used in the search)...can you expose all of the query parameters as a URL even though it was received as body using a POST command? Are users expecting that a self-link is executable?<br>\nThanks</p>\n<p><span class=\"user-mention\" data-user-id=\"217847\">@Mona O</span> , <span class=\"user-mention\" data-user-id=\"270256\">@Bapi Behera</span></p>",
        "id": 250061440,
        "sender_full_name": "Kate Dech",
        "timestamp": 1629415864
    },
    {
        "content": "<p>That's actually a really good question.  I'm assuming the intent is that the 'self' link is always expressed as a GET, regardless of how the search is invoked.  However, we should definitely discuss that and, whatever the answer is, make it explicit in the specification.  <span class=\"user-mention\" data-user-id=\"217850\">@Kate Dech</span>, can you submit a change request on this issue?</p>",
        "id": 250074332,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629430422
    },
    {
        "content": "<p>(agreed, good question! Similar question applies to next/prev links, especially to the extent that they're repeating params rather than totally opaque structures.)</p>",
        "id": 250075205,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629431365
    },
    {
        "content": "<p>I feel like that's the only option available, put the query params in the URL. We had the same consideration when trying to define a gRPC FHIR API where the query goes in its own field - the client is going to have to decipher the self/next/etc. links and move the query params somewhere else to formulate its next request.</p>",
        "id": 250075667,
        "sender_full_name": "Paul Church",
        "timestamp": 1629431883
    },
    {
        "content": "<p>I think we should clarify that explicitly, but also consider whether there's some different path we could be considering. It seems like a burden on the client to expect that they can decipher the URL when we haven't defined exactly what it contains.</p>",
        "id": 250075826,
        "sender_full_name": "Paul Church",
        "timestamp": 1629432017
    },
    {
        "content": "<p>With next/prev, we also need to clarify whether - if the next/prev are expressed as GET, is the client allowed to invoke them with POST - and must the server accept that.</p>",
        "id": 250077484,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629434193
    },
    {
        "content": "<p>is allowed to invoke them as a POST with the query parameters, or as a POST with the parameters in the body, or both?</p>",
        "id": 250077649,
        "sender_full_name": "Paul Church",
        "timestamp": 1629434459
    },
    {
        "content": "<p>no need to decipher, simply to convert to a POST. Though for most servers, there's no reason not to do a get (unfortunately, though, that's not something that can be relied on)</p>",
        "id": 250078553,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629435793
    },
    {
        "content": "<p>Given that one of the reasons for POST search is the size limit on URLs, it seems that we should at least mention that the URLs in the response Bundle may have to be converted to POST with parameters in the body. Unless, as Paul mentioned, we can come up with an alternative approach.</p>",
        "id": 250111074,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1629462656
    },
    {
        "content": "<p>sigh... and all this because of a fallacy about POST being more secure than GET.</p>",
        "id": 250111376,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629462857
    },
    {
        "content": "<blockquote>\n<p>size limit on URLs</p>\n</blockquote>\n<ul>\n<li>they do exist.</li>\n</ul>",
        "id": 250111601,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1629462991
    },
    {
        "content": "<p>I did not disagree with the size limit. I disagree with the \"POST being more secure than GET\"  --- I was very specific</p>",
        "id": 250111785,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629463112
    },
    {
        "content": "<p>Size limits on URLs shouldn't be an issue for next/previous, so the only reason for <em>those</em> being pushed into POST would be organizational policy.</p>",
        "id": 250116396,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629465695
    },
    {
        "content": "<blockquote>\n<p>no need to decipher, simply to convert to a POST. Though for most servers, there's no reason not to do a get (unfortunately, though, that's not something that can be relied on)</p>\n</blockquote>\n<p>As Paul points out above, we need to specify what convert means. A post with query parameters is a pretty unusual construct, but it's technically valid. Is that what we mean? Or do we mean the clients are parts the query parameters and turn them into form parameters when posting?</p>",
        "id": 250117930,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629466519
    },
    {
        "content": "<p>or just using POST with URL parameters... effectively not using the POST body... which is allowed (note this has the same \"security\" problem that GET is \"said to have\")</p>",
        "id": 250118258,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629466679
    },
    {
        "content": "<p>(And to Vassil's point,  it faces the same URL length limitations that GET is said to have.)</p>",
        "id": 250118478,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629466793
    },
    {
        "content": "<p>can we just stop this charade?  POST has important benefits (size being one).</p>",
        "id": 250118538,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629466805
    },
    {
        "content": "<p>Sorry what is the charade?</p>",
        "id": 250118577,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629466825
    },
    {
        "content": "<p>Are you saying that fhir should drop support for either get or post?</p>",
        "id": 250118620,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629466838
    },
    {
        "content": "<p>The charade is that POST is more secure than GET, and this is why POST is mandated and GET is optional (for searches).</p>",
        "id": 250118725,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629466894
    },
    {
        "content": "<p>POST is definitely needed</p>",
        "id": 250118769,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629466919
    },
    {
        "content": "<p>And the question on the thread is about how to support it best. I don't see a charade.</p>",
        "id": 250118843,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629466941
    },
    {
        "content": "<p>Not the original thread</p>",
        "id": 250118875,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629466957
    },
    {
        "content": "<p>I started this when I realized that FHIR core MANDATES POST and indicates GET is optional (for searches).</p>",
        "id": 250118975,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629466995
    },
    {
        "content": "<p>that mandate is just a bit too strong. If GET is not pushed to the background, then there would not be questions like the new one on Bundle encoding and next/prev</p>",
        "id": 250119125,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629467060
    },
    {
        "content": "<p>Sorry, I've just been talking about the discussion that started here yesterday, about how to populate things like self links and next links in a search responsible; the earlier discussion about mandatory support for GET/POST based search was already brought to FHIR Infrastructure, according to the notes above.</p>",
        "id": 250119163,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629467081
    },
    {
        "content": "<p>and I still think we will continue to come up against issues like this.. all over a silly misguided policy based on a fallacy.</p>",
        "id": 250119259,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629467138
    },
    {
        "content": "<p>yes this self/next/prev does need to be addressed related to POST.. yes, i understand that is regardless of the mandate/optionality.</p>",
        "id": 250119378,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629467192
    },
    {
        "content": "<p>Let's throw the difference between GET and POST when it comes to default caching into the mix too! :)</p>",
        "id": 250119638,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1629467339
    },
    {
        "content": "<p>note, I am also interested in this encoding question because I have the same problem when recording a search in an AuditEvent</p>",
        "id": 250119675,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629467362
    },
    {
        "content": "<p>my only point is that FHIR core should have never said one way or the other... the statement of preference should be an IG scope.</p>",
        "id": 250119852,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629467444
    },
    {
        "content": "<p>FHIR mandates POST because everything can be done with POST and only some things can be done with GET.  It was also mandated because some organizations mandate POST (for good reason or not doesn't matter) but we couldn't find any organizations that mandate GET.  By requiring everyone support POST, we maximize interoperability.  It wasn't about fostering false beliefs around security.</p>",
        "id": 250120890,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629467957
    },
    {
        "content": "<p>The problem I see if you allow individual IGs to specify which operations shall be supported.... Company has to comply with 2 different IGs. IG A says SHALL GET and SHALL NOT POST and IG B says SHALL NOT GET and SHALL POST. What does Company do, stand up 2 different servers to handle different IGs? What if an IG says SHALL support GET but a governmental authority prohibits it?</p>\n<p>What if Base FHIR said, \"All compliant FHIR servers SHALL support both GET and POST for searches, unless local regulations prohibit their use. Each server SHALL indicate via their /metadata which operations are supported. (perhaps metadata already does?)\" By having the search operations supported in the metadata, at least a client would know how to communicate with the server.</p>",
        "id": 250120897,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1629467960
    },
    {
        "content": "<p>Can IG nullify a SHALL in FHIR base spec (Server SHALL support POST search)? I doubt about that.</p>\n<blockquote>\n<p>All compliant FHIR servers SHALL support both GET and POST for searches, unless local regulations prohibit their use. </p>\n</blockquote>\n<p>That basically change the SHALL to a SHOULD because anyone can use that \"unless\" part as an excuse for not supporting one of them</p>",
        "id": 250130437,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1629472183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> : <a href=\"http://jira.hl7.org/browse/FHIR-33220\">FHIR-33220</a> has been created for this. </p>\n<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> - we didn't have the same issue with the pagination because the link didn't have to be understood to be executable. We  encrypted the parameters in the page links. As a server receiving it, we understood what they include. But the self link was more problematic because we are trying to communicate back the parameters actually used.</p>",
        "id": 250131011,
        "sender_full_name": "Kate Dech",
        "timestamp": 1629472438
    },
    {
        "content": "<blockquote>\n<p>we didn't have the same issue with the pagination because the link didn't have to be understood to be [introspectable by clients]</p>\n</blockquote>\n<p>That's fair; it still seems worth documenting at least if clients are expected to follow next/prev links via GET even if the original search was via POST.</p>",
        "id": 250131588,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629472678
    },
    {
        "content": "<p>\"expected to follow next/prev links via GET\" or \"allowed to choose whether to follow next/prev links via GET or POST\"?</p>",
        "id": 250131918,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1629472824
    },
    {
        "content": "<p>Right, that's a critical question and we need to be clear.</p>",
        "id": 250131943,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629472844
    },
    {
        "content": "<p>or is there a way the server can indicate that POST should be used</p>",
        "id": 250131955,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629472849
    },
    {
        "content": "<p>If there's a choice: </p>\n<ol>\n<li>does it belong to the server or to the client?</li>\n<li>If it belongs to the server, how does the client know?</li>\n<li>How does a client turn a \"next page\" link into a POST? (presumably we want body params here, but we need to say)</li>\n</ol>",
        "id": 250132045,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629472902
    },
    {
        "content": "<p>I've updated <a href=\"https://jira.hl7.org/browse/FHIR-33220?focusedCommentId=190079&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-190079\">my comment on the Jira issue</a> to capture this</p>",
        "id": 250132192,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629472964
    },
    {
        "content": "<p>on next/prev links</p>\n<blockquote>\n<p>presumably we want body params here, but we need to say</p>\n</blockquote>\n<p>I actually didn't mean that. What I had in mind is that if I executed my original search using <code>method</code>, I could still use <code>method</code> for next/prev links. The server must ensure that the next/prev links are not too long  for its HTTP server to handle.</p>\n<p>For <code>self</code> links, I think we need to note that the client must be aware of the possibility that the <code>self</code> url may be too long for the server to process, and therefore the client must be able to convert it into POST with params.</p>\n<p>The open question for me is whether there is a way to actually represent the <code>self</code> link as a POST link with parameters.</p>",
        "id": 250133873,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1629473699
    },
    {
        "content": "<p>I have to wonder why the client, which presumably issued the initial request, would have decipher the self link in order to re-issue the request?</p>",
        "id": 250137459,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1629475291
    },
    {
        "content": "<blockquote>\n<p>I have to wonder why the client, which presumably issued the initial request, would have decipher the self link in order to re-issue the request?</p>\n</blockquote>\n<p>The specific case we are pondering is when the client issues a POST search with the search parameters in the body. The <code>self</code> link cannot represent that, as it is just a URL.</p>",
        "id": 250139032,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1629476022
    },
    {
        "content": "<blockquote>\n<p>I have to wonder why the client, which presumably issued the initial request, would have decipher the self link in order to re-issue the request?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"335936\">@Daniel Venton</span> it's not so much that clients need to re-issue, but this is how clients can <em>understand</em> how the server processed their initial request (e.g., if the server had to ignore some params it didn't understand, the server omits these from the self link, to tell the client \"here's the search I actually did for you\")</p>",
        "id": 250152978,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629483001
    },
    {
        "content": "<p>From <a href=\"http://build.fhir.org/search.html#errors\">http://build.fhir.org/search.html#errors</a></p>\n<blockquote>\n<p>The client can determine what parameters the server used by examining the self link in the return (see below)</p>\n</blockquote>",
        "id": 250153094,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629483039
    },
    {
        "content": "<p>Not <em>loving</em> the idea, but we could define an extension with a <code>valueParameters</code> for released versions that has the processed key-value pairs in it.  That would allow servers to at least return proper context for values that are over their URL limit.</p>",
        "id": 250169942,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1629492039
    },
    {
        "content": "<p>er, <code>valueReference(Parameters[contained])</code>? That's tough.</p>",
        "id": 250170300,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629492274
    },
    {
        "content": "<p>I think we've strayed off topic. The idea was about POST and could a client deconstruct the self link and be able to know how to do a POST vs a GET. I understand that a client might want to know which values it specified originally were ignored (or modified, _count). But I still don't see a reason why a client would have to deconstruct a self link and re-execute as POST or GET. Yes the client may have done a POST and the self link might read like a GET that doesn't mean it's going to be executed as a GET or deconstructed and reformed into a POST (if it happens to be too long to be executed as a GET).</p>",
        "id": 250170876,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1629492637
    },
    {
        "content": "<p>I think the current point is that it might be too big for the datatype of the self element</p>",
        "id": 250172157,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629493352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191315\">Josh Mandel</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/250170300\">said</a>:</p>\n<blockquote>\n<p>er, <code>valueReference(Parameters[contained])</code>? That's tough.</p>\n</blockquote>\n<p>One day I'm going to add <code>Parameters</code> as an option, so that I'll be right when I <em>repeatedly</em> try to do this.  ;-)</p>\n<p>In reality, I'd probably change it to something like a <code>0..*</code> string that has a URL-Encoded KVP then.</p>",
        "id": 250182437,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1629500867
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/http.html#paging\">http://build.fhir.org/http.html#paging</a> says:</p>\n<blockquote>\n<p>The links are opaque to the client, have no dictated structure, and only the server understands them.</p>\n</blockquote>\n<blockquote>\n<p>In the case of a search, the initial request may be made via a POST, but the follow up page requests will be made via GET requests. However servers SHOULD allow for a client to convert the follow up requests to be made via a POST.</p>\n</blockquote>\n<p>That means, it should be possible to issue a GET request using the opaque next link without any modification. If so the link has to satisfy the following requirements:</p>\n<ol>\n<li>don't be to long to work with any HTTP client and any intermediate HTTP server (which isn't in control of the FHIR server)</li>\n<li>don't expose sensitive information</li>\n<li>be also requestable with POST (but without modification)</li>\n<li>be cache friendly (as a bonus and good HTTP citizen)</li>\n</ol>\n<p><span class=\"user-mention\" data-user-id=\"217850\">@Kate Dech</span> You said, that you encrypt the query params. That would satisfy 2. but not necessarily 1. </p>\n<p>To satisfy 1. in all cases, I have no better idea as to implement it in a stateful way. That would mean that every search creates state which might complicate implementation and hurt performance.</p>\n<p>Has someone an idea that will satisfy 1. but works without creating new state for every search?</p>",
        "id": 250763493,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1629980907
    },
    {
        "content": "<blockquote>\n<p>Has someone an idea that will satisfy 1. but works without creating new state for every search?</p>\n</blockquote>\n<p>Wouldn't you want new state for every multi-page search for performance reasons?</p>",
        "id": 250769017,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1629983447
    },
    {
        "content": "<blockquote>\n<ol start=\"2\">\n<li>don't expose sensitive information</li>\n</ol>\n</blockquote>\n<p>No, sensitive information in GET URL are ok</p>",
        "id": 250771123,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1629984356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"192685\">Vassil Peytchev</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/250769017\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Has someone an idea that will satisfy 1. but works without creating new state for every search?</p>\n</blockquote>\n<p>Wouldn't you want new state for every multi-page search for performance reasons?</p>\n</blockquote>\n<p>In my implementation, I don't need to create state for multi-page searches. My database exposes explicit snapshots to my application, so all I need to track in order to ensure consistent paging is the identifier of the database snapshot. I put this identifier in the URL. So if you will, that snapshot identifier refers to state, but that state isn't create because of the search, it's created after every transaction (write). </p>\n<p>So just storing the search params, because they don't fit in the URL, is additional state for me.</p>",
        "id": 250774853,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1629985859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191912\">Michele Mottini</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/250771123\">said</a>:</p>\n<blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>don't expose sensitive information</li>\n</ol>\n</blockquote>\n<p>No, sensitive information in GET URL are ok</p>\n</blockquote>\n<p>I thought that is one of the reasons for using POST instead of GET. Because URL's are usually logged but request bodies not.</p>",
        "id": 250774953,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1629985905
    },
    {
        "content": "<p>usually. Any intermediary can log the body.</p>",
        "id": 250775033,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629985927
    },
    {
        "content": "<p>you don't secure stuff for what 'usually' happens</p>",
        "id": 250775054,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629985939
    },
    {
        "content": "<blockquote>\n<p>storing the search params, because they don't fit in the URL</p>\n</blockquote>\n<p>This feels like a fictional concern to me. What FHIR search would ever be longer than 1-2k?</p>",
        "id": 250775143,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629985971
    },
    {
        "content": "<p>and if it is... reject it</p>",
        "id": 250775182,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629985984
    },
    {
        "content": "<p>So what is the reason to use POST? What makes POST more 'secure'?</p>",
        "id": 250775190,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1629985987
    },
    {
        "content": "<p>POST is not more secure. As far as we are concerned.</p>",
        "id": 250775236,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629986007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179166-implementers/topic/Search.20via.20POST/near/250775143\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>storing the search params, because they don't fit in the URL</p>\n</blockquote>\n<p>This feels like a fictional concern to me. What FHIR search would ever be longer than 1-2k?</p>\n</blockquote>\n<p>We have the use case of expanded, say SNOMED concepts into a big or-search, because our FHIR server doesn't support modifiers like :below or :in.</p>",
        "id": 250775500,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1629986106
    },
    {
        "content": "<p>hah well, that could get long. So you'll have to make some decision then</p>",
        "id": 250775551,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629986129
    },
    {
        "content": "<p>\"Opaque\" means \"no standard way to parse\", not \"guaranteed to not contain sensitive information\".</p>",
        "id": 250786821,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629990193
    },
    {
        "content": "<p>POST is not more secure, but some implementers have policies that presume it is (because logs more typically capture URLs than POST bodies).</p>",
        "id": 250786982,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629990251
    },
    {
        "content": "<p>But does that mean that implementers have to support the case where clients strip the query params of a next link and POST'in them to an endpoint of the remaining URL? Or does \"opaque\" count for the whole URL including the query params? If so and if a implementation ensures not to disclose any actual initial query params in the URL of the next link, than a GET would be safe.</p>",
        "id": 250795982,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1629993653
    },
    {
        "content": "<p>Ideally, previous/next links would always be accessed by GET.  But I can imagine some prev/next links repeating all of the search parameters and just adding on an offset or something (not best practice, due to problems with data changing between queries, but not prohibited) and then some security person freaking out because there are names, identifiers or other PHI in a URL and saying that next/prev links need to be traversed as POSTs too.  And therefore, it's something we should probably address in the specification.</p>",
        "id": 250801684,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629995809
    },
    {
        "content": "<p>We also support multi-ID searches to efficiently read resources in batches. With resource IDs maxing out at 64 characters, you can hit 1k characters with only 16 IDs in your search. For mechanisms like this, we pretty much NEED to use POST due to URL length limits. The self links returned by these bundles will not be accessible using GET for the same reason.</p>",
        "id": 256245069,
        "sender_full_name": "Brian Forbis",
        "timestamp": 1633440551
    },
    {
        "content": "<p>In SearchWithPost if we implement parameters only in the URI or only in the body, is that conformant to the specifications or should the parameters be in both URI and the body? <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 260889663,
        "sender_full_name": "Sridhar",
        "timestamp": 1636508985
    },
    {
        "content": "<p>A given parameter SHOULD only appear in one place.  If it appears in both places, then it's the same as if you'd repeated the parameter multiple times on the URL or in the body.  However, it's possible for some parameters to be in the URL and others to be in the body.</p>",
        "id": 260914990,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1636512246
    },
    {
        "content": "<p>Does that mean that servers are required to support such mix of URL and body parameters?</p>",
        "id": 260944142,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1636517904
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 260946601,
        "sender_full_name": "Sridhar",
        "timestamp": 1636520977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192685\">@Vassil Peytchev</span> we've never said anything about that, but I think that a mix is inherent in the way HTTP works, and therefore expected. I'm interested to hear if you know of anything from elsewhere about this</p>",
        "id": 260962129,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1636535428
    },
    {
        "content": "<p>We do not support parameters in the URL for POST searches, and I am actually surprised that such a thing is done / expected- seems super-confusing that you can mix</p>",
        "id": 261067704,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1636585019
    },
    {
        "content": "<p>We support either body or URL parameters, but not mixed. I am curious if there are any clients that build POST searches in a mixed way.</p>",
        "id": 261068642,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1636585343
    },
    {
        "content": "<p>I support it because it comes naturally to people building form based solutions - the action attribute includes some parameters, the method is POST, and there's form variables. Bingo, you have mixed parameters</p>",
        "id": 261074218,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1636588855
    },
    {
        "content": "<p>What happens if the form in the POST body contains _filter?</p>",
        "id": 261117494,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636627549
    }
]