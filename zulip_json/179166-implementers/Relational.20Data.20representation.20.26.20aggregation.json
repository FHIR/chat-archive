[
    {
        "content": "<p>If I store Observation like vitals in a relational database i.e. a <strong>Vitals</strong> table with columns <br>\nlike <em>systolic</em>, <em>diastolic</em>, <em>o2_saturation</em>, <em>head_circumference</em>, <em>respiratory_rate</em> etc with <br>\ntimestamps columns (<em>created_at</em>, <em>updated_at</em>) and foreign keys (<em>patient_id</em>, <em>hospital_id</em>)</p>\n<p>And I receive one <strong>Observation</strong> resource per vital sign i.e. one reading (systolic only) <br>\nin one Observation resource and one reading (oxygen saturation only) in another Observation and so on.</p>\n<p>Then I am storing possibly one attribute per record say systolic in one record, <br>\ndiastolic in another record, respiratory_rate in another record and <br>\noxygen saturation in another record. So I will have total of 4 records. Like this</p>\n<table>\n<thead>\n<tr>\n<th>Diastolic</th>\n<th align=\"center\">Systolic</th>\n<th align=\"right\">O2_Saturation</th>\n<th align=\"right\">Respiratory_Rate</th>\n<th align=\"right\">Created_At</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>90</td>\n<td align=\"center\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n<td align=\"right\">2019-11-18 17:56:25.210201</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">132</td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n<td align=\"right\">2019-11-18 17:56:55.220904</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"right\"></td>\n<td align=\"right\">39</td>\n<td align=\"right\">2019-11-18 17:57:05.230107</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"right\">71</td>\n<td align=\"right\"></td>\n<td align=\"right\">2019-11-18 17:58:45.240203</td>\n</tr>\n</tbody>\n</table>\n<p>What is the best way then to aggregate these 4 records in to \"1 record\" showing <br>\nlatest vitals, like this</p>\n<table>\n<thead>\n<tr>\n<th>Diastolic</th>\n<th align=\"center\">Systolic</th>\n<th align=\"right\">O2_Saturation</th>\n<th align=\"right\">Respiratory_Rate</th>\n<th align=\"right\">Created_At</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>90</td>\n<td align=\"center\">132</td>\n<td align=\"right\">71</td>\n<td align=\"right\">39</td>\n<td align=\"right\">2019-11-18 17:58:45.240203</td>\n</tr>\n</tbody>\n</table>",
        "id": 181049703,
        "sender_full_name": "dsh",
        "timestamp": 1574106761
    },
    {
        "content": "<p>The above ^ is obviously simplified for purposes of asking this question, but in real world there will be more columns and bigger spread of these fragments of data that would need aggregation.</p>",
        "id": 181049719,
        "sender_full_name": "dsh",
        "timestamp": 1574106779
    },
    {
        "content": "<p>Or is there a better way to store and retrieve data in Observation resource</p>",
        "id": 181049818,
        "sender_full_name": "dsh",
        "timestamp": 1574106856
    },
    {
        "content": "<p>well, that depends. why are you aggregating, and what are you doing about the differing time stamps (and other metadata?)</p>",
        "id": 181049823,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574106861
    },
    {
        "content": "<blockquote>\n<p>well, that depends. why are you aggregating, and what are you doing about the differing time stamps (and other metadata?)</p>\n</blockquote>\n<p>I am aggregating the data because the end user (clinicians) want to view the latest Vitals</p>",
        "id": 181049883,
        "sender_full_name": "dsh",
        "timestamp": 1574106915
    },
    {
        "content": "<p>The different timestamps per field/column is another concern to represent in the view</p>",
        "id": 181049911,
        "sender_full_name": "dsh",
        "timestamp": 1574106940
    },
    {
        "content": "<p>it seems to me to be bad data base management to collapse these things into a sparsely populated or loosely tracked table with time uncertainties. I'd have a single table with code/value... mostly that's what we all do (but by no means all of us)</p>",
        "id": 181050041,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574107035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  You are right about bad schema here. So in your opinion it will be better to represent Vitals table as </p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th align=\"center\">Value</th>\n<th align=\"right\">Created_At</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8383-53</td>\n<td align=\"center\">132</td>\n<td align=\"right\">2019-11-18 17:58:45.240203</td>\n</tr>\n<tr>\n<td>8112-21</td>\n<td align=\"center\">90</td>\n<td align=\"right\">2019-11-18 17:56:45.240203</td>\n</tr>\n</tbody>\n</table>",
        "id": 181050549,
        "sender_full_name": "dsh",
        "timestamp": 1574107356
    },
    {
        "content": "<blockquote>\n<p>I'd have a single table with code/value... mostly that's what we all do (but by no means all of us)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> How would you convert these code/value columns into humanly understandable format like</p>\n<table>\n<thead>\n<tr>\n<th>Diastolic</th>\n<th align=\"center\">Systolic</th>\n<th align=\"right\">O2_Saturation</th>\n<th align=\"right\">Respiratory_Rate</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>90</td>\n<td align=\"center\">132</td>\n<td align=\"right\">71</td>\n<td align=\"right\">39</td>\n</tr>\n</tbody>\n</table>",
        "id": 181051321,
        "sender_full_name": "dsh",
        "timestamp": 1574107944
    },
    {
        "content": "<p>Any pointers will be much appreciated</p>",
        "id": 181051357,
        "sender_full_name": "dsh",
        "timestamp": 1574107968
    },
    {
        "content": "<p>code/value table with a important fields code, date/time, value, units</p>",
        "id": 181051497,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574108069
    },
    {
        "content": "<p>Yes I agree units and date/time are important too</p>\n<p>Though I am having hard time imagining  an simple transposition of these records into a different Object representation like</p>\n<table>\n<thead>\n<tr>\n<th>Diastolic</th>\n<th align=\"center\">Systolic</th>\n<th align=\"right\">O2_Saturation</th>\n<th align=\"right\">Respiratory_Rate</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>90</td>\n<td align=\"center\">132</td>\n<td align=\"right\">71</td>\n<td align=\"right\">39</td>\n</tr>\n</tbody>\n</table>\n<p>The Object boundary being represented by the last attribute which in real world may be the 10th or 15th attribute to fill all those attributes at least 15 records will be read</p>",
        "id": 181051997,
        "sender_full_name": "dsh",
        "timestamp": 1574108477
    },
    {
        "content": "<p>right.</p>",
        "id": 181052080,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574108536
    },
    {
        "content": "<p>Most systems just grab the most recent values for each and display them or group them based on time proximity over time.  The data transmission layers and storage layers pretty much all do one record per measurement and displays such as yours are pretty common.  FHIR <em>does</em> allow 'grouping' Observations that can link a bunch of vitals (or other Observations) that were conducted more or less at the same time, so that could form a foundation for what you're trying to do - but the end result would be yet one more Observation type in the collection of Observations you bring back.  (It would however make it easier to figure out what to group together - provided the source system does the grouping for you.)</p>",
        "id": 181060798,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1574114152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> Thanks. Is there any reference that I can read up on \"grouping\" Observations? Also, are other resources groupable too?</p>\n<p>Grouping by time proximity is a hit or a miss, depending on length of time. If the length of time is big then too many records are read. If length of time is too small than query has to be retried with a larger time interval. Seems like a common pattern to me, but is there any kind of utility built around this pattern.</p>",
        "id": 181061467,
        "sender_full_name": "dsh",
        "timestamp": 1574114671
    },
    {
        "content": "<p>Observation has a hasMember relationship.  A few other resources have an equivalent mechanism (e.g. Encounter.partOf).  There's a brief discussion here: <a href=\"http://hl7.org/fhir/observation.html#obsgrouping\" target=\"_blank\" title=\"http://hl7.org/fhir/observation.html#obsgrouping\">http://hl7.org/fhir/observation.html#obsgrouping</a></p>",
        "id": 181061576,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1574114785
    },
    {
        "content": "<p>The observation you'd want to group would typically have the same <code>effective[x]</code> - so group by the corresponding column</p>",
        "id": 181064842,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1574117432
    },
    {
        "content": "<p>The challenge is that they often won't have <em>exactly</em> the same effective[x].  So some logic is needed to realize that if there were three done only a couple of minutes apart, you probably want either the latest or the average.  Whereas if they were further apart, they might deserve a separate row.</p>",
        "id": 181065404,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1574117969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> You captured it right but that's not the only challenge. For me (and I am sure for many) the challenge is what range of time to use to query the latest values e.g. last 1 or 2 hours or more ??? coz longer the patient's stay in hospital longer can be range for certain observations. As an example in Vital-Signs category body height and weight may not be observed more than once for total length of patient's stay, but heart rate / blood pressure may be observed every minute. So to fetch the latest Vitals comprising of attributes measured at different times (hours or days apart) e.g. body weight and say blood pressure .... there isn't a generic SQL query one can write.</p>",
        "id": 181139534,
        "sender_full_name": "dsh",
        "timestamp": 1574187768
    },
    {
        "content": "<p>Further complexity in SQL query arises when you want to limit the number of rows fetched, say the limit is 1 then (using the above use case) the Vitals record fetched will only have blood pressure and heart rate readings but not height and body weight readings.</p>",
        "id": 181139654,
        "sender_full_name": "dsh",
        "timestamp": 1574187853
    },
    {
        "content": "<p>Take a look at the $lastn operation</p>",
        "id": 181140020,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1574188111
    },
    {
        "content": "<p>It let's you grab the most recent \"N\" measurements of all of the specified observation types</p>",
        "id": 181140043,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1574188130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> Please correct me if I am wrong but Isn't <code>$lastn</code> operation FHIR server implementation dependent?  plus I don't have FHIR server of any kind my application receives FHIR resources (from Mirth HL7v2.3 messages transformed to FHIR) and stores the original JSON blob plus stores all codes and values in relational database as below (table structure simplified here)</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th align=\"center\">Value</th>\n<th align=\"right\">Created_At</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8383-53</td>\n<td align=\"center\">132</td>\n<td align=\"right\">2019-11-18 17:58:45.240203</td>\n</tr>\n<tr>\n<td>8112-21</td>\n<td align=\"center\">90</td>\n<td align=\"right\">2019-11-18 17:51:45.240203</td>\n</tr>\n</tbody>\n</table>\n<p>So the question is really how to implement <code>$lastn</code> in absence of FHIR server in SQL queries.</p>",
        "id": 181140675,
        "sender_full_name": "dsh",
        "timestamp": 1574188509
    },
    {
        "content": "<p>You may need separate searches for each code.  Not sure if there's a better way to write the SQL.</p>",
        "id": 181141042,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1574188721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  Ok. How does FHIR spec implementation guide suggest <code>$lastn</code> be implemented if not in SQL then what's the assumed data/storage model?</p>",
        "id": 181141246,
        "sender_full_name": "dsh",
        "timestamp": 1574188863
    },
    {
        "content": "<p>How is up to the implementer.  FHIR doesn't define what the persistence model is, nor the optimum way of using different query approaches.</p>",
        "id": 181143482,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1574190236
    },
    {
        "content": "<p>Right. But this seems to be a very common problem and query pattern and I am wondering if an optimized solution like stored procedure or database built in function/extension already exsits</p>",
        "id": 181144073,
        "sender_full_name": "dsh",
        "timestamp": 1574190570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 181146303,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1574191933
    },
    {
        "content": "<p>I don't know how to answer that because I implemented $lastN using an SQL server.</p>",
        "id": 181179814,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574225557
    },
    {
        "content": "<p>What I did was query of observations by  codes and  data range. The date range would depend on scenario. Results are sorted in date order.<br>\nSo a client would take the first one.</p>\n<p>Like Lloyd mentioned you can group observations by encounter. So if I had received the observations by hl7v2, they would all point to same encounter (one for each v2 message)</p>",
        "id": 181184608,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1574233915
    },
    {
        "content": "<p>You can see the gist of this in this diagram <a href=\"https://project-wildfyre.github.io/conformance/graph/4\" target=\"_blank\" title=\"https://project-wildfyre.github.io/conformance/graph/4\">https://project-wildfyre.github.io/conformance/graph/4</a></p>",
        "id": 181184758,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1574234115
    }
]