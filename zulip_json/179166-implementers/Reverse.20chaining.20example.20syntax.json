[
    {
        "content": "<p>...is this correct?<br>\nGET [base]/Patient?_has:Observation:patient:code=1234-5</p>\n<p>I'd have expected<br>\nGET [base]/Patient?_has:Observation.patient.code=1234-5</p>",
        "id": 153855784,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478527535
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/search.html#has\" target=\"_blank\" title=\"http://build.fhir.org/search.html#has\">http://build.fhir.org/search.html#has</a></p>",
        "id": 153855785,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478527548
    },
    {
        "content": "<p>The first one is correct. <code>patient.code</code> would imply the wrong thing, since that query you actually want is \"find me Patients referred to by Observations by the <code>Observation.patient</code> field where the <code>Observation.code</code> field has the value <code>1234-5</code>\"</p>",
        "id": 153855797,
        "sender_full_name": "James Agnew",
        "timestamp": 1478549602
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 153855942,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478600316
    },
    {
        "content": "<p>So the generic pattern is<br>\n<code>GET [base]/Patient?_has:[referring type]:[referring field]:[condition field]=1234-5</code></p>",
        "id": 153855943,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478600324
    },
    {
        "content": "<p>Oh, I see _inculde and _revinclude use a similar syntax:</p>\n<blockquote>\n<p>Parameter values for both _include and _revinclude have three parts, separated by a : character:</p>\n<p>1. The name of the source resource from which the join comes<br>\n2. The name of the search parameter which must be of type reference<br>\n3. (Optional) A specific of type of target resource (for when the search parameter refers to multiple possible target types)<br>\n_include and _revInclude parameters do not include multiple values. Instead, the parameters are repeated for each different include criteria.</p>\n</blockquote>\n<p>Maybe it would be helpful to add a similar paragraph to the _has-specification to explain the syntax pattern?</p>",
        "id": 153855946,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478600613
    },
    {
        "content": "<p>Something that just came up in the Provenance discussion thread:<br>\nIf we were to use logical References for Provenance.entity.reference <br>\ne.g. Provenance.entity.reference.identifier=http://someNamingSystem.org|112345<br>\nIs it possible to use _has to retrieve e.g. all Observations derived from this entity,<br>\nassuming Provenance has a search parameter \"entity\" for Provenance.entity.reference.</p>\n<div class=\"codehilite\"><pre>/Observation?_has:Provenance:target:entity=http://someNamingSystem.org|12345\n</pre></div>\n\n\n<p>Is it even possible to search for logical identifier references? I can't find explicit wording about this in the spec...</p>",
        "id": 153856028,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478630858
    },
    {
        "content": "<p>well, you can't chain. but you can search for them</p>",
        "id": 153856064,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478639973
    },
    {
        "content": "<p>So the query above is legit?</p>",
        "id": 153856082,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1478641474
    }
]