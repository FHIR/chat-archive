[
    {
        "content": "<p>I'm trying to gather some community input on the general use of the REST API that I can only imagine that most  FHIR implementations contain/support. The question is this: \"Whenever your application supports parts or the entire CRUD spectrum on a give resource type, how often do you choose to embed business logic and/or server side effects in that particular operation that modifies or ignores parts of the content from the request - opposed to make a FHIR custom operation instead?\" - This is particularly interesting for CREATE and UPDATE operations.</p>",
        "id": 165526339,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557752933
    },
    {
        "content": "<p>IMHO any large scale implementation which processes (potentially conflicting/overlapping) data from multiple sources will have to do some server-side filtering. $process-message comes to mind (for those who use FHIR Messaging). Like Jens I'd be curious to hear what server implementers have done with this regard.</p>",
        "id": 165528042,
        "sender_full_name": "René Spronk",
        "timestamp": 1557754213
    },
    {
        "content": "<p>In a project im currently engaged in we are trying to be puristic about it - meaning that side effects may be present, but they have no or little impact on the resource posted by clients. Instead we have favoured PATCH support (with whitelisted paths) and custom operations</p>",
        "id": 165528303,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557754378
    },
    {
        "content": "<blockquote>\n<p>how often do you choose to embed business logic and/or server side effects in that particular operation that modifies or ignores parts of the content from the request</p>\n</blockquote>\n<p>All the time because we are mapping to our data model that does not support all the data that _can_ be in a FHIR resource</p>",
        "id": 165529472,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1557755107
    },
    {
        "content": "<p>Some level of filtering will be pretty typical - due to persistence limitations, permission limitations and/or other business rules.  That's why the response to creates and updates can echo back what actually got stored or return an OperationOutcome with warnings.</p>",
        "id": 165535116,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557758807
    },
    {
        "content": "<p>So as a server I can choose to ignore a PUT or POST as long as I return a warning (stating that I did ignore it) ? Kind of defeats the idea of a client-driven architecture..</p>",
        "id": 165610852,
        "sender_full_name": "René Spronk",
        "timestamp": 1557830124
    },
    {
        "content": "<p>I don't see why. 'client-driven' shouldn't be a blank cheque to create chaos</p>",
        "id": 165613871,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1557833204
    },
    {
        "content": "<blockquote>\n<p>Some level of filtering will be pretty typical - due to persistence limitations, permission limitations and/or other business rules.  That's why the response to creates and updates can echo back what actually got stored or return an OperationOutcome with warnings.</p>\n</blockquote>\n<p>Right - I understand that the content posted by the client is echoed back with potential changed content according to the servers business rules - but it just not seem right in a couple of scenarios. I would say that PATCH seems pretty obvious for partial content updating for obvious reasons - it is however a bit harder to implement. AFAIK, there isn't any structured way to document what part of a resource which is entirely determined by the server - or is there?</p>",
        "id": 165616300,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557835894
    },
    {
        "content": "<p>How would you for instance tell a client that you can do all the updates to a patient resource that you can think of besides altering its identifiers as they are entirely controlled by the business logic of the server</p>",
        "id": 165616436,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557836038
    },
    {
        "content": "<p>Or even more complex - how will you tell a client that they can update all of the patient instance, except the official name and the official identifier as they are governed by another system/the server - and if you try to it will be entirely ignored</p>",
        "id": 165616521,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557836120
    },
    {
        "content": "<blockquote>\n<p>So as a server I can choose to ignore a PUT or POST as long as I return a warning (stating that I did ignore it) ? Kind of defeats the idea of a client-driven architecture..</p>\n</blockquote>\n<p>ignore the entirety of the request or parts of it?</p>",
        "id": 165616592,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557836181
    },
    {
        "content": "<p>What Im probably searching for here as a way to tell a client that parts of a resource is governed elsewhere and cannot be changed by the client itself in a structured fashion.</p>",
        "id": 165616706,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557836290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 165616715,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557836297
    },
    {
        "content": "<p>I think you are describing a level of policy driven StructureDefinition Profile that might be needed, but is not expressed today. Expressing these policy based things has not been our focus till this point. I could imagine it being an extension of a StructureDefinition Profile, much like you just narrative described.</p>",
        "id": 165616722,
        "sender_full_name": "John Moehrke",
        "timestamp": 1557836307
    },
    {
        "content": "<p>Right now, I'd just document it as part of the profile: such and such field will be ignored if you try and change it.</p>",
        "id": 165618380,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1557837737
    },
    {
        "content": "<p>(I'm kind of wary of stuffing even more obscure fields into ElementDefinition...)</p>",
        "id": 165618392,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1557837766
    },
    {
        "content": "<p>Putting stuff in a narrative usually do not catch my attention - icons, flags and gifs however do catch my attention. I guess my suggestion is to add yet another element in the ElementDefinition that says something like \"Beware, gory details could be present here\"</p>",
        "id": 165620661,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557839600
    },
    {
        "content": "<p>That’d be awesome; we could set it to true on every element in the base spec ;-)</p>",
        "id": 165621160,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557839981
    },
    {
        "content": "<p>And for the Infrastructure resources, \"Abandon all hope, ye who enter here\"</p>",
        "id": 165621287,
        "sender_full_name": "David Pyke",
        "timestamp": 1557840049
    },
    {
        "content": "<p>we do have the dragon <a href=\"http://build.fhir.org/assets/images/dragon.png\" target=\"_blank\" title=\"http://build.fhir.org/assets/images/dragon.png\">http://build.fhir.org/assets/images/dragon.png</a></p>\n<div class=\"message_inline_image\"><a href=\"http://build.fhir.org/assets/images/dragon.png\" target=\"_blank\" title=\"http://build.fhir.org/assets/images/dragon.png\"><img src=\"https://uploads.zulipusercontent.net/94d5452c550e0177df74989e95659c038ea6b6c9/687474703a2f2f6275696c642e666869722e6f72672f6173736574732f696d616765732f647261676f6e2e706e67\"></a></div>",
        "id": 165621344,
        "sender_full_name": "John Moehrke",
        "timestamp": 1557840091
    },
    {
        "content": "<p>Im fine with dragons ... but less could also be useful</p>",
        "id": 165626036,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557843515
    },
    {
        "content": "<p>sort of ... <a href=\"https://img.memecdn.com/you-cant-touch-this_o_1016714.webp\" target=\"_blank\" title=\"https://img.memecdn.com/you-cant-touch-this_o_1016714.webp\">https://img.memecdn.com/you-cant-touch-this_o_1016714.webp</a></p>\n<div class=\"message_inline_image\"><a href=\"https://img.memecdn.com/you-cant-touch-this_o_1016714.webp\" target=\"_blank\" title=\"https://img.memecdn.com/you-cant-touch-this_o_1016714.webp\"><img src=\"https://img.memecdn.com/you-cant-touch-this_o_1016714.webp\"></a></div>",
        "id": 165626332,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557843730
    },
    {
        "content": "<p>every dev loves kittens</p>",
        "id": 165626351,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557843745
    },
    {
        "content": "<p>or <a href=\"https://d2gg9evh47fn9z.cloudfront.net/800px_COLOURBOX30078417.jpg\" target=\"_blank\" title=\"https://d2gg9evh47fn9z.cloudfront.net/800px_COLOURBOX30078417.jpg\">https://d2gg9evh47fn9z.cloudfront.net/800px_COLOURBOX30078417.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://d2gg9evh47fn9z.cloudfront.net/800px_COLOURBOX30078417.jpg\" target=\"_blank\" title=\"https://d2gg9evh47fn9z.cloudfront.net/800px_COLOURBOX30078417.jpg\"><img src=\"https://d2gg9evh47fn9z.cloudfront.net/800px_COLOURBOX30078417.jpg\"></a></div>",
        "id": 165626488,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557843850
    },
    {
        "content": "<p>We can always add more into CapabilityStatement - and we will always run into use-cases where it would be useful to include \"just a bit more\".  The key question is what can we reasonably expect clients to computably adapt to when they see what the capabilities of a given server are and what's reasonable for them to adapt to at run-time when the server simply does what it does.  The rules about \"can't touch this\" could easily vary by time, by who last touched the record or a miriad of other factors.  You'll never be able to account for (or adapt to) all of them no matter how computable we make the capability declaration.  As a result, clients will always need to deal with the fact that what they asked for and what happened won't necessarily be the same.  If that's the case, then the argument for increased computability above what we have now is a tough (though not necesssarily impossible) sell.</p>",
        "id": 165627767,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557844724
    },
    {
        "content": "<p>its a matter of stating that the selected attributes are not editable even if you try to/if you try to manipulate part of this content it is safely ignored. Its more of a nonfunctional use case - so the meaning is not crystal clear and it shouldn't be. It it about simply stating that this may be governed by another party</p>",
        "id": 165628148,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557844942
    },
    {
        "content": "<blockquote>\n<p>The rules about \"can't touch this\" could easily vary by time, by who last touched the record or a miriad of other factors.  You'll never be able to account for (or adapt to) all of them no matter how computable we make the capability declaration.  As a result, clients will always need to deal with the fact that what they asked for and what happened won't necessarily be the same.  If that's the case, then the argument for increased computability above what we have now is a tough (though not necesssarily impossible) sell.</p>\n</blockquote>\n<p>Omitting a statement that says that you cannot expect to receive what you've posted or edited doesn't make it any better.<br>\nYou can hide complexity (or don't state it in any way which is the current case) but you cannot make it go away</p>",
        "id": 165628665,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557845299
    },
    {
        "content": "<p>\"you cannot expect to receive what you've posted or edited\" is a generic statement that applies to all FHIR interfaces.  There's a <a href=\"http://build.fhir.org/updates.html\" target=\"_blank\" title=\"http://build.fhir.org/updates.html\">whole section devoted to it</a> in the spec.  The question is what a client's supposed to do differently if they receive a more fine-grained indicator about the locations of the bits that are more likely to be ignored.  There's no point adjusting the code that writes them given that there's no need to.  The client can't count on such declarations appearing, so they still have to \"check and see what actually stuck\".  Would there be some other benefit?</p>",
        "id": 165630999,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557847009
    },
    {
        "content": "<p>Besides being more explicit? no</p>",
        "id": 165694139,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1557907136
    }
]