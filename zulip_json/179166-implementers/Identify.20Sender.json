[
    {
        "content": "<p>Hi, Can anyone please explain how to identify sender application when receiving patient resource. if its bundle we can use message header. Without bundle how to identify the sender of the resource ?</p>",
        "id": 228242246,
        "sender_full_name": "Radha Rajendran",
        "timestamp": 1614609978
    },
    {
        "content": "<p>If you're making a RESTful search, you know what server you're querying from.  There'll also be a fullUrl in the Bundle that tells you the specific server the data came from.  If you're just doing a read (and don't get back a Bundle), you should know what URL you were doing the read against, but there'll be a 'Location' header in the response that will tell you the URL as well.</p>",
        "id": 228242717,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614610157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"379274\">@Radha Rajendran</span>  You may also what to look into Provenance.  If you are concern with where did this information originate prior to coming to the FHIR Server endpoint, then a Provenance resource is where that information would be found (or stored).</p>",
        "id": 228243276,
        "sender_full_name": "Kevan Riley",
        "timestamp": 1614610360
    },
    {
        "content": "<p>Often with REST, even when it is a Bundle... the sender is identified using OAuth. See SMART-on-FHIR or IHE-IUA. Both are profiles on OAuth for use with http REST and FHIR.</p>",
        "id": 228251991,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614613387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/179166-implementers/topic/Identify.20Sender/near/228251991\">said</a>:</p>\n<blockquote>\n<p>Often with REST, even when it is a Bundle... the sender is identified using OAuth. See SMART-on-FHIR or IHE-IUA. Both are profiles on OAuth for use with http REST and FHIR.</p>\n</blockquote>\n<p>Thank you very much</p>",
        "id": 228354968,
        "sender_full_name": "Radha Rajendran",
        "timestamp": 1614662080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191353\">Kevan Riley</span> <a href=\"#narrow/stream/179166-implementers/topic/Identify.20Sender/near/228243276\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"379274\">Radha Rajendran</span>  You may also what to look into Provenance.  If you are concern with where did this information originate prior to coming to the FHIR Server endpoint, then a Provenance resource is where that information would be found (or stored).</p>\n</blockquote>\n<p>Thank you very much</p>",
        "id": 228355299,
        "sender_full_name": "Radha Rajendran",
        "timestamp": 1614662372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179166-implementers/topic/Identify.20Sender/near/228242717\">said</a>:</p>\n<blockquote>\n<p>If you're making a RESTful search, you know what server you're querying from.  There'll also be a fullUrl in the Bundle that tells you the specific server the data came from.  If you're just doing a read (and don't get back a Bundle), you should know what URL you were doing the read against, but there'll be a 'Location' header in the response that will tell you the URL as well.</p>\n</blockquote>\n<p>Thank you very much</p>",
        "id": 228355355,
        "sender_full_name": "Radha Rajendran",
        "timestamp": 1614662408
    },
    {
        "content": "<p>What implementation are you all using to identify sender of the resource (Provenance or  OAuth/OpenID or any other option )?</p>",
        "id": 228370099,
        "sender_full_name": "Radha Rajendran",
        "timestamp": 1614672882
    },
    {
        "content": "<p>By 'sender' do you mean system or user?</p>",
        "id": 228414705,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614694100
    }
]