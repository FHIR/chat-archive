[
    {
        "content": "<p>According to FHIR specification around references and contained resources, <a href=\"https://www.hl7.org/fhir/references.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/references.html\">https://www.hl7.org/fhir/references.html</a>, I can send to a FHIR server a resource such as an Observation reference an embedded patient resource if it is listed in the contained section of the Observation resource or within a Bundle. And I can successfully do this today against the HAPI server. My question is what does the FHIR server do with the \"contained\" resources after receiving such a message? </p>\n<p>Can I tell the FHIR server to always create the contained resource if it's missing in the FHIR server? Because if it doesn't create the resource, I won't be able to do search for the Observation by the embedded patient identifiers specified in the contained resource.</p>",
        "id": 153858698,
        "sender_full_name": "Tom C",
        "timestamp": 1480351328
    },
    {
        "content": "<p>if you post to my server, it will allow you to search like that. This is limitation built into HAPI. But there's no way to *tell* the FHIR server to create the contained resource, because the only circumstance where you should use a contained resource is that one where it is impossible for either the client or the server to create an actual resource because there is not enough information</p>",
        "id": 153858721,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480358997
    },
    {
        "content": "<p>So let's say I am interfacing with a FHIR server and trying to send Observation messages to that server. Are you recommending that before I add any Observation to the FHIR server that I need to make a query to the FHIR server first to see if the Patient resource exists or not and if it doesn't exist, make sure that it's created before submitting the Observation? </p>",
        "id": 153858724,
        "sender_full_name": "Tom C",
        "timestamp": 1480359635
    },
    {
        "content": "<p>that's one option. Another is to to submit a transaction. </p>",
        "id": 153858725,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480359714
    },
    {
        "content": "<p>with a conditional create</p>",
        "id": 153858726,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480359726
    },
    {
        "content": "<p>So Graphame, your server handles \"contained\" resources by creating the missing resources in the database and enabling search that way or are you handling queries for resources differently than HAPI by creating other search indexes?</p>",
        "id": 153858767,
        "sender_full_name": "Tom C",
        "timestamp": 1480370818
    },
    {
        "content": "<p>that's a false dichotomy. technically, I index contained resoruces like I index any other resources; they have a dual identity, their container id and their id, so I know they are contained resources from the index</p>",
        "id": 153858773,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480371147
    },
    {
        "content": "<p>Your implementation makes sense. What I don't understand is why aren't contained resources are not used more often for handling of references. It eliminates the back and forth chatter between the FHIR server and client for retrieval of internal identifiers for references . As a client I shouldn't have to know what the internal identifiers are of a FHIR server. Take the example of source health care system sharing data with potential interested parties. As the source system, I have my own identifiers for resources in my system. When I broadcast data changes to other systems, I shouldn't have to alter my message for each interested party to make sure that they can process it.</p>",
        "id": 153860038,
        "sender_full_name": "Tom C",
        "timestamp": 1480713250
    },
    {
        "content": "<p>Transactions with conditional create doesn't quite help either. Once again, we are asking FHIR client to take responsibility of how resources are created in the FHIR server. What if two FHIR clients use different conditions for resolving of identifiers during conditional create? You can end up with data is not in sync.</p>",
        "id": 153860040,
        "sender_full_name": "Tom C",
        "timestamp": 1480713455
    },
    {
        "content": "<p>You can ask the server to package things up using _include. </p>",
        "id": 153860056,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480727580
    },
    {
        "content": "<p>but contained resources are a fail as soon as you start handling inforrmation repeatedly, or in different contexts</p>",
        "id": 153860057,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480727605
    },
    {
        "content": "<p>or you have to update it </p>",
        "id": 153860058,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480727610
    },
    {
        "content": "<p>\"When I broadcast data changes to other systems, I shouldn't have to alter my message for each interested party to make sure that they can process it.\" - that's for sure, but why would you think you need to?</p>",
        "id": 153860059,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480727633
    },
    {
        "content": "<p>How does _include help with the insertion of data with multiple references? Isn't _include used more for queries? The broadcast message scenario can be the following. Let's say I am an EMR system that currently works with HL7 v2 as means of sharing information and that now I wish push my Observation messages to other interested parties which are FHIR servers. The EMR system however is not a FHIR server. So the EMR sends FHIR messages to those FHIR servers using external FHIR references then it needs to craft a different message for each interested FHIR server. </p>",
        "id": 153860749,
        "sender_full_name": "Tom C",
        "timestamp": 1480957615
    },
    {
        "content": "<p>If not using external references, then as you said, it can be a Transaction with conditional create but that requires quite a bit more resources to be sent across then just references to identifiers. And the calling client is also specifying the condition on how the server matches the identifiers for conditional create. As just a client broadcasting message, why is it the client's job to dictate how the data is stored on the server </p>",
        "id": 153860751,
        "sender_full_name": "Tom C",
        "timestamp": 1480958157
    },
    {
        "content": "<p>Tom, yes _include is a query parameter. It is not a concept in messaging, except to the extent you mention that a sender can 'include' things that it thinks the recipient need (likely  Profile - IG  have defined to happen). It is this that needs to be decided, what is the IG that the sender will follow that tells it what to include. This would be influenced by knowledge of shared accessibility of a common REST service, such as a Patient Registry. With a shared service, like Patient, one can just use references to persistent Resources. BUT if you don't have shared REST services, then you must convey all appropriate information. </p>",
        "id": 153860758,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480959035
    },
    {
        "content": "<p>I still don't follow why a different message is required for each servrer</p>",
        "id": 153860826,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480966995
    },
    {
        "content": "<p>Example: Observation with patient MRN = 123. In FHIR Server 1, patient MRN=123 is represented as Patient/1. In FHIR Server 2, the same patient is represented as Patient/2. When you send the Observation with a link to the patient, you need to specify the subject. So which reference do you specify Patient/1 or Patient/2 ? Hence a different message per server</p>",
        "id": 153860933,
        "sender_full_name": "Tom C",
        "timestamp": 1480970501
    },
    {
        "content": "<p>you should do what you'd do in v2: send the patient resource (= PID segment). Give it the identity of your own patient id, and put the identifiers in the patient resource (=PID-3)</p>",
        "id": 153860969,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480972299
    },
    {
        "content": "<p>then, the recipient server can <br>\n- use your id, since that's what it does<br>\n- use it's own id, and do reconciliation based on Patient.identifier - just like now</p>",
        "id": 153860972,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480972363
    },
    {
        "content": "<p>no need for a different message per server</p>",
        "id": 153860973,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480972378
    },
    {
        "content": "<p>Yes, that's what we are doing. putting the PID-3 elements inside Patient.identifier.value field and assigning the appropriate system. You are not talking about assigning the Patient resourcce's logical id to PID-3 correct?  And if the server decides to use its own logical \"id\" instead of what you are passing in then when you setup the subject reference  in the Observation it will still need to link to this newly generated logical \"id\". </p>",
        "id": 153861042,
        "sender_full_name": "Tom C",
        "timestamp": 1480977342
    },
    {
        "content": "<p>no, I'm not saying to use the logical id of the resource in the Patient.identifier.</p>",
        "id": 153861043,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480977430
    },
    {
        "content": "<p>Maybe I am missing something fundamental here. Is there an example of taking a HL7 v2 Observation message and breaking that down into a collection of FHIR resources that can be sent to any FHIR server without modification?</p>",
        "id": 153861044,
        "sender_full_name": "Tom C",
        "timestamp": 1480977435
    },
    {
        "content": "<p>yes. see <a href=\"http://build.fhir.org/diagnosticreport-micro1.xml.html\" target=\"_blank\" title=\"http://build.fhir.org/diagnosticreport-micro1.xml.html\">http://build.fhir.org/diagnosticreport-micro1.xml.html</a></p>",
        "id": 153861045,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480977497
    },
    {
        "content": "<p>no. I excluded the patient from that</p>",
        "id": 153861046,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480977522
    },
    {
        "content": "<p>so let's just take this little fragment:</p>\n<div class=\"codehilite\"><pre>MSH|^~\\&amp;|Source|Source2|Dest|Dets2|20110620103832||ORU^R01^ORU_R01|2039068|D|2.3.1|||AL|NE|AU|ASCII|ENG\nPID|1||124320^^^Source|124320^^^Source|TestPatient^Test^^^^^L|||M||||||||||||||||||||||N\nPV1||O|AN^^^AN^^^^^A place|||||ID^Doctor^D^^^Dr^^||||||||||||P\n</pre></div>",
        "id": 153861049,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480977967
    },
    {
        "content": "<p>you're going to get a bundle like this:</p>\n<div class=\"codehilite\"><pre>bundle\n  type = collection\n  entry\n    fullUrl = http://[source]/Patient/xxxx\n    resource = Patient\n      id = xxxx\n      identifier\n        system = [source]\n        value = 124320\n      name\n        family = TestPatient\n        given = Test\n      gender = M\n  entry\n    fullUrl = http://[source]/Encounter/yyyy\n    resource = Encounter\n      patient      \n        reference = Patient/xxxx\n        participant\n          etc\n  entry\n    fullUrl = http://[source]/Observation/1234\n    resource = Observation\n      subject\n        reference = Patient/xxxx\n      code\n        LOINC etc      \n</pre></div>",
        "id": 153861050,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480978252
    },
    {
        "content": "<p>short hand there...</p>",
        "id": 153861051,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480978257
    },
    {
        "content": "<p>the question is the value of xxxx. The correct value for xxxx is 'something from the source that will be constant each time the same patient is referenced' . </p>",
        "id": 153861052,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480978300
    },
    {
        "content": "<p>the recipients can use xxxx, or not. </p>",
        "id": 153861053,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480978309
    },
    {
        "content": "<p>So id = xxxx may or may not be the logical id depending on FHIR server implementation</p>",
        "id": 153861054,
        "sender_full_name": "Tom C",
        "timestamp": 1480978455
    },
    {
        "content": "<p>now I'm not sure what you mean by 'logical id' </p>",
        "id": 153861056,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480978700
    },
    {
        "content": "<p>in FHIR terms, it *is* the logical id by definition</p>",
        "id": 153861057,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480978715
    },
    {
        "content": "<p>The logical id as defined here: <a href=\"https://www.hl7.org/FHIR/resource.html\" target=\"_blank\" title=\"https://www.hl7.org/FHIR/resource.html\">https://www.hl7.org/FHIR/resource.html</a>. Which states \"Each resource has an \"id\" element which contains the logical identity of the resource assigned by the server responsible for storing it\"</p>",
        "id": 153861058,
        "sender_full_name": "Tom C",
        "timestamp": 1480978784
    },
    {
        "content": "<p>I though that was what you are setting with id = xxxx</p>",
        "id": 153861059,
        "sender_full_name": "Tom C",
        "timestamp": 1480978818
    },
    {
        "content": "<p>indeed, xxx is the logical id, by definition. </p>",
        "id": 153861061,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480979300
    },
    {
        "content": "<p>so I don't know what you meant when you said 'may not be the logical id'</p>",
        "id": 153861062,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480979316
    },
    {
        "content": "<p>What I'm trying to say is how the FHIR server handles the \"logical id\" xxxx is up to the implementer. It can choose to store xxxx as the logical id in its Patient resource or it may choose a completely different identifier that it generates for the id field. If the FHIR server chooses the latter option would the FHIR client still be able to query for that specific patient using Patient/xxxx?</p>",
        "id": 153861065,
        "sender_full_name": "Tom C",
        "timestamp": 1480979987
    },
    {
        "content": "<p>are you talking about the server processing the bundle? Then yes, it can choose to use xxxx or it can make up it's own. If it makes up it's own, then 2 questions arise:<br>\n- how will it recognise the same patient resource next time, and match it to the same id?<br>\n- what impact will that have on other systems</p>",
        "id": 153861067,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480980231
    },
    {
        "content": "<p>so the answer to your last question is, pretty much no. In general, it's not safe to assume that resources will keep their logical id when they are moved from server to server unless you have independent confirmation that they will be kept the same</p>",
        "id": 153861068,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1480980287
    }
]