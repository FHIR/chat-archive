[
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13451\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13451\">GF#13451</a> - do we need subsumes? I don't think this is needed here. <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 153944633,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520993644
    },
    {
        "content": "<p>If the Observation.code says \"Blood Pressure\" and the Observation.component.code says \"Blood Pressure -sitting\", that's as big an issue as if they both say \"Blood Pressure\".</p>",
        "id": 153944674,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521007689
    },
    {
        "content": "<p>but that doesn't follow that it's always a problem. It seems reasonable that a component could provide further information to me .</p>",
        "id": 153944686,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1521009846
    },
    {
        "content": "<p>A component can provide further <em>different</em> information.  But it can't represent the same observation.  It needs to represent a qualifier or sub-section of the Observation.  If you wanted to convey the codes for both \"Blood Pressure\" and \"Blood Pressure-sitting\", you would send them as multiple codings on Observation.code</p>",
        "id": 153944740,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521036587
    },
    {
        "content": "<p>I agree, the description of this item sounds like code equivalence, not subsumption. We deliberately excluded subsumption support from CQL, I'd suggest the same for FHIRPath (can always be added with an external implementation, but defining the operation in the spec means addressing a lot of variability).</p>",
        "id": 153944749,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1521038056
    },
    {
        "content": "<p>Wait, what? \"multiple codings on Observation.code\"?</p>",
        "id": 153944752,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1521038119
    },
    {
        "content": "<p>Isn't that a violation of a CodeableConcept?</p>",
        "id": 153944754,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1521038128
    },
    {
        "content": "<p>Multiple codings is standard in CodeableConcept - it allows you to provide multiple translations (often from different code systems, but can be from the same code system, for example if there's a need to satisfy multiple value sets.)</p>",
        "id": 153944765,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521040788
    },
    {
        "content": "<p>The use-case is for more than just equivalence.</p>",
        "id": 153944766,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521040806
    },
    {
        "content": "<p>Yeah, but \"Blood Pressure\" and \"Blood Pressure - sitting\" are different concepts, so shouldn't those be represented with different CodeableConcept instances, not with different coding elements in the same CodeableConcept instance?</p>",
        "id": 153944772,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1521041620
    },
    {
        "content": "<p>Both are proper codings of what happened - they're just representing the concept at different levels of granularity.</p>",
        "id": 153944773,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521041802
    },
    {
        "content": "<p>A coding that said \"Blood Pressure\" and another that said \"Blood O2\" would be misusing CodeableConcept.  But having multiple codings that represent different levels of detail about the same thing is totally fine and expected.</p>",
        "id": 153944775,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521041861
    },
    {
        "content": "<p>Yeah, that's completely different from my current understanding, and my interpretation reading the documentation.</p>",
        "id": 153944776,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1521041942
    },
    {
        "content": "<p>There's no such thing as \"true\" concept equivalence across code systems.  Different codes are always going to have different granularities.  So long as both codings are representations of the concept that's present, they're valid translations.  The \"concept\" in question is \"what is the event happened to the patient\".   \"Blood Pressure\", \"Blood Pressure-sitting\", \"Blood Pressure-sitting, large cuff size, second measurement\" are all codings of the \"concept\" of that single event.  On the other hand, \"blood o2\" would be talking about a different event - and would require it's own CodeableConcept.</p>",
        "id": 153944781,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521042418
    },
    {
        "content": "<p>Perhaps the issue is this: \"The different codings may have slightly different granularity due to the differences in the definitions of the underlying codes.\"  I think \"slightly\" is misleading.  There's no boundary on the granularity difference.  One coding might say \"Penecillin\" and another might say \"Apo Amoxicillin 20mg tablets\".  <span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> Do you agree?</p>",
        "id": 153944785,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521042572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> Yes, I do agree - to a point.  We have to do this to some extent, but can't do it without limits (and unfortunately for that, there usually isn't a straightforward way to set hard limits on this).  I think I would not expect or recommend including codes for both \"Blood Pressure\" and \"Blood Pressure-sitting\" as translations (assuming that they're from the same code system) - unless maybe there's a specific regulatory requirement or something like that that drives it.  And I don't think it's correct to have codes for both \"Penicillin\" and \"Apo Amoxicillin 20mg tablets\" in the same data type instance - they're not the same thing, not just different granularity levels.  But in principle we do have to do this to a \"reasonable\" extent.</p>",
        "id": 153944824,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1521051257
    },
    {
        "content": "<p>I agree you wouldn't send multiple levels of granularity from the same code system unless you were trying to meet the needs of different receivers who needed defferent codes - but that won't be uncommon.  I thought Amoxicillin was a penecillin.  However, the example still stands if the codes are for \"Amoxicillin\" vs. \"Apo Amoxicillin 20mg tablets\".  Both are different granularities of coding of the same medication and if you have a receivers who need both codings, it's fine to have them on the same element.</p>",
        "id": 153944828,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521053719
    },
    {
        "content": "<p>For me, that's the problem, because they are different concepts, why not just say that those should be represented with different codeableconcepts?</p>",
        "id": 153944830,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1521054075
    },
    {
        "content": "<p>The underlying concept is the same.  You'll never have a code that fully describes the real-world concept.  You just have varying approximations of it.  So long as the different codes are approximating the same aspect of the same real-world concept, you're fine.  If we don't allow this, there's no way we could have an ICD10 code and a SNOMED code and a local code for the same Condition because there's no chance that they'd always have exactly the same granularity.</p>",
        "id": 153944835,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521054531
    },
    {
        "content": "<p>Multiple codings are <em>not</em> conceptual equivalents.  They are all parallel encodings of the same real-world fact.</p>",
        "id": 153944836,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521054567
    },
    {
        "content": "<p>I'm totally onboard with codes from different systems, and I get that there's never a perfect alignment between code systems. To clarify, when I say \"code equivalence\", I mean only that the code and system are the same, version and display can be different. But when codes from different systems are present within the same CodeableConcept, I thought the whole point of a CodeableConcept was that it sets up an implication of cross-system equivalence (a translation), and that's why I think having codes from the same system in a single CodeableConcept is a problem, we're saying they're translations then. Or we're using CodeableConcept in two very different ways with no ability to detect when we mean one thing versus another.</p>",
        "id": 153944840,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1521054932
    },
    {
        "content": "<p>I (somewhat reluctantly) agree that Lloyd is right on this.  The discomfort is not being able to explicitly say how far we can go with this (and no farther).  It might be best (or even required) that \"Amoxicillin\" and \"Apo Amoxicillin 20mg tablets\" be coded in separate data type instances, rather than as multiple Codings in the same CodeableConcept, depending on the intended use, but in other cases it may be appropriate to do exactly what Lloyd has described.</p>",
        "id": 153944841,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1521054963
    },
    {
        "content": "<p>But then how do we distinguish the cases?</p>",
        "id": 153944843,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1521055116
    },
    {
        "content": "<p>you can't distinguish the case. There's no computable way to define what's reasonable here, especially since what's reasonable depends on context outside the instance.  We've known this since long ago in the v3 process (2005, I think the first discussion about this was)</p>",
        "id": 153944844,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1521055191
    },
    {
        "content": "<p>so the discussion has wandered away from the topic, which had 2 parts, really:<br>\n- is it ok for a component observation to have a code that is subsumed by a code in the root observation<br>\n- what should we do about subsumption in fhirpath?</p>",
        "id": 153944845,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1521055254
    },
    {
        "content": "<p>after thinking about the 2nd question for a few hours, the answer is: define a standard API to the terminology service that is available in FHIRPath. </p>\n<div class=\"codehilite\"><pre><span></span>iff(terminologyService().subsumes(concept1, concept2) = &#39;subsumes&#39;, ....\n</pre></div>",
        "id": 153944846,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1521055425
    },
    {
        "content": "<p>so the answer is: this is a FHIR question, not a FHIRPath question, and FHIRPath shouldn't do anything about this. I'll create a task for documenting a standard terminology service API in FHIRPath</p>",
        "id": 153944847,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1521055459
    },
    {
        "content": "<p>Well I was hoping to get to a resolution on the second part there by saying we didn't need it because CodeableConcepts wouldn't ever contain it. But it sounds like that's not reasonable, so we either define it in the spec, or.... I see you beat me to it.</p>",
        "id": 153944848,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1521055463
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15777\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15777\">GF#15777</a></p>",
        "id": 153944850,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1521055652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> definitely does <em>not</em> imply cross system \"equivalence\", but only cross system relatedness<br>\n.</p>",
        "id": 153945606,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1521256109
    },
    {
        "content": "<p>I think there's still an open question of subsumption between CodeableConcepts?  ie when one or the other has (or both have)  &gt; 1 code</p>",
        "id": 153945607,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1521256424
    },
    {
        "content": "<p>well, we know that you could be in the situation where 2 codeable concepts both have codes, and thereby they both subsume each other. This would obviously be a non-sensical situation, but we should expect that this will happen somewhere some time.... but I don't think that we need to rule about situations like this in the spec</p>",
        "id": 153945665,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1521279230
    },
    {
        "content": "<p>Why would it be nonsensical?</p>",
        "id": 153945740,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521297716
    },
    {
        "content": "<p>Sorry I'm late to the discussion, but I wanted to follow up on the earlier comment from <span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> </p>\n<blockquote>\n<p>I would not expect or recommend including codes for both \"Blood Pressure\" and \"Blood Pressure-sitting\" as translations (assuming that they're from the same code system)</p>\n</blockquote>\n<p>That seems to conflict with the Vital Signs profile, which says:</p>\n<blockquote>\n<p>If a more specific code or another code system is recorded or required, implementers must support both the values (LOINC) listed below and the translated code - e.g. method specific LOINC codes</p>\n</blockquote>\n<p>Even outside of Vital Signs, Pharmacy has guidance for Medication.code as follows:</p>\n<blockquote>\n<p>Other codes can only be literal translations to alternative code systems, or codes at a lower level of granularity (e.g. a generic code for a vendor-specific primary one).</p>\n</blockquote>\n<p>That reads as if it is OK for us to send multiple RxNorms with differing term types (e.g. ingredient/generic + brand) as coding translations of the same CodeableConcept.</p>",
        "id": 153946190,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1521467223
    },
    {
        "content": "<p>the question here is different: not \"should codes with different granularity be found on Observation.code\" but \"should codes with different granularity be spread across Observation.code and Observation.component.code\"</p>",
        "id": 153946232,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1521482907
    },
    {
        "content": "<p>Yeah, that was your initial question, <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , but then the discussion seemed to get side tracked with whether multiple codes with differing granularities from the same code system were allowed translations (and I'm saying yes, that does happen in our implementation).  <br>\nGoing back to your initial question, I believe my old tracker <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9375\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=9375\">GF#9375</a> introduced the invariant obs-7 cited in <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13451\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13451\">GF#13451</a>.  In our original use case, the Observation.code = Observation.component.code to support SHx multi-valued answers to a single question.<br>\nOur other use of components (beyond multi-valued answers) is Vital Signs, but I don't think we'd say SBP (component) is a more granular representation of the BP panel (code)...rather the component is part of the panel.  Just speaking for our implementation, I think an equivalence check is sufficient.</p>",
        "id": 153946278,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1521494073
    },
    {
        "content": "<p>Well I think that in general, it would be wrong for the component code to subsume the code (or vice verse) - but I’m for from convinced that we can make a hard rule that this is always wrong.</p>",
        "id": 153946291,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1521500304
    },
    {
        "content": "<p>I'd love even one example where it would be right...</p>",
        "id": 153946305,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521505791
    },
    {
        "content": "<p>ok:</p>\n<div class=\"codehilite\"><pre><span></span>Observation\n  code: [analyte]\n  value:  [aggregate measure based on aggregate estimate from both methods]\n  component\n    code:  [analyte by method1 ]\n    value: [result]\n  component\n    code: [analyte by method2]\n    value: [result]\n</pre></div>",
        "id": 153946315,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1521509279
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 153946316,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521509314
    },
    {
        "content": "<p>I think that may be more common than you think.</p>",
        "id": 153946319,
        "sender_full_name": "Eric Haas",
        "timestamp": 1521509465
    },
    {
        "content": "<p>I'm not rejecting the use-case.  It's sufficient to not prohibit components that are subsumed by the Observation.  (Though it might be reasonable to prohibit the reverse - I don't think that component.code should ever be more general than the Observation.code</p>",
        "id": 153946330,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521509802
    },
    {
        "content": "<p>probably but that sounds like best practice advice to me</p>",
        "id": 153946331,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1521509858
    },
    {
        "content": "<p>Best practice advice that's significantly different from Observation.code can't match component.code?</p>",
        "id": 153946347,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1521512265
    },
    {
        "content": "<p>best practice is that the code in Observation.code should not be subsumed by the code in Observation.component.code... and let us know if you think there's a valid case for that</p>",
        "id": 153946350,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1521514233
    }
]