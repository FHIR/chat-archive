[
    {
        "content": "<p>Hello.<br>\nThere is a task to store information in the Appointment resource, about who created the Appointment (external service) in order to receive the number of such Appointments in the future.<br>\nWhat is better to use?</p>",
        "id": 181106053,
        "sender_full_name": "Nata Samarina",
        "timestamp": 1574166254
    },
    {
        "content": "<p>Have you looked at the Provenance resource? If you did, is there a reason as to why that wouldn't work?</p>",
        "id": 181118040,
        "sender_full_name": "Ren√© Spronk",
        "timestamp": 1574175211
    },
    {
        "content": "<p>Or auditevent</p>",
        "id": 184642187,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1577961744
    },
    {
        "content": "<p>Can I just check my understanding of simple appointments (one patient, one practitioner). Suppose a system allows a client to create an appointment by POSTing an Appointment resource to the Appointment endpoint. The system checks that the time/practitioner is available, and if so creates the Appointment internally but returns an AppointmentResponse resource rather than the updated Appointment resource. Is that correct? (the spec notes differences in operation because of iCal alignment)</p>\n<p>If subsequently the status is changed (say the Patient has arrived) then the client will locate the appointment resource, update the status and PUT it back to the Appointment endpoint, The system then makes the change and (optionally) returns the Appointment resource. Is that correct?</p>",
        "id": 231403406,
        "sender_full_name": "David Hay",
        "timestamp": 1616457769
    },
    {
        "content": "<p>It will still return the Appointment with all the data completed correctly.<br>\nAppointmentResponse is only for \"request\" style interactions like when you get one in email, and need to reply that you accept it.<br>\nThis is very solution dependant how that would work.</p>",
        "id": 241734220,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1623047416
    }
]