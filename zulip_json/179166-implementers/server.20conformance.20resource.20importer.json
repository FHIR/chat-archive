[
    {
        "content": "<p>I've been implementing the ability to load in a package (of conformance resources) onto my server via an administrative operation and was wondering if others have tried this too.<br>\nThe first real issue that I've come across was that if I permit the retention of the Resource.Id fields in the package, there is a good chance that these will cause conflicts, overwriting a resource that used that ID elsewhere - in my case was FhirCore - AuBase - AuPD, and had the Id reused at each of the levels in various ways.<br>\nThinking that I'll just want to stop the re-use of IDs bringing them in.</p>",
        "id": 154015012,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541126688
    },
    {
        "content": "<p>I'd advise others to not use the provided Ids, unless you know what you're doing - in my server I'm now doing a prefix during the import - but will be controlled use anyway - and typically only used to move conformances from one system to another (packaging configuration distribution)</p>",
        "id": 154015032,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541131066
    },
    {
        "content": "<p>Vonk already allows importing resources on a separate administrative endpoint - and it forbids from two different resources having the same canonical url (<a href=\"http://docs.simplifier.net/vonk/features/conformanceresources.html#conformance\" target=\"_blank\" title=\"http://docs.simplifier.net/vonk/features/conformanceresources.html#conformance\">http://docs.simplifier.net/vonk/features/conformanceresources.html#conformance</a>)</p>",
        "id": 154015057,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1541151094
    },
    {
        "content": "<p>That's what matters in the end, no? Not the <code>.id</code></p>",
        "id": 154015058,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1541151106
    },
    {
        "content": "<p>Resource ids MUST be unique. A FHIR server could store multiple StructureDefinitions that all share a common canonical url (for example Simplifier). However each instance must have a unique resource id.</p>",
        "id": 154015100,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1541156314
    },
    {
        "content": "<p>Canonical URLs can be dupicate.  It's totally possible for a server to host multiple business versions of the same value set.  They'll have the same canonical URL but different <code>version</code> elements.  They'll also have to have different <code>id</code> elements - which could be pretty much anything.</p>",
        "id": 154015162,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541170457
    },
    {
        "content": "<p>Yes, my problem wasn't ending up with duplicates, it was with over-writing resources.</p>",
        "id": 154015385,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541216704
    },
    {
        "content": "<p>(As 2 guides used the same Id for different value sets)</p>",
        "id": 154015386,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541216744
    },
    {
        "content": "<p>Just checked: we report a conflict if you put the same canonical with a different id, but not the other way around. Should check that as well. In general I think it is fairly safe to ignore the provided id's an assign your own server-specific id's.</p>",
        "id": 154025909,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1545045149
    }
]