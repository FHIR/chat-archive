[
    {
        "content": "<p>Does anyone understand the purpose of the 'must support' option in Forge? How does this differ from setting the lower range of the cardinality different than 0?</p>",
        "id": 153881730,
        "sender_full_name": "Brian Reinhold",
        "timestamp": 1491919591
    },
    {
        "content": "<p>what has a 'must support' statement? I expect that must-support means that the data element must not be lost, query must be implemented, and any other functionality (isModifier) must be implemented. I don't like the word \"support\" as it is vague, surely it doesn't mean support as in how a rope supports something that is dangling...   Cardionality of 0..* vs 1..* means that the element must have a value.</p>",
        "id": 153881733,
        "sender_full_name": "John Moehrke",
        "timestamp": 1491919992
    },
    {
        "content": "<p>John, <br>\nWhen using forge to create a profile one is presented with two check boxes when one starts profiling an element of a resource. One is 'must support' and the other is 'isModifier'. I do not know what the significance of those options is. If I check the box I get a blue symbol with the element indicating 'must support' but that doesn't help much. It seems to be independent of the cardinality setting so it must imply something different. I just don't know what!</p>",
        "id": 153881735,
        "sender_full_name": "Brian Reinhold",
        "timestamp": 1491920322
    },
    {
        "content": "<p>seconds after I posted I realized the context... you are using Forge to create a IG... so the question is about what affect the checkbox has in Forge... okay, sorry. </p>",
        "id": 153881736,
        "sender_full_name": "John Moehrke",
        "timestamp": 1491920613
    },
    {
        "content": "<p>Yes. I have not been able to find any description about the consequences of that setting; I would have assumed that specification of the cardinality was sufficient.</p>",
        "id": 153881739,
        "sender_full_name": "Brian Reinhold",
        "timestamp": 1491920706
    },
    {
        "content": "<p><a href=\"https://www.hl7.org/fhir/elementdefinition-definitions.html#ElementDefinition.mustSupport\" target=\"_blank\" title=\"https://www.hl7.org/fhir/elementdefinition-definitions.html#ElementDefinition.mustSupport\">https://www.hl7.org/fhir/elementdefinition-definitions.html#ElementDefinition.mustSupport</a></p>",
        "id": 153881741,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1491920787
    },
    {
        "content": "<p>\"Allows a profile to set expectations for system capabilities beyond merely respecting cardinality constraints.\"</p>",
        "id": 153881742,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1491920803
    },
    {
        "content": "<p>So if a  profile defines mustSupport elements, then the profile author should provide an explanation of the intended meaning.</p>",
        "id": 153881744,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1491920879
    },
    {
        "content": "<p>Michel,<br>\nThanks for that. Now I remember skimming by that comment and recalling its 'vagueness'.  After re-reading it I am equally as unsure how to set it. I suppose (since I am specifying how Personal Health Device data is mapped to FHIR) that simply forcing the implementer of the upload to provide the field by specifying the minimum cardinality as &gt; 0 accomplishes what I want. What the reader of the data does with it I leave up to the reader. If the reader wants to ignore the value of an Observation, well, that's the reader's prerogative (stupid perhaps but that's not my decision).</p>",
        "id": 153881749,
        "sender_full_name": "Brian Reinhold",
        "timestamp": 1491921247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192228\">@Brian Reinhold</span> right, then I don't think you need to constrain mustSupport. The mustSupport property indicates that a server SHALL support this aspect (and any implicit behavior as specified by the profile author) in order to process such a resource, and if it does not, then the server should not accept and/or try to process the resource instance alltogether.</p>",
        "id": 153881760,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1491922447
    },
    {
        "content": "<p>OKay thanks. This profile is not that complicated but is basically a mapping exercise; the 11073 data model of ASN1 byte sequences is being mapped to the FHIR data model. When it leaves the uploader there are no additional subtle behaviors that need to be invoked (besides storing the resources).</p>",
        "id": 153881762,
        "sender_full_name": "Brian Reinhold",
        "timestamp": 1491922631
    },
    {
        "content": "<p>mustSupport is primariliy relevant for situations where an element doens't have to be present in an instance but there's an expectation that the system must \"support\" it.  For example, you wouldn't want to make Patient.deceasedDate have min=1.  (Not the sort of thing we generally work towards in healthcare :&gt;).  But, in your IG, you might also want to set an expectation that systems will have the capability to store, display and otherwise make use of that element - because the default expectation is that systems are allowed to ignore and throw away whatever data they wish.</p>",
        "id": 153881768,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1491923015
    },
    {
        "content": "<p>mustSupport is left vague because what's relevant for \"support\" varies depending on the context of the implementation.  We can't say \"must display\" or \"must store\" because a real-time decision support engine might not do either of those things - but might still need to take into account that the patient is deceased as part of the decision logic (e.g. not identify them as eligible for a screening test).</p>",
        "id": 153881770,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1491923114
    },
    {
        "content": "<p>mustSupport can even be relevant with items that have min&gt;=1.  Just because something must appear on the wire doesn't mean systems have to provide real support for it.  Senders can send a fixed value.  Receivers can receive and ignore.  mustSupport sets the bar higher by identifying what the expectations are for systems to support the element.</p>",
        "id": 153881773,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1491923205
    },
    {
        "content": "<p>Each IG that makes use of mustSupport is responsible for defining what the expectations are for conformant systems when it comes to \"supported\" elements.</p>",
        "id": 153881774,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1491923237
    },
    {
        "content": "<p>Note that mustSupport is *not* generally something you can validate when looking at an instance - you actually have to examine system behavior - is the data stored, is it on the screen, is it taken into account in decision support language, is it taken into account when generating reports, etc.</p>",
        "id": 153881775,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1491923296
    },
    {
        "content": "<p>So what you are saying is something like, if the field it present, you have to deal with it. However, the field may not be present in all cases.<br>\nOn the other hand, say I have a measurement value which has a cardinality of [1..1]. Now if I don't check the 'must support' I suppose that allows the reader to ignore it. Stupid for a measurement ... I wouldn't buy that implementation!</p>",
        "id": 153881779,
        "sender_full_name": "Brian Reinhold",
        "timestamp": 1491923759
    },
    {
        "content": "<p>It depends what the implementation is for.  Maybe it's a decision support tool that's tracking when the last pap smear was done.  It doesn't need to know the result, only the patient, type of test and the date.</p>",
        "id": 153881787,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1491924623
    },
    {
        "content": "<p>We can certainly rely on implementers to \"support what's reasonable in the circumstance\", but real life has shown that implementers can easily come to different conclusions - especially when they start out from different legacies.  Part of getting the full benefit of interoperability is consistency of behavior - mustUnderstand allows implementation guides to take at least some steps towards defining that behavior.</p>",
        "id": 153881788,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1491924736
    }
]