[
    {
        "content": "<p>Lots of people have asked me whether there's a standard DDL for FHIR for SQL.</p>",
        "id": 153928577,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515719754
    },
    {
        "content": "<p>I'm really negative on the idea: there's  so much variation between database servers, between architectural approaches to O/R transforms, between O/R toolkits.... I don't think there's any prospect of agreement. And people using O/R toolkits (majority, I think) wouldn't be at all interested any way</p>",
        "id": 153928578,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515719824
    },
    {
        "content": "<p>but the questions I get indicate that people haven't really thought through some of the options they have when they think about how to store their data</p>",
        "id": 153928579,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515719853
    },
    {
        "content": "<p>is there any interest in a standard DDL for FHIR? or do people agree with me about the challenges?</p>",
        "id": 153928580,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515719984
    },
    {
        "content": "<p>I do agree with your notes here, I get the same with folks wanting to use the c# FHIR model classes with EntityFramework, without considering what they are trying to do.</p>",
        "id": 153928584,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1515720852
    },
    {
        "content": "<p>When people ask me, I point them to this slideset I did sometime ago.<br>\n<a href=\"https://www.slideshare.net/BrianPostlethwaite1/fhir-server-design-review\" target=\"_blank\" title=\"https://www.slideshare.net/BrianPostlethwaite1/fhir-server-design-review\">https://www.slideshare.net/BrianPostlethwaite1/fhir-server-design-review</a></p>",
        "id": 153928586,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1515721012
    },
    {
        "content": "<p>Rather than full-blown schemas for everything, would it be worth samples showing different approaches for a subset of the attributes of a couple of resources?</p>",
        "id": 153928595,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1515722850
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> , <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , HAPI and Vonk all have similar schema's, so we could shed some light on that. In essense what Brian did in his slides, but a bit more elaborate. Mapping the resources as entities directly - yes, I agree on the challenges. Just about every relational model will end up with too much joining.</p>",
        "id": 153929307,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1516213868
    },
    {
        "content": "<p>well, there's 3 kinds of basic approaches:<br>\n- some kind of nosql database of one kind or other <br>\n- some kind of indexed tables of blobs<br>\n- some kind of relational table with massive join work to build resources (infrastructures exist for this)</p>",
        "id": 153929581,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1516356731
    },
    {
        "content": "<p>On the nosql/javascript side, I recently published <a href=\"https://www.npmjs.com/package/fhir-schemas\" target=\"_blank\" title=\"https://www.npmjs.com/package/fhir-schemas\">fhir-schemas</a> NPM package to standardize across the Node ecosystem.  I was getting a lot of similar requests to port the Meteor on FHIR schemas to Node apps, so I published the HL7 JSON Schemas onto NPM with a few edits and changes.  Within the Node/Javascript world, this should be a fairly standardized solution, since the library will work on database (Mongo v3.6), server, and client.</p>",
        "id": 153929842,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1516504759
    },
    {
        "content": "<p>There is yet another intriguing idea.  We are using Oracle Objects (part of a standard enterprise Oracle license) which is an OO abstraction on top of this powerful relational database. It offers a friendly front end and takes care of managing relational integrity behind the scenes.  No JOINS struggle.  Capable of depicting a part-whole relationship, including collections, which are implemented by Oracle as nested tables.  We successfully stood up several Resources, including Patient, which incorporates every single FHIR pattern, I think.    This type of backend enables smooth flow from OO front end, with the same object model, and no transformations. </p>\n<p>I don't know how a non-sql database can be of any use, as healthcare apps typically need to be strongly typed and ensure data integrity.  Unless it is for event audit, where JSON blobs suffice.  Oracle offers a JSON abstraction as well, so a good option for suitable non-sql use cases, with the benefit of a durable relational backing.</p>",
        "id": 153938050,
        "sender_full_name": "Malgorzata Schwab",
        "timestamp": 1518747699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191678\">@Abigail Watson</span>  How is it different from what is on the existing FHIR download site?  <a href=\"https://www.hl7.org/fhir/downloads.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/downloads.html\">https://www.hl7.org/fhir/downloads.html</a></p>",
        "id": 153938053,
        "sender_full_name": "Malgorzata Schwab",
        "timestamp": 1518748139
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191678\">@Abigail Watson</span>  How is it different from what is on the existing FHIR download site?  <a href=\"https://www.hl7.org/fhir/downloads.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/downloads.html\">https://www.hl7.org/fhir/downloads.html</a></p>\n</blockquote>\n<p>Well, they're ostensibly the same, in so far as I simply took what was available from the download site and re-packaged it for NPM.  However, there are some differences...  the download site still contains the JSON schemas broken up as separate files; while the new <code>fhir-schema</code> package uses the all-in-one-file format.  The NPM package also exposes the schemas as an ES6 export so Node/Javascript apps can cleanly import them.  I'm also still working through how best to export the valuesets, conceptmaps, profiles, etc. from the downloads page.  So for the time being, you only get the resource schemas in <code>fhir-schemas</code>.</p>",
        "id": 153938062,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1518748975
    }
]