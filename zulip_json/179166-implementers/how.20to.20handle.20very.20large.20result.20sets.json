[
    {
        "content": "<p>It's a question which poped up during the current IHE Connectathon:</p>\n<p>When performing a search request which results in a very large result set (this time it was AuditEvent with more than 40k results) without a  _count option, we ran out of resources or the request did take too long so that a timeout occured on client side.</p>",
        "id": 153821716,
        "sender_full_name": "Peter Scholz",
        "timestamp": 1460633101
    },
    {
        "content": "<p>....<br>\nis it possible to limit the size of the result set without paging mode ?</p>",
        "id": 153821718,
        "sender_full_name": "Peter Scholz",
        "timestamp": 1460633137
    },
    {
        "content": "<p>why wouldn't paging mode work? </p>",
        "id": 153821725,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460635482
    },
    {
        "content": "<p>3 reasons:<br>\n1st - client did not request paging<br>\n2nd  - I do paging by producing snaphots, which means before producing a single result page I have to do the full search to populate all search pages<br>\n3rd - to support correct links and bundle.total I would have to produce the complete result set (at least if I want to provide the \"last\" link and the result.total property)</p>",
        "id": 153821729,
        "sender_full_name": "Peter Scholz",
        "timestamp": 1460637020
    },
    {
        "content": "<p>have you seen the error 'too costly'? that's the first line of defense here</p>",
        "id": 153821731,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460637278
    },
    {
        "content": "<p>thanks for the hint, that looks good.</p>\n<p>the other solution might be the error \"incomplete\", if it is allowed add the partial results in the bundle in addition to an entry of operation outcome</p>",
        "id": 153821736,
        "sender_full_name": "Peter Scholz",
        "timestamp": 1460637615
    },
    {
        "content": "<p>The server is also allowed to provide its own default page size even if the client doesn't request one. I think no matter what this is a sensible thing to do.</p>",
        "id": 153821802,
        "sender_full_name": "James Agnew",
        "timestamp": 1460644909
    },
    {
        "content": "<p>IMO you should also enforce an upper limit on <code>_count</code> in the server and ignore (or reduce) client <code>_count</code> requests bigger than that in order to prevent DOS attacks</p>",
        "id": 153821803,
        "sender_full_name": "James Agnew",
        "timestamp": 1460644977
    },
    {
        "content": "<p>the default pagesize is quite ok, but that does only limit the amount of results on one page,<br>\nAs figured out earlier, the problem arises from long lasting queries, to populate all pages as I'm doing snapshots and provide links with relation=\"last\" as well as a total property of the Bundle resource to represent the total number of results </p>\n<p>So Grahame's info about an OperationOutcome resource and either the \"too costly\" or the \"incomplete\" error will be perfect for my.</p>\n<p>Either I will return an error with an OperationOutcome of \"too costly\" or what I prefer return a Bundle containing a limited resultset containing an entry of type OperartionOutcome with the \"incomplete\" error as the first entry, followed by the partial result (possibly paged too)</p>",
        "id": 153821809,
        "sender_full_name": "Peter Scholz",
        "timestamp": 1460646403
    },
    {
        "content": "<p>Ahhhh I get it. Yeah, that's a separate issue.</p>",
        "id": 153821810,
        "sender_full_name": "James Agnew",
        "timestamp": 1460646444
    },
    {
        "content": "<p>+1 for servers doing a default _count, and capping the size for the reasons already provided.</p>",
        "id": 153821875,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460695797
    },
    {
        "content": "<p>Our implementation doesn't need to save snapshots as we just page through the index from a defined point (when the search started)<br>\nThis works as no data is changed going back in time, as all changes are new versions (including deletes)</p>",
        "id": 153821876,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460696813
    },
    {
        "content": "<p>The back next links encode this info</p>",
        "id": 153821877,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1460696891
    }
]