[
    {
        "content": "<p>I would like to make a reverse chained query that fetches all Observations of all Encounters of all Tasks related to a specific Organization. I would also like to make a reverse chained query that fetches all Observations of all Encounters of all Tasks related to a specific PractitionerRole.</p>\n<p>Given these queries I find that the \"Task.owner.PractitionerRole=some_id\" filter matches both Organizations with that id and PractitionerRoles with the id. Even though I have specified the reference type, I get results not matching that type. The same applies for the other query \"Task.owner.Organization=some_id\" which also does not honor the reference type and does return matching PractionerRole resources. </p>\n<p>The model:</p>\n<ul>\n<li>Encounter.reasonReference references Observation</li>\n<li>Task.encounter references Encounter</li>\n<li>Task.owner is either a reference to an Organization or a PractitionerRole</li>\n</ul>\n<p>The queries:</p>\n<ul>\n<li>Observation?_has:Encounter:reason-reference:_has:Task:encounter:owner.organization=some_id</li>\n<li>Observation?_has:Encounter:reason-reference:_has:Task:encounter:owner.practitionerrole=some_id</li>\n</ul>\n<p>Any ideas on this? Bug, feature, or am I missing something?</p>\n<p>Thanks.</p>",
        "id": 263062870,
        "sender_full_name": "Jonas Toft",
        "timestamp": 1638217311
    },
    {
        "content": "<p>What server are you trying this on?</p>",
        "id": 263073316,
        "sender_full_name": "Paul Church",
        "timestamp": 1638223210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197072\">Paul Church</span> <a href=\"#narrow/stream/179166-implementers/topic/Reverse.20chaining.20with.20filtering.20on.20Task.2EOwner/near/263073316\">said</a>:</p>\n<blockquote>\n<p>What server are you trying this on?</p>\n</blockquote>\n<p>I am using HAPI FHIR 5.4.1</p>",
        "id": 263112919,
        "sender_full_name": "Jonas Toft",
        "timestamp": 1638261042
    },
    {
        "content": "<p>Does the 'self' link in the response bundle echo your entire search URL?</p>",
        "id": 263113399,
        "sender_full_name": "René Spronk",
        "timestamp": 1638261384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191372\">René Spronk</span> <a href=\"#narrow/stream/179166-implementers/topic/Reverse.20chaining.20with.20filtering.20on.20Task.2EOwner/near/263113399\">said</a>:</p>\n<blockquote>\n<p>Does the 'self' link in the response bundle echo your entire search URL?</p>\n</blockquote>\n<p>I believe so. When executing this query:<br>\nObservation?_has:Encounter:reason-reference:_has:Task:encounter:owner.practitionerrole=1952</p>\n<p>The return self link is:<br>\nObservation?_has%3AEncounter%3Areason-reference%3A_has%3ATask%3Aencounter%3Aowner.practitionerrole=1952</p>",
        "id": 263118691,
        "sender_full_name": "Jonas Toft",
        "timestamp": 1638264400
    },
    {
        "content": "<p>If that's the case, and you're sure there  is matching data on the server, I'd urge you to start looking for server-side issues. Perhaps using the <a class=\"stream\" data-stream-id=\"179167\" href=\"/#narrow/stream/179167-hapi\">#hapi</a>  stream on this forum.</p>",
        "id": 263119505,
        "sender_full_name": "René Spronk",
        "timestamp": 1638264879
    },
    {
        "content": "<p>Thanks for the help.</p>\n<p>I did some more digging. As it turns out I can actually query what I want.</p>\n<p>This query will give me Observations referenced by the PractitionerRole with id 1234:<br>\nObservation?_has:Encounter:reason-reference:_has:Task:encounter:owner=PractitionerRole/1234</p>\n<p>This query will give me Observations referenced by the Organization with id 5678:<br>\nObservation?_has:Encounter:reason-reference:_has:Task:encounter:owner=Organization/5678</p>\n<p>This query will give me Observations referenced by any Task.owner reference with id 1234 or 5678. Note the JIBBERISH at the end. This is the part that confused me. I would expect the server to return an error:<br>\nObservation?_has:Encounter:reason-reference:_has:Task:encounter:owner.JIBBERISH=1234,5678</p>",
        "id": 263158908,
        "sender_full_name": "Jonas Toft",
        "timestamp": 1638285312
    },
    {
        "content": "<p>I guess the self link doesn't contain the JIBBERISH part. If it does, talk to the authors of your server software. A server is supposed to largely ignore all parts of a search URL it doesn't understand, and to provide you with the best matching result set given what it does understand.</p>",
        "id": 263160905,
        "sender_full_name": "René Spronk",
        "timestamp": 1638286145
    },
    {
        "content": "<p>Re: jibberish, In general, servers are free to ignore search parameters they don't understand and are supposed to communicate to clients the list of search parameters they did understand by populating the Bundle.link[self] of the response. See <a href=\"http://build.fhir.org/search.html#errors\">http://build.fhir.org/search.html#errors</a></p>",
        "id": 263160974,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1638286181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191315\">Josh Mandel</span> <a href=\"#narrow/stream/179166-implementers/topic/Reverse.20chaining.20with.20filtering.20on.20Task.2EOwner/near/263160974\">said</a>:</p>\n<blockquote>\n<p>Re: jibberish, In general, servers are free to ignore search parameters they don't understand and are supposed to communicate to clients the list of search parameters they did understand by populating the Bundle.link[self] of the response. See <a href=\"http://build.fhir.org/search.html#errors\">http://build.fhir.org/search.html#errors</a></p>\n</blockquote>\n<p>I see Your point. However the JIBBERISH is part of the returned self link. As I read the docs that should not be the case unless it is used for the search.</p>",
        "id": 263253557,
        "sender_full_name": "Jonas Toft",
        "timestamp": 1638344106
    }
]