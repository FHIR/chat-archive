[
    {
        "content": "<p>The documentation for how to populate StructureDefinition.context was a little lacking.  As I was writing up a proposal for how to improve it, I started questioning the value of having contextType at all.  contextType isn't necessary to be able to parse the contexts - we can already figure out whether we're looking at a resource or resource path, a data type or data type path or an extension or extension path.  Really all it serves to do is prevent you from having an extension that could appear in a mixture of data type paths and resource or extension paths.  And I'm not clear on why we actually need such a constraint.</p>\n<p>If we eliminate StructureDefinition.contextType, you could send as many contexts as you liked - the name of any resource or data tyep or path of any resource element or data type element or the URL of any extension or other profile, optionally followed by a '#' and the id of an element within the profile.  So <code>string</code> or <code>string.id</code> or <code>Address.type.coding</code> or <code>Patient</code> or <code>Patient.name</code> or <code>http://hl7.org/fhir/StructureDefinition/patient-birthPlace</code> or <code>http://hl7.org/fhir/StructureDefinition/patient-citizenship#Extension.extension:code</code> or even <code>http://hl7.org/fhir/StructureDefinition/bodyweight#Observation.valueQuantity</code></p>\n<p>And of course we could use <code>*</code> if we wanted an extension to be useable anywhere.</p>\n<p>In addition to simplifying the model a bit, this proposal would open up a few capabilities we don't have now:<br>\n- you could define extensions and allow them to be used in both specific data types as well as specific resource locations or extensions<br>\n- you could define extensions and allow them to be used only in the context of resources or data types that adhered to specific profiles</p>\n<p>It would however loose the ability to say \"can appear at any position in any data type, but not at the root of a resource or in a backbone element\" or \"can appear at any position inside an extension, but not anywhere else\".  I'm not aware of any use-case where we'd want to do either of those things though.</p>\n<p>This is an FMM5 artifact, so we'd need to get feedback from the implementer community.  Do we want to make this change?  <span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 153924605,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1513111090
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>, your proposal seems perfectly reasonable. This change would be almost backwards compatible, except for a few academic/theoretical cases. Limited impact on existing logic.<br>\n(we could even allow complex fhirpath expressions... but added complexity probably outweighs the benefits)</p>",
        "id": 153924694,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1513160221
    },
    {
        "content": "<p>I just discovered an issue related to this.. when an extension has a context type of \"Element\" and a path of \"*\", can you use it on a the root element of a resource?</p>",
        "id": 153924711,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1513164751
    },
    {
        "content": "<p>Could we use \"*\" or \"Element\" or \"Resource\" as first part of the path to enable these cases?</p>",
        "id": 153924717,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1513165829
    },
    {
        "content": "<p>I was thinking along the same lines. Could we?</p>",
        "id": 153924723,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1513167230
    },
    {
        "content": "<p>Well, right now, a context type of \"Element\" makes no sense, because we say that when you declare the context type of a parent, that doesn't include the children</p>",
        "id": 153924751,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1513180181
    },
    {
        "content": "<p>Unless the intention is that contexts apply to \"extending\" children, but not to \"constraining\" children?</p>",
        "id": 153924752,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1513180245
    },
    {
        "content": "<p>Is there a wildcard capability in FHIRPath?  I'd prefer to align with FHIRPath as much as possible when defining contexts</p>",
        "id": 153924753,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1513180289
    },
    {
        "content": "<p>This thread sort of died.  My last question is sort of targeted at either <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> or <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span></p>",
        "id": 153926027,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1513626624
    },
    {
        "content": "<p>there isn't a wild card capability in that sense, I think</p>",
        "id": 153926028,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1513626716
    },
    {
        "content": "<p>Is there any value in adding such a capability?</p>",
        "id": 153926033,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1513627792
    },
    {
        "content": "<p>don't know</p>",
        "id": 153926039,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1513629118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>, your thoughts?</p>",
        "id": 153926041,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1513630823
    },
    {
        "content": "<p>What kind of wildcard capacity are you looking for exactly?</p>",
        "id": 153926042,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1513631738
    },
    {
        "content": "<p>I have always wondered why we have contextType and would support removing it. For the wildcard case, to specify that sort of thing in signatures we use the type Any, would that work?</p>",
        "id": 153926054,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1513633346
    },
    {
        "content": "<p>In fact, isn't context just a special case of a typeInvariant? And if you had no typeInvariant (or context) then it would apply everywhere. And with typeInvariant, you could express the more complex use cases, though I'm not sure we actually need that kind of power.</p>",
        "id": 153926055,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1513633418
    },
    {
        "content": "<p>So say Any or an explicit path and don't worry about being able to constrain to \"only data types\" or \"only resource elements\"?</p>",
        "id": 153926066,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1513637028
    },
    {
        "content": "<p>Actually, here, it should be Resource, not Any. This is strictly typed. Or Element for any contained element</p>",
        "id": 153926073,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1513637970
    },
    {
        "content": "<p>Well, the issue with specifying an abstract type is we explicitly say that specializations aren't included.  So if you say an extension applies to \"string\", it won't apply to \"code\" or \"oid\".  That also means that if you say it applies to \"Resource\", it wouldn't apply to \"DomainResource\" or \"AllergyIntolerance\"</p>",
        "id": 153926081,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1513641383
    },
    {
        "content": "<p>We can't have it both ways...</p>",
        "id": 153926082,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1513641392
    },
    {
        "content": "<p>do we explicitly say that? where?</p>",
        "id": 153926097,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1513648875
    },
    {
        "content": "<p>Comments on StructureDefinition.context:<br>\n\"...Note that a context of \"string\" doesn't mean that the extension can be used with one of the string patterns such as \"id\" etc.\"</p>",
        "id": 153926099,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1513649146
    },
    {
        "content": "<p>ok that's a specific call out, not a general thing. So we indeed have it both ways</p>",
        "id": 153926100,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1513649190
    },
    {
        "content": "<p>The language doesn't make it clear that it's a specific call-out.  I read it as a rule that would hold equially for integer or any other type.</p>",
        "id": 153926101,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1513650523
    },
    {
        "content": "<p>Should we tighten the language to note that this non-inheritance <em>only</em> applies to constraints of \"string\"?</p>",
        "id": 153930985,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1517010055
    },
    {
        "content": "<p>I don't think this made it into a GF issue, seems worthy of one....</p>",
        "id": 153938217,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1518791193
    },
    {
        "content": "<p>( or I missed it, so consider this just a double check ;-))</p>",
        "id": 153938218,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1518791208
    },
    {
        "content": "<p>I actually don't understand why we have the rule at all.  If I've got a regex extension on string, why can't I use it on a uri?  It'd be a bit weird to put it on a uuid, but there's nothing \"wrong\" about doing so.  Or perhaps a minimum length on a <code>code</code>.</p>",
        "id": 153938232,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1518795763
    },
    {
        "content": "<p>does look there should be a task</p>",
        "id": 153938270,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518811119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Why do we need the exception at all?</p>",
        "id": 153938287,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1518816127
    },
    {
        "content": "<p>I expected a task about removing context altogether, not about abstract types in context</p>",
        "id": 153938289,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518816347
    },
    {
        "content": "<p>I'm confused.  Extensions need to have context - something that indicates where they're allowed to appear.  I don't understand why extensions allowed on strings can't be used on specializations of string.</p>",
        "id": 153938290,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1518816448
    },
    {
        "content": "<p>sorry, I expected to see a task about removing contextType. Then the specialization issue would not come up</p>",
        "id": 153938291,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518816525
    },
    {
        "content": "<p>So remove contextType - just list the datatype name or path or resource name or path - and remove the constraint on inheritance from strings?</p>",
        "id": 153938303,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1518825235
    },
    {
        "content": "<p>well, the constraint becomes irrelevant, and it become about the expression then. you can say what you want</p>",
        "id": 153938310,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518828444
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15570\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15570\">GF#15570</a></p>",
        "id": 153938591,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1519053156
    }
]