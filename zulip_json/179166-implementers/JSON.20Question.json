[
    {
        "content": "<p>so in the JSON spec, we say: Objects are never empty</p>",
        "id": 153822092,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460815373
    },
    {
        "content": "<p>but we have no equivalent statement : Arrays are never empty</p>",
        "id": 153822093,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460815394
    },
    {
        "content": "<p>should we? it would be our general intent not to have syntactic redundancy, but this has never come up (I just noticed it because I am writing test cases for the validator)</p>",
        "id": 153822094,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460815435
    },
    {
        "content": "<p>I'm not sure I see the value in stipulating this. </p>",
        "id": 153822095,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1460818704
    },
    {
        "content": "<p>I mean, an implementation shouldn't choke on seeing an empty array for a 0..* element, in my opinion. </p>",
        "id": 153822096,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1460818750
    },
    {
        "content": "<p>agreed. it's often handy in javascript clients, for example, to init such things to empty, ready for layer population</p>",
        "id": 153822312,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1460992389
    },
    {
        "content": "<p>Agree with the others.. I don't see a benefit to disallowing this</p>",
        "id": 153822339,
        "sender_full_name": "James Agnew",
        "timestamp": 1461007909
    },
    {
        "content": "<p>We need to call attention to this for conversion purposes then.</p>",
        "id": 153822345,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1461008839
    }
]