[
    {
        "content": "<p>If a system has the following records with the given names as shown</p>\n<p>#1        Freda<br>\n#2        Fred<br>\n#3        Alfred<br>\n#4        fred<br>\n#5        Frederick</p>\n<p>My understanding of the search mechanism is the following</p>\n<p>/Patient?given=fred                       - this will yield #1,#2,#4,#5<br>\n/Patient?given:contains=fred    - this will yield #1,#2,#3,#4,#5<br>\n/Patient?given:exact=fred           - this will yield #4 (case sensitive)<br>\n/Patient?given:exact=Fred           - this will yield #2 (case sensitive)</p>\n<p>How can you query to retrieve #2 and #4 (i.e. Fred and fred )?</p>",
        "id": 222861886,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1610720012
    },
    {
        "content": "<p>given:exact=fred,Fred ;-)</p>",
        "id": 222862113,
        "sender_full_name": "René Spronk",
        "timestamp": 1610720143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191372\">@René Spronk</span> technically correct of course - but not a scalable solution. If the names were \"McAndrews\",\"MCAndrews\",\"mcAndrews\",\"mcandrews\" etc - then the client has a lot of work to do....</p>",
        "id": 222862493,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1610720312
    },
    {
        "content": "<p>Our <code>:exact</code> is case insensitive....</p>",
        "id": 222863165,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1610720630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191362\">@Richard Kavanagh</span>  I know, I know, but I couldn't resist ;-)  ..</p>",
        "id": 222863486,
        "sender_full_name": "René Spronk",
        "timestamp": 1610720764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span> Hmm - :exact is defined as \"For string: :exact returns results that match the entire supplied parameter, including casing and combining characters\" so capitalization matters</p>",
        "id": 222863584,
        "sender_full_name": "René Spronk",
        "timestamp": 1610720811
    },
    {
        "content": "<p>I know, but it did not seem the best idea to make it case-sensitive</p>",
        "id": 222863894,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1610720958
    },
    {
        "content": "<p>Non conformance is rarely a good idea ;-)</p>",
        "id": 222864155,
        "sender_full_name": "René Spronk",
        "timestamp": 1610721062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191372\">René Spronk</span> <a href=\"#narrow/stream/179166-implementers/topic/String.20searches.20with.20Modifiers/near/222864155\">said</a>:</p>\n<blockquote>\n<p>Non conformance is rarely a good idea ;-)</p>\n</blockquote>\n<p>I agree, but sometimes there isn't an alternative.</p>",
        "id": 222864517,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1610721220
    },
    {
        "content": "<p>you can always define your own modifier or parameter.</p>",
        "id": 222864722,
        "sender_full_name": "René Spronk",
        "timestamp": 1610721291
    },
    {
        "content": "<p>Modifiers are from a fixed ValueSet so I am not sure you can (easily) add your own. Adding a new search parameter is a pain as we'd need it for a number of different string-based searches. Client's won't be expecting it as it would not be intuitive</p>",
        "id": 222865143,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1610721496
    },
    {
        "content": "<p>You can't define your own qualifiers.  And the existing qualifiers are normative, so I'm afraid it's too late to change them.  You could propose adding a new qualifier in R5, but in R4, there's not choice other than a custom search parameter.</p>",
        "id": 222886515,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1610729221
    }
]