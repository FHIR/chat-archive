[
    {
        "content": "<p>In the FHIR 1.4.0 Java models, there are lots of references to uhn/HAPI, which didn't exist in 1.0.2. I'm wondering if this is a generation error or the intent is to use HAPI in the official FHIR Java code.</p>",
        "id": 153821311,
        "sender_full_name": "Igor Sirkovich",
        "timestamp": 1460492548
    },
    {
        "content": "<p>we are gradually merging the two code bases; the current code has dependencies on general hapi libraries </p>",
        "id": 153821318,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460495411
    },
    {
        "content": "<p>HAPI in turn uses the the RI java classes as the core model</p>",
        "id": 153821319,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460495458
    },
    {
        "content": "<p>so your question about HAPI vs the FHIR java code is no longer a binary choice</p>",
        "id": 153821320,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460495487
    },
    {
        "content": "<p>it's more - this is the code that you use, how do you wrap it? </p>",
        "id": 153821321,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460495500
    },
    {
        "content": "<p>Thank you Grahame. This merge actually causes lots of headache to our developers. They used Java models only and didn't plan to use HAPI. Now with 1.4.0 they've got lots of unnecessary (from their perspective) dependencies, coupled with HAPI Rest implementation, which is different from Rest we've been implementing. Also, our Swagger implementation stopped working because of the move to the polymorphic setter methods, for example, from \"public void setValueAsInteger(int theValue)\" to \"setValue(int theValue)\".</p>",
        "id": 153821327,
        "sender_full_name": "Igor Sirkovich",
        "timestamp": 1460496484
    },
    {
        "content": "<p>you should only get dependent on a single HAPI low level library</p>",
        "id": 153821351,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460498149
    },
    {
        "content": "<p>and we didn't take the setValue() method out. So I'm not sure that I follow</p>",
        "id": 153821358,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460498187
    },
    {
        "content": "<p>I mean the methods like setValueAsInteger(int theValue), setValueAsLong(long theValue), etc. were replaced in a new version with polymorphic methods setValue(int theValue), setValue(long theValue), etc. This caused our Swagger implementation to stop working as apparently Swagger canâ€™t handle overloaded methods.</p>",
        "id": 153821480,
        "sender_full_name": "Igor Sirkovich",
        "timestamp": 1460557041
    },
    {
        "content": "<p>I'm curious about how the HAPI inclusion is causing pain? It's true that the hapi core library contains the REST framework, and you need that library in order to use the RI structures now, but that doesn't mean you need to use HAPI's rest framework.</p>\n<p>I'm assuming you may need to pull in SLF4j as well, but that would be it I would think?</p>",
        "id": 153821501,
        "sender_full_name": "James Agnew",
        "timestamp": 1460559314
    },
    {
        "content": "<p>The concern is that HAPI REST is tightly coupled with the FHIR models rather than being a separate module and that since REST framerwork has multiple dependencies, loading all these dependencies might bloat the compilation and potentially cause some naming conflicts. Right now we can live with this, but our suggestion for the next release would be to decouple the REST framework from the models.</p>",
        "id": 153821540,
        "sender_full_name": "Igor Sirkovich",
        "timestamp": 1460570156
    },
    {
        "content": "<p>What coupling are you referring to? The HAPI REST framework depends on the model, but the model has no dependency on the REST framework that I'm aware of</p>",
        "id": 153821541,
        "sender_full_name": "James Agnew",
        "timestamp": 1460570211
    },
    {
        "content": "<p>In other words, yes you need to include the HAPI JAR if you're using RI structures, but unless you want to use the REST framework, it will never get touched by the classloader.</p>",
        "id": 153821543,
        "sender_full_name": "James Agnew",
        "timestamp": 1460570281
    },
    {
        "content": "<p>I believe they were referring to \"ca.uhn.fhir.rest.gclient...\" in models, e.g. in MedicationDispense model.</p>",
        "id": 153821545,
        "sender_full_name": "Igor Sirkovich",
        "timestamp": 1460570651
    },
    {
        "content": "<p>Ahh right, yes those are in there now. Those do not actually invoke any of the rest framework though, they will not cause conflicts, or bloat other than 6 extra classes being loaded by the classloader</p>",
        "id": 153821546,
        "sender_full_name": "James Agnew",
        "timestamp": 1460570736
    },
    {
        "content": "<p>Then this should be fine. Thank you for the explanation <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> .</p>",
        "id": 153821572,
        "sender_full_name": "Igor Sirkovich",
        "timestamp": 1460577911
    },
    {
        "content": "<p>Still, <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span>, their presence in the jar causes the jar to get big, even if the class loader doesn't load them; it would at least cache thir identity too, wouldn't it?</p>",
        "id": 153821588,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460579219
    },
    {
        "content": "<p>Not in a meaningful way. The JVM might cache the existance of extra classes, but until the classloader actually asks for them it wouldn't have a significant impact on memory...</p>\n<p>The imact this change has is that a server app being deployed to an app server (e.g. a WAR file being deployed to JBoss) will be a few Mb bigger. But that's a few Mb of disk space, not of memory consumption... which I wouldn't personally consider significant in the context of a server app.</p>\n<p>It is definitely significant in the context of an Android bundle though, which is something we're working on getting smaller...</p>",
        "id": 153821603,
        "sender_full_name": "James Agnew",
        "timestamp": 1460581769
    }
]