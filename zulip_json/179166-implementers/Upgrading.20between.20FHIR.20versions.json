[
    {
        "content": "<p>Interesting question from a colleague. If a messaging endpoint receives a fhir message, how does it know what FHIR version it conforms to?</p>",
        "id": 153830044,
        "sender_full_name": "David Hay",
        "timestamp": 1464296681
    },
    {
        "content": "<p>I would guess that you'd have version specific endpoints, and integrating partners would negotiate which endpoints to use out of band.</p>",
        "id": 153830045,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1464297308
    },
    {
        "content": "<p>yeah - but it doesn't feel the 'tidiest' of solutions though - and not that robust...</p>",
        "id": 153830047,
        "sender_full_name": "David Hay",
        "timestamp": 1464299255
    },
    {
        "content": "<p>it's a very natural solution for rest, but probably not so natural for messaging</p>",
        "id": 153830057,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1464301704
    },
    {
        "content": "<p>but it's the easiest for now. </p>",
        "id": 153830058,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1464301725
    },
    {
        "content": "<p>Well, the provider could have multiple conformance statements which have <code>fhirVersion</code> info, so the different messaging endpoints could be discoverable. I've never heard of a single messaging endpoint that handles breaking version changes in a robust way.</p>",
        "id": 153830200,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1464349405
    },
    {
        "content": "<p>common in the v2 world. In fact, I had one interface which seemed to send a random version - I could never figure out the pattern anyway. But as far as I know, this is a v2 pecularity </p>",
        "id": 153830285,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1464384695
    },
    {
        "content": "<p>+1</p>",
        "id": 153830286,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1464384764
    }
]