[
    {
        "content": "<p>Let's say I have a service that is able to read in patient Observations/Conditions and infer new Observations/Conditions as a result, which it might want to send back to the EHR or expose to the doctor directly.</p>\n<p>As a concrete example, imagine I'm given a series of hemoglobin concentration Observations, the most recent of which is a measurement of 8 g/dl (very low) made yesterday,  from which our service infers that the patient is anemic. Let's also imagine we have other Observations that indicate the patient does not have an iron deficiency, meaning the anemia is due to other causes.</p>\n<p>How do we then expose this information to a SMART app?</p>\n<p>One option we're considering is:<br>\n- send two Conditions, one for iron deficiency and one for anemia<br>\n- iron deficiency has <code>verificationStatus</code> = <code>refuted</code>, anemia has <code>verificationStatus</code> = <code>confirmed</code><br>\n- we reference the associated Observations as <code>evidence</code><br>\n- we leave most of the fields blank, since we cannot reference our service as the <code>asserter</code> and the <code>onset</code> value might be ambiguous (if the condition was inferred from many different observations that were made at different times)</p>\n<p>Another is:<br>\n- send two Observations, one asserting the patient is not iron deficient and one asserting the patient is anemic<br>\n- for their values, use a codeable concept meaning <code>no</code> and <code>yes</code>, respectively<br>\n- reference our own service as an Organization under <code>performer</code>, or perhaps as a<code>device</code>.<br>\n- potentially set the <code>method</code> of observation to be something like <code>algorithm</code><br>\n- reference the observations we used to infer them under <code>related</code> with <code>type</code> = <code>derived-from</code><br>\n- maybe set the status to <code>preliminary</code>, since these observations are not registered in the EHR / canonical source of the patient's information.</p>\n<p>The Observation case seems to be more applicable, since there is more explicit support for programmatic inferences, but the Condition case maps better to the boolean values.</p>\n<p>Anyone have thoughts on this?</p>",
        "id": 153834104,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466624339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191516\">@Andrew Ross</span> - have you heard of <a href=\"http://cds-hooks.org/\" target=\"_blank\" title=\"http://cds-hooks.org/\">CDS Hooks</a>?</p>",
        "id": 153834110,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1466624560
    },
    {
        "content": "<p>Do you expect your changes to just immediately take effect (in which case, PUT to replace the bad Observation -- though I should say most EHRs don't and perhaps won't support this), or are they more like suggestions of things the user might do (in which CDS Hooks could be a good interface point)</p>",
        "id": 153834111,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466624568
    },
    {
        "content": "<p>We've definitely heard of CDS hooks, but this is in the context of a more-or-less readonly SMART app</p>",
        "id": 153834112,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466624599
    },
    {
        "content": "<p>If it's read-only, then how are you anticipating \"sending\" these results?</p>",
        "id": 153834115,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466624688
    },
    {
        "content": "<p>We don't necessarily even want to -- it's informational, and if anything would be sent back to the EHR, it would be a suggested action they opt to complete, not any fact-type resource</p>",
        "id": 153834116,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466624751
    },
    {
        "content": "<p>Essentially, we get a set of FHIR Observations and Conditions from one service, do mapping and inference to expand and/or transform that set, then display something to the doctor within our application</p>",
        "id": 153834117,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466624831
    },
    {
        "content": "<p>Hmm. Well, if you're  really \"read-only\" the best you can do is display a message/suggestion to the clinician. If you can write data, the FHIR REST API is a good fit. If you want to insert concrete suggestions (with action buttons) into the EHR UI, CDS Hooks could help.</p>",
        "id": 153834118,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466624846
    },
    {
        "content": "<p>Right, unfortunately neither of those will work in our case, given the business/design requirements</p>",
        "id": 153834120,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466624865
    },
    {
        "content": "<p>the main question is whether there are any best practices for representing those inferences using FHIR in a way that distinguishes them from the raw/actually-measured observations we're getting from the EHR</p>",
        "id": 153834123,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466624913
    },
    {
        "content": "<p>If none of these 3 is a fit, what more precisely are you looking/hoping for?</p>",
        "id": 153834124,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466624914
    },
    {
        "content": "<p>I'm not clear on what this question means in the abstract (i.e. without understanding who is sending/receiving/consuming/requesting/displaying these inferred FHIR Resources).</p>",
        "id": 153834125,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466624955
    },
    {
        "content": "<p>Well, in concrete terms, let's say you have a service that determines whether a patient is anemic, and whether that anemia is chemotherapy-induced or due to other causes</p>",
        "id": 153834126,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466624983
    },
    {
        "content": "<p>The EHR only sends you basic observations of things like blood concentration measurements of various quantities</p>",
        "id": 153834127,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625006
    },
    {
        "content": "<p>And you'd like the EHR to invoke this service in a back-end, automated way (no user involvement)?</p>",
        "id": 153834128,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466625013
    },
    {
        "content": "<p>This is in the context of a SMART on FHIR application that has its own UI</p>",
        "id": 153834129,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625029
    },
    {
        "content": "<p>So you can't just show the suggestion in a textual manner in your SMART app UI?</p>",
        "id": 153834130,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1466625054
    },
    {
        "content": "<p>the service is launched from within the EHR, but doctors interact with it in a separate screen</p>",
        "id": 153834131,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625055
    },
    {
        "content": "<p>So when a user launches the app, the app can GET the relevant observations from the EHR.</p>",
        "id": 153834132,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466625056
    },
    {
        "content": "<p>Yes. Now technically we don't need to use FHIR to represent these resources in our SMART app, because it's not actually a part of the integration with the EHR anymore</p>",
        "id": 153834134,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625087
    },
    {
        "content": "<p>Then doctors interact, and the app can display advice like \"this patient doesn't have iron deficiency anemia. Consider eliminating the diagnosis.\"</p>",
        "id": 153834135,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466625087
    },
    {
        "content": "<p>Right</p>",
        "id": 153834137,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625098
    },
    {
        "content": "<p>But we're interspersing inferences with other data we're getting directly from FHIR, and generally feel that it's best practice to represent patient data (actual measurements/diagnoses + programmatic inferences) in a common format</p>",
        "id": 153834139,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625145
    },
    {
        "content": "<p>But it still feels important to distinguish the two</p>",
        "id": 153834141,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625187
    },
    {
        "content": "<p>Ideally in a way that points back to us and makes it clear that a CDS service made those inferences, not a doctor</p>",
        "id": 153834143,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625207
    },
    {
        "content": "<p>i think Observation supports all of that</p>",
        "id": 153834145,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625250
    },
    {
        "content": "<p>but it's not a natural fit for patient facts that are more like diagnoses</p>",
        "id": 153834146,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625265
    },
    {
        "content": "<p>But you're writing these inferred resources for your own app to consume? </p>",
        "id": 153834147,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466625271
    },
    {
        "content": "<p>Yes</p>",
        "id": 153834148,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625274
    },
    {
        "content": "<p>Might just slap a tag on 'em</p>",
        "id": 153834149,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466625279
    },
    {
        "content": "<p>Right :) that definitely works</p>",
        "id": 153834150,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625286
    },
    {
        "content": "<p>Basically I'm just wondering if this is a common use-case in other applications as well</p>",
        "id": 153834152,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625307
    },
    {
        "content": "<p>and if so, how others do it</p>",
        "id": 153834154,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625324
    },
    {
        "content": "<p>and/or validating that what we're doing isn't totally ad-hoc</p>",
        "id": 153834156,
        "sender_full_name": "Andrew Ross",
        "timestamp": 1466625339
    },
    {
        "content": "<p>Gotcha. I haven't heard of others applying a pattern to this problem, but let's see what we hear from the crowd!</p>",
        "id": 153834157,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1466625369
    },
    {
        "content": "<p>This use case sounds more like an Assessment  ( the A in SOAP)   why not use ClinicalImpression to convey the \"anemia not due to iron deficiency\"  ?    I am asking out of ignorance since perhaps CDS doesn't align with this at all.</p>",
        "id": 153834171,
        "sender_full_name": "Eric Haas",
        "timestamp": 1466626470
    },
    {
        "content": "<p>I've seen this done with production rules that just produce a fact in the working memory of the rules engine. To expose those types of inferences through the CDS guidance operation, we would use a GuidanceResponse that proposed the creation of the Observation resource.</p>",
        "id": 153834199,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1466632334
    },
    {
        "content": "<p>As far as distinguishing between a real vs an inferred observation, or other type of resource, that's a good use case, and we've talked about it in the context of CDS before, but don't have anything concrete to recommend at this point.</p>",
        "id": 153834200,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1466632402
    },
    {
        "content": "<p>It seems like a good case for an extension though, that could be applied to any resource, and you could use it to say, \"this resource was inferred by a device\".</p>",
        "id": 153834201,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1466632443
    },
    {
        "content": "<p>It's sort of like Provenance, except you want to know it directly on the resource.</p>",
        "id": 153834202,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1466632453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>  extension on what? Observation? </p>",
        "id": 153834451,
        "sender_full_name": "Eric Haas",
        "timestamp": 1466691939
    },
    {
        "content": "<p>A generic extension that could be applied to any resource.</p>",
        "id": 153834452,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1466692698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>  Why not use Observation.device? for example  I would think that would cover this use case instead of an extension.  Device = CDS system</p>",
        "id": 153834527,
        "sender_full_name": "Eric Haas",
        "timestamp": 1466702599
    },
    {
        "content": "<p>For Observation, you're right, I was thinking of something that could be handled the same way regardless of the resource type, so it would work for Condition as well.</p>",
        "id": 153834545,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1466706975
    }
]