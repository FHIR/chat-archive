[
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14673\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14673\">GF#14673</a> proposes that we relax the constraint \"There SHALL be no time zone\". MnM looks on this favorably, but 2 questions:<br>\n- is this a breaking change in theory<br>\n- is this a breaking change in prnciple. Specifically: does this break any reference implementationsa</p>",
        "id": 153937233,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518556895
    },
    {
        "content": "<p>It requires changes to get the to support it, but it's not a big change for Java / pascal reference implementations. What about DotNet? swift? <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> <span class=\"user-mention\" data-user-id=\"191339\">@Pascal Pfiffner</span> <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> (<span class=\"user-mention\" data-user-id=\"194833\">@Patrik Sundberg</span> )</p>",
        "id": 153937234,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518556990
    },
    {
        "content": "<p>The datetime already support timezone, so no extension needed there.<br>\nIn the Australian context we have an extension for accuracy of the datetime. So you could put the complete value in there, and prove the accuracy indicator</p>",
        "id": 153937238,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518558145
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/ig/hl7au/au-fhir-base/StructureDefinition-date-accuracy-indicator.html\" target=\"_blank\" title=\"http://build.fhir.org/ig/hl7au/au-fhir-base/StructureDefinition-date-accuracy-indicator.html\">http://build.fhir.org/ig/hl7au/au-fhir-base/StructureDefinition-date-accuracy-indicator.html</a></p>",
        "id": 153937239,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518558583
    },
    {
        "content": "<p>this really feels like something else to me</p>",
        "id": 153937240,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518558617
    },
    {
        "content": "<p>The item is asking to mix date and datetime values in some user interface. Feels like a local interpretation issue. Not something for the spec to me.</p>",
        "id": 153937241,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518558854
    },
    {
        "content": "<p>it's asking to allow timezone on date. the user interface stuff is requirements</p>",
        "id": 153937243,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518559051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> how would you propose representing a Date with a timezone?</p>",
        "id": 153937249,
        "sender_full_name": "Kevin Olbrich",
        "timestamp": 1518560063
    },
    {
        "content": "<p>exactly per schema spec:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"s2\">&quot;date&quot;</span> <span class=\"err\">:</span> <span class=\"s2\">&quot;2004-05-06Z&quot;</span>\n</pre></div>",
        "id": 153937250,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518560110
    },
    {
        "content": "<p>In ruby, we would have to parse that as a DateTime and then convert it to a Date.  Otherwise the timezone information would be ignored and parsing would not actually fail.  I could see that being a source of some subtle bugs and would thus be a breaking change.  However, in theory I don't think adding a timezone to a date and not requiring it is a breaking change from the semantic perspective.</p>",
        "id": 153937251,
        "sender_full_name": "Kevin Olbrich",
        "timestamp": 1518560818
    },
    {
        "content": "<p>how does ruby handle schema dates otherwise?</p>",
        "id": 153937252,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518560843
    },
    {
        "content": "<p>Is that an offset or time zone?<br>\nEg +10:00 or australia/Melbourne <br>\nAnd only be there if the full date is provided?</p>",
        "id": 153937296,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518571909
    },
    {
        "content": "<p>it's a timezone</p>",
        "id": 153937303,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518587422
    },
    {
        "content": "<p>I thought that time zones were identified by offsets from UTC, not by names.<br>\nSo Melbourne and Sydney are on AEDST (UTC +11:00), while Brisbane is on AEST (UTC + 10:00)</p>",
        "id": 153937304,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1518587938
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/List_of_time_zones_by_country\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/List_of_time_zones_by_country\">https://en.wikipedia.org/wiki/List_of_time_zones_by_country</a></p>",
        "id": 153937305,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1518588021
    },
    {
        "content": "<p>yes we don't use names</p>",
        "id": 153937306,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518588154
    },
    {
        "content": "<p>a few people use an extension for named timezone</p>",
        "id": 153937307,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518588174
    },
    {
        "content": "<p>I'd personally suggest an extension, no native date format is going to handle this, and expect that will be the tz offset, not the actual time zone. Tied with the actual date, not being the names is fine.<br>\nWe have some use cases with time only fields to associate a zone, so the when combined with a date can form a valid instant.<br>\nAlso would be a potentially breaking change otherwise, validations ensuring length is ... Etc</p>",
        "id": 153937317,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518596890
    },
    {
        "content": "<p>schema date allows this. So why would a native date not handle it? What would dot net do with a schema date with a timezone?</p>",
        "id": 153937331,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518606977
    },
    {
        "content": "<p>There's a noteable difference between offset and timezone</p>",
        "id": 153937387,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1518622394
    },
    {
        "content": "<p>so may want to clarify that?</p>",
        "id": 153937388,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1518622433
    },
    {
        "content": "<p>We've had issues in our system where we need a timezone and the offset is ambiguous.</p>",
        "id": 153937389,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1518622510
    },
    {
        "content": "<p>but otherwise, I agree, it will be hard for us to parse this. We likely wouldn't allow this type of date either, since we wouldn't have a way to store it in our system.</p>",
        "id": 153937390,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1518622568
    },
    {
        "content": "<p>XML Schema allows it, but is there an actual use case where it is significant? Isn't by definition the use of Date an indication that the precision of interest is 1 day, anything else is insignificant? As for .NET there is only a DateTime...</p>",
        "id": 153937391,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1518622585
    },
    {
        "content": "<p>the question will be how hard it will be to 422 it vs. having the code just ignore the extra data. I would need to try out a few things :)</p>",
        "id": 153937392,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1518622602
    },
    {
        "content": "<p>the use case is in the task. Certainly if you weren't interested, you would drop it</p>",
        "id": 153937455,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518634786
    },
    {
        "content": "<p>but DateTime doesn't do timezone anyway, so what's the difference for date?</p>",
        "id": 153937456,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518634805
    },
    {
        "content": "<p>In our system, we have the capability for most instants/dateTimes to store timezone and an offset. We do not have capability to store an offset for a date w/o time (and the libraries that we use to parse don't handle this type of data). We can, for some fields, store a date and time zone, but support for that is use case specific.</p>",
        "id": 153937463,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1518635650
    },
    {
        "content": "<p>so... you can drop timezone then...</p>",
        "id": 153937464,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518635701
    },
    {
        "content": "<p>Yeah, it just means I need to figure out how to do that properly with our date parsers, assuming that ignoring it is the acceptable path for FHIR</p>",
        "id": 153937466,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1518635735
    },
    {
        "content": "<p>rather than failing it (either path, we would need to update our parsers - as of now, it looks like this gets interpreted as a time not an offset by default)</p>",
        "id": 153937467,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1518635774
    },
    {
        "content": "<p>it would have to be clear that systems are not required to preserve/round-trip the timezone part</p>",
        "id": 153937468,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518635851
    },
    {
        "content": "<p>This is why i would suggest the extension, means every client has to hands it, not just ignore the extension for the case you have.<br>\nAnother case may be using information elsewhere such as the location of the service our patient to drive zone.</p>",
        "id": 153937470,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518636415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194833\">@Patrik Sundberg</span> do you want to comment?</p>",
        "id": 153937473,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518636974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191356\">@Jenni Syed</span> One possible way to handle this would be to parse it as a DateTime and then convert it to a pure date in the timezone your server is in.  Then you wouldn't need to store the timezone/offset.  In ruby it would be <code>DateTime.parse(date_with_timezone).to_date</code>.</p>",
        "id": 153937496,
        "sender_full_name": "Kevin Olbrich",
        "timestamp": 1518646569
    },
    {
        "content": "<p>I personally find it a bit odd that schema allows timezone offsets on dates (and times) but the fhir spec does not. I can think of multiple use cases where this information is valuable. But it would be quite concerning if a round trip store / retrieve to a fhir server was allowed to drop a provided timezone; I'm pretty sure that would cause bugs of various hard-to-diagnose kinds.</p>\n<p>I personally would prefer the direct encoding (\"2008-10-20+10:00\") over an extension, since it's more natural, but if we do it that way then implementations would have to preserve it in their internal representations. I'll defer to the wisdom of the crowd as to whether the ship has sailed on making a change of that type.</p>\n<p>While we're at it, I also think we should allow timezones on DateTimes consisting of only dates (the regex listed on the fhir datatypes page indicates that we don't currently), and possibly on times, though I don't personally need the latter right now.</p>",
        "id": 153937510,
        "sender_full_name": "Patrik Sundberg",
        "timestamp": 1518654568
    },
    {
        "content": "<p>we don't allow several things the schema spec does, including leap seconds</p>",
        "id": 153937511,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518654818
    },
    {
        "content": "<p>also, we don't ever say that servers have to round-trip faithfully. Yes, it's more reliable if servers do, but we live in the real world</p>",
        "id": 153937512,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518654858
    },
    {
        "content": "<p>Fair enough, leap second support is certainly quite low on my wish list. Guarantees similar to what exists (or not) for DateTimes with timezones should be sufficient.</p>\n<p>So is the main concern implementations that would fail in some way (fail validation, for example) if they were to see a date with a timezone?</p>",
        "id": 153937514,
        "sender_full_name": "Patrik Sundberg",
        "timestamp": 1518655264
    },
    {
        "content": "<p>yes, and whether the reference implementations show up any structural issues</p>",
        "id": 153937515,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518655563
    },
    {
        "content": "<p>And any javascript code that handles the date will need to handle it (which is unlikely) where ignoring the extension for the rare case that its there is harmless.</p>",
        "id": 153937582,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1518663184
    },
    {
        "content": "<p>The .NET library internally keeps the dates as strings (since there is no native format to represent partial dates and datetimes) - forcing the library to express it as a .NET DateTimeOffset will do the \"natural\" thing, that is turn 2014-01-01+01:00 into 2014-01-01 0:00 +01:00. </p>\n<p>So, I don't think this is a big change for the API.</p>",
        "id": 153937808,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1518708548
    },
    {
        "content": "<p>so I'm not sure where we stand on this:<br>\n- is it a breaking change in theory: probably not?<br>\n- is it a breaking change in practice: yes because most parsers will break, and there's downstream consequences<br>\n- do people like the change: mostly not so much, but few people have the requirement</p>",
        "id": 153937909,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518726423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194833\">@Patrik Sundberg</span> do you ever have the situation where the date timezone is different to the implicit timezone of the resource? Would it be better to mark the resource with a source timezone?</p>",
        "id": 153937910,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518726460
    },
    {
        "content": "<p>Some thoughts <br>\nDate can be truncated to level of precision available: 2018, 2018-11, 2018-11-21<br>\nTime cannot, it must be to the second: 12:25:36</p>\n<p>So imprecision in time is represented by using zeros, and should have another element to indicate that the zero is not significant, e.g. time=\"12:25:00\", precision=\"h:m\" or imprecision=\"-00:00:00+00:00:59\"</p>\n<p>DateTime with an unknown time is often done as date with zero for the time. This should have another element to indicate that the zero is not significant, e.g. dateTime=\"2013-06-08T00:00:00Z\", precision=\"yyyy-mm-dd\".<br>\nThis allows time zones for DateTime with unknown time while accepting that time and date formats represent imprecision in different ways.</p>\n<p>It does require us to confront imprecision in time.</p>",
        "id": 153937984,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1518735739
    },
    {
        "content": "<p>well, this is an orthogonal issue. We would prefer not to require seconds, but xml schema gives us no choice. No one has ever provided a use case for not having minutes.</p>",
        "id": 153937986,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518735894
    },
    {
        "content": "<p>XML schema allows it, but ISO 8601 does not as far as I can tell.</p>",
        "id": 153938068,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1518752067
    },
    {
        "content": "<p>I can't currently think of a use case where timezones differ between date / datetime fields within a resource, but it doesn't strike me as impossible that it could happen.</p>\n<p>I would prefer an extension on the primitive directly over an extension on the resource, to keep information local.</p>\n<p>In practice, I think i'll make the protobuf implementation keep timezones for date/datetime/time, and parse from either the main value or from an extension, depending on how this thread pans out. I still would strongly prefer time offsets on the values though, extensions are a bit unwieldy.</p>\n<p>Could we say that the SHALL won't apply until R4? Is that enough time to fix / test implementations? Or is this discussion already about R4, with R3 being frozen?</p>",
        "id": 153938164,
        "sender_full_name": "Patrik Sundberg",
        "timestamp": 1518779915
    },
    {
        "content": "<p>we've always said that a date SHALL not have a timezone. this discussion is about relaxing it for R4. My read is that we don't have enough support to relax that, and it'll be an extension.</p>",
        "id": 153938168,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518780438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  ??  I just went to the STU3 data types page and it says this; has this changed in R4?</p>\n<p>\"A date, date-time or partial date (e.g. just year or year + month) as used in human communication. If hours and minutes are specified, a time zone <strong>SHALL</strong> be populated.\"</p>\n<p>I can't imagine NOT having a timezone unless FHIR prescribed that everything MUST be converted to UTC; otherwise, how do you deal with the 'hour between timezone switches'?   </p>\n<p>(There can also be use cases where the data is sourced in a different timezone from where the FHIR server is running or where the clinician is reviewing the data.   I suppose it's up to some user interface to make the presentation of this date/time correct to the human viewer but how can computing algorithms work without knowing the timezone.  For example, think about using observations to calculate daily intake and output totals.)</p>",
        "id": 153938299,
        "sender_full_name": "John Silva",
        "timestamp": 1518820706
    },
    {
        "content": "<p>date, not dateTime</p>",
        "id": 153938311,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518828461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Since dateTime has become a bit intermingled in this thread, can we clarify whether timezone offsets are allowed on dates within the dateTime type? For example, are \"2001+02:00\" or \"2010-01-02Z\" allowed dateTimes? The wording on the stu3 data types page seem to indicate yes, since such patterns are allowed by xs:date and xs:gYear, but the provided regex says no.  (I would like the answer to be yes)</p>",
        "id": 153938488,
        "sender_full_name": "Patrik Sundberg",
        "timestamp": 1519007185
    },
    {
        "content": "<p>that would be an oversight on our part. The regex is the correct statement of our intent</p>",
        "id": 153938490,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1519007427
    },
    {
        "content": "<p>That's unfortunate. In our internal profiles, we require timezones on all dateTimes, dates, and times. It's quite difficult and error-prone to properly convert these types to instants on a timeline without that constraint. This is especially true when dealing with data from various different timezones that are not the same as the local timezone.</p>\n<p>Extensions work for this use case but it would be nicer if they were not quite so necessary.</p>",
        "id": 153938495,
        "sender_full_name": "Patrik Sundberg",
        "timestamp": 1519008773
    },
    {
        "content": "<p>well, you could propose changing it, but judging by the discussion, it wouldn't get any different reception than the discussion we've already had</p>",
        "id": 153938496,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1519008928
    }
]