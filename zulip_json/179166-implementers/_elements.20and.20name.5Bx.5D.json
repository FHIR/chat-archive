[
    {
        "content": "<p>Connectathon strikes again... <span class=\"user-mention\" data-user-id=\"191368\">@Brett Esler</span> just pointed out that I haven't implemented _elements in my server. So just doing that now, and I've found that we've never said anything about what you put in _elements for names like Observation.value[x]</p>",
        "id": 153914003,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508131652
    },
    {
        "content": "<p>is that not just a fhirpath expression?</p>",
        "id": 153914004,
        "sender_full_name": "Jim Steel",
        "timestamp": 1508132457
    },
    {
        "content": "<p>no they are not FHIRPath expressions - though that might suggest the solution, which is the one that comes naturally to me if I do nothing</p>",
        "id": 153914006,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1508133894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191757\">@Christiaan Knaap</span> <span class=\"user-mention\" data-user-id=\"192435\">@Corina Ciocanea</span> what solution did we choose for Vonk?</p>",
        "id": 153914026,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1508142440
    },
    {
        "content": "<p>We implemented this very recently, and a first check reveals that we don't account for it. If you have an Observation with valueQuantity: <br>\n- _elements=value: works, you get the valueQuantity in the result.<br>\n- _elements=valueQuantity (or any other value&lt;ElementType&gt;): does not work.<br>\nIndeed the spec could be clearer about this.</p>",
        "id": 153914042,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1508148239
    },
    {
        "content": "<p>Allowing _elements=valueQuantity, what to do with Observations that have e.g. valueString? Leave the value out of the Observation, or leave the whole Observation out of the searchresults?</p>",
        "id": 153914050,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1508148402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191757\">@Christiaan Knaap</span>  was that implemented in the serializer?<br>\nI had a branch of the fhir client that had a partial implementation working, but didn't get it to where I was happy with the results yet.</p>",
        "id": 153918956,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1510358376
    },
    {
        "content": "<p>I wrote a bunch of unit tests I'll have to dig up and try against your implementation(s)</p>",
        "id": 153918957,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1510358420
    },
    {
        "content": "<p>Now I've re-read that part of the spec, don't know why I was struggling with it.<br>\n(I was trying to handle photo.data, identifier.value, identifier.system, identifier.type.text - which is not what is in the spec anyway!)</p>",
        "id": 153918972,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1510384375
    },
    {
        "content": "<p>Was wondering if anyone has considered the implications of modifier extensions and _elements? should the modifier elements always come through? what if they are on a child property, not at the root?</p>",
        "id": 153919099,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1510461532
    },
    {
        "content": "<p>No need to include an element with modifier extensions if that's not one of the included <code>elements</code>.  The modifier would only change the interpretation of that element.  However you should certainly return modifiers on the root.</p>",
        "id": 153919107,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1510483626
    },
    {
        "content": "<p>No, it's not in the serializer. Time to discuss face2face this week :-)</p>",
        "id": 153919344,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1510602312
    }
]