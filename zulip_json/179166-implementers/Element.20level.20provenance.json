[
    {
        "content": "<p>Other than PATCH, has anyone considered annotating a resource to say what data has changed from a previous version?<br>\nI would like to able to show the difference between two versions of a document, so this is not necessarily a RESTful update.<br>\nAre there extensions that can annotate an element to say if it has changed?<br>\nCould Provenance point from the outside at an element of a resource (via <a href=\"http://element.id\">element.id</a>)? e.g. /Composition/1234#section1<br>\nPossibly it could if an extension was added to Provenance to say what element(s) of the target were altered?</p>",
        "id": 228969659,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614957307
    },
    {
        "content": "<p>IF you have a versioning server, that's done automatically.  Otherwise you can do it through audit</p>",
        "id": 228969857,
        "sender_full_name": "David Pyke",
        "timestamp": 1614957374
    },
    {
        "content": "<p>it shows you field by field what has changed?</p>",
        "id": 228970150,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614957487
    },
    {
        "content": "<p>Audit could, it depends on how you audit.  But a versioning server has all versions of a resource and you can deduce the changes from there</p>",
        "id": 228970279,
        "sender_full_name": "David Pyke",
        "timestamp": 1614957530
    },
    {
        "content": "<p>Provenance tells you it did change but not what the changes necessarily are</p>",
        "id": 228970375,
        "sender_full_name": "David Pyke",
        "timestamp": 1614957560
    },
    {
        "content": "<p>yes but the idea is not to deduce, but to declare. And also, there is no RESTful server in this scenario</p>",
        "id": 228970409,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614957578
    },
    {
        "content": "<p>Then I'd rely on AuditEvent for that.</p>",
        "id": 228970649,
        "sender_full_name": "David Pyke",
        "timestamp": 1614957663
    },
    {
        "content": "<p>if you have a versioning server, you can pull the previous version and compare it to the current version. Versioning servers are the right way to know details on what changed.</p>",
        "id": 228970678,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614957672
    },
    {
        "content": "<p>AuditEvent does not tell you what changed. It only indicates who, why, when, and which versions</p>",
        "id": 228970754,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614957701
    },
    {
        "content": "<p>thus if you need to know what elements changed from what values; then you need to require that the server be a versioning server.</p>",
        "id": 228970869,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614957731
    },
    {
        "content": "<p>as mentioned, I don't have a versioning server - or any server. And I don't want to deduce, I want someone to be able to declare changes, at an attribute level</p>",
        "id": 228970886,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614957737
    },
    {
        "content": "<p>You could use entity.detail to have the changes but it's not the best way but without a versioning server, not much can be don</p>",
        "id": 228970936,
        "sender_full_name": "David Pyke",
        "timestamp": 1614957762
    },
    {
        "content": "<p>I don't have a server. Let's say I am emailing you a FHIR document, and I want to annotate it with changes.</p>",
        "id": 228971157,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614957855
    },
    {
        "content": "<p>the method that is available in FHIR core is to use  a versioning server</p>",
        "id": 228971196,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614957871
    },
    {
        "content": "<p>Rik, then I'd include an AuditEvent with the changes listed in .entity.detail</p>",
        "id": 228971315,
        "sender_full_name": "David Pyke",
        "timestamp": 1614957930
    },
    {
        "content": "<p>specifically versioned Resources</p>",
        "id": 228971319,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614957931
    },
    {
        "content": "<p>Again, it's a hack but it would work.</p>",
        "id": 228971352,
        "sender_full_name": "David Pyke",
        "timestamp": 1614957944
    },
    {
        "content": "<p>John, he doesn't have a versioning server.  THink of a second way</p>",
        "id": 228971500,
        "sender_full_name": "David Pyke",
        "timestamp": 1614957984
    },
    {
        "content": "<p>so entity.detail.type could be \"resource-element\" and entity.detail.valueString could be the element name itself</p>",
        "id": 228971883,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614958134
    },
    {
        "content": "<p>then why not use a PDF file... I thought we were a standards org, forcused on use of FHIR</p>",
        "id": 228971993,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614958182
    },
    {
        "content": "<p>the appropriate use in FHIR is versioned Resources. Versioned resources can be sent in a message. or persisted into a document.</p>",
        "id": 228972163,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614958244
    },
    {
        "content": "<p>John - the FHIR standard includes documents</p>",
        "id": 228972189,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614958254
    },
    {
        "content": "<p>documents don't need to use REST</p>",
        "id": 228972221,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614958265
    },
    {
        "content": "<p>and it seems that only the RESTful server can do the processing. And in fact, they don't do this sort of processing for a client anyway.</p>",
        "id": 228972311,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614958305
    },
    {
        "content": "<p>how do I ask a server for a list of changes between two resources?</p>",
        "id": 228972403,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614958325
    },
    {
        "content": "<p><a href=\"https://www.hl7.org/fhir/versioning.html\">https://www.hl7.org/fhir/versioning.html</a></p>",
        "id": 228973477,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614958740
    },
    {
        "content": "<p>which does work in a Document too</p>",
        "id": 228973510,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614958749
    },
    {
        "content": "<p>sorry, wrong paste</p>",
        "id": 228973689,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614958819
    },
    {
        "content": "<p><a href=\"https://www.hl7.org/fhir/resource.html#versions\">https://www.hl7.org/fhir/resource.html#versions</a></p>",
        "id": 228973804,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614958865
    },
    {
        "content": "<p>thanks John, but where is the part that generates and exposes the list of changes for me? That is the issue at hand. I don't think this addresses that. I can understand \"no, you have the wrong use case, you should use a versioning server\" :-) but this doesn't seem to work even if I was using a versioning server. I don't need old versions, I am looking for deltas. Like tracked changes in Word, but for resources. Word doesn't just show me the old version and let me figure it out.</p>",
        "id": 228974207,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614959025
    },
    {
        "content": "<p>the historic versions are what you have. Working out what the difference between 3 and 4 is an exercise left to the client.</p>",
        "id": 228974461,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614959106
    },
    {
        "content": "<p>possibly a good toolkit could provide some functionality that you are looking for</p>",
        "id": 228974566,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614959148
    },
    {
        "content": "<p>I already have the new and old versions. What I want is a way, once I know the changes, to record those changes for others to see. AuditEvent and entity.detail seems to be the way.</p>",
        "id": 228974987,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614959292
    },
    {
        "content": "<p>The recommendation is to NOT put that kind of detail into Provenance or AuditEvent. The recommendation is to rely on versioning of resource instances. If you put this level of detail into AuditEvent, you will make the AuditEvent a duplicate database from the core FHIR endpoint.</p>",
        "id": 228975524,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614959524
    },
    {
        "content": "<p>there is no one that will stop you from doing this. It is simply against recommendation.</p>",
        "id": 228975602,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614959559
    },
    {
        "content": "<p>in this scenario there is no core FHIR endpoint</p>",
        "id": 228975969,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614959719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 228978178,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614960562
    },
    {
        "content": "<p>Note that there is a long standing approved FHIR-I CP <a href=\"http://jira.hl7.org/browse/FHIR-21284\">FHIR-21284</a> that would be a core method available in Provenance and AuditEvent to indicate specifically a Provenance record to a specific element level change in a target resource. This CP has not yet been applied to R5, and is unclear what it will look like, and thus how <a href=\"http://Provenance.target\">Provenance.target</a> would change to leverage it.</p>",
        "id": 228982014,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614961793
    },
    {
        "content": "<p>This method does NOT replicate the change in Provenance, but rather would allow one to express a subset of element changes as being the Provenance. This is, I think, different from what you are asking for</p>",
        "id": 228982305,
        "sender_full_name": "John Moehrke",
        "timestamp": 1614961871
    },
    {
        "content": "<p>If you have a document, there are a few 'typical' ways of communicating change:</p>\n<ul>\n<li>send both versions (you can have multiple versions of a resource in a document) which allows the receiver to see exactly what's changed</li>\n<li>use List which allows you to flag what's added, deleted and modified for things like drug lists, problem lists, etc.</li>\n<li>provide a text summary of changes in a clinical note</li>\n</ul>\n<p>There's no \"standard computable\" way of sharing a list of changes, though embedding details in AuditEvent is a kludge that is potentially workable.</p>",
        "id": 228985292,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614962901
    },
    {
        "content": "<p>@John thanks. Actually those look like exactly what I was originally looking for. <br>\nI am wanting to say \"these exact elements have changed\".  I was thinking that was provenance rather than audit but I am a little blurry on the difference. <br>\nIf this was approved is there a reason they were never applied? I see comments asking the same. It appears that they apply to all references.  Powerful. I would be happy to apply this change to R5 build.</p>",
        "id": 228990685,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614964805
    }
]