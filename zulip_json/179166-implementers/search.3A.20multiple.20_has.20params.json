[
    {
        "content": "<p><a href=\"http://build.fhir.org/search.html#has\" target=\"_blank\" title=\"http://build.fhir.org/search.html#has\">http://build.fhir.org/search.html#has</a> says that when there are multiple _has parameters, they are processed independently of other _has parameters. So if I have a model like below:</p>\n<p>pat1 &lt;- obs1 (category: abc, code=xyz)<br>\npat2 &lt;- obs2 (category: hhh, code=yyy)</p>\n<p>and I do a search like Patient?_has:Observation:subject:category=abc&amp;_has:Observation:subject:code=yyy I should get both pat1 and pat2?</p>",
        "id": 153951262,
        "sender_full_name": "Michael Calderero",
        "timestamp": 1523048706
    },
    {
        "content": "<p>If that's the case, then the reference servers I tested do not behave that way. <a href=\"http://tx.fhir.org/r4\" target=\"_blank\" title=\"http://tx.fhir.org/r4\">tx.fhir.org/r4</a> gives me an error right now but HAPI and Vonk both give me zero results instead of 2.</p>\n<p>Attached is a transaction bundle for a test case that I ran against Vonk. The last entry in the bundle contains the multiple _has parameters.<a href=\"/user_uploads/10155/nQTj4hcm5N7PKTeuMLC0DHgG/multiple_has_testcase_tx_bundle.xml\" target=\"_blank\" title=\"multiple_has_testcase_tx_bundle.xml\">multiple_has_testcase_tx_bundle.xml</a></p>",
        "id": 153951263,
        "sender_full_name": "Michael Calderero",
        "timestamp": 1523048967
    },
    {
        "content": "<p>Sorry ignore the previous attachment because it had an error. Use this instead: <a href=\"/user_uploads/10155/t4A2TBK8JJsQMDVkLcYmZe1R/multiple_has_testcase_tx_bundle.xml\" target=\"_blank\" title=\"multiple_has_testcase_tx_bundle.xml\">multiple_has_testcase_tx_bundle.xml</a></p>",
        "id": 153951264,
        "sender_full_name": "Michael Calderero",
        "timestamp": 1523049321
    },
    {
        "content": "<p>Hi Michael,</p>\n<p>The expected result of your query is that it returns patients that have both an observation with category=abc AND an observation with category=yyy. Which is indeed the case for zero patients in your example. However, if you would add a third observation to patient 2:</p>\n<p>pat2 &lt;- obs3 (category:abc, code=xyz)</p>\n<p>then your query would return pat2. </p>\n<p>The meaning of processing the _has parameters independently is that they do not refer to the same Observation. So if you change the query to: Patient?_has:Observation:subject:category=abc&amp;_has:Observation:subject:code=xyz this would still not return pat1.</p>\n<p>I hope this explanation helps!</p>\n<p>Lilian</p>",
        "id": 153951443,
        "sender_full_name": "Lilian Minne",
        "timestamp": 1523277294
    },
    {
        "content": "<p>Hello Lilian - thanks for the explanation.</p>\n<p>My confusion stems from the fact that <a href=\"http://build.fhir.org/search.html#has\" target=\"_blank\" title=\"http://build.fhir.org/search.html#has\">http://build.fhir.org/search.html#has</a> mentions that \"each _has parameter is processed independently of other _has parameters\" but doesn't give an example. So I looked through the rest of the spec and found <a href=\"http://build.fhir.org/search.html#chaining\" target=\"_blank\" title=\"http://build.fhir.org/search.html#chaining\">http://build.fhir.org/search.html#chaining</a>, which gives this example:</p>\n<blockquote>\n<p>Note that chained parameters are applied independently to the target resource. For example,</p>\n<p>GET Patient?general-practitioner.name=Joe&amp;general-practitioner.address-state=MN</p>\n<p>may return Patients cared for by Joe from CA and Jane from MN: no one practitioner need satisfy both conditions. E.g. the chains are evaluated separately. For use cases where the joins must be evaluated in groups, there are either Composite search parameters, or the _filter parameter.</p>\n</blockquote>\n<p>So I inferred that the behavior of 'multiple _has parameter' is the same as the excerpt above, except that it is in reverse. And, my original understanding of the excerpt's example above is:</p>\n<p>Example data:<br>\npat1 -&gt; prac1 (name: Joe, address-state: CA)<br>\npat2 -&gt; prac2 (name: Jane, address-state: MN)<br>\npat3 -&gt; prac1 and prac2</p>\n<p>My original understanding was the search 'Patient?general-practitioner.name=Joe&amp;general-practitioner.address-state=MN' would return all three (i.e. because of 'may return Patients' phrase). But from your explanation it sounds like it should only return pat3. Is that right?</p>",
        "id": 153951466,
        "sender_full_name": "Michael Calderero",
        "timestamp": 1523282285
    },
    {
        "content": "<p>Hi Michael, that's correct. I understand the confusion though :) <br>\n<span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> is this something to add in the explanation in the specs?</p>",
        "id": 153951467,
        "sender_full_name": "Lilian Minne",
        "timestamp": 1523284036
    },
    {
        "content": "<blockquote>\n<p>Hi Michael, that's correct. I understand the confusion though :) <br>\n<span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> is this something to add in the explanation in the specs?</p>\n</blockquote>\n<p>Yes, so the \"independently\" does not mean OR, indeed.  It's worth creating a gForge ticket item for, so we can discuss it more widely.</p>",
        "id": 153952241,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1523631234
    },
    {
        "content": "<p>Ok thanks. I will get around to creating the ticket sometime today (if no one else has done it).</p>",
        "id": 153952264,
        "sender_full_name": "Michael Calderero",
        "timestamp": 1523634598
    }
]