[
    {
        "content": "<p>gkustas opened <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<p>Please see and comment on this proposal. It is a Confluence documented exported to PDF. Please let me know if there is a better way to do this.</p>\n<p><a href=\"https://github.com/HL7/fhircast-docs/files/3232691/PO-FHIRCastWebsocketsSpecification-290519-0927-40.pdf\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/files/3232691/PO-FHIRCastWebsocketsSpecification-290519-0927-40.pdf\">PO-FHIRCastWebsocketsSpecification-290519-0927-40.pdf</a></p>\n<p>This proposal uses direct Websocket communication with a JSON payload (formatted with header and body elements).<br>\nI made some assumptions and recommendations that should probably be changed - this is my first attempt at this sort of a thing (international standard).</p>\n</blockquote>",
        "id": 166814850,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1559136746
    },
    {
        "content": "<p>gkustas <a href=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-500247100\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-500247100\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<p>I've added several updates, probably too many to enumerate. Mostly minor changes t the websocket message format, but more importantly use intent verification and use of the hub.channel.endpoint field for unsubscribing. This field will be the Websocket URL returned by the hub when the websocket client subscribes.</p>\n<p><a href=\"https://github.com/HL7/fhircast-docs/files/3269976/PO-FHIRCastWebsocketsSpecification-090619-1726-188.pdf\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/files/3269976/PO-FHIRCastWebsocketsSpecification-090619-1726-188.pdf\">PO-FHIRCastWebsocketsSpecification-090619-1726-188.pdf</a></p>\n</blockquote>",
        "id": 167717790,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1560115773
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503210403\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503210403\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<p>Hey @gkustas ,</p>\n<p>Apologies for the delayed response.  Keeping Intent Verification seems important to enable the hub to confirm the subscription details to the client. </p>\n<p>A few questions:</p>\n<p>1) <code>body</code> element?<br>\n2) Intent verification response should include the <code>hub.challenge</code>.<br>\n3) How should a client \"nack\" a websocket intent verification? In your proposal, the client responds <br>\n4) Should there be a websocket response from the client in the event notification ?<br>\n5) Should the request context change and unsubscribe also happen over wss?</p>\n<p>Isaac</p>\n</blockquote>",
        "id": 168417283,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1560875119
    },
    {
        "content": "<p>isaacvetter edited a <a href=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503210403\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503210403\">comment</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<p>Hey @gkustas ,</p>\n<p>Apologies for the delayed response.  Keeping Intent Verification seems important to enable the hub to confirm the subscription details to the client. </p>\n<p>A few questions:</p>\n<p>1) Does the <code>body</code> element accomplish anything beyond mirroring the HTTP model (and the <code>headers</code> element in the \"response\")?<br>\n2) Intent verification response should include the <code>hub.challenge</code>. Right?<br>\n3) How should a client \"nack\" a websocket intent verification? In your proposal, the client responds with an HTTP status, even though there's no HTTP. Is there a better way to do this?<br>\n4) Should there be a websocket response from the client in the event notification ?<br>\n5) Should the request context change and unsubscribe also happen over wss?</p>\n<p>Isaac</p>\n</blockquote>",
        "id": 168417592,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1560875366
    },
    {
        "content": "<p>gkustas <a href=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503240203\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503240203\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<p>Hi Isaac, thanks for getting back to me. First... Are you using the second<br>\nversion of my spec posted? Attaching it here to make sure.</p>\n<p>1. The intent of having a \"headers\" element and a \"body\" element is to<br>\ncreate a model that somewhat resembles an HTTP response/request. I don't<br>\nknow just how much we'll need it, but it seems to make sense in case of<br>\nmessage acknowledgements (Acks/Nacks).</p>\n<p>2. Yes, I guess it should, although to be honest, I'm not even sure the<br>\nintent verification is necessary at all. I like the fact that we're<br>\nfollowing the standard rest specification, but it is even possible for a<br>\nrogue application to sneak into a web socket connection? If so, then of<br>\ncourse we need the intent and the challenge. I'll just add it in for now.</p>\n<p>3. Depending on the error, probably something like this:<br>\n{<br>\n  \"headers\": {<br>\n    \"status\": \"INVALID\",<br>\n    \"statusCode\": \"400\"<br>\n  }<br>\n}<br>\n4. Yes, I neglected to put that into the spec, after the notification event<br>\ncode, but ALL messages over the socket require acknowledgement . See Json<br>\nFormat section: \"All websocket clients MUST respond with an acknowledgement<br>\nresponse.  The Header will contain a status and status code. A body section<br>\nis provided here, but there is not response data currently needed.\"<br>\n5. No, personally I think the client should use the REST API for everything<br>\nnot requiring a callback endpoint. This will be more consistent and require<br>\nless implementation on the hub side as well.</p>\n<p>On Tue, Jun 18, 2019 at 12:25 PM Isaac Vetter &lt;<a href=\"mailto:notifications@github.com\" title=\"mailto:notifications@github.com\">notifications@github.com</a>&gt;<br>\nwrote:</p>\n<blockquote>\n<p>Hey @gkustas &lt;<a href=\"https://github.com/gkustas\" target=\"_blank\" title=\"https://github.com/gkustas\">https://github.com/gkustas</a>&gt; ,</p>\n<p>Apologies for the delayed response. Keeping Intent Verification seems<br>\nimportant to enable the hub to confirm the subscription details to the<br>\nclient.</p>\n<p>A few questions:</p>\n<p>1. body element?<br>\n   2. Intent verification response should include the hub.challenge.<br>\n   3. How should a client \"nack\" a websocket intent verification? In your<br>\n   proposal, the client responds<br>\n   4. Should there be a websocket response from the client in the event<br>\n   notification ?<br>\n   5. Should the request context change and unsubscribe also happen over<br>\n   wss?</p>\n<p>Isaac</p>\n<p>â€”<br>\nYou are receiving this because you were mentioned.<br>\nReply to this email directly, view it on GitHub<br>\n&lt;<a href=\"https://github.com/HL7/fhircast-docs/issues/253?email_source=notifications&amp;email_token=ABODZ3TC5VQQY4TNHCK6RLDP3ED67A5CNFSM4HQM2N52YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODX7GDIY#issuecomment-503210403\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253?email_source=notifications&amp;email_token=ABODZ3TC5VQQY4TNHCK6RLDP3ED67A5CNFSM4HQM2N52YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODX7GDIY#issuecomment-503210403\">https://github.com/HL7/fhircast-docs/issues/253?email_source=notifications&amp;email_token=ABODZ3TC5VQQY4TNHCK6RLDP3ED67A5CNFSM4HQM2N52YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODX7GDIY#issuecomment-503210403</a>&gt;,<br>\nor mute the thread<br>\n&lt;<a href=\"https://github.com/notifications/unsubscribe-auth/ABODZ3U5FBE4ISF3GXNUBQLP3ED67ANCNFSM4HQM2N5Q\" target=\"_blank\" title=\"https://github.com/notifications/unsubscribe-auth/ABODZ3U5FBE4ISF3GXNUBQLP3ED67ANCNFSM4HQM2N5Q\">https://github.com/notifications/unsubscribe-auth/ABODZ3U5FBE4ISF3GXNUBQLP3ED67ANCNFSM4HQM2N5Q</a>&gt;<br>\n.</p>\n</blockquote>\n<p>-- <br>\nGeorge Kustas</p>\n</blockquote>",
        "id": 168437699,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1560879926
    },
    {
        "content": "<p>gkustas <a href=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503248527\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503248527\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<p>EDIT: I responded via email which truncated a lot of your post @isaacvetter . Please see additional comments:</p>\n<p>#1. Yes - I basically answered you with your question :-). It was cut off after \"the body element...\"<br>\n#3. So, yes, maybe there is a better way. How is the intent verification rejected via Rest? Isn't that callback done using HTTP? Maybe I'm not understanding...</p>\n</blockquote>",
        "id": 168439953,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1560881262
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503259034\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503259034\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<p>Hey @gkustas - I moved your content from the pdf into this wiki page: <a href=\"https://github.com/HL7/fhircast-docs/wiki/Websocket-proposal\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/wiki/Websocket-proposal\">https://github.com/HL7/fhircast-docs/wiki/Websocket-proposal</a> to provide additional transparency and edit history. </p>\n<p>(3) REST FHIRcast says that the client should respond with an HTTP 404 to reject a subscription. I'm just trying to get my head around the modeling of HTTP in websockets. </p>\n<p>(4) </p>\n<blockquote>\n<p>Should there be a websocket response from the client in the event notification ?<br>\nErrr, sorry about that, I'd scanned your design too quickly. I clarified that in the <a href=\"https://github.com/HL7/fhircast-docs/wiki/Websocket-proposal#websocket-notification-event\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/wiki/Websocket-proposal#websocket-notification-event\">wiki</a>. </p>\n</blockquote>\n<p>(5) </p>\n<blockquote>\n<blockquote>\n<p>Should the request context change and unsubscribe also happen over wss?<br>\n5. No, personally I think the client should use the REST API for everything<br>\nnot requiring a callback endpoint. This will be more consistent and require<br>\nless implementation on the hub side as well.</p>\n</blockquote>\n</blockquote>\n<p>Okay, we'll need to justify this. </p>\n</blockquote>",
        "id": 168442538,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1560882933
    },
    {
        "content": "<p>gkustas <a href=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503316928\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503316928\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<p>Great! Thanks Isaac. I'll use the wiki for future updates.</p>\n<p>Regarding the HTTP modelling of the web socket messages... I'm not married to the idea. It was a suggestion from Martin quite some time ago and it sounded like a good idea. I still think so, but perhaps there is a different model more appropriate for our limited use of web sockets. I'm open to suggestions.</p>\n<p>There are only three messages sent over a web socket in the proposed spec:<br>\n1. intent verification<br>\n2. event notification<br>\n3. client-&gt;hub ack/nack<br>\nI can't think of any headers that we'd ever need for intent verification, and likewise for event notification, since authentication isn't needed once the websocket has been connected.<br>\nThe client ack/nack messages use ONLY the header, in order to mimic HTTP response headers.</p>\n<p>We could simplify things by creating a model for client response to something like:</p>\n<p>{<br>\n    \"status\": \"NOTFOUND\",<br>\n    \"statusCode\": \"404\"<br>\n}</p>\n<p>Likewise, remove the \"body\" element from the event notification and intent verification messages.</p>\n</blockquote>",
        "id": 168456605,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1560892921
    },
    {
        "content": "<p>gedw99 <a href=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503470891\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503470891\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<p>What about Catchup scenarios ?</p>\n<p>I should explain my scenario.</p>\n<p>If the Client has a VIew Model (Resource Collection) and its changed on the Server, you want the Client to be able to request updates when it starts up, then you want to have an orderable sequence ID.<br>\nThis is useful when many clients are hitting the same log endpoint that holds the immutable CUD ( create, update, deletes)events for that collection.  The client knows what Sequence ID it is at, and so can just say give me a stream of all CUD event from this sequence forward in time.</p>\n<p>As far as i can see the proposal is generalised enough to enable this, but i wanted to raie this for discussion and to check my assertions. Also others maybe using Events in this way too.</p>\n</blockquote>",
        "id": 168489071,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1560934488
    },
    {
        "content": "<p>gkustas <a href=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503542413\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503542413\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<p>Thanks @gedw99 . I'm not sure if we will have the scenario you mention, but I agree that sequencing is needed. This is why the timestamp (along with a unique id) are sent with the event. Should events be received out of sequence, the client will be able to decide what to do with the \"old\" event. In the scenario where the old event becomes obsolete (like a simple context change (open study, close study), the client may simply choose to ignore it. Later, as we introduce structured data (like measurements), sequencing may not be important and the event can be processed.</p>\n<p>Please feel free to point out scenarios where this won't work. It's certainly not too late to change the spec.</p>\n</blockquote>",
        "id": 168502024,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1560947859
    },
    {
        "content": "<p>gkustas edited a <a href=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503542413\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503542413\">comment</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<p>Thanks @gedw99 . I'm not sure if we will have the scenario you mention, but I agree that sequencing is needed. This is why the timestamp (along with a unique id) are sent with the event. Should events be received out of sequence, the client will be able to decide what to do with the \"old\" event. In the scenario where the old event becomes obsolete, like a simple context change (open study, close study), the client may simply choose to ignore it. Later, as we introduce structured data (like measurements), sequencing may not be important and the event can be processed.</p>\n<p>Please feel free to point out scenarios where this won't work. It's certainly not too late to change the spec.</p>\n</blockquote>",
        "id": 168502095,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1560947902
    },
    {
        "content": "<p>bvdh <a href=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503667022\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503667022\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<blockquote>\n<p>Great! Thanks Isaac. I'll use the wiki for future updates.</p>\n<p>Regarding the HTTP modelling of the web socket messages... I'm not married to the idea. It was a suggestion from Martin quite some time ago and it sounded like a good idea. I still think so, but perhaps there is a different model more appropriate for our limited use of web sockets. I'm open to suggestions.</p>\n<p>There are only three messages sent over a web socket in the proposed spec:</p>\n<p>1. intent verification<br>\n2. event notification<br>\n3. client-&gt;hub ack/nack</p>\n<p>I can't think of any headers that we'd ever need for intent verification, and likewise for event notification, since authentication isn't needed once the websocket has been connected.<br>\nThe client ack/nack messages use ONLY the header, in order to mimic HTTP response headers.</p>\n<p>We could simplify things by creating a model for client response to something like:</p>\n<p>{<br>\n\"status\": \"NOTFOUND\",<br>\n\"statusCode\": \"404\"<br>\n}</p>\n<p>Likewise, remove the \"body\" element from the event notification and intent verification messages.</p>\n</blockquote>\n<p>Why would the client need to respond to an event or subscription confirmation over the websocket channel?</p>\n</blockquote>",
        "id": 168530320,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1560967234
    },
    {
        "content": "<p>bvdh deleted a <a href=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503667022\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-503667022\">comment</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<blockquote>\n<p>Great! Thanks Isaac. I'll use the wiki for future updates.</p>\n<p>Regarding the HTTP modelling of the web socket messages... I'm not married to the idea. It was a suggestion from Martin quite some time ago and it sounded like a good idea. I still think so, but perhaps there is a different model more appropriate for our limited use of web sockets. I'm open to suggestions.</p>\n<p>There are only three messages sent over a web socket in the proposed spec:</p>\n<p>1. intent verification<br>\n2. event notification<br>\n3. client-&gt;hub ack/nack</p>\n<p>I can't think of any headers that we'd ever need for intent verification, and likewise for event notification, since authentication isn't needed once the websocket has been connected.<br>\nThe client ack/nack messages use ONLY the header, in order to mimic HTTP response headers.</p>\n<p>We could simplify things by creating a model for client response to something like:</p>\n<p>{<br>\n\"status\": \"NOTFOUND\",<br>\n\"statusCode\": \"404\"<br>\n}</p>\n<p>Likewise, remove the \"body\" element from the event notification and intent verification messages.</p>\n</blockquote>\n<p>Why would the client need to respond to an event or subscription confirmation over the websocket channel?</p>\n</blockquote>",
        "id": 168530355,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1560967265
    },
    {
        "content": "<p>gkustas <a href=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-505524497\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253#issuecomment-505524497\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/253\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/253\">Issue #253</a>:</p>\n<blockquote>\n<p>@isaacvetter -</p>\n<p>I found a problem with the specification, and I will update the wiki if my proposal is sound. I thought I'd run it by you first:</p>\n<p>1. When a REST client subscribes, it sends hub.callback to a valid endpoint. In the hub, the callback is the \"unique identifier\" for this subscription. It persists a list of all subscriptions. <br>\n2. When a websocket client subscribes, it send a hub.channel.type = \"websocket\" and null for hub.channel. The hub creates a unique websocket endpoint and returns it to the client. MY HUB uses that endpoint to persist this subscription.<br>\n3. In a RESTful unsubscribe for a RESTful (non-websocket) client, the hub can easily look up the subscriber by using the hub.callback value. But in a websocket client, it cannot. It's null.<br>\nMy proposal is simple. I suggest that the websocket client MUST provide the websocket endpoint they are using on the hub in any REST method (such as unsubscribe) using hub.channel.endpoint.</p>\n<p>Make sense?</p>\n</blockquote>",
        "id": 168954043,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1561480701
    }
]