[
    {
        "content": "<p>isaacvetter opened <a href=\"https://github.com/HL7/fhircast-docs/issues/311\">Issue #311</a>:</p>\n<blockquote>\n<p>Especially for headless medical devices engaged in a FHIRcast session, it may be important for a subscriber to know the originating app of a syncerror event. </p>\n<p>Could the syncerror event include some identifier of the app that caused the error (maybe client id?) such that a sufficiently sophisticated subscriber could attempt to evaluate the impact of a syncerror?</p>\n</blockquote>",
        "id": 197607641,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1589485382
    },
    {
        "content": "<p>gkustas <a href=\"https://github.com/HL7/fhircast-docs/issues/311#issuecomment-634763250\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/311\">Issue #311</a>:</p>\n<blockquote>\n<p>@isaacvetter, @wmaethner  - <br>\nI'm getting to the \"syncerror\" part of this, but just a little background first...<br>\nAs an alternative to creating a \"smart Hub\" that provides the current topic session context on demand, we created two new events: DiagnosticReport-get and DiagnosticReport-set. The get is sent by a client wishing to know the current context (because perhaps it joined the party late or crashed). All other subscribers receive it and optionally respond to it with a DiagnosticReport-set. When subscribers receive the set message, they may find that the context is different from what they believe it to be. Hence, the syncerror is set.</p>\n<p>I was going to implement this and realized that the syncerror is missing a few things to make it useful. Like you said, we should probably have client ids, and possibly names (that would be in the OAuth2 records for the client). But also, the syncerror doesn't have any place for structured error info. It's just a string. It would be useful to know who sent the syncerror, and WHY it sent it. Missing an ImagingStudy? Wrong accession number?</p>\n<p>I'd love to get together with you guys and talk about the big picture some time. I'm hoping we can continue to keep the Hub \"agnostic\", but we're getting a lot of flak from Siemens, who claims that others in the WG-20 are not happy either.</p>\n</blockquote>",
        "id": 198913059,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1590595200
    },
    {
        "content": "<p>gkustas edited a <a href=\"https://github.com/HL7/fhircast-docs/issues/311#issuecomment-634763250\">comment</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/311\">Issue #311</a>:</p>\n<blockquote>\n<p>@isaacvetter, @wmaethner  - <br>\nI'm getting to the \"syncerror\" part of this, but just a little background first...<br>\nAs an alternative to creating a \"smart Hub\" that provides the current topic session context on demand, we created two new events: DiagnosticReport-get and DiagnosticReport-set. The get is sent by a client wishing to know the current context (because perhaps it joined the party late or crashed). All other subscribers receive it and optionally respond to it with a DiagnosticReport-set. When subscribers receive the set message, they may find that the context is different from what they believe it to be. Hence, the syncerror is set.</p>\n<p>I was going to implement this and realized that the syncerror is missing a few things to make it useful. Like you said, we should probably have client ids, and possibly names (that would be in the OAuth2 records for the client). But also, the syncerror doesn't have any place for structured error info. It's just a string. It would be useful to know who sent the syncerror, and WHY it sent it. Missing an ImagingStudy? Wrong accession number?</p>\n</blockquote>",
        "id": 199025489,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1590674297
    },
    {
        "content": "<p>bvdh <a href=\"https://github.com/HL7/fhircast-docs/issues/311#issuecomment-733627572\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/311\">Issue #311</a>:</p>\n<blockquote>\n<p>It would also be usefull for the end-user - it can tell what application/system to check in order to resolve the sync-error. Good idea.</p>\n</blockquote>",
        "id": 217868659,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1606301152
    },
    {
        "content": "<p>gkustas <a href=\"https://github.com/HL7/fhircast-docs/issues/311#issuecomment-733827591\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/311\">Issue #311</a>:</p>\n<blockquote>\n<p>We've encountered situations that I guess would call for a syncerror. Example:</p>\n<ol>\n<li>PACS client requests a DiagnosticReport-open with an ImagingStudy that has accession 12345</li>\n<li>PowerScribe receives the event and attempts to create the report, but finds that there are more than one accessions with that number. This can occur in a multi-site (multiple RIS) environment since accession numbers are not globally unique.</li>\n</ol>\n<p>In this situation, PowerScribe displays a dialog to the user and the request is ignored,</p>\n<p>If we send a syncerror event, what would it achieve, other than letting the other clients now that one of the other clients isn't in sync. What then? </p>\n<p>The reality is that there is only one person driving all the applications, and they can see what happened. In this case, I think the user might just open the correct accession from the PowerScribe worklist which would generate ANOTHER DiagnosticReport-open would would override the previous. Everyone would be in sync again.</p>\n<p>I'm still struggling to see the usefulness of the syncerror event.</p>\n</blockquote>",
        "id": 217910754,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1606323286
    },
    {
        "content": "<p>bvdh <a href=\"https://github.com/HL7/fhircast-docs/issues/311#issuecomment-844332635\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/311\">issue #311</a>:</p>\n<blockquote>\n<p>I've summarized the discussion during the connecthaton in the following text.</p>\n<h1>Sync-error topics from Connecthaton</h1>\n<p>This lists several topics that came up using the sync-error discussion during the connecthaton.</p>\n<h2>event.context.issue.severity in syncerror events</h2>\n<p>The specification does not clearly define the value to use for the severity field in a syncerror.</p>\n<p>When the event is sent by the hub (the event cannot be delivered), the severity SHALL be set to <code>fatal</code>.</p>\n<p>When the event is send by an application, the severity SHALL be set to <code>warning</code>.</p>\n<p>The syncerror event definition is to be updated with this content.</p>\n<h2>Identify application causing sync error</h2>\n<p>When a syncerror event is sent. The application should receive human readible information on why the event has happened.</p>\n<p>This information is to be included in the syncerror <code>event.context.issue.diagnostic</code> field. When the event is sent by an application, it can fill this with appropriate information.</p>\n<p>When the event is sent by the hub, the source of the information is not clear.  An application SHOULD include a <em>short</em> human readible application name in the subscribe call.</p>\n<p>The hub should use this information or information from the authorization server to provide provide a event.context.issue.diagnostic field that describes what happened and what application caused it.</p>\n<p>The resulting specification updates are:</p>\n<ol>\n<li>Update the syncerror event to state that the <code>event.context.issue.diagnostic</code> is mandatory and SHALL contain human-readable information on why the event has happened. The information SHALL indicate the device that causes the syncerror.</li>\n<li>The subscribe method will be extended with an optional field holding a short human-readable name for the applications that registered.</li>\n<li>The hub SHOULD use the indicated application name or the name retrieved from the authorization server to describe the device in the diagnostic message.</li>\n</ol>\n<h2>Clarify how to recover from an syncerror</h2>\n<p>The current specification does not clearly specify how applications and the hub can recover from an error condition.</p>\n<p>The following approach was decided by the connecthaton discussion.</p>\n<ol>\n<li>Applications that send an context-change event that resulted in a syncerror should resent them after about 10 sec. The event will be resent using the id and timestamp of the original event (this prevents race conditions with context-change events send by other applications).     </li>\n<li>Applications shall be able to receive resends of the same event, even at a later point in time, and handle it appropriately (check time stamp later than last, check if it changes the context or restates it).</li>\n</ol>\n<p>When the resent does not result in a syncerror, applications know the system is in sync again.</p>\n<p>An application is considered to be part of the topic until it unsubscribes or when the subscription expires. Until that time, any event that occurs that can not be delivered or is not followed will result in a syncerror.</p>\n<p>This results in the following proposed specification changes:</p>\n<ol>\n<li>Update the send event section with: Applications that send and context event that results in a sync-error SHOULD resent it (same time stamp) after some time (10 sec) to restablish context sync.</li>\n<li>Update the receive event section with: Applications SHALL be able to receive resends of the same event, even at a later point in time, and handle it appropriately (check time stamp later than last, check if it changes the context or restates it).</li>\n<li>Update the subscription section with: An application is considered to be part of the topic until it unsubscribes or when the subscription expires. Until that time, any event that occurs that can not be delivered or is not followed SHALL result in a syncerror.</li>\n</ol>\n<h2>Indicate how what happens when a connection drops</h2>\n<p>The specification is unclear on what is the expected behavior of clients and hubs when the connection is dropped.</p>\n<p>Related questions are:</p>\n<ul>\n<li>Does a connection drop result in a unsubscribe?  </li>\n<li>In what way does client detect that a connection is dropped?</li>\n</ul>\n<p>The following approach was agreed upon during the connecthaton.</p>\n<p>A client will detect a connection is dropped for websocket connections when the connection is dropped. Webhook connections require  some sort of heartbeat to detect a network drop.<br>\nFHIRcast will define an optional heartbeat event which will be send every 10 sec/an order of magitutde lower then the subscription timeout. The interval will indicated in the event.</p>\n<p>The event is RECOMMENDED for clients and hubs.</p>\n<p>Implementator feedback is requested for the need to support heartbeats for websockets.</p>\n<h3>Heartbeat event</h3>\n<p>The heartbeat event is sent regularly to indicate a channel is open.</p>\n<p>The name of the event is: heartbeat</p>\n<h4>Workflow</h4>\n<p>This event SHALL be send at least every 10 second. or an order of magnitude lower than the subscription time-out.</p>\n<h4>Context</h4>\n<p>The context of the -monitor event described in the table below.</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th align=\"left\">Optionality</th>\n<th>#</th>\n<th>type</th>\n<th><em>Description</em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>period</code></td>\n<td align=\"left\">REQUIRED</td>\n<td>1</td>\n<td>decimal</td>\n<td>The resend period in seconds</td>\n</tr>\n</tbody>\n</table>\n<p>The first field indicates the repeat interval. If an event is not received within this time period, the connection may be assumed to be lost.</p>\n<h2>Example</h2>\n<p>An example heartbeat event is indicated below.</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">\"timestamp\"</span><span class=\"p\">:</span><span class=\"s2\">\"2021-05-19T10:24:58.614989800Z\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span><span class=\"s2\">\"sdkasldkals;610101498614\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"event\"</span><span class=\"p\">:{</span>\n    <span class=\"nt\">\"context\"</span><span class=\"p\">:[</span>\n      <span class=\"p\">{</span> <span class=\"nt\">\"key\"</span><span class=\"p\">:</span><span class=\"s2\">\"period\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"decimal\"</span><span class=\"p\">:</span> <span class=\"s2\">\"10\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"hub.topic\"</span><span class=\"p\">:</span><span class=\"s2\">\"Topic1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"hub.event\"</span><span class=\"p\">:</span><span class=\"s2\">\"heartbeat\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</blockquote>",
        "id": 239468075,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1621446667
    },
    {
        "content": "<p>bvdh <a href=\"https://github.com/HL7/fhircast-docs/issues/311#issuecomment-920375442\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/311\">issue #311</a>:</p>\n<blockquote>\n<p>The commit does not cover this issue, just part of it. </p>\n</blockquote>",
        "id": 253487732,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1631739941
    },
    {
        "content": "<p>isaacvetter closed <a href=\"https://github.com/HL7/fhircast-docs/issues/311\">issue #311</a>:</p>\n<blockquote>\n<p>Especially for headless medical devices engaged in a FHIRcast session, it may be important for a subscriber to know the originating app of a syncerror event. </p>\n<p>Could the syncerror event include some identifier of the app that caused the error (maybe client id?) such that a sufficiently sophisticated subscriber could attempt to evaluate the impact of a syncerror?</p>\n</blockquote>",
        "id": 261159202,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1636650174
    }
]