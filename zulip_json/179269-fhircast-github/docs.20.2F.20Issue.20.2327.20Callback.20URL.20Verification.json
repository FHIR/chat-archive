[
    {
        "content": "<p>RazStorm opened <a href=\"https://github.com/fhircast/docs/issues/27\" target=\"_blank\" title=\"https://github.com/fhircast/docs/issues/27\">Issue #27</a></p>\n<blockquote>\n<p>This issue concerns the initial FHIRCast subscription to a topic. </p>\n<p>If an App is subscribing to the Hub, it transmits a callback-url (see <a href=\"http://fhircast.org/#synchronize\" target=\"_blank\" title=\"http://fhircast.org/#synchronize\">http://fhircast.org/#synchronize</a>). The App (Subscriber) itself is OAuth verified, and the general use-case can assume that the callback-url is for that App (Subscriber). However as the callback-url can be anything, one could potentially use the subscription as a form of broker where an App (Broker) subscribes a different App (Event Consumer) to the Hub. </p>\n<p>The problem that arises here, is that the EventReceiver can be \"anything\", including an Application that has not been verified with OAuth. That could lead to the problem that sensitive data is transmitted to an unautorized App (Event Consumer).</p>\n<p>Since the Hub already verifies the callback-url in the sense of \"do you really want to subscribe to this, and can you solve my challenge -&gt; proving that you implemented the subscription model\", one possible option is that the callback responds with an OAuth-Token verifying it in the security context, and ensuring that data being sent to it, is something it is allowed to see.</p>\n<p>This would also enable a broker pattern where one App (Broker) is responsible for matchmaking between the Hub (Event Producer) and several Subscribers (Event Consumer), while still managing verification of access though the Hub.</p>\n</blockquote>",
        "id": 153959478,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1526202387
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/fhircast/docs/issues/27#issuecomment-388777641\" target=\"_blank\" title=\"https://github.com/fhircast/docs/issues/27#issuecomment-388777641\">commented</a> on <a href=\"https://github.com/fhircast/docs/issues/27\" target=\"_blank\" title=\"https://github.com/fhircast/docs/issues/27\">Issue #27</a></p>\n<blockquote>\n<p>Hey @RazStorm , great analysis!</p>\n<blockquote>\n<p>This would also enable a broker pattern where one App (Broker) is responsible for matchmaking between the Hub (Event Producer) and several Subscribers (Event Consumer), while still managing verification of access though the Hub.</p>\n</blockquote>\n<p>In such a broker pattern, it seems like the hub wouldn't actually know anything about the downstream subscribers (event consumers), specifically because the broker&lt;-&gt; subscriber/consumer relationship is negotiated outside the Hub&lt;-&gt; broker relationship. Further, the Hub-granted, OAuth2 access_token is owned by the broker and traceable to it's client_id. Sharing this access_token with the subscribers/consumers would also grant those subscribers/consumers access to the Hub's FHIR server with the broker's scopes. For these reasons, I don't think that it makes sense for the Hub to require that the broker share it's access_token with the subscribers/consumers. </p>\n<p>I'd like to turn this issue around on you - Given that the app (subscriber not in a broker relationship), is already authenticating to the Hub when creating the subscription, why don't we remove the url verification step completely? </p>\n<p>This url verification is <a href=\"https://www.w3.org/TR/websub/#hub-verifies-intent\" target=\"_blank\" title=\"https://www.w3.org/TR/websub/#hub-verifies-intent\">required in WebSub</a>; in part, I think, because, the initial subscription transaction isn't authenticated. So, not requiring it would be a break from WebSub.</p>\n</blockquote>",
        "id": 153960227,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1526295393
    },
    {
        "content": "<p>RazStorm <a href=\"https://github.com/fhircast/docs/issues/27#issuecomment-388795102\" target=\"_blank\" title=\"https://github.com/fhircast/docs/issues/27#issuecomment-388795102\">commented</a> on <a href=\"https://github.com/fhircast/docs/issues/27\" target=\"_blank\" title=\"https://github.com/fhircast/docs/issues/27\">Issue #27</a></p>\n<blockquote>\n<p>Definitely an option. There still remains the risk that the Subscriber and the System specified in the callback are not one and the same. If we make this the responsibility of the Subscriber (i.e. Callback is assumed to have the exact same access rights / is the Subscriber) this is not a problem. -&gt; I.e. verification can be removed.</p>\n</blockquote>",
        "id": 153960291,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1526299910
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/fhircast/docs/issues/27#issuecomment-388800166\" target=\"_blank\" title=\"https://github.com/fhircast/docs/issues/27#issuecomment-388800166\">commented</a> on <a href=\"https://github.com/fhircast/docs/issues/27\" target=\"_blank\" title=\"https://github.com/fhircast/docs/issues/27\">Issue #27</a></p>\n<blockquote>\n<p>Hey @RazStorm </p>\n<blockquote>\n<p>There still remains the risk that the Subscriber and the System specified in the callback are not one and the same. </p>\n</blockquote>\n<p>Definitely. I think this is very likely to be different machines, but even (to your point) to also be entirely different systems. It's an important use-case.</p>\n<blockquote>\n<p>If we make this the responsibility of the Subscriber <br>\n<span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>\n<p>(i.e. Callback is assumed to have the exact same access rights / is the Subscriber) <br>\nPerhaps more explicitly, callback authorization is the responsibility of the subscriber, not the hub. </p>\n</blockquote>\n<p>I think that this makes sense to call out in the spec. I just created PR #30 adding this text:</p>\n<blockquote>\n<blockquote>\n<p>Within FHIRcast, the client that creates a subscriptions and the server that hosts the callback url are the same entity. If these roles are split, the Hub assumes that the same authorization and access rights apply to both systems.  </p>\n</blockquote>\n<p>this is not a problem. -&gt; I.e. verification can be removed.</p>\n</blockquote>\n<p>This leaves us incompatible with WebSub. Is that a big deal? </p>\n</blockquote>",
        "id": 153960331,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1526301132
    },
    {
        "content": "<p>RazStorm <a href=\"https://github.com/fhircast/docs/issues/27#issuecomment-388827528\" target=\"_blank\" title=\"https://github.com/fhircast/docs/issues/27#issuecomment-388827528\">commented</a> on <a href=\"https://github.com/fhircast/docs/issues/27\" target=\"_blank\" title=\"https://github.com/fhircast/docs/issues/27\">Issue #27</a></p>\n<blockquote>\n<p>I think #30 solves this according to the discussion :)</p>\n<p>Concerning WebSub -&gt; We should ask implementers if they want/need compliance with WebSub</p>\n<p>I think that if, so far we are compatible / using the WebSub spec, and this is the ONLY thing where we break with WebSub, then verification should be kept. From an implementer perspective it takes maybe about an hour to implement the verification on client and server side. However in that case the text in index.md </p>\n<blockquote>\n<p>Modeled after the common webhook design pattern and specifically the W3C WebSub RFC</p>\n</blockquote>\n<p>should read</p>\n<blockquote>\n<p>Modeled after the common webhook design pattern and is specifically <strong>compliant with</strong> the W3C WebSub RFC</p>\n</blockquote>\n<p>To me, at least it looked like FHIRCast is modelled after the WebSub, but was not aware it is compatible.</p>\n</blockquote>",
        "id": 153960420,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1526306506
    },
    {
        "content": "<p>jkiddo <a href=\"https://github.com/fhircast/docs/issues/27#issuecomment-388972899\" target=\"_blank\" title=\"https://github.com/fhircast/docs/issues/27#issuecomment-388972899\">commented</a> on <a href=\"https://github.com/fhircast/docs/issues/27\" target=\"_blank\" title=\"https://github.com/fhircast/docs/issues/27\">Issue #27</a></p>\n<blockquote>\n<p>Given that you base yourself on an existing WebSub implementation that actually follows the standard, then you've just ruined it if you won't follow the standard. I would encourage you guys to stay compatible with the standard and extend it - not break it - or the conformance to it.</p>\n</blockquote>",
        "id": 153960738,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1526334240
    },
    {
        "content": "<p>isaacvetter labeled <a href=\"https://github.com/fhircast/docs/issues/27\" target=\"_blank\" title=\"https://github.com/fhircast/docs/issues/27\">Issue #27</a></p>\n<blockquote>\n<p>This issue concerns the initial FHIRCast subscription to a topic. </p>\n<p>If an App is subscribing to the Hub, it transmits a callback-url (see <a href=\"http://fhircast.org/#synchronize\" target=\"_blank\" title=\"http://fhircast.org/#synchronize\">http://fhircast.org/#synchronize</a>). The App (Subscriber) itself is OAuth verified, and the general use-case can assume that the callback-url is for that App (Subscriber). However as the callback-url can be anything, one could potentially use the subscription as a form of broker where an App (Broker) subscribes a different App (Event Consumer) to the Hub. </p>\n<p>The problem that arises here, is that the EventReceiver can be \"anything\", including an Application that has not been verified with OAuth. That could lead to the problem that sensitive data is transmitted to an unautorized App (Event Consumer).</p>\n<p>Since the Hub already verifies the callback-url in the sense of \"do you really want to subscribe to this, and can you solve my challenge -&gt; proving that you implemented the subscription model\", one possible option is that the callback responds with an OAuth-Token verifying it in the security context, and ensuring that data being sent to it, is something it is allowed to see.</p>\n<p>This would also enable a broker pattern where one App (Broker) is responsible for matchmaking between the Hub (Event Producer) and several Subscribers (Event Consumer), while still managing verification of access though the Hub.</p>\n</blockquote>",
        "id": 154024470,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1544546189
    }
]