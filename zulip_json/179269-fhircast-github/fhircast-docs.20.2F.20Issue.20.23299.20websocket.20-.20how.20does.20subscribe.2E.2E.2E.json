[
    {
        "content": "<p>isaacvetter opened <a href=\"https://github.com/HL7/fhircast-docs/issues/299\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/299\">Issue #299</a>:</p>\n<blockquote>\n<p>When a subscriber initially requests a subscription, it performs an HTTP POST, like so:</p>\n<div class=\"codehilite\"><pre><span></span>POST https://hub.example.com\nContent-Type: application/x-www-form-urlencoded\n\nhub.mode=subscribe&amp;hub.events=patient-open,patient-close&amp;hub.lease_seconds=3600&amp;hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065&amp;hub.secret=shhh-this-is-a-secret&amp;hub.callback=https://myapp.com\n</pre></div>\n\n\n<p>The <code>hub.events</code> and <code>hub.lease_seconds</code> parameters are evaluated by the Hub, and the Hub responds, in the \"Intent Verification\" exchange with the actual <code>hub.events</code> and <code>hub.lease_seconds</code> for the newly created subscription. </p>\n<p>There's a few reasons for the Hub's ability to override a subscriber's requests content or length of a requested subscription:</p>\n<ol>\n<li>_authorization_: a subscriber mustn't be able to subscribe to events for which it's not authorized. It's the Hub's responsibility to ensure that a subscription is limited to, not only, the subscriber's authorized events, but also the length of the subscription mustn't overrun the lifetime of the authorization. </li>\n<li>_mere capability_: the <code>hub.events</code> list of events supplied by the subscriber asks the Hub: hey Hub! do you support these events? In some cases, the answer may be no. Ultimately, for <code>webhooks</code>, the Hub commits to sending specific event notifications in the \"Intent Verification\" exchange</li>\n</ol>\n<p>This all makes sense in <code>hub.channel.type</code>=<code>webhook</code>, but, <code>hub.channel.type=</code>websockets` currently doesn't include the \"Intent Verification\" exchange. How does the Hub communicate approved authorization or it's support for the requested events in a websocket subscription?</p>\n</blockquote>",
        "id": 180799473,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1573789013
    },
    {
        "content": "<p>isaacvetter edited <a href=\"https://github.com/HL7/fhircast-docs/issues/299\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/299\">Issue #299</a>:</p>\n<blockquote>\n<p>When a subscriber initially requests a subscription, it performs an HTTP POST, like so:</p>\n<div class=\"codehilite\"><pre><span></span>POST https://hub.example.com\nContent-Type: application/x-www-form-urlencoded\n\nhub.mode=subscribe&amp;hub.events=patient-open,patient-close&amp;hub.lease_seconds=3600&amp;hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065&amp;hub.secret=shhh-this-is-a-secret&amp;hub.callback=https://myapp.com\n</pre></div>\n\n\n<p>The <code>hub.events</code> and <code>hub.lease_seconds</code> parameters are evaluated by the Hub, and the Hub responds, in the \"Intent Verification\" exchange with the actual <code>hub.events</code> and <code>hub.lease_seconds</code> for the newly created subscription. </p>\n<p>There's a few reasons for the Hub's ability to override a subscriber's requests content or length of a requested subscription:</p>\n<ol>\n<li>_authorization_: a subscriber mustn't be able to subscribe to events for which it's not authorized. It's the Hub's responsibility to ensure that a subscription is limited to, not only, the subscriber's authorized events, but also the length of the subscription mustn't overrun the lifetime of the authorization. </li>\n<li>_mere capability_: the <code>hub.events</code> list of events supplied by the subscriber asks the Hub: hey Hub! do you support these events? In some cases, the answer may be no. Ultimately, for <code>webhooks</code>, the Hub commits to sending specific event notifications in the \"Intent Verification\" exchange</li>\n</ol>\n<p>This all makes sense in <code>hub.channel.type</code>=<code>webhook</code>, but, <code>hub.channel.type=</code>websockets` currently doesn't include the \"Intent Verification\" exchange. How does the Hub communicate approved authorization or its support for the requested events in a websocket subscription?</p>\n</blockquote>",
        "id": 180799786,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1573789569
    },
    {
        "content": "<p>isaacvetter edited <a href=\"https://github.com/HL7/fhircast-docs/issues/299\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/299\">Issue #299</a>:</p>\n<blockquote>\n<p>When a subscriber initially requests a subscription, it performs an HTTP POST, like so:</p>\n<div class=\"codehilite\"><pre><span></span>POST https://hub.example.com\nContent-Type: application/x-www-form-urlencoded\n\nhub.mode=subscribe&amp;hub.events=patient-open,patient-close&amp;hub.lease_seconds=3600&amp;hub.topic=fdb2f928-5546-4f52-87a0-0648e9ded065&amp;hub.secret=shhh-this-is-a-secret&amp;hub.callback=https://myapp.com\n</pre></div>\n\n\n<p>The <code>hub.events</code> and <code>hub.lease_seconds</code> parameters are evaluated by the Hub, and the Hub responds, in the \"Intent Verification\" exchange with the actual <code>hub.events</code> and <code>hub.lease_seconds</code> for the newly created subscription. </p>\n<p>There's a few reasons for the Hub's ability to override a subscriber's requests content or length of a requested subscription:</p>\n<ol>\n<li>_authorization_: a subscriber mustn't be able to subscribe to events for which it's not authorized. It's the Hub's responsibility to ensure that a subscription is limited to, not only, the subscriber's authorized events, but also the length of the subscription mustn't overrun the lifetime of the authorization. </li>\n<li>_mere capability_: the <code>hub.events</code> list of events supplied by the subscriber asks the Hub: hey Hub! do you support these events? In some cases, the answer may be no. Ultimately, for <code>webhooks</code>, the Hub commits to sending specific event notifications in the \"Intent Verification\" exchange</li>\n</ol>\n<p>This all makes sense in <code>hub.channel.type</code>=<code>webhook</code>, but, <code>hub.channel.type</code>=<code>websockets</code> currently doesn't include the \"Intent Verification\" exchange. How does the Hub communicate approved authorization or its support for the requested events in a websocket subscription?</p>\n</blockquote>",
        "id": 180799927,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1573789866
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/HL7/fhircast-docs/issues/299#issuecomment-554204275\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/299#issuecomment-554204275\">commented</a> on <a href=\"https://github.com/HL7/fhircast-docs/issues/299\" target=\"_blank\" title=\"https://github.com/HL7/fhircast-docs/issues/299\">Issue #299</a>:</p>\n<blockquote>\n<p>Although the \"Intent Verification\" step using <code>webook</code> is primarily intended to confirm ownership of the callback url, it also serves as confirmation of the subscription. This confirmation is similarly needed for <code>websocket</code>. </p>\n<p>We could minimally provide this subscription confirmation by mirroring the \"Intent Verification\" request over <code>websocket</code>, like so:</p>\n<h4><code>websocket</code> Subscription Confirmation</h4>\n<p>To confirm a subscription request, upon the subscriber establishing a websocket connection to the <code>hub.channel.endpoint</code> wss url, the Hub SHALL send a confirmation. This confirmation includes the following elements:</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Optionality</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>hub.mode</code></td>\n<td>Required</td>\n<td><em>string</em></td>\n<td>The literal string \"subscribe\".</td>\n</tr>\n<tr>\n<td><code>hub.topic</code></td>\n<td>Required</td>\n<td><em>string</em></td>\n<td>The session topic given in the corresponding subscription request.</td>\n</tr>\n<tr>\n<td><code>hub.events</code></td>\n<td>Required</td>\n<td><em>string</em></td>\n<td>A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request.</td>\n</tr>\n<tr>\n<td><code>hub.lease_seconds</code></td>\n<td>Required</td>\n<td><em>number</em></td>\n<td>The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. If provided to the client, the Hub SHALL unsubscribe the client once <code>lease_seconds</code> has expired and MAY send a subscription denial. If the subscriber wishes to continue the subscription it MAY resubscribe.</td>\n</tr>\n</tbody>\n</table>\n<h5><code>websocket</code> Intent Verification Request Example</h5>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;hub.mode&quot;: &quot;subscribe&quot;,\n  &quot;hub.topic&quot;: &quot;fdb2f928-5546-4f52-87a0-0648e9ded065&quot;,\n  &quot;hub.events&quot;: &quot;patient-open,patient-close&quot;,\n  &quot;hub.lease-seconds&quot;: 7200\n}\n~~~\n</pre></div>\n\n\n</blockquote>",
        "id": 180800861,
        "sender_full_name": "Github Notifications (FHIRcast)",
        "timestamp": 1573791240
    }
]