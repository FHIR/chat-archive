[
    {
        "content": "<p>kpshek opened <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>In discussion with @brynrhodes and <span class=\"user-mention\" data-user-email=\"isaacvetter@gmail.com\" data-user-id=\"558\">@Isaac Vetter</span> regarding aligning Clinical Reasoning and CDS Hooks, one of the topics of discussion was around how both projects handle the concept of prefetching data.</p>\n<p>Prefetching aims to address the following:<br>\n1. Allows the EHR to satisfy data that it may have already (eg, in memory)<br>\n2. Allows the EHR to calculate an optimal set of queries necessary to satisfy data across multiple CDS Services</p>\n<p>In Clinical Reasoning, this concept is defined in the <a href=\"https://www.hl7.org/fhir/servicedefinition-definitions.html#ServiceDefinition.dataRequirement\" target=\"_blank\" title=\"https://www.hl7.org/fhir/servicedefinition-definitions.html#ServiceDefinition.dataRequirement\">ServiceDefinition.dataRequirement</a> using the <a href=\"https://www.hl7.org/fhir/metadatatypes.html#DataRequirement\" target=\"_blank\" title=\"https://www.hl7.org/fhir/metadatatypes.html#DataRequirement\">DataRequirement</a> type. Compared to our prefetch definition, DataRequirement is a much more constrained model. Based upon @brynrhodes implementation experience, the constraints of DataRequirements allow for the calculation of an optimal set of FHIR queries to satisfy multiple DataRequirements. Our current prefetch definition (any FHIR query) would not actually allow EHRs to achieve our 2nd goal above.</p>\n<p>To help with this discussion, it would be good to take an inventory on the current prefetch FHIR queries for a variety of CDS Services that have been prototyped at Connectathons. With their feedback, we can see if constraining prefetch to the functionality of DataRequirements would still meet their needs.</p>\n</blockquote>",
        "id": 153888555,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494283322
    },
    {
        "content": "<p>jmandel <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300023390\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300023390\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>@kpshek can you explain a bit about what you mean by \"calculation of an optimal set of FHIR queries\"? Is this about generating raw/internal database queries to retrieve the data you need? In general, the more capabilities you allow the harder this gets; but for simpler search strings (e.g. <code>Observation?patient={{Patient.id}}</code> you could always optimize these directly (by recognizing them explicitly as having some structure that you know how to handle well).</p>\n<p>Obviously this is more work on the EHR side, but I'd imagine a couple of common cases would handle a good fraction of the load, while still giving service developers the flexibility to pre-fetch on more expressive REST API when needed. And if you see some pre-fetch requests that are \"too hard\" (whatever that might mean), you can always leave them out and allow the client to fetch directly.</p>\n<p>All that said: I agree that it would be good to take stock of what queries people are actually running. On my list so far are:</p>\n<ul>\n<li>patient (read)</li>\n<li>search for most recent set of bilirubin labs for a specific patient</li>\n<li>search for all med orders + statements for a patient</li>\n<li>search for most recent height + weight for a patient</li>\n<li>search for all allergies for a patient</li>\n<li>practitioner (read)</li>\n</ul>\n<p>None of these is super complicated. But looking at <a href=\"https://www.hl7.org/fhir/metadatatypes.html#datarequirement\" target=\"_blank\" title=\"https://www.hl7.org/fhir/metadatatypes.html#datarequirement\">https://www.hl7.org/fhir/metadatatypes.html#datarequirement</a>, it's not so straightforward either. It actually appears to enable many kinds of queries that the FHIR REST API search protocol does not (e.g. arbitrary dotted-path filters like <code>Observation.component[2].code</code>, where the REST API enumerates a specific list of search parameters).</p>\n</blockquote>",
        "id": 153888561,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494287926
    },
    {
        "content": "<p>niquola <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300273109\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300273109\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>Isn't it similar to what <a href=\"http://hl7.org/fhir/graphdefinition.html\" target=\"_blank\" title=\"http://hl7.org/fhir/graphdefinition.html\">GraphDefinition</a> is trying to solve?</p>\n</blockquote>",
        "id": 153888811,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494357448
    },
    {
        "content": "<p>jmandel <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300286368\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300286368\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>In principle, yes. This is definitely worth keeping an eye on, and we can make sure to share the CDS Hooks use cases as examples for <code>GraphDefinition</code>. Some concerns for the moment include:</p>\n<ul>\n<li>The STU3 <code>GraphDefintion</code> doesn't support backwards links yet (so starting from a patient there's no way to traverse outward to allergies, labs, etc).</li>\n<li>There's not yet a clear story for filtering labs by code, or meds by drug, etc</li>\n<li>Slicing and Profiling aren't readily supported in today's EHR FHIR implementations</li>\n</ul>\n</blockquote>",
        "id": 153888816,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494360558
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300322808\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300322808\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p><span class=\"user-mention\" data-user-email=\"jmandel@gmail.com\" data-user-id=\"9\">@Josh Mandel</span> - Yes, that is what I meant by \"calculation of an optimal set of FHIR queries\". Under our current model, we allow for any FHIR search string which, as you know, can result in some very complex queries (chained parameters, reverse chaining, contained, etc). I do not think any EHR can achieve our stated goal of calculating an optimal set of of database queries given an arbitrary set of prefetch queries.</p>\n<p>Certainly, this can be accomplished if the prefetch queries are sufficiently simple (as in the case of the <code>Observation?patient={{Patient.id}}</code> query you mentioned).</p>\n<blockquote>\n<p>Obviously this is more work on the EHR side, but I'd imagine a couple of common cases would handle a good fraction of the load, while still giving service developers the flexibility to pre-fetch on more expressive REST API when needed. And if you see some pre-fetch requests that are \"too hard\" (whatever that might mean), you can always leave them out and allow the client to fetch directly.</p>\n</blockquote>\n<p>I agree with this. However, if the purpose of prefetch is to allow the EHR to either return data it already holds cheaply (eg, memory) or optimally fetch it, why start with an API that allows for complex queries which I contend will always be 'left out' and on the client to fetch directly.</p>\n<blockquote>\n<p>None of these is super complicated. But looking at <a href=\"https://www.hl7.org/fhir/metadatatypes.html#datarequirement\" target=\"_blank\" title=\"https://www.hl7.org/fhir/metadatatypes.html#datarequirement\">https://www.hl7.org/fhir/metadatatypes.html#datarequirement</a>, it's not so straightforward either.</p>\n</blockquote>\n<p>Agreed. Perhaps @brynrhodes can specify some examples to help us all understand this model better?</p>\n<p>I've created <a href=\"https://github.com/cds-hooks/docs/wiki/Prefetch-Use-Cases\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/wiki/Prefetch-Use-Cases\">this new wiki page</a> to solicit feedback from the community on what prefetch queries are being used today (or what plan on being used). Hopefully this will provide use with some additional context that may help us decide if/what changes are made in this space.</p>\n</blockquote>",
        "id": 153888838,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494369809
    },
    {
        "content": "<p>jmandel <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300326487\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300326487\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<blockquote>\n<p>However, if the purpose of prefetch is to allow the EHR to either return data it already holds cheaply (eg, memory) or optimally fetch it</p>\n</blockquote>\n<p>Even if the EHR does no  better than to query its own database the same way it would for a rest call, it at least saves a round trip. That was my initial motivation here.</p>\n</blockquote>",
        "id": 153888841,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494371112
    },
    {
        "content": "<p>grahamegrieve <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300370952\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300370952\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>GraphDefinition will need to handle backwards links. It allows for slicing/profiling, but that's not mandatory (unless the problem makes it mandatory, which is a problem anyway). One of the advantages of graphdefinition is that the EHR can define a fixed number that they implement optimally, and let the client choose one. </p>\n</blockquote>",
        "id": 153888845,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494390767
    },
    {
        "content": "<p>jmandel <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300377602\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300377602\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>@grahamegrieve does GraphDefinition contemplate a way to filter which links are followed (e.g. from Patient --&gt; \"all MedicationRequests from the past 12 month prescribed by Dr. Jones\")? From the current design, it looks like this kind of filtering would be profile-based; is the thought to add some other constraint specification language (like FHIRPath, search params, or DataRequirement-style filters)?</p>\n</blockquote>",
        "id": 153888847,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494394005
    },
    {
        "content": "<p>brynrhodes <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300398669\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300398669\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>DataRequirement is more about defining the leaves of a graph, where the relationships between those leaves would be specified some other way (in CQL in a measure or decision support artifact). I've been thinking about a transformation between CQL and a GraphDefinition, seems like it would be straightforward, but haven't had time to get into the details. In general, the data requirements would still be computable from the leaves, and you could probably get some economy based on the relationships as well.</p>\n</blockquote>",
        "id": 153888859,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494401168
    },
    {
        "content": "<p>grahamegrieve <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300399160\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300399160\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>we weren't contemplating this... but it might be a good idea. And it would be good to not only be able to do it by profile. But there has to be a limit somewhere. </p>\n</blockquote>",
        "id": 153888861,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494401297
    },
    {
        "content": "<p>brynrhodes <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300400608\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300400608\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<blockquote>\n<p>It actually appears to enable many kinds of queries that the FHIR REST API search protocol does not (e.g. arbitrary dotted-path filters like Observation.component[2].code, where the REST API enumerates a specific list of search parameters).</p>\n</blockquote>\n<p>Yes, DataRequirements allows you to describe queries in terms of general paths, that's definitely an area that needs to be worked out. What we do right now is map the path to a search param, in the best case that works fine because it's one-to-one; anything beyond that needs to be addressed by the data access layer (either by augmenting or subsetting the search results).</p>\n<p>GraphDefinition works the same way, but has the advantage of being behind the service API. Where CQL can execute behind the API, it can use the paths directly, but when it's in front of it, there has to be a mapping.</p>\n</blockquote>",
        "id": 153888865,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494401696
    },
    {
        "content": "<p>brynrhodes <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300401880\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300401880\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>As far as examples, the <a href=\"http://build.fhir.org/Library.html\" target=\"_blank\" title=\"http://build.fhir.org/Library.html\">Library</a> examples have quite a few, here's a typical <a href=\"http://build.fhir.org/library-cms146-example.xml.html\" target=\"_blank\" title=\"http://build.fhir.org/library-cms146-example.xml.html\">example</a>.</p>\n</blockquote>",
        "id": 153888867,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494402077
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300409751\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300409751\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>However, if the purpose of prefetch is to allow the EHR to either return data it already holds cheaply (eg, memory) or optimally fetch it</p>\n</blockquote>\n<p>Even if the EHR does no better than to query its own database the same way it would for a rest call, it at least saves a round trip. That was my initial motivation here.</p>\n</blockquote>\n<p>While we remove the latency between the CDS Service and the FHIR server (since we're going from the EHR to FHIR Server), the performance impact to the user is actually worse in many cases. This is because the EHR is blocking on calling the CDS Services until the prefetching is finished. As such, the user is waiting longer for the initial cards to be returned.</p>\n</blockquote>",
        "id": 153888873,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494404223
    },
    {
        "content": "<p>jmandel <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300410708\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300410708\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>In practice, there are lots of opportunities for optimization — e.g. pre-fetching details required for a MedicationPrescription hook even before the user has entered a drug (so they can be ready the instant the EHR needs to otrigger the hook).</p>\n</blockquote>",
        "id": 153888875,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494404472
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300411573\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300411573\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>Absolutely!</p>\n<p>My apologies if my previous comments are being construed as questioning the value of prefetch as that is not my intention. I'm just trying to impress that I believe our current prefetch model is difficult to implement by EHRs in order to achieve our higher-order goals.</p>\n<p>Conversely, our current prefetch model is very simple for CDS Service providers to implement which I love and would like to maintain with any changes that may be introduced.</p>\n</blockquote>",
        "id": 153888877,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494404711
    },
    {
        "content": "<p>jmandel <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300414248\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300414248\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>This discussion is spot-on @kpshek. I agree with the question, and I like the idea of constraints that enable :-) Just want to make sure they have reasonable ergonomics, too. Saying \"we we support search-style URLs but the only allowed parameters are <code>patient</code>, <code>code</code>, and <code>date</code>\" might be worth considering, too.</p>\n</blockquote>",
        "id": 153888878,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494405375
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300414468\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300414468\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<blockquote>\n<p>Saying \"we we support search-style URLs but the only allowed parameters are patient, code, and date\" might be worth considering, too.</p>\n</blockquote>\n<p><img alt=\"👍\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f44d.png\" title=\"👍\"> </p>\n</blockquote>",
        "id": 153888879,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494405437
    },
    {
        "content": "<p>travisstenerson <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300552825\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300552825\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>Our intention for prefetch is to request all the procedures done on a patient for the purposes of the (cancer) disease in question, so we care about ProcedureRequest.reasonReference more so than particular codes or dates. We can't specify that reference in a DataRequirement, though we would like to. As well, Observations/Reports that result from those procedures (basedOn or result). We could filter by codes and/or dates, but the code list would be pretty lengthy. I suppose I'm asking for either suggestions, or to suggest that implementers be able to specify references in a prefetch.</p>\n</blockquote>",
        "id": 153889159,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494436891
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300553631\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300553631\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>Thanks for your use cases @travisstenerson! Would you mind documenting those use cases as concrete FHIR queries on <a href=\"https://github.com/cds-hooks/docs/wiki/Prefetch-Use-Cases\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/wiki/Prefetch-Use-Cases\">this wiki page here</a>?</p>\n</blockquote>",
        "id": 153889160,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494437062
    },
    {
        "content": "<p>travisstenerson <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300582545\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-300582545\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>I will when I'm able to @kpshek, still encoding the source material, it's rather extensive. Although now I see that the search parameters for Procedure and ProcedureRequest don't actually allow for searching that reference. I'll have to read more to see how I hope to grab this data. I will definitely add to the prefetch page when I have a set of queries.</p>\n</blockquote>",
        "id": 153889172,
        "sender_full_name": "Github Notifications",
        "timestamp": 1494443171
    },
    {
        "content": "<p>you could create a new category or set of category to filter on.</p>",
        "id": 153889833,
        "sender_full_name": "Eric Haas",
        "timestamp": 1494713427
    },
    {
        "content": "<p>kpshek milestoned <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>",
        "id": 153892317,
        "sender_full_name": "Github Notifications",
        "timestamp": 1496694047
    },
    {
        "content": "<p>dmccallie <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-306524103\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-306524103\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>Given the complexity of data needed for some CDS services, it might be necessary to expand this notion of \"prefetch\" to include additional approaches. For example, some CDS services may need a more or less continuous feed of selected data elements, such as via a background HL7 feed or (someday) a FHIR Subscription service.  And to avoid delays at crucial points in the workflow, perhaps some prefetch triggers could fire \"upstream\" of the critical decision? For example, perhaps a chart-open hook could allow the service to fetch the data expected to be needed later on during CPOE. Is it possible to use Hooks that way - as a \"prefetch only\" service, allowing for background fetching of complex data anticipated for later use?</p>\n</blockquote>",
        "id": 153892471,
        "sender_full_name": "Github Notifications",
        "timestamp": 1496763081
    },
    {
        "content": "<p>jmandel <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-306598213\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-306598213\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>Triggering a hook just to obtain data (in its own right, or to apply at a near-future time when a subsequent hook fires) is certainly an interesting and valid pattern, <span class=\"user-mention\" data-user-email=\"dmccallie@gmail.com\" data-user-id=\"674\">@David McCallie</span> (though I don't think it's something we've documented or thought about in any detail).</p>\n<p>Some of the other ideas, like establishing access to an HL7v2 feed (or FHIR subscription) are quite powerful and, to my mind, belong in a more comprehensive writeup like \"Applying CDS Hooks within a real-world enterprise environment\" – this would ideally be a write-up of some actual experience, calling out helpful patterns for combining CDS Hooks triggers with other technologies (but ideally we wouldn't need to specify any new standards in CDS Hooks for, say, how to establish access to an HL7 v2 feed). I could totally see this being a very important stopgap, with CDS Hooks providing the \"just-in-time\" trigger on top of a rich set of other data interfaces.</p>\n</blockquote>",
        "id": 153892557,
        "sender_full_name": "Github Notifications",
        "timestamp": 1496778772
    },
    {
        "content": "<p>dmccallie <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-306626460\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-306626460\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p><span class=\"user-mention\" data-user-email=\"jmandel@gmail.com\" data-user-id=\"9\">@Josh Mandel</span>, thanks. I didn't mean to imply that v2HL7 feeds or FHIR Subscriptions need to become part of the CDS Hooks specification. But I did mean to hint that in some cases, making the pre-fetch logic too complicated might be solving the problem at the wrong level.  If a service need lots of complex data, then perhaps pre-fetch is not the best way to get it.  \"Pre-hook,\" or consider a background feed instead.</p>\n</blockquote>",
        "id": 153892567,
        "sender_full_name": "Github Notifications",
        "timestamp": 1496785450
    },
    {
        "content": "<p>vlindhol <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-308005333\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-308005333\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>I am using CDS Hooks for a CDS that takes \"everything\" about a Patient (observations, conditions, procedures, medications, allergies). I am using prefetch in a very simple way: just get the previously mentioned resources filtered by <a href=\"http://Patient.id\" target=\"_blank\" title=\"http://Patient.id\">Patient.id</a> and code systems we support. This can be done both by prefetch and (afaik) ServiceDefinition.dataRequirement.</p>\n<p>On thing I am missing, however, is the ability to provide a \"filter list\". In the environments our CDS operates in, getting for example every Observation for a patient may result in data that is tens or even hundreds of megabytes. So to save bandwidth we need to constrain the results.</p>\n<p>I am following the <code>lastn</code> operator with great interest, although I would like even more granularity. In our current non-FHIR interface we filter the results client-side for a lot of observation codes both by date and number, i.e. for a specific code we get e.g. the observations done within 2 years and constrain their number to five. These filters are defined per code, since the number of clinically relevant observations vary. There is also a fallback default filter.</p>\n<p>I'm not sure how to formally represent such a filter list in FHIR, prefetch and dataRequirement both seem insufficient. I'm guessing it would be easier to add that kind of functionality to dataRequirement, while prefetch would require support for doing multiple searches that would, in the end, produce one bundle.</p>\n</blockquote>",
        "id": 153893325,
        "sender_full_name": "Github Notifications",
        "timestamp": 1497329022
    },
    {
        "content": "<p>brynrhodes <a href=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-308008102\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47#issuecomment-308008102\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>\n<blockquote>\n<p>For DataRequirement specifically, we've had that request before. The current design specifically excludes limiting by number of results because it adds another type of operation that the data access layer has to implement. However, given the number of times it's been requested, and the clear usefulness of limiting the number of results, it seems like it's probably time to add it.</p>\n<p>I've submitted a tracker for this <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13515\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13515\">here</a>.</p>\n</blockquote>",
        "id": 153893328,
        "sender_full_name": "Github Notifications",
        "timestamp": 1497330469
    },
    {
        "content": "<p>kpshek assigned <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>",
        "id": 153896510,
        "sender_full_name": "Github Notifications",
        "timestamp": 1499718905
    },
    {
        "content": "<p>kpshek closed <a href=\"https://github.com/cds-hooks/docs/issues/47\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/47\">Issue #47</a></p>",
        "id": 153901693,
        "sender_full_name": "Github Notifications",
        "timestamp": 1502389068
    }
]