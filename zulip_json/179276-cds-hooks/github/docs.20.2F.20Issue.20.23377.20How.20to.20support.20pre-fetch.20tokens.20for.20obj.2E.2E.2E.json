[
    {
        "content": "<p>isaacvetter opened <a href=\"https://github.com/cds-hooks/docs/issues/377\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377\">Issue #377</a></p>\n<blockquote>\n<p>As part of the <a href=\"https://cds-hooks.org/hooks/template/#context\" target=\"_blank\" title=\"https://cds-hooks.org/hooks/template/#context\">specification of each hook</a>, each field defined in <code>context</code> is explicitly labeled whether it can be used as a Prefetch Token.</p>\n<p>Prefetch tokens are important because they are how a CDS service specifies any specific FHIR queries to be run as part of its pre-fetch during the request. A CDS service's discovery endpoint specifies it's pre-fetch as a <a href=\"https://cds-hooks.org/specification/1.0/#prefetch-template\" target=\"_blank\" title=\"https://cds-hooks.org/specification/1.0/#prefetch-template\">pre-fetch template</a>.</p>\n<p>Currently, our pre-fetch token syntax is nice and simple - it only supports top-level elements. For example, a service responding to the <code>[order-review](https://cds-hooks.org/hooks/order-review/)</code> hook can request pre-fetch data about the patient, like so:</p>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;prefetch&quot;: {\n    &quot;p&quot;: &quot;Patient/{{context.patientId}}&quot;\n  }\n}\n</pre></div>\n\n\n<p>But the service has no way to request pre-fetch data that's based upon the <code>orders</code> object which is also sent in <code>context</code>. Unlike the simple, valued <code>{{context.patientId}}</code>, relating a prefetch template to the orders being sent would necessitate a prefetch key such as: <code>{{context.orders.MedicationRequest.id[0]}}</code> or something even more complicated using FHIRPath. </p>\n<p>This inability to refer to objects in <code>context</code> is a gap.</p>\n<p>Is there a simple, targeted method to enable this? What about something as straighforward as _context.&lt;prefetch key&gt;.&lt;FHIR resource name&gt;.id_ returning a simple comma-delimited string of FHIR identifiers that could be subsequently used in a search? </p>\n</blockquote>",
        "id": 153980366,
        "sender_full_name": "Github Notifications",
        "timestamp": 1533154614
    },
    {
        "content": "<p>lmckenzi <a href=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409740733\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409740733\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/377\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377\">Issue #377</a></p>\n<blockquote>\n<p>What Isaac actually proposed where it says _context...id_ before Github intervened was <code>context.&lt;prefetch key&gt;.&lt;FHIR resource name&gt;.id</code></p>\n<p>I'd be in favor of this.  The reason for putting resource names in is to allow you to search by each resource because the ids aren't unique across resource types.  The comma-separated approach allows you to say something like DeviceRequest?_id={{context.orders.medicationRequest.id}}&amp;_include=DeviceRequest.device</p>\n<p>Though that does mean that your prefetch space is going to contain both device requests and devices, the former being redundant with what's already in the hook invocation.  </p>\n</blockquote>",
        "id": 153980530,
        "sender_full_name": "Github Notifications",
        "timestamp": 1533161231
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409741824\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409741824\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/377\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377\">Issue #377</a></p>\n<blockquote>\n<blockquote>\n<p>I'd be in favor of this. The reason for putting resource names in is to allow you to search by each resource because the ids aren't unique across resource types.</p>\n</blockquote>\n<p>So is <code>context.&lt;prefetch key&gt;.&lt;FHIR resource name&gt;.id</code> only important in the case where the context value can multiple FHIR resource types?</p>\n<p>In the hooks I've seen prototyped today, if the context field value relates to a FHIR resource, there is just a single resource in use so using <code>context.&lt;prefetch key&gt;.id</code> as the prefetch token is not ambiguous.</p>\n</blockquote>",
        "id": 153980541,
        "sender_full_name": "Github Notifications",
        "timestamp": 1533161505
    },
    {
        "content": "<p>lmckenzi <a href=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409742380\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409742380\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/377\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377\">Issue #377</a></p>\n<blockquote>\n<p>Right.  If the context element is limited to a single resource type, no need to include the resource name in the path (unless there was some reason we wanted consistency in context strings, perhaps to allow for future evolution of the hook?)</p>\n</blockquote>",
        "id": 153980542,
        "sender_full_name": "Github Notifications",
        "timestamp": 1533161643
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409744655\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409744655\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/377\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377\">Issue #377</a></p>\n<blockquote>\n<p>Thanks for the clarification @lmckenzi.</p>\n<p>There is no limitation of context fields to always be associated to a single FHIR resource type, but I would expect that to be the overwhelming majority of use cases. I think a context field relating to disparate FHIR resources is definitely an edge case.</p>\n<p>As we wrap up 1.0, I don't see a big motivation in trying to further enhance prefetch semantics at this point. After 1.0, if we see a lot of implementer experience/use out of prefetch, then I think this is something worth looking out.</p>\n<p>Personally, I don't think this is a problem space that warrants the additional complexity. I think most CDS Service implementers are looking at prefetch as a method to remove the need to make their own FHIR queries for convenience rather than on better merits. There are limited cases where prefetch is truly a benefit and any additional complexity we add to will further lessen the use cases in which prefetch was designed for (primarily performance considerations of in-memory or shared data access across services).</p>\n</blockquote>",
        "id": 153980550,
        "sender_full_name": "Github Notifications",
        "timestamp": 1533162251
    },
    {
        "content": "<p>lmckenzi <a href=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409746446\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409746446\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/377\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377\">Issue #377</a></p>\n<blockquote>\n<p>I'm not sure \"remove the need to make their own FHIR queries\" is necessarily an illegitimate requirement.  It may be that EHRs will choose not to satisfy the prefetch, but at least if the prefetch is computably expressible, an intermediary could do it for them.  My concern is that if prefetch isn't possible, DaVinci is likely to push to drop CDS Hooks and proceed with a custom operation instead where they can demand inclusion of whatever data they like (and still have the flexibility to subsequently query through the inclusion of a hook-like token they can exercise).  I don't think that would be a good outcome.</p>\n</blockquote>",
        "id": 153980552,
        "sender_full_name": "Github Notifications",
        "timestamp": 1533162715
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409749068\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409749068\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/377\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377\">Issue #377</a></p>\n<blockquote>\n<p>Note the last part of my statement which was left out: \"remove the need to make their own FHIR queries <em>for convenience rather than on better merits</em>\". This critical part of my argument is what I'm pushing back against here (which is what I'm hearing is the reasoning behind this request). Please correct my understanding of the situation if I am not understanding this correctly.</p>\n<blockquote>\n<p>My concern is that if prefetch isn't possible, DaVinci is likely to push to drop CDS Hooks and proceed with a custom operation instead where they can demand inclusion of whatever data they like (and still have the flexibility to subsequently query through the inclusion of a hook-like token they can exercise).</p>\n</blockquote>\n<p>I may be further misunderstanding you, but these statements seem like an argument for introduce complexity and promoting a design/approach that I think does not stand on its own merits due to implementers that are prioritizing their convenience above good API/standards design. I know you don't agree with that as well so there must be a disconnect here.</p>\n</blockquote>",
        "id": 153980562,
        "sender_full_name": "Github Notifications",
        "timestamp": 1533163421
    },
    {
        "content": "<p>lmckenzi <a href=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409751270\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-409751270\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/377\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377\">Issue #377</a></p>\n<blockquote>\n<p>It's not totally clear to me that convenience doesn't itself have merit or that doing so necessarily constitutes bad API design, though I'm open to that perspective.  One challenge that I have is that there isn't anyone who can convincingly make the case that prefetch for convenience/simplification for payers is a bad idea.  (Isaac doesn't speak with as strong an opinion on this as you do :&gt;)  If I have to weigh the cost of enabling (but not mandating support for) more complex prefetch vs. DaVinci mandating that EHRs implement a custom operation instead, I know where I'd land.  If we can convince payers they don't need prefetch, that'd be even better.  However, I'm not confident of my ability to make that pitch given my own ambivilence on the question and the mindset they bring to the table from prior interfaces.</p>\n</blockquote>",
        "id": 153980572,
        "sender_full_name": "Github Notifications",
        "timestamp": 1533164042
    },
    {
        "content": "<p>eedrummer <a href=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-411141009\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-411141009\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/377\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377\">Issue #377</a></p>\n<blockquote>\n<p>I'll try to add some more context from Da Vinci to see if that helps justify the request or see if we are on the right path.</p>\n<p>In our group, @lmckenzi has advocated that we stick with hooks that have been included in the specification, such as <code>order-review</code>. Given that, with the currently defined context and current capabilities of prefetch, we will be unable to send all of the information we know a payer will need to properly respond to a request.</p>\n<p>That appears to leave us with two options if we want to be able to send all of the information necessary in a single request:</p>\n<p>1. Define a new hook that has a context with all of the information we need<br>\n2. Enhance prefetch capabilities so that all of the desired information can be sent in the request</p>\n<p>As I mentioned before, we have taken Option 1 off of the table to avoid hook proliferation and try to leverage current EHR implementation. We are pursuing Option 2 because payers in our group did not respond well to the suggestion of querying the EHR system. </p>\n<p>I understand the benefits that querying the EHR can convey. It gives the payers future opportunities to make decisions on even more data than they may use today. However, our base use case with order-review forces us to query for information that is necessary to all CDS Services.</p>\n</blockquote>",
        "id": 153983236,
        "sender_full_name": "Github Notifications",
        "timestamp": 1533663643
    },
    {
        "content": "<p>lmckenzi <a href=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-411158591\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-411158591\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/377\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377\">Issue #377</a></p>\n<blockquote>\n<p>The base usecase for prefetch - wanting to provide optimal access to data that may already be in memory, minimizing queries when providing data to multiple hook services, etc. all seems to elements associated to resources provided in context, not just those passed as an identifier in the context.  The payer's current preference for prefetch/context data rather than querying their own is not a driver for this architectural change.  The key is that the decision to include a full resource rather than just an identifier in context should not drive whether prefetch is possible.  The decision of identifier vs. full resource should be driven <em>only</em> by whether we believe almost all consumers of the hook will need the full resource rather than just the id.  Ensuring that prefetch is possible with both approaches is the best way of separating these concerns.</p>\n<p>Whether some systems rely on prefetch or not (and whether they should) is a separate architectural/cultural question that will need to be addressed separately from the \"Is it reasonable to enable prefetch at all here?\" question.</p>\n</blockquote>",
        "id": 153983274,
        "sender_full_name": "Github Notifications",
        "timestamp": 1533667086
    },
    {
        "content": "<p>brynrhodes <a href=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-426392834\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377#issuecomment-426392834\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/377\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/377\">Issue #377</a></p>\n<blockquote>\n<p>Proposed Disposition: Persuasive, the limitation on prefetch token references within prefetch templates will be relaxed to allow for context.&lt;context property name&gt;.[&lt;FHIR resource name&gt;].id<br>\nMoved: Isaac Vetter, Second: Ken Kawamoto<br>\nMotion tabled to allow for more discussion</p>\n<p>MedicationRequest?id={{context.orders.MedicationRequest.id}}<br>\n&amp;_include=MedicationRequest:patient<br>\n&amp;_include=MedicationRequest:intended-dispenser<br>\n&amp;_include=MedicationRequest:requester:Practitioner<br>\n&amp;_include=MedicationRequest:medication<br>\n&amp;_include=MedicationRequest:on-behalf<br>\n&amp;_include=MedicationRequest:insurance:Coverage </p>\n</blockquote>",
        "id": 154004863,
        "sender_full_name": "Github Notifications",
        "timestamp": 1538506958
    }
]