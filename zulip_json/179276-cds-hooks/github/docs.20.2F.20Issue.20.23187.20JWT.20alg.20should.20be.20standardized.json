[
    {
        "content": "<p>isaacvetter opened <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>In the <a href=\"https://cds-hooks.org/specification/1.0/#trusting-ehrs\" target=\"_blank\" title=\"https://cds-hooks.org/specification/1.0/#trusting-ehrs\">Trusting EHRs</a> section of the spec, we define a JWT that the EHR presents to the CDS Service. This JWT is used as a bearer token or authentication and is signed by a public key hosted by the EHR. </p>\n<p>It would be nice to standardize the signing algorithm used to a specific set that will be supported by all CDS Services, to assure increased compatibility across EHRs and CDS services. </p>\n<p>The <a href=\"https://jwt.io/\" target=\"_blank\" title=\"https://jwt.io/\">jwt.io</a> site does a great job listing which algorithms are supported by which commonly used libraries. </p>\n<p>I'm going to propose that all CDS Services support both ES384 and HS256.</p>\n<p>Are you working on implementing this JWT stuff in your CDS service? What signing algorithms do you support now? What do you think?</p>\n</blockquote>",
        "id": 153948725,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522251593
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-376945105\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-376945105\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>@bkaney made the below excellent point in PR #186, I wanted to carry it over into this thread:</p>\n<blockquote>\n<blockquote>\n<p>Our current alg example shows HS256. For commonality in implementations, the spec should dictate that CDS Services MUST support an algorithm. We're slightly partial to ES386, but HS256 would also work fine. The important thing is to standardize it.</p>\n</blockquote>\n<p>I am not at all a crypto expert, but it is my understanding that HS256 is a symmetric algorithm with only one (secret) key that is shared between the two parties. ES386 is asymmetric with a public/private key pair.</p>\n<p>After reading this: <a href=\"https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/\" target=\"_blank\" title=\"https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/\">https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/</a> there is a catch-22 with having the algorithm be discovered in the JWT header of which is supposed to be signed. I think the upshot is the algorithm should be pre-coordinated out-of-band (or specified, as ES386). Thoughts?</p>\n</blockquote>\n</blockquote>",
        "id": 153948745,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522253638
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-376961209\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-376961209\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>The main vulnerability that blog post pointed out was the use of the <code>none</code> algorithm and the fact that the open source libraries all treated <code>none</code> as a valid algorithm in their signature verification methods. In other words, the API design of those libraries did not espouse a secure-by-default mentality. The changes most of those libraries ended up making was to require the consumer of the library to explicitly say \"I am fine trusting JWTs which have a signature that cannot be verified\".</p>\n<p>An analogy to this example is self-signed TLS certificates. Anyone can create a self-signed certificate for <a href=\"http://google.com\" target=\"_blank\" title=\"http://google.com\">google.com</a>. If developers are working with a library that by default trusts self-signed certificates, we'd have a vulnerability were anyone can pass themselves off as someone else. As it turns out, all of the libraries around TLS I've seen explicitly require you to enable the trusting of self-signed certificates.</p>\n<p>The JWT library developers just hadn't learned that lesson (yet).</p>\n<p>The second vulnerability called out by this blog post is also around JWT library API design and developers not abiding by secure coding guidelines with respect to verifying the signature. I think it is important to call out this risk -- either in the specification or an implementation guide that provides detailed guidance for developers with respect to the CDS Hooks security model. Right now we're leveraging <a href=\"https://tools.ietf.org/html/rfc7515#section-4.1\" target=\"_blank\" title=\"https://tools.ietf.org/html/rfc7515#section-4.1\">rfc7515</a> which requires the <code>alg</code> header. Instructing implementers to ensure the two <code>alg</code> values (in the JWT header and JWK Set) match would be good.</p>\n<p>With all of this being said, we definitely need to beef up our documentation around all of this to ensure that it is clear for all implementers and so that they have an excellent resource to ensure they are not allowing any vulnerabilities into their implementations.</p>\n<p>Thanks @isaacvetter for starting this discussion because it is an important one we need to have. I'll put some more thought into all of this and respond back later that directly goes towards your questions posed here around aligning on a single/few signing algorithms.</p>\n</blockquote>",
        "id": 153948755,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522256610
    },
    {
        "content": "<p>grahamegrieve <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-376999403\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-376999403\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>\"all CDS Services support both ES384 and HS256\" - what does it mean for a CDS service to 'support' those? </p>\n</blockquote>",
        "id": 153948773,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522263697
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-377001703\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-377001703\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>Hey @grahamegrieve - clearly this needs some more thought and discussion. </p>\n<p>I think that support would mean that a CDS service could validate a JWT signed with one of these algorithms. </p>\n<p>The system constructing the JWT that's sent on the CDS request has to decide which of nine or so algorithms to use to to sign the JWT. How can we ensure that the two+ systems are using the same algorithm?</p>\n</blockquote>",
        "id": 153948775,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522264158
    },
    {
        "content": "<p>grahamegrieve <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-377004770\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-377004770\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>I recognise the problem. I just don't know how I'd support ES384. </p>\n</blockquote>",
        "id": 153948777,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522264796
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-377008281\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-377008281\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>Grahame - that's excellent feedback! Which algorithms would be easy for you to support?</p>\n</blockquote>",
        "id": 153948783,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522265550
    },
    {
        "content": "<p>grahamegrieve <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-377011476\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-377011476\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>I think - all the HS and RS ones are no brainers. it's the EC primitive that's the problem. The problem is which implementers have access to which libraries</p>\n</blockquote>",
        "id": 153948787,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522266197
    },
    {
        "content": "<p>bkaney <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-377042190\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-377042190\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<blockquote>\n<p>I think - all the HS and RS ones are no brainers. it's the EC primitive that's the problem. The problem is which implementers have access to which libraries</p>\n</blockquote>\n<p>There is support for EC in node, ruby, and java at least. It has become popular these days because of blockchain/bitcoin.</p>\n<p>I have been working on a prototype and I feel decoding the JWT before it has been verified to obtain information from the header section (e.g. <code>kid</code> and <code>jku</code>), then using the public key to decode (and raising exception if the <code>alg</code> is NONE) is reasonable. </p>\n<p>RS/EC are compatible with JWK (JSON Web Key - <a href=\"https://auth0.com/docs/jwks\" target=\"_blank\" title=\"https://auth0.com/docs/jwks\">https://auth0.com/docs/jwks</a> and <a href=\"https://tools.ietf.org/html/rfc7517\" target=\"_blank\" title=\"https://tools.ietf.org/html/rfc7517\">https://tools.ietf.org/html/rfc7517</a>) as they are asymmetric. I don't think JWK makes sense with HS, since it is symmetric -- both parties would have to figure out how to share a secret out-of-band.</p>\n</blockquote>",
        "id": 153948830,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522272304
    },
    {
        "content": "<p>cfeltner <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-378003552\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-378003552\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>Our EHR currently supports RS256 for this. I like the idea of the specification supporting several algorithms with an RS one being included in that supported list.</p>\n</blockquote>",
        "id": 153949870,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522693881
    },
    {
        "content": "<p>nwhatt <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-378426710\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-378426710\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>I want to second that there should not be options for both symmetric and asymmetric algorithms. The preference should be for asymmetric only. It's double the implementation and secret management effort. The best practices that most EHRs use for managing certificates for IHE profiles for example can be carried over as well. </p>\n</blockquote>",
        "id": 153950369,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522796628
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-378482546\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-378482546\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>Hey @nwhatt !</p>\n<p>I just realized that the above was essentially a cross-post from the <a href=\"https://chat.fhir.org/#narrow/stream/Security.20and.20Privacy/subject/backend.20service.20secure.20communication\" target=\"_blank\" title=\"https://chat.fhir.org/#narrow/stream/Security.20and.20Privacy/subject/backend.20service.20secure.20communication\">security zulip stream</a> on the use of JWT in backend services. I definitely want to make the backend services and CDS Hooks use of JWT as similar as possible.</p>\n<p>This totally makes sense, provides very specific recommendations to CDS Hooks and the specific references are really nice!</p>\n<blockquote>\n<blockquote>\n<p>The biggest flaw in JWT is the flexibility of the alg property. Check out the NVD database and most of them boil down to people doing the validation wrong. <a href=\"https://nvd.nist.gov/vuln/search/results?form_type=Basic&amp;results_type=overview&amp;query=JWT&amp;search_type=all\" target=\"_blank\" title=\"https://nvd.nist.gov/vuln/search/results?form_type=Basic&amp;results_type=overview&amp;query=JWT&amp;search_type=all\">https://nvd.nist.gov/vuln/search/results?form_type=Basic&amp;results_type=overview&amp;query=JWT&amp;search_type=all</a></p>\n<p>SMART is doing a good thing by insisting on asymmetric keys (rs256) vs symmetric keys (hs256). If you visit <a href=\"http://jwt.io\" target=\"_blank\" title=\"http://jwt.io\">jwt.io</a> the default is always going to be hs256 because it's easier to illustrate. It's easier to protect the secret with rs256, and by standardizing on one method, servers won't need to build two separate secret infrastructures - one for hs256 secrets and one for rs256 public keys.</p>\n</blockquote>\n</blockquote>\n<p>But, I don't really understand what EHR best practices are for managing IHE certs.</p>\n<blockquote>\n<p>The best practices that most EHRs use for managing certificates for IHE profiles for example can be carried over as well.</p>\n</blockquote>\n<p>Could you elaborate?</p>\n<p>Isaac</p>\n</blockquote>",
        "id": 153950485,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522818886
    },
    {
        "content": "<p>nwhatt <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-378628370\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-378628370\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>Hey @isaacvetter , I'm justing thinking of the hundreds of Epic Interconnect ™ admins out there who already handle certificates for Care Everywhere (IHE profiles), Surescripts, etc. Having them generate a token for says hs256 and securely share it with a third party is a new workflow with arguably harder security constraints. </p>\n<p>This could mitigated slightly by having automatic/programatic app registration where the token never needs to be exchanged manually. </p>\n</blockquote>",
        "id": 153950617,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522853506
    },
    {
        "content": "<p>JohnMoehrke <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-378689102\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-378689102\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>Can I get the security geeks engaged with a targeted zulip stream for these security and privacy topics?  See <a href=\"https://chat.fhir.org/#narrow/stream/Security.20and.20Privacy\" target=\"_blank\" title=\"https://chat.fhir.org/#narrow/stream/Security.20and.20Privacy\">https://chat.fhir.org/#narrow/stream/Security.20and.20Privacy</a></p>\n<p>I don't want to spread the small community too thin..</p>\n<p>I don't think we should conflate the current Certificate Management used to support IHE-ATNA (Node Authentication using mutual-authenticated-TLS) with a certificate management that might be used to support OAuth credentialed apps. Yes, they would be both using X.509, and both using Certs and CA. But there would be a different 'purpose' in the certificate use, and thus should be a different branch.  </p>\n<p>I would agree that looking to existing organizations that do this RA/CA today might be a quicker way to provision this. Sequoia and/or DirectTrust are candidates; but they would also need to step up. They do have 90% of what is needed involved.</p>\n<p>Is that the thinking? @mwhatt</p>\n</blockquote>",
        "id": 153950663,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522864505
    },
    {
        "content": "<p>nwhatt <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-378712475\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-378712475\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>@JohnMoehrke I'm thinking it about mostly from the user experience. x.509 certificates will be similar or identical to what the health system employees setting up connections already know. How they issue certificates, key management, and the EHR UI for doing such things theoretically don't need to change from things they already are doing to today. </p>\n<p>Granted ECDSA may be extra work for the entire tool chain, but still it's more familiar flow than a shared secret. </p>\n</blockquote>",
        "id": 153950679,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522869025
    },
    {
        "content": "<p>isaacvetter labeled <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>",
        "id": 153951874,
        "sender_full_name": "Github Notifications",
        "timestamp": 1523460537
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-394614159\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-394614159\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>I agree with @bkaney &amp; @nwhatt that we should avoid using symmetric signing algorithms as I do not see any EHR wanting to share their private key with all CDS Service providers in order to validate the signature of the JWT (thereby also allowing a malicious CDS Service provider to impersonate the EHR).</p>\n<p>I would advocate we explicitly <strong>disallow</strong> any symmetric algorithm -- this would include all HMAC (HS*) algorithms.</p>\n<p>Additionally, I would advocate we explicitly <strong>disallow</strong> the <code>none</code> algorithm.</p>\n<p>While researching this topic, I came across the _proposed_ <a href=\"https://tools.ietf.org/html/rfc7518#section-3\" target=\"_blank\" title=\"https://tools.ietf.org/html/rfc7518#section-3\">rfc7518</a>, which lays out a standard, dubbed JSON Web Algorithms (JWA), for the cryptographic algorithms used by JSON Web Signatures (JWS). Of note is the section on the various signature algorithms. Despite this being a proposed rfc with no movement since 2015, this is the rfc referenced by all of the various JWT libraries. Relevant to this discussion is section 3 which defines the signing algorithms.</p>\n<p>rfc7518 specifies that all conforming implementations MUST support HS256. I disagree with this for our use case per my above comments.</p>\n<p>Personally, I'd opt for implementing ES384 as:<br>\n- EC algorithms are considered more secure than RSA algorithms<br>\n- ES384 has broad support across the major libraries (I would have preferred ES512 but <a href=\"https://github.com/kjur/jsrsasign\" target=\"_blank\" title=\"https://github.com/kjur/jsrsasign\">jsrassign</a> doesn't support it yet)<br>\n- rfc7518 give ES256 its only \"Recommended+\" rating with the note \"The use of \"+\" in the Implementation Requirements column indicates that the requirement strength is likely to be increased in a future version of the specification.\". 3 years ago when rfc7518 was drafted, ES384 support was not as widespread.</p>\n<p>With this being said, I am not a cryptologist. I do not think we want to standardize on a single algorithm as when we discover that it is no longer secure (either due to flaws or increases in computing power), we would then need to update the CDS Hooks specification to specify the newer algorithms.</p>\n<p>Here's a concrete proposal:<br>\n- Reference <a href=\"https://tools.ietf.org/html/rfc7518#section-3\" target=\"_blank\" title=\"https://tools.ietf.org/html/rfc7518#section-3\">rfc7518 section 3</a> for the various signing algorithms it outlines<br>\n- Disallow the <code>none</code> algorithm, noting that this offers no verification the JWT is valid<br>\n- Disallow any symmetric algorithm (all HMAC based algorithms like HS256, HS384, HS512), noting that such algorithms effectively offer no verification since the EHR's private key must be shared<br>\n- Note that the choice of the signing algorithm should be made with consideration for the client library support that exists<br>\n- Recommend ES384 but leave open the use of other algorithms (like RS*)</p>\n</blockquote>",
        "id": 153966970,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528184735
    },
    {
        "content": "<p>kpshek milestoned <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>",
        "id": 153966993,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528185087
    },
    {
        "content": "<p>JohnMoehrke <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-394704201\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-394704201\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>Well said Kevin. I would not worry about RSA vs ECS. It is true that ECS is more pretty, but today they have equivalent security strength. If platforms support ECS, then yes it should be prefered. The benefit of ECS is it is easier on low end systems while still being strong.</p>\n<p>RFC7518 is the right specification, it is just as formal as many other IETF standards we are using. Don't be worried about the status \"Proposed Standard\", that is normal in IETF for guidance documents. </p>\n<p>I would rather there be a bright line between the security and the cds-hooks specification, as there could be uses where vastly different security models are legitimate; and to support revision of security models when issues or new models appear.</p>\n<p>It seems to me the main goal of this security specification within cds-hooks is to try to guarantee that the three parties are on the same page.  Right? Thus we can start with a small number of possibilities, but will eventually have many. Hence why OAuth is open, and why TLS negotiates inline...</p>\n<p>So, I support your recommendation; I just want to encourage separation of security model from core cds-hooks; so that future security models can evolve without breaking the core cds-hooks.</p>\n</blockquote>",
        "id": 153967030,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528204469
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-395227390\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-395227390\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>## <span class=\"emoji emoji-1f4de\" title=\"telephone receiver\">:telephone_receiver:</span> CDS Working Group Call (6-6-2018)</p>\n<p>Meeting notes: <a href=\"http://wiki.hl7.org/index.php?title=File:2018-06-06_CDS_WG_Call_Minutes.docx\" target=\"_blank\" title=\"http://wiki.hl7.org/index.php?title=File:2018-06-06_CDS_WG_Call_Minutes.docx\">http://wiki.hl7.org/index.php?title=File:2018-06-06_CDS_WG_Call_Minutes.docx</a></p>\n<p>We talked over this issue during the CDS Working group call today and cam up with a slightly modified version of @kpshek's above proposal:<br>\n* Reference rfc7518 section 3 for the various signing algorithms it outlines<br>\n* Disallow the none algorithm, noting that this offers no verification the JWT is valid<br>\n* Disallow any symmetric algorithm (all HMAC based algorithms like HS256, HS384, HS512), noting that such algorithms effectively offer no verification since the EHR's private key must be shared<br>\n* Note that the choice of the signing algorithm should be made with consideration for the client library support that exists<br>\n* Recommend ES384 _or RS385_ but leave open the use of other algorithms</p>\n<p>We also spent time debating the optionality for both the EHR and the CDS service for this support.</p>\n<p>@bvdh suggested the following language:<br>\n- If performing validation, CDS Service SHOULD support both ES384 and RS384 <br>\n- The EHR SHOULD support ES384 OR RS382</p>\n<p>Our goal is to vote on this issue during the <a href=\"http://www.hl7.org/Special/committees/dss/index.cfm\" target=\"_blank\" title=\"http://www.hl7.org/Special/committees/dss/index.cfm\">HL7 CDS working group call</a> next week. </p>\n</blockquote>",
        "id": 153967603,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528322284
    },
    {
        "content": "<p>jmandel <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-395520799\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-395520799\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>I'm coming late to the discussion and want to make sure I understand the expectation here. Without @bvdh's suggestion, if we just said clients and servers should support \"ES384 or RS384\"... then it would be possible for the client to generate a JWS the \"wrong\" one (i.e. pick an algorithm that the server didn't support), and there is no discovery protocol in place to even prevent this.</p>\n<p>So in short, if we don't want to pick one single algorithm that must be supported by clients and servers alike, then we need something like @bvdh's suggestion to ensure that servers can handle both of our recommendations.</p>\n</blockquote>",
        "id": 153967859,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528396314
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-395544426\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-395544426\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>I'd be in favor of limiting the CDS Hooks recommendation to just ES384. It definitely will make the service's job easier. I do think that we should keep the \"or better\" idea that @dalibaz has been encouraging in SMART backend services.</p>\n<p>@bvdh - can you elaborate on why you though RSA was a good idea? </p>\n<p>Isaac </p>\n</blockquote>",
        "id": 153967879,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528401247
    },
    {
        "content": "<p>bvdh <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-395720268\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-395720268\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>There is some sensitivity regarding the use of elliptic curve crypto.</p>\n<p>I agree with @jmandel  that from an interoperability point of view, a single algorithm is preferred.<br>\nOn the other hand, most implementers will use a library to validate the token. Most libraries support both algorithms. A quick scan across sevaeral libraries indicated that support of RS384 is a little bit more common than ES384. So most clients will be able able to validate tokens based on either algorithm. In any case, the EMR can choose what to implement (it generates the token).</p>\n<p>Than there is the point that Kevin made. We do not want to update the CDS Hooks specification to cope with the current state of recommended encryption algorithms.</p>\n<p>Based on these arguments, I come to the following proposal:<br>\n- Reference  rfc7518 section 3 for the various signing algorithms it outlines<br>\n- Disallow (SHALL NOT)  the none algorithm, noting that this offers no verification the JWT is valid<br>\n- Disallow (SHALL NOT) any symmetric algorithm (all HMAC based algorithms like HS256, HS384, HS512), noting that such algorithms effectively offer no verification since the EHR's private key must be shared<br>\n- Add a note that the choice of the signing algorithm should be made with consideration for the client library support that exists and the current recommendations regarding cryptographic algorithms. <br>\n- Indicate that the RECOMMENDED algorithms to be used based at the moment of publication of this standards are ES384 or RS384.</p>\n</blockquote>",
        "id": 153968029,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528453700
    },
    {
        "content": "<p>jmandel <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-395748505\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-395748505\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>If we're not going to pick any algorithm as required for the CDS service to support (which seems fair), I might suggest adding a \"currently supported algorithms list\" to the discovery endpoint.  This would be helpful at service installation time and potentially also at runtime. it would support a basic automated negotiation over time.</p>\n</blockquote>",
        "id": 153968034,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528461606
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-396994505\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-396994505\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>@isaacvetter &amp; @bvdh - I'm fine with the proposal you all discussed.</p>\n<p>@jmandel - I don't see a need to add a list of support algorithms to the Discovery endpoint given that we have already established that registration/integration is an out-of-band process between the EHR and the CDS Service provider. Additionally, this falls into another requirement of the CDS Service and we also have already established that expressing the data elements (prefetch, FHIR resources, FHIR resource fields/profiles, etc) requirements by the CDS Service in the Discovery endpoint is not something we are addressing today.</p>\n</blockquote>",
        "id": 153969102,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528905977
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397074128\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397074128\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>@jmandel - Do you want to log a separate issue regarding the inclusion of what signing algorithm(s) the CDS Service understands?</p>\n<p>Note - I think this would be related to issues like #330 and (especially) #71</p>\n</blockquote>",
        "id": 153969126,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528921547
    },
    {
        "content": "<p>jmandel <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397075068\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397075068\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>Can you clarify what you mean by \"inclusion\" @kpshek? This current issue seems to be all about which signing algorithms we expect/require.</p>\n</blockquote>",
        "id": 153969129,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528921751
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397076220\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397076220\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>Josh - by inclusion, he just means inclusion in the content at the discovery endpoint. </p>\n<p>Overall, there's a number of requests to enhance the discovery endpoint for the CDS service to better describe / document its capabilities and requirements. </p>\n<p>Recommending one or more signing algorithms can logically be separated from a CDS service computably describing its support of specific signing algorithms.  The CDS wg just voted affirmatively on Bas's proposal which recommends two algo's and doesn't modify the discovery endpoint. </p>\n</blockquote>",
        "id": 153969131,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528921959
    },
    {
        "content": "<p>jmandel <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397077550\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397077550\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>Cool -- does that mean we're publishing a recommendation for services to support \"ES384 or RS384\" (rather than \"ES384 and RS384\")?</p>\n</blockquote>",
        "id": 153969132,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528922156
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397079146\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397079146\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>Yes, although, it's not totally clear if the optionality applies to the EHR or the CDS service ...</p>\n</blockquote>",
        "id": 153969140,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528922491
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397082142\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397082142\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>@jmandel - By \"inclusion\" I meant including the algorithms to the Discovery response</p>\n</blockquote>",
        "id": 153969144,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528923058
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397082755\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397082755\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<p>## <span class=\"emoji emoji-1f4de\" title=\"telephone receiver\">:telephone_receiver:</span> CDS Working Group Block Vote (6-13-2018)</p>\n<p>Meeting notes: <a href=\"http://wiki.hl7.org/index.php?title=File:2018-06-13_CDS_WG_Call_Minutes.docx\" target=\"_blank\" title=\"http://wiki.hl7.org/index.php?title=File:2018-06-13_CDS_WG_Call_Minutes.docx\">http://wiki.hl7.org/index.php?title=File:2018-06-13_CDS_WG_Call_Minutes.docx</a></p>\n<p>@kpshek moved the following disposition, seconded by @bvdh.</p>\n<p>We will add the following to the specification (per @bvdh's comment above)</p>\n<ul>\n<li>Reference rfc7518 section 3 for the various signing algorithms it outlines</li>\n<li>Disallow (SHALL NOT) the none algorithm, noting that this offers no verification the JWT is valid</li>\n<li>Disallow (SHALL NOT) any symmetric algorithm (all HMAC based algorithms like HS256, HS384, HS512), noting that such algorithms effectively offer no verification since the EHR's private key must be shared</li>\n<li>Add a note that the choice of the signing algorithm should be made with consideration for the client library support that exists and the current recommendations regarding cryptographic algorithms.</li>\n<li>Indicate that the RECOMMENDED algorithms to be used based at the moment of publication of this standards are ES384 or RS384.</li>\n</ul>\n<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span> For: 10<br>\n<span class=\"emoji emoji-1f611\" title=\"expressionless\">:expressionless:</span> Abstain: 0<br>\n<span class=\"emoji emoji-1f44e\" title=\"-1\">:-1:</span> Against: 0</p>\n<p><span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> The motion passed! <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>\n</blockquote>",
        "id": 153969150,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528923145
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397083491\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187#issuecomment-397083491\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>\n<blockquote>\n<blockquote>\n<p>Yes, although, it's not totally clear if the optionality applies to the EHR or the CDS service ...</p>\n</blockquote>\n<p>The recommendation would be for all implementers (EHRs and CDS Service providers). In reality, CDS Service providers are the ones who will need to support multiple signing algorithms as they must verify signatures from various vendors. EHRs on the other hand will likely always sign their JWTs with a single algorithm.</p>\n</blockquote>",
        "id": 153969151,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528923280
    },
    {
        "content": "<p>kpshek assigned <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>",
        "id": 153969497,
        "sender_full_name": "Github Notifications",
        "timestamp": 1528948080
    },
    {
        "content": "<p>kpshek labeled <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>",
        "id": 154014979,
        "sender_full_name": "Github Notifications",
        "timestamp": 1541122590
    },
    {
        "content": "<p>kpshek closed <a href=\"https://github.com/cds-hooks/docs/issues/187\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/187\">Issue #187</a></p>",
        "id": 154024853,
        "sender_full_name": "Github Notifications",
        "timestamp": 1544631376
    }
]