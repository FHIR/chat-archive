[
    {
        "content": "<p>brettmarquard opened <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>\n<blockquote>\n<p>Open to suggestions -- but ideally we will have a few concrete proposals before discussing on a call. </p>\n</blockquote>",
        "id": 153905427,
        "sender_full_name": "Github Notifications",
        "timestamp": 1504988586
    },
    {
        "content": "<p>kpshek milestoned <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>",
        "id": 153905432,
        "sender_full_name": "Github Notifications",
        "timestamp": 1504988706
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-333675447\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-333675447\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>\n<blockquote>\n<p>There only two choices:<br>\n1) how SMART does it -- in the version of SMART that's balloting into HL7<br>\n2) in the Conformance / CapabilityStatement at /metadata</p>\n<p>What are pros and cons?</p>\n</blockquote>",
        "id": 153911916,
        "sender_full_name": "Github Notifications",
        "timestamp": 1506981002
    },
    {
        "content": "<p>isaacvetter assigned <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>",
        "id": 153911921,
        "sender_full_name": "Github Notifications",
        "timestamp": 1506981185
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-333676268\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-333676268\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>\n<blockquote>\n<p>We also have secret option 3...leave this purposely undefined and swing back on this post 1.0 <img alt=\"ðŸ˜›\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f61b.png\" title=\"ðŸ˜›\"> </p>\n</blockquote>",
        "id": 153911922,
        "sender_full_name": "Github Notifications",
        "timestamp": 1506981231
    },
    {
        "content": "<p>brettmarquard labeled <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>",
        "id": 153914987,
        "sender_full_name": "Github Notifications",
        "timestamp": 1508446606
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-338097421\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-338097421\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>\n<blockquote>\n<p>In an offline conversation with @yashaskram, he brought up some great points around this topic from our Connectathon testing in San Diego:</p>\n<blockquote>\n<p>Every EHR have taken slightly different approach. For example: Cerner is using .pem format for public key and ES256 signing algorithm (Connectathon testing). Athena is using .pub format for the public key and RS256 (Connectathon testing). T-Systems is using .cer format of public key and RS256. But originally what I was hoping to receive from EHR is jwk format. Do you think we can get consensus on the public key format? And also wondering if the specification should help narrow signing algorithms.</p>\n<p>Format of PublicKey<br>\n- .pub,<br>\n- .pem<br>\n- .jwk (json)<br>\n- .cer</p>\n<p>Signing Algorithm<br>\n- \"id_token_signing_alg_values_supported\": [\"HS256\",\"HS384\",\"HS512\",\"RS256\",\"RS384\",\"RS512\",\"ES256\",\"ES384\",\"ES512\",\"PS256\",\"PS384\",\"PS512\",\"none\"</p>\n<p>UpToDate prototype can currently supports HS256, RS256 and ES256. And also I have validated that our key validation library can support .pub, .pem, .cer, jwk formats.</p>\n</blockquote>\n</blockquote>",
        "id": 153915014,
        "sender_full_name": "Github Notifications",
        "timestamp": 1508470607
    },
    {
        "content": "<p>grahamegrieve <a href=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-338504457\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-338504457\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>\n<blockquote>\n<p>jwks would always be my preference, but for clarity, when does the cds service need the EHR's public key? we're not talking about SSL here are we?</p>\n</blockquote>",
        "id": 153915233,
        "sender_full_name": "Github Notifications",
        "timestamp": 1508702153
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-339808721\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-339808721\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>\n<blockquote>\n<p>@yashaskram, @kpshek - agree that the spec should dictate jwk. <br>\n@grahamegrieve - the public key is used by the cds service to validate the signature of the jwt provided by the EHR according to #72 and specifically <a href=\"https://github.com/cds-hooks/docs/blob/fe453cec4731b4a97ef3304498c481d545be97be/source/includes/_security.md\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/blob/fe453cec4731b4a97ef3304498c481d545be97be/source/includes/_security.md\">this change</a>. </p>\n</blockquote>",
        "id": 153916343,
        "sender_full_name": "Github Notifications",
        "timestamp": 1509053928
    },
    {
        "content": "<p>mattvarghese <a href=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-362392321\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-362392321\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>\n<blockquote>\n<p>So we had a few discussions with our security developers around JWT and what it serves to do, as well as, I had a conversation with @kpshek at the connectathon as well. Adding all of that here as a summary. </p>\n<ul>\n<li>The purpose of the JWT is to authenticate the EHR or other CDS-Hooks client to the CDS Service, as an entity that is allowed to make a CDS-Hooks request of the CDS Service. <strong>Making sure that we are all agreed on this.</strong></li>\n</ul>\n<p>The choices for how the CDS Service acquires the public key of the client to validate the signature on the JWT is somewhat 'handwaved' in the JWT specs. The onus of verifying that the public key indeed belongs to a legitimate client is the responsibility of CDS Service - however, how that is accomplished is not mandated or clarified as I understand. So I will request that whatever key distribution mechanism we agree upon <strong>MUST</strong> clarify (a) how the CDS Service will validate that the key belongs to the calling client and (b) the key belongs to a client authorized to call the CDS Service.</p>\n<p>As I understand, the following properties in the JWT are relevant.</p>\n<p>JWT <strong>Header</strong>:<br>\n- <strong>kid</strong>: this is an identifier for the key. (In our implementation, we use a base64 encoded thumbprint)<br>\n- <strong>jku</strong>: this is the url pointing to a JWK file/object containing the keys, one of which is our key identified by the <strong>kid</strong>. As I understand, currently we don't use this in CDS-Hooks.</p>\n<p>JWT <strong>Body</strong>:<br>\n- <strong>iss</strong>: this is the issuer of the JWT. Currently, we have this match the FHIR server url. However, in a conversation with @kpshek I pointed out that there is no particular reason for the iss to be a URL, unless the JWK is at a url constructed off of the iss. @kpshek suggested that this could even be a URI.<br>\n- <strong>sub</strong>: this is more vague. As I understand, we are currently talking of this being a client ID of the EHR, issued to the EHR by the CDS-Service.</p>\n<p>Regardless of how the key is distributed, the CDS-Service will need to keep a <strong>whitelist</strong> of the <strong>iss</strong> (or another option would be to whitelist the <strong>sub</strong>) to make sure that only authorized services are calling it. Before matching the <strong>iss</strong> in the JWT against this whitelist, therefore, the CDS-Service <strong>MUST</strong> validate that the JWT is signed by a key that indeed belongs to the <strong>iss</strong>. </p>\n<p>Some of the options for key distribution as we discussed are:<br>\n1. Have the JWK url be in the <strong>jku</strong> in the JWT header. (in this case <strong>iss</strong> can just be a urn, and not a url) The concern here is that, if I am a hacker, I can publish the public key on the internet, and create a JWT which contains a valid <strong>iss</strong> but where the key does not match the <strong>iss</strong>. To validate the key, the CDS-Service is now required to store the url of the JWK in the whitelist alongside the <strong>iss</strong>, or the key must be backed by a Certificate Authority. IF the former, then the <strong>jku</strong> in the JWT header becomes redundant. IF the latter, that introduces its own set of inconveniences.<br>\n2. Have <strong>iss</strong> be a URL, and the key be published as a JWK at specified URL with the <strong>iss</strong> as the base/prefix of it. (in this case, basing the whitelist off <strong>sub</strong> won't work). In this case, we have the option to (a) specify/fix the suffix part of the JWK url in the standard, in which case JWT will not need to contain <strong>jku</strong>, or (b) the suffix can be variable, in which case the JWK url is in the <strong>jku</strong>, but is constrained such that <strong>iss</strong> forms the prefix of this url. The concerns are option (a) is rigid whereas option (b) allows a hacker who has access to some publicly accessible server within the organization to host a public key which doesn't belong to the org.<br>\n3. Have JWK url be part of conformance/metadata. This however means the JWT is intricately tied to the FHIR server. <br>\n4. Not define the key distribution mechanism. When an EHR sets up an integration with a CDS-Service, they have to exchange keys, and figure out the mechanism for renewing or updating keys. Personally, I like this option the least. </p>\n<p>Further thoughts<br>\n- If we do go with option 1, I will suggest that the spec <strong>MUST</strong> require CDS-Services to validate that the key does indeed belong to the issuer that the caller is claiming to be.<br>\n- If we use any <strong>jku</strong>, whether option 1 or 2b, Section <a href=\"https://tools.ietf.org/html/rfc7515#section-4.1.2\" target=\"_blank\" title=\"https://tools.ietf.org/html/rfc7515#section-4.1.2\">4.1.2</a> and Section <a href=\"https://tools.ietf.org/html/rfc7515#section-8\" target=\"_blank\" title=\"https://tools.ietf.org/html/rfc7515#section-8\">8</a> of the JWT spec RFC <strong>MUST</strong> not be ignored.</p>\n<hr>\n<p>All capitalized instance of <strong>MUST</strong> used according to RFC 2119 in this comment.</p>\n</blockquote>",
        "id": 153934784,
        "sender_full_name": "Github Notifications",
        "timestamp": 1517517037
    },
    {
        "content": "<p>jmandel <a href=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-362396019\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-362396019\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>\n<blockquote>\n<p>That's a delightful, clear, and comprehensive write-up, @mattvarghese -- thanks for working through this so clearly.</p>\n<p>I'd add that in some use cases, the EHR (i.e the CDS Services client) might not be able to host a key in a web location that's routable from the CDS Service, so there's probably a fallback option of \"just negotiate it out of band\". But I agree that we want to choose one preferred in-band approach.</p>\n<p>Personally I don't mind the rigidity of a URL that's fixed relative to <code>issuer</code> (i.e. your option 2a), but I'd be interested to hear if others have practical concerns.</p>\n</blockquote>",
        "id": 153934802,
        "sender_full_name": "Github Notifications",
        "timestamp": 1517517870
    },
    {
        "content": "<p>yashaskram <a href=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-362433796\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-362433796\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>\n<blockquote>\n<blockquote>\n<p>The choices for how the CDS Service acquires the public key of the client to validate the signature on the JWT is somewhat 'handwaved' in the JWT specs.</p>\n</blockquote>\n<p>I agree</p>\n<p>The way OpenID Connect handles this is through OpenID connect discovery specification <a href=\"https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\" target=\"_blank\" title=\"https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\">https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata</a></p>\n<p>jwks_uri is one of the provider metadata value which is the URL of the JSON Web Key SetÂ [JWK]Â document.  Same mechanism is specified to serve token_endpoint and authorization_endpoint in the OpenID Connect world. The latter (token_endpoint &amp; authorization_endpoint)  is done through FHIR conformance in the case of SMART on FHIR. Using FHIR conformance for jwks_uri (Option 3) forces CDS service to make two round trips- first to get the jwks_uri and second to get the jwk which can get expensive when keys are rotated frequently</p>\n<p>I am inclined for option 2a as for the preferred approach but look forward to seeing other responses</p>\n</blockquote>",
        "id": 153934880,
        "sender_full_name": "Github Notifications",
        "timestamp": 1517526880
    },
    {
        "content": "<p>mattvarghese <a href=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-362677892\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-362677892\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>\n<blockquote>\n<p>Thinking more about this, and from a few more internal discussions, here's another update. </p>\n<p>Option 2 above has <strong>iss</strong> as prefix of the JWK url. 2(a) has a fixed suffix, 2(b) has a variable suffix. Adding an <strong>option 2(c)</strong> where there is NO suffix - the <strong>iss</strong> is the JWK url itself. This is currently possible, because there is no other purpose for any url in the <strong>iss</strong> today. </p>\n<p>Based on that, this leads to an <strong>Option 6</strong> - the url is in the <strong>jku</strong>. This is different from Option 1 in that the whitelist of who is allowed to access the CDS-Service must be based on the <strong>jku</strong> rather than on the <strong>iss</strong> now. That leaves the <strong>iss</strong> as optional in the JWT. One good thing here is, now we retain the pro of option 1 which is we are using a field intended by the RFC to convey the JWK url for that purose, while not inheriting the disadvantages of option 1 because our whitelist is based on <strong>jku</strong> and not <strong>iss</strong>. This is convenient because if we then define the <strong>iss</strong> as the client ID of the issuer (and <strong>sub</strong> as the client ID of the caller, which is already the case) - that will align with other use cases of JWT such as backend services. That way EMRs will not have to keep multiple incompatible code-paths for generating JWTs. </p>\n<p>The more we discussed this internally, the <strong>option 6</strong> felt the best to us. If we go this route, <strong>(1)</strong> the CDS-Service <strong>MUST</strong> validate that the <strong>jku</strong> is a URL of someone that is known to them as authorized to issue JWTs for the purpose of calling the service. Additionally, the CDS-Service <strong>MAY</strong> choose to be more stringent in its validation and check that <strong>(2)</strong> the client ID communicated in the <strong>iss</strong> matches the JWK url in <strong>jku</strong> and that <strong>(3)</strong> client ID in the <strong>sub</strong> is authorized to call the service.</p>\n<p>I am also proposing including a <strong>ver</strong> attribute in the JWT header. This can be \"CDS-Hooks-JWT-v1.0\" or some such string. This will allow us to finalize CDS-Hooks spec 1.0 while still being able to revise the JWT if we see security concerns arise in the future. The JWT <strong>MUST</strong> be of <strong>ver</strong> = \"CDS-Hooks-JWT-v1.0\" for CDS-Hooks version 1.0. Future revisions of CDS-Hooks spec <strong>MAY</strong> support additional versions of the JWT and/or <strong>MAY</strong> remove support of older versions of JWT.</p>\n</blockquote>",
        "id": 153935078,
        "sender_full_name": "Github Notifications",
        "timestamp": 1517598717
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-376560412\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-376560412\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>\n<blockquote>\n<p>Thanks @mattvarghese for these write ups and my apologies for not responding earlier. This is the last big 1.0 issue I want to wrap up before our upcoming HL7 ballot and I've been doing some thinking on this.</p>\n<p>I've distilled @mattvarghese's options down to two that I want to run by everyone:</p>\n<p>1. <strong><code>iss</code> only</strong></p>\n<p><code>iss</code> MUST be either a URI or URL and is used by CDS Services to uniquely identify and whitelist trusted EHRs. If the <code>iss</code> value is a URI, the JWK Set is negotiated out-of-band with CDS Services. Otherwise, if the <code>iss</code> value is a URL, the JWK Set must be available via {{iss}}/jwks.json</p>\n<p>2. <code>iss</code> and new <code>jku</code> header</p>\n<p><code>iss</code> MUST be a URI and is used by CDS Services to uniquely identify and whitelist trusted EHRs.</p>\n<p>The JWT header MAY contain a <code>jku</code> field that contains a publicly accessible URL to the JWK Set (per rfc7515 section 4.1.2). If a <code>jku</code> header is not present, the JWK Set is negotiated out-of-band with CDS Services.</p>\n<hr>\n<p>Personally, I'm leaning towards this second option (adding a new <code>jku</code> header).</p>\n</blockquote>",
        "id": 153948413,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522163260
    },
    {
        "content": "<p>isaacvetter <a href=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-376564293\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-376564293\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>\n<blockquote>\n<p>In conversation with @brynrhodes , @brettmarquard , @kpshek - Note that PR #174 already standardized the format of the public key. With consensus, it would be nice to standardize the location of this key as part of 1.0.</p>\n</blockquote>",
        "id": 153948422,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522163882
    },
    {
        "content": "<p>kpshek <a href=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-376585191\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87#issuecomment-376585191\">commented</a> on <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>\n<blockquote>\n<p>I have a pull request (#186) based upon the second option for review for anyone interested.</p>\n<p>@mattvarghese - Thanks again for writing all of this up and for calling out the <code>jku</code> header which I think is a great option. Let's split off a notion of a <code>ver</code> header as a separate issue if you feel that is still worth pursuing.</p>\n</blockquote>",
        "id": 153948443,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522167462
    },
    {
        "content": "<p>kpshek closed <a href=\"https://github.com/cds-hooks/docs/issues/87\" target=\"_blank\" title=\"https://github.com/cds-hooks/docs/issues/87\">Issue #87</a></p>",
        "id": 153948726,
        "sender_full_name": "Github Notifications",
        "timestamp": 1522252159
    }
]