[
    {
        "content": "<p>not sure if right stream but we mentioned this in the calls.</p>",
        "id": 161483656,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1553288531
    },
    {
        "content": "<p>while looking at node-red (not red-node as I typed before), i saw one example of data generation (could be useful to introduce or may trigger better ideas).</p>",
        "id": 161483744,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1553288603
    },
    {
        "content": "<p>there is a component that generates data based on syntax shown in this example:</p>\n<div class=\"codehilite\"><pre><span></span>{\n    &quot;ID&quot;: &quot;{{guid}}&quot;,\n    &quot;value&quot;: {{float 20 80 &#39;0.00&#39;}},\n    &quot;manufacturerID&quot;: &quot;{{randomItem &#39;IBM&#39; &#39;SONY&#39; &#39;APPLE&#39;}}&quot;,\n    &quot;tags&quot;:[\n        {{#repeat 0 3}}\n           &quot;{{tag}}&quot;\n        {{/repeat}}\n    ],\n    &quot;location&quot;:{\n        &quot;city&quot;: &quot;{{city}}&quot;,\n        &quot;zone&quot;: &quot;{{randomItem &#39;A&#39; &#39;B&#39; &#39;C&#39;}}&quot;,\n        &quot;building&quot;: &quot;{{randomItem &#39;1&#39; &#39;2&#39;}}&quot;,\n        &quot;floor&quot;: &quot;{{randomItem &#39;1F&#39; &#39;2F&#39; &#39;3F&#39;}}&quot;,\n        &quot;room&quot;: &quot;{{randomItem &#39;01&#39; &#39;02&#39; &#39;03&#39;}}&quot;\n    }\n}\n</pre></div>",
        "id": 161483855,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1553288685
    },
    {
        "content": "<p>Yup, that's definitely something we should talk about/explore.  Is it based on extending a Liquid engine?</p>",
        "id": 161492368,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553296113
    },
    {
        "content": "<p>not sure why you ask, but there's no Liquid there</p>",
        "id": 161510706,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1553322436
    },
    {
        "content": "<p>(AFAIK)</p>",
        "id": 161510707,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1553322444
    },
    {
        "content": "<p>you should use Liquid then - see <a href=\"http://wiki.hl7.org/index.php?title=FHIR_Liquid_Profile\" target=\"_blank\" title=\"http://wiki.hl7.org/index.php?title=FHIR_Liquid_Profile\">http://wiki.hl7.org/index.php?title=FHIR_Liquid_Profile</a></p>",
        "id": 161510774,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553322569
    },
    {
        "content": "<p>ah, just realized now the  double brackets</p>",
        "id": 161510830,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1553322611
    },
    {
        "content": "<p>we still need to define the functions for generating data, right?  Can we define functions in liquid like \"randomItem(a,b, c)\"?</p>",
        "id": 161511062,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1553322997
    },
    {
        "content": "<p>That's what I'm wondering.  If t's just extending a liquid engine, that has lots of possibilities</p>",
        "id": 161530240,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553355047
    },
    {
        "content": "<p>you don't define them 'in liquid' but you expose an api to liquid that has those behaviors. it's effectively the same outcome. In this case, you really want to conceive of it as iterating over a synthesized set of values</p>",
        "id": 161544084,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553377535
    },
    {
        "content": "<p>I'm actually more interested in this for generating 'defined' examples that have specific values - but using a templating approach so that it's a heck of a lot easier to maintain them.  For ExampleScenario, having 50+ instances for a single scenario will be average to even on the low side, so we're looking for an authoring/tooling solution to make that process lighter-weight.  But we very much want the example instances that get generated to be consistent.</p>",
        "id": 161544330,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553377885
    },
    {
        "content": "<p>check out how \\source\\patient\\patient-examples-cypress-template.xml works</p>",
        "id": 161569016,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553420620
    },
    {
        "content": "<p>my previous solution was:<br>\n1. an excel file where I updated the values of the relevant attributes. I was in full control of consistency, and while automatically generating value from a template would be nicer, I was ok with excel fill down and copy-paste.<br>\n2. any dumb way to transform that into the resources (my way was embarassingly dumb)</p>",
        "id": 161572425,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1553425361
    },
    {
        "content": "<p>cypress template seems the same approach.</p>",
        "id": 161572508,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1553425503
    },
    {
        "content": "<p>could we combine these approaches and have a template that can contain both <br>\n{{randomItem 'A' 'B' 'C'}} <br>\nand<br>\n{{loopVar(patientId)}}<br>\n{{loopVar(medicationCode)}}</p>\n<p>( loopVar is if you have several loops e.g. patient1..patient5 but also medication1..medication20)</p>",
        "id": 161572776,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1553425879
    },
    {
        "content": "<p>don't mind the syntax</p>",
        "id": 161572787,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1553425911
    },
    {
        "content": "<p>I'll rework the cypress example to use the liquid engine and we'll see what it looks like</p>",
        "id": 161593838,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1553456893
    },
    {
        "content": "<p>I think starting with excel is the way to go,  I've use both templates and class libraries.  I am not sure what the inherit advantage of liquid is for this is. ( supports fhir path, works in build? ) versus creating examples outside of build tooling using your language template combination of chioice.(e.g., Python-Jinja2)      I would probably create a python dictionary using its standard library and validate against a test server.   Templates are clones and give you less flexibility across example scenarios.  I think would need a template per resource per example scenario.</p>",
        "id": 161597322,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553462285
    },
    {
        "content": "<p>I want examples to be authorable by non-programming people.  Liquid templates they might be able to manage.  Full on Python, not so much...</p>",
        "id": 161597642,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553462854
    },
    {
        "content": "<p>Also, I want all examples across all IGs published by HL7 to be authored using the same approach - don't want 3 or 4 different programming languages sprinkled around based on the author's preferences.</p>",
        "id": 161597693,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553462911
    },
    {
        "content": "<p>I think you misunderstand.   The way to create an example is the spreadsheet.   The code is just a way to transform it into the proper json file.</p>",
        "id": 161604127,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553472845
    },
    {
        "content": "<p>Everybody can use a spreadsheet to author an example</p>",
        "id": 161604135,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553472876
    },
    {
        "content": "<p>Liquid is no easier than python to a non programner</p>",
        "id": 161604148,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553472908
    },
    {
        "content": "<p>I really donâ€™t understand the use case.  You want valid examples in a wire format for the build source right?  Or do you want them in some other format as the source.  That would be a bad look ( something about eating own dogfood. )</p>",
        "id": 161604395,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553473283
    },
    {
        "content": "<p>Non-programmers are going to have to create the templates, not just the data.  And I think stubbing in liquid variables and perhaps learning a couple of iterators inside a 'standard' example (XML or JSON) is going to be much easier than righting code.  My targets are the people who create instance examples now in the pharmacy, patient care and similar work groups.  Few, if any of  them are programmers.</p>",
        "id": 161606311,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553476299
    },
    {
        "content": "<p>I definitely expect that the source is going to have to be templates + data in the source when we're looking to create 50+ instances to show a particular scenario.</p>",
        "id": 161606357,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553476337
    },
    {
        "content": "<p>I'm still not clear what you want.   It is not clear to me how you plan to use a template without a data source.    A tool external to the build to convert excel to json/xml using liquid?  or examples in xml+ liquid?  why not just use clinfhir's ui?</p>",
        "id": 161608459,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553479612
    },
    {
        "content": "<p>I'm not sure if the source data will be in Excel or not.  If it is, then the new IGPublisher template framework will have to turn the Excel into JSON for Liquid to use.  The work group (or other non-technical individuals) would author and maintain both the templates and the data.  If we can extend ClinFHIR to allow authoring templated instances, that might be ok too, but I'm not presuming that all instance authors will necessarily want to use ClinFHIR.</p>",
        "id": 161611091,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553483754
    },
    {
        "content": "<p>I see two possible approches in the above discussion:<br>\n1. Data set based, sets are in an excel or otherwise-easy-to-enter format<br>\n2. Data rules based.</p>",
        "id": 170781385,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1563007238
    },
    {
        "content": "<p>1: <a href=\"/user_uploads/10155/cbPnV0W0dAeDpGxbQ5ajUuz2/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/cbPnV0W0dAeDpGxbQ5ajUuz2/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/cbPnV0W0dAeDpGxbQ5ajUuz2/pasted_image.png\"></a></div>",
        "id": 170781393,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1563007268
    },
    {
        "content": "<p>2: <a href=\"/user_uploads/10155/X8wCV5np5-fsyaO3Bnc-v691/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/X8wCV5np5-fsyaO3Bnc-v691/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/X8wCV5np5-fsyaO3Bnc-v691/pasted_image.png\"></a></div>",
        "id": 170781403,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1563007296
    },
    {
        "content": "<p>The mock syntax above is more about option 2, but option 1 may be easier to maintain consistency.</p>",
        "id": 170781461,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1563007402
    },
    {
        "content": "<p>This can be used not only to generate many instances of one resource, but many instances of many resources. <br>\nNot sure how that could be with option 2, but with option 1 this should be easy.</p>",
        "id": 170781505,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1563007469
    },
    {
        "content": "<p>and one question: \"patient.json\", where the expressions are, should be:<br>\n1. a resource instance populated with expressions<br>\n2. a profile populated with expressions<br>\n?</p>",
        "id": 170781516,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1563007555
    }
]