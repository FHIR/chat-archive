[
    {
        "content": "<p>I was wondering if it would be reasonable to nest series of PlanDefinitions inside a single PlanDefinition to define which one to use by age categories. </p>\n<p>For instance, I have a series of pediatric questionnaires by age group. </p>\n<ol>\n<li>I create a ServiceRequest for a child that instantiates a PlanDefinition</li>\n<li>That PlanDefinition has a list of PlanDefinitions (in definitionCanonical)</li>\n<li>Each of those PlanDefinitions has a timingAge that specifies what age the child should be for that PlanDefinition to apply</li>\n<li>Then I have a service that polls for new ServiceRequests (eventually will be pub-sub, I hope)</li>\n<li>When it finds a ServiceRequest, it gets the Patient &amp; the overall PlanDefinition, it checks the patients age against the timeAges for the PlanDefinitions</li>\n<li>It finds the correct PlanDefinition for the age, and then looks in that PlanDefinition</li>\n<li>That PlanDefinition has a list of Questionnaires that we want the parent to fill out for the child</li>\n</ol>\n<p>Does this seem like a reasonable approach or is there a better one someone could recommend?</p>",
        "id": 256985345,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1633900691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span></p>",
        "id": 256993498,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633908539
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"235060\">@Grey Faulkenberry</span> , yes the PlanDefinition structure allows for nesting for these types of use cases. Using the timingElement is reasonable, but for that type of application, I've used an applicability condition that tests the patient's age against the range using a FHIRPath or CQL expression in the \"condition\" element.</p>",
        "id": 257374026,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1634135056
    },
    {
        "content": "<p>That makes more sense.</p>",
        "id": 257386040,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1634139177
    },
    {
        "content": "<p>Thanks as always for the insights!</p>",
        "id": 257386079,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1634139191
    }
]