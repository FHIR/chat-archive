[
    {
        "content": "<p>We are proposing to use Tasks in a Messaging solution to provide some very simple workflow mechanisms. Has anyone tackled tasks in messaging anywhere? Are there any known changes in this are for R4?</p>",
        "id": 153912173,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1507064888
    },
    {
        "content": "<p>I'm involved in a Canadian project that's using Tasks in messaging extensively around e-prescribing and \"secure email\".  Project has been underway for about 1.5 years and has been in production for over 6 months.</p>",
        "id": 153912175,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1507065061
    },
    {
        "content": "<p>Only changes I'm aware of are some small changes to align with updates to the workflow request and event patterns.  We agreed on a couple more changes to those on Monday and I hope to have them completed for final review for our Wed. workflow call.</p>",
        "id": 153912176,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1507065128
    },
    {
        "content": "<p>OK thanks - where is the workflow / event material documented?</p>",
        "id": 153912177,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1507065214
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/event.html\" target=\"_blank\" title=\"http://build.fhir.org/event.html\">build.fhir.org/event.html</a> and <a href=\"http://build.fhir.org/request.html\" target=\"_blank\" title=\"http://build.fhir.org/request.html\">build.fhir.org/request.html</a>.  (Task implements both patterns.)</p>",
        "id": 153912179,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1507065895
    },
    {
        "content": "<p>So... If there was a message there would be a BUNDLE with a MESSAGEHEADER pointing to a TASK resource.</p>",
        "id": 153912186,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1507069467
    },
    {
        "content": "<p>When the task has been \"done\" then should the response be in the Task.Output or MessageHeader.Response</p>",
        "id": 153912187,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1507069570
    },
    {
        "content": "<p>We always chose to respond to tasks with updated versions of the tasks.  Essentially conveying the information the same way as if we'd just updated the Task with REST, but using messaging as the delivery mechanism.</p>",
        "id": 153912193,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1507072329
    },
    {
        "content": "<p>I'm preparing some educational materials for a DevDays tutorial on OrderComms/result reporting. REST is a repository kind of model, hence the need for workflow applications and the Task resource. <br>\nIt would seem that in FHIR Messaging there's no need to use Task, given the business/workflow-expectations associated with a trigger event: once the Request of a order placer has arrived at a order filler, the order filler creates its own (filler-) Request and manages the status thereof, and messages that (filler-)request back to the placer. As such the placer can monitor the status of the execution of its request. Using parent/child relationships on Request one can deal with what would be sub-tasks in the RESTful Task resource.</p>",
        "id": 154010476,
        "sender_full_name": "René Spronk",
        "timestamp": 1539962979
    },
    {
        "content": "<p>At one point, I'd proposed possibly yanking event and one or two things out of MessageHeader and having it point to Task instead to have consistency across the messaging and Rest paradigms, but there wasn't much interest at the time.  (There wasn't much interest in messaging generally.)</p>",
        "id": 154010478,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1539963739
    },
    {
        "content": "<p>Looking at the characteristics of the various paradigms, REST doesn't seem to be the best option for Workflow or ordercoms, so I expect there to be lots of operations. \"Find all tasks which could be fulfilled by me\" is an operation, there's lots of business rules behind that.  \"Cancel my filler-part of a task\" is probably an operation for it might impact a lot of resources that I (as a Filler) already created. <br>\nI'm aware this is early days when it comes to Workflow management in FHIR, for me this topic in FHIR is new (I haven't really looked at it in earnest before), but even with knowledge of v2/v3/IHE XDW the documentation (or better yet: the guidance related to real world scenarios) seems minimalistic at this point in time. <br>\nIn general, Task in a message sounds superfluous, unless we start introducing workflow-definitions in messaging. Up to now such workflow agreements are out of bounds and require prior agreement between communicating parties, i.e. no need to explicitly reference the agreed upon workflow definition.</p>",
        "id": 154010730,
        "sender_full_name": "René Spronk",
        "timestamp": 1540028860
    },
    {
        "content": "<p>There's never a reason to have to do messaging for workflow.  Task.code is just as capable as MessageHeader.event.  The reason for consistency is to avoid paradigm- specific variation when we're saying \"please do\".</p>",
        "id": 154010742,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540039077
    },
    {
        "content": "<p>I never intended to say that one would need messaging to do workflow - the paradigms nicely sit next to each other and can be used where appropriate. What I'm saying is that REST/CRUD (without operations) doesn't seem to be a terribly good paradigm for workflow support (ok, documents would be lots worse). But I guess workflow will always be messy, regardless of the paradigm.  <br>\nHaving 'centralized' workflow management (which is not always the case, I'm aware of that) doesn't fit very well with the client-orchestration nature of REST. Even in IHE XDW (which is client driven) one can't really get around the use of centralized workflow managers for complex workflows. <br>\nQuestion: have any operations been considered/proposed for Task ?</p>",
        "id": 154010747,
        "sender_full_name": "René Spronk",
        "timestamp": 1540044665
    },
    {
        "content": "<p>We had operations but yanked them because we weren't sure why anyone would use them</p>",
        "id": 154010769,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540092328
    },
    {
        "content": "<p>Don't understand why centralized workflow wouldn't fit well with REST.  Task fits with a variety of architectures as documented in the workflow section of the spec.</p>",
        "id": 154010772,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540093866
    },
    {
        "content": "<p>Anyways, I now see this is the equivalent of the v3 ControlAct. Not a very well understood part of v3, so we'll have to make sure that somehow people understand the FHIR Task, which fulfills this role (and more). Task is very meta/abstract/flexible, which makes it hard to understand.<br>\nIn my presentation I'll definitely be mentioning operations, I can't see how one could use Task without them (bar trivial workflows).</p>",
        "id": 154010774,
        "sender_full_name": "René Spronk",
        "timestamp": 1540107719
    },
    {
        "content": "<p>Why would you need an operation?  You post a Task indicating what needs to be done.  The performer updates the Task once they've agreed to take it on and again once they have the results.   Operations are only needed if systems don't expect to have a participant without a Task endpoint.</p>",
        "id": 154010820,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540161609
    },
    {
        "content": "<p>For example: As a filler, to find out what tasks should/could be executed by me is not that trivial an exercise, especially if one has a centralized Task queue. If we have a centralized load balancing system then certainly an operation would be called for; the filler doesn't get to decide what tasks they take on, that would be determined by the load balancer.<br>\nBut even if we don't have a load balancing system, simply querying for tasks with certain characteristics is quite tricky. GET /Task?status=requested&amp;intent=order,original-order&amp;focus:ServiceRequest.category=laboratory (or perhaps focus.code in a value set) would also return any Requests which have been rejected (by this same filler) in the past. It could also include any 'dangling' resources which aren't properly managed anymore by any particular system or which got suck in the workflow somehow.  </p>\n<p>Example #2: suppose as a filler I've embarked on the creation of filler-orders, Observations, DiagnosyicReport and supporting resources for a particular task, and then (whilst still working on the task) the filler discovers the Task is cancelled by the placer. A Task/$cancel-output operation would allow for the cancellation of all output resources without having to navigate the various output resources one by one.</p>",
        "id": 154010832,
        "sender_full_name": "René Spronk",
        "timestamp": 1540188848
    },
    {
        "content": "<p>If you have load balancing, then the load balancer will look at the tasks, look at what's asked for and update the Task to be \"assigned\" to a particular performer - who can then reject or accept.  On rejectioon, the load balancer can create a new Task for a different performer.  \"Could be executed by me\" would be a filter on the performer type and/or chained filter criteria on the task focus.  Operation isn't going to make that any simpler</p>",
        "id": 154011034,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540222700
    },
    {
        "content": "<p>It's not obvious that cancelling the Task would result in cancelling the outputs.   If you do need to cancel them, you're going to have to iterate over all of them to cancel anyhow - though you can do that easily with a Batch.  You certainly <em>could</em> create a custom operation for that purpose, but it's not clear why a custom operation would be better than a batch - and it's certainly much less likely to get implemented.</p>",
        "id": 154011035,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540222878
    },
    {
        "content": "<p>It's more of a gut feeling that there will be more server side logic to this than meets the eye. It's like scheduling: everything could be done by the clients, and yet the Argonaut implementation guide for scheduling mainly relies on a couple of server side operations, to $find, $hold and $book appointments. OrderComms is not that different from Scheduling, other than that it introduces more complexity and flexibility on how to do things. Sure, we can wait for the first implementation guides to appear and then we'll know whether they chose to use operations, but I'll bet they do. Maybe it's because I don't trust clients to do the right thing; client-side orchestration and this kind of complexity are IMHO not a good match. Time will tell.</p>",
        "id": 154011735,
        "sender_full_name": "René Spronk",
        "timestamp": 1540371341
    },
    {
        "content": "<p>I agree that there'll be strong reliance on operations for actions that affect mutliple resources. Task itself won't be the focus on those operations, which is why most of them were removed; just update the resource.</p>",
        "id": 154011738,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1540371668
    },
    {
        "content": "<p>As a filler, one would probably have to define operations on Task, given that depending on the requested service all sorts of Resource types could have been created already as outputs of the Task. The only real alternative is to use the filler-order as the focus of the operation, but when I look at the FHIR spec this doesn't always have to exist. $cancel on serviceRequest makes sense, but if there's no filler-order a $cancel on Task will be necessary.<br>\nQuestion: is  a filler-order an output of a Task ? Or would task.output just be the DiagnosticReport/Observations (the result of the filler order)? <br>\nUsing may lab example: The status of a filler-order depends on the status of a Task, which in turn depends on the status of a Filler-order, which in turn depends on the status of a DiagnosticReport which may depend on the status of the underlying Observations. No wonder people find this to be a complex topic.</p>",
        "id": 154011830,
        "sender_full_name": "René Spronk",
        "timestamp": 1540389398
    },
    {
        "content": "<p>A filler order could be added to a Task as an output, but it's not a given.  The status of the filler order does not depend on the status of the Task.  If a request for fulfillment is revoked, the filler might choose to complete anyhow because they've passed the point of no return and intend to bill for it regardless.  The same is true for cancellation of an order when there's a Task in progress.</p>",
        "id": 154012062,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540438874
    },
    {
        "content": "<p>Sure - the status of a placer order depends on the status of the task. From your answer I see that apparently the filler-order isn't normally regarded to be an output of a Task. The filler-order relationship with the placer-order is 'direct' and not via Task.</p>",
        "id": 154012347,
        "sender_full_name": "René Spronk",
        "timestamp": 1540551642
    },
    {
        "content": "<p>\"depends on\" is a little strong.  \"is influenced by\" is a bit more accurate.  If a fulfillment Task is complete, that's a cue to the placer system to evaluate whether it wants to mark the Request as complete.  But there are lots of reasons why it wouldn't.  And even if the Task never gets marked as completed, the placer might mark the order as completed anyhow.</p>",
        "id": 154012534,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540565205
    },
    {
        "content": "<p>There are business decisions that determine what the relationship is between placer and filler orders.  Task is a communication vehicle.  But there's never a guarantee that everything will be in sync.</p>",
        "id": 154012537,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540565265
    },
    {
        "content": "<p>And operations don't make any of that nuance go away...</p>",
        "id": 154012540,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540565281
    }
]