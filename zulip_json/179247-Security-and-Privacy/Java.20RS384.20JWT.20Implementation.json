[
    {
        "content": "<p>I'm looking at implementing server to server OAuth as defined in Bulk Data (<a href=\"https://hl7.org/fhir/uv/bulkdata/authorization/index.html\">https://hl7.org/fhir/uv/bulkdata/authorization/index.html</a>). The client assertion is a signed JWT using RS384. I have a Java server which wishes to verify this signature using the public key from the jwks.</p>\n<p>I'm using the auth0 jwt library to verify the signature. To do this an algorithm is required which takes as an input the java security RSAPublicKey. However I am having difficulty creating the RSAPublicKey object from the jwk set. The parameters n and e in jwks are Base64 URL Encoded by the RSAPublicKey uses BigIntegers. The following seems to work:<br>\n<code>BigInteger e = new BigInteger(Base64.getUrlDecoder().decode(rawExponent));</code><br>\nBut for the modulus it appears to overflow; the result is -310301627147497527848975101822928448285430943117086804.......</p>\n<p>Has anyone else successfully created an RSAPublicKey object from a jwk set?</p>",
        "id": 214077456,
        "sender_full_name": "Benjamin Langley",
        "timestamp": 1603297962
    },
    {
        "content": "<p>For reference here is the public key I am using to verify the JWT</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  &quot;keys&quot;: [\n    {\n      &quot;kty&quot;: &quot;RSA&quot;,\n      &quot;alg&quot;: &quot;RS384&quot;,\n      &quot;n&quot;: &quot;52tcPrGJgzyGqjcUiHsbSk_PxQ7Uovz4saGxva3iyBoidsekonigJJ3LnFlHYb3vBa2NA-0GpX2E1KhNNcYWAWQFcu069zi0YZ_wWGn6PWZURuonUoKH4dGHggym3xxVUxuA8OPubGe5ji56eic4RPINg0z-TtPlS-H9dnDIVznRUTXf3fy2dqWMuTY4D2e4fXGII6OpFAsEyrOqIoR8pLWGu7AiQkothunopp9q_Gu2xqB6l8BNulsbiwsQMeRE-9SGfeFpyblHiizHDwSqeZ3iv49Ellk4yjmrf6wOaFA2IXRqL1cCLj86B6KIDrjdzOL4lOSiES-PclNpioG2rQ&quot;,\n      &quot;e&quot;: &quot;AQAB&quot;,\n      &quot;key_ops&quot;: [&quot;verify&quot;],\n      &quot;ext&quot;: true,\n      &quot;kid&quot;: &quot;3ab8b05b64d799e289e10a201786b38c&quot;\n    }\n  ]\n}\n</code></pre></div>",
        "id": 214077567,
        "sender_full_name": "Benjamin Langley",
        "timestamp": 1603298018
    },
    {
        "content": "<p>If anyone runs into this problem again the issue was with number representations. The jwks is Base64Url encoded big endian but the BigInteger byte array constructor expects two's complement. The solution is to use <code>BigInteger e = new BigInteger(1, Base64.getUrlDecoder().decode(rawExponent));</code></p>",
        "id": 214088269,
        "sender_full_name": "Benjamin Langley",
        "timestamp": 1603302424
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 214103483,
        "sender_full_name": "John Moehrke",
        "timestamp": 1603309042
    }
]