[
    {
        "content": "<p>We are building a solution based on FHIR server hosted in our network and allow external EHR systems (and perhaps external SPA applications) to access this FHIR endpoint. This interaction is covered in the fifth auth use case of the famous Argonaut project. And here there is draft of the solution (Cross-Organization Data Access Profile): <a href=\"https://github.com/smart-on-fhir/smart-on-fhir.github.io/wiki/cross-organizational-auth\" target=\"_blank\" title=\"https://github.com/smart-on-fhir/smart-on-fhir.github.io/wiki/cross-organizational-auth\">https://github.com/smart-on-fhir/smart-on-fhir.github.io/wiki/cross-organizational-auth</a>. Is this specification will be included in the SMART on FHIR, or there are others proposals that are getting support of FHIR community? Maybe somebody already implemented such interactions.</p>",
        "id": 153968105,
        "sender_full_name": "Yaroslav Hradowy",
        "timestamp": 1528487915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> ?</p>",
        "id": 153968140,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528495099
    },
    {
        "content": "<p>To the best of my knowledge none implemented or is implementing it</p>",
        "id": 153968156,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1528496400
    },
    {
        "content": "<p>More in general EHR vendors are focusing on providing FHIR end point to publish the data they hold, not to use FHIR to get data from other systems</p>",
        "id": 153968159,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1528496451
    },
    {
        "content": "<p>For an external SPA application the standard SMART stand-alone launch would be enough</p>",
        "id": 153968162,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1528496521
    },
    {
        "content": "<p>(<a href=\"http://docs.smarthealthit.org/authorization/\" target=\"_blank\" title=\"http://docs.smarthealthit.org/authorization/\">http://docs.smarthealthit.org/authorization/</a>)</p>",
        "id": 153968163,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1528496584
    },
    {
        "content": "<p>Wouldn't the bulk-data group be working on this? I would very much like to see a preference presented. In your specific solution, what are the partners looking to use? I think moving from where we are today to some community consensus preference, will require stakeholders experimenting. Inventing an academic solution will likely not be optimal. Optimal often is influenced by tools and technology available, not just academic theory. OAuth as outlined might work, but might also be rather chatty with little benefit. Use of Certificate backed authentication might be less chatty, but brings in server-side issues.   see <a href=\"https://healthcaresecprivacy.blogspot.com/2016/11/is-iua-oauth-useful-in-service-to.html\" target=\"_blank\" title=\"https://healthcaresecprivacy.blogspot.com/2016/11/is-iua-oauth-useful-in-service-to.html\">https://healthcaresecprivacy.blogspot.com/2016/11/is-iua-oauth-useful-in-service-to.html</a></p>",
        "id": 153968308,
        "sender_full_name": "John Moehrke",
        "timestamp": 1528722578
    },
    {
        "content": "<blockquote>\n<p>Wouldn't the bulk-data group be working on this? I would very much like to see a preference presented. In your specific solution, what are the partners looking to use? I think moving from where we are today to some community consensus preference, will require stakeholders experimenting. Inventing an academic solution will likely not be optimal. Optimal often is influenced by tools and technology available, not just academic theory. OAuth as outlined might work, but might also be rather chatty with little benefit. Use of Certificate backed authentication might be less chatty, but brings in server-side issues.   see <a href=\"https://healthcaresecprivacy.blogspot.com/2016/11/is-iua-oauth-useful-in-service-to.html\" target=\"_blank\" title=\"https://healthcaresecprivacy.blogspot.com/2016/11/is-iua-oauth-useful-in-service-to.html\">https://healthcaresecprivacy.blogspot.com/2016/11/is-iua-oauth-useful-in-service-to.html</a></p>\n</blockquote>\n<p>Hi John. Unfortunately we do not have a partner organization engaged with our project. We just looking for what is available as best practice or adopted approach by FHIR community, so we go with something that will require minimum adjustment in future, as well as from partner's perspective - they should not write a separate security implementation for each FHIR service provider. We'll be working with hundreds of partner applications in future.</p>\n<p>I gained that the Cross-Organizational use case is not yet ready for prime time. So we'll have to use different approach. In your article you argue that mutually-authenticated TLS is sufficient for this kind of interactions, and OAuth2 is not needed. How then we should implement authorization part? At least we should receive end-user information for auditing purposes (as described in second JWT token in Cross-Organizational use case).</p>",
        "id": 153968431,
        "sender_full_name": "Yaroslav Hradowy",
        "timestamp": 1528741382
    },
    {
        "content": "<p>I am not going to say that argonaut spec is not yet ready...  The use of mutual-auth-TLS is logical... but has problems with firewalls. If you can manage that, then it likely is the best approach.  The client in this case is identified by the client certificate. That identity in the client cert can be recorded in the audit log. This is very much what is done in many of the predecessor B2B communications like HL7 v2, v3, DICOM, and other. The firewall problem, which I do explain in the article is that often the TLS is terminated at the cloud edge, and therefore the backend doesn't have knowledge of the client. The backend does know that a legitimate client was authenticated, just not which. This can be handled, as I explain, through some in-the-cloud magic.   Neither define how you determine what access is authorized, that must still be logic. Difference is that with OAuth you can put some of this logic into the AS, but you must still do the access control yourself. Supporting BOTH solutions might be a good choice for you.</p>",
        "id": 153968433,
        "sender_full_name": "John Moehrke",
        "timestamp": 1528742285
    },
    {
        "content": "<p>both of you should read the SMART backend services spec so that your dsicussion is illuminated by it</p>",
        "id": 153968572,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528758173
    },
    {
        "content": "<p>Grahame, it seems that SMART backend services spec ( <a href=\"http://docs.smarthealthit.org/authorization/backend-services\" target=\"_blank\" title=\"http://docs.smarthealthit.org/authorization/backend-services\">http://docs.smarthealthit.org/authorization/backend-services</a>) is more for data exchange between applications rather than interactive use of data from external FHIR-enabled application. This one uses the same jwt-bearer token as cross-organizational DAP but only for authentication. Authorization is through grant type Client Credential in first case, and the jwt-bearer in other. Client Credential type as opposite to jwt-bearer does not provide means to pass end-user information necessary for auditing of incoming requests.</p>",
        "id": 153968746,
        "sender_full_name": "Yaroslav Hradowy",
        "timestamp": 1528826433
    },
    {
        "content": "<p>Thanks, John, for clarification</p>",
        "id": 153968750,
        "sender_full_name": "Yaroslav Hradowy",
        "timestamp": 1528829886
    },
    {
        "content": "<p>so I think that when the client system that is using backend services to connect is acting on behalf of a user, it should attach an openid token for the user to the request so that this auditing can happen, and this should be a standard part of the back-end services profile</p>",
        "id": 153968789,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528844245
    },
    {
        "content": "<p>Yes, but isn't the scope of the backend services spec that there is no interactive user? If there was an interactive user then it would be possible to do normal SMART...   I am not saying that sometimes a backend service does things onbehalf  of a user (user triggered a workflow, workflow triggered a communication, but too far away from the interactive session t obtain an OpenId token)</p>",
        "id": 153968969,
        "sender_full_name": "John Moehrke",
        "timestamp": 1528894506
    },
    {
        "content": "<p>This can't be satisfied by an OAuth token, but would still be useful to the responding system for audit purposes...   This is classically how the SAML token in XDS/XCA environments is used. Where the SAML token is an indication of the user, but is not usually verifiably proven. In these environments this is simply the result of a huge-federation that has no method of verifying SAML signatures by all IDPs.</p>",
        "id": 153968976,
        "sender_full_name": "John Moehrke",
        "timestamp": 1528894698
    },
    {
        "content": "<p>Are you suggesting that a JWT be created of a non-verifiable type, just so that it can carry user / context attributes?   Would tooling allow this?</p>",
        "id": 153968978,
        "sender_full_name": "John Moehrke",
        "timestamp": 1528894769
    },
    {
        "content": "<blockquote>\n<p>isn't the scope of the backend services spec that there is no interactive user</p>\n</blockquote>",
        "id": 153969005,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528895263
    },
    {
        "content": "<p>not at all. It's saying, the trust is established between the systems directly.</p>",
        "id": 153969006,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528895281
    },
    {
        "content": "<p>the systems may be acting on behalf of a user, and trusting each other's claims in this regard. This is an extremely common approach in healthcare today</p>",
        "id": 153969008,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528895318
    },
    {
        "content": "<p>I didn't say an OAuth token, I said an openID token</p>",
        "id": 153969012,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528895340
    },
    {
        "content": "<p>of course, sometimes a system won't be able to connect things up. But I think that we should encourage standardising on an OpenID token in this case when the system can connect things</p>",
        "id": 153969014,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528895390
    }
]