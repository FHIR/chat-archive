[
    {
        "content": "<p>On future call, I would like to discuss the topic of bringing back front matter to source pages.  It is useful for defining local page variables and all kinds of stuff for Jekyll, and for direct editing in external markdown editors like Hackmd which use front matter too -- very useful.</p>",
        "id": 260863766,
        "sender_full_name": "Eric Haas",
        "timestamp": 1636493146
    },
    {
        "content": "<p>what's front matter?</p>",
        "id": 260875256,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1636498890
    },
    {
        "content": "<p>Apparently this:<br>\n<a href=\"https://jekyllrb.com/docs/front-matter/\">https://jekyllrb.com/docs/front-matter/</a></p>",
        "id": 260944054,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1636517785
    },
    {
        "content": "<p>what happened to it? I certainly didn't take it away</p>",
        "id": 260950223,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1636525188
    },
    {
        "content": "<p>LLoyd did since it messes with xhtml validation.</p>",
        "id": 261049402,
        "sender_full_name": "Eric Haas",
        "timestamp": 1636575756
    },
    {
        "content": "<p>There were a bunch of issues.  Front matter was being used to define things like page titles - which needs to live in the ImplementationGuide.  Also, markdown needed to be injected in the XHTML to get the headers/footers, etc. to work properly.  Also, the whole point of markdown was to have something super simple for authors to write.  As soon as we start requiring a bunch of complex stuff up front, then the value proposition for supporting markdown diminishes.  Also, we don't want a ton of custom hacking that makes IGs appear different - our objective is to get IGs to appear more consistent.</p>\n<p>None of that means that we can't re-evaluate if/how frontmatter (or at least certain types of it) could be supported.  Happy for us to discuss on our weekly calls.</p>",
        "id": 261050067,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1636576090
    },
    {
        "content": "<p>My requirements for front matter: <br>\nWe are using the IG publisher ecosystem in a bunch of different specifications, not only because of the FHIR content, but because it is automated and self-validating documentation system. As such, we want the IG Publisher to be open to other structured content. <br>\nTypes of content we'd add - Actor definitions, transaction definitions, requirements/criteria,...</p>",
        "id": 261408140,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636882278
    },
    {
        "content": "<p>All those are structured data objects that we could add to an IG. We can pre-process them and add them as XHTML, but we need something more than just narrative.</p>",
        "id": 261408195,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636882388
    },
    {
        "content": "<p>There seem to be 2 possible enablers for that: </p>\n<ol>\n<li>Front matter</li>\n<li>the newly introduced logical model instances (we can define our custom types)</li>\n</ol>",
        "id": 261408254,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636882481
    },
    {
        "content": "<p>(ooh, where can I learn more about the newly introduced logical models instances?)</p>",
        "id": 261420400,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1636900260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191315\">Josh Mandel</span> <a href=\"#narrow/stream/196008-ig-publishing.20requirements/topic/bring.20back.20front.20matter!/near/261420400\">said</a>:</p>\n<blockquote>\n<p>(ooh, where can I learn more about the newly introduced logical models instances?)</p>\n</blockquote>\n<p><a href=\"#narrow/stream/215610-shorthand/topic/InstanceOf.20a.20logical.20model.3F\">https://chat.fhir.org/#narrow/stream/215610-shorthand/topic/InstanceOf.20a.20logical.20model.3F</a><br>\n<a href=\"#narrow/stream/179252-IG-creation/topic/Logical.20Model.20Examples\">https://chat.fhir.org/#narrow/stream/179252-IG-creation/topic/Logical.20Model.20Examples</a></p>",
        "id": 261432065,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636915385
    },
    {
        "content": "<p>I'm totally confused by linking front-matter and logical models</p>",
        "id": 261432100,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1636915437
    },
    {
        "content": "<p>they're not linked. they are the only ways i know that structured (not narrative) content can be added to an IG besides the resources</p>",
        "id": 261432230,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636915566
    },
    {
        "content": "<p>how would you 'add structured content' using front matter?</p>",
        "id": 261432245,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1636915601
    },
    {
        "content": "<p>using the jekyll templates</p>",
        "id": 261432328,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636915715
    },
    {
        "content": "<p>here's an example of the structured front matter for defining a \"transaction\" (don't mind the dummy content, the only important thing is that it is structured according to a model)<br>\n<a href=\"https://raw.githubusercontent.com/costateixeira/gendocs/main/_transactions/transaction1.md\">https://raw.githubusercontent.com/costateixeira/gendocs/main/_transactions/transaction1.md</a><br>\nand the rendered result<br>\n<a href=\"https://costateixeira.github.io/gendocs/transactions/transaction1\">https://costateixeira.github.io/gendocs/transactions/transaction1</a></p>",
        "id": 261432439,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636915868
    },
    {
        "content": "<p>my first response is wtf? Surely you'd put all that in a json file in _data?</p>",
        "id": 261432498,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1636915923
    },
    {
        "content": "<p><a href=\"https://github.com/costateixeira/gendocs/blob/main/_layouts/transaction.html\">https://github.com/costateixeira/gendocs/blob/main/_layouts/transaction.html</a> is the logic making this happen?</p>",
        "id": 261432530,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1636915979
    },
    {
        "content": "<p>yes</p>",
        "id": 261432548,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636916007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/196008-ig-publishing.20requirements/topic/bring.20back.20front.20matter!/near/261432498\">said</a>:</p>\n<blockquote>\n<p>my first response is wtf? Surely you'd put all that in a json file in _data?</p>\n</blockquote>\n<p>yes we could, but the _data folder is not accessible to an IG author (is it?)</p>",
        "id": 261432612,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636916090
    },
    {
        "content": "<p>Unless of course, the file in the _data folder is an instance of a logical model.</p>",
        "id": 261432640,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636916136
    },
    {
        "content": "<p>what you put in /input/pagecontent/_data will got to /temp/pages/_data</p>",
        "id": 261432712,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1636916217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/196008-ig-publishing.20requirements/topic/bring.20back.20front.20matter!/near/261432712\">said</a>:</p>\n<blockquote>\n<p>what you put in /input/pagecontent/_data will got to /temp/pages/_data</p>\n</blockquote>\n<p>ok this bit of information is very handy.</p>",
        "id": 261432972,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636916472
    },
    {
        "content": "<p>Still, I'd like to enforce some structure. For example if my data object is a transaction, i should be able to say that the <a href=\"http://transaction.id\">transaction.id</a> is 1..1 (and fail if it's not there)</p>",
        "id": 261433036,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636916531
    },
    {
        "content": "<p>From my side, all of this is to explore the options in preparation for a discussion. <br>\nI personally experimented with front matter, there were some challenges, and I'm seeing if the new dot connects in the picture</p>",
        "id": 261433105,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636916634
    },
    {
        "content": "<p>I agree w/ Grahame that we'd be better off sticking an JSON file in _data than sticking this stuff in markdown frontmatter where it can't be properly validated at all.  We could also explore using an actual logical model instance and somehow indicating that a distinct rendering template is to be applied.</p>",
        "id": 261434698,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1636918715
    },
    {
        "content": "<p>Yes. Files in _data would be structured but not validated, and I presume would all be rendered with the same template</p>",
        "id": 261435441,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636919938
    },
    {
        "content": "<p>Instances could be validated and may have specific templates</p>",
        "id": 261435447,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636919956
    },
    {
        "content": "<p>My experience with front matter predates both of these alternatives. For me the logical model instance may meet the requirements</p>",
        "id": 261435570,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636920042
    },
    {
        "content": "<p>You can define a template that renders things as you wish, I think.  It would reference whatever _data file you've asked it to reference.  If you want to use the same template with a bunch of different _data files, then we should look at logical model instances and some means of determining the appropriate template to use.</p>",
        "id": 261436541,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1636921424
    },
    {
        "content": "<p>I think it may be the winning approach (for my purposes at least). I would want the template to take each of those files, figure out what template to use (based on the type), and render it. That would also allow managing those objects in a much better way than front matter buried in a file before the narrative</p>",
        "id": 261438988,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1636924994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191832\">Jose Costa Teixeira</span> <a href=\"#narrow/stream/196008-ig-publishing.20requirements/topic/bring.20back.20front.20matter!/near/261432612\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/196008-ig-publishing.20requirements/topic/bring.20back.20front.20matter!/near/261432498\">said</a>:</p>\n<blockquote>\n<p>my first response is wtf? Surely you'd put all that in a json file in _data?</p>\n</blockquote>\n<p>yes we could, but the _data folder is not accessible to an IG author (is it?)</p>\n</blockquote>\n<p>Indeed it and I routinely copy the ig resource  ig package list in there  it  just stick in it there:</p>\n<div class=\"codehilite\"><pre><span></span><code>├── FHIR-us-core.xml\n├── README.md\n├── SUSHI-GENERATED-FILES.md\n├── fsh-generated\n│   ├── includes\n│   └── resources\n├── ig.ini\n├── input\n│    ├── Archives\n         ├── Drafts\n         ├── data\n         │   ├── README.md\n         │   ├── ig.yml\n         │   └── package-list.yml\n         ├── examples\n         │   ├── Device-defib.json\n...\n</code></pre></div>",
        "id": 261519876,
        "sender_full_name": "Eric Haas",
        "timestamp": 1636992945
    },
    {
        "content": "<p>I want the to tag and name use variables:</p>\n<ol>\n<li>I can use some other tools beside the ig publishing.  for example HackMd,  The front matter tags and title lets me sort and find them when pushing and pulling from the repro.</li>\n<li>can use page variables</li>\n</ol>",
        "id": 261521727,
        "sender_full_name": "Eric Haas",
        "timestamp": 1636993651
    },
    {
        "content": "<p>when can we  talk about this?</p>",
        "id": 264237206,
        "sender_full_name": "Eric Haas",
        "timestamp": 1639006695
    },
    {
        "content": "<p>We could on Tuesday.  I'm happy for the templates to stick extra stuff in data (possibly from a defined folder).  I'm not in favor of allowing more complexity in markdown.</p>",
        "id": 264254365,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639022720
    },
    {
        "content": "<p>I would like or reuse the markdown documents and the prohibition of front matter is preventing that.  I don't understand what the templates have to do with it.</p>",
        "id": 264268279,
        "sender_full_name": "Eric Haas",
        "timestamp": 1639037838
    },
    {
        "content": "<p>Can you provide a concrete example of what you’re trying to accomplish?</p>",
        "id": 264309925,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639060588
    },
    {
        "content": "<p><em>sigh</em>.... well ...<br>\nfirst </p>\n<blockquote>\n<p>Front matter is metadata written in yaml, located at the top of a file wrapped in ---'s.</p>\n</blockquote>\n<p>Many static-site generators like Hugo, Jekyll, and Hackmd support it.   I want to be to port my documents from one to the other without having to remove it and use the front matter capabilities <a href=\"https://jekyllrb.com/docs/front-matter/\">baked right in jekyl</a> when using the ig pub.</p>",
        "id": 264359096,
        "sender_full_name": "Eric Haas",
        "timestamp": 1639080424
    },
    {
        "content": "<p>I know what front matter <em>is</em>.  I want to know what you're trying to accomplish with it - to see if there's a simpler mechanism that can be consistent across both XML and markdown and that also minimizes the learning curve for authors.</p>",
        "id": 264361223,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639081561
    },
    {
        "content": "<p>If the issue is just that you have tools that automatically plug it in and you don't want to have to remove it to get the publisher to not bomb, we can certainly figure out a way for the templates to do that.</p>",
        "id": 264361320,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639081604
    },
    {
        "content": "<p>why would the publisher bomb?</p>",
        "id": 264361344,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1639081619
    },
    {
        "content": "<p>Because the markdown gets embedded in an XHTML page inside a \"process markdown\" command - and I believe front matter isn't allowed in that context.</p>",
        "id": 264361545,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639081724
    },
    {
        "content": "<p>that's a template thing then. I don't understand why a template would do that and not let jekyll process the content</p>",
        "id": 264362377,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1639082129
    },
    {
        "content": "<p>Because the headers and footers weren't working properly otherwise.</p>",
        "id": 264364493,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639083166
    },
    {
        "content": "<p>how so? And is there an alternative solution?</p>",
        "id": 264365433,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1639083611
    },
    {
        "content": "<p>Well, the first question is to find out what's needed.  Because several of the things typically done in front matter should be done in other ways in the publishing framework (defining data, specifying titles, controlling page table-of-contents, etc.)</p>",
        "id": 264365747,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639083741
    },
    {
        "content": "<p>can we be specific?</p>",
        "id": 264368353,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1639084992
    },
    {
        "content": "<blockquote>\n<p>And is there an alternative solution?</p>\n</blockquote>\n<p>Adopt <a href=\"https://docs.astro.build/getting-started/\">Astro</a>? This is mostly tongue-in-cheek, since I haven't used it, and only glanced over the docs, but if we are looking for both flexibility, and output in HTML+CSS, having a single tool that depends on Node/npm only, might make things easier (and it has frontmatter everywhere).</p>\n<p>Could be something to look at post R5....</p>",
        "id": 264368679,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1639085154
    },
    {
        "content": "<p>wow. in principle, we could support something other than Jekyll, but we have a huge infrastructure built on it</p>",
        "id": 264369106,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1639085335
    },
    {
        "content": "<p>Yes, Astro would be a replacement of Jeckyll. The only reason to even look into that might be to reduce the complexity of the Java side of building the specification. If the Java part of the IG builder creates (reusable?) components, and the site builder stitches them together, that may make things easier to manage.</p>\n<p>On the other hand, that might be possible just with Jeckyll and a reorg of the publishing process?</p>\n<p>Sorry for the distraction, keep carrying on...</p>",
        "id": 264370861,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1639086181
    },
    {
        "content": "<blockquote>\n<p>If the Java part of the IG builder creates (reusable?) components, and the site builder stitches them together, that may make things easier to manage.</p>\n</blockquote>\n<p>That's exactly how it works.</p>",
        "id": 264371168,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1639086323
    },
    {
        "content": "<p>It seems to me that Jeckyll's assumption that it is building a blog might be too constraining. Are the renderers in the core library aware of the Jeckyl structure - i.e. can they build XHTML partials for the Jeckyll <code>_include</code> directory?</p>",
        "id": 264375400,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1639088209
    },
    {
        "content": "<p>the iG publisher produces 1000s of fragments in _include. And it produces some non-processible files of it's own in the Jekyll root. And then files as driven by the templates, which control how everything is stitched together.</p>",
        "id": 264376191,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1639088672
    },
    {
        "content": "<p>at issue here is that Lloyd has built an extensive pre-processing process into the templates that is XML orientated, and removes the ability to do some convenient things in the Jekyll layer that is usually used to drive templating in Jekyll. It's not really a limitation of Jekyll here</p>",
        "id": 264376312,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1639088750
    },
    {
        "content": "<p>Right.  And one of my objectives is to minimize the amount of Jekyll any IG author needs to use to create IGs.  The reason to support markdown is it's \"simple and easy to learn\".  If we start requiring understanding of a whole bunch of extra stuff in markdown files, then it becomes harder to learn.  It also makes it harder to move content from markdown to XHTML or vice versa if the author wants to do that.  So if we're going to leverage front matter, there needs to be a really good reason.</p>",
        "id": 264384265,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639093867
    },
    {
        "content": "<p>Promoting a Jekyll replacement without having  used it  before is preposterous.  I am not proposing replacing Jekyll just unlocking a core feature.</p>",
        "id": 264640090,
        "sender_full_name": "Eric Haas",
        "timestamp": 1639338273
    },
    {
        "content": "<p>I think the idea of Jekyll replacement is a non-starter.<br>\nI also think that we should discuss the front matter. I started experimenting with it, I have a first impression of what I'd do with it, but my front matter is not just data that I want structured, it is that I want structured AND managed.</p>",
        "id": 264643443,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639342915
    },
    {
        "content": "<p>So my current purposes, logical instances + templates is a superior replacement to front matter. I think Eric's requirements will be different but if there's some commonalities, we can discuss it and I can work on it (whatever \"it\" turns out to be).</p>",
        "id": 264643523,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639343015
    },
    {
        "content": "<p>I had another call today where this is becoming an important thing to do - for me, not front matter, but the ability to add templates to render the logical model instances.</p>",
        "id": 264908502,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639508404
    },
    {
        "content": "<p>I can volunteer to make some templates and do the config.json changes in a branch to get this going.</p>",
        "id": 264908671,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639508437
    },
    {
        "content": "<p>Another thing that is is high demand is the ability to publish inherited artifacts. Possibly an ig parameter, or even no change, just a change to the code to allow listing artifacts that are not in the IG but in the dependencies</p>",
        "id": 264908968,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639508523
    },
    {
        "content": "<p>to get what going? I don't really see the link between logical models and front matter. What's the issue with logical models?</p>",
        "id": 264909295,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1639508618
    },
    {
        "content": "<p>logical model instances</p>",
        "id": 264915154,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639511242
    },
    {
        "content": "<p>or examples</p>",
        "id": 264915165,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639511249
    },
    {
        "content": "<p>I need to add structured &amp; managed content to the IGs. For example an \"actor definition\"</p>",
        "id": 264915265,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639511295
    },
    {
        "content": "<p>I can do that as a logical model instance,</p>",
        "id": 264915308,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639511327
    },
    {
        "content": "<p>and then have a template that knows how to render that thing</p>",
        "id": 264915327,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639511338
    },
    {
        "content": "<p>I could do that with front matter, but with front matter I cannot define a structure upfront (and the structured content is not really manageable, it's just a bit of yaml in a narrative)</p>",
        "id": 264915496,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639511440
    },
    {
        "content": "<p>now that there's a way to define instances of a logical model, it should not be hard to PoC the publication of these \"custom artifacts\".<br>\nFor this, I think the publisher needs to tell the template (via config.json) what \"type\" of model is this an instance of.</p>",
        "id": 264916164,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639511760
    },
    {
        "content": "<p>(or is there another way to tell which template to use for each type of model?)</p>",
        "id": 264916284,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639511805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> I am interested in that..</p>",
        "id": 265017313,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1639578476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191549\">@Frank Oemig</span> the discussion on whether/how we're going to do that hasn't happened yet, but it's good to know that you're also interested.</p>",
        "id": 265018162,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639578864
    },
    {
        "content": "<p>I have to generate instances of LMs and currently do not know how to do that...<br>\nSo, if it goes with front matter -  great. Although I haven't understood that enough.</p>",
        "id": 265019098,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1639579257
    },
    {
        "content": "<p>it should go without front matter but that is the other discussion.</p>",
        "id": 265035065,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639585511
    },
    {
        "content": "<p>Outcome of the discussion was that the issue is with Jekyll, not with the template.  Jekyll doesn't support front matter in imports and, because the page content must be imported into the templates to get the standard header, footer and other stuff, we run into a problem.  It's an issue that's been raised with Jekyll by others and their response has been \"don't do that\".  So we've agreed to modify the publisher so that it strips front matter from imports as part of the migration process at the beginning of running the publisher so that if the markdown tool you're using injects front matter, you don't have to worry about stripping it yourself.  However, you won't be able to do anything useful within the frontmatter such as defining variables as they'll just get stripped.</p>",
        "id": 265053601,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639592904
    },
    {
        "content": "<p>Yes. So just for info <span class=\"user-mention\" data-user-id=\"191549\">@Frank Oemig</span> I'll be looking at the other topic (logical model instances) for the \"doing anything useful such as variables\"</p>",
        "id": 265055905,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639593905
    },
    {
        "content": "<p>for the instances of LMs, check this <a href=\"#narrow/stream/179252-IG-creation/topic/Logical.20Model.20Examples\">https://chat.fhir.org/#narrow/stream/179252-IG-creation/topic/Logical.20Model.20Examples</a></p>",
        "id": 265068381,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1639598993
    },
    {
        "content": "<p>I'll come back to the LM issue later when I have time to think. The front matter problem should be sorted in the next release</p>",
        "id": 265536104,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1639990600
    }
]