[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> I am working on R3-R4 conversions using the java reference classes, and an issue has come up for me. Where we have .value[x], we generate typed hasValue and getValue accessors. And a plain unadorned .setValue. I'd like to modify the generated .setValue by checking the type when it's used, so that illegal types are not allowed. </p>\n<p>thoughts?</p>",
        "id": 153940750,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1519678160
    },
    {
        "content": "<p>That makes perfect sense to me</p>",
        "id": 153942004,
        "sender_full_name": "James Agnew",
        "timestamp": 1520129132
    },
    {
        "content": "<p>if you're going to tweak the value[x] getter/setter methods, do you have any thoughts on this: <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/846\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/846\">https://github.com/jamesagnew/hapi-fhir/issues/846</a></p>",
        "id": 153942005,
        "sender_full_name": "James Agnew",
        "timestamp": 1520129204
    },
    {
        "content": "<p>should I also generate type specific setters too, yes?</p>",
        "id": 153942020,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520139088
    },
    {
        "content": "<p>as for gh issue.... interesting. I think it should return null if the value is null. I'll change the generator</p>",
        "id": 153942021,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520139368
    },
    {
        "content": "<p>I can't see that this will break anyone in a bad way?</p>",
        "id": 153942022,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520139383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I don't see a benefit to type-specific setters. The generic set can handle any types so there is no added convenience, and JavaDocs should take care of advertising what's allowable.</p>\n<p>And agreed on the GH issue. Returning null seems safest, I really hope nobody is depending on the NPE there (they certainly shouldn't be, it isn't documented)</p>",
        "id": 153942046,
        "sender_full_name": "James Agnew",
        "timestamp": 1520170055
    },
    {
        "content": "<p>well, the thing is, if the type list changes, you get a compile error</p>",
        "id": 153942069,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520180147
    },
    {
        "content": "<p>ok, so, I've updated the java generator:</p>",
        "id": 153942071,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520181105
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        <span class=\"kr\">public</span> <span class=\"nx\">UriType</span> <span class=\"nx\">getValueSetUriType</span><span class=\"p\">()</span> <span class=\"kr\">throws</span> <span class=\"nx\">FHIRException</span> <span class=\"p\">{</span>\n          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">valueSet</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">valueSet</span> <span class=\"k\">instanceof</span> <span class=\"nx\">UriType</span><span class=\"p\">))</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">FHIRException</span><span class=\"p\">(</span><span class=\"s2\">&quot;Type mismatch: the type UriType was expected, but &quot;</span><span class=\"o\">+</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">valueSet</span><span class=\"p\">.</span><span class=\"nx\">getClass</span><span class=\"p\">().</span><span class=\"nx\">getName</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"s2\">&quot; was encountered&quot;</span><span class=\"p\">);</span>\n          <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">UriType</span><span class=\"p\">)</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">valueSet</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n</pre></div>",
        "id": 153942072,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520181108
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        <span class=\"kd\">public</span> <span class=\"n\">ElementDefinitionBindingComponent</span> <span class=\"nf\">setValueSet</span><span class=\"o\">(</span><span class=\"n\">Type</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n          <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!(</span><span class=\"n\">value</span> <span class=\"k\">instanceof</span> <span class=\"n\">UriType</span> <span class=\"o\">||</span> <span class=\"n\">value</span> <span class=\"k\">instanceof</span> <span class=\"n\">CanonicalType</span><span class=\"o\">))</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">FHIRFormatError</span><span class=\"o\">(</span><span class=\"s\">&quot;Not the right type for ElementDefinition.binding.valueSet[x]: &quot;</span><span class=\"o\">+</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">fhirType</span><span class=\"o\">());</span>\n          <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">valueSet</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n          <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n</pre></div>",
        "id": 153942073,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520181132
    },
    {
        "content": "<p>so I'm applying these changes to the r4 package. What do we need to do about the others?</p>",
        "id": 153942074,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520181157
    },
    {
        "content": "<p>Re. the compile error, truthfully I don't see many people using these when the existing setter is shorter. I suppose we could just get rid of <code>setValueSet(Type)</code> and replace it with <code>setValueSet(CanonicalType)</code> and <code>setValueSet(UriType)</code>. Is that what you mean? That wouldn't break existing code (unless that code was wrong in the first place) so that wouldn't be so bad.</p>",
        "id": 153942089,
        "sender_full_name": "James Agnew",
        "timestamp": 1520183963
    },
    {
        "content": "<p>I guess if someone had their CanonicalType or UriType in a variable of type <code>Type</code> it would break... I dunno, I'm 50/50 on that.</p>",
        "id": 153942090,
        "sender_full_name": "James Agnew",
        "timestamp": 1520184012
    },
    {
        "content": "<p>Re the other packages, is it feasible to do the same for the R3 structures? I don't think it's worth doing anything to the previous versions.</p>",
        "id": 153942091,
        "sender_full_name": "James Agnew",
        "timestamp": 1520184052
    },
    {
        "content": "<p>I could do that, sure. I guess the downside of generating setValueSet(CanonicalType) and setValueSet(UriType) is just more code in the dropdown prompt...?</p>",
        "id": 153942095,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520185821
    },
    {
        "content": "<p>although there's also plenty of places in the convertor where the signature is Type, so that would break a huge amount of my code, in fact</p>",
        "id": 153942096,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520186107
    },
    {
        "content": "<p>My vote is don't bother with new setters then. They will just be noise.</p>",
        "id": 153942097,
        "sender_full_name": "James Agnew",
        "timestamp": 1520186293
    },
    {
        "content": "<p>k</p>",
        "id": 153942099,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1520186307
    }
]