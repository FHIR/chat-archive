[
    {
        "content": "<p>There are examples of implementing security for resource types, or for compartments. But, are there examples of how to secure each individual resource? For example, Joe has access to Observation/1 while Jane only has access to Observation/2? They might be able to create their own resources, but wouldn't be able to see other resources unless they are given permission by someone who already has access to the resource?</p>",
        "id": 153996140,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1536732733
    },
    {
        "content": "<p>This is a question that should be directed to the Security and Privacy stream --- It seems you are asking about an implementation detail, not FHIR model, or hapi toolkit question.</p>",
        "id": 153996277,
        "sender_full_name": "John Moehrke",
        "timestamp": 1536765022
    },
    {
        "content": "<p>No.. I'm asking how to do this in HAPI</p>",
        "id": 153996282,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1536765781
    },
    {
        "content": "<p>HAPI client or HAPI server? Meaning are you trying to access a server that has this level control, or are you trying to implement a server with this level control?</p>",
        "id": 153996284,
        "sender_full_name": "John Moehrke",
        "timestamp": 1536766244
    },
    {
        "content": "<p>implement a server with this level of control</p>",
        "id": 153996286,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1536766392
    },
    {
        "content": "<p>To add a little more information:<br>\nI'm considering using the Provenance resource to indicate what resources each user (who is also associated with a Person resource) is allowed to access.</p>\n<p>I believe I figured out that from the \"Authorization Interceptor\" docs that you can create a conditional rule that runs custom logic for each request...<br>\nI was thinking something like this:</p>\n<p>RuleBuilder rb = new RuleBuilder();<br>\nrb.allow().updateConditional().allResources().withTester(new TestAuthRuleTester(userPersonId));<br>\nrb.allow().deleteConditional().allResources().withTester(new TestAuthRuleTester(userPersonId));</p>\n<p>However, in my TestAuthRuleTester implementation, I'm not sure how I would gain access to the resources in the server...<br>\nI took a look through the RequestDetails class and there doesn't appear to be anything that would grant me access to the resources in the DB. There is getFhirContext(), but that appears to only return resource definitions baked into the server (such as the base StructureDefinition for Observation, Patient, etc.)</p>",
        "id": 153996287,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1536766405
    },
    {
        "content": "<p>Okay, that is  a far more specific question the HAPI experts can focus on.  Yes, in those interceptors you would need to be able to access other resources (Consents, Provenance, the meta element of the resource being accessed, etc).</p>",
        "id": 153996288,
        "sender_full_name": "John Moehrke",
        "timestamp": 1536766611
    },
    {
        "content": "<p>what tends to throw people is when asking about Security, people often get blinders thinking you have an OAuth question. But in your case, due to the fine-grain access control, you need to add business logic above-and-beyond OAuth that is implemented at the Resource Server API.</p>",
        "id": 153996289,
        "sender_full_name": "John Moehrke",
        "timestamp": 1536766724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191505\">@Sean McIlvenna</span> - if you intend to use <code>withTester()</code> you essentially need to inspect the datagraph and access the database using your own custom logic</p>",
        "id": 161233668,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1553078425
    },
    {
        "content": "<p>I'm actually having a similar issue.</p>\n<p>As we have it, a Patient is supposed to have access to their Coverage, Related Person, Contract, Patient and Explanation of Benefit details.  An example rule is like:</p>\n<p>new RuleBuilder().allow().read().resourcesOfType(ExplanationOfBenefit.class).inCompartment(&lt;IdType for Patient&gt;)...</p>\n<p>For the patient endpoints, this works perfectly fine for reads and searches. For EOBs however, it only permits the search request to go through if patient is explicitly mentioned either like _id=Patient/X or patient=X. Is there anyway to allow the search to go on and confirm the resources is in the Patient's compartment without stating it?</p>",
        "id": 211935290,
        "sender_full_name": "James Fadeley",
        "timestamp": 1601569001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"348029\">@James Fadeley</span> have a look at <a href=\"https://hapifhir.io/hapi-fhir/apidocs/hapi-fhir-server/ca/uhn/fhir/rest/server/interceptor/auth/class-use/IAuthRuleTester.html\">https://hapifhir.io/hapi-fhir/apidocs/hapi-fhir-server/ca/uhn/fhir/rest/server/interceptor/auth/class-use/IAuthRuleTester.html</a> - it can be used in various ways to add custom security checks</p>",
        "id": 211935894,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1601569297
    },
    {
        "content": "<p>or eg. <a href=\"https://hapifhir.io/hapi-fhir/apidocs/hapi-fhir-server/ca/uhn/fhir/rest/server/interceptor/auth/SearchNarrowingInterceptor.html\">https://hapifhir.io/hapi-fhir/apidocs/hapi-fhir-server/ca/uhn/fhir/rest/server/interceptor/auth/SearchNarrowingInterceptor.html</a></p>",
        "id": 211936067,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1601569371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191427\">Jens Villadsen</span> <a href=\"#narrow/stream/179167-hapi/topic/Security.20per.20resource/near/211936067\">said</a>:</p>\n<blockquote>\n<p>or eg. <a href=\"https://hapifhir.io/hapi-fhir/apidocs/hapi-fhir-server/ca/uhn/fhir/rest/server/interceptor/auth/SearchNarrowingInterceptor.html\">https://hapifhir.io/hapi-fhir/apidocs/hapi-fhir-server/ca/uhn/fhir/rest/server/interceptor/auth/SearchNarrowingInterceptor.html</a></p>\n</blockquote>\n<p>Thank you! I'll have a look.</p>",
        "id": 211937349,
        "sender_full_name": "James Fadeley",
        "timestamp": 1601569928
    },
    {
        "content": "<p>So the SearchNarrowingInterceptor seems to be a step in the right direction but the AuthorizationInterceptor is still coming down hard. Is there something I'm supposed to do to connect the two, or make the AuthorizationInterceptor recognize the addendum of SearchNarrowingInterceptor?</p>",
        "id": 211946926,
        "sender_full_name": "James Fadeley",
        "timestamp": 1601574067
    },
    {
        "content": "<p>see <a href=\"https://hapifhir.io/hapi-fhir/docs/security/search_narrowing_interceptor.html\">https://hapifhir.io/hapi-fhir/docs/security/search_narrowing_interceptor.html</a></p>",
        "id": 211952792,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1601576621
    },
    {
        "content": "<p>I did read and apply that. The interceptor is visited first and appends the Patient IdTypes to the AuthorizedList under compartments. However, it then visits AuthorizationInterceptor and still feels the need to deny the request. </p>\n<p>In the Search Narrowing:<br>\nAuthorizedList cascadingList = new AuthorizedList() .addCompartment(&lt;IdType&gt;);</p>\n<p>And in the Authorization Interceptor:<br>\nnew RuleBuilder().allow().read().resourcesOfType(ExplanationOfBenefit.class).inCompartment(&lt;IdType for Patient&gt;)...</p>\n<p>And it still blocks. Is there anything I'm not grasping?</p>",
        "id": 211957276,
        "sender_full_name": "James Fadeley",
        "timestamp": 1601578514
    },
    {
        "content": "<p>well ... you should allow access to the resource without the requirement of the 'inCompartment</p>",
        "id": 211958267,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1601578928
    },
    {
        "content": "<p>eg: ruleBuilder.allow().read().resourcesOfType(ExplanationOfBenefit.class).withAnyId().withTester( MyTester()).andThen() ...</p>",
        "id": 211958483,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1601579038
    },
    {
        "content": "<p>I'll give it a shot. Thank you!</p>",
        "id": 211958951,
        "sender_full_name": "James Fadeley",
        "timestamp": 1601579266
    }
]