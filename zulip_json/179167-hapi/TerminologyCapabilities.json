[
    {
        "content": "<p>Has anyone tried to implement TerminologyCapabilities in HAPI? I'm having some trouble - the @Metadata annotation, which is how I'm responding to a /metadata request, won't let me return a resource of type TerminologyCapabilities (i.e. /metadata?mode=terminology)</p>",
        "id": 172276631,
        "sender_full_name": "Jim Steel",
        "timestamp": 1564710188
    },
    {
        "content": "<p>I don't think this is currently supported unfortunately. The implementation of the @Metadata method hasn't really been changed since DSTU2 days..</p>\n<p>I'm assuming you're getting a clascastexception or something?</p>",
        "id": 174923132,
        "sender_full_name": "James Agnew",
        "timestamp": 1567631378
    },
    {
        "content": "<p>(I do bet this would be really easy to fix, btw)</p>",
        "id": 174923154,
        "sender_full_name": "James Agnew",
        "timestamp": 1567631398
    },
    {
        "content": "<p>Our \"fix\" was to extend <code>TerminologyCapabilities</code> and add in <code>implements IBaseConformance</code> :-)</p>",
        "id": 174964361,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1567682895
    },
    {
        "content": "<p>Bump. In my latest attempt at this (with HAPI 4.0.1), I was hoping that by implementing <code>@Metadata\ngetServerConformance(HttpServletRequest theRequest, RequestDetails theRequestDetails)</code> one of either <code>theRequest.getParameter(\"mode\")</code> or <code>theRequestDetails.getAttribute(\"mode\")</code> would give me the \"mode=terminology\" URL parameter that had been passed in.</p>\n<p>Alas, both seem to be empty</p>",
        "id": 178926386,
        "sender_full_name": "Jim Steel",
        "timestamp": 1571900886
    },
    {
        "content": "<p>On further investigation, our problem seems to be caused by this change: <code>Server CapabilityStatement/Conformance repsonses from the /metadata endpoint will now be cached for 60 seconds always. This was previously a configurable setting on the ServerConformanceProvider, but it is now handled directly by the method binding so the provider now has no responsibility for caching.</code> The first request is coming in without any parameters, and the response is being cached and reused for a second request that comes in with <code>?mode=terminology</code></p>",
        "id": 179777519,
        "sender_full_name": "Jim Steel",
        "timestamp": 1572840599
    },
    {
        "content": "<p>Is there a way to turn off this caching?</p>",
        "id": 179777562,
        "sender_full_name": "Jim Steel",
        "timestamp": 1572840615
    },
    {
        "content": "<p>Oh man, interesting.</p>\n<p>There is an attribute on <code>@Metadata</code> you can set to disable caching, but it's only in 4.1.0-SNAPSHOT</p>",
        "id": 179920868,
        "sender_full_name": "James Agnew",
        "timestamp": 1572951601
    },
    {
        "content": "<p>yeah - we're hanging out for 4.1.0 (or a 4.0.4 :-)</p>",
        "id": 179925356,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1572955785
    },
    {
        "content": "<p>Would the right way to go here to be an additional attribute on <code>@Metadata</code> that specifies the mode that your specific method handles? That would be pretty easy to handle, and then you could keep the caching too</p>",
        "id": 179925758,
        "sender_full_name": "James Agnew",
        "timestamp": 1572956131
    },
    {
        "content": "<p>Hmm, at the very least the caching needs to be parameter-sensitive, and in this case that's (at least) <code>mode</code>, noting that some values for <code>mode</code> act like <code>_summary</code> in that they subset the response, while others change it entirely.<br>\nAdding the attribute sounds like a good plan -- would also assist with varying the type of the result, but <code>@Metadata</code> would also need to look for an interface as return type so that it can support a <code>TerminologyCapabilities</code> result in case one wants to handle all cases in one method.<br>\nRe the caching, we would probably want to always handle that ourselves, but having the timeout attribute set to zero works for that.</p>",
        "id": 179982864,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1572991383
    },
    {
        "content": "<p>Yeah, I hear that.</p>\n<p>In all honesty thinking about this more, I'm more inclined to drop the caching entirely from the CapabilityStatement method binding. It's useful for HAPI JPA servers because we dynamically generate some of the output based on stuff in the database (so caching is a big win there) but it seems like it's actively harmful to everyone else. The whole concept should probably be offloaded to an interceptor.</p>",
        "id": 180034819,
        "sender_full_name": "James Agnew",
        "timestamp": 1573048977
    },
    {
        "content": "<p>I've also been struggling with returning a TerminologyCapabilities resource, and raised <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/1681\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/1681\">https://github.com/jamesagnew/hapi-fhir/issues/1681</a> to ask about the best way to do it.   I'll try extending the class as <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span>  suggests above.   Thanks!</p>",
        "id": 187054566,
        "sender_full_name": "Peter Williams",
        "timestamp": 1580442035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"351108\">@Shreshta Balachandar</span>  <a class=\"stream\" data-stream-id=\"179167\" href=\"/#narrow/stream/179167-hapi\">#hapi</a> <br>\nHi All,</p>\n<p>Can some one please clarify us on below point. We are currently working on loading the terminology data to HAPI and exploring the options for the same.</p>\n<ul>\n<li>Is Hapi Fhir looking for any specific format when uploading the terminology data. We currently have the csv file and expecting the data to be stored in HL7 FHIR Json format. Or if there is any documentation around it, please let us know</li>\n</ul>",
        "id": 219613911,
        "sender_full_name": "Sanjay Kandula",
        "timestamp": 1607697944
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhir/terminology-module.html\">http://hl7.org/fhir/terminology-module.html</a></p>",
        "id": 219680887,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1607735387
    }
]