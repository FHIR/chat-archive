[
    {
        "content": "<p>We're preparing a HAPI 3.4 to 3.8 JPA database migration, and a I have a few questions.</p>\n<ol>\n<li>Running the HAPI CLI with <code>migrate-database -x no-migrate-350-hashes -d ORACLE_12C -f V3_4_0 -t V3_8_0</code> will upgrade the JPA schema to 3.6, but is missing columns expected in 3.7+ </li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>Schema-validation: missing column [REINDEX_COUNT] in table [HFJ_RES_REINDEX_JOB]\nSchema-validation: missing column [SEARCH_DELETED] in table [HFJ_SEARCH]\nSchema-validation: missing column [SEARCH_PARAM_MAP] in table [HFJ_SEARCH]\nSchema-validation: missing column [HASH_IDENTITY] in table [HFJ_SPIDX_STRING]\nSchema-validation: missing column [PARENT_PIDS] in table [TRM_CONCEPT]\nSchema-validation: missing column [CS_VER_PID] in table [TRM_CONCEPT_DESIG]\nSchema-validation: missing column [CS_VER_PID] in table [TRM_CONCEPT_PROPERTY]\nSchema-validation: missing sequence [SEQ_RES_REINDEX_JOB]\n</pre></div>\n\n\n<p>Is this simply a gap in the migrator tasks? If so, we can add a PR to fix it.</p>\n<p>2) What is the purpose of  <code>CalculateHashesTask</code> run on the second pass without <code>-x no-migrate-350-hashes</code>? As far as I can tell, there should be a hash value for for all resources after <code>mark-all-resources-for-reindexing</code>.</p>",
        "id": 176932687,
        "sender_full_name": "Seth Rylan Gainey",
        "timestamp": 1569850902
    },
    {
        "content": "<ol>\n<li>\n<p>That does sound like a gap. We do have a unit test that should catch any such deficiencies at this point, but it only came into effect as of the 3.7.0 release. PRs welcome for sure..</p>\n</li>\n<li>\n<p>The second pass is basically just a failsafe check, to ensure that no hashes were missed anywhere in the process. If you confirm that none are missing anywhere, you can skip it.</p>\n</li>\n</ol>",
        "id": 176963882,
        "sender_full_name": "James Agnew",
        "timestamp": 1569870827
    },
    {
        "content": "<p>Thanks, that makes sense. Another line of questioning regarding the reindexing process. We run HAPI in a k8s cluster with scaled deployments; is it safe for multiple JPA servers  to run against a single database during reindexing? If the JPA server crashes/restarts during reindexing, will it pick up where it left off? My read of the code is that it the reindex will run on the API server it was called on, and that it should restart reindexing after calling <code>$perform-reindexing-pass</code>.</p>",
        "id": 176989054,
        "sender_full_name": "Seth Rylan Gainey",
        "timestamp": 1569891875
    },
    {
        "content": "<p>On a clustered server you need to ensure that scheduled tasks are disabled via the DaoConfig on all but one of the nodes- Otherwise all nodes in your cluster will try to reindex and you'll have pretty big problems. </p>\n<p>That caveat aside, yes, it's completely safe.</p>",
        "id": 177090983,
        "sender_full_name": "James Agnew",
        "timestamp": 1569959352
    }
]