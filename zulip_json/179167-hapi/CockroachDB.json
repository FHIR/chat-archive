[
    {
        "content": "<p>I started experimenting with the HAPI JPA server.   My goal is to use it with CockroachDB.  <br>\nSo, for my first approach, I ran it against PostgreSQL and that works great.  I loaded the existing Synthea data, one can download for testing.</p>\n<p>For CockroachDB, updated my url in  application.yaml.  It is still prefixed with jdbc:postgresql.  And the connection works just fine.  The Schema is created.  driverClassName remains equal to org.postgresql.Driver and no dialect was selected for jpa:properties:hibernate:dialect.  It started and the schema was generated.  But I couldn’t do things like just GET queries for Patient on an empty data set let alone insert.  OK, so I proceeded to set the dialect like so:</p>\n<p>jpa:<br>\n    properties:<br>\n      hibernate.format_sql: false<br>\n      hibernate.show_sql: false<br>\n      hibernate:<br>\n        dialect: org.hibernate.dialect.CockroachDB201Dialect</p>\n<p>That allowed me to query Patient without errors.</p>\n<p>I am not a Java Programmer although I can easily read it and write it as it is very much like C#.  But just remember any answers and I would appreciate as much elaboration as possible.  My friction with Java isn’t Java it is just understanding the inferred knowledge around things like Maven and how all that orchestration works.   I am sure I will use the wrong terminology so pardon me and correct me at will. </p>\n<p>That is just background as I get to my questions:</p>\n<p>So, during insert I get an error concerning mapping a byte[] to the OID type.   The error is “The fastpath function lo_creat is unknown”<br>\nThe table being updated is HFJ_RES_VER and the column failing is RES_TEXT, type of oid.</p>\n<p>I journeyed into the hapi-fhir source.  I knew there was some SQL schema files included from the referenced packages I somehow discovered while looking at my hapi-fhir-jpaserver-starter source code.  BTW I am running my JPA server at the moment with mvn spring-boot:run -Pboot.  And using IntelliJ as my IDE.  I found the hapi-fhir-jpaserver-base package where I expected the .sql files to exist but they were not there.  I guess this is generated and that would make sense.  I learned that these are created via a hibernate53-ddl-vaven-plugin.  And I can create it with this command.   mvn install -DskipTests=true .  Nice!  I won’t tell you all the discovery I went through to figure that out.   </p>\n<p>My question concerns the choice of OID vs BYTEA specifically for PostgreSQL.  </p>\n<p>What is the benefit of choosing OID?  </p>\n<p>This is a space that is tough to Google and understand the motivation exactly.  Search GitHub didn’t shed any light.  </p>\n<p>I did notice the hibernate54-ddl-maven-plugin plugin has a custom dialect called ca.uhn.fhir.jpa.model.dialect.HapiFhirPostgres94Dialect rather than the default dialects used for the other 6 database technologies.  I started looking at it and it has a very long inheritance chain.  I don’t know the exact mechanics of this but I am sure it all integrates with the database migration strategy.  </p>\n<p>Anyway, for a time I had this incompatibility friction between PostgreSQL and CockRoachDB specifically for byte[] to OID mapping.  I even created a ticket with CockroachDB submitting them a very simple Java Unit Test with that distilled problem.   </p>\n<p>As time passed, I began thinking I should generate a CockroachDB schema and just go rebuild my DB schema with that.  So, I did.  After all, at some point CockroachDB created a dialect.  <br>\nHow We Built a CockroachDB Dialect for Hibernate (<a href=\"http://cockroachlabs.com\">cockroachlabs.com</a>)<br>\nInstall a Driver or ORM Framework | CockroachDB Docs (<a href=\"http://cockroachlabs.com\">cockroachlabs.com</a>)<br>\nI am using CockroachDB V21.2.4 on Windows.  Just running a insecure, single node (local cluster) on my dev box, so I picked the CockroachDB201Dialect dialect.<br>\nSo just added this line in the top level pom.xml file next to the custom HapiFhirPostgres94Dialect dialect. </p>\n<p>&lt;customDialect&gt;org.hibernate.dialect.CockroachDB201Dialect&lt;/customDialect&gt;</p>\n<p>So yes, it generated a schema file for called cockroachdb201.sql in the path, …. \\hapi-fhir-jpaserver-base\\target\\classes\\ca\\uhn\\hapi\\fhir\\jpa\\docs\\database\\cockroachdb201.sql .<br>\nI dropped the database, recreated, and applied the cockroachdb201.sql schema.  Started my FHIR JPA server configured to talk to CockroachDB.  Yes, this started to work.  About 93% of the first 144 transaction bundles succeeded.  So, I have something new to look at now and can start a new thread on anything I find.   If all goes well, I would be willing to create a GitHub issue and create a PR, but I have a bit more to learn about migrations and how I add that framing.  </p>\n<p>I guess my second question is, am I the only one trying to use CockroachDB? And has anyone thought about this more and willing to share their thoughts.  It is a three node minimum cluster technology, build for replication using a line protocol compatible with PostgreSQL and dialect that is very similar and for the most par the same as PostgreSQL.</p>\n<p>If you read this far then good for you. <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 270608704,
        "sender_full_name": "Joseph Shook",
        "timestamp": 1643918374
    },
    {
        "content": "<p>to my knowledge you are the first one trying to get hapi to run with CockroachDB</p>",
        "id": 270690210,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1643967977
    },
    {
        "content": "<p>Interesting - (and yes, I read it all). <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> maybe this would be interesting for you too.</p>",
        "id": 270717719,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1643983050
    }
]