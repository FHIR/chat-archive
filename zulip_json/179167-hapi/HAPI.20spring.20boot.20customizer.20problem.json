[
    {
        "content": "<p>Hello,</p>\n<p>I have a question regarding the usage of HAPI with spring-boot.<br>\nI created a hapi fhir server for dstu3 based on what I gathered from the hapi-fhir-spring-boot examples and adjusted to my needs.<br>\nHowever, spring-boot is a whole lot of magic for me and I don't quite understand what is happening in what order.</p>\n<p>My problem specifically is that I adjust my server using something like this:</p>\n<div class=\"codehilite\"><pre><span></span>@Configuration\npublic class MyFhirServerCustomizer implements FhirRestfulServerCustomizer {\n  public void customize(RestfulServer server) {\n    ...\n    server.registerProvider(new MyPlainProvider(server));\n  }\n\n  @Bean\n  public DaoConfig daoConfig() {\n    ...\n  }\n}\n</pre></div>\n\n\n<p>In my customizer I register a plain provider that I wrote, with some operation I need.<br>\nThe defined customizers are called by the class <a href=\"https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-spring-boot/hapi-fhir-spring-boot-autoconfigure/src/main/java/ca/uhn/fhir/spring/boot/autoconfigure/FhirAutoConfiguration.java#L124\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-spring-boot/hapi-fhir-spring-boot-autoconfigure/src/main/java/ca/uhn/fhir/spring/boot/autoconfigure/FhirAutoConfiguration.java#L124\">FhirAutoConfiguration</a><br>\nBut after my customizer is called, another customizer is called, that is defined in the same file on line <a href=\"https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-spring-boot/hapi-fhir-spring-boot-autoconfigure/src/main/java/ca/uhn/fhir/spring/boot/autoconfigure/FhirAutoConfiguration.java#L185\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-spring-boot/hapi-fhir-spring-boot-autoconfigure/src/main/java/ca/uhn/fhir/spring/boot/autoconfigure/FhirAutoConfiguration.java#L185\">185</a>, which overrides my plain provider:</p>\n<div class=\"codehilite\"><pre><span></span>@Configuration\n@ConditionalOnBean({DaoConfig.class, RestfulServer.class})\n@SuppressWarnings(&quot;rawtypes&quot;)\nstatic class RestfulServerCustomizer implements FhirRestfulServerCustomizer {\n\n  private final BaseJpaSystemProvider systemProviders;\n\n  public RestfulServerCustomizer(ObjectProvider&lt;BaseJpaSystemProvider&gt; systemProviders) {\n    this.systemProviders = systemProviders.getIfAvailable();\n  }\n\n  @Override\n  public void customize(RestfulServer server) {\n    server.setPlainProviders(systemProviders);\n  }\n}\n</pre></div>\n\n\n<p>I have the FhirAutoConfiguration included as a dependency via pom.xml and can't change the code in it.</p>\n<p>How can I achieve that my own plain providers are registered once the server is running?<br>\nThe customizers are being sorted before execution and I already tried an <code>@Order</code> annotation on the <code>MyFhirServerCustomizer</code>, but neither highest nor lowest order did the trick.</p>\n<p>I hope I demonstrated my problem clearly enough.<br>\nThanks,<br>\nLars</p>",
        "id": 156772665,
        "sender_full_name": "Lars RÃ¼ckert",
        "timestamp": 1548337359
    }
]