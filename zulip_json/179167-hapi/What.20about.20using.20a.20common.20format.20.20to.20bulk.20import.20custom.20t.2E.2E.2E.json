[
    {
        "content": "<p>For example, using HAPI FHIR CLI to upload a large custom CodeSystem in a common format such as obo, owl, or even FHIR-native format.  Currently, there is a module for uploading a custom terminology in addition to the modules specific to IMGTHLA, LOINC and SCT. But its current format is pretty simple and lack of documentation.  It's not that easy for Implementers to build a little bit richer or more complex content, such as various properties (including relationships).</p>",
        "id": 213762100,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603100518
    },
    {
        "content": "<p>hapi currently supports that you can upload entire FHIR IG's - does that fit your need?</p>",
        "id": 213762240,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1603100611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span>  Thanks a lot.  Such a big capability would be far more beyond my understanding.<span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>  For now, I'd like to focus on a granular/concrete function for that purpose exactly.</p>",
        "id": 213762945,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603101006
    },
    {
        "content": "<p>A widely recognized format would provide benefits for both HAPI's developer community and adopters/users.</p>",
        "id": 213763421,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603101253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192103\">@Lin Zhang</span>  FHIR IG's conform to. a subclass of NPM ... so it is sort of a reckonized format already ;) - that said, I have no experience in working with OBO or OWL</p>",
        "id": 213766860,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1603103582
    },
    {
        "content": "<p>Do you have an example of a codesystem expressed in OWL/OBO?</p>",
        "id": 213767346,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1603103885
    },
    {
        "content": "<p>There are numerous code systems in such formats on the internet.</p>",
        "id": 213769463,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603105386
    },
    {
        "content": "<p>Say, HPO in obo format.</p>",
        "id": 213769494,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603105414
    },
    {
        "content": "<p>I'm newbie to NPM, just going to learn it.</p>",
        "id": 213769609,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603105477
    },
    {
        "content": "<p>Human Phenotype Ontology - OBO Foundry<br>\n<a href=\"http://www.obofoundry.org/ontology/hp.html\">www.obofoundry.org/ontology/hp.html</a></p>",
        "id": 213769873,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603105666
    },
    {
        "content": "<p>I would suggest to have a look at <a href=\"https://github.com/aehrc/fhir-owl\">https://github.com/aehrc/fhir-owl</a> then - that seems to be able to convert OWL to FHIR and then you can upload it</p>",
        "id": 213792376,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1603117289
    },
    {
        "content": "<p>Thanks, Jens.  And is there any tool to upload the fhir output into the hapi fhir jpa server?</p>",
        "id": 213806741,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603122914
    },
    {
        "content": "<p>I mean uploading such a output as an external CodeSystem in the same way as uploading LOINC and SCT.</p>",
        "id": 213807325,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603123173
    },
    {
        "content": "<p>well I assume that you can just post the resulting codesystems to any FHIR server that accept such use - thats not HAPI specific</p>",
        "id": 213841264,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1603139446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192103\">@Lin Zhang</span> if you are using HAPI FHIR and you need custom support I suggest that you have a look at <a href=\"https://github.com/jamesagnew/hapi-fhir/blob/9e8e98b6fbe9a05afc87df324cd67302e137aab9/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/TerminologyUploaderProvider.java#L128\">https://github.com/jamesagnew/hapi-fhir/blob/9e8e98b6fbe9a05afc87df324cd67302e137aab9/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/TerminologyUploaderProvider.java#L128</a> and branch of from there</p>",
        "id": 213841407,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1603139513
    },
    {
        "content": "<p>Appreciate that.  I mean such terminologies are so large that the routine POST operation would not be suitable.  Yes, you are right: branching from there is what I'm considering.</p>",
        "id": 213859195,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603150060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191376\">@Jim Steel</span>  It would be desirable to make FHIR-CLaML as a component of HAPI FHIR CLI's Terminology Uploader?  Thanks, anyway.</p>",
        "id": 213874825,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603168722
    },
    {
        "content": "<p>That may be possible, by having a library build. We would want it to also continue standalone, too, though</p>",
        "id": 213874843,
        "sender_full_name": "Jim Steel",
        "timestamp": 1603168776
    },
    {
        "content": "<p>We certainly just use POST to send the output of FHIR-OWL and FHIR-ClaML into our server, even for very large CodeSystems like HPO</p>",
        "id": 213874898,
        "sender_full_name": "Jim Steel",
        "timestamp": 1603168866
    },
    {
        "content": "<p>Absolutely, standalone would be fine.  I'm wondering how long such large imports would take approximately.</p>",
        "id": 213875027,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603169103
    },
    {
        "content": "<p>And how to refuse GETTing/reading the full resource by the clients?</p>",
        "id": 213875293,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603169509
    },
    {
        "content": "<p>We don't refuse GETting. Although we do sometimes employ an implementation trick of allowing a POST/PUT of a CodeSystem with content=not-present, which we take to mean \"index all the concepts so the CodeSystem works normally, but never return concepts in a read, vread or search\"</p>",
        "id": 213875340,
        "sender_full_name": "Jim Steel",
        "timestamp": 1603169526
    },
    {
        "content": "<p>I can't remember how long the imports take. A little while, but no more than a few minutes, I don't think. But our import isn't using HAPI's serialization, so YMMV</p>",
        "id": 213875420,
        "sender_full_name": "Jim Steel",
        "timestamp": 1603169661
    },
    {
        "content": "<p>Yeah, that's exactly what I expect.</p>",
        "id": 213875423,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603169678
    },
    {
        "content": "<p>(To be clear, that <code>not-present</code> trick isn't something you'll find in the spec. It's non-standard)</p>",
        "id": 213875438,
        "sender_full_name": "Jim Steel",
        "timestamp": 1603169716
    },
    {
        "content": "<p>Okay, roger that.</p>",
        "id": 213875446,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1603169747
    }
]