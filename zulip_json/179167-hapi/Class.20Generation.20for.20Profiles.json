[
    {
        "content": "<p>Does HAPI provide a code generator for automatically generating Java classes from FHIR profiles (StructureDefinitions)?  I couldn't find any information suggesting that -- but someone told me it did.</p>",
        "id": 153990234,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1534967778
    },
    {
        "content": "<p>I found a project from <span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span> <a href=\"https://github.com/jkiddo/hapi-fhir-profile-converter\" target=\"_blank\" title=\"https://github.com/jkiddo/hapi-fhir-profile-converter\">here</a>, but it looks like it is not complete and probably not maintained anymore.</p>",
        "id": 153990238,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1534967908
    },
    {
        "content": "<p>Haha - thats my own! It would actually be a part what I need, and I'm considering to resurrect it</p>",
        "id": 153990247,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1534968455
    },
    {
        "content": "<p>Cool.  I think that would be probably be useful to others as well!</p>",
        "id": 153990248,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1534968513
    },
    {
        "content": "<p>I would love some contributions to it ... but I'll guess it all starts with me getting back to it ;)</p>",
        "id": 153990249,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1534968554
    },
    {
        "content": "<p>Yeah, I'm not sure we're in a position to contribute -- and can't even guarantee we'd use it if it was fully working.  We're just evaluating some different approaches right now -- and that was one of them.  Trying to see what is and is not viable.</p>",
        "id": 153990250,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1534968676
    },
    {
        "content": "<p>We actually kind of more-so need something like that in JavaScript.</p>",
        "id": 153990251,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1534968758
    },
    {
        "content": "<p>it's been my intention to produce something like this</p>",
        "id": 153990266,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534975179
    },
    {
        "content": "<p>I'll see if I can find the time to kickstart once again the next couple of days! Pull requests are more than welcome ;)</p>",
        "id": 153990503,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1535056534
    },
    {
        "content": "<p>I see that the provided project from <span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span>  has not been updated since a while?  Is there still some other work going on? Are there any other projects / people working on it and have some experience to share? From a developer point of view I belive  that generating classes from profiles would help interoperability, as it prevents errors or missuse of  ressources. Thus I think it would be great  to be able to create the Java classes or even Typescript classes from profiles. Maybe it could be done similarly like FHIR Proto's are generated?</p>",
        "id": 183342000,
        "sender_full_name": "Sandro Zbinden",
        "timestamp": 1576229842
    },
    {
        "content": "<p>There has been very little activity in it for a long period of time. I would like to start it up again, but I won't do it if noone uses it or cares to contribute to it</p>",
        "id": 183342840,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1576230589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"202585\">@Sandro Zbinden</span></p>",
        "id": 183342845,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1576230597
    },
    {
        "content": "<p>may i ask what is the motivation behind this? Profiled resources are supported by hapi anyway and dont need special classes. Or is the motivation behind this to auto create facades to ease the creation of a profiled resource?</p>",
        "id": 183355746,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1576241419
    },
    {
        "content": "<p>In my understanding it is generation of Java classes for arbitrary SDs in then end. Or am I wrong?</p>",
        "id": 183374632,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1576254075
    },
    {
        "content": "<p>Are there any updates about this?</p>\n<p>For me it is the ease of the creation of profiled resources. since I'm working on profiled FHIRresource generation with Synthea. and not having to worry about making those classes by hand would help me immensely.</p>",
        "id": 185711387,
        "sender_full_name": "Michel Jacobs",
        "timestamp": 1579103997
    },
    {
        "content": "<blockquote>\n<p>may i ask what is the motivation behind this? Profiled resources are supported by hapi anyway and dont need special classes. Or is the motivation  to auto create facades to ease the creation of a profiled resource?</p>\n</blockquote>",
        "id": 185711831,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1579104214
    },
    {
        "content": "<p>Hi, I am working with Michel on this. The idea is to use the generated classes in Synthea for the mapping from Synthea structures to (profiled) FHIR resources, to have realistic FHIR test data for our systems. Synthea is already using the HAPI generated models / classes. It would be nice if we could use a set of profiled resources as used in certain regions (e.g. US core) or using our internal value sets, code maps, in Synthea.</p>",
        "id": 185714360,
        "sender_full_name": "Erik Moll",
        "timestamp": 1579105457
    },
    {
        "content": "<p>I agree</p>",
        "id": 185722901,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579110143
    },
    {
        "content": "<p>It could be a way to discover changes in an IG</p>",
        "id": 185722949,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579110179
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"194198\">@Erik Moll</span> / <span class=\"user-mention\" data-user-id=\"258210\">@Michel Jacobs</span> should we restart this project of mine?</p>",
        "id": 185723232,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579110349
    },
    {
        "content": "<p>I'm interested to know what your classes that represent profiles actually do</p>",
        "id": 185740392,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579119975
    },
    {
        "content": "<p>There will be limitations of course - ... First thing would be ease of access to extension fields</p>",
        "id": 185741040,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579120419
    },
    {
        "content": "<p>type safety</p>",
        "id": 185741137,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579120475
    },
    {
        "content": "<p>so, like, a FHIRException if the extension is not conformant?</p>",
        "id": 185741300,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579120577
    },
    {
        "content": "<p>while extensions are first class citizens of the FHIR model, they are not totally first class citizens when interacting with the generic model</p>",
        "id": 185741671,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579120849
    },
    {
        "content": "<p>that wasn't an answer...</p>",
        "id": 185741726,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579120898
    },
    {
        "content": "<blockquote>\n<p>so, like, a FHIRException if the extension is not conformant?</p>\n</blockquote>\n<p>depends on what you mean - eg. an extension not mentioned  in the profile?</p>",
        "id": 185741815,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579120937
    },
    {
        "content": "<p>an extension with a known type &amp; cardinality where the instance being read has a different type or &gt; max cardinality</p>",
        "id": 185741874,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579120985
    },
    {
        "content": "<p>I imagine strictness to some extent could be made configurable ... - yet your case seems to 'breach the contract'</p>",
        "id": 185742174,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579121206
    },
    {
        "content": "<p>you're entering hairy stuff once the model you receive differs from what you expect</p>",
        "id": 185742330,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579121289
    },
    {
        "content": "<p>how could it be configurable? </p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getCount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">getSingleExtension</span><span class=\"p\">(</span><span class=\"s\">&quot;http://acme.com/extension&quot;</span><span class=\"p\">).</span><span class=\"na\">getValueAsInteger</span><span class=\"p\">().</span><span class=\"na\">getValue</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n</pre></div>",
        "id": 185742349,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579121299
    },
    {
        "content": "<p>you can't configure that into a different API to allow for anything unexpected, except to fall back to the existing methods</p>",
        "id": 185742373,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579121321
    },
    {
        "content": "<p>correct</p>",
        "id": 185743531,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579122059
    },
    {
        "content": "<p>not with that signature</p>",
        "id": 185743663,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579122123
    },
    {
        "content": "<p>so:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">hasValidCount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//...</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getCount</span><span class=\"p\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">FHIRException</span> <span class=\"p\">{</span>\n   <span class=\"c1\">//....</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"n\">JavaProfileClass</span> <span class=\"nf\">setCount</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"c1\">//....</span>\n  <span class=\"p\">}</span>\n</pre></div>",
        "id": 185743787,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579122207
    },
    {
        "content": "<p>why the hasValidCount?</p>",
        "id": 185743947,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579122323
    },
    {
        "content": "<p>so you can find out whether the underlying extension is valid without having to have an exception</p>",
        "id": 185744051,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579122373
    },
    {
        "content": "<p>false if not present or not valid</p>",
        "id": 185744076,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579122392
    },
    {
        "content": "<p>you could instead make it optional</p>\n<div class=\"codehilite\"><pre><span></span>public Optional&lt;Integer&gt; getCount()\n</pre></div>",
        "id": 185744086,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579122399
    },
    {
        "content": "<p>yes, you could, but then you always have to deal with that. just annoying, for me</p>",
        "id": 185744149,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579122452
    },
    {
        "content": "<p>I guess all of it could go into the generated class</p>",
        "id": 185744343,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579122575
    },
    {
        "content": "<p>all of what?</p>",
        "id": 185744420,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579122608
    },
    {
        "content": "<p>all the above listed accessor methods</p>",
        "id": 185744466,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579122645
    },
    {
        "content": "<p>what seems annoying to you may not seem annoying to me</p>",
        "id": 185744489,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579122669
    },
    {
        "content": "<p>ok sure. could generate both, though they have to have different names</p>",
        "id": 185744564,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579122699
    },
    {
        "content": "<p>sure</p>",
        "id": 185744613,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579122709
    },
    {
        "content": "<p>the generation bootstrapping part could be configurable  as well</p>",
        "id": 185744710,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579122743
    },
    {
        "content": "<p>whether you want methods with optional signature or not</p>",
        "id": 185744743,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579122774
    },
    {
        "content": "<p>of course, singleton extension facades are the simplest part of the problem. what about repeating extensions?</p>",
        "id": 185744957,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579122915
    },
    {
        "content": "<p>as in multiple extensions (that also differ in type)?</p>",
        "id": 185745493,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579123254
    },
    {
        "content": "<p>one extension that can repeat ... can have more than one value</p>",
        "id": 185746016,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579123637
    },
    {
        "content": "<p><code>getExtensionsByUrl(\"\").stream().map(e -&gt; e.getValue()).map( cast it ...).collect(toList())</code></p>",
        "id": 185746966,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579124215
    },
    {
        "content": "<p>what should the read and write API look like.</p>",
        "id": 185747908,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579124826
    },
    {
        "content": "<blockquote>\n<p><code>getExtensionsByUrl(\"\").stream().map(e -&gt; e.getValue()).map( cast it ...).collect(toList())</code></p>\n</blockquote>\n<p>that would be read</p>",
        "id": 185748050,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579124956
    },
    {
        "content": "<p>unwrapped</p>",
        "id": 185748129,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579125003
    },
    {
        "content": "<p>writing would be by adding collections or single elements</p>",
        "id": 185748336,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579125169
    },
    {
        "content": "<p>backing datastore would be extensions</p>",
        "id": 185748349,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579125181
    },
    {
        "content": "<p>but you really want to be able to enumerate.</p>",
        "id": 185749011,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579125682
    },
    {
        "content": "<p>so a linked list would do the job, right?</p>",
        "id": 185749173,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579125798
    },
    {
        "content": "<p>well, the choice is between 2 paradigms:</p>",
        "id": 185751228,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579127262
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"kd\">public</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">CodeableConcept</span><span class=\"o\">&gt;</span> <span class=\"nf\">getMode</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getModeCount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"n\">CodeableConcept</span> <span class=\"nf\">getMode</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n</pre></div>",
        "id": 185751320,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579127337
    },
    {
        "content": "<p>the first is more convenient, but the underlying list is not rooted onto the underlying extension list</p>",
        "id": 185751358,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579127374
    },
    {
        "content": "<p>how come the first is not rooted to the underlying list?</p>",
        "id": 185793605,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579162391
    },
    {
        "content": "<p>I have tried Java code generation from structure definitions with both the HAPI core class generator and Jens' generator.<br>\nBoth didn’t really work (expected). <br>\nWhat we see is that the core generator does override all methods in all classes, and does not work for all R4 profile resources  we have, and has no way to go back to an older version.<br>\nJens’ generator does not handle anything else than (STU3) structure definitions and does not seem complete for STU3 (yet).</p>\n<p>And for restarting the project, the generator isn’t the main goal of my internship. My focus is on generating FHIR test data compliant with (company or other) FHIR profiles.<br>\nFor Synthea to generate  profile compliant resource data, we need Java code for the profiled resources, which is ideally generated and not manually created of course.<br>\nBut if we can get something working, we are willing to contribute to it.</p>",
        "id": 185804013,
        "sender_full_name": "Michel Jacobs",
        "timestamp": 1579172559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258210\">@Michel Jacobs</span> - right, my generator is not complete. It was abandoned due to lack of time and no one else contributing to it</p>",
        "id": 185809165,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579177039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258210\">@Michel Jacobs</span> on another note - should you guys at Synthea need photos for your synthetic patients <a href=\"https://www.thispersondoesnotexist.com/\" target=\"_blank\" title=\"https://www.thispersondoesnotexist.com/\">https://www.thispersondoesnotexist.com/</a></p>",
        "id": 185810401,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579178067
    }
]