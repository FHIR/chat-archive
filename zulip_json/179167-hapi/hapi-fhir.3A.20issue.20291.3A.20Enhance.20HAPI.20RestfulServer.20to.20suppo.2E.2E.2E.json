[
    {
        "content": "<p>fw060 opened <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291\">issue 291</a></p>\n<blockquote>\n<p>We have encountered an issue in RestfulServer.bindMethod when we trying to add a resource provider using CDI in JBoss Wildfly environment (see code below). </p>\n<p>In this setup, the resource provider passed in to RestfulServer is not PatientProvider class, but a proxy class generated by JBoss. Then bindMethod would have trouble inspect getPatient method in PatientProvider. After some investigating, we find out that this is caused by the issue that Jboss Proxy loses generic type information (see <a href=\"https://issues.jboss.org/browse/WELD-1539\" target=\"_blank\" title=\"https://issues.jboss.org/browse/WELD-1539\">https://issues.jboss.org/browse/WELD-1539</a>). This will lead to error when bindMethod trying to inspect getPatient method which would return a List of Patient. bindMethod can only see List without any generic type so a null pointer exception would happen. </p>\n<p>This is NOT an issue in HAPI, however, maybe solving this issue in HAPI is the cleanest way since other CDI environment might have similar problem. </p>\n<p>Our current thought is to create a new method:<br>\npublic void addResourceProvider(IResourceProvider theResourceProvider, Class theProviderClass) <br>\nwhich would allow designating the Provider class rather than deceiving provider class from the provider instance itself. </p>\n<p>I will be more than happy to provide any more detailed information. If anyone has a better/cleaner solution, please also let us know. I will provider the pull request hopefully today or tomorrow. </p>\n<p>Thanks!<br>\nFei</p>\n<p>public class FhirRestfulServlet extends RestfulServer {<br>\n    @Inject<br>\n    PatientProvider patientProvider = null;</p>\n<div class=\"codehilite\"><pre>public FhirRestfulServlet() {\n    super(FhirContext.forDstu2());\n}\n\n@Override\nprotected void initialize() throws ServletException\n{\n    /*\n     * The servlet defines any number of resource providers, and\n     * configures itself to use them by calling\n     * setResourceProviders()\n     */\n    List&lt;IResourceProvider&gt; resourceProviders = new ArrayList&lt;IResourceProvider&gt;();\n    resourceProviders.add(this.patientProvider);\n    setResourceProviders(resourceProviders);\n}\n</pre></div>\n\n\n<p>}</p>\n<p>public class PatientProvider implements IResourceProvider {</p>\n<div class=\"codehilite\"><pre>@Search()\npublic List&lt;Patient&gt; getPatient(@RequiredParam(name = Patient.SP_IDENTIFIER) StringParam identifier) {\n</pre></div>\n\n\n<p>}<br>\n}</p>\n</blockquote>",
        "id": 153812541,
        "sender_full_name": "Zulip HAPI Bot",
        "timestamp": 1454510369
    },
    {
        "content": "<p>jamesagnew <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-179405590\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-179405590\">commented</a> on <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291\">issue 291</a></p>\n<blockquote>\n<p>Hi Fei,</p>\n<p>Interesting problem :)</p>\n<p>Is the issue that because of the proxy that Weld creates, the server sees</p>\n<div class=\"codehilite\"><pre><span class=\"nd\">@Search</span><span class=\"o\">()</span>\n<span class=\"kd\">public</span> <span class=\"n\">List</span> <span class=\"nf\">getPatient</span><span class=\"o\">(</span><span class=\"nd\">@RequiredParam</span><span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Patient</span><span class=\"o\">.</span><span class=\"na\">SP_IDENTIFIER</span><span class=\"o\">)</span> <span class=\"n\">StringParam</span> <span class=\"n\">identifier</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</pre></div>\n\n\n<p>instead of </p>\n<div class=\"codehilite\"><pre><span class=\"nd\">@Search</span><span class=\"o\">()</span>\n<span class=\"kd\">public</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Patient</span><span class=\"o\">&gt;</span> <span class=\"nf\">getPatient</span><span class=\"o\">(</span><span class=\"nd\">@RequiredParam</span><span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Patient</span><span class=\"o\">.</span><span class=\"na\">SP_IDENTIFIER</span><span class=\"o\">)</span> <span class=\"n\">StringParam</span> <span class=\"n\">identifier</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</pre></div>\n\n\n<p>?</p>\n<p>I'm actually kind of surprised this would be an issue- The <code>IResourceProvider</code> interface has the <code>getResourceType()</code> method which the server uses to explicitly find out what resource type is being used. I guess that isn't working for some reason in this case though.</p>\n<p>Is there any error message or stack trace you see? Could you paste that in here?</p>\n</blockquote>",
        "id": 153812543,
        "sender_full_name": "Zulip HAPI Bot",
        "timestamp": 1454525856
    },
    {
        "content": "<p>fw060 <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-179465235\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-179465235\">commented</a> on <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291\">issue 291</a></p>\n<blockquote>\n<p>Hi James,<br>\nYes that is the exactly the problem! :)</p>\n<p>The stack trace is attached. The exact issue is that the line 424 in BaseMethodBinding (with latest snapshot):<br>\n            returnTypeFromMethod = ReflectionUtil.getGenericCollectionTypeOfMethodReturnType(theMethod);<br>\nwould return null for the Proxy class because the line 88 in ReflectionUtil would not return ParameterizedType instance. </p>\n<p>Thanks,<br>\nFei</p>\n<p>===============================================</p>\n<p>2016-02-03 15:48:57,541 ERROR [io.undertow.request] [LMMFW/ANONYMOUS:NO_HTTP_CONTEXT@default task-1] UT005023: Exception handling request to /gil/fhir/Observation/39624754: javax.servlet.ServletException: Failed to initialize FHIR Restful server<br>\n    at ca.uhn.fhir.rest.server.RestfulServer.init(RestfulServer.java:747)<br>\n    at javax.servlet.GenericServlet.init(GenericServlet.java:244)<br>\n    at io.undertow.servlet.core.ManagedServlet$DefaultInstanceStrategy.start(ManagedServlet.java:214)<br>\n    at io.undertow.servlet.core.ManagedServlet.getServlet(ManagedServlet.java:157)<br>\n    at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:84)<br>\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:130)<br>\n    at org.pcpgm.gis.web.filter.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:29)<br>\n    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)<br>\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132)<br>\n    at org.pcpgm.gis.web.filter.HttpRequestContextFilter.doFilter(HttpRequestContextFilter.java:38)<br>\n    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)<br>\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132)<br>\n    at org.pcpgm.gis.web.MDCPopulationFilter.doFilter(MDCPopulationFilter.java:36)<br>\n    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)<br>\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132)<br>\n    at org.pcpgm.gis.web.filter.TenantStatusAndUserFilter.doFilter(TenantStatusAndUserFilter.java:93)<br>\n    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)<br>\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132)<br>\n    at org.pcpgm.gis.web.filter.DuplicateRequestFilter.doFilter(DuplicateRequestFilter.java:111)<br>\n    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)<br>\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132)<br>\n    at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:85)<br>\n    at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:61)<br>\n    at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)<br>\n    at org.wildfly.extension.undertow.security.SecurityContextAssociationHandler.handleRequest(SecurityContextAssociationHandler.java:78)<br>\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:25)<br>\n    at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:113)<br>\n    at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:56)<br>\n    at io.undertow.server.handlers.DisableCacheHandler.handleRequest(DisableCacheHandler.java:27)<br>\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:25)<br>\n    at io.undertow.security.handlers.AuthenticationConstraintHandler.handleRequest(AuthenticationConstraintHandler.java:51)<br>\n    at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:45)<br>\n    at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:61)<br>\n    at io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler.handleRequest(ServletSecurityConstraintHandler.java:56)<br>\n    at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:58)<br>\n    at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:70)<br>\n    at io.undertow.security.handlers.SecurityInitialHandler.handleRequest(SecurityInitialHandler.java:76)<br>\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:25)<br>\n    at org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(JACCContextIdHandler.java:61)<br>\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:25)<br>\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:25)<br>\n    at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:240)<br>\n    at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:227)<br>\n    at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:73)<br>\n    at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:146)<br>\n    at io.undertow.server.Connectors.executeRootHandler(Connectors.java:177)<br>\n    at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:727)<br>\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)<br>\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)<br>\n    at java.lang.Thread.run(Thread.java:745)<br>\nCaused by: java.lang.NullPointerException<br>\n    at ca.uhn.fhir.rest.method.BaseMethodBinding.isResourceInterface(BaseMethodBinding.java:557)<br>\n    at ca.uhn.fhir.rest.method.BaseMethodBinding.bindMethod(BaseMethodBinding.java:425)<br>\n    at ca.uhn.fhir.rest.server.RestfulServer.findResourceMethods(RestfulServer.java:314)<br>\n    at ca.uhn.fhir.rest.server.RestfulServer.findResourceMethods(RestfulServer.java:303)<br>\n    at ca.uhn.fhir.rest.server.RestfulServer.registerProviders(RestfulServer.java:1025)<br>\n    at ca.uhn.fhir.rest.server.RestfulServer.init(RestfulServer.java:729)<br>\n    ... 49 more</p>\n</blockquote>",
        "id": 153812548,
        "sender_full_name": "Zulip HAPI Bot",
        "timestamp": 1454533394
    },
    {
        "content": "<p>fw060 <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-179954518\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-179954518\">commented</a> on <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291\">issue 291</a></p>\n<blockquote>\n<p>Hi James, I just submitted the pull request. Basically I added a Map from resource type to class and use it later. This is pure optional so the existing functionality should not be impacted. Please let me know what do you think about this. </p>\n<p>Thanks!<br>\nFei</p>\n</blockquote>",
        "id": 153812553,
        "sender_full_name": "Zulip HAPI Bot",
        "timestamp": 1454606425
    },
    {
        "content": "<p>jamesagnew closed <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291\">issue 291</a></p>",
        "id": 153812678,
        "sender_full_name": "Zulip HAPI Bot",
        "timestamp": 1454786346
    },
    {
        "content": "<p>jamesagnew <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-180842207\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-180842207\">commented</a> on <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291\">issue 291</a></p>\n<blockquote>\n<p>Hi Fei,</p>\n<p>I had a try at creating a unit test to recreate this, and as it turns out I think the issue is really just that we have a check to prevent people returning List&lt;T&gt; of the <strong>wrong</strong> type, and it was failing if there was <strong>no</strong> type.</p>\n<p>I think that with the fix in <a href=\"https://github.com/jamesagnew/hapi-fhir/commit/0ff111be872a437debff6cfcddaa462c061eb1ad\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/commit/0ff111be872a437debff6cfcddaa462c061eb1ad\">https://github.com/jamesagnew/hapi-fhir/commit/0ff111be872a437debff6cfcddaa462c061eb1ad</a> we don't need the extra method from your pull request- are you able to confirm if this fixes things in your setup?</p>\n<p>Thanks for all the analysis!</p>\n</blockquote>",
        "id": 153812679,
        "sender_full_name": "Zulip HAPI Bot",
        "timestamp": 1454786493
    },
    {
        "content": "<p>fw060 <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-181897662\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-181897662\">commented</a> on <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291\">issue 291</a></p>\n<blockquote>\n<p>Hi James,<br>\nYes, your fix works. This was actually the stop gap fix we have been using until we come up with the proposed solution. If the intention of the check is to just to prevent wrong type rather than ensure right type (thus no type is not allowed), then your fix works perfectly. We probably should have checked with you earlier. Thanks again for your time to analyze and fix this!</p>\n<p>Another question will this fix be in 1.4 or 1.5? It was checked in before version bump but after the 1.4 label was created. Hopefully it is in version 1.4 :)</p>\n<p>Thanks!<br>\nFei</p>\n</blockquote>",
        "id": 153812741,
        "sender_full_name": "Zulip HAPI Bot",
        "timestamp": 1455029205
    },
    {
        "content": "<p>jamesagnew <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-181910299\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-181910299\">commented</a> on <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291\">issue 291</a></p>\n<blockquote>\n<p>Hi Fei,</p>\n<p>Yeah, I think just watering the check down is good enough. It's intended to<br>\nbe a last resort thing, but nothing more. So I think we can call this one<br>\nclosed :)</p>\n<p>Unfortunately this fix didn't make it into 1.4. It's already in the most<br>\nrecent 1.5 snapshot build though, and it'll be a part of the 1.5 release.</p>\n<p>Cheers,<br>\nJames</p>\n<p>On Tue, Feb 9, 2016 at 9:46 AM, fw060 &lt;<a href=\"mailto:notifications@github.com\" title=\"mailto:notifications@github.com\">notifications@github.com</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi James,<br>\nYes, your fix works. This was actually the stop gap fix we have been using<br>\nuntil we come up with the proposed solution. If the intention of the check<br>\nis to just to prevent wrong type rather than ensure right type (thus no<br>\ntype is not allowed), then your fix works perfectly. We probably should<br>\nhave checked with you earlier. Thanks again for your time to analyze and<br>\nfix this!</p>\n<p>Another question will this fix be in 1.4 or 1.5? It was checked in before<br>\nversion bump but after the 1.4 label was created. Hopefully it is in<br>\nversion 1.4 :)</p>\n<p>Thanks!<br>\nFei</p>\n<p>—<br>\nReply to this email directly or view it on GitHub<br>\n&lt;<a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-181897662\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-181897662\">https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-181897662</a>&gt;<br>\n.</p>\n</blockquote>\n</blockquote>",
        "id": 153812742,
        "sender_full_name": "Zulip HAPI Bot",
        "timestamp": 1455030936
    },
    {
        "content": "<p>fw060 <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-181913294\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-181913294\">commented</a> on <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291\">issue 291</a></p>\n<blockquote>\n<p>Yes, now we can call this closed :)</p>\n<p>What is current plan for 1.5 release?</p>\n<p>Thanks,<br>\nFei</p>\n</blockquote>",
        "id": 153812743,
        "sender_full_name": "Zulip HAPI Bot",
        "timestamp": 1455031555
    },
    {
        "content": "<p>jamesagnew <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-181937103\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-181937103\">commented</a> on <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291\">issue 291</a></p>\n<blockquote>\n<p>We don't yet have a release date in mind for 1.5, but snapshots are available now and we have been typically following a 2-3 month release cycle. I would say that at the latest, it will be released before the May HL7 Working Group Meeting.</p>\n</blockquote>",
        "id": 153812747,
        "sender_full_name": "Zulip HAPI Bot",
        "timestamp": 1455034620
    },
    {
        "content": "<p>fw060 <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-182406328\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291#issuecomment-182406328\">commented</a> on <a href=\"https://github.com/jamesagnew/hapi-fhir/issues/291\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/issues/291\">issue 291</a></p>\n<blockquote>\n<p>Hi James,<br>\nMay is probably too late for us. So I m exploring other options. We can support our own fork. Another option is to see if 1.4.1 is an option, I m more than willing to help if HAPI team would like to start release maintenance release. </p>\n<p>Thanks,<br>\nFei</p>\n</blockquote>",
        "id": 153812771,
        "sender_full_name": "Zulip HAPI Bot",
        "timestamp": 1455116023
    }
]