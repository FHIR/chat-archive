[
    {
        "content": "<p>Through FHIR transactions it is possible to execute methods not exposed in the resource provider. If you eg. have removed the option to POST patients, it is still possible to do POST on a Patient resource in the transaction bundle as FHIR transactions is HAPI directly uses the underlying dao. Is this the intended behaviour? <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span></p>",
        "id": 183169063,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1576078807
    },
    {
        "content": "<p>It seems a bit weird because if I try to create the Patient using ordinary creation using POST, the RestfulServer class will not allow it as it cannot find the proper binding. Could an interceptor that inspected the capability statement and whitelisted the operations be a proper solution?</p>",
        "id": 183169222,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1576078916
    },
    {
        "content": "<p>We don't support the ability to remove functionality from the JPA server,<br>\nthis is something you added isn't it?</p>\n<p>The supported way to block operations completely from the JPA server is to<br>\nuse the AuthorizationInterceptor.</p>\n<p>An alternate might be for you to add an interceptor that looks at<br>\ntransaction bundles and does some validation for whatever logic you want.</p>",
        "id": 183170556,
        "sender_full_name": "James Agnew",
        "timestamp": 1576079685
    },
    {
        "content": "<blockquote>\n<p>We don't support the ability to remove functionality from the JPA server,<br>\nthis is something you added isn't it?</p>\n</blockquote>\n<p>Yes, this is contained in <a href=\"https://github.com/jamesagnew/hapi-fhir/pull/1574\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/pull/1574\">https://github.com/jamesagnew/hapi-fhir/pull/1574</a> in order for us to define fine grained control over what is supported and what isn't supported.</p>\n<p>Now, besides using the JPA server capabilities, we have also added business validation rules inside our Resource Providers. We also (naturally) have an implementation of the authorization interceptor that authorizes according to our business rules - this is ofcourse invoked when running transactions as any other interceptor.</p>\n<p>For us to support the current implementation of <code>transaction</code> that is going directly to the dao's probably requires us to rewrite all business validation logic that is currently carried out inside Resource Providers and instead put that logic inside the interceptors in the proper pointcuts, as the interceptors are still invoked when using the daos.</p>\n<p>This is a bit of a surprise, but I understand the logic behind the design. I would therefore highly recommend that the documentation should be updated to state that putting business logic into resource providers when using the HAPI JPA is NOT be recommended if transactions should be supported.</p>\n<p>Sounds reasonable?</p>",
        "id": 183185379,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1576088736
    },
    {
        "content": "<p>Yup, makes sense to me. PRs welcome.</p>",
        "id": 183262885,
        "sender_full_name": "James Agnew",
        "timestamp": 1576160318
    },
    {
        "content": "<p>basic question - does hapi handle transactions ? Can I post one and watch the resources being created/deleted?</p>",
        "id": 197568503,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1589468749
    },
    {
        "content": "<p>yes</p>",
        "id": 197573282,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1589470529
    },
    {
        "content": "<p>assuming you are using a vanilla HAPI FHIR JPA setup</p>",
        "id": 197573457,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1589470579
    },
    {
        "content": "<p>thanks</p>",
        "id": 197573681,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1589470679
    }
]