[
    {
        "content": "<p>I would like to automatically map openEHR archetypes into FHIR logical models (StructureDefinitions). In a subsequent step I would like to use a FHIR server (e.g. VONK or HAPI) to use these logical models as the basis to receive, store and provide query capabilities in order to handle resource instances of those models. What I heard of, VONK supports a mechanism out-of-the-box, so that a StructureDefinition can be given and the server can automatically handle those models as active profiles. In HAPI I tried a bit myself to create such a mechanism, so that the respective Java classes are automatically created so that the HAPI server can manage the models as active profiles.<br>\nHowever, I encountered a problem in my whole approach: In FHIR branching in models is done using BackboneElements. BackboneElements carry no information in themselves, but only provide the capability to contain subnodes. In openEHR the branching nodes are derivatives of classes from the openEHR reference model, so they contain fields that are inherited from their parent classes. It were beneficial concerning my approach that BackboneElements could also be derived by other profiles. I would like to get the opinion of implementers of VONK and HAPI what would happen, if derivatives of BackboneElement would be used in a StructureDefinition. Would the existing code out-of-the-box be able to handle such a modeling paradigm ?</p>",
        "id": 182325769,
        "sender_full_name": "Georg Fette",
        "timestamp": 1575277220
    },
    {
        "content": "<p>I guess in practice that you are \"limited\" by StructureDefinition.snapshot / differential. Both contain a list of elements of type ElementDefinition. ElementDefinition itself is derived from BackboneElement. That can't be changed. Therefore you have only the option to create a custom data type in your logical model which is derived from BackboneElement (see <a href=\"https://www.hl7.org/fhir/backboneelement.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/backboneelement.html\">https://www.hl7.org/fhir/backboneelement.html</a> -&gt; Timing / Dosage data type), however that would only solve the issue for a single element. I don't see how you could create a nested structure with it.</p>",
        "id": 182346359,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1575294460
    },
    {
        "content": "<p>If you really need to, you could try to add an extension on BackboneElement</p>",
        "id": 182346474,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1575294530
    },
    {
        "content": "<p>The StructureDefinition.snapshots are composed of ElementDefinitions, but in the \"type\" of those ElementDefinitions that represent nodes with children, the \"code\" is always \"BackboneElement\" in all Profiles. I wonder if it were possible to use a derivative of BackboneElement in those cases. Extensions on BackboneElements are another option I haven't thought of yet. However, I think that none of those options are actually supported by FHIR server implementations as they are not used nowhere.</p>",
        "id": 182381049,
        "sender_full_name": "Georg Fette",
        "timestamp": 1575315434
    },
    {
        "content": "<p>I think you are asking about logical models. You can derive logical models from Element or BackboneElement - though really, why BackboneElement? - just use Element. But I don't know to what degree HAPI supports this</p>",
        "id": 182381348,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575315606
    },
    {
        "content": "<p>hm, okay, when not even BackboneElement is needed, even better. Then my question could boil down to if resource instances of logical models can be managed with HAPI</p>",
        "id": 182381582,
        "sender_full_name": "Georg Fette",
        "timestamp": 1575315743
    }
]