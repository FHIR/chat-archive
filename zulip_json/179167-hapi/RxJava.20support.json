[
    {
        "content": "<p>Hi, is there any plan for supporting RxJava library? <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span></p>",
        "id": 154015419,
        "sender_full_name": "Raed Cran",
        "timestamp": 1541260355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"195406\">@Raed Cran</span> Well.. No current plans. Not that it's not a great idea (I love the reactive paradigm) but I don't think anyone is working on this now.</p>\n<p>Any interest in taking this on? :)</p>",
        "id": 154015597,
        "sender_full_name": "James Agnew",
        "timestamp": 1541408227
    },
    {
        "content": "<p>What would it mean to support rxjava?</p>",
        "id": 154015758,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541450049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span>  yep, I would love to, but I'm not an expert in reactive programming. But certainly I would join a team taking this. thanks for the answer :)</p>\n<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <br>\nI was thinking of something similar to Retrofit RxJava2 adapter (<a href=\"https://github.com/square/retrofit/tree/master/retrofit-adapters/rxjava2\" target=\"_blank\" title=\"https://github.com/square/retrofit/tree/master/retrofit-adapters/rxjava2\">https://github.com/square/retrofit/tree/master/retrofit-adapters/rxjava2</a>), a more integrated reactive functionality into the rest client.<br>\nPer example, the possibility of returning an Observable&lt;Bundle&gt; instead of just a raw Bundle, and switch between threads, that is very important in Android (my case).</p>\n<p>I realized I could achieve this right now with RxJava 2, here is a simple example:</p>\n<div class=\"codehilite\"><pre><span></span>            Observable.just(newText)\n                .subscribeOn(Schedulers.io())\n                .map(t -&gt; client.search()\n                        .forResource(Patient.class)\n                        .where(Patient.FAMILY.matches().value(t))\n                        .returnBundle(org.hl7.fhir.dstu3.model.Bundle.class)\n                        .summaryMode(SummaryEnum.TRUE)\n                        .execute())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(b -&gt; {\n                    adapter.clear();\n                    if (!b.getEntry().isEmpty()) {\n                        adapter.addAll(b.getEntry());\n                    }\n                });\n</pre></div>\n\n\n<p>But it feels not so fluid as it could be, It would be interesting if I could do something like this:</p>\n<div class=\"codehilite\"><pre><span></span>        client.search()\n                .forResource(Patient.class)\n                .where(Patient.FAMILY.matches().value(t))\n                .returnBundle(org.hl7.fhir.dstu3.model.Bundle.class)\n                .toObservable() //returns Observable&lt;Bundle&gt;\n                .subscribeOn(Schedulers.io()) //  IO-bound work thread.\n                .observeOn(AndroidSchedulers.mainThread()) // ui update on UI thread\n                .subscribe(b -&gt; {\n                    adapter.clear();\n                    if (!b.getEntry().isEmpty()) {\n                        adapter.addAll(b.getEntry());\n                    }\n                }).execute();\n</pre></div>",
        "id": 154015797,
        "sender_full_name": "Raed Cran",
        "timestamp": 1541463245
    },
    {
        "content": "<p>does rxjava have an extensibility framework for stuff like this?</p>",
        "id": 154015825,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541483999
    }
]