[
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span>  there's a pretty serious bug just cropped up in BaseDateTimeType.</p>\n<p>Consider this code: </p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">String</span> <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"s\">&quot;2015-08-25T02:11:36&quot;</span><span class=\"p\">;</span>\n    <span class=\"n\">DateTimeType</span> <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">DateTimeType</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">);</span>\n    <span class=\"n\">Assertions</span><span class=\"p\">.</span><span class=\"na\">assertEquals</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">.</span><span class=\"na\">primitiveValue</span><span class=\"p\">(),</span> <span class=\"n\">src</span><span class=\"p\">);</span>\n    <span class=\"n\">DateTimeType</span> <span class=\"n\">dt2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">DateTimeType</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">.</span><span class=\"na\">getValue</span><span class=\"p\">());</span>\n    <span class=\"n\">Assertions</span><span class=\"p\">.</span><span class=\"na\">assertEquals</span><span class=\"p\">(</span><span class=\"n\">dt2</span><span class=\"p\">.</span><span class=\"na\">primitiveValue</span><span class=\"p\">(),</span> <span class=\"n\">src</span><span class=\"p\">);</span>\n</code></pre></div>\n\n\n<p>The second assertion fails:</p>\n<div class=\"codehilite\"><pre><span></span><code>org.opentest4j.AssertionFailedError: expected: &lt;2015-08-25T02:11:36+10:00&gt; but was: &lt;2015-08-25T02:11:36&gt;\n</code></pre></div>",
        "id": 208627598,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598915986
    },
    {
        "content": "<p>This is in R5, but I expect it's the same in all versions</p>",
        "id": 208627672,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598916024
    },
    {
        "content": "<p>Huh, interesting.</p>\n<p>I think at one point we errored out if a datetime with time but not TZ was provided, but that was softened at some point and that led to what we have here (a TZ being inferred, which I agree is awful).</p>\n<p>Should we just preserve the (technically invalid) string there? (as opposed to throwing an error?)</p>",
        "id": 208698171,
        "sender_full_name": "James Agnew",
        "timestamp": 1598971916
    },
    {
        "content": "<p>I talked to James about this. It's inherent in the fact that BaseDateTimeType is a PrimitiveType&lt;Date&gt;. This was done originally for Java 6 compatibility and is no longer required. In fact, it's a liability. So we're considering changing the parameter type more recent that supports timezones. This is obviously a big change but Date is definitely liability. </p>\n<p>Does anyone have any opinion about this?</p>",
        "id": 208744858,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598992623
    },
    {
        "content": "<p>Change the type - thats my two cents</p>",
        "id": 208746548,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1598993522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179167-hapi/topic/Bug.20in.20BaseDateTimeType/near/208744858\">said</a>:</p>\n<blockquote>\n<p>I talked to James about this. It's inherent in the fact that BaseDateTimeType is a PrimitiveType&lt;Date&gt;. This was done originally for Java 6 compatibility and is no longer required. In fact, it's a liability. So we're considering changing the parameter type more recent that supports timezones. This is obviously a big change but Date is definitely liability. </p>\n<p>Does anyone have any opinion about this?</p>\n</blockquote>\n<p>I don't think the change would break backwards compatibility in the serialized JSON or XML, right? If not, FWIW, my default opinion is that any code using <code>Date</code> is wrong/broken.</p>",
        "id": 208772442,
        "sender_full_name": "Karl M. Davis",
        "timestamp": 1599012741
    },
    {
        "content": "<p>right. It doesn't change anything about how the type works except where you use .getValue() / .setValue()</p>",
        "id": 208772556,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599012858
    },
    {
        "content": "<p>but I've had to fix a few bugs in the last couple of days associated with this usage</p>",
        "id": 208772577,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599012896
    }
]