[
    {
        "content": "<p>Does anyone know whether HAPI has an authentication layer as part of the core offering?</p>",
        "id": 153822475,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1461082319
    },
    {
        "content": "<p>I think James answered that on the google HAPI group the other day. </p>",
        "id": 153822483,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1461087200
    },
    {
        "content": "<p><a href=\"https://groups.google.com/forum/#!topic/hapi-fhir/xgTKteUVREc\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/hapi-fhir/xgTKteUVREc\">https://groups.google.com/forum/#!topic/hapi-fhir/xgTKteUVREc</a></p>",
        "id": 153822484,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1461087236
    },
    {
        "content": "<p>I'd assume you'd be able to secure with Spring OAuth2, presume it's just a bit of config. (It'd be on our to do list, we have Spring securing our existing FHIR API's<br>\n)</p>",
        "id": 153822487,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1461087774
    },
    {
        "content": "<p>Yup, the idea with <code>AuthorizationInterceptor</code> is that you could put an authentication/authorization layer on to of your server, of your choice. It could be spring security, or custom code talking to an LDAP or whatever else makes sense. </p>\n<p>The output of the outer security layer would be decisions about what the current user is allowed to do (i.e. it might say I'm authorized to view anything in the Patient/1 compartment, and write Observations). AuthorizationInterceptor lets you declaratively implement those rules.</p>",
        "id": 153822488,
        "sender_full_name": "James Agnew",
        "timestamp": 1461088116
    },
    {
        "content": "<p>..if that makes sense... ahh security is annoying :)</p>",
        "id": 153822489,
        "sender_full_name": "James Agnew",
        "timestamp": 1461088130
    },
    {
        "content": "<p>Doing the step 1 is pretty easy, getting the OAuth based identity verified, and filtering access types to the specific resource types.<br>\nThe next step, provding resource level security is where things get more interesting and haarder. We are looking into this at the moment with sqlonfhir.</p>",
        "id": 153822518,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1461102143
    },
    {
        "content": "<p>(as filtering on the outset is not ideal, as usually need to get all the way to the disk and filter there as this effects paging data with searching)</p>",
        "id": 153822519,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1461102217
    },
    {
        "content": "<p>Filtering the direct GET/DELETE/POST/PUT is not too bad though</p>",
        "id": 153822520,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1461102266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191495\">@Jonny Rylands</span> you might be interested in the topic. Several of the code4health reps (both DS@Endeavour) wanted to go down OAuth2 route using LDAP. With my DevOps hat on, I'm keen to go down Spring Security route to keep config differences minimal.</p>",
        "id": 153822576,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1461137809
    },
    {
        "content": "<p>Looking to secure HAPI's REST server with OAuth. Has anyone done this, yet? The \"server security\" documentation page doesn't provide a lot of guidance on how to do this... I imagine I would create an interceptor that validates the oauth token, but are there any examples of doing this yet?</p>",
        "id": 153975517,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1531768994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span></p>",
        "id": 153975518,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1531769002
    },
    {
        "content": "<p>I may have found the answer in an example: <a href=\"https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-oauth2\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-oauth2\">https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-oauth2</a><br>\nLet me know if I am wrong :)</p>",
        "id": 153975532,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1531769899
    },
    {
        "content": "<p>FYI, <strong>PublicSecurityInterceptor.java</strong> and <strong>TdlSecurityInterceptor.java</strong> in <a href=\"https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-jpaserver-uhnfhirtest/src/main/java/ca/uhn/fhirtest/interceptor\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-jpaserver-uhnfhirtest/src/main/java/ca/uhn/fhirtest/interceptor\">https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-jpaserver-uhnfhirtest/src/main/java/ca/uhn/fhirtest/interceptor</a> implement very simple-minded bearer token checks.</p>",
        "id": 153975623,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1531791484
    }
]