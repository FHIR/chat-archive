[
    {
        "content": "<p>see <a href=\"https://github.com/FHIR/Ucum-java/issues/7\" target=\"_blank\" title=\"https://github.com/FHIR/Ucum-java/issues/7\">https://github.com/FHIR/Ucum-java/issues/7</a> : which classes should I add equals etc to, and what's the grounds for equality? </p>\n<p>My working answer for the first question is Decimal and Pair. <br>\nMy working answer for the second question is, 'by decimal representation' but that's not fully correct in the corner cases - but where it's not correct, I don't know what would be.</p>\n<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> <span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span></p>",
        "id": 153973510,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530742872
    },
    {
        "content": "<p>Consider Unit as well?</p>",
        "id": 153973533,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1530743579
    },
    {
        "content": "<p>As far as the grounds for equal, that they are the same value at the maximum precision of either input?</p>",
        "id": 153973535,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1530743609
    },
    {
        "content": "<p>it should be the minimum precision if we're going to think like that</p>",
        "id": 153973539,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743772
    },
    {
        "content": "<p>But then 1 would equal 1.1, we don't want that, right?</p>",
        "id": 153973541,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1530743801
    },
    {
        "content": "<p>but the real question for me is: are we trying to object equals,or concept equals?</p>",
        "id": 153973542,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743807
    },
    {
        "content": "<p>we might well want 1 to equal 1.1, though we wouldn't want 1.0 to equal 1.1</p>",
        "id": 153973544,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743833
    },
    {
        "content": "<p>Depends how it's being used in the code, the bug report indicates it's being used as concept equals, but is implemented as object equals.</p>",
        "id": 153973546,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1530743856
    },
    {
        "content": "<p>It's hard to imagine how it would be useful as an object equals.</p>",
        "id": 153973549,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1530743888
    },
    {
        "content": "<p>hmm that's not quite what I mean. lt's be more specific:<br>\nis 1.0000e2 = 10.000e1?</p>",
        "id": 153973551,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743941
    },
    {
        "content": "<p>do we want to know whether they are the same representation or have the same meaning?</p>",
        "id": 153973552,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743971
    },
    {
        "content": "<p>I would say yes, but that's because I'm assuming that this is being used in the context of determining whether or not two quantities are the same, and I wouldn't want different representations of the same value to cause that to be false.</p>",
        "id": 153973553,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1530744029
    },
    {
        "content": "<p>well, let's see what Patrick as to say...</p>",
        "id": 153973555,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530744095
    },
    {
        "content": "<p>In Java would generally adopt the pattern of <code>equals</code> being object equals and have a separate method for concept equals (if required)</p>",
        "id": 153973556,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1530744107
    },
    {
        "content": "<p>because usually questions about equals are actually questions about lists and maps</p>",
        "id": 153973557,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530744119
    },
    {
        "content": "<p>yes I have this:<br>\n    public boolean equals(Decimal value, Decimal maxDifference) {<br>\n      Decimal diff = this.subtract(value).absolute();<br>\n      return diff.comparesTo(maxDifference) &lt;= 0;<br>\n  }</p>",
        "id": 153973558,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530744152
    },
    {
        "content": "<blockquote>\n<p>I would say yes, but that's because I'm assuming that this is being used in the context of determining whether or not two quantities are the same, and I wouldn't want different representations of the same value to cause that to be false.</p>\n</blockquote>\n<p>i totally agree. Different representations of the same value should equal. I personally would ignore precision for equals(),  as considering it will make it complicated. </p>\n<p>1 precision 1 should equal 1 precision 2</p>",
        "id": 153973909,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1530824290
    },
    {
        "content": "<p>so basically i'm thinking about object equals ignoring precision.</p>",
        "id": 153973910,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1530824346
    },
    {
        "content": "<p>you can never ignore precision. Does 1.01 equal 1?</p>",
        "id": 153973911,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530825012
    },
    {
        "content": "<p>no, but 1 to 1.0 or 1.00</p>",
        "id": 153973915,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1530826084
    },
    {
        "content": "<p>well, you are ignoring precision selectively.</p>",
        "id": 153973917,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530826646
    },
    {
        "content": "<p>because 1 = 1.01 in most scientific frameworks</p>",
        "id": 153973918,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530826659
    },
    {
        "content": "<p>where as 1.00 != 1.01</p>",
        "id": 153973919,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530826667
    },
    {
        "content": "<p>after further reflection i agree with <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> equals() should be about object equality, comparing actual values should be handled by concept equals methods</p>",
        "id": 153974451,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1531224983
    },
    {
        "content": "<p>i added generated equals and hashCode for Decimal and Pair to my pull request</p>",
        "id": 153974452,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1531225459
    }
]