[
    {
        "content": "<p>Hello everybody ..</p>",
        "id": 237163123,
        "sender_full_name": "Andreas Mautsch",
        "timestamp": 1620049765
    },
    {
        "content": "<p>I guess this is not the first time someone asks .. but is it possible to implement STU3 and R4 at the same time inside the same HAPI FHir Spring Boot Application ? Unfortunately we have a requirement like this .. I invested about 2 hours of time and at least the application bootstrapped.</p>\n<p>I tried to differantiate bei having 2 urls /fhir/dstu3 and /fhir/r4 ... only the first one works ... as getting this far involved some hacky code, I suspect its not desired to do something like this ?</p>",
        "id": 237163531,
        "sender_full_name": "Andreas Mautsch",
        "timestamp": 1620049932
    },
    {
        "content": "<p>I suspect that it's possible, though I haven't tried.  But I would looking to save the headaches unless there really is some shared state you need to maintain between the two. If you are already ok with two different base URLs, I assume it is much easier to run two instances - or even use a reverse proxy if you want to have them running on the same port/machine. </p>\n<p>That said, we use the plain server implementation (not the JPA), and we register the FHIR server servlet with SpringBoot like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    @Bean\n    public ServletRegistrationBean&lt;?&gt; v1FhirServletRegistrationBean(RestfulServer v1FhirServlet) {\n        ServletRegistrationBean&lt;?&gt; s = new ServletRegistrationBean&lt;&gt;(v1FhirServlet, fhirServerBaseContextPath + &quot;/*&quot;);\n        s.setName(&quot;fhirsvr&quot;);\n        return s;\n    }\n</code></pre></div>\n<p>With a little Spring-fu, I suspect you could register more than one servlet on different base-urls.</p>",
        "id": 237166635,
        "sender_full_name": "Craig McClendon",
        "timestamp": 1620051197
    },
    {
        "content": "<p>.. If you're using the JPA version of HAPI, that could present additional problems if you cannot share a single DB configuration between the two versions. SpringBoot doesn't well support having multiple JPA configurations within the same application context because there are a bunch of hidden beans it uses for things like transaction management which are not easily separated.</p>",
        "id": 237167682,
        "sender_full_name": "Craig McClendon",
        "timestamp": 1620051626
    },
    {
        "content": "<p>ok thank you very much for the fast answer .. basically registering  to ServletRegistrationBeans is what I did<br>\nadditionally the component scanning needs to be fixed at multiple occasions .. looks very hacky though and still doesn not work finally<br>\ni also thought about deploying two instances and using a reverse proxy .. while this is possible its not my first choice, because this will affect the development process as well as the resource usage </p>\n<p>jpa is not a thing currently .. thanks again</p>",
        "id": 237171168,
        "sender_full_name": "Andreas Mautsch",
        "timestamp": 1620052982
    }
]