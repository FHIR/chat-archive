[
    {
        "content": "<p><em>How to dynamically create Resources based on their StructureDefinitions?</em></p>\n<p>Hi,</p>\n<p>I'm quite new to FHIR and HAPI, so forgive me if I don't know something obvious.</p>\n<p>We want to implement a conversion from our internal representation of medical data to specific FHIR resources. For this the idea is to annotate each of our internal fields with the kind of FHIR resource it corresponds to.</p>\n<p>For example, the data field which contains a patients body weight would be annotated with the following StructureDefinition (this is from the German Covid dataset):</p>\n<ul>\n<li><a href=\"https://simplifier.net/ForschungsnetzCovid-19/BodyWeight/~json\">https://simplifier.net/ForschungsnetzCovid-19/BodyWeight/~json</a></li>\n</ul>\n<p>Once everything is annotated this way, we can write some generic conversion function, which iterates over our data, and generates the FHIR output, based on their StructureDefinitions (there will also conversion of values to be considered, but let's leave that for later).</p>\n<p>So for example, we would like to have some Java method, which takes:</p>\n<ul>\n<li>the value of a form field, i.e. 84kg, and</li>\n<li>the BodyWeight StructureDefinition,</li>\n</ul>\n<p>and then outputs a FHIR data record as in the example here:</p>\n<ul>\n<li><a href=\"https://simplifier.net/ForschungsnetzCovid-19/Observation-example-body-weight/~json\">https://simplifier.net/ForschungsnetzCovid-19/Observation-example-body-weight/~json</a></li>\n</ul>\n<p>As far as I understand them, the StructureDefinitions contain all the necessary information to construct data records out of them in a generic way.</p>\n<p>Unfortunately, I have not really found any way to do this. I can read the StructureDefinitions just fine, but there seems to be no support to create actual data records from them.</p>\n<p>All I can do at the moment, is to use the fluent API to create a data record just as the BodyWeight example above, but then everything is hard coded in my Java code. I would then need to create Java methods for every possible data type that's part of the Gecco dataset. Which seems like a lot of effort, given that the structural information is already available.</p>\n<p>Is there anything I missed, is somebody else already doing that, or is this idea maybe ridiculous and wouldn't work anyway? What are all those StructureDefinition used for normally, and how do you create data records for them?</p>\n<p>Thanks for any insight,<br>\nMarc</p>",
        "id": 224885090,
        "sender_full_name": "Marc Günther",
        "timestamp": 1612279136
    },
    {
        "content": "<p>Without exactly knowing what HAPI can or can't do with StructureDefinitions, usually more than one \"data item\" is necessary to create a resource. In your example, the GECCO Body Weight Profile also requires status, subject and effective for which no fixed values are provided. Other GECCO Observation profiles have different constraints, so they would require different parameters. (Of course, you could write a \"generic\" method for all observations that supports all possible parameters, but than why not add category &amp; code as parameters too.)</p>",
        "id": 224887903,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1612280315
    },
    {
        "content": "<p>Maybe you need an integration engine such as Mirth Connect to do the conversions using your mappings.</p>",
        "id": 224888319,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1612280487
    },
    {
        "content": "<p>With an integration engine you have to describe the same stuff. Instead you need a semantic model with an appropriate description that integrates between your data and a representation in FHIR. as Noemi says it depends on the item what is necessary and how it fits resp. interrelates.</p>",
        "id": 224889919,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1612281099
    },
    {
        "content": "<blockquote>\n<p>More than one data item:</p>\n</blockquote>\n<p>Ah, yes, that is an added complexity. In the BodyWeigt example, \"subject\" and \"effective\" would come from the metadata that is attached to our specific data field, and \"status\" I'm not sure what it is yet, but will probably figure it out.</p>\n<p>But there are also Resources that really have true multiple data items, like BloodPressure. For this we would annotate our data field that contains the systolic value so that it will map to the Resource BloodPressure and in there to the id \"Observation.component:systolicBloodPressure.value[x]\".</p>\n<p>Does this make sense, or is this not the way to go about it?</p>\n<blockquote>\n<p>but than why not add category &amp; code as parameters too.</p>\n</blockquote>\n<p>But aren't these fixed values, at least in the BodyWeight example? They definitely are not part of our existing data.</p>\n<p>I think this is the main point that I do not understand. When I want to create an Observation that contains a BodyWeight, how do I know that it needs these entries (these are all taken from the example):</p>\n<p>category.coding[0].system: <a href=\"http://terminology.hl7.org/CodeSystem/observation-category\">http://terminology.hl7.org/CodeSystem/observation-category</a><br>\ncategory.coding[0].code: vital-signs<br>\ncode.coding[0].system: <a href=\"http://loinc.org\">http://loinc.org</a><br>\ncode.coding[0].code: 29463-7<br>\ncode.coding[0].display: Body weight<br>\ncode.coding[1].system: <a href=\"http://snomed.info/sct\">http://snomed.info/sct</a><br>\ncode.coding[1].code: 27113001<br>\ncode.coding[1].display: Body weight (observable entity)<br>\ncode.text: Body weight</p>\n<p>I would like to avoid to hardcode this info in my Java source code for all 64 Gecco Resources.<br>\nThese are already part of the gecco BodyWeight StructureDefinition, and it's baseDefinition, so shouldn't there be some easy way to get that info, and construct new Resources from it?</p>\n<p>How does everyone here create FHIR data records for various Profiles? Is it all hard coded for the specific use case?</p>",
        "id": 224906443,
        "sender_full_name": "Marc Günther",
        "timestamp": 1612287118
    },
    {
        "content": "<p>Well, you could add the code &amp; category codes as field metadata too? Alternatively, you could process the StructureDefinition and check all <a href=\"https://www.hl7.org/fhir/elementdefinition.html#ElementDefinition\">ElementDefinitions</a> in the StructureDefinition.snapshot for cardinality &amp; fixed values and set them if required.<br>\nI don't believe I have ever processed StructureDefinitions for Resource creation (only for metadata-focused uses), how much generalized vs specialized code there is for me depends heavily on the profile set and the source data structure. For how good generalization works with GECCO profiles, I suggest you ask for experiences on german (d-a-ch) or german/mi-initiative, questions on GECCO often get asked there.</p>",
        "id": 224986318,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1612341034
    },
    {
        "content": "<p>Hi Noemi,</p>\n<p>thanks for your answer.</p>\n<blockquote>\n<p>Well, you could add the code &amp; category codes as field metadata too?</p>\n</blockquote>\n<p>Yes, but how do I know what they are for the 68 StructureDefinitions that are eg. in Gecco? Without reading them from the StructureDefinitions as you suggest?</p>\n<p>As you have never used them in that way, how do you yourself create Resources then? If I were to manually implement 68 methods to create all the Gecco Resources with all the details hardcoded in them, how would I know what to write in those methods?</p>\n<p>Sorry, I think there is something fundamental that I do not yet understand about FHIR. It is advertised as an exchange data format between different systems, so the problem of converting a proprietary data format into FHIR has to come up all the time and already has to be solved in several ways, but my searches have turned up absolutely nothing about the topic.</p>\n<p>I am very grateful for any help!</p>",
        "id": 224997196,
        "sender_full_name": "Marc Günther",
        "timestamp": 1612348134
    },
    {
        "content": "<p>You need to look at the profiles and identify what information from your source system corresponds to which FHIR attribute in which resource. The profiles tell you what the resources should look like at the minimum (you can always add additional information for attributes not required in the profile, e.g. the performer for bodyweight.) Also, i would suggest to look at the actual implementation guide instead of just the profiles (for gecco body weight <a href=\"https://simplifier.net/guide/GermanCoronaConsensusDataSet-ImplementationGuide/Bodyweight-duplicate-2\">https://simplifier.net/guide/GermanCoronaConsensusDataSet-ImplementationGuide/Bodyweight-duplicate-2</a>), since there is usually some explanatory text. If you are lucky, you can identify a general pattern and generalize some of the mapping, if you are unlucky you need to handle everything separately.  For example, the weight observation is very different from the sex assigned at birth observation (e.g. effective is important for weight, but sex assigned at birth should not change so effective is not as important. On the other hand, all Laboratory values are very similar (except the different LOINC codes of course), so there one method would probably be enough for all profiles (if you have the correct LOINC for each test or a mapping in your source database of course).<br>\nWhat we actually use the StructureDefinitions for is validation of our complete resources to catch any errors.<br>\nIn MIRACUM, we have one of our older ETL jobs publicly available on Github <a href=\"https://github.com/miracum/etl-p21-to-fhir\">https://github.com/miracum/etl-p21-to-fhir</a> , it might give you an example of what a transformation might look like. (My colleagues who are more involved in our ETL development do not read this stream, so if you have questions about it again i would suggest the german/mi-initiative stream.)</p>",
        "id": 224999229,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1612349369
    },
    {
        "content": "<blockquote>\n<p>You need to look at the profiles and identify what information from your source system corresponds to which FHIR attribute in which resource.</p>\n</blockquote>\n<p>Ah, Sorry, I think I didn't explain that properly. I am not concerned with the mapping, in fact I do not even know what those source systems look like, as they are completely generic. What I am concerned with is providing a way for others to define that mapping for their particular system.</p>\n<p>So, short explanation, we provide an EDC system, where people have defined forms for entering data, and these forms consist of text fields, number fields, date fields, etc. What they contain is not known to me or the system.</p>\n<p>We want to provide a way to export these fields to FHIR. So, as these fields are completely generic, the idea is to provide a configuration UI, which allows to annotate each field with its corresponding FHIR Resource and path inside that Resource. This defines a mapping from those particular forms to FHIR/Gecco. We can than use this mapping to export the data into FHIR Resources.</p>\n<p>So, what I need is:</p>\n<ul>\n<li>a way to list all the Resources and their possible value pathes, and present them to the user, so they can define the mapping,</li>\n<li>and a way to then convert our generic data fileds into FHIR Resources, given that mapping.</li>\n</ul>\n<p>My post here was concerned with the second point, but of course the first one is also interesting.</p>\n<p>When I understand all of this correctly, I need someone with Gecco specific domain knowledge, in order to:</p>\n<ul>\n<li>provide that list of possible mappings,</li>\n<li>and provide some Java code to create the corresponding HAPI Fhir objects.</li>\n</ul>\n<p>I was hoping that I could extract that info out of the StructureDefinitions, which are already there, and contain all the necessary information, in some generic way, but that doesn't seem to be possible.</p>\n<p>Have I missed something?</p>",
        "id": 225274189,
        "sender_full_name": "Marc Günther",
        "timestamp": 1612515650
    },
    {
        "content": "<p>And of course in the final and sad conclusion this means, if at some point we want to support not only Gecco, but some other set of profiles, we have to again find someone with domain specific knowledge for THAT specific profile, in order to get the necessary information and Java code?</p>\n<p>I was hoping there would be some generic way to implement this, so users can upload a definition like one of these zip files available for download here:</p>\n<ul>\n<li><a href=\"https://simplifier.net/forschungsnetzcovid-19\">https://simplifier.net/forschungsnetzcovid-19</a></li>\n</ul>\n<p>and the system parses them, and provides the necessary mapping options and conversion methods.</p>\n<p>I still think that all the information which is needed to do this is in those zip files, no? But apparently, no one has ever used them for this purpose?</p>",
        "id": 225277099,
        "sender_full_name": "Marc Günther",
        "timestamp": 1612517743
    },
    {
        "content": "<p>Well for the first step (mapping) I believe you will always need someone with Domain-Specific knowledge. However, loading profiles into a Mapping UI to provide a user with a visual mapping method should be possible. For step 2 (executing the mapping), i believe given the mapping an the profiles it should be feasible to build the HAPI objects without specialized code. You would need to translate each element's id to a HAPI method call, and find a way to deal with slicing. (Plus some other issues that will probably come up during implementation...)<br>\nOf course, if you are not bound to using HAPI, using a more generic JSON Library may be easier. Or take a look at the FHIR mapping language. If you manage to generate mapping language from your mapping UI, you can use an existing engine to execute it.<br>\nOr have a look at Pyrog: https://github.com/arkhn/pyrog)It provides a mapping UI and can execute that mapping, maybe you can build a module to make it work with your EDC system?</p>",
        "id": 225278494,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1612518665
    },
    {
        "content": "<p>Well, the actual mapping (this data field corresponds to that element in that FHIR Resource), would be done by whoever setup those data fields in the first place, so they should have the necessary domain knowledge.</p>\n<p>Providing the Mapping UI, and executing the mapping (generating the Resources) needs to be done by us beforehand.</p>\n<p>So if I understand your answer correctly, something like this has never been done with HAPI before, and it might not even be the best tool for it?</p>\n<p>I found a similar topic here (although they are talking about code-generation), but the problem is described as \"super hard\":</p>\n<ul>\n<li><a href=\"#narrow/stream/179166-implementers/topic/XSD.20Schemas.20from.20FHIR.20Profiles.20for.20Code.20Generation/near/224939362\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/XSD.20Schemas.20from.20FHIR.20Profiles.20for.20Code.20Generation/near/224939362</a></li>\n</ul>\n<p>Regarding the FHIR Mapping Language, can it read in existing StructureDefinitions? Or is there a way to convert the StructureDefinitions into that language? If not, then I would need to manually write code in that language for every Profile, and if I need to do that, I could also do it in Java Hapi, which is a language I already understand. :-)</p>",
        "id": 225561237,
        "sender_full_name": "Marc Günther",
        "timestamp": 1612798549
    },
    {
        "content": "<p>someone somewhere has to write 'code' that explains how to migrate from one form to another.</p>",
        "id": 225619673,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612823746
    },
    {
        "content": "<p>the mapping language can leverage the structure definitions, but the structure definitions themselves don't generally have the capability to capture the mappings. (the mapping facilities in the structure definition support 'conceptual' mappings, which state the elements map to each other, but doesn't have the facilities to deal with value domain exceptions, or all the typical kinds of data wrangling that goes on</p>",
        "id": 225619819,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612823841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"381442\">Marc Günther</span> <a href=\"#narrow/stream/179167-hapi/topic/dynamic.20creation.20of.20resources/near/225561237\">said</a>:</p>\n<blockquote>\n<p>Well, the actual mapping (this data field corresponds to that element in that FHIR Resource), would be done by whoever setup those data fields in the first place, so they should have the necessary domain knowledge.</p>\n<p>Providing the Mapping UI, and executing the mapping (generating the Resources) needs to be done by us beforehand.</p>\n<p>So if I understand your answer correctly, something like this has never been done with HAPI before, and it might not even be the best tool for it?</p>\n<p>I found a similar topic here (although they are talking about code-generation), but the problem is described as \"super hard\":</p>\n<ul>\n<li><a href=\"#narrow/stream/179166-implementers/topic/XSD.20Schemas.20from.20FHIR.20Profiles.20for.20Code.20Generation/near/224939362\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/XSD.20Schemas.20from.20FHIR.20Profiles.20for.20Code.20Generation/near/224939362</a></li>\n</ul>\n<p>Regarding the FHIR Mapping Language, can it read in existing StructureDefinitions? Or is there a way to convert the StructureDefinitions into that language? If not, then I would need to manually write code in that language for every Profile, and if I need to do that, I could also do it in Java Hapi, which is a language I already understand. :-)</p>\n</blockquote>\n<p>For what its worth - the MDHT project implemented similar feature for CDA to populate template ids and other static content - happy to walk you through the code if interested</p>",
        "id": 225622477,
        "sender_full_name": "Sean Muir",
        "timestamp": 1612825344
    },
    {
        "content": "<p>Well, I can say I have never seen it done with HAPI before :)  About the FHIR Mapping language, my knowledge on the topic is only superficial. If you plan to explore that direction, there is a mapping-framework stream where someone might be able to answer your question.</p>",
        "id": 225670154,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1612867239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179167-hapi/topic/dynamic.20creation.20of.20resources/near/225619673\">said</a>:</p>\n<blockquote>\n<p>someone somewhere has to write 'code' that explains how to migrate from one form to another.</p>\n</blockquote>\n<p>Yes, but this code could be generic, no? I mean, instead of 68 incantations like the following:</p>\n<ul>\n<li><a href=\"https://groups.google.com/g/hapi-fhir/c/3Aydx6uAOWs\">https://groups.google.com/g/hapi-fhir/c/3Aydx6uAOWs</a></li>\n</ul>\n<p>And with those, I don't even know how to code all these 68 cases... :(</p>",
        "id": 225687583,
        "sender_full_name": "Marc Günther",
        "timestamp": 1612876708
    },
    {
        "content": "<p>Well, you could write something that takes 1..* value/path pairs explaining where each value should be stored in a FHIR structure and a structure definition. Then, you parse the StructureDefinition for fixed values and set them, then you write each value from your value/path pairs to the given path. For this to work, you would need some \"generic\" way of building resources which is your main problem as i understand it? So, you could write some method that takes a ElementDefinition.path and translates it to a HAPI method call. An maybe easier solution would be to use e.g. a <a href=\"https://github.com/json-path/JsonPath\">JSON Path library</a>. Translating the path value to JSON path should be possible, given that you can find out if something is an element or a list by looking at the ElementDefinition in the StructureDefinition ? (maybe you would need an additional layer because of slicing but in general it should work?) So, you could build a JSON object which when you serialize it is a FHIR resource. At least, that is the approach i would explore.</p>",
        "id": 225690502,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1612878073
    },
    {
        "content": "<p>That sounds very interesting, i will try.</p>\n<p>Thanks :)</p>",
        "id": 225693272,
        "sender_full_name": "Marc Günther",
        "timestamp": 1612879297
    }
]