[
    {
        "content": "<p>I'm trying to define a named search parameter that works across ALL resources.</p>\n<p>This doesn't work, as there doesn't seem to be enough information within either the return type or the type parameter to the annotation for HAPI to associate it with a resource type:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"nd\">@Search</span><span class=\"p\">(</span><span class=\"n\">queryName</span> <span class=\"o\">=</span> <span class=\"s\">&quot;foo&quot;</span><span class=\"p\">)</span>\n  <span class=\"kd\">public</span> <span class=\"n\">IBundleProvider</span> <span class=\"nf\">patientSearch</span><span class=\"p\">(</span><span class=\"nd\">@OptionalParam</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">&quot;bar&quot;</span><span class=\"p\">)</span> <span class=\"n\">StringOrListParam</span> <span class=\"n\">bars</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This works, but it requires me to have an annotated method for every resource type:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"nd\">@Search</span><span class=\"p\">(</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">Patient</span><span class=\"p\">.</span><span class=\"na\">class</span><span class=\"p\">,</span> <span class=\"n\">queryName</span> <span class=\"o\">=</span> <span class=\"s\">&quot;foo&quot;</span><span class=\"p\">)</span>\n  <span class=\"kd\">public</span> <span class=\"n\">IBundleProvider</span> <span class=\"nf\">patientSearch</span><span class=\"p\">(</span><span class=\"nd\">@OptionalParam</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">&quot;bar&quot;</span><span class=\"p\">)</span> <span class=\"n\">StringOrListParam</span> <span class=\"n\">bars</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nd\">@Search</span><span class=\"p\">(</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">DiagnosticReport</span><span class=\"p\">.</span><span class=\"na\">class</span><span class=\"p\">,</span> <span class=\"n\">queryName</span> <span class=\"o\">=</span> <span class=\"s\">&quot;foo&quot;</span><span class=\"p\">)</span>\n  <span class=\"kd\">public</span> <span class=\"n\">IBundleProvider</span> <span class=\"nf\">reportSearch</span><span class=\"p\">(</span><span class=\"nd\">@OptionalParam</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">&quot;bar&quot;</span><span class=\"p\">)</span> <span class=\"n\">StringOrListParam</span> <span class=\"n\">bars</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">...</span>\n</pre></div>\n\n\n<p>Is there a way to define a named parameter across all resource types that allows me to receive the resource type at runtime and handle that myself? Do I have to generate code to implement this?</p>\n<p>BTW, I also tried interceptors... but it seems to bomb out somewhere between <code>SERVER_INCOMING_REQUEST_POST_PROCESSED</code> and <code>SERVER_INCOMING_REQUEST_PRE_HANDLED</code>, which makes it difficult to get at both the search parameter and resource type information.</p>",
        "id": 188964117,
        "sender_full_name": "John Grimes",
        "timestamp": 1582577119
    },
    {
        "content": "<p>With the help of <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> I figured out a nice way of doing this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SearchProvider</span><span class=\"o\">&lt;</span><span class=\"n\">T</span> <span class=\"kd\">extends</span> <span class=\"n\">IBaseResource</span><span class=\"o\">&gt;</span> <span class=\"kd\">implements</span> <span class=\"n\">IResourceProvider</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">Class</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">resourceType</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">public</span> <span class=\"nf\">SearchProvider</span><span class=\"p\">(</span><span class=\"n\">Class</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">resourceType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"na\">resourceType</span> <span class=\"o\">=</span> <span class=\"n\">resourceType</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nd\">@Override</span>\n  <span class=\"kd\">public</span> <span class=\"n\">Class</span><span class=\"o\">&lt;?</span> <span class=\"kd\">extends</span> <span class=\"n\">IBaseResource</span><span class=\"o\">&gt;</span> <span class=\"nf\">getResourceType</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">resourceType</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nd\">@Search</span><span class=\"p\">(</span><span class=\"n\">queryName</span> <span class=\"o\">=</span> <span class=\"s\">&quot;foo&quot;</span><span class=\"p\">)</span>\n  <span class=\"kd\">public</span> <span class=\"n\">IBundleProvider</span> <span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"nd\">@OptionalParam</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">&quot;bar&quot;</span><span class=\"p\">)</span> <span class=\"n\">StringOrListParam</span> <span class=\"n\">bars</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Then just register one for each resource type, using the built-in enum within HAPI:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">ResourceType</span> <span class=\"n\">resourceType</span> <span class=\"p\">:</span> <span class=\"n\">ResourceType</span><span class=\"p\">.</span><span class=\"na\">values</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n  <span class=\"n\">Class</span><span class=\"o\">&lt;?</span> <span class=\"kd\">extends</span> <span class=\"n\">IBaseResource</span><span class=\"o\">&gt;</span> <span class=\"n\">resourceTypeClass</span> <span class=\"o\">=</span> <span class=\"n\">getFhirContext</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"na\">getResourceDefinition</span><span class=\"p\">(</span><span class=\"n\">resourceType</span><span class=\"p\">.</span><span class=\"na\">name</span><span class=\"p\">()).</span><span class=\"na\">getImplementingClass</span><span class=\"p\">();</span>\n  <span class=\"n\">registerProvider</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">SearchProvider</span><span class=\"p\">(</span><span class=\"n\">resourceTypeClass</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 189190366,
        "sender_full_name": "John Grimes",
        "timestamp": 1582785043
    }
]