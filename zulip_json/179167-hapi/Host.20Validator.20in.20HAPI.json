[
    {
        "content": "<p>The new Validator I'm just releasing raises a couple of issues for those people hosting it in HAPI</p>",
        "id": 185875545,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579219516
    },
    {
        "content": "<p>firstly, the validator will now consistently hunt down and validate resources that are referred to. if you implement IValidatorResourceFetcher, be aware that this will just keep hunting references and crawl through your resource web much more consistently than before, until you return false for resolveURL, or until it runs out of references to follow. </p>\n<p>I'm considering putting some depth limit on the engine as a configurable setting, but I don't know if I need to. Is this going to be a problem for anyone (note that the issue isn't new, but due to a number of bugs, the validator was inconsistent in following the references, so it may not have been as much of a problem)</p>",
        "id": 185875752,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579219689
    },
    {
        "content": "<p>secondly, the validator now caches the results returned from IValidatorResourceFetcher. Quite aggressively. If this turns into a resource hog, we can look at whether it should be quite so aggresive - but there's several obscure but real bugs that can occur if the responses to IValidatorResourceFetcher aren't consistent</p>",
        "id": 185875811,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579219774
    },
    {
        "content": "<p>there's also a new api IValidationProfileUsageTracker that allows you to track the usage of structure definitions down inside the validator if you want to do stuff like that</p>",
        "id": 185875894,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579219828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <br>\nQuestion 1) Is type check of References using targetProfile's base type still not included? (if not, I will raise a PR that does it)<br>\nQuestion 2) Could depth be an argument to <code>Element fetch(Object appContext, String url)</code> or where do you intend to put it<br>\nQuestion 3 - this is more of a consideration) I my setup we rely on validation split into to phases. First phase is to run the validator using regular handles in HAPI in an interceptor (this is where I want type checking). Only if this step passes, we go on to resolve all external references. I imagine this split has a small performance penalty, but the design is simple and easy to understand. I do hope you provide some feature toggles that allow us to continue the way we do it now, before we should consider to merge the two validation phases into one, using only the new Validator and our custom implementation of IValidatorResourceFetcher.</p>",
        "id": 185899037,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579252590
    },
    {
        "content": "<p>1) - I'm not sure - be specific. What gets checked depends on what you return in validationPolicy (nothing, type, exist, everything)</p>\n<p>2). maybe. I'll about how I'd track that</p>\n<p>3) I'm not sure how you have that set up, but I'm not changing the API around this, so it shouldn't stop you from doing that. I'm just alerting people that the behaviour is going to change across the API</p>",
        "id": 185904035,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579257475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> - Please have a look at <a href=\"https://github.com/jvitrifork/fhirReferenceCheck\" target=\"_blank\" title=\"https://github.com/jvitrifork/fhirReferenceCheck\">https://github.com/jvitrifork/fhirReferenceCheck</a>. It illustrates both problems and solutions ;)</p>",
        "id": 186012412,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579382689
    },
    {
        "content": "<p>I don't see why removing checking the type is a good way forward. Please explain your logic</p>",
        "id": 186012622,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579383107
    },
    {
        "content": "<p>and if you have tests to submit, why not submit them to fhir-test-cases?</p>",
        "id": 186012672,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579383162
    },
    {
        "content": "<p>if you debug it, you'll see that the type of the reference is always null</p>",
        "id": 186012807,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579383468
    },
    {
        "content": "<p>you're referring to the test on 1923?</p>",
        "id": 186012868,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579383572
    },
    {
        "content": "<p>yep</p>",
        "id": 186012871,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579383594
    },
    {
        "content": "<p>so because you're not setting reference.type, you don't think anyone else should?</p>",
        "id": 186012915,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579383626
    },
    {
        "content": "<p>I interact with the validator indirectly - through the use of the HAPI classes. If type should be set, I would expect it to happen through those classes then</p>",
        "id": 186012977,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579383729
    },
    {
        "content": "<p>Could you tell me how  to set the type through the use of the HAPI classes then?</p>",
        "id": 186012991,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579383782
    },
    {
        "content": "<p>only using the handles provided in the unit test</p>",
        "id": 186012998,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579383795
    },
    {
        "content": "<blockquote>\n<p>so because you're not setting reference.type, you don't think anyone else should?</p>\n</blockquote>\n<p>If im not mistaken - my use represents an ordinary use of the validator using HAPI, so its actually not just me - I suspect this is way all HAPI users use it</p>",
        "id": 186013046,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579383885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> but of course I could be wrong. Please correct me in any false assumptions here</p>",
        "id": 186013122,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579384042
    },
    {
        "content": "<p>reference.type is <a href=\"http://hl7.org/fhir/references-definitions.html#Reference.type\" target=\"_blank\" title=\"http://hl7.org/fhir/references-definitions.html#Reference.type\">http://hl7.org/fhir/references-definitions.html#Reference.type</a> - so you would set that by your normal use of the HAPI model classes, or in json or xml etc. I'm not sure what you're saying here</p>",
        "id": 186013141,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579384082
    },
    {
        "content": "<p>I can't see how I can set the type using <a href=\"https://hapifhir.io/hapi-fhir/apidocs/hapi-fhir-structures-dstu3/org/hl7/fhir/dstu3/model/Reference.html\" target=\"_blank\" title=\"https://hapifhir.io/hapi-fhir/apidocs/hapi-fhir-structures-dstu3/org/hl7/fhir/dstu3/model/Reference.html\">https://hapifhir.io/hapi-fhir/apidocs/hapi-fhir-structures-dstu3/org/hl7/fhir/dstu3/model/Reference.html</a></p>",
        "id": 186013479,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579384712
    },
    {
        "content": "<p>it was only introduced in R4</p>",
        "id": 186013481,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579384730
    },
    {
        "content": "<p>so my tests are running on dstu3</p>",
        "id": 186013490,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579384753
    },
    {
        "content": "<p>so?</p>",
        "id": 186013493,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579384763
    },
    {
        "content": "<p>so don't run the type check the same way in dstu3 as in R4 or newer</p>",
        "id": 186013553,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579384850
    },
    {
        "content": "<p>so in DSTU3, type will always be null, so it will never run.</p>",
        "id": 186013564,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579384877
    },
    {
        "content": "<p>the lines 1923 to 1942 were removed because I could see they were never used ... that part makes sense now</p>",
        "id": 186013888,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579385483
    },
    {
        "content": "<p>now, for test case validateReferenceAggregationMode_ContainedOrReferenced_withReferenced:</p>",
        "id": 186013958,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579385576
    },
    {
        "content": "<p>Element <code>we</code> gets assigned the value of null</p>",
        "id": 186013980,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579385640
    },
    {
        "content": "<p>line 1892</p>",
        "id": 186014020,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579385652
    },
    {
        "content": "<p>ok?</p>",
        "id": 186014044,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579385727
    },
    {
        "content": "<p>so the entire block from 1945 by default ends up not being run</p>",
        "id": 186014045,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579385736
    },
    {
        "content": "<p>that block actually does the validation part as wanted</p>",
        "id": 186014090,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579385776
    },
    {
        "content": "<p>(I have little idea about what <code>we</code>is)</p>",
        "id": 186014094,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579385793
    },
    {
        "content": "<p>the same null check (which is redundant on <code>we</code>) comes again in 1964</p>",
        "id": 186014111,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579385857
    },
    {
        "content": "<p>The policy (<code>pol</code>) seems to be controllable by the <code>fetcher</code>- I just haven't found a nice way to assign the fetcher using the briding code from HAPI</p>",
        "id": 186014212,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579386011
    },
    {
        "content": "<p>so since <code>we</code> is null and I cannot control the policy (by using the fetcher) I need to disable line 1944</p>",
        "id": 186014226,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579386076
    },
    {
        "content": "<p>same goes for 1964</p>",
        "id": 186014231,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579386096
    },
    {
        "content": "<p>and if <code>we</code>is null, then I hit the case from line 2019 and to 2035 - ending in getting an error that says \"Bundled or contained reference not found within the bundle/resource \"</p>",
        "id": 186014374,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579386421
    },
    {
        "content": "<p>which makes little sense to me</p>",
        "id": 186014380,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579386439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> so ... am I on to something?</p>",
        "id": 186014488,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579386626
    },
    {
        "content": "<p>(<a href=\"https://github.com/FHIR/fhir-test-cases\" target=\"_blank\" title=\"https://github.com/FHIR/fhir-test-cases\">https://github.com/FHIR/fhir-test-cases</a> explicitly mentions \"no java code here\")  - I would have a harder time presenting this finding not using unit tests code and class shadowing</p>",
        "id": 186014551,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579386829
    },
    {
        "content": "<p>I’m on the road so I’ll look later but you have to be able to set the fetcher - it’s critical. So that’s a HAPI issue</p>",
        "id": 186015661,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579388862
    },
    {
        "content": "<p>As for tests... sounds like you have a problem with how the validator is hosted in HAPI, not with the actual validation itself.  I won’t make fixes the validator unless the problem is related to the actual spec, with test cases</p>",
        "id": 186015709,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579388902
    },
    {
        "content": "<p>There are test cases around the hosting in HAPI...</p>",
        "id": 186015715,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579388911
    },
    {
        "content": "<p>the <code>we</code>being null and the block removed in 2019-2035 is not related to HAPI -</p>",
        "id": 186015786,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579389012
    },
    {
        "content": "<p>the double null check on <code>we</code>is not related to HAPI</p>",
        "id": 186015795,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579389033
    },
    {
        "content": "<p>and if the fetcher is actually accessible and letting me set the policy, then I'm eager to know what is going to happen here: <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n<div class=\"codehilite\"><pre><span></span>if (pol == ReferenceValidationPolicy.CHECK_VALID) {\n      // todo....\n    }\n</pre></div>",
        "id": 186015932,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579389356
    },
    {
        "content": "<p>so am I</p>",
        "id": 186026877,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579412654
    },
    {
        "content": "<p>I'm not sure what your point is on the other things</p>",
        "id": 186026879,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579412689
    },
    {
        "content": "<blockquote>\n<p>I won’t make fixes the validator unless the problem is related to the actual spec, with test cases</p>\n</blockquote>\n<p>those other points AFAIK are related to pure code, not spec</p>",
        "id": 186028013,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579415206
    },
    {
        "content": "<p>I'm still not sure what your issue is other than not having access to fetch</p>",
        "id": 186029548,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579418456
    },
    {
        "content": "<p>we != Null is checked twice</p>",
        "id": 186036334,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579432425
    },
    {
        "content": "<p>this is a logic problem?</p>",
        "id": 186051283,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579460671
    },
    {
        "content": "<p>no</p>",
        "id": 186052476,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579462979
    },
    {
        "content": "<p>I believe you are correct in your observation regarding the access to assigning the fetcher</p>",
        "id": 186052489,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579463020
    },
    {
        "content": "<p>Now I know at least one of the reasons why you ended up adding type to Reference ;) awesome</p>",
        "id": 186286878,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579700450
    },
    {
        "content": "<p>(I was just about to make a distinct FHIRpath expression selecting on type on reference in STU3 - which is sort of not possible )</p>",
        "id": 186287331,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579700782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> will you be talking to James about access to the fetcher through the current bridging classes or will it be up one self?</p>",
        "id": 186287431,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1579700867
    },
    {
        "content": "<p>You, I think</p>",
        "id": 186319984,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579720413
    },
    {
        "content": "<p>for future reference and so others can follow: <a href=\"https://github.com/jamesagnew/hapi-fhir/pull/1691\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/pull/1691\">https://github.com/jamesagnew/hapi-fhir/pull/1691</a></p>",
        "id": 186963645,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1580373152
    }
]