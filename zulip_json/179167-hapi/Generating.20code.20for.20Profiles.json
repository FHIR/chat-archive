[
    {
        "content": "<p>So this is a kind of FAQ and I'd like to see if I can progress this. A lot of people would like to see generated code for profiles.</p>",
        "id": 201089621,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1592353200
    },
    {
        "content": "<p>A first time knee jerk reaction is to think that you would generate a class model like we do for the base resources.</p>",
        "id": 201089676,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1592353227
    },
    {
        "content": "<p>but that's not the case. A resource may conform to multiple profiles, and it may or may not indicate that it does, and you may know that it does even though it doesn't claim to. And you may have code for various profiles, and the base resource - it's all the same information whatever</p>",
        "id": 201089720,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1592353289
    },
    {
        "content": "<p>so I've always thought a profile is a view onto a resource - that is, a set of generated classes that are a facade to the base resource. So something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ProfileName</span> <span class=\"p\">{</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">ProfileName</span> <span class=\"nf\">wrap</span><span class=\"p\">(</span><span class=\"o\">[</span><span class=\"n\">RT</span><span class=\"o\">]</span> <span class=\"n\">object</span><span class=\"p\">,</span> <span class=\"n\">IWorkerContext</span> <span class=\"n\">context</span><span class=\"p\">);</span>\n  <span class=\"kd\">public</span> <span class=\"o\">[</span><span class=\"n\">RT</span><span class=\"o\">]</span> <span class=\"nf\">wrapped</span><span class=\"p\">();</span>\n\n  <span class=\"kd\">public</span> <span class=\"n\">Coding</span> <span class=\"nf\">getRace</span><span class=\"p\">();</span>\n  <span class=\"kd\">public</span> <span class=\"n\">ProfileName</span> <span class=\"nf\">setRace</span><span class=\"p\">(</span><span class=\"n\">Coding</span> <span class=\"n\">code</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>[RT] is the base resource type. </p>\n<p>where the generated code would:</p>\n<ul>\n<li>have generated accessors that access the wrapped class for all existing properties</li>\n<li>the generated accessors have reduced cardinality if the profile does (e.g. 1..* --&gt; 1..1)</li>\n<li>the type would be reduced as per the </li>\n<li>the access is also generated based on ElementDefinition.alias?</li>\n<li>There would be accessors for named slices</li>\n</ul>\n<p>Note that the generated classes will need access to the context because there's quite a lot of magic behind the scenes to do with discriminators</p>",
        "id": 201090139,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1592353745
    },
    {
        "content": "<p>I have several questions</p>\n<ul>\n<li>should the generated code handle non-conformance in the base resource by blowing up? or by ignoring the content that is not conformant?</li>\n<li>what would the package name be? is that somehow auto-generated or purely config?</li>\n<li>how performant does it need to be? I think that the answer is: as fast as possible while being truly conformant. </li>\n<li>But there's some corner cases where a terminology service is needed. That's the opposite of performant... not sure what to do there</li>\n</ul>",
        "id": 201090340,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1592353914
    },
    {
        "content": "<ul>\n<li>should the name be versioned? Or the package? Or is that delegated to configuration for the generator?</li>\n</ul>",
        "id": 201090390,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1592353952
    },
    {
        "content": "<ul>\n<li>is it better to generate one single large class with inner nested classes for each profile, or should it be a package for each profile?</li>\n</ul>",
        "id": 201090407,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1592353994
    },
    {
        "content": "<p>This is more or less what I blogged about (for the dotnet usage in the same way - though we'd use extension methods)<br>\n<a href=\"https://brianpos.com/2018/05/03/code-generation-fhir-custom-resources/\">https://brianpos.com/2018/05/03/code-generation-fhir-custom-resources/</a><br>\nAs for what level to generate, I think that is probably something you'd have in configuration to the generator.<br>\nSometimes you might want to generate the entire package's profiles, other times just the one.<br>\nVersioning, hadn't thought about at all - the dotnet libs use the same namespace for all versions, and have a trick to be able to use multiple at the same time.</p>",
        "id": 201227492,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1592455106
    }
]