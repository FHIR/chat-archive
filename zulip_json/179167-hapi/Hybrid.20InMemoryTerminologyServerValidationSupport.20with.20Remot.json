[
    {
        "content": "<p>In our validator we are primarily using the InMemoryTerminologyServerValidationSupport class but for SNOMED and other large codesystems we want to pass that to a Terminology Server.</p>\n<p>At present I've created an extension InMemoryTerminologyServerValidationSupport with parts of RemoteTerminologyServiceValidationSupport</p>\n<p>So if the codeSystem is SNOMED it is sent to the  validation is sent in, it uses code from RemoteTerminologyServiceValidationSupport  </p>\n<p><a href=\"https://github.com/NHSDigital/validation-service-fhir-r4/blob/feature/terminologyServer/src/main/kotlin/com/example/fhirvalidator/shared/TerminologyValidationSupport.java\">https://github.com/NHSDigital/validation-service-fhir-r4/blob/feature/terminologyServer/src/main/kotlin/com/example/fhirvalidator/shared/TerminologyValidationSupport.java</a></p>\n<p>Is this the right way to do this? <br>\nI've not missed a different approach.</p>",
        "id": 260506001,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1636195142
    },
    {
        "content": "<p>That's a decent approach.</p>",
        "id": 260537341,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1636234499
    },
    {
        "content": "<p>We have something similar in our server where it uses the local TS implementation, and if it doesn't know about the valueaet/codesystem calls out to a remote system if configured.</p>",
        "id": 260537421,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1636234584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191687\">@Kevin Mayfield</span> i think you also could just add both terminology services to the validation chain. The Chain will then try to pick the validation service capable of this VS/CS</p>",
        "id": 260649711,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1636374354
    },
    {
        "content": "<p>I'll have another look. I think the InMemory validation was rejecting resources the RemoteValidation could handle (It had the ValueSet but not CodeSystem?)</p>",
        "id": 260652885,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1636376323
    },
    {
        "content": "<p>We're back with two classes. </p>\n<p>Roughly the problem we have is </p>\n<p>We have ValueSets in the the validator which reference external CodeSystems (in a remote terminology server)</p>\n<p>So we are overriding validateCodeInValueSet in  InMemoryTerminologyServerValidationSupport to disable validation of these valuesets (if the codesystem is on a terminology server)<br>\nAlso overriding validateCode in RemoteTerminologyServiceValidationSupport to use the validator ValueSet (not the one on the remote terminology server).</p>\n<p>Wondering if their is a better way of doing this\\?</p>",
        "id": 261891555,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1637217845
    },
    {
        "content": "<p>to do what exactly?</p>",
        "id": 261921564,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1637239326
    },
    {
        "content": "<p>Personally I'd do the following: Create your own class that extends RemoteTerminologyServiceValidationSupport and put it at the very top of the chain, but also put InMemory farther down the chain.</p>\n<p>In your extended class, override the validateCode methods so that they return null when the system is not one you want handed by the remote service. When a validateCode method returns null the chain moves on to the next item in the chain.</p>",
        "id": 261969244,
        "sender_full_name": "James Agnew",
        "timestamp": 1637260136
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> </p>\n<p>It does look like that would nearly work. I think we may be suggesting changing this </p>\n<p>protected CodeValidationResult invokeRemoteValidateCode<br>\n(<a href=\"https://github.com/hapifhir/hapi-fhir/blob/92e98592724afcbb4476ecb7eefb7d3915cf21b0/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/RemoteTerminologyServiceValidationSupport.java#L182\">https://github.com/hapifhir/hapi-fhir/blob/92e98592724afcbb4476ecb7eefb7d3915cf21b0/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/RemoteTerminologyServiceValidationSupport.java#L182</a>)</p>\n<p>So it is accessible in our override methods for validateCode and validateCodeInValuSet <br>\n(we want to pass a ValueSet to the terminology server not a valueSet.url as we want to use our definition not the terminology servers definition)</p>",
        "id": 262043202,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1637313301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191687\">@Kevin Mayfield</span> I believe it would be very valuable to the community to have an exmaple hybrid validation support module as part of the HAPI FHIR starter project as it is common to have the large codesystems like LOINC and SNOMED placed on an already existing terminology server (<span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span>  / <span class=\"user-mention\" data-user-id=\"191478\">@Oliver Egger</span> don't you guys agree?). Would you care to draft a PR to the starter project that enables this feature?</p>",
        "id": 266912970,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1641374462
    },
    {
        "content": "<p>yep willing to contribute.</p>",
        "id": 266916951,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1641377192
    },
    {
        "content": "<p>i agree. Ideally configurable through the application.yaml</p>",
        "id": 267052645,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1641470199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191687\">@Kevin Mayfield</span> any progress on the contribution?</p>",
        "id": 270086683,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1643655924
    },
    {
        "content": "<p>I'm still working on getting suport/permission.</p>",
        "id": 270174441,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1643707099
    },
    {
        "content": "<p>How well does this work when the ValueSet in question includes codes from both local and remote code systems?</p>",
        "id": 270328600,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1643772854
    },
    {
        "content": "<p>That 'can' be considered a case not supported</p>",
        "id": 270343306,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1643785988
    }
]