[
    {
        "content": "<p>I'm looking to override a Resource Provider in a HAPI JPA server (customising search, but leaving the JPA/DAO storage backing intact). Is this possible/how do I do this? I've tried defining a new ResourceProvider that delegates to the original tinder-generated DAO-backed provider, but I end up with NPEs because of non-existent DAOs</p>",
        "id": 153855692,
        "sender_full_name": "Jim Steel",
        "timestamp": 1478485128
    },
    {
        "content": "<p>We've done this a fair bit internally actually.. Easiest way is to subclass the tinder-generated RP and add your own stuff to it.</p>\n<p>One way or the other, it should work though. What kind of NPEs are you getting? Are you still using Spring to create the instance of your new RP?</p>",
        "id": 153855695,
        "sender_full_name": "James Agnew",
        "timestamp": 1478487568
    },
    {
        "content": "<p>Initially I tried that, but I had problems with it \"No qualifying bean of type [ca.uhn.fhir.jpa.demo.provider.MedicationResourceProvider] is defined\"</p>",
        "id": 153855697,
        "sender_full_name": "Jim Steel",
        "timestamp": 1478488341
    },
    {
        "content": "<p>so I had reverted to just instantiating it (which could be causing more problems that it solves)</p>",
        "id": 153855698,
        "sender_full_name": "Jim Steel",
        "timestamp": 1478488364
    },
    {
        "content": "<p>Now that think about it, it's the DAOs that are more important to create with Spring. The RPs only have one dependency: the corresponding DAO.</p>\n<p>Were you actually passing a reference to the DAO to your manually created RP? If so, what is the stacktrace of the error?</p>",
        "id": 153855701,
        "sender_full_name": "James Agnew",
        "timestamp": 1478489203
    },
    {
        "content": "<p>No.</p>",
        "id": 153855702,
        "sender_full_name": "Jim Steel",
        "timestamp": 1478489242
    },
    {
        "content": "<p>Oh yeah it definitely won't work without that.. Just grab it from the spring context and pass it in</p>",
        "id": 153855704,
        "sender_full_name": "James Agnew",
        "timestamp": 1478489295
    },
    {
        "content": "<p>I tried 2 things. 1: MyRP extends BaseRP, overrides search and delegates to the BaseRP.search<br>\n2: MyRP autowires BaseRP, implements search and delegates to the autowired baseRP</p>",
        "id": 153855705,
        "sender_full_name": "Jim Steel",
        "timestamp": 1478489314
    },
    {
        "content": "<p>Not surprising that the first doesn't work, now I think about it</p>",
        "id": 153855706,
        "sender_full_name": "Jim Steel",
        "timestamp": 1478489345
    },
    {
        "content": "<p>#1 sounds like the approach we've used..</p>",
        "id": 153855707,
        "sender_full_name": "James Agnew",
        "timestamp": 1478489354
    },
    {
        "content": "<p>but it 100% won't work if you don't give it a dao since that's where basically every method goes</p>",
        "id": 153855708,
        "sender_full_name": "James Agnew",
        "timestamp": 1478489398
    },
    {
        "content": "<p>Hmm, still struggling to find how to do that.</p>",
        "id": 153855710,
        "sender_full_name": "Jim Steel",
        "timestamp": 1478494722
    },
    {
        "content": "<p>Do I need to register my provider with the web.xml or something?</p>",
        "id": 153855711,
        "sender_full_name": "Jim Steel",
        "timestamp": 1478496638
    },
    {
        "content": "<p>Assuming you're basing your work on the <code>hapi-fhir-jpaserver-example</code> project, one way would be to do it in the RestulServer class in the initialize method, i.e. <a href=\"https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-jpaserver-example/src/main/java/ca/uhn/fhir/jpa/demo/JpaServerDemo.java#L42\" target=\"_blank\" title=\"https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-jpaserver-example/src/main/java/ca/uhn/fhir/jpa/demo/JpaServerDemo.java#L42\">here</a></p>\n<p>In there you could do a call like:</p>\n<div class=\"codehilite\"><pre>dao = myAppCtx.getBean(&quot;myPatientDaoDstu3&quot;, IFhirResourceDao.class);\n</pre></div>",
        "id": 153855733,
        "sender_full_name": "James Agnew",
        "timestamp": 1478518750
    }
]