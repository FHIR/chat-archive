[
    {
        "content": "<p>In the updated HAPI terminology support, does the <code>$validate</code> operation know how to determine whether a code does-not-exist in a system (e.g. if instance data claims to use \"loinc 123-bad-fake-code\"?</p>",
        "id": 153837992,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1468424624
    },
    {
        "content": "<p>Yup, $validate should be able to reject codes that are in any code system it knows about (including ones which have been uploaded to the server via a CodeSystem resource, and ones which are external such as LOINC/SCT)</p>",
        "id": 153837993,
        "sender_full_name": "James Agnew",
        "timestamp": 1468424772
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 153837994,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1468424843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> - looking at a mustifying line in ValueSetExpanderSimple, and  wondering whether it's yours, cause I don't remember it, and it doesn't make sense to me</p>",
        "id": 153839892,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468973414
    },
    {
        "content": "<p>} else if (\"display\".equals(fc.getProperty()) &amp;&amp; fc.getOp() == FilterOperator.EQUAL) {</p>",
        "id": 153839893,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468973427
    },
    {
        "content": "<p>what follows that. Here's my comment I just added:</p>",
        "id": 153839894,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468973440
    },
    {
        "content": "<p>// gg; note: wtf is this if the filter is display=v, look up the code 'v', and see if it's diplsay is 'v'?</p>",
        "id": 153839895,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468973449
    },
    {
        "content": "<p>hmmm.... you're right, that does not make sense at all. It's supposed to be a filter on the display property, but obviously that's not going to work right!</p>\n<p>let's see why my unit test isn't failing that...</p>",
        "id": 153839913,
        "sender_full_name": "James Agnew",
        "timestamp": 1468977549
    },
    {
        "content": "<p>wouldn't want a regex here - all codes with display properties that meet a regex? </p>",
        "id": 153839915,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468977939
    },
    {
        "content": "<p>p.s. how do you feel about breaking changes to the iWorkerContext interface?</p>",
        "id": 153839916,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468977976
    },
    {
        "content": "<p>That would probably be useful as well, but the intent here is to supply the EQUAL one since that's supported in my lucene equivalent and I'm trying to have ValueSetExpanderSimple support all of the same stuff I can do in Lucene for external CodeSystems.  I'll add a regex equivalent as I fix this though, that would be useful I'd agree.</p>",
        "id": 153839917,
        "sender_full_name": "James Agnew",
        "timestamp": 1468978082
    },
    {
        "content": "<p>I'm sure that would be fine- I treat that interface as internal so I'm not fussy about it changing between versions as long as I have a way of implemeting its methods</p>",
        "id": 153839918,
        "sender_full_name": "James Agnew",
        "timestamp": 1468978147
    },
    {
        "content": "<p>ok. I'm making the expand methods have an explicit heirachical parameter</p>",
        "id": 153839919,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468978214
    },
    {
        "content": "<p>default would be false</p>",
        "id": 153839920,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468978224
    },
    {
        "content": "<p>- preserves current behviour</p>",
        "id": 153839921,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468978234
    },
    {
        "content": "<p>and true requests that the expander return hierarchies instead of the current flat list?</p>",
        "id": 153839922,
        "sender_full_name": "James Agnew",
        "timestamp": 1468978281
    },
    {
        "content": "<p>yes, in the expansion.contains, it it can figure out how to </p>",
        "id": 153839923,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468978309
    },
    {
        "content": "<p>my first round, there's some cases where I could figure out how to that I haven't tried to yet, but there's ones where I am</p>",
        "id": 153839924,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468978332
    },
    {
        "content": "<p>neat, yeah that sounds like a useful change.</p>\n<p>are you working on this now? obviously this will affect ValueSetExpander so I'll wait until you're done before fixing the display thing if so</p>",
        "id": 153839925,
        "sender_full_name": "James Agnew",
        "timestamp": 1468978408
    },
    {
        "content": "<p>yes. I'll let you know when I commit</p>",
        "id": 153839926,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468978426
    },
    {
        "content": "<p>cool</p>",
        "id": 153839927,
        "sender_full_name": "James Agnew",
        "timestamp": 1468978463
    },
    {
        "content": "<p>basically, if you have only one include, and you include a whole code system, or you include all children of one code, then I'll make it a heiarchy. Else it won't be</p>",
        "id": 153839928,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468978474
    },
    {
        "content": "<p>going to commit shortly. This commit will move some elements from code to an enumeration -I picked up a set of elements that weren't getting coded properly</p>",
        "id": 153839943,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468992820
    }
]