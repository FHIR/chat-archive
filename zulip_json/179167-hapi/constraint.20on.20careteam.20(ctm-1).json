[
    {
        "content": "<p>Either there's something I don't get or there's a bug somewhere (it might even be both).<br>\nWhen posting the following (and the referenced resources do exist):</p>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;resourceType&quot;: &quot;CareTeam&quot;,\n  &quot;participant&quot;: [\n    {\n      &quot;member&quot;: {\n        &quot;reference&quot;: &quot;Practitioner/1&quot;\n      },\n\n      &quot;onBehalfOf&quot;: {\n        &quot;reference&quot;: &quot;Organization/2&quot;\n      }\n    }\n  ]\n}\n</pre></div>\n\n\n<ul>\n<li>the validator component keeps stating \"CareTeam.participant.onBehalfOf can only be populated when CareTeam.participant.member is a Practitioner [onBehalfOf.exists() implies (member.resolve() is Practitioner)]\" - which is the constraint ctm-1. I just can't seem to understand why? Funny thing is that seems not to be a problem if I first create the participant, and then afterwards update the participant to be onBehalfOf.</li>\n</ul>",
        "id": 175862349,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568676356
    },
    {
        "content": "<p>Are you able to replicate this on our public server?</p>",
        "id": 175864902,
        "sender_full_name": "James Agnew",
        "timestamp": 1568679068
    },
    {
        "content": "<p>which FHIR version is this?</p>",
        "id": 175865154,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568679399
    },
    {
        "content": "<p>ok so I looked into this. It's an interesting constraint - if the validator cannot resolve member, then the constraint fails.</p>",
        "id": 175871354,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568688436
    },
    {
        "content": "<p>I think that this is not right, and probably not what PA meant (<span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> <span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span> ) so I think that this should be fixed as a technical correction to:</p>",
        "id": 175871372,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568688480
    },
    {
        "content": "<p><code>onBehalfOf.exists() implies (member.resolve().empty() | member.resolve() is Practitioner)</code></p>",
        "id": 175871420,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568688515
    },
    {
        "content": "<p>I agree, however that's a Patient Care resource, <span class=\"user-mention\" data-user-id=\"191403\">@Michelle (Moseman) Miller</span></p>",
        "id": 175872352,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1568690152
    },
    {
        "content": "<p>oops</p>",
        "id": 175874223,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568693329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> - I tried at your public test server and it doesn't fail. Could it be that it runs with a config that resembles the one from the hapi-fhir-starter project - because by default it does not have validation enabled. <a href=\"https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/cc7a56be2047bb323c9126a5d259f18c55763df8/src/main/resources/hapi.properties#L45\" target=\"_blank\" title=\"https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/cc7a56be2047bb323c9126a5d259f18c55763df8/src/main/resources/hapi.properties#L45\">https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/cc7a56be2047bb323c9126a5d259f18c55763df8/src/main/resources/hapi.properties#L45</a></p>",
        "id": 175879831,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568701808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> if this is my chance to learn some fhirpath, could you explain why it currently does fail? does the \"member.resolve\"-part expect that member is contained within the resource? You added tthe member.resolve().empty(), but member is a reference and not empty.</p>",
        "id": 175879981,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568702059
    },
    {
        "content": "<p>resolve() hunts down the resource from whereever. So this says if there's an onBehalfOf, what the member points to must be a Practitioner. So if resolve() can't find the practitioner, that won't be true, and the invariant fails. </p>\n<p>member.resolve().empty() would be true if resolve() didn't work</p>",
        "id": 175889371,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568712311
    },
    {
        "content": "<p>so how should resolve() actually be implemented in this case? The member is a \"reference\": \"Practitioner/1\" - which pretty clearly is a relative reference with the type embedded in the reference. Shouldn't this be sufficient enough?</p>",
        "id": 175891253,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568714138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  on a side note, when can the org.hl7.fhir.core be expected contain this fix?</p>",
        "id": 175891370,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568714231
    },
    {
        "content": "<p>contain what fix?</p>",
        "id": 175891480,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568714333
    },
    {
        "content": "<p>the technical correction</p>",
        "id": 175891498,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568714351
    },
    {
        "content": "<blockquote>\n<p>The member is a \"reference\": \"Practitioner/1\" - which pretty clearly is a relative reference with the type embedded in the reference</p>\n</blockquote>\n<p>well, it's intuitively obvious, but it's not actually clear.</p>",
        "id": 175891507,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568714362
    },
    {
        "content": "<p>I had an idea that <a href=\"https://www.hl7.org/fhir/references.html#literal\" target=\"_blank\" title=\"https://www.hl7.org/fhir/references.html#literal\">https://www.hl7.org/fhir/references.html#literal</a> sort of stated that</p>",
        "id": 175891741,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568714555
    },
    {
        "content": "<p>right. it's only sort of</p>",
        "id": 175891770,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568714599
    },
    {
        "content": "<p>But then again - I can't seem to find a place that says that relative references are required to contain a valid type prefix</p>",
        "id": 175891776,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568714609
    },
    {
        "content": "<p>y</p>",
        "id": 175891778,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568714615
    },
    {
        "content": "<p>shouldn't that be part of the spec?</p>",
        "id": 175891782,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568714626
    },
    {
        "content": "<p>you think that the spec should say that a FHIR Server cannot reference a resource by a relative URL unless it serves it up using the FHIR Api?</p>",
        "id": 175891863,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568714702
    },
    {
        "content": "<p>no ...</p>",
        "id": 175891888,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568714724
    },
    {
        "content": "<p>so that's why the validator doesn't assume that a relative reference works that way</p>",
        "id": 175891900,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568714746
    },
    {
        "content": "<p>im saying the reference should be valid - I said nothing about how it should be served</p>",
        "id": 175892059,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568714922
    },
    {
        "content": "<p>so it should be valid to reference it that way</p>",
        "id": 175892086,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568714958
    },
    {
        "content": "<p>what is 'valid' in this case? Is it allowed to reference a file on disk like /resources/old-archive/something.xml?</p>",
        "id": 175892092,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568714970
    },
    {
        "content": "<p>i guess the valid part should be to check if the path to the file contained the /resources/old-archive/ part</p>",
        "id": 175892179,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568715054
    },
    {
        "content": "<p>for starters</p>",
        "id": 175892187,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568715071
    },
    {
        "content": "<p>so for instance, if the reference was <code>\"reference\": \"Patient/1\"</code>instead, its not a practitioner ... but this part might not be part of the FhirPath validation part, right?</p>",
        "id": 175892287,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568715179
    },
    {
        "content": "<p>this can be verified at another level</p>",
        "id": 175892295,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568715192
    },
    {
        "content": "<p>before the fhirpath engine gets to it, right</p>",
        "id": 175892305,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568715221
    },
    {
        "content": "<p>I didn't follow all that. So \"/resources/old-archive/something.xml\" is a valid reference. You have to fetch from the url to find out what it is. And that's perfectly valid.</p>\n<p>So then, we never say that if the resource reference looks like [Type]/[id] that it must be of the implied type. I say that in many places in my server implementation because I know that my server doesn't support anything else.</p>\n<p>But the validator can only make that assumption if the standard says it, and it doesn't. Or if it actually fetches from the URL, and checks the type - which is what it tries to do. </p>\n<p>Should the standard say that? Maybe.... it would be a reasonable constraint, but it's very difficult to make it now, given that the normative parts of R4 allow for a reference like [Type]/[id] to reference a resource with a different type than what's implied</p>",
        "id": 175892553,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568715509
    },
    {
        "content": "<p>yikes ... I get that there are now normative parts that are sort of untouchable, and a pity that this is part of it. I actually thought that if resources were served on a RESTful FHIR server, that they had to be served under  [Type]/ (while still allowing for [CustomType]/ - that would however not be part of the FHIR std).</p>",
        "id": 175893254,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568716299
    },
    {
        "content": "<p>REST servers have to work that way. I believe the issue is more that the validator can't make assumptions that it's talking to a rest server, since it works in all kinds of contexts.</p>",
        "id": 175893341,
        "sender_full_name": "James Agnew",
        "timestamp": 1568716368
    },
    {
        "content": "<blockquote>\n<p>Should the standard say that? Maybe.... it would be a reasonable constraint, but it's very difficult to make it now, given that the normative parts of R4 allow for a reference like [Type]/[id] to reference a resource with a different type than what's implied</p>\n</blockquote>\n<p>Should this then be part of a best-practice IG if it cannot be changed in the spec? As you say, its a 'reasonable constraint'</p>",
        "id": 175893344,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568716371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> right, I'm actually a bit puzzled to hear that the validator actually thinks that it is allowed to fetch those resources (using REST?)</p>",
        "id": 175893431,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568716456
    },
    {
        "content": "<p>Put differently: there is no rule that an arbitrary FHIR resource that you got from an arbitrary place has to have references that conform to the FHIR Rest spec</p>",
        "id": 175893446,
        "sender_full_name": "James Agnew",
        "timestamp": 1568716463
    },
    {
        "content": "<p>Well, that's the whole idea here.. <code>resolve()</code> just means \"try to get that target, however you would do it in whatever context you're working in\". The intent of the invariant here is presumably that it wants to not fail if the validator is working in a context where it's not feasible to fetch the target.. but the issue you've found is that this logic isn't working</p>",
        "id": 175893495,
        "sender_full_name": "James Agnew",
        "timestamp": 1568716547
    },
    {
        "content": "<p>the FHIRPath statement is clear: verify that the target is a Practitioner. And by the rules of the spec, that can't be verified unless the resource can actually be fetched</p>",
        "id": 175893569,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568716593
    },
    {
        "content": "<p>can that be fixed? well, under the rules: if <em>everyone</em> agrees</p>",
        "id": 175893586,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568716623
    },
    {
        "content": "<p>might happen with this issue</p>",
        "id": 175893593,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568716629
    },
    {
        "content": "<p>This would require arbitrarily bootstrapping of the validator providing it a context of where it could fetch resources - be that wherever</p>",
        "id": 175893596,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568716632
    },
    {
        "content": "<p>yes, that's how the validator is written</p>",
        "id": 175893597,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568716642
    },
    {
        "content": "<p>I have no recollection of me bootstrapping the validator</p>",
        "id": 175893679,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568716689
    },
    {
        "content": "<blockquote>\n<p>Put differently: there is no rule that an arbitrary FHIR resource that you got from an arbitrary place has to have references that conform to the FHIR Rest spec</p>\n</blockquote>\n<div class=\"message_inline_image\"><a href=\"https://sayingimages.com/wp-content/uploads/grumpy-cat-wait-what-meme.jpg\" target=\"_blank\" title=\"https://sayingimages.com/wp-content/uploads/grumpy-cat-wait-what-meme.jpg\"><img src=\"https://sayingimages.com/wp-content/uploads/grumpy-cat-wait-what-meme.jpg\"></a></div>",
        "id": 175893701,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568716709
    },
    {
        "content": "<p>Jens, how are you using the validator here? ie. running in a HAPI server and using RequestValidatingInterceptor, manually creating a FhirValidator and injecting a FhirInstanceValidator module, using the command line validator, etc?</p>",
        "id": 175893852,
        "sender_full_name": "James Agnew",
        "timestamp": 1568716881
    },
    {
        "content": "<p>ok. moved the dsicussion on the reference issue to the implementers channel.</p>",
        "id": 175894268,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568717224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span>  We're creating a custom FhirValidator and injecting it into the  RequestValidatingInterceptor</p>",
        "id": 175894457,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568717455
    },
    {
        "content": "<p>so, declaring a bean in fhirserverconfig with the name myInstanceValidatorDstu3</p>",
        "id": 175894472,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568717474
    },
    {
        "content": "<p>and extending the FhirInstanceValidator</p>",
        "id": 175894478,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568717487
    },
    {
        "content": "<p>and are you providing a fetcher?</p>",
        "id": 175894480,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568717497
    },
    {
        "content": "<p>Is this in a JPA server or a non-JPA server?</p>\n<p>I curious here because despite all this, I'd expect all this to work, at least in a JPA server... This might be an issue with HAPI's wrapper.</p>",
        "id": 175894497,
        "sender_full_name": "James Agnew",
        "timestamp": 1568717518
    },
    {
        "content": "<p>it's still possible it's an issue in the validator. I got distracted by the spec issue and haven't finished testing yet</p>",
        "id": 175894549,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568717552
    },
    {
        "content": "<p>JPA server</p>",
        "id": 175894681,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568717672
    },
    {
        "content": "<p>Can you upload an example to the public test server so that you can link to its ID with <code>/$validate</code> at the end?</p>",
        "id": 175894736,
        "sender_full_name": "James Agnew",
        "timestamp": 1568717758
    },
    {
        "content": "<p><a href=\"http://hapi.fhir.org/baseDstu3/CareTeam/2574263/_history/1\" target=\"_blank\" title=\"http://hapi.fhir.org/baseDstu3/CareTeam/2574263/_history/1\">http://hapi.fhir.org/baseDstu3/CareTeam/2574263/_history/1</a></p>",
        "id": 175894825,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568717850
    },
    {
        "content": "<p><a href=\"http://hapi.fhir.org/baseDstu3/CareTeam/2574263/_history/1/$validate\" target=\"_blank\" title=\"http://hapi.fhir.org/baseDstu3/CareTeam/2574263/_history/1/$validate\">http://hapi.fhir.org/baseDstu3/CareTeam/2574263/_history/1/$validate</a></p>",
        "id": 175894923,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568717906
    },
    {
        "content": "<blockquote>\n<p>Is this in a JPA server or a non-JPA server?</p>\n<p>I curious here because despite all this, I'd expect all this to work, at least in a JPA server... This might be an issue with HAPI's wrapper.</p>\n</blockquote>\n<p>As we are in micro service setup with FHIR servers scattered all around we also provide custom logic on the ResourceLinkExtractor</p>",
        "id": 175895687,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568718687
    },
    {
        "content": "<p>This is sort of related to fetching resources located elsewhere</p>",
        "id": 175895751,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568718745
    },
    {
        "content": "<p>where we do an HTTP HEAD with the proper authentication mechanisms bootstrapped into the call (shipping bearer tokens around in the current call context)</p>",
        "id": 175895804,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568718800
    },
    {
        "content": "<blockquote>\n<p><a href=\"http://hapi.fhir.org/baseDstu3/CareTeam/2574263/_history/1/$validate\" target=\"_blank\" title=\"http://hapi.fhir.org/baseDstu3/CareTeam/2574263/_history/1/$validate\">http://hapi.fhir.org/baseDstu3/CareTeam/2574263/_history/1/$validate</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> here you go</p>",
        "id": 175896483,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568719419
    },
    {
        "content": "<p>I guess we might should provide some of the same logic into the validator if needed</p>",
        "id": 175896547,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568719468
    },
    {
        "content": "<p>tx- i'll take a look at this a bit later</p>",
        "id": 175896576,
        "sender_full_name": "James Agnew",
        "timestamp": 1568719505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> - I found this: <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_id=677&amp;tracker_item_id=12707\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_id=677&amp;tracker_item_id=12707\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_id=677&amp;tracker_item_id=12707</a> - isn't this related?</p>",
        "id": 176001153,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568810979
    },
    {
        "content": "<p>certainly looks like it....</p>",
        "id": 176001275,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568811042
    },
    {
        "content": "<p>not sure what what the deal is...</p>",
        "id": 176001318,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568811071
    },
    {
        "content": "<p>just seems like you have stumbled across this before</p>",
        "id": 176001342,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1568811098
    },
    {
        "content": "<p>y. not sure what I did then... probably fixed an issue in resolve() and overlooked the real error</p>",
        "id": 176001452,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568811171
    }
]