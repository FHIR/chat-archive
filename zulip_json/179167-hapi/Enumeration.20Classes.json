[
    {
        "content": "<p>I'm looking at the enumeration classes in HAPI's RI (org.hl7.fhir.dstu3.model) package, and wondering why the enums are defined as enclosed classes? And how you determine what the class name is for the enum? For example, the structure definition for PlanDefinition defines a binding for the precheckBehavior element that references the action-precheck-behavior value set. But the class name for the enumeration in HAPI is PlanDefinition.PlanActionPrecheckBehavior. Where does the HAPI generation get this class name?</p>",
        "id": 153865284,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483468886
    },
    {
        "content": "<p>enumerations used in more than one place are not enclosed in a class. I enclosed them to keep the overall number of java files manageable </p>",
        "id": 153865306,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483474465
    },
    {
        "content": "<p>The name is generated from the binding name in the spreadsheets, I think</p>",
        "id": 153865308,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483474488
    },
    {
        "content": "<p>Okay, that makes sense, but it makes the type names inconsistent between the Java RI classes and the XML Schema classes. The type name in the XML is PlanActionPrecheckBehavior, but in the Java classes, it's PlanDefinition.PlanActionPrecheckBehavior.</p>",
        "id": 153865310,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483474579
    },
    {
        "content": "<p>Which really only matters because I'm using the XML schema type name to look up the RI class name and it's missing because of that inconsistency.</p>",
        "id": 153865311,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483474613
    },
    {
        "content": "<p>And for that enumeration specifically, it is being used in more than one place, but the binding names are different in the spreadsheets, they just point to the same value set. Are you using the binding name to determine uniqueness there?</p>",
        "id": 153865313,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483474758
    },
    {
        "content": "<p>whether they are in terminologies\\bindings.xml </p>",
        "id": 153865315,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483475058
    },
    {
        "content": "<p>I see, I'll switch them to use that, there are several that are common there.</p>",
        "id": 153865320,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483475514
    },
    {
        "content": "<p>ok</p>",
        "id": 153865321,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483475622
    },
    {
        "content": "<p>more generally, there's no magic solution here, the schema does not contain all sorts of interesting information </p>",
        "id": 153865322,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483475647
    },
    {
        "content": "<p>But in this case, the StructureDefinition doesn't have it either.</p>",
        "id": 153865323,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483475675
    },
    {
        "content": "<p>Which I think is fine, I just think that it would make generation easier if the schema and the RI classes used consistent type names.</p>",
        "id": 153865325,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483475730
    },
    {
        "content": "<p>Out of curiosity, what is the .NET type name?</p>",
        "id": 153865326,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483475755
    },
    {
        "content": "<p>they are consistent. It's the java layout that's not </p>",
        "id": 153865327,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483475757
    },
    {
        "content": "<p>don't know.</p>",
        "id": 153865328,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483475770
    },
    {
        "content": "<p>I could add an extension to the StructureDefinitions about this. Not sure quite what it should say though</p>",
        "id": 153865329,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483475804
    },
    {
        "content": "<p>It should have the name of the enumeration class, in this case PlanDefinition.PlanActionPrecheckBehavior. Which I would suggest should be the same name of the type in the XML schema.</p>",
        "id": 153865332,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483476000
    },
    {
        "content": "<p>well, you can ask on the implementers stream if anyone cares if the enumeration type names change in the schema </p>",
        "id": 153865334,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483476206
    },
    {
        "content": "<p>but strictly, the name of the enumeration class is PlanActionPrecheckBehavior. it's whether it's specific to that resource, or shared, that we are talking about here</p>",
        "id": 153865335,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483476250
    },
    {
        "content": "<p>Conceptually, yes, but the way class lookup works in Java, it's the difference between a direct lookup and scanning all resource classes for sub-classes.</p>",
        "id": 153865336,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483476292
    },
    {
        "content": "<p>actually, it's the difference between being enclosed in Enumerations, or in the resource itself</p>",
        "id": 153865337,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483476361
    },
    {
        "content": "<p>Ah, so if an enumeration is used in more than one place, it will be a subclass of Enumerations?</p>",
        "id": 153865338,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483476491
    },
    {
        "content": "<p>enclosed by enumerations (not quite the same thing)</p>",
        "id": 153865342,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483476620
    },
    {
        "content": "<p>True, misspoke.</p>",
        "id": 153865343,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483476635
    },
    {
        "content": "<p>well, do you want to make a task for me to add an extension for whether the binding is common or not? </p>",
        "id": 153865344,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483476766
    },
    {
        "content": "<p>Well, the StructureDefinition doesn't have the name of the type at all right now, and you're right that's a different thing than whether it is used in multiple places. I think at the very least the StructureDefinition should have the type name, so \"binding-name\" or something like that, which in this case would be PlanActionPrecheckBehavior.</p>",
        "id": 153865345,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483476883
    },
    {
        "content": "<p>Happy to add a task for that.</p>",
        "id": 153865346,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483476887
    },
    {
        "content": "<p>Not sure about the usefulness of the common information though.</p>",
        "id": 153865347,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483476902
    },
    {
        "content": "<p>What do you do in the XML Schema if you have duplicate binding names?</p>",
        "id": 153865348,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483476944
    },
    {
        "content": "<p>ok. I can add a proposed type name for a binding. As for the common information - in both schema and java, it defines where in the content it is generated. (it doesn't in pascal, and I don't know what .Net does)</p>",
        "id": 153865349,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483476977
    },
    {
        "content": "<p>So \"is-common-binding\" or something like that?</p>",
        "id": 153865350,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483477048
    },
    {
        "content": "<p>yes</p>",
        "id": 153865351,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483477091
    },
    {
        "content": "<p>Okay, I'll submit tasks.</p>",
        "id": 153865352,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1483477108
    },
    {
        "content": "<p>thx</p>",
        "id": 153865353,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1483477184
    },
    {
        "content": "<p>Not sure if the .NET enums are consistent.<br>\nWe create contained enums where the enumeration is not shared with any other classes, otherwise it is generated in the Hl7.Fhir.Model namespace where it can be shared.<br>\nAnd the name is just the name of the ValueSet bound<br>\n<a href=\"/user_uploads/10155/msOVi3W5C8GdT4NKVnzHzt8R/pasted-image.png\" target=\"_blank\" title=\"pasted-image.png\">pasted-image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/msOVi3W5C8GdT4NKVnzHzt8R/pasted-image.png\" target=\"_blank\" title=\"pasted-image.png\"><img src=\"/user_uploads/10155/msOVi3W5C8GdT4NKVnzHzt8R/pasted-image.png\"></a></div>",
        "id": 153865397,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1483510179
    }
]