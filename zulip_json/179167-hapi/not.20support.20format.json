[
    {
        "content": "<p>I remove the annotation @RequestBody, the requese can be successful, but i can noly get the appointment id rather than all of appointment data. if i do not remove the annotation, the console will report the exception (the format not support.) <a href=\"/user_uploads/10155/aQtBS8mpFiS9TEmuYHUqK8rf/image.png\" title=\"image.png\">image.png</a> <a href=\"/user_uploads/10155/SBPw2zr_sYEetHE3_nBrusyH/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/aQtBS8mpFiS9TEmuYHUqK8rf/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/aQtBS8mpFiS9TEmuYHUqK8rf/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/10155/SBPw2zr_sYEetHE3_nBrusyH/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/SBPw2zr_sYEetHE3_nBrusyH/image.png\"></a></div>",
        "id": 195536662,
        "sender_full_name": "Wizard Wu",
        "timestamp": 1588065069
    },
    {
        "content": "<p>hi everyone HAPI newbie here - I just set up HAPI JPA server on amazon EC2 and backend as MySQL RDS. I can see that HAPI creates table/schema in the designated db, but I can't find where the actual <em>data</em> lives in this database?! Like, if I POST a new patient and I get a 200. I can GET that patient, so I know it lives on this HAPI instance somewhere. But if I browse all the RDS tables in DBeaver I can't find this data anywhere - only the metadata. This is important for our use case since we would like to push data from our AWS data lake to MySQL so it can be served to users via HAPI - but right now we don't know where this data lives. Thank you for your advice!</p>",
        "id": 195549988,
        "sender_full_name": "Alex Poor",
        "timestamp": 1588073475
    },
    {
        "content": "<p>I haven't actually publicized this much yet, but we've actually started documenting the JPA Server DB schema here: <a href=\"https://hapifhir.io/hapi-fhir/docs/server_jpa/schema.html\" title=\"https://hapifhir.io/hapi-fhir/docs/server_jpa/schema.html\">https://hapifhir.io/hapi-fhir/docs/server_jpa/schema.html</a></p>",
        "id": 195570784,
        "sender_full_name": "James Agnew",
        "timestamp": 1588083691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191319\">James Agnew</span> <a href=\"#narrow/stream/179167-hapi/topic/not.20support.20format/near/195570784\" title=\"#narrow/stream/179167-hapi/topic/not.20support.20format/near/195570784\">said</a>:</p>\n<blockquote>\n<p>I haven't actually publicized this much yet, but we've actually started documenting the JPA Server DB schema here: <a href=\"https://hapifhir.io/hapi-fhir/docs/server_jpa/schema.html\" title=\"https://hapifhir.io/hapi-fhir/docs/server_jpa/schema.html\">https://hapifhir.io/hapi-fhir/docs/server_jpa/schema.html</a></p>\n</blockquote>\n<p>7:51 AM</p>\n<p>thanks! sorry I missed that the docs were there all along... As far as I can see then - because HFJ_RESOURCE.HASH_SHA256 is a hash of the full resource and HFJ_RES_VAR.RES_TEXT is a compressed blob of the resource - it is NOT possible to insert/update resources in HAPI at the database level alone?</p>",
        "id": 195617381,
        "sender_full_name": "Alex Poor",
        "timestamp": 1588103709
    },
    {
        "content": "<p>I guess technically it could be done if you added everything correctly, but it's definitely not recommended to do it that way.</p>",
        "id": 195630327,
        "sender_full_name": "James Agnew",
        "timestamp": 1588109759
    },
    {
        "content": "<p>who can help me?</p>",
        "id": 195661193,
        "sender_full_name": "Wizard Wu",
        "timestamp": 1588136756
    }
]