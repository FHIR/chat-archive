[
    {
        "content": "<p>Is there a way in which I can store a hierarchy of doctors (independent of the patient)? There's CareTeam, but that's in context of a patient.</p>",
        "id": 229461426,
        "sender_full_name": "Dexter",
        "timestamp": 1615289182
    },
    {
        "content": "<p>Do you need an actual hierarchy or a flat list? If it's a hierarchy, what should the relation be based on? Who answers to who?</p>",
        "id": 229461813,
        "sender_full_name": "Pétur Valdimarsson",
        "timestamp": 1615289402
    },
    {
        "content": "<p>Perhaps a tree-like one, each with n-nodes. Yeah who answers to who would be great to have!</p>",
        "id": 229462947,
        "sender_full_name": "Dexter",
        "timestamp": 1615290002
    },
    {
        "content": "<p>I would probably go with a Group (or List) resource as container and add an extension to Practitioner to point out \"superior\". Then resolve the hierarchy on consumption of the resource.</p>",
        "id": 229463402,
        "sender_full_name": "Pétur Valdimarsson",
        "timestamp": 1615290255
    },
    {
        "content": "<p>I'll also probably need to search for people within hierarchies. Will that mean extension search support will need modifications to the server code?</p>",
        "id": 229463461,
        "sender_full_name": "Dexter",
        "timestamp": 1615290307
    },
    {
        "content": "<p>Basically, in the case I described, you will always be searching among a flat Practitioner list. Each practitioner has an extension defining a superior.</p>\n<p>From your last question, I'm guessing you are using the HAPI JPA Server? </p>\n<p>In order to perform searches such as finding all \"descendants\" of a Practitioner, a series of reverse chaining searches would need to be performed, or some alterations of the server code. But since I haven't used the JPA server in quite some time, I'm a bit unsure what it supports \"out of the box\" when it comes to searching. </p>\n<p>Someone else might be of more help there.</p>",
        "id": 229464585,
        "sender_full_name": "Pétur Valdimarsson",
        "timestamp": 1615290997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359486\">Dexter</span> <a href=\"#narrow/stream/179167-hapi/topic/Doctors.20hierarchy/near/229461426\">said</a>:</p>\n<blockquote>\n<p>Is there a way in which I can store a hierarchy of doctors (independent of the patient)? There's CareTeam, but that's in context of a patient.</p>\n</blockquote>\n<p>I hope I'm not rambling. But another way of handling it is to use Groups containing Practitioners and Groups, skipping the extension part. It might become a bit tedious to maintain though.</p>",
        "id": 229466068,
        "sender_full_name": "Pétur Valdimarsson",
        "timestamp": 1615291764
    },
    {
        "content": "<blockquote>\n<p>I'm guessing you are using the HAPI JPA Server</p>\n</blockquote>\n<p>Yeah </p>\n<blockquote>\n<p>I hope I'm not rambling</p>\n</blockquote>\n<p>No no you're not! Thanks for your pointers! I'm pretty new to HAPI and FHIR, so any help is really helpful! I'll try extensions, but I had issues previously defining a <code>SearchParameter</code> on it and getting it to work. I'll take a jab at it again and report back. I'll test out groups too! Thank you again!</p>",
        "id": 229466318,
        "sender_full_name": "Dexter",
        "timestamp": 1615291900
    },
    {
        "content": "<p><code>Group</code> seems to fit me well for the usecase. But there's one issue I'm not sure how to tackle. Each doctor must manage only one group, and each member in a group cannot be a member of another group. While creating a new group, how do I enforce the above 2 conditions? </p>\n<p>Condition 1 (no other group with this managing doctor is fairly straightforward) I must use <code>ifNoneExist: managing-entity=ID</code>.<br>\nCondition 2 (member not in any other group) I must use <code>ifNoneExist: member=ID1, ID2, ID3, ...</code>. </p>\n<p>Combining these both, my POST request would be something like this</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    &quot;resourceType&quot;: &quot;Bundle&quot;,\n    &quot;type&quot;: &quot;transaction&quot;,\n    &quot;entry&quot;: [\n        {\n            &quot;resource&quot;: { /* Group Data */ },\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;POST&quot;,\n                &quot;ifNoneExist&quot;: &quot;managing-entity=ID&amp;member=ID1, ID2, ID3&quot;\n            }\n        }\n    ]\n}\n</code></pre></div>\n<p>I was also asked to ensure that there's only one level of 'hierarchy' for now. Now, this means that given a member <code>A</code> of a group <code>G</code>, they cannot be the <code>managinEntity</code> of any other group B. I thought of putting this restriction as a comma-separated values for the <code>managing-entity</code>, but that doesn't seem to work, nor does repeating the item in the request. </p>\n<p>Example, given <code>2</code> to be the <code>managing-entity</code> of a new group, and <code>4, 5, 6, 7</code> its members, I tried this <code>ifNoneExist</code>. </p>\n<div class=\"codehilite\"><pre><span></span><code>ifNoneExist: managing-entity=2,3 &amp; member=2, 4, 5, 6, 7\nifNoneExist: managing-entity=2 &amp; managing-entity=3 &amp; member=2, 4, 5, 6, 7\n(spaces b/w &amp; for ease of reading)\n</code></pre></div>",
        "id": 229647239,
        "sender_full_name": "Dexter",
        "timestamp": 1615378882
    }
]