[
    {
        "content": "<p>Hi,</p>\n<p>From what I can tell, it looks like the search indexing after i.e. creating a new Patient resource is being done asynchronously. If i directly query for my newly created patient based on a ?identifier= it will not find it.<br>\nIs this behavior configurable? Is there for instance an option to have the POST request wait with returning until the indexes are updated?</p>",
        "id": 213787997,
        "sender_full_name": "Job Schipper",
        "timestamp": 1603115513
    },
    {
        "content": "<p>Not currently possible - The assumption is that reindexing is going to take a very long time on real production systems with ream amounts of data, so a blocking query wouldn't really be feasible.</p>",
        "id": 213792085,
        "sender_full_name": "James Agnew",
        "timestamp": 1603117173
    },
    {
        "content": "<p>Are there any fields other than the logical <code>id</code> field that are highly consistent when you do a read/search request? I mean fields that are indexes instantly pas part of i.e. an update operation.</p>",
        "id": 214174468,
        "sender_full_name": "Job Schipper",
        "timestamp": 1603366915
    },
    {
        "content": "<p>for instance the _tag field? or is that also part of the async index update?</p>",
        "id": 214178349,
        "sender_full_name": "Job Schipper",
        "timestamp": 1603369230
    },
    {
        "content": "<p>I'm not sure I understand what you mean by that</p>",
        "id": 214180771,
        "sender_full_name": "James Agnew",
        "timestamp": 1603370590
    },
    {
        "content": "<p>consider this example:<br>\nif i create a patient resource with a POST /Patient, i get an <code>id</code> back in the response, which i can use to lookup that patient resource from that point on. However, if i search for it by <code>lastname</code>, it will not find it until the re-indexing has completed. </p>\n<p>I was wondering if there are any other fields that i can use to request my just-created Patient resource that do not depend on the re-index</p>",
        "id": 214188089,
        "sender_full_name": "Job Schipper",
        "timestamp": 1603374020
    },
    {
        "content": "<p>or is that limited to the logical <code>id</code> field?</p>",
        "id": 214188149,
        "sender_full_name": "Job Schipper",
        "timestamp": 1603374067
    },
    {
        "content": "<p>Well, lastname is a built in search parameter so you should be able to use it right away, unless you had previously removed it and performed a reindex, and you are now re-enabling it.</p>\n<p>In other words, reindexing doesn't disable existing search parameters, it only adds new ones to the mix once it's complete.</p>",
        "id": 214250399,
        "sender_full_name": "James Agnew",
        "timestamp": 1603402072
    },
    {
        "content": "<p>oh wait sorry, lastname isn't built in.. family is.</p>",
        "id": 214250459,
        "sender_full_name": "James Agnew",
        "timestamp": 1603402086
    },
    {
        "content": "<p>Point stands though- Any search parameter that was there before you added the new one and started the reindex will work during the reindex too. Including <code>_id</code> and <code>family</code></p>",
        "id": 214250510,
        "sender_full_name": "James Agnew",
        "timestamp": 1603402120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span>  but if it's a CREATE action, none of the parameters were there before (for this Resource) right? so that means that after a create action you always have to wait until re-indexing is finished before being able to find it? (this is what I seem to be experiencing)</p>\n<p>edit: and by \"being able to find it\" i mean a search call based on i.e. ?identifier= or ?_tag=  or ?family=</p>",
        "id": 214300023,
        "sender_full_name": "Job Schipper",
        "timestamp": 1603451688
    },
    {
        "content": "<p>I'm sorry, I still don't understand what you are describing. Perhaps you could describe in more detail the steps you are taking that aren't prodicing the expected results?</p>\n<p>My only thought here is maybe you are simply getting hit by the query cache: <a href=\"https://smilecdr.com/docs/fhir_repository/performance_and_caching.html\">https://smilecdr.com/docs/fhir_repository/performance_and_caching.html</a></p>",
        "id": 214321937,
        "sender_full_name": "James Agnew",
        "timestamp": 1603464025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span>  ha indeed! I just came to the same conclusion, and this is indeed the issue i was having.</p>\n<p>our application that creates fhir resources based on a patient DB  does a lookup based on _tag to see if there is an existing Resource for that Patient. When processing an update for a just-created patient, it would hit cache when trying to look it up, thus assuming it does not exist yet. Now using no-cache headers for this specific scenario and all is good!</p>\n<p>Thanks again!</p>",
        "id": 214330659,
        "sender_full_name": "Job Schipper",
        "timestamp": 1603468351
    }
]