[
    {
        "content": "<p>I'm looking for patients who have at least one observation and at least one procedure in the HAPI FHIR public test server using this request: <a href=\"https://hapi.fhir.org/baseR4/Patient?_has:Observation:patient&amp;_has:Procedure:patient\">https://hapi.fhir.org/baseR4/Patient?_has:Observation:patient&amp;_has:Procedure:patient</a>. What I receive from the server is the following which is not as I expect in this case.</p>\n<p>{<br>\n  \"resourceType\": \"OperationOutcome\",<br>\n  \"text\": {<br>\n    \"status\": \"generated\",<br>\n    \"div\": \"&lt;div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"&gt;&lt;h1&gt;Operation Outcome&lt;/h1&gt;&lt;table border=\\\"0\\\"&gt;&lt;tr&gt;&lt;td style=\\\"font-weight: bold;\\\"&gt;ERROR&lt;/td&gt;&lt;td&gt;[]&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Invalid _has parameter syntax: :Observation:patient&lt;/pre&gt;&lt;/td&gt;\\n\\t\\t\\t&lt;/tr&gt;\\n\\t\\t&lt;/table&gt;\\n\\t&lt;/div&gt;\"<br>\n  },<br>\n  \"issue\": [ {<br>\n    \"severity\": \"error\",<br>\n    \"code\": \"processing\",<br>\n    \"diagnostics\": \"Invalid _has parameter syntax: :Observation:patient\"<br>\n  } ]<br>\n}</p>",
        "id": 270540934,
        "sender_full_name": "Mohsen Jafari",
        "timestamp": 1643891721
    },
    {
        "content": "<p>I think you're missing a 3rd part there, which would be a constraint for the Observation.  </p>\n<p>The specification example is: <br>\nGET [base]/Patient?_has:Observation:patient<strong>:code=1234-5</strong></p>\n<p>I tried to trick it with something like this, but it failed: <br>\n<a href=\"https://hapi.fhir.org/baseR4/Patient?_has:Observation:patient:_id:missing=false\">https://hapi.fhir.org/baseR4/Patient?_has:Observation:patient:_id:missing=false</a></p>\n<p>As an aside, the types of queries you are attempting, while perhaps allowed by the spec, can be difficult to implement due to the nature of FHIR resources and how most systems index them. FHIR does not lend itself well to complex ad-hoc queries across records, IMO. There are just too many relationships, complex types, backbone elements, etc. so the models become too deep and complex to represent in a traditional relational structure where such queries are \"easy\". Not to mention difficulty in paging the results.<br>\nAnyway, just be aware that you will likely find variability in support, behavior, and performance across implementations when you start trying to do some of the more complex things allowed in the spec - if portability is important to you.</p>",
        "id": 270582931,
        "sender_full_name": "Craig McClendon",
        "timestamp": 1643908043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"410473\">Mohsen Jafari</span> has marked this topic as resolved.</p>",
        "id": 270677515,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643960702
    }
]