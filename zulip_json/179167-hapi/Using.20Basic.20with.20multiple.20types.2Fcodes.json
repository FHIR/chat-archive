[
    {
        "content": "<p>Was wondering if anyone has any good advice/best practise of how to handle multiple types (resources) using the /Basic endpoint?<br>\nOur scenario is that we have two custom underlying resources with UUID as it's ID and we want to expose them through the /Basic endpoint. The problem that we have is that we can't do a READ on /Basic, since we dont know which underlying resource was intended.<br>\nOne solution might be to disallow READ and only use SEARCH when getting resources, including the code parameter to distinguish between the two.<br>\nAny tips or thoughts are appreciated :)</p>",
        "id": 217003174,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1605620519
    },
    {
        "content": "<p>they aren't differentiated by id? why not?</p>",
        "id": 217009649,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1605623677
    },
    {
        "content": "<p>O yes, they have their own ID's of course. But we don't know which underlying resource the belong to on a READ action. Hope I understood your question correct.</p>",
        "id": 217018845,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1605627558
    },
    {
        "content": "<p>but you could represent that in the id. i would, at least</p>",
        "id": 217023255,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1605629387
    },
    {
        "content": "<p>You mean by prefixing the Id, as an example?<br>\nI started asking this question in the dotnet stream and they had the same solution :)<br>\nBut as I wrote in that topic:</p>\n<p>We have other consumers (for example a web app), besides our fhir server, that are using the underlying resources and their Id's. If the Id's get exposed to the end client from the other consumers, we would then be in a position where we would expose the same resource but with different Id's depending on which application you are using.</p>",
        "id": 217122167,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1605698553
    },
    {
        "content": "<p>You have some of the same folks in both places too <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 217136195,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1605707416
    },
    {
        "content": "<p>I don't follow how that is related to the question at hand. Perhaps you can explain more clearly... why wouldn't you use the same algorithm?</p>",
        "id": 217139998,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1605709340
    },
    {
        "content": "<p>Hello again! We solved the problem with the Id's by extending the underlying api with a method where we could ask what resource type a specific Id belonged to. </p>\n<p>But now I have another problem which I can't solve.<br>\nOur \"custom\" Basic resource has an extension with the type UUIDType, but the hapi parser throws an error when I do a POST request to our /Basic endpoint : Unknown element 'valueUuid' found during parse.<br>\nI have tried to debug to find out why this happens, and all I can see is that when parsing a Basic resource, it doesnt know what a UUIDType (valueUuid) is.</p>\n<p>Does anyone have any idea what could be wrong ? Because surely I'm able to use an UUIDType on Basic resource ? :)<br>\nUsing the hapi server version 5.1</p>\n<p>Thanks!</p>",
        "id": 219858374,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1607960372
    },
    {
        "content": "<p>would you like to post an example of your resource?</p>",
        "id": 219909967,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1607984082
    },
    {
        "content": "<p>Here's an example in json format which doesn't parse:<br>\n{<br>\n  \"resourceType\": \"Basic\",<br>\n  \"meta\": {<br>\n    \"profile\": [ \"<a href=\"http://mycustom.url\">http://mycustom.url</a>\" ]<br>\n  },<br>\n  \"extension\": [ {<br>\n    \"url\": \"<a href=\"http://myValue.url\">http://myValue.url</a>\",<br>\n    \"valueUuid\": \"ae644c07-1d4b-4ca4-bbf3-bd2023e294e5\"<br>\n  } ]<br>\n}</p>",
        "id": 219943396,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1608015935
    },
    {
        "content": "<p>And here's the java class:<br>\n@ResourceDef(name = \"Basic\", profile = PROFILE)<br>\npublic class MyCustom extends Basic {<br>\n    public static final String PROFILE = \"<a href=\"http://mycustom.url\">http://mycustom.url</a>\";</p>\n<div class=\"codehilite\"><pre><span></span><code>@Child(name = &quot;myValue&quot;)\n@Extension(url = &quot;http://myValue.url&quot;, definedLocally = false, isModifier = false)\n@Description(shortDefinition = &quot;&quot;)\nprivate UuidType myValue;\n</code></pre></div>\n\n<p>}</p>",
        "id": 219943465,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1608016025
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>,  did you have time to look into our problem?</p>",
        "id": 220213429,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1608189688
    },
    {
        "content": "<p>what version of FHIR is this for?</p>",
        "id": 220323580,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1608251990
    },
    {
        "content": "<p>We're using R4.<br>\nI do hope it's just me, having made some mistake...</p>",
        "id": 220343388,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1608276727
    },
    {
        "content": "<p>ok. anyway, <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> I think this is an issue in the HAPI serialiser, not the object models themselves</p>",
        "id": 220361430,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1608291101
    },
    {
        "content": "<p>Interesting... Let me see if I can reproduce this.</p>",
        "id": 220371466,
        "sender_full_name": "James Agnew",
        "timestamp": 1608298048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251867\">@Johan Nicklasson</span> I've just whipped up a test with your examples, and it passes. Can you please examine for what is different about the test scenario from your scenario, and update the test so that it demonstrates your issue?</p>\n<p><a href=\"https://github.com/hapifhir/hapi-fhir/commit/5dc12b87876845e7f6f095c4f4f6cd8cbc218d2c#diff-6becf79d21ddbac4d4a25766de087756af0fe334016437d5215943f6a300597fR624\">https://github.com/hapifhir/hapi-fhir/commit/5dc12b87876845e7f6f095c4f4f6cd8cbc218d2c#diff-6becf79d21ddbac4d4a25766de087756af0fe334016437d5215943f6a300597fR624</a></p>",
        "id": 220373678,
        "sender_full_name": "James Agnew",
        "timestamp": 1608299449
    },
    {
        "content": "<p>Thanks for helping out <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> . If you change the parseResource()-method to using the Basic.Class instead of MyCustom.Class it won't work. And I guess that is what being used at runtime?</p>",
        "id": 220374626,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1608300018
    },
    {
        "content": "<p>Ok yeah, I see that. Working on a fix.</p>",
        "id": 220376725,
        "sender_full_name": "James Agnew",
        "timestamp": 1608301241
    },
    {
        "content": "<p>Great! Looks like Santa's coming early this year :)</p>",
        "id": 220377388,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1608301589
    },
    {
        "content": "<p>Looks like the UUID datatype somehow didn't end up in our property file that enumerates the data model types. A fix has been submitted: <a href=\"https://github.com/hapifhir/hapi-fhir/pull/2258\">https://github.com/hapifhir/hapi-fhir/pull/2258</a></p>",
        "id": 220377426,
        "sender_full_name": "James Agnew",
        "timestamp": 1608301603
    }
]