[
    {
        "content": "<p>Hi, <br>\nSince 3.0.0 tests were deployed, all of our core resources such as Patient and Practitioner have started failing, because they're expecting a content-type of 'application/fhir+json; charset=utf-8;'.   Unfortunately, it appears this change is not compliant with IETF RFC 4627 or RFC 2616, and the request.js library doesn't support such encodings (used by express.js, meteor.js, and most other Node based servers).  Can we revert back to only testing for a Content-type of 'application/fhir+json?`</p>\n<p><a href=\"https://github.com/request/request/issues/383\" target=\"_blank\" title=\"https://github.com/request/request/issues/383\">https://github.com/request/request/issues/383</a><br>\n<a href=\"https://tools.ietf.org/html/rfc4627\" target=\"_blank\" title=\"https://tools.ietf.org/html/rfc4627\">https://tools.ietf.org/html/rfc4627</a><br>\n<a href=\"https://tools.ietf.org/html/rfc2616\" target=\"_blank\" title=\"https://tools.ietf.org/html/rfc2616\">https://tools.ietf.org/html/rfc2616</a></p>\n<p><a href=\"/user_uploads/10155/RDu43PPiCChO2yf0NzMMyI1v/Screen-Shot-2017-05-03-at-10.52.24-PM.png\" target=\"_blank\" title=\"Screen-Shot-2017-05-03-at-10.52.24-PM.png\">Screen-Shot-2017-05-03-at-10.52.24-PM.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/RDu43PPiCChO2yf0NzMMyI1v/Screen-Shot-2017-05-03-at-10.52.24-PM.png\" target=\"_blank\" title=\"Screen-Shot-2017-05-03-at-10.52.24-PM.png\"><img src=\"/user_uploads/10155/RDu43PPiCChO2yf0NzMMyI1v/Screen-Shot-2017-05-03-at-10.52.24-PM.png\"></a></div>",
        "id": 153886916,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1493870272
    },
    {
        "content": "<p>We would be against this change if it meant that including the charset made the test fail. Its a perfectly valid value for the content-type; a strong argument could be made that its better. Is it possible to do a starts-with style check, so that both are acceptable?</p>",
        "id": 153886951,
        "sender_full_name": "Jim Steel",
        "timestamp": 1493881088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191678\">@Abigail Watson</span> The FHIR specification does define the required values for the HTTP Content-Type Header here <a href=\"http://hl7.org/fhir/STU3/http.html#mime-type\" target=\"_blank\" title=\"http://hl7.org/fhir/STU3/http.html#mime-type\">http://hl7.org/fhir/STU3/http.html#mime-type</a>. The following paragraph from this section describes the mandatory use [SHALL] of the \"charset\" parameter:</p>\n<p>FHIR uses UTF-8 for all request and response bodies. Since the HTTP specification (section 3.7.1) defines a default character encoding of ISO-8859-1, requests and responses <strong>SHALL explicitly set the character encoding to UTF-8 using the charset parameter of the MIME-type in the Content-Type header</strong>. Requests MAY also specify this charset parameter in the Accept header and/or use the Accept-Charset header.</p>",
        "id": 153886987,
        "sender_full_name": "Richard Ettema",
        "timestamp": 1493898399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191678\">@Abigail Watson</span> I just finished reading through the links you provided. After reading the discussion on the github thread, I would have to say I agree with the assessement that the charset parameter is not defined for the mime-type of \"application/json\".<br>\nHowever, we are not talking about \"application/json\". We are talking about the FHIR specification defined mime-types for FHIR content. And that mime-type for FHIR JSON content is \"application/fhir+json\" which does have a required parameter of \"charset=utf-8\" (case-insensitive) within the Content-Type header of the request and response.</p>",
        "id": 153887021,
        "sender_full_name": "Richard Ettema",
        "timestamp": 1493901670
    },
    {
        "content": "<p>Well, happy to acknowledge that Touchstone is implementing to the FHIR spec.  It just seems that the current FHIR spec has either arbitrarily or accidentally determined that Node libraries are not valid FHIR servers.  Drat.  <br>\nHow would we go about petitioning that the FHIR spec be changed to something along the lines of <em>\"responses SHALL EITHER explicitly set the character encoding to UTF-8 using the charset parameter of the MIME-type in the Content-Type header OR specify this charset parameter in the Accept header and/or use the Accept-Charset header.\"</em>?  Who would we talk to and escalate this issue on the FHIR side?  <br>\nI'll get started petitioning the request.js folks to allow extended Content-Type settings, citing this use-case.  It will take quite some time to move the change through the dependency chain.... request.js, express.js, meteor.js, json-routes, clinical-meteor, etc.  I would expect 6 months or more before such a change will get from a GitHub issue to our servers.<br>\nIn the meantime, could we look at adjusting the tests to use the starts-with check, and do a Warning instead of an Error?  Would that take a lot of work?</p>",
        "id": 153887096,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1493909761
    },
    {
        "content": "<p>Creating a gforge tracker item would the first thing to do.<br>\nI'll be in Madrid for the FHIR Connectathon and HL7 WGM and can bring this up for discussion.<br>\nRegarding the Touchstone TestScripts, I'll need to review how best to handle this little wrinkle. (And I thought I wouldn't have anything to do on the flight over. <img alt=\":wink:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/wink.png\" title=\":wink:\">)</p>",
        "id": 153887097,
        "sender_full_name": "Richard Ettema",
        "timestamp": 1493910310
    },
    {
        "content": "<p>Okay, I haven't done one of those before.  I'll create an account.  </p>",
        "id": 153887098,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1493910759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191678\">@Abigail Watson</span> Can you confirm that you are using Meteor for your JavaScript development? Are you using an IDE; for example, Webstorm?  (just curious)</p>",
        "id": 153887101,
        "sender_full_name": "Richard Ettema",
        "timestamp": 1493911388
    },
    {
        "content": "<p>Yes, I'm using Meteor.  Specifically, I maintain the Clinical Meteor distro, which has healthcare specific packages beyond the core release.  Currently, I'm using Visual Studio Code.  </p>",
        "id": 153887106,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1493911986
    },
    {
        "content": "<p>Yep, I just found your 'clinical-meteor' github repo. Nice!</p>",
        "id": 153887107,
        "sender_full_name": "Richard Ettema",
        "timestamp": 1493912062
    },
    {
        "content": "<p>Thanks, I'm analyzing the dependency chain in more detail, and realized this might be caused by connect.js instead of request.js.   But they're sort of competing libraries, like underscore and lodash, and seem to have implemented to the same specs.  Nonetheless, still trying to find a workaround.  </p>",
        "id": 153887109,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1493912264
    },
    {
        "content": "<p>I'll definitely be downloading and installing this as I would like to have a local copy to test against.<br>\nPlease let me know when/if you do find a workaround.</p>",
        "id": 153887110,
        "sender_full_name": "Richard Ettema",
        "timestamp": 1493912361
    },
    {
        "content": "<p>Thanks.    If you do, you'll want to start with the Meteor on FHIR repository.    I'm another week or two away from releasing RC 18 - Provider Directory.   It will have a tutorial on HL7 V2 to FHIR mapping, and some notes on how to do FHIR testing and set up a peer-to-peer network.  And hopefully the blockchain libraries. </p>",
        "id": 153887113,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1493912958
    },
    {
        "content": "<p>Thanks. That's what I'm looking at right now. I'm guessing I should download the 'fhir-connectathon' branch.</p>",
        "id": 153887114,
        "sender_full_name": "Richard Ettema",
        "timestamp": 1493913200
    },
    {
        "content": "<p>That's the latest branch, yeah.  I haven't created a WildFHIR like client search UI yet; so outbound connections are still hard coded.  And Epic doesn't support general open-ended queries on the Location, Practitioner, and Organization resource endpoints.  So functionality is still a bit limited and requires Postman or other HTTP utilities.  </p>",
        "id": 153887115,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1493913804
    },
    {
        "content": "<p>I successfully logged a tracking ticket on gForge!<br>\n<a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13409\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13409\">http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13409</a></p>",
        "id": 153889934,
        "sender_full_name": "Abbie Watson",
        "timestamp": 1494872927
    }
]