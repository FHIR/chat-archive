[
    {
        "content": "<p>Is there a straightforward way to use an OAuth access token with clinFHIR?</p>\n<p>A minimal implementation would involve adding an \"Authorization: Bearer &lt;access_token&gt;\" header to outbound FHIR API requests.</p>",
        "id": 212310462,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1601909642
    },
    {
        "content": "<p>Not at the moment - which module are you thinking of? Patient Viewer? Wouldn't be hard to do that. (I've been meaning to do the full SMART thing some time so this might be an interim step )...</p>",
        "id": 212338194,
        "sender_full_name": "David Hay",
        "timestamp": 1601922474
    },
    {
        "content": "<p><a href=\"https://microsoft-healthcare-madison.github.io/patient-lists-demo/\">https://microsoft-healthcare-madison.github.io/patient-lists-demo/</a> has an example of this kind of thing under \"settings\" -- <br>\n<a href=\"/user_uploads/10155/g1Ysv3dmq3Kome8VafDOQLhL/image.png\">image.png</a>  lets you just paste in a token if you happen to be connecting to a server that needs one.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/g1Ysv3dmq3Kome8VafDOQLhL/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/g1Ysv3dmq3Kome8VafDOQLhL/image.png\"></a></div><p>H/T <span class=\"user-mention\" data-user-id=\"233081\">@Carl Anderson</span></p>",
        "id": 212342833,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1601924591
    },
    {
        "content": "<p>Something like that would be great.</p>",
        "id": 212347012,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1601926903
    },
    {
        "content": "<p>Yes, the Patient Viewer module.</p>",
        "id": 212347790,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1601927376
    },
    {
        "content": "<p>OK - will get on to it...</p>",
        "id": 212510795,
        "sender_full_name": "David Hay",
        "timestamp": 1602040030
    },
    {
        "content": "<p>Ok - all done (and thanks to help from <span class=\"user-mention\" data-user-id=\"191926\">@Joel Schneider</span> for investigation work).  If you use the Patient Viewer module, when you click the 'Select Patient' button then at the bottom of the dialog is a text box where you can enter an Access Token. The token is stored in the browser memory and will be supplied in the Authorization header of any subsequest request in Patient Viewer.</p>\n<p>Interestingly, adding this header causes AngularJS (which  clinFHIR is written in) to generate an HTTP OPTIONS request  - which the server must support as part of CORS. Turns out you need to do a little bit of Hapi configuration to support this. </p>\n<p>This doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><code> CorsInterceptor corsInterceptor = new CorsInterceptor();\n</code></pre></div>\n\n\n<p>This does:</p>\n<div class=\"codehilite\"><pre><span></span><code>CorsConfiguration corsConfiguration = new CorsConfiguration();\ncorsConfiguration.applyPermitDefaultValues();\ncorsConfiguration.setAllowedMethods(Arrays.asList(new String[] { &quot;*&quot; }));\nCorsInterceptor corsInterceptor = new CorsInterceptor(corsConfiguration);\n</code></pre></div>\n\n\n<p>If people want, I can look to implement the full OAuth2 dance, but for now this should be enough...</p>",
        "id": 212932614,
        "sender_full_name": "David Hay",
        "timestamp": 1602360585
    },
    {
        "content": "<p>Created a related hapi-fhir pull request here:<br>\n<a href=\"https://github.com/jamesagnew/hapi-fhir/pull/2126\">https://github.com/jamesagnew/hapi-fhir/pull/2126</a></p>",
        "id": 212952946,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1602400497
    },
    {
        "content": "<p>It would be best to also add relevant exposed headers to the custom CorsConfiguration, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code>corsConfiguration.setExposedHeaders(Arrays.asList(new String[] {\n    &quot;Content-Location&quot;,\n    &quot;Date&quot;,\n    &quot;ETag&quot;,\n    &quot;Location&quot;,\n    &quot;X-Request-Id&quot;,\n    &quot;X-Correlation-Id&quot;\n}));\n</code></pre></div>",
        "id": 212955707,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1602405496
    },
    {
        "content": "<blockquote>\n<p>Interestingly, adding this header causes AngularJS (which clinFHIR is written in) to generate an HTTP OPTIONS request</p>\n</blockquote>\n<p>It's actually more basic -- this is standard, automatic browser behavior for requests that can't be considered \"simple requests\". <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests\">https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests</a> has a good overview.</p>",
        "id": 213050364,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1602515260
    },
    {
        "content": "<p>Thanks Josh! Joel has also suggested a shift to HTTPS - something I've been thinking about, but  should really move on. Main complication I'm anticipating is accessing plain HTTP servers - IIRC the browser displays a warning when that happens...</p>",
        "id": 213064035,
        "sender_full_name": "David Hay",
        "timestamp": 1602522674
    },
    {
        "content": "<p>Yeah, one possibility is to offer https-or-not, by hosting your app at https: and http: endpoints.</p>",
        "id": 213065670,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1602523666
    },
    {
        "content": "<p>We do this for <a href=\"http://launch.smarthealthit.org/\">http://launch.smarthealthit.org/</a> and <a href=\"https://launch.smarthealthit.org/\">https://launch.smarthealthit.org/</a></p>",
        "id": 213065685,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1602523675
    },
    {
        "content": "<p>Will give that a try...</p>",
        "id": 213067725,
        "sender_full_name": "David Hay",
        "timestamp": 1602524979
    }
]