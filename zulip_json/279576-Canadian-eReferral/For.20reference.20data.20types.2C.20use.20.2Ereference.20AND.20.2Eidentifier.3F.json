[
    {
        "content": "<p>For reference data types, is it ok to use both .reference AND .identifier - or should we choose only one of them to use?</p>",
        "id": 258189138,
        "sender_full_name": "Tim Berezny",
        "timestamp": 1634648191
    },
    {
        "content": "<p>You can have both.  The use-case for doing that is if you don't know whether your receiver will have the ability to resolve the resource, having just name (display) + identifier might be \"good enough\".  For a receiver who understands the reference and can resolve it, the identifier doesn't really buy anything.</p>",
        "id": 258192268,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1634649408
    },
    {
        "content": "<p>Great thanks, that's pretty close to the use case we were looking at.</p>\n<p>Tag <span class=\"user-mention\" data-user-id=\"330946\">@Jonathan Fishbein</span></p>",
        "id": 258542487,
        "sender_full_name": "Tim Berezny",
        "timestamp": 1634821954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> For eReferral we need to include multiple identifiers for ServiceRequest.provider.identifier, which is restricted to 0..1</p>\n<p>We're discussing three ways to add an extension to enable this:<br>\n1) add a valueIdentifier to ServiceRequest.provider<br>\n2) add a valueIdentifier to the <strong>reference</strong> dataType <br>\n3) add a valueIdentifier to the <strong>identifier</strong> dataType </p>\n<p>(possibly called something like \"additionalIdentifiers\")</p>\n<p>All three of these approaches could work for us I think, #2 feels the most intuitive to me. We MAY have a need for multiple reference identifiers in other elsewhere, unsure as of yet. Is there an approach that might be better than another from your perspective? Any of them feel like they might be useful to adopt into the standard extension set, if we do this thoughtfully.</p>\n<p>Tag <span class=\"user-mention\" data-user-id=\"330946\">@Jonathan Fishbein</span> , <span class=\"user-mention\" data-user-id=\"193891\">@Russell Buchanan</span></p>",
        "id": 266864078,
        "sender_full_name": "Tim Berezny",
        "timestamp": 1641330772
    },
    {
        "content": "<p>I think adding it to Reference is the appropriate choice here.  It's unfortunate that Reference.identifier is normative.  If we'd been smart, it should have been marked as STU because it was new in R4.  I think this makes sense to submit as a proposal for a standard extension.</p>",
        "id": 266876428,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1641337354
    },
    {
        "content": "<p>Wasnâ€™t there another discussion recently from someone wanting multiple Reference.identifiers?</p>",
        "id": 266876591,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1641337457
    },
    {
        "content": "<p>This sounds like a sensible change to me too (the multiple identifier in ref change - and yes shame to break Normative)</p>",
        "id": 266987089,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1641414685
    },
    {
        "content": "<p>Is changing reference.identifiers to an array something I should submit, or another process (it's not a process i'm overly familiar with).</p>\n<p>In the meantime then, I'll add an extension to reference.</p>",
        "id": 267905317,
        "sender_full_name": "Tim Berezny",
        "timestamp": 1642096121
    },
    {
        "content": "<p>You can propose it.  However, given that Identifier is normative, I expect it'll be a non-starter :(</p>",
        "id": 267913475,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1642099980
    },
    {
        "content": "<p>I think it would be helpful for FHIR-I (?) to decide on a common pattern for moving max 1 cardinality elements to max *. This came up with Observation specimen I believe, and it would be good to use the same approach. I think their proposal was to add a new multipleSpecimen element and a constraint that only one of specimen or multipleSpecimen element is populated. Waiting on FHIR-I and an update to the spec doesn't solve your issue in the mean time, so an extension seems like an appropriate way to go.</p>",
        "id": 267919629,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1642102725
    },
    {
        "content": "<p>MnM has this as an issue to formally document.  For a past release, an extension is your only option no matter what.  For a future release, what makes sense may vary.</p>",
        "id": 267946940,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1642116552
    },
    {
        "content": "<p>I think people probably don't want \"may vary\" to be too broadly and variably interpreted - it would be good to have a general pattern and approach that can be applied in most (even if not quite all) cases, when this kind of change needs to happen.</p>",
        "id": 268104871,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1642222447
    },
    {
        "content": "<p>May vary is unavoidable.  As an example, the Specimen solution of a new \"SpecimenGroup\" target makes sense and works very will for that circumstance.  It won't necessarily make sense in other places of type Reference, and it <em>can't</em> work in places that have differing data types.  In other places, the solution might be adding a supplemental core element, adding an extension, deprecating the current element and adding a new (differently named) element that supports repetition, or possibly even making a breaking change if we're willing to go through the hoops needed and the whole community is on-side.  All are viable and the trade-offs will need to be evaluated based on the circumstance.</p>",
        "id": 268153996,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1642290781
    }
]