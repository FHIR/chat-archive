[
    {
        "content": "<p>I'm working on generating the terminology validators for a locally deployed program edition.  I've <a href=\"https://github.com/onc-healthit/inferno-program#terminology-support\">run the steps</a>, but I'm trying to understand how the terminology container hooks up to the main docker containers.  Does the terminology docker container generate an SQLite database that I copy over into the main docker containers for the program edition?  Or does it host a terminology server that the main docker containers connect to in order to do validation at run-time?</p>",
        "id": 201430442,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1592594508
    },
    {
        "content": "<p>The output of the terminology process is only a number of files that get put in <code>{INFERNO_ROOT}/resources/terminology/validators/</code>.  Technically we are generating a whole bunch of bloom filters (one per ValueSet and CodeSystem) that lets us do a set inclusion check.  If that directory is empty then the process didn't work (let us know what you are seeing if that is the case and we'll help you figure out what went wrong).  If that directory contains files, then it should automatically be mounted as a volume in inferno's docker-compose file.  See <a href=\"https://github.com/onc-healthit/inferno-program/blob/master/docker-compose.yml#L9-L11\">https://github.com/onc-healthit/inferno-program/blob/master/docker-compose.yml#L9-L11</a></p>",
        "id": 201610373,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1592835184
    },
    {
        "content": "<p>FYI <span class=\"user-mention\" data-user-id=\"196762\">@Reece Adamson</span> <span class=\"user-mention\" data-user-id=\"191647\">@Michael O'Keefe</span> .</p>",
        "id": 201610624,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1592835319
    },
    {
        "content": "<p>One thing that is tripping a few people up is in <code>v1.0.0</code> we did a poor job of naming the docker container that generates the terminology within the terminology process, and it will run with the same container name as the main inferno application.  That was not intentional and we have a fix for that in the next release.  If something gets stuck it may be because of that conflict (we can show you how to fix manually if needed).</p>",
        "id": 201612113,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1592836052
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span> , I'll follow this thread too. Let me know if you run into any issues with the terminology building process, or have any questions!</p>",
        "id": 201615261,
        "sender_full_name": "Michael O'Keefe",
        "timestamp": 1592837452
    },
    {
        "content": "<p>I did end up getting the terminology files to generate.  Just in case folks are interested, since the terminology generation container needs such a beefy server, I ended up running the terminology file generation on a beefy AWS VM, then copying the output files to the directory on a different server where I'm hosting the program edition website container.  I did have a few issues on v0.9.6 that I never really investigated.  My success was using v1.0.2.</p>",
        "id": 203317290,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1594239423
    },
    {
        "content": "<p>Thanks for sharing your experience Cooper.  We are considering alternatives to this approach because having everyone regenerate valuesets is an awful waste of compute time.</p>",
        "id": 203321483,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1594241526
    },
    {
        "content": "<p>Would you mind sharing the manifest.yml file that was generated so we can double check that the right number of codes were generated?  Like this: <a href=\"https://gist.github.com/arscan/3b43e24746762afada9b77dd5ec1323f\">https://gist.github.com/arscan/3b43e24746762afada9b77dd5ec1323f</a></p>",
        "id": 203322242,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1594241915
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/FSv2vx4xD2RC6nbFIqYo0s6x/manifest.yml\">manifest.yml</a></p>",
        "id": 203385323,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1594301584
    },
    {
        "content": "<p>Honestly, the process itself wasn't that complicated.  The main issue I kept running into was that I was always running out of disk on the VM, so I kept having to expand and re-run, and I was always underestimating what I needed.  I'd go from 8 to 16 to 32 to 64 GB of storage.  Once I got a VM with the specs necessary, it was pretty smooth.  For reference, my VM was a t2.xlarge Ubuntu 18.04 with 64GB of storage and 16 GB of RAM.</p>",
        "id": 203385739,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1594301825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191764\">Cooper Thompson</span> <a href=\"#narrow/stream/179309-inferno/topic/Terminology.20Validators.20for.20Inferno.20Program.20Edition/near/201430442\">said</a>:</p>\n<blockquote>\n<p>I'm working on generating the terminology validators for a locally deployed program edition.  I've <a href=\"https://github.com/onc-healthit/inferno-program#terminology-support\">run the steps</a>, but I'm trying to understand how the terminology container hooks up to the main docker containers.  Does the terminology docker container generate an SQLite database that I copy over into the main docker containers for the program edition?  Or does it host a terminology server that the main docker containers connect to in order to do validation at run-time?</p>\n</blockquote>\n<p>hi Cooper, can you tell me how do i create .env file in root of Inferno project, as am not able to see .env file already</p>",
        "id": 206543484,
        "sender_full_name": "vency menezes",
        "timestamp": 1597126718
    },
    {
        "content": "<p>You can just use the text editor of your choice to create a new file, and name it \".env\".</p>",
        "id": 206571591,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1597151063
    }
]