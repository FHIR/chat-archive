[
    {
        "content": "<p>What is the current set of testing in Inferno around the Observation.effective[x] element? Of interest to me is:<br>\na) Variations on effectiveDateTime -- precision, timezone presence, offset presence<br>\nb) use of effectivePeriod<br>\nc) rather the use of effectiveTIming, and effectiveInstant</p>\n<p>I ask as am seeing most US-Core data using just effectiveDateTime... and having high variability on the (a) front. So wondered to what extent Inferno is covering the possibilities of variation... </p>\n<p>and thus wondering if there is a sample data (e.g. synthetic) that covers this full range.</p>",
        "id": 245961933,
        "sender_full_name": "John Moehrke",
        "timestamp": 1626270625
    },
    {
        "content": "<p>Inferno, as a test platform, does not include any functionality to track or enforce coverage of variations in elements / data types.  You can build that functionality in tests, as we have to a certain extent in the Inferno US Core tests (and copied into our IPS tests, and may others).  I do think that we should extract that kind of functionality out into the platform itself because it is broadly useful.</p>",
        "id": 245964788,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1626271816
    },
    {
        "content": "<p>I was not asking about observations where the .effective[x] changes over time... I am speaking to the case where data population has variation on how the .effective[x] is filled out.</p>",
        "id": 245965015,
        "sender_full_name": "John Moehrke",
        "timestamp": 1626271913
    },
    {
        "content": "<p>as in... some observations have just year, some have just year+month, some have just year+month+day, some have.....</p>",
        "id": 245965211,
        "sender_full_name": "John Moehrke",
        "timestamp": 1626271981
    },
    {
        "content": "<p>Sorry, by 'track' I meant look across a set of data and see what kinds of variations exist (and maybe add some rules about what a minimum set of variations are necessary to pass a test)</p>",
        "id": 245965432,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1626272059
    },
    {
        "content": "<p>For our US Core tests, we do not keep track of what variations have been shown by the responder, because there are no requirements in US Core for responders to support multiple variations.</p>",
        "id": 245965569,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1626272118
    },
    {
        "content": "<p>understood... so the answer is.. Inferno has no specific tests for varability in effective[x]... reasonable answer</p>",
        "id": 245965758,
        "sender_full_name": "John Moehrke",
        "timestamp": 1626272202
    },
    {
        "content": "<p>Inferno as a test platform does not, and Inferno US Core tests do not either.  You certainly could write a little bit of code as part of the test to keep track of that, but we haven't because we haven't needed it (yet).</p>",
        "id": 245965848,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1626272249
    },
    {
        "content": "<p>DateTimes are a bit like choice types, which brings me to b) and c).  Versions 1.0 - 1.3 of the Inferno US Core / g10 certification tests required systems to demonstrate all choice types for must support elements.  There was a lot of pushback against that interpretation by ONC, so the Inferno US Core tests were updated to only require demonstration of at least one choice for each must support element.  US Core v4.0.0 has been updated to be explicit about which choices must be supported for each must support element, so for testing that version we will take that into account.</p>",
        "id": 245966669,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1626272549
    },
    {
        "content": "<p>In the case of Observation.effectivePeriod, if a US Core v4.0.0 profile flags that choice as a must support, we will verify it is included when testing in the context of that profile.  For <a href=\"https://www.hl7.org/fhir/us/core/StructureDefinition-us-core-observation-lab.html\">lab result observations</a>, as an example, it looks like only the Observation.effectiveDateTime is flagged as must support, so we will only verify that choice exists in the data provided by the responder.</p>",
        "id": 245967357,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1626272849
    },
    {
        "content": "<p>As far as synthetic data that covers the full range... we do provide a <a href=\"https://github.com/inferno-community/uscore-data-sets\">data set</a>, based on synthea with a few post-process tweaks to ensure that we get patient records that cover all the things that we test.  At one point, I believe part of the tweaks were to update some must support choice-type data elements so that all choice variations were present.  But since Inferno US Core g10 tests were updated to not require seeing all choice variations, we may have pulled that logic out.  We did <strong>not</strong> touch the DateTime elements that came out of Synthea -- we just did provided whatever Synthea provided.  I would guess Synthea only provides one variant, but I'm not sure about that.</p>",
        "id": 245968640,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1626273403
    },
    {
        "content": "<p>If you'd like to see what we did, it is <a href=\"https://github.com/synthetichealth/synthea\">Synthea</a> -&gt; <a href=\"https://github.com/inferno-community/uscore-data-script\">US Core Data Script</a> -&gt; <a href=\"https://github.com/inferno-community/uscore-data-sets\">US Core Data Sets</a>.  The most recent data set is loaded onto <a href=\"https://inferno.healthit.gov/reference-server/r4\">https://inferno.healthit.gov/reference-server/r4</a></p>",
        "id": 245969103,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1626273609
    },
    {
        "content": "<p>Another layer to this is that the search API allows flexibility in what DateTime variants a server decides to support searching by. <br>\n For example, a system may decide only to allow searching by the date + time + timezone variant.  US Core v4.0.0 adds some constraints around that.</p>",
        "id": 245969939,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1626274049
    },
    {
        "content": "<p>thanks. I understand the scope and intent of Inferno... I was not being critical, I was investigating.</p>",
        "id": 245972528,
        "sender_full_name": "John Moehrke",
        "timestamp": 1626274953
    }
]