[
    {
        "content": "<p>Inferno test is for Delete Request, but Inferno is making GET request to the /$export, whereas, it should have sent a DELETE request to the content-location URL.</p>\n<p>I have never opened a ticket to Inferno before, but there needs to be one opened for this.  If someone could walk me through how to do that, I'd appreciate it.</p>",
        "id": 269135775,
        "sender_full_name": "Michelle Vondercrone",
        "timestamp": 1643043546
    },
    {
        "content": "<p>BDE-10 has two queries. The first is, as you mentioned, a GET to the $export endpoint to generate a new export request. The 2nd is a DELETE request to cancel the just created export request. The reason is that Inferno uses the export request created in BED-06 in the next test sequence \"Group Compartment Export Validation Tests\". Depending on server's business logic, the server MAY remove exported files with the DELETE request. To avoid that from happening, BED-10 creates and then deletes a separated $export request.</p>",
        "id": 269143889,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1643047019
    },
    {
        "content": "<p>BTW, <span class=\"user-mention\" data-user-id=\"258504\">@Michelle Vondercrone</span> here is how to open an Inferno ticket: <br>\nIf you are using web client, no matter it is <a href=\"http://inferno.healthit.gov\">inferno.healthit.gov</a> or locally installed docker image, you could find the \"Issues\" link at the bottom of page, like<br>\n<a href=\"/user_uploads/10155/mgoNus9VTjjVin2BukytBaeC/image.png\">image.png</a> <br>\nThat \"Issues\" link redirects to either <a href=\"https://github.com/onc-healthit/inferno-program/issues\">https://github.com/onc-healthit/inferno-program/issues</a> (for Inferno Program edition) or <a href=\"https://github.com/onc-healthit/inferno/issues\">https://github.com/onc-healthit/inferno/issues</a> (for Inferno Community edition).<br>\nThen you can create a new issue for Inferno following the template.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/mgoNus9VTjjVin2BukytBaeC/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/mgoNus9VTjjVin2BukytBaeC/image.png\"></a></div>",
        "id": 269149550,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1643049384
    },
    {
        "content": "<p>Problem wit BDE-10 for me is that we have coded condition where if the request is the same (same _type, same _since, same group id) and has not been previously deleted, we will return a http 409 for duplicate request.  :(</p>",
        "id": 269179314,
        "sender_full_name": "Michelle Vondercrone",
        "timestamp": 1643061825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191506\">@Yunwei Wang</span>  - any suggestions related to my previous comment?  Should I open a ticket to Inferno requesting changes for this test?</p>",
        "id": 269431462,
        "sender_full_name": "Michelle Vondercrone",
        "timestamp": 1643211802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258504\">@Michelle Vondercrone</span> sorry that I missed your reply. This is an interesting use case. Think about this work flow:</p>\n<ol>\n<li>Client creates an $export request, </li>\n<li>Server generates nsjson files, </li>\n<li>Client downloads those files (optional), </li>\n<li>Client create another $export request (with the same parameters: _type, _since, group id)<br>\nDoes your server reject the 2nd $export request in this work flow?</li>\n</ol>",
        "id": 269439405,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1643214464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191506\">@Yunwei Wang</span>  <br>\nYes, for #4 above, we would reject with a http 409 Duplicate Request.  We supply an Operation Outcome with this information: </p>\n<ol>\n<li>Severity = Error</li>\n<li>Code = Duplicate</li>\n<li>Details/Text = Existing request &lt;92d73dec-b9e8-436d-bc10-24deaa3287b8&gt; from population application  has the same parameter values. If the same export request is desired to pick up the latest data, a Delete Request can be performed against the existing request using URL: &lt;[http://ASCAPPNV8560.usmlvv1d0a.smshsc.net/Patientapi/fhir-api/bulk-api/r4/request/92d73dec-b9e8-436d-bc10-24deaa3287b8]&gt;.</li>\n<li>Diagnostics = Duplicate request received from population application  using the same values in _since parameter and in _type parameter. Reference id for support: [d948ebfa-6c3d-4a51-8d8b-a57685faaf26].</li>\n</ol>\n<p>If a DELETE request is sent (or a cancel request from a Request Manager UI we've created), then we set a Purge status = requested and then a new group export with those same values would be accepted without failure.</p>",
        "id": 269442110,
        "sender_full_name": "Michelle Vondercrone",
        "timestamp": 1643215410
    },
    {
        "content": "<p>This is interesting because after server generates ndjson files, the $export request is in complete status as defined <a href=\"http://hl7.org/fhir/uv/bulkdata/STU1.0.1/export/index.html#response---complete-status\">here</a>. Why does a server require client to send DELETE to a completed $export request? Assume a client runs daily export job, the client has to DELETE prior day's export first in order to run current day's export. Is that correct?</p>",
        "id": 269444480,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1643216279
    },
    {
        "content": "<p>Presumably the current day export would have a different _since from the last day one</p>",
        "id": 269459861,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1643222163
    },
    {
        "content": "<p>But still it seems fine for clients to request twice the same exact export - maybe the files got corrupted somehow, or maybe it just want all the new data and also the one it already got. I don't think a server should reject that</p>",
        "id": 269460014,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1643222236
    },
    {
        "content": "<p>Yes. I think it is reasonable to limit a client having one \"processing\" request at any time point but a server should allow a client to create new request after previous one completed.</p>",
        "id": 269461629,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1643222940
    }
]