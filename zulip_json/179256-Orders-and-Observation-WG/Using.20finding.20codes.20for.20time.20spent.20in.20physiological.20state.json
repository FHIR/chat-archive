[
    {
        "content": "<p>(Travelling thread - moved at the suggestion of <span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span>, previous incarnation is <a href=\"#narrow/stream/179202-terminology/topic/Using.20finding.20codes.20for.20time.20spent.20in.20physiological.20state\">this thread</a> in <a class=\"stream\" data-stream-id=\"179202\" href=\"/#narrow/stream/179202-terminology\">#terminology</a> )</p>\n<p>I am looking at encoding measurements from wearable devices in Observations - specifically, data about when (or for how long) a user had poor posture (as detected by the device). There is, understandably, no LOINC code for \"time spent in poor posture\". However, there <em>are</em> SNOMED finding codes for poor posture. I imagine this is not an unusual situation, especially with wearables: I want to capture \"period/total tim spent in state X\" where X is some physiological state (in poor posture, low blood sugar, asleep etc.) for which there is a SNOMED finding code for X. One could of course define custom codes, but it seems desirable to leverage the fact that we already have a clean well-known code for X. So my question is: Is it possible to \"post-coordinate\" a SNOMED finding code for X in an Observation resource to communicate </p>\n<ol>\n<li>\"total time spent in state X\" and</li>\n<li>\"period spent in state X\"??</li>\n</ol>\n<p>E.g one could image setting <code>Observation.code</code> to the SNOMED finding code and then, for case (1) using <code>Observation.valueQuantity</code> to communicate the amount of time in this state, or, for (2) to use <code>Observation.valuePeriod</code> to communicate the period in this state (with <code>Observation.effectivePeriod</code> given the total observation time/reference time). Lloyd indicated that there are mechanisms to combine observation codes and <code>components</code> to communicate such things - I would be very interested in hearing about that.</p>",
        "id": 261751033,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1637134219
    },
    {
        "content": "<p>Comment by <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> in previous thread:</p>\n<blockquote>\n<p>Yes, there's a handful of \"Duration of X\" concepts in the SNOMED Observable entity hierarchy, but sadly no underlying modelling pattern that could be adopted to do some kind of (SNOMED) post coordination approach.  Foe example, <code>Duration of seizure</code> has no relationships to a general concept of <code>Duration</code> nor even to <code>Seizure</code>.</p>\n</blockquote>",
        "id": 261751290,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1637134562
    },
    {
        "content": "<p>I recommend using one Condition and one Observation. </p>\n<p>In this case, you are making an observation about a condition (the patient having poor posture).  <a href=\"https://build.fhir.org/observation-definitions.html#Observation.focus\">Observation.focus</a>  allows you to reference a condition whose code represents poor posture.  Observation.code should represent the attribute \"duration\", Observation.effective represents the observation period, and Observation.value is the duration of the condition during the Period of observation. </p>\n<p>(I've used this pattern to represent the size of a tumor, where the tumor itself is represented by a BodyStructure resource:  BodyStructure.code = Tumor, Observation.focus = Reference(BodyStructure), Observation.code = Length of Tumor, Observation.value = 4 mm. )</p>",
        "id": 262349322,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1637601270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191447\">@Mark Kramer</span>  Thanks for the suggestion! - that's an interesting take on it &amp; would allow a clean \"separation of codes\" between the resources.</p>\n<p>However, as far as I understand it, the kind of states I have in mind do not necessarily qualify as conditions. The poor posture occurrence I want to capture may simply be the fact that someone is slumped over at their desk for 10 minutes, even if it has no negative health impact. Indeed, the state may even be smt. that benefits your health, like \"physically active\". Since we are capturing periods of occurrences, the states are also have an \"on-off-nature\", which (again, as far as I understand) might make them less appropriate as Conditions. There is also the question of whether it is the <em>same</em> Condition instance (e.g. \"poor posture\") that re-occurs every time we measure it, or whether each measurement is a new Condition - neither seems perfect. For those reason, I was hoping for an Observation-only pattern.</p>",
        "id": 262563450,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1637745739
    },
    {
        "content": "<p>The focus is Reference(Any). So you could in theory make an Observation about an Observation.</p>",
        "id": 262955908,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1638144333
    },
    {
        "content": "<p>Good point, I suppose I could always create an Observation stating that the state in question was present on a given day &amp; then have a second Observation for the exact time period pointing to it via <code>focus</code>. The code on the latter would then have specify the time/period of interest in completely general terms (\"time spent in state\") - I wonder if such codes are available, will need to check. Seems like it could be a possible solution (though I'm a little worried about forcing clients to handle two linked resources per data point).</p>",
        "id": 263000911,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1638188724
    },
    {
        "content": "<p>LOINC does have codes for \"procedure duration\" and \"observation duration\" that I suspect could be used someone was timing/observing how long the patient was in poor posture.</p>",
        "id": 265882201,
        "sender_full_name": "Andrea Pitkus, PhD, MLS(ASCP)CM, CSM",
        "timestamp": 1640233216
    }
]