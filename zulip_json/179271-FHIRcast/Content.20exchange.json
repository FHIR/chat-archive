[
    {
        "content": "<p>Isaac indicated that it would be wise to bring this to the FHIRcast github repo. What would be a good place to put the different proposals and discussion items in this repo?  A new page in the wiki?</p>",
        "id": 211163726,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1600968541
    },
    {
        "content": "<p>Hey Bas, the wiki would work fine. I'd actually recommend it as a new .md file in the repo, so that we get actual version control, though.</p>",
        "id": 211198384,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1600987365
    },
    {
        "content": "<p>I've uploaded a first version of a potential spec text based on the presentation discussed during the connecthaton to the wiki: <a href=\"https://github.com/HL7/fhircast-docs/wiki/Data-storage-and-content-synchronization-----FHIR-server-option\">https://github.com/HL7/fhircast-docs/wiki/Data-storage-and-content-synchronization-----FHIR-server-option</a></p>",
        "id": 211920951,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1601563406
    },
    {
        "content": "<p>Hi Bas, thanks for the proposal.  I am in general agreement.<br>\nI would prefer to use REST to create FHIR resources but I have tried to implement REST over SSL for posting user commands and gave up.  it is simply too sluggish for desktop integration.  For every action, you need a new connection, go through the ssl handshake - exchange and verify certificate chain - and then the command is sent.  This takes 500ms to 1000ms.  When I send the same FHIRcast command over the secure websocket, it takes less than one millisecond because the connection is already established.   The user experience is much better over websocket than rest and I can’t justify using rest.<br>\nAre you having the same issue?<br>\nFrom my perspective, I would need to focus on using FHIR messaging instead of rest),  if we are to deliver a responsive user experience.  Perhaps by adding scratchpad-update and scratchpad-search to FHIR message events?<br>\n<a href=\"http://www.hl7.org/fhir/stu3/valueset-message-events.html\">http://www.hl7.org/fhir/stu3/valueset-message-events.html</a></p>",
        "id": 213013022,
        "sender_full_name": "Martin Bellehumeur (Visage Imaging)",
        "timestamp": 1602493034
    },
    {
        "content": "<blockquote>\n<p>For every action, you need a new connection, go through the ssl handshake - exchange and verify certificate chain - and then the command is sent. </p>\n</blockquote>\n<p>Is this something specific in FHIRcast? HTTPS allows for the Keep-Alive, is that not usable here?</p>",
        "id": 213074929,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1602529296
    },
    {
        "content": "<p>For me, the https connection drops after 3 minutes. Then it’s a reconnect with TLS client/server hello. The websocket connection stays up and it has a heartbeat and reconnect method.  Maybe the hub can do set something to maintain https socket open.  I’ll give it another try.</p>",
        "id": 213137759,
        "sender_full_name": "Martin Bellehumeur (Visage Imaging)",
        "timestamp": 1602586539
    },
    {
        "content": "<p>Taking 500ms to 1000ms for a simple PUT or POST is indeed long. If 500ms to 1000ms are typical values for such interactions, than this will impact other, non FHIRcast, use cases as well. They are longer than my experience with calls on the Cerner and Epic sandboxes. Which server did you use?</p>",
        "id": 213209126,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1602619104
    },
    {
        "content": "<p>If I understand your proposal correctly, you propose to use FHIR events to address this issue. In FHIRcast sending events is done using the RESTfull API. Websockets are only used for receiveing events. I do not understand how using FHIRcast events for updating the scratchpad would solve this issue. Do I miss anything?</p>",
        "id": 213209352,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1602619219
    },
    {
        "content": "<p>The hub is somewhere in the US and I am in Frankfurt. <br>\nThis is what I see in wireshark for a FHIRcast event (https post):<br>\n<a href=\"/user_uploads/10155/9Q1b8DTSCHJDQxN8K9JO5McZ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/9Q1b8DTSCHJDQxN8K9JO5McZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/9Q1b8DTSCHJDQxN8K9JO5McZ/image.png\"></a></div>",
        "id": 213250916,
        "sender_full_name": "Martin Bellehumeur (Visage Imaging)",
        "timestamp": 1602657295
    },
    {
        "content": "<p>In the first iteration of websockets for FHIRcast, events were sent over the websocket connection and early hubs did it that way.<br>\nI was thinking using FHIR messaging (not FHIRcast events) to create FHIR resources in the scratchpad since we cannot do rest on the websocket directly.<br>\nThe solution to the https connect latency could be to keep the https socket to the hub open and send the rest/event commands without reconnect for the whole session.  But then I would need to add a heartbeat and reconnect to the http connection; similar to what websocket has natively.   The PACS application survives a network bounce and the integration has too as well to pass the test protocols.</p>",
        "id": 213250945,
        "sender_full_name": "Martin Bellehumeur (Visage Imaging)",
        "timestamp": 1602657339
    }
]