[
    {
        "content": "<p>Hallo in die AG-Runde,<br>\nich möchte nochmal auf die im letzten AG Meeting besprochen Akteure/Systeme und deren Interaktionen eingehen. Um für mich zu verstehen, ob bei dem diskutierten Vorschlag der Scope hinreichend definiert wurde, habe ich versucht in einer Systemübersicht die verschiedenen Use Cases abzubilden, zusammen mit den jeweils zu implementierenden Akteuren und deren Transaktionen.</p>\n<p>Im folgenden werden diese Systeme beispielhaft dargestellt:</p>\n<ul>\n<li>KIS</li>\n<li>Onlinebuchungs-Anwendung</li>\n<li>Kiosk-Anwendung</li>\n<li>Warteschlangen-Anwendung</li>\n<li>RIS als terminverwaltendes System</li>\n<li>Patientenportal als terminverwaltendes System</li>\n</ul>\n<p>In den Systemen gibt es:</p>\n<ul>\n<li>Schwarz dargestellte Akteure: diese tauschen Informationen über die Systemgrenzen hinweg aus und müssen im Rahmen der AG spezifiziert werde.</li>\n<li>Grau dargestellte Akteure: diese sind jeweils im System intern, werden nicht exponiert und müssen entsprechend auch nicht spezifiziert werden. Die grauen Akteure sind nur der Vollständigkeit halber dargestellt. Interaktionen zwischen den Akteuren innerhalb eines Systems sind Teil der Business Logik des Systems. Je nach System und Hersteller kann die interne Logik anders umgesetzt werden. Das bleibt dank der Schnittstelle, die durch die schwarzen Akteure gegeben ist, nach außen transparent.</li>\n</ul>\n<p><a href=\"/user_uploads/10155/k2EvjtWC2X45sZvmIsgWtcrV/Screenshot-2021-12-14-at-12.28.04.png\">Systemübersicht und Interaktionen</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/k2EvjtWC2X45sZvmIsgWtcrV/Screenshot-2021-12-14-at-12.28.04.png\" title=\"Systemübersicht und Interaktionen\"><img src=\"/user_uploads/10155/k2EvjtWC2X45sZvmIsgWtcrV/Screenshot-2021-12-14-at-12.28.04.png\"></a></div><p>Im Gegensatz zu dem in der AG Sitzung präsentierten Vorschlag, gibt es keine direkte Interaktion zwischen den Termin Repositories. Die Synchronisation der Termin Repositories erfolgt stattdessen über den Termin Consumer des Client Systems (lesen) und den Termin Requestor des Client Systems (schreiben). Prämisse ist, dass die Subscriptions in Isik v2 leider nicht zur Verfügung stehen werden. In dieser Konstellation passen dann auch im die präsentierten Definitionen der Akteure:</p>\n<ul>\n<li><strong>Termin Consumer:</strong> Client, der Informationen aus einem Termin-Repository abruft, um diese verwenden zu können z.B. für die Anzeige von Terminen, Benachrichtigung weiterer systeminternen Akteure</li>\n<li><strong>Termin Requestor:</strong> Akteur, der die Buchung eines Termins in einem Termin Repository ermöglicht. Optional kann dieser Client vor der Buchung die Terminblockabfrage mit dem internen oder externen Terminblock Repository koordinieren.</li>\n<li><strong>Terminblock Repository:</strong> Akteur, der die Informationen bezogen auf die Terminblöcke vorhält (optional: persistiert). Das Terminblock Repository ermöglicht eine Abfrage dieser Informationen über eine wohldefinierte API.</li>\n<li><strong>Termin Repository:</strong> Akteur, der die Informationen bezogen auf die Termine vorhält und persistiert. Das Termin Repository ermöglicht eine Abfrage dieser Informationen über eine wohldefinierte API. </li>\n</ul>\n<p>In der Übersicht sind folgende Transaktionen enthalten:</p>\n<ul>\n<li>\n<p>APP-1: Termin Requestor erstellt, ändert, löscht einen Termin</p>\n<ul>\n<li>\n<p>APP-1A: Termin kommt aus einem System mit eigener Verfügbarkeitslogik (Terminblock Repository). Der Termin wird durch das Termin Repository validiert.<br>\nTermin wird mit appointment.status=booked gesendet<br>\nDie Konfiguration der System muss sicherstellen, dass ein Termin immer gebucht werden kann.</p>\n</li>\n<li>\n<p><strong>APP-1B:</strong> Termin kommt aus einem System, was vorher die Verfügbarkeiten (Terminblöcke/Slots) von dem Terminblock Repository abfragt.<br>\nTermin wird mit appointment.status=proposed übertragen<br>\nDer Termin kann durch das Termin Repository abgewiesen werden.<br>\nDer Termin kann vom Termin Repository entgegengenommen werden (Response mit technische ACK) und könnte anschließend durch ein User bestätigt werden (manueller Statuswechsel auf appointment.status=booked).<br>\nIm Happy-Case wird der Termin direkt mit appointment.status=booked gespeichert (Response mit fachlichem ACK, appointment.status=booked)<br>\nEine erfolgreiche Buchung (Änderung auf appointment.status=booked) muss mit Hilfe des Termin Consumers gepollt werden</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>APP-2:</strong> Termin Consumer fragt mit bestimmten Suchparametern eine Liste von Terminen vom Termin Repository ab (on demand, polling oder später via Subscriptions):</p>\n<ul>\n<li><strong>APP-2A:</strong> filter by patient</li>\n<li><strong>APP-2B:</strong> filter by resource</li>\n<li><strong>APP-2C:</strong> filter by date, resource etc.</li>\n<li><strong>APP-2D:</strong> filter by source, ID</li>\n</ul>\n</li>\n<li><strong>APP-3:</strong> Termin Requester fragt (wahrscheinlich in Kombination mit APP-1) gemäß der übergebenen Suchparameter Verfügbarkeiten (Terminblöcke/Slots) von dem Terminblock Repository ab, um damit einen Termin zu buchen. APP-3 wird in einer Sequenz mit APP-1B durchgeführt, Abfrage von Verfügbarkeiten mit anschließender Buchung eines Termins.</li>\n</ul>\n<p><strong>Gern würde ich diese Transaktionen auf die Sequenzdiagramme mappen, die in der letzten AG Sitzung vorgestellt wurden. Könnten Sie <span class=\"user-mention\" data-user-id=\"193430\">@Alexander Zautke</span>  die Zwischenergebnisse mit uns teilen?</strong><br>\nGenerell muss auch noch über das Statusnetzwerk gesprochen werden. Je nachdem, ob einem Termin eine Verfügbarkeitsabfrage vorausgeht, werden verschiedene Statuswechsel möglich sein.</p>",
        "id": 264842720,
        "sender_full_name": "Rudi Kallenberg",
        "timestamp": 1639481035
    },
    {
        "content": "<p>Ein weiteres Hallo in die AG-Runde,<br>\nDieser Betrag schließt an die Systemübersicht  an. Im letzten AG Meeting hatte ich Unschärfen in der Client/Server Beziehung wahrgenommen. Das betraf insbesondere der Synchronisation zwischen zwei Termin Repositories. Wenn ich mich recht erinnere, wurden da z.T. Server - Server Interaktionen beschrieben. Aus diesem Grund möchte ich nochmal einen Schritt zurück gehen und sicherstellen, dass wir alle von den gleichen Integrationsszenarien ausgehen.</p>\n<p><a href=\"/user_uploads/10155/7SWAmCArbpJL-Tu6glIHj5Y3/Screenshot-2021-12-14-at-13.12.46.png\">Request Response Interaktionen</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/7SWAmCArbpJL-Tu6glIHj5Y3/Screenshot-2021-12-14-at-13.12.46.png\" title=\"Request Response Interaktionen\"><img src=\"/user_uploads/10155/7SWAmCArbpJL-Tu6glIHj5Y3/Screenshot-2021-12-14-at-13.12.46.png\"></a></div><p><strong>In dieser Darstellung ist das KIS der FHIR Server und die anderen Anwendungen sin FHIR Clients. Ist diese Annahme korrekt?</strong> Falls es andere Konstellationen geben kann, müssten diese im Rahmen der AG besprochen und beschrieben werden. </p>\n<p>Daraus lassen sich folgende HTTP Request/Response Interaktionen ableiten:</p>\n<ul>\n<li><strong>Termin Consumer:</strong> FHIR Client implementiert GET /Appointment (Suchparameter möglich)</li>\n<li><strong>Termin Requestor:</strong> FHIR Client implementiert POST /Appointment, PUT /Appointment, DELETE /Appointment; Optional (wenn ein externes Terminblock Repository verwendet wird): GET /Slot, GET /Schedule, GET /Behandlungsleistung, um buchbare Slots zu ermitteln</li>\n<li><strong>Terminblock Repository:</strong> FHIR Server implementiert die Response auf GET /Slot, GET /Schedule, GET /Behandlungsleistung.</li>\n<li><strong>Termin Repository:</strong> Server implementiert die Antwort auf GET, POST, PUT, DELETE /Appointment</li>\n</ul>\n<p>Bei der Erstellung der Sequenzdiagramme sind meines Erachtens nur diese Request/Response interaktionen zwischen den Akteuren zulässig.</p>",
        "id": 264847874,
        "sender_full_name": "Rudi Kallenberg",
        "timestamp": 1639484079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191549\">@Frank Oemig</span> <span class=\"user-mention\" data-user-id=\"368340\">@Rudi Kallenberg</span> <span class=\"user-mention\" data-user-id=\"251855\">@Pavlo Dyban</span> <span class=\"user-mention\" data-user-id=\"191964\">@Bettina Lieske</span> <span class=\"user-mention\" data-user-id=\"197429\">@Axel Biernat</span> </p>\n<p>Die finalen Sequenzdiagramme der Interaktionen, sowie die Übersicht der Akteure sind nun in der Ballotierungsversion hier veröffentlicht: <a href=\"https://github.com/gematik/ISiK-Terminplanung/tree/master/Material\">https://github.com/gematik/ISiK-Terminplanung/tree/master/Material</a>. Darüber hinaus findet sich in diesem IG die Beschreibung der Akteuere: <a href=\"https://simplifier.net/guide/isik-terminplanung-test/Akteure\">https://simplifier.net/guide/isik-terminplanung-test/Akteure</a>. Bitte beachten, dass dies aus technischen Gründen gerade noch ein privates Testprojekt ist. Der IG wird demnächst wieder verschwinden.</p>",
        "id": 276176646,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1647949985
    },
    {
        "content": "<p>Die Beschreibung der Interaktionen folgt auch zeitnah bis Freitag im IG. Gerne vorab hier schonmal Feedback dazu geben oder ansonsten am Freitag im Abstimmungstermin.</p>",
        "id": 276176724,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1647950035
    },
    {
        "content": "<p>Update: Die initiale Beschreibung der Interaktionen sind auch online.</p>",
        "id": 276184666,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1647954161
    },
    {
        "content": "<p>Der IG findet sich nun im finalen Simplifier Projekt hier, der alte Link ist nicht mehr gültig: <a href=\"https://simplifier.net/guide/isik-terminplanung?version=current\">https://simplifier.net/guide/isik-terminplanung?version=current</a></p>",
        "id": 276784659,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1648382339
    }
]