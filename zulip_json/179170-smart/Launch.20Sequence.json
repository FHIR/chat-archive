[
    {
        "content": "<p>An EHR initiates a “launch sequence” by opening an instance pointing to the app’s registered launch URL and passing some context.</p>\n<p>The parameters <strong>iss </strong>and <strong>launch</strong> are included. For the <strong>launch</strong> we need an opaque identifier, and any EHR context associated with it. This parameter must be communicated back to the EHR at authorization time by passing along a launch parameter (see example below).</p>\n<p>So is the following “launch sequence” allowed: GET <a href=\"https://app/launch?iss=https://ehr/fhir&amp;launch=xyz123&amp;patient=abc&amp;task=123\">https://app/launch?iss=https://ehr/fhir&amp;launch=xyz123&amp;patient=abc&amp;task=123</a> according SMART?</p>\n<p>I'm passing extra info about patient=abc and task=123 EHR context</p>",
        "id": 225306354,
        "sender_full_name": "B Stibbe",
        "timestamp": 1612536211
    },
    {
        "content": "<p>This is <em>not correct</em>. Contextual data (and especially sensitive data like a patient ID) should not be passed to SMART apps via URL parameters. Instead, give the app an opaque <code>launch</code> parameter, and then <em>at the end of the authorization process</em> return the data you need as part of the access token response.</p>",
        "id": 225306903,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1612536464
    },
    {
        "content": "<p>Specifically for <code>patient</code>: this is a defined launch context parameter that we document for inclusion in the access token response. You can follow this pattern with <code>task</code> if you have a use case for task-passing.</p>",
        "id": 225307045,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1612536505
    },
    {
        "content": "<p>How does the *authorization process * get the EHR context from the host?</p>",
        "id": 225313936,
        "sender_full_name": "B Stibbe",
        "timestamp": 1612539528
    },
    {
        "content": "<p>That's an internal choice; you get one parameter (<code>launch</code>) to use to make the connection. One example would be: EHR writes context to a database, keyed by a random <code>launch</code> value; and authz server can read from that db.</p>",
        "id": 225314178,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1612539628
    },
    {
        "content": "<p>Ok. So the EHR and the authz server shares the EHR context and the authz server passes this info via the token response.....</p>",
        "id": 225314533,
        "sender_full_name": "B Stibbe",
        "timestamp": 1612539767
    },
    {
        "content": "<p>Yes, you've got it.</p>",
        "id": 225320062,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1612541969
    },
    {
        "content": "<p>It looks like if you post an launch artifact (like SAML). But you should get this artifact (first) from the authz server. The launched application delivers the launched artifact to the authz server and response with the access_token and other context.</p>\n<p>Nice, but this is not a current SMART standard.........</p>",
        "id": 225321929,
        "sender_full_name": "B Stibbe",
        "timestamp": 1612542812
    },
    {
        "content": "<p>I'm not following. The SMART App Launch standard provides a way to communicate (arbitrary) launch context to an app, ensuring it only becomes available once authorization is complete.</p>",
        "id": 225322400,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1612543015
    },
    {
        "content": "<p>I get that part. But the first part, to use the launch parameter as an artificat or key to get launch content from the authz server.</p>",
        "id": 225322781,
        "sender_full_name": "B Stibbe",
        "timestamp": 1612543169
    },
    {
        "content": "<p>Or the communication between the host and the authz server about the launch parameter.</p>",
        "id": 225323017,
        "sender_full_name": "B Stibbe",
        "timestamp": 1612543264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191315\">Josh Mandel</span> <a href=\"#narrow/stream/179170-smart/topic/Launch.20Sequence/near/225314178\">said</a>:</p>\n<blockquote>\n<p>That's an internal choice; you get one parameter (<code>launch</code>) to use to make the connection. One example would be: EHR writes context to a database, keyed by a random <code>launch</code> value; and authz server can read from that db.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>  how do you passes the launch context endpoint or the db entry to the authz server. This must be done befor we start the launch? Do we have an launch context endpoint extension for the CapabilityStatement?</p>",
        "id": 242068993,
        "sender_full_name": "Bernard Stibbe",
        "timestamp": 1623247031
    },
    {
        "content": "<p>There is no such thing as a \"launch context endpoint\". Apps supporting the EHR launch sequence have a <em>launch endpoint</em>;</p>",
        "id": 242070209,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1623247437
    },
    {
        "content": "<p>When launching such an app, the EHR redirects to that endpoint and includes a URL parameter called <code>launch</code>.</p>",
        "id": 242070292,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1623247462
    },
    {
        "content": "<p>Ok. Launch context endpoint is the wrong definition for getting the launch context. But how does the  authz server get the endpoint (or entry) of the launch context?</p>",
        "id": 242085031,
        "sender_full_name": "Bernard Stibbe",
        "timestamp": 1623252918
    },
    {
        "content": "<p>Non-programmatically. Someone maintain the list of apps the EHR 'knows' with the corresponding launch end point for each</p>",
        "id": 242087760,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1623253977
    },
    {
        "content": "<p>And note this is the same as for \"how does any app register with the EHR\".</p>",
        "id": 242089003,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1623254457
    },
    {
        "content": "<p>Hello, I understand the registered launch endpoint. </p>\n<p>So <br>\n1) I prepare a \"launch context\" (e.g prepare a FHIR Task for an application) and a launch handle, before I launch the application<br>\n2) I launch the application, passes the lauch parameter (or handle) to that application together with the iss parameter.<br>\n3) The started application passes the launch handle to the authorization server, in or with the scope of the auth request<br>\n4) somehow the authorization server needs to know where the location is (or endpoint) of this launch context. How does the authorization server knows where to find this luanch context?</p>\n<p>Has somebody some example how this work with OAuth2/OpenID Connect?</p>",
        "id": 242178060,
        "sender_full_name": "Bernard Stibbe",
        "timestamp": 1623316123
    },
    {
        "content": "<blockquote>\n<p>How does the authorization server knows where to find this luanch context</p>\n</blockquote>\n<p>Up to the implementation. For example: the EHR saves the launch context data in a database, the launch context is the database id of this data, the authorization server retrieves the data from that database (or instead of 'database' it can be a shared service etc)</p>",
        "id": 242196273,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1623327386
    },
    {
        "content": "<p>Functionally speaking, the important thing is that the launch context needs to be tamper-proof. In other words, an outside party should not be able to tweak/change the <code>launch</code> parameter to manipulate the context. The EHR can prevent this by creating a one-time-use database id, or a signed assertion, etc.</p>",
        "id": 242238981,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1623344865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span>  Thanks for the explanation, but ...<br>\nHere comes my question: How does the authorization server know the location or url or ... of that database or shared service?</p>",
        "id": 242310320,
        "sender_full_name": "Bernard Stibbe",
        "timestamp": 1623397045
    },
    {
        "content": "<p>In the usual ways a piece of software 'knows' anything: hard-wired in its code, read from a configuration file, fetched from _another_ service etc.</p>",
        "id": 242338393,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1623414964
    },
    {
        "content": "<p>The upshot is that the 'EHR' that launches the app, the authorization server that controls access and the FHIR server that provides the data have to be tightly coupled - they are not really separate systems, they are just different pieces of the same system really</p>",
        "id": 242338553,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1623415061
    }
]