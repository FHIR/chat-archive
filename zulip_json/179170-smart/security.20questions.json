[
    {
        "content": "<p>Hi all! Could you help me to understand some use cases of Smart on FHIR (v1)?</p>\n<p>I have a FHIR Server on <code>[base-url]</code> and an Authorization Server on <code>[auth-server]</code>. And a user has an access to couple of Patients resources and their clinical data (pt-1 &amp; pt-2).</p>\n<p>1) Let's suppose that the user provided a grant to 3rd party app within next scope 'patient/Patient.read patient/Observation.read patient/Observation.write' and patient=pt-1 in context. As a 3rd party, what responses should I expect?</p>\n<div class=\"codehilite\"><pre><span></span><code>GET [base-url]/Patient/pt-1\nGET [base-url]/Observation?subject=pt-1\nGET [base-url]/Patient/pt-1/Observation\n\nGET [base-url]/Patient\nGET [base-url]/Patient/pt-2\nGET [base-url]/Observation?subject=pt-2\nGET [base-url]/Observation?subject=pt-3\nGET [base-url]/Observation\n\nPOST [base-url]/Observation\n\nsubject:\n  reference: Patient/pt-2\n</code></pre></div>\n<p>I believe that the first three requests should return 200 OK + data, and the rest of them 403 Unauthorized. Right? Or it depends on something?</p>\n<p>2) Let's say we have not Observation, but CommunicationRequest resource. Which are search parameters available for 3rd party app within patient/CommunicationRequest.read scope? subject, sender, recipient, requester?</p>\n<p>3) I'm thinking of building a tenant-based FHIR API which uses user-id as url prefix for every request.</p>\n<div class=\"codehilite\"><pre><span></span><code>[base-url]/user/&lt;user-id&gt;/Patient/pt-1 =&gt; 200 OK\n[base-url]/user/&lt;user-id&gt;/Patient/pt-2 =&gt; 200 OK\n[base-url]/user/&lt;user-id&gt;/Patient/pt-3 =&gt; 404 Not Found\n</code></pre></div>\n<p>I would say I have a lot of logical FHIR Servers on top of physical one. In case of EHR launch I could provide different iss parameters depending on the user who launched the app, so it could help me simplify access control module.</p>\n<p>But I can't find an answer if it's possible to make something similar in case of Standalone launch. It seems like 3rd party app should know the only base-url and use it for every user? Is it possible to subsistute [base-url] somehow while launching?</p>",
        "id": 252532988,
        "sender_full_name": "Vlad Ganshin",
        "timestamp": 1631135203
    },
    {
        "content": "<p>For (1): in our server they are all 200 OK, they just return only the data of pt-2, so GET [base-url]/Observation?subject=pt-2 returns an empty bundle</p>",
        "id": 252546479,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1631141793
    },
    {
        "content": "<p>(2) Which search parameter are available is unrelated to the scopes</p>",
        "id": 252546531,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1631141828
    },
    {
        "content": "<p>(3) Don't think that would work, clients expect a fixed URL to connect to</p>",
        "id": 252546661,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1631141893
    },
    {
        "content": "<p>(1.1) We have the same solution for now, but I'm not sure if it's correct using Authorization header as an implicit parameter for business logic. Will my server be conformant with FHIR Specification (which is RESTful) if it provides different responses on the same url depending on Authorization header? I believe, that according to REST, the role of Access Conrol is only accept/reject requests, but not influence on the result. So, I would say that in this case our FHIR Servers are not conformant with FHIR Specification. Is it correct, or I miss something?</p>\n<p>(1.2) And what about saving resources (POST/PUT/PATCH)? Should my FHIR Server set reference to the patient implicitly or validate and require correct reference value in the body?</p>\n<p>(2) From the smart app developer point of view, how should I understand which endpoints (or/and search parameters) are available within a specific scope I got from user? Does specification have this answer, or I have to adopt my application to every specific FHIR Server?</p>\n<p>(3) I feel that the specification tries to connect Smart App Developer and FHIR Server Developer and it provides a concrete authentication flow. But as a Smart App dev, once I have a token, I don't see my capability within my scopes. And as FHIR Server dev I don't see a standard way to provide such capabilities.</p>\n<p>So, once FHIR Server provided 'patient/Patient.read patient/Observation.*' scope, does it obligated to accept requests to <code>[base-url]/Patient/&lt;pt-id&gt;, [base-url]/Observation</code>, etc?</p>\n<p>Will my server be conformant with FHIR if I just say in documentation, that within <code>patient/...</code> scopes smart app should use another base-url. e.g. <code>[base-url]/patient/&lt;pt-id&gt;</code> (<code>[base-url]/patient/Â«pt-id&gt;/Patient/&lt;pt-id&gt;, [base-url]/patient/&lt;pt-id&gt;/Observation</code>).</p>",
        "id": 252581532,
        "sender_full_name": "Vlad Ganshin",
        "timestamp": 1631171898
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhir/security.html#AccessDenied\">http://hl7.org/fhir/security.html#AccessDenied</a></p>",
        "id": 252614965,
        "sender_full_name": "John Moehrke",
        "timestamp": 1631189857
    },
    {
        "content": "<p>policies are important. principles of REST do not override policies.</p>",
        "id": 252615051,
        "sender_full_name": "John Moehrke",
        "timestamp": 1631189887
    },
    {
        "content": "<p>In general with smart, it is okay for a server to reject a query prospectively/statically because of scopes. It is also okay for a server too simply redact results because of scopes. We don't have prescriptive behavior on this. The only thing it's not okay to do is return data beyond what the scopes allow.</p>",
        "id": 252620046,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1631192133
    },
    {
        "content": "<p>The question of what endpoints are available is somewhat orthogonal to your scopes. For example, a server might advertise in its documentation or in its capability statement that it supports a \"batch\" endpoint; if it does, clients can call this end point with requests that are consistent with the available scopes. If it does not, clients can't.</p>",
        "id": 252620214,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1631192200
    },
    {
        "content": "<p>I wonder SMART on FHIR based on baseUrl convention instead of more flexible HATEOAS. Why server after auth could not just return explicit baseUrl for the client with access_token ?</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  access_token: ....\n  fhirBaseUrl: ....\n}\n</code></pre></div>",
        "id": 252628576,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1631195334
    },
    {
        "content": "<p>Compartments like  /Patient/&lt;id&gt;/{metadata,Observation,Encounter} look like good fit  for SMART  Clients and Servers.</p>",
        "id": 252629124,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1631195536
    },
    {
        "content": "<p>Thank you! I do missed that part in Access Denied Response Handling chapter.</p>\n<p>Just to clarify, if I have a FHIR Server which is rich on capability, it is ok to restrict some access depending on client type, not only scopes provided to that client, isn't it?</p>",
        "id": 252629151,
        "sender_full_name": "Vlad Ganshin",
        "timestamp": 1631195550
    },
    {
        "content": "<p>That would work for areas like the patient compartment where fhir explicitly defines some context, but the mapping breaks down pretty quickly too. For example even with \"patient\" compartments, a smart app authorized to access data about a given patient might be able to see certain data outside of a compartment, such as data directly linked from or needed to interpret the data in the compartment. So passing the patient id (or fhirContext[] as array of references as proposed in SMARTv2) has been a flexible choice.</p>",
        "id": 252629725,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1631195763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191912\">Michele Mottini</span> <a href=\"#narrow/stream/179170-smart/topic/security.20questions/near/252546479\">said</a>:</p>\n<blockquote>\n<p>For (1): in our server they are all 200 OK, they just return only the data of pt-2, so GET [base-url]/Observation?subject=pt-2 returns an empty bundle</p>\n</blockquote>\n<p>Should not server respond with 403 for (1)?</p>",
        "id": 252629802,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1631195791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191315\">Josh Mandel</span> <a href=\"#narrow/stream/179170-smart/topic/security.20questions/near/252629725\">said</a>:</p>\n<blockquote>\n<p>That would work for areas like the patient compartment where fhir explicitly defines some context, but the mapping breaks down pretty quickly too. For example even with \"patient\" compartments, a smart app authorized to access data about a given patient might be able to see certain data outside of a compartment, such as data directly linked from or needed to interpret the data in the compartment. So passing the patient id (or fhirContext[] as array of references as proposed in SMARTv2) has been a flexible choice.</p>\n</blockquote>\n<p>What is fhirContext?</p>",
        "id": 252630113,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1631195905
    },
    {
        "content": "<p>We are thinking about \"poko yoko\" for Smart on FHIR  apps - i.e. implicitly inject patient id into all search and even CRUD operations.</p>",
        "id": 252630490,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1631196022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> what is your opinion about such an implicit server behavior?</p>",
        "id": 252630746,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1631196112
    },
    {
        "content": "<blockquote>\n<p>nicola (RIO/SS): Michele Mottini said:</p>\n<blockquote>\n<p>For (1): in our server they are all 200 OK, they just return only the data of pt-2, so GET [base-url]/Observation?subject=pt-2 returns an empty bundle<br>\nShould not server respond with 403 for (1)?</p>\n</blockquote>\n</blockquote>\n<p>From the SMART spec perspective, both of these are OK behaviors.</p>",
        "id": 252638021,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1631198672
    },
    {
        "content": "<blockquote>\n<p>What is fhirContext?</p>\n</blockquote>\n<p>See <a href=\"http://jira.hl7.org/browse/FHIR-32253\">FHIR-32253</a>; this is being added to resolve SMARTv2 ballot feedback</p>",
        "id": 252638108,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1631198707
    },
    {
        "content": "<blockquote>\n<p>nicola (RIO/SS): We are thinking about \"poko yoko\" for Smart on FHIR apps - i.e. implicitly inject patient id into all search and even CRUD operations.</p>\n</blockquote>\n<p>I like this, but there are edge cases where it'll prevent access that a client <em>should</em> have (e.g., with <code>patient/*.cruds</code> access, you might still be allowed to issue a query like <code>GET /Observation/123</code> where the subject of the observation is something other than the patient (say, a patient's device or location).</p>",
        "id": 252638509,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1631198828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191912\">Michele Mottini</span> <a href=\"#narrow/stream/179170-smart/topic/security.20questions/near/252546479\">said</a>:</p>\n<blockquote>\n<p>For (1): in our server they are all 200 OK, they just return only the data of pt-2, so GET [base-url]/Observation?subject=pt-2 returns an empty bundle</p>\n</blockquote>\n<p>I think for (1) - 403 is more honest - otherwise, the client may be confused and interpret  the empty  response as a lack of data</p>",
        "id": 252748717,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1631261449
    },
    {
        "content": "<p>I think no error is better. Using 403 is actually _leaking_ the information that there is data that the client cannot see</p>",
        "id": 252788781,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1631281427
    },
    {
        "content": "<p>Yep, if they're fishing for information, a 200 tells them nothing, a 403 says there's data which is a problem from a privacy point of view</p>",
        "id": 252789163,
        "sender_full_name": "David Pyke",
        "timestamp": 1631281595
    },
    {
        "content": "<p>AND this is why the actual value returned should be driven by POLICY.  <a href=\"http://hl7.org/fhir/security.html#AccessDenied\">http://hl7.org/fhir/security.html#AccessDenied</a></p>",
        "id": 252789756,
        "sender_full_name": "John Moehrke",
        "timestamp": 1631281882
    }
]