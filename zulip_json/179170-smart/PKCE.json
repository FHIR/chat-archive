[
    {
        "content": "<p>Trying to add PKCE support to my smart client, and have been using <a href=\"http://smart.argo.run\">smart.argo.run</a>, which is the only server I have access to that supports it. Currently returning a 500 from the <code>/token</code> endpoint, which was working last time I tested it (about 3 weeks ago, admittedly).<br>\nI'm not sure who owns this server, but can someone verify that everything is okay with that endpoint?</p>",
        "id": 227495702,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614111107
    },
    {
        "content": "<p>The server hasn't been touched since the connect-a-thon, I believe. Right now , choosing patient standalone launch from the web UI and then launching the granular controls test app from the link at the bottom of the screen seems to show that pkce is working. Hmm.</p>",
        "id": 227497274,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614111734
    },
    {
        "content": "<p>Thanks for the reply - it must be something I'm doing. I'm using the Provider EHR launch. Can't seem to get a helpful response though: <code>Response{protocol=h2, code=500, message=, url=https://smart.argo.run/v/r4/auth/token}</code></p>",
        "id": 227498872,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614112430
    },
    {
        "content": "<p>Do you have a way to test with patient standalone launch? That may be the only path that works at this stage since I don't think we formally tested the others (but.. you're saying provider EHR launch was working for you before, so that's not super compelling.)</p>",
        "id": 227520553,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614121520
    },
    {
        "content": "<p>Does your error response have an empty body? Is that what <code>message=</code> indicates?</p>",
        "id": 227520573,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614121536
    },
    {
        "content": "<p>Can you send along a full request to we can check for any issues?</p>",
        "id": 227520603,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614121555
    },
    {
        "content": "<p>No problem - yeah EHR launch worked for me during the Connectathon. I did a ton of refactoring since then but I don't think I changed anything with the request.</p>\n<div class=\"codehilite\"><pre><span></span><code>Request{\n  method=POST,\n  url=https://smart.argo.run/v/r4/auth/token,\n  headers=[\n    Content-Type:application/x-www-form-urlencoded,\n    Accept:application/json,\n    Authorization:Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuZWVkX3BhdGllbnRfYmFubmVyIjpmYWxzZSwic21hcnRfc3R5bGVfdXJsIjoiaHR0cHM6Ly9zbWFydC5hcmdvLnJ1bi8vc21hcnQtc3R5bGUuanNvbiIsInBhdGllbnQiOiIyY2RhNWFhZC1lNDA5LTQwNzAtOWExNS1lMWMzNWM0NmVkNWEiLCJlbmNvdW50ZXIiOiIxZTM4Yjc3MS1lYTg3LTQzNDMtYTVhOC02MDAyMjM3NGNiYWEiLCJyZWZyZXNoX3Rva2VuIjoiZXlKMGVYQWlPaUpLVjFRaUxDSmhiR2NpT2lKSVV6STFOaUo5LmV5SmpiMjUwWlhoMElqcDdJbTVsWldSZmNHRjBhV1Z1ZEY5aVlXNXVaWElpT21aaGJITmxMQ0p6YldGeWRGOXpkSGxzWlY5MWNtd2lPaUpvZEhSd2N6b3ZMM050WVhKMExtRnlaMjh1Y25WdUx5OXpiV0Z5ZEMxemRIbHNaUzVxYzI5dUlpd2ljR0YwYVdWdWRDSTZJakpqWkdFMVlXRmtMV1UwTURrdE5EQTNNQzA1WVRFMUxXVXhZek0xWXpRMlpXUTFZU0lzSW1WdVkyOTFiblJsY2lJNklqRmxNemhpTnpjeExXVmhPRGN0TkRNME15MWhOV0U0TFRZd01ESXlNemMwWTJKaFlTSjlMQ0pqYkdsbGJuUmZhV1FpT2lKbU16VTVZVEpoTnkwMk1XTTJMVFEyWWpZdE9XSmlOQzAyWlRNMlpHWTBOemM0TTJVaUxDSnpZMjl3WlNJNklteGhkVzVqYUNCdmJteHBibVZmWVdOalpYTnpJRzl3Wlc1cFpDQndjbTltYVd4bElHWm9hWEpWYzJWeUlHeGhkVzVqYUM5d1lYUnBaVzUwSUhCaGRHbGxiblF2VUhKaFkzUnBkR2x2Ym1WeUxuSnpJSEJoZEdsbGJuUXZUMkp6WlhKMllYUnBiMjR1Y25NZ2NHRjBhV1Z1ZEM5RmJtTnZkVzUwWlhJdWNuTWdjR0YwYVdWdWRDOVBjbWRoYm1sNllYUnBiMjR1Y25NaUxDSjFjMlZ5SWpvaVVISmhZM1JwZEdsdmJtVnlMelV5T1RFNU1EazVMVFpoTjJFdE5EUXlZeTFpTUdRMUxUSmlNREpqTUdSa05HSTNOQ0lzSW1saGRDSTZNVFl4TkRFNE1ESTNOeXdpWlhod0lqb3hOalExTnpFMk1qYzNmUS5yME1rdVgwSmN5QVp1X3M0WDJRVUF4bmc3ajM2eHo0S1pzQTdKYzUxZU5JIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsInNjb3BlIjoibGF1bmNoIG9ubGluZV9hY2Nlc3Mgb3BlbmlkIHByb2ZpbGUgZmhpclVzZXIgbGF1bmNoL3BhdGllbnQgcGF0aWVudC9QcmFjdGl0aW9uZXIucnMgcGF0aWVudC9PYnNlcnZhdGlvbi5ycyBwYXRpZW50L0VuY291bnRlci5ycyBwYXRpZW50L09yZ2FuaXphdGlvbi5ycyIsImNsaWVudF9pZCI6ImYzNTlhMmE3LTYxYzYtNDZiNi05YmI0LTZlMzZkZjQ3NzgzZSIsImV4cGlyZXNfaW4iOjM2MDAsImlkX3Rva2VuIjoiZXlKMGVYQWlPaUpLVjFRaUxDSmhiR2NpT2lKU1V6STFOaUo5LmV5SndjbTltYVd4bElqb2lVSEpoWTNScGRHbHZibVZ5THpVeU9URTVNRGs1TFRaaE4yRXRORFF5WXkxaU1HUTFMVEppTURKak1HUmtOR0kzTkNJc0ltWm9hWEpWYzJWeUlqb2lVSEpoWTNScGRHbHZibVZ5THpVeU9URTVNRGs1TFRaaE4yRXRORFF5WXkxaU1HUTFMVEppTURKak1HUmtOR0kzTkNJc0ltRjFaQ0k2SW1Zek5UbGhNbUUzTFRZeFl6WXRORFppTmkwNVltSTBMVFpsTXpaa1pqUTNOemd6WlNJc0luTjFZaUk2SWpaaE1qQTFOR1prT1RWa1lqRTFOVFV5WXpkbE5XWmxZalU0WlRKbU5ERXhNRFkwT1RZd1pEUXlNR1F5TWpVNU56SmtaakZoWVRZeU4yTTVZalZqTXpZaUxDSnBjM01pT2lKb2RIUndjem92TDNOdFlYSjBMbUZ5WjI4dWNuVnVMeUlzSW1saGRDSTZNVFl4TkRFNE1ESTNOeXdpWlhod0lqb3hOakUwTVRnek9EYzNmUS5LTXdvaDNSb3FVcFpfOXYyb3dubko4STRFYi1FNVNfcFhOUjY3SC01ZEZ1c01TTXNlZVFHLVhVVHJ0dEZBeExtanZpQ29naWhudjZ3U2RXS0o5eHNOaXVaa1JmZzVwb3pjTUxITHVMQ2E0YUNfUzA3T0EzWERMN1ZqOTJPS1pNZURsSGREMDBqRV9Sd3IyUDkwOGk1aHR5dWE5OElnZzNMQUFrbk0zM3dhSC0ycGViUHhsdkF1NFBrUERJZWlac0hmTVN5OFlOMWxuazUzX1ZGNUlieTZ2Yk16U0Zwa0ZpVHRKV3RTQU1LTUxwcFllUHZKZW9KVGxqX3dqaEs1bkdNNnIwUmFrTjAtbXBITDdtcUFRWW8yeEZRaUtzWmt0c2N3RTdoRFlWRUl6U0FFRnRUTFVaWWZoTXFvUS1BWUYyQXVabVdUdDNES3RvU3BPa255NUtha3ciLCJpYXQiOjE2MTQxODAyNzcsImV4cCI6MTYxNDE4Mzg3N30.sXACzTTJ8To9NOKosCdgpaaiYw1XP0wM5p7ecgHiXsg,\n    Connection:keep-alive,\n    cache-control:no-cache\n  ]\n}\n\nForm Body: {\n  code: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuZWVkX3BhdGllbnRfYmFubmVyIjpmYWxzZSwic21hcnRfc3R5bGVfdXJsIjoiaHR0cHM6Ly9zbWFydC5hcmdvLnJ1bi8vc21hcnQtc3R5bGUuanNvbiIsInBhdGllbnQiOiIyY2RhNWFhZC1lNDA5LTQwNzAtOWExNS1lMWMzNWM0NmVkNWEiLCJlbmNvdW50ZXIiOiIxZTM4Yjc3MS1lYTg3LTQzNDMtYTVhOC02MDAyMjM3NGNiYWEiLCJyZWZyZXNoX3Rva2VuIjoiZXlKMGVYQWlPaUpLVjFRaUxDSmhiR2NpT2lKSVV6STFOaUo5LmV5SmpiMjUwWlhoMElqcDdJbTVsWldSZmNHRjBhV1Z1ZEY5aVlXNXVaWElpT21aaGJITmxMQ0p6YldGeWRGOXpkSGxzWlY5MWNtd2lPaUpvZEhSd2N6b3ZMM050WVhKMExtRnlaMjh1Y25WdUx5OXpiV0Z5ZEMxemRIbHNaUzVxYzI5dUlpd2ljR0YwYVdWdWRDSTZJakpqWkdFMVlXRmtMV1UwTURrdE5EQTNNQzA1WVRFMUxXVXhZek0xWXpRMlpXUTFZU0lzSW1WdVkyOTFiblJsY2lJNklqRmxNemhpTnpjeExXVmhPRGN0TkRNME15MWhOV0U0TFRZd01ESXlNemMwWTJKaFlTSjlMQ0pqYkdsbGJuUmZhV1FpT2lKbU16VTVZVEpoTnkwMk1XTTJMVFEyWWpZdE9XSmlOQzAyWlRNMlpHWTBOemM0TTJVaUxDSnpZMjl3WlNJNklteGhkVzVqYUNCdmJteHBibVZmWVdOalpYTnpJRzl3Wlc1cFpDQndjbTltYVd4bElHWm9hWEpWYzJWeUlHeGhkVzVqYUM5d1lYUnBaVzUwSUhCaGRHbGxiblF2VUhKaFkzUnBkR2x2Ym1WeUxuSnpJSEJoZEdsbGJuUXZUMkp6WlhKMllYUnBiMjR1Y25NZ2NHRjBhV1Z1ZEM5RmJtTnZkVzUwWlhJdWNuTWdjR0YwYVdWdWRDOVBjbWRoYm1sNllYUnBiMjR1Y25NaUxDSjFjMlZ5SWpvaVVISmhZM1JwZEdsdmJtVnlMelV5T1RFNU1EazVMVFpoTjJFdE5EUXlZeTFpTUdRMUxUSmlNREpqTUdSa05HSTNOQ0lzSW1saGRDSTZNVFl4TkRFNE1ESTNOeXdpWlhod0lqb3hOalExTnpFMk1qYzNmUS5yME1rdVgwSmN5QVp1X3M0WDJRVUF4bmc3ajM2eHo0S1pzQTdKYzUxZU5JIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsInNjb3BlIjoibGF1bmNoIG9ubGluZV9hY2Nlc3Mgb3BlbmlkIHByb2ZpbGUgZmhpclVzZXIgbGF1bmNoL3BhdGllbnQgcGF0aWVudC9QcmFjdGl0aW9uZXIucnMgcGF0aWVudC9PYnNlcnZhdGlvbi5ycyBwYXRpZW50L0VuY291bnRlci5ycyBwYXRpZW50L09yZ2FuaXphdGlvbi5ycyIsImNsaWVudF9pZCI6ImYzNTlhMmE3LTYxYzYtNDZiNi05YmI0LTZlMzZkZjQ3NzgzZSIsImV4cGlyZXNfaW4iOjM2MDAsImlkX3Rva2VuIjoiZXlKMGVYQWlPaUpLVjFRaUxDSmhiR2NpT2lKU1V6STFOaUo5LmV5SndjbTltYVd4bElqb2lVSEpoWTNScGRHbHZibVZ5THpVeU9URTVNRGs1TFRaaE4yRXRORFF5WXkxaU1HUTFMVEppTURKak1HUmtOR0kzTkNJc0ltWm9hWEpWYzJWeUlqb2lVSEpoWTNScGRHbHZibVZ5THpVeU9URTVNRGs1TFRaaE4yRXRORFF5WXkxaU1HUTFMVEppTURKak1HUmtOR0kzTkNJc0ltRjFaQ0k2SW1Zek5UbGhNbUUzTFRZeFl6WXRORFppTmkwNVltSTBMVFpsTXpaa1pqUTNOemd6WlNJc0luTjFZaUk2SWpaaE1qQTFOR1prT1RWa1lqRTFOVFV5WXpkbE5XWmxZalU0WlRKbU5ERXhNRFkwT1RZd1pEUXlNR1F5TWpVNU56SmtaakZoWVRZeU4yTTVZalZqTXpZaUxDSnBjM01pT2lKb2RIUndjem92TDNOdFlYSjBMbUZ5WjI4dWNuVnVMeUlzSW1saGRDSTZNVFl4TkRFNE1ESTNOeXdpWlhod0lqb3hOakUwTVRnek9EYzNmUS5LTXdvaDNSb3FVcFpfOXYyb3dubko4STRFYi1FNVNfcFhOUjY3SC01ZEZ1c01TTXNlZVFHLVhVVHJ0dEZBeExtanZpQ29naWhudjZ3U2RXS0o5eHNOaXVaa1JmZzVwb3pjTUxITHVMQ2E0YUNfUzA3T0EzWERMN1ZqOTJPS1pNZURsSGREMDBqRV9Sd3IyUDkwOGk1aHR5dWE5OElnZzNMQUFrbk0zM3dhSC0ycGViUHhsdkF1NFBrUERJZWlac0hmTVN5OFlOMWxuazUzX1ZGNUlieTZ2Yk16U0Zwa0ZpVHRKV3RTQU1LTUxwcFllUHZKZW9KVGxqX3dqaEs1bkdNNnIwUmFrTjAtbXBITDdtcUFRWW8yeEZRaUtzWmt0c2N3RTdoRFlWRUl6U0FFRnRUTFVaWWZoTXFvUS1BWUYyQXVabVdUdDNES3RvU3BPa255NUtha3ciLCJpYXQiOjE2MTQxODAyNzcsImV4cCI6MTYxNDE4Mzg3N30.sXACzTTJ8To9NOKosCdgpaaiYw1XP0wM5p7ecgHiXsg\n  grant_type: &#39;authorization_code&#39;\n  client_id: &#39;f359a2a7-61c6-46b6-9bb4-6e36df47783e&#39;\n  redirect_uri: &#39;http://localhost:443/index&#39;\n  code_verifier: &#39;34b2a3a9985d2759786fbe2f8c413591e45c7a5b1abc5635b75e605e3a0327e96e47fbe9eec0eb9442c5df6ebde093dfcc445774ee665a93160b1a505f3fa9b90d1d228f3ed057e4cce581b9bea4a9bec94b077282b6a70995d97d889c9240580721201f4336c69d47e97586&#39;\n}\n</code></pre></div>",
        "id": 227615681,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614180581
    },
    {
        "content": "<p>And yes, <code>message</code> is empty in the response.</p>",
        "id": 227616067,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614180716
    },
    {
        "content": "<p>According to the PCKE docs, I would expect a formatted error response. If this is not expected to work, I can chalk it up to it not being implemented. If this is the case, is there a server you know of that has PCKE implemented for the EHR launch that I can test against?</p>",
        "id": 227616660,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614180912
    },
    {
        "content": "<p><a href=\"https://tools.ietf.org/html/rfc7636#section-4.4.1\">https://tools.ietf.org/html/rfc7636#section-4.4.1</a></p>",
        "id": 227616678,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614180918
    },
    {
        "content": "<p>To answer your question, no I do not have a way to test with the patient standalone launch, my client app is only ehr launch at the moment.</p>",
        "id": 227622369,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614182647
    },
    {
        "content": "<p>One quick note from your example -- the code_verifier is 216 characters long but the <a href=\"https://tools.ietf.org/html/rfc7636#section-4.1\">PKCE spec says</a>:</p>\n<blockquote>\n<p>code_verifier = high-entropy cryptographic random STRING using the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\" from Section 2.3 of [RFC3986], with a minimum length of 43 characters  and a <strong>maximum length of 128 characters</strong>.</p>\n</blockquote>",
        "id": 227630964,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614185265
    },
    {
        "content": "<p>Can you include an example with an auth code, too? That'd help check that the verifier and the challenge match.</p>",
        "id": 227631121,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614185321
    },
    {
        "content": "<p>Re: Error reporting, this is something we should look into -- it will be important for the launcher to provide informative errors, for debugging! (Right now, you could run the launcher locally with docker-compose and review the console; but that's not a great lightweight option.)</p>",
        "id": 227631280,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614185393
    },
    {
        "content": "<p>The auth code in that example is the same as the <code>Bearer auth</code> token in the headers. I think that's correct from the documentation? I just didn't want to put the same code twice. I was confused as to why I would need to send the same code as the token auth and in the form body.</p>",
        "id": 227637538,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614187428
    },
    {
        "content": "<p>Just sent another request with a code_verifier of 64 characters:</p>\n<div class=\"codehilite\"><pre><span></span><code>Code Verifier: fb47fc5221317f14fa5a65e4bab82bd7790e69dd7b5d72e75fe8e812a082c5c9\nCode Challenge: uXfVXKj-tcEDe7ONF03OkMFdnAuPoKeNfWPYmxea-Lc\n</code></pre></div>",
        "id": 227637796,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614187506
    },
    {
        "content": "<p>Edited my previous request body to use the authorization code.</p>",
        "id": 227637917,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614187561
    },
    {
        "content": "<p>To be clear, I'm sending in the <code>access_token</code> from the <code>/authorization</code> response in the header and in the form body.</p>",
        "id": 227642292,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614189111
    },
    {
        "content": "<p>Also, just set up the launcher locally and ran with docker. The container does not have a <code>/.well-known/smart-configuration</code>, is that something I need to set up? Using <a href=\"https://github.com/microsoft-healthcare-madison/smart-launcher\">https://github.com/microsoft-healthcare-madison/smart-launcher</a></p>",
        "id": 227645073,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614190180
    },
    {
        "content": "<blockquote>\n<p>The auth code in that example is the same as the Bearer auth token in the headers.  I think that's correct from the documentation? </p>\n</blockquote>\n<p>This doesn't sound right. Can you clarify which documentation you mean?</p>",
        "id": 227653493,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614193384
    },
    {
        "content": "<blockquote>\n<p>The container does not have a /.well-known/smart-configuration, is that something I need to set up?</p>\n</blockquote>\n<p>The branch you pointed to is the right branch to be running (it's what's deployed at <a href=\"https://smart.argo.run\">https://smart.argo.run</a>).  <a href=\"https://github.com/microsoft-healthcare-madison/smart-launcher/blob/master/src/wellKnownSmartConfiguration.js\">https://github.com/microsoft-healthcare-madison/smart-launcher/blob/master/src/wellKnownSmartConfiguration.js</a> is the code for the smart-configuration page, and <a href=\"https://smart.argo.run/v/r4/fhir/.well-known/smart-configuration\">https://smart.argo.run/v/r4/fhir/.well-known/smart-configuration</a> shows it in the publicly hosted instance. I'm not sure what may be happening locally.</p>",
        "id": 227653815,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614193497
    },
    {
        "content": "<p>(BTW, thanks for digging in here, and sorry the debugging is so challenging.)</p>",
        "id": 227653883,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614193524
    },
    {
        "content": "<p>I think I'm confusing <code>access_token</code> with <code>authorization_code</code>. Up until this point I assumed they were the same. I believe there is some magic happening between the original <code>/authorize</code> request and when my client receives the <code>access_token</code>. Looking at this <a href=\"https://tools.ietf.org/html/rfc6749#section-4.1\">https://tools.ietf.org/html/rfc6749#section-4.1</a>. <br>\nSeems that the <code>authorization_code</code> is used in a behind-the-scenes handshake here. Then I receive the <code>access_token</code> in the token response.<br>\nI'm using the js fhir-client. Do I need to make another call to the server's <code>/authorize</code> endpoint to get this <code>authorization_code</code>? Surely I can somehow grab that code during the original authorize request.</p>",
        "id": 227660762,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614196362
    },
    {
        "content": "<p>Yep. Seems like it's the <code>access_token</code> in the bearer auth header, and the <code>authorization_code</code> in the body. <a href=\"https://tools.ietf.org/html/rfc6749#section-7.1\">https://tools.ietf.org/html/rfc6749#section-7.1</a></p>",
        "id": 227664023,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614197608
    },
    {
        "content": "<p>Also, I'm using <code>/authorize</code> and the fhir-client.js method <code>FHIR.oauth2.authorize()</code> interchangeably. I assume that's correct.</p>",
        "id": 227664864,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614197931
    },
    {
        "content": "<p>Hey Keller, fyi - I'm pretty sure that <a href=\"https://fhir.epic.com/Documentation?docId=oauth2\">this sandbox</a> supports PKCE.</p>",
        "id": 227688001,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1614206756
    },
    {
        "content": "<p>The <code>code</code> you're pasting in appears to be an access token, not an authorization code.</p>",
        "id": 227688944,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614207229
    },
    {
        "content": "<p>Though I don't understand how you'd have an access token <em>before</em> calling the access token endpoint. Is it possible you've mixed up the values in the example you created?</p>",
        "id": 227689051,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614207274
    },
    {
        "content": "<p>I am calling the <code>/token</code> endpoint after I call the <code>/authorization</code> endpoint. <br>\nWorkflow:</p>\n<div class=\"codehilite\"><pre><span></span><code>1. EHR launch calls my client&#39;s `/launch` endpoint\n2. Client calls FHIR.oauth2.authorize with the `code_verifier`\n3. Server calls the redirect endpoint with an access token (the client never sees any `authorization_code`)\n...\n6. Client calls `&#39;.well-known/smart-configuration` to get `/introspect` and `/token` endpoints\n7. Token introspection\n8. Client calls `/token` endpoint with the `access_token` from step 3.\n\nSeems like I&#39;m doing something wrong here by the way you are responding. Steps 1-3 are in a javascript client, and the rest of the work happens in a backend Java app.\n</code></pre></div>",
        "id": 227703982,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614216173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191864\">@Isaac Vetter</span> thanks for the reference, I'll check this out tomorrow</p>",
        "id": 227704013,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614216199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> Yes it is, I was working under the assumption that <code>access_token</code> and <code>authorization_code</code> were the same thing. I realize this was a misunderstanding on my end, but I have never seen any <code>authorization_code</code> and am not sure how to get it. The response from the <code>/authorize</code> endpoint only returns an access token and a refresh token.</p>",
        "id": 227704270,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614216394
    },
    {
        "content": "<p>I think you may be a bit confused; the authorization response includes a URL parameter called <code>code</code>, and that parameter conveys the authorization code to your app. That's the one you include in your request to the token endpoint.</p>",
        "id": 227705699,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614217538
    },
    {
        "content": "<p>Yep I was confused. I'll grab the code from the URL, thanks.</p>",
        "id": 227719819,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614230507
    },
    {
        "content": "<p>Well that was it - thanks for the simple solution. Just made a successful <code>/token</code> request to the server. Thanks for diving into that with me <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> !</p>",
        "id": 227778988,
        "sender_full_name": "Keller Martin",
        "timestamp": 1614264820
    },
    {
        "content": "<p>Hurray!</p>",
        "id": 227779323,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614264961
    },
    {
        "content": "<p>(Only downside is that now improving our error responses is falling down on my priority list ;-))</p>",
        "id": 227779425,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1614264987
    },
    {
        "content": "<p>I'm also adding support for PKCE in my client app too (and a server) and looking for reference material on implementing it in javascript inside the browser.<br>\nThe only part I'm really after is what goes into the function:<br>\nvar encoded_code_challenge = encodeHash(code_challenge);</p>\n<p>Is it really this simple, or have I stuffed something up</p>\n<div class=\"codehilite\"><pre><span></span><code>window.crypto.subtle.digest(&#39;SHA-256&#39;, encoder.encode(&#39;2972734071&#39;)).then(hashBuffer =&gt; {\n        const uiArray =new Uint8Array(hashBuffer);\n        encoded_code_challenge = btoa(uiArray);\n});\n</code></pre></div>\n<p>and the .net side to verify it (which isn't working)</p>\n<div class=\"codehilite\"><pre><span></span><code>var computedChallenge = Convert.ToBase64String(hasher.ComputeHash(System.Text.ASCIIEncoding.ASCII.GetBytes(code_verifier)));\nif (computedChallenge != _context.CodeChallenge)\n...\n</code></pre></div>\n<p>(I think the .net side is right, but pretty sure the javascript is wrong)</p>",
        "id": 258301528,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1634695475
    },
    {
        "content": "<p>Should I just be using base64-js or some similar package?<br>\nThis is what I ended up with (in the code above)</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/js-base64@3.7.2/base64.min.js&quot;&gt;&lt;/script&gt;\nencoded_code_challenge = Base64.fromUint8Array(new Uint8Array(hashBuffer));\n</code></pre></div>\n<p>If there's an easier way without the other package, interested to know.<br>\n(and I also URL encoded the result of the above too)</p>",
        "id": 258303041,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1634696795
    },
    {
        "content": "<p>Was there a good way anyone else has done the random string generation too?</p>",
        "id": 258304071,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1634697723
    },
    {
        "content": "<p>Works while testing on <a href=\"https://smart.argo.run/\">https://smart.argo.run/</a> with PKCE enabled<br>\nTest Launch URL <a href=\"https://smartqedit4.azurewebsites.net/ts/Tester/smart-launch.html\">https://smartqedit4.azurewebsites.net/ts/Tester/smart-launch.html</a><br>\nTest Redirect URL <a href=\"https://smartqedit4.azurewebsites.net/ts/Tester/smart-index.html\">https://smartqedit4.azurewebsites.net/ts/Tester/smart-index.html</a></p>",
        "id": 258304663,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1634698270
    },
    {
        "content": "<p><a href=\"https://www.npmjs.com/package/pkce-challenge\">https://www.npmjs.com/package/pkce-challenge</a> if you don't mind taking a dependency, or you can read through it for example of how to create the challenge from the verifier in any case.</p>\n<p>Are you base64url encoding to create the challenge? From the examples above I don't see where.</p>",
        "id": 258305553,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1634699126
    },
    {
        "content": "<p>Or: <a href=\"https://github.com/microsoft-healthcare-madison/client-js/blob/68ddd4c2c2c6c594b9ef467e70ac46754f5f350b/src/security/index.ts#L37-L43\">https://github.com/microsoft-healthcare-madison/client-js/blob/68ddd4c2c2c6c594b9ef467e70ac46754f5f350b/src/security/index.ts#L37-L43</a> is the code I put together at the last connectathon</p>",
        "id": 258305794,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1634699374
    },
    {
        "content": "<blockquote>\n<p>Works while testing on <a href=\"https://smart.argo.run/\">https://smart.argo.run/</a> with PKCE enabled</p>\n</blockquote>\n<p>Can you clarify what works? When I try the launcher with your example launch URL I see</p>\n<div class=\"codehilite\"><pre><span></span><code>smart-launch.html:6 GET https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js net::ERR_ADDRESS_UNREACHABLE\n</code></pre></div>\n\n<p>in the client page</p>",
        "id": 258306182,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1634699751
    },
    {
        "content": "<p><a href=\"https://smart.argo.run/?auth_error=&amp;client_secret=&amp;fhir_version_2=r4&amp;iss=&amp;jwks=&amp;jwks_uri=&amp;launch_ehr=1&amp;launch_url=https%3A%2F%2Fsmartqedit4.azurewebsites.net%2Fts%2FTester%2Fsmart-launch.html&amp;patient=87a339d0-8cae-418e-89c7-8651e6aab3c6&amp;prov_skip_auth=1&amp;prov_skip_login=1&amp;provider=e443ac58-8ece-4385-8d55-775c1b8f3a37&amp;pt_skip_auth=1&amp;public_key=&amp;redirect_uris=https%3A%2F%2Fsmartqedit4.azurewebsites.net%2Fts%2FTester%2Fsmart-index.html&amp;sde=&amp;sim_ehr=1&amp;token_lifetime=15&amp;user_pt=&amp;validate_pkce=1&amp;validation_method=public\">https://smart.argo.run/?auth_error=&amp;client_secret=&amp;fhir_version_2=r4&amp;iss=&amp;jwks=&amp;jwks_uri=&amp;launch_ehr=1&amp;launch_url=https%3A%2F%2Fsmartqedit4.azurewebsites.net%2Fts%2FTester%2Fsmart-launch.html&amp;patient=87a339d0-8cae-418e-89c7-8651e6aab3c6&amp;prov_skip_auth=1&amp;prov_skip_login=1&amp;provider=e443ac58-8ece-4385-8d55-775c1b8f3a37&amp;pt_skip_auth=1&amp;public_key=&amp;redirect_uris=https%3A%2F%2Fsmartqedit4.azurewebsites.net%2Fts%2FTester%2Fsmart-index.html&amp;sde=&amp;sim_ehr=1&amp;token_lifetime=15&amp;user_pt=&amp;validate_pkce=1&amp;validation_method=public</a></p>",
        "id": 258307186,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1634700713
    },
    {
        "content": "<p>And yes, the Base64URL encoding was added after I posted that original snippit.</p>",
        "id": 258307389,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1634700899
    },
    {
        "content": "<p>Excellent, that link works for me. I thought you were saying that it was working for you <em>without</em> the base6urlencoding, which would have indicated to me that there was a problem with the launcher accepting pkce parameters without properly checking them :-)</p>",
        "id": 258308623,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1634702146
    }
]