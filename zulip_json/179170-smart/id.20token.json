[
    {
        "content": "<p>If the auth server supplies an id token (maybe in response to the openid &amp; profile  scopes) then the 'profile' claim in the token is the url for the user (Patient, Provider, RelatedPerson) - correct? The spec has a section (copied below) that seems redundant (unless it allows for a server to include an issuer only) ...</p>\n<p><strong>Steps for using an ID token</strong></p>\n<ul>\n<li>Examine the ID token for its “issuer” property</li>\n<li>Perform a GET {issuer}/.well-known/openid-configuration</li>\n<li>Fetch the server’s JSON Web Key by following the “jwks_uri” property</li>\n<li>Validate the token’s signature against the public key from step #3</li>\n<li>Extract the “profile” claim and treat it as the URL of a FHIR resource</li>\n</ul>",
        "id": 153924622,
        "sender_full_name": "David Hay",
        "timestamp": 1513115262
    },
    {
        "content": "<p>I think the first four steps are used to validate the OAuth  claim. This gives you trust in the token, it is good and from someone you trust. The last step is specific to FHIR use. If you skip the first four steps then someone could present a malicious claim that you would think is a valid claim for the identified 'profile' user. (I don't see a protection that the id is the same as the profiled FHIR resource. Not sure what prevents a malicous user/app from taking a valid token (like a janitor) and doing nothing but replacing the FHIR url with one of a chief clinician with much broader user rights)</p>",
        "id": 153924631,
        "sender_full_name": "John Moehrke",
        "timestamp": 1513118227
    },
    {
        "content": "<p>Thanks John - apparently we do that already as part pf our base OAuth implementation (which I'm looking to migrate to SMART - hence the questions!).</p>",
        "id": 153924648,
        "sender_full_name": "David Hay",
        "timestamp": 1513122866
    },
    {
        "content": "<p>so I guessed right? But did I answer your question?</p>",
        "id": 153924747,
        "sender_full_name": "John Moehrke",
        "timestamp": 1513177031
    },
    {
        "content": "<p>well - not really I'm afraid :) What I'm unclear of is whether the profile claim (url of user resource) is in the userid directly, or whether you use the issuer (iss) to get it...  (or potentially both, depending on the implementation - ie look first in the userid, and if not found then get it via the issuer)...</p>",
        "id": 153924821,
        "sender_full_name": "David Hay",
        "timestamp": 1513184671
    },
    {
        "content": "<p>aiui the last step means \"extract the profile claim <em>from the ID token</em>\"<br>\nyou're not using the issuer to get the value, just to validate it</p>",
        "id": 153925114,
        "sender_full_name": "Ben Spencer",
        "timestamp": 1513236796
    },
    {
        "content": "<p>Issuer just verifies the system, not the user.</p>",
        "id": 153925169,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1513253744
    },
    {
        "content": "<p>Oh, I get it.</p>\n<p>1. get the id token.<br>\n2. validate that it is correct using the first 4 steps above.<br>\n3 if valid, then use the profile claim as the reference to the current user.</p>\n<p>silly me!</p>",
        "id": 153925267,
        "sender_full_name": "David Hay",
        "timestamp": 1513277734
    },
    {
        "content": "<p>isnt that what I said?</p>",
        "id": 153925272,
        "sender_full_name": "John Moehrke",
        "timestamp": 1513279674
    },
    {
        "content": "<p>should smart require that the id in the token also be an identifier in the referenced resource?</p>",
        "id": 153925273,
        "sender_full_name": "John Moehrke",
        "timestamp": 1513279725
    },
    {
        "content": "<p>where do I find the keys and algorithm to decrypt the id token returned when I specify openid &amp; profile in the scope?</p>",
        "id": 153926074,
        "sender_full_name": "David Hay",
        "timestamp": 1513638183
    },
    {
        "content": "<p>For the SMART launcher it's at <a href=\"https://launch.smarthealthit.org/.well-known/openid-configuration/\" target=\"_blank\" title=\"https://launch.smarthealthit.org/.well-known/openid-configuration/\">https://launch.smarthealthit.org/.well-known/openid-configuration/</a> which points to <a href=\"https://launch.smarthealthit.org/keys\" target=\"_blank\" title=\"https://launch.smarthealthit.org/keys\">https://launch.smarthealthit.org/keys</a> . <span class=\"user-mention\" data-user-id=\"192233\">@Travis Cummings</span>  - do you know where the sandbox has this info?</p>",
        "id": 153926076,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1513638599
    },
    {
        "content": "<p>thanks!</p>",
        "id": 153926089,
        "sender_full_name": "David Hay",
        "timestamp": 1513646264
    },
    {
        "content": "<p><strong>deleted</strong></p>",
        "id": 153926092,
        "sender_full_name": "David Hay",
        "timestamp": 1513647340
    },
    {
        "content": "<p>Hi David, I think the id jwt is just base64 encoded and signed, not encrypted, so you should be able to decode it (I'd recommend using a jwt library) and then verify the signature with the key. The keys are out of band - the SMART launcher (a streamlined UI for the sandbox) keeps them at the address I mentioned. I was asking Travis where the older sandbox UI stores them.</p>",
        "id": 153926093,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1513648805
    },
    {
        "content": "<p>just figured that out!</p>",
        "id": 153926094,
        "sender_full_name": "David Hay",
        "timestamp": 1513648817
    },
    {
        "content": "<p>Ha, great - I have to type faster!</p>",
        "id": 153926095,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1513648839
    },
    {
        "content": "<p>well, I need to think faster too!</p>",
        "id": 153926096,
        "sender_full_name": "David Hay",
        "timestamp": 1513648853
    },
    {
        "content": "<p>:)</p>",
        "id": 153926098,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1513648898
    },
    {
        "content": "<p>You can use this site to help decode some and check their validity too<br>\n<a href=\"https://jwt.io/\" target=\"_blank\" title=\"https://jwt.io/\">https://jwt.io/</a></p>",
        "id": 153926116,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1513666169
    },
    {
        "content": "<p>nice!</p>",
        "id": 153926255,
        "sender_full_name": "David Hay",
        "timestamp": 1513701573
    }
]