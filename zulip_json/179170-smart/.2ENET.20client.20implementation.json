[
    {
        "content": "<p>Have people implemented the SMART on FHIR launch with .NET client yet? Are there libraries available?</p>\n<p>I know of <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span>'s <a href=\"http://ewoutkramer.github.io/fhir-net-api/docu-index.html\" target=\"_blank\" title=\"http://ewoutkramer.github.io/fhir-net-api/docu-index.html\">http://ewoutkramer.github.io/fhir-net-api/docu-index.html</a>, but that does not seem to do OAuth or any of the other SMART stuff yet, right?</p>\n<p>If I'd be interested in developing an open source implementation for SMART on FHIR with .NET, should I<br>\n1) start a new project,<br>\n2) extend fhir-net-api, or<br>\n3) use some other project as a starting point?</p>\n<p>Any thoughts?</p>",
        "id": 153860563,
        "sender_full_name": "Mikael Rinnetmäki",
        "timestamp": 1480928032
    },
    {
        "content": "<p>The dotnet client supports the authorization bearer however the other requests for the web calls are very dependent on the type of application you are writing (winforms, WPF, UWA...), and therefore how you can do the other parts of the OAuth web request need some form of browser based user interaction.</p>",
        "id": 153860647,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1480943796
    },
    {
        "content": "<p>If you're thinking about how you implement the server side, I'd highly recommend using the IdentityServer3 NuGet package and project to cover it.</p>",
        "id": 153860648,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1480943843
    },
    {
        "content": "<p>Thanks Brian! I'm currently just working on the client side. And yes, the flow requires some browser redirects. I would still be very happy with a .NET library that would, for instance, fetch the conformance statement and parse the security extensions (authLocation and tokenLocation) for me.<br>\nI noticed IdentityServer3 has some client examples too at <a href=\"https://github.com/IdentityServer/IdentityServer3.Samples/tree/master/source/Clients\" target=\"_blank\" title=\"https://github.com/IdentityServer/IdentityServer3.Samples/tree/master/source/Clients\">https://github.com/IdentityServer/IdentityServer3.Samples/tree/master/source/Clients</a>. Some of them might be good starting points for handling OAuth, but there are these SMART specific things too...</p>",
        "id": 153860663,
        "sender_full_name": "Mikael Rinnetmäki",
        "timestamp": 1480948252
    },
    {
        "content": "<p>FWIW, the <strong>Swift</strong> client does that and may give some ideas on how to approach it. Interesting bits happen in <code>Client</code>, <code>Server</code> and <code>Auth</code> (in <code>Sources/Client</code>): <a href=\"https://github.com/smart-on-fhir/Swift-SMART\" target=\"_blank\" title=\"https://github.com/smart-on-fhir/Swift-SMART\">https://github.com/smart-on-fhir/Swift-SMART</a></p>\n<p>The wiki mentions a few details:<br>\n<a href=\"https://github.com/smart-on-fhir/Swift-SMART/wiki\" target=\"_blank\" title=\"https://github.com/smart-on-fhir/Swift-SMART/wiki\">https://github.com/smart-on-fhir/Swift-SMART/wiki</a><br>\n<a href=\"https://github.com/smart-on-fhir/Swift-SMART/wiki/Client\" target=\"_blank\" title=\"https://github.com/smart-on-fhir/Swift-SMART/wiki/Client\">https://github.com/smart-on-fhir/Swift-SMART/wiki/Client</a></p>\n<p>(Our <strong>Python</strong> client works similarly: <a href=\"https://github.com/smart-on-fhir/client-py\" target=\"_blank\" title=\"https://github.com/smart-on-fhir/client-py\">https://github.com/smart-on-fhir/client-py</a>)</p>",
        "id": 153860671,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1480949517
    },
    {
        "content": "<p>Mikael, couldn't this be done by subclassing the Fhirclient and overriding the OnBeforeRequest and OnAfterResponse hooks?  And adding some kind of Authenticate() method as well?   If not, I'd be interested to see how we can change the client to make it more flexible...</p>",
        "id": 153860750,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1480958155
    },
    {
        "content": "<p>OAuth has multiple interaction and token types because there are different types of use. The OAuth method you use for a thin-browser application is not the one you use with a standalone-application, or a service-to-servce-client. The differences are important as they approach the environment that can be trusted, while protecting against the pathways that can't be trusted. You can use Bearer token while developing anything, but it is most likely the wrong token type to go into production.</p>",
        "id": 153860765,
        "sender_full_name": "John Moehrke",
        "timestamp": 1480959478
    },
    {
        "content": "<p>@Ewout, that's what we've done, in fact we didn't even subclass, we just hooked the events to perform the OAuth. This was for a service-to-service integration using the FhirClient.</p>",
        "id": 153860768,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1480959672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span>, the way I see it, FhirClient is (and should be) a good tool for client-initiated communications with the server.</p>\n<p>What I'm working on is the launch from the EHR. The library should, in my opinion,<br>\n1) interpret the launch request<br>\n2) fetch (and ideally, cache) the metadata from the calling EHR, parse authLocation and tokenLocation<br>\n3) handle the OAuth flow (at least the authorization code flow), based on configuration given to it<br>\n4) fetch (and ideally, cache) the public keys from the server<br>\n5) decode and parse the JWT and other information from the token response<br>\n5) make the information available for the application using the library.</p>",
        "id": 153861437,
        "sender_full_name": "Mikael Rinnetmäki",
        "timestamp": 1481088162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> Interesting. So does your implementation support the SMART launch from the EHR? Is it fully proprietary, or is any part of it open source?</p>",
        "id": 153861438,
        "sender_full_name": "Mikael Rinnetmäki",
        "timestamp": 1481088353
    },
    {
        "content": "<p>The issue with this is how can the headless client ask the user to enter the details into a web page to perform the authentication?</p>",
        "id": 153861442,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1481088940
    },
    {
        "content": "<p>I do think we should add some routines to get at the SMART enpoint metadata though.</p>",
        "id": 153861443,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1481088965
    },
    {
        "content": "<p>The use case I'm working on is not a headless client, rather the browser based flow, using redirects.</p>",
        "id": 153861444,
        "sender_full_name": "Mikael Rinnetmäki",
        "timestamp": 1481089089
    },
    {
        "content": "<p>It feels like most of this should be part of a new SMART component that _contains_ and uses the FhirClient, rather than extending this on top of the FHIR client. I am pretty sure others have done this already (seen the number of people asking me about the aforementioned hooks for authentication), so maybe there is indeed someone who could share their solution? Again, I would not mind adding this to the distribution.</p>",
        "id": 153861686,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1481114154
    },
    {
        "content": "<p>in the pascal client, I have the hooks, and a class that grabs the hooks for SMART on FHIR</p>",
        "id": 153861692,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1481114297
    },
    {
        "content": "<p>Right, an equivalent of that class (that grabs the books) is probably what we need to port then.</p>",
        "id": 153861695,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1481114395
    }
]