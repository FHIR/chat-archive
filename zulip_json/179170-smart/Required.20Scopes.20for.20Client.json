[
    {
        "content": "<p>In the scenario where a Client has access to request 4 scopes (patient/Medication.read, patient/Patient.read, patient/Condition.read, patient/Observation.read) and the patient has the ability, per the ruling, to be able to select which scopes they want to authorize access to, if the client requires access to Medication and Patient in order to function is there any mechanism via the SMART Framework for the client to inform the server that patient/Medication.read, patient/Patient.read must be authorized in order to function. We want to avoid a scenario where the patient doesn't grant access to enough scopes and then the App can not function and makes them authorize again until the minimum needed has been reached. We also do not want to have to individually setup each client at each instance and define required vs optional scopes. Any guidance would be greatly appreciated.</p>",
        "id": 265733972,
        "sender_full_name": "Jason Vogt",
        "timestamp": 1640120643
    },
    {
        "content": "<p>There is no mechanism to say that certain scopes cannot be omitted;. The best approach is to inform the user ahead of time and to gracefully degrade if fewer scopes are granted.</p>",
        "id": 265737515,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1640122673
    },
    {
        "content": "<p>Hey Jason, in addition to what Josh said, I've experienced this flow on Android, for example. Following insufficient authorization, the app tells the user that it can't operate without additional scopes, and offers the user a link to re-authorize. I think that feels entirely appropriate. The patient is fully informed and has the choice of using the app or not. There's definitely times when further degradation isn't possible and the app simply can't work.</p>",
        "id": 266283971,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1640718726
    },
    {
        "content": "<p>Thanks guys!</p>",
        "id": 266991868,
        "sender_full_name": "Jason Vogt",
        "timestamp": 1641417212
    }
]