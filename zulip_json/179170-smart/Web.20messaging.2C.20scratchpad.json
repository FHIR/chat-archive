[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193265\">@Matt Varghese</span> thanks again for the discussion in the call just now. One thing I realized I didn't understand about your proposal is how search would be used by an app if it is searching against the full state of the fhir server. When you have a scratchpad in place, that is necessarily and explicitly specific to a user session and only includes things like draft orders that the user has in their shopping cart right now. But if you are issuing a fhir API query, you might pull up a whole pile of draft orders that are part of other people's sessions, or abandoned ideas, or medical student suggestions, or other data that would not be relevant to a shopping cart review experience. How would the app query for just the \"ephemeral\" items <strong>relevant and visible in the current UI session</strong>?</p>",
        "id": 226172553,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613152343
    },
    {
        "content": "<p>Isn't that already covered in the Scopes for SMART on FHIR?</p>",
        "id": 226173144,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613152566
    },
    {
        "content": "<p>I agree <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>  this is one of the main benefits of the scratchpad concept in the SMART Web Messaging spec. It shows the current items in progress for that specific user session.</p>",
        "id": 226176565,
        "sender_full_name": "Chuck Feltner",
        "timestamp": 1613154195
    },
    {
        "content": "<p>Definitely not covered in existing SMART on FHIR scopes (which are tied to data a in a specific record, rather than session-scoped data)</p>",
        "id": 226177565,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613154666
    },
    {
        "content": "<p>One of the side discussions Matt and I are having are about what I see as a fundamental property of the scratchpad (or \"whatsit\" as we're currently calling it as the name seems to be a source of conflict).  I believe that information accessed from the scratchpad SHALL NOT be written by the receiving app to the REST API.  I.e. if you get data from the scratchpad and you want to change it, you have to write it back to the scratchpad.  I think this is also an unwritten assumption with CDS-Hooks.  If you receive a resource in the CDS-Hook invocation, you're not allowed to write that to the RESTful server as part of your hook processing.  You can pass back cards and recommendations, but the choice of what to write (and whether to write anything at all) to be exposed to the RESTful API remains in the launching system, never the launched app.  <span class=\"user-mention\" data-user-id=\"193265\">@Matt Varghese</span> believes the \"SHALL NOT\" is too strong a statement.  Would welcome other's thoughts.</p>",
        "id": 226595460,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613519067
    },
    {
        "content": "<p>All draft MedicationRequest / ServiceRequest resources are candidates for showing up in CDS Hooks draftOrder context.<br>\nSo such a take essentially excludes any MedicationRequest / ServiceRequest resource with status of draft from the REST-ful endpoint.</p>",
        "id": 226595623,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613519178
    },
    {
        "content": "<p>No.  Status of draft has <em>nothing</em> to do with it.  If you are editing an order (regardless of what hook or what status) and you get that order from CDS Hooks, you SHALL NOT write the order to the RESTful endpoint within the hook service.</p>",
        "id": 226595900,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613519440
    },
    {
        "content": "<p>Are you saying what's in the scratchpad will never show on the REST-ful endpoint, or just that the App / CDS Hooks service shouldn't use the REST-ful endpoint to modify that?</p>",
        "id": 226596825,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613520178
    },
    {
        "content": "<p>I mean if a CDS Hooks service receives a resource as input to a request and then turns around and creates something similar at the client EHR's FHIR REST API endpoint... it is acting outside of the expected scope of its job as a CDS service, and this is a weird pattern that I would not personally encourage. But we don't go out of our way to prohibit all kinds of weird behavior.</p>",
        "id": 226597431,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613520609
    },
    {
        "content": "<p>So I'm not sure I would agree with imposing any specific prohibitory conformance language around it. But if this is something that developers are thinking about doing, we should certainly have language in the specification that helps them understand why this is not the expected pattern and steer deftly away from it.</p>",
        "id": 226597459,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613520652
    },
    {
        "content": "<p>As far as I'm aware this has never come up in real life; it's more of a hypothetical example that came up because of discussions about a different use case. I wouldn't worry too much about this happening in CDS Hooks Services unless you see some indication that it is a real world issue <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> . I have learned over time that I'm not very good at anticipating all of the strange and wrong things that people want to do with specifications; so I rarely try to prohibit them ahead of time :-)</p>",
        "id": 226597581,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613520750
    },
    {
        "content": "<p>I think Lloyd was saying the scrathpad and REST-ful endpoint are disjoint sets. But I'll let Lloyd clarify.</p>",
        "id": 226597626,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613520795
    },
    {
        "content": "<p>I'm not seeing Lloyd state that they are disjoint; just that a receiving system should never make <em>assumptions</em> of overlap, and should instead interact with the EHR using an explicit mechanism like a \"SMART Web Messaging what'sit API\" or a CDS Hooks suggestion/action, rather than assuming that it is okay to make changes by directly interacting with a fhir server.</p>",
        "id": 226597841,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613520970
    },
    {
        "content": "<p>I agree with this perspective. (it's just that I would stop short of prohibitory language because there may be cases where a system could knowingly and acceptably violate this rule, if arrangements are made out of band.)</p>",
        "id": 226598173,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613521301
    },
    {
        "content": "<p>I'm saying that the purpose of the scratchpad is to make available objects that are (or at least may be) edited versions of the underlying resources - or which might not even exist yet.  And the user of the system that sources those objects should have final say over whether they get written to the REST endpoint.  In the case of CDS Hooks, that's done by passing back cards, the user interacting with the cards and then determining what (if anything) eventually gets stored.  In the case of SMART Web Messaging, it's by writing information back to the scratchpad which the user can then determine what gets written back.</p>",
        "id": 226598181,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613521314
    },
    {
        "content": "<p>I agree 100% with that Lloyd</p>",
        "id": 226598255,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613521372
    },
    {
        "content": "<p>Part of the discussion we've been having is \"what happens if a temporary resource is written to the REST endpoint and subsequently made available over the scratchpad - is it ok to write to the RESTful resource\".  My answer is: if you get the data from the RESTful endpoint, you're free to write to the RESTful endpoint.  If you get from the scratchpad interface and you want to make changes, you SHALL do that through the scratchpad.</p>",
        "id": 226598371,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613521482
    },
    {
        "content": "<p>I basically agree with this; I'd just worry that the strict \"shall\" might close off some potentially reasonable avenues that you could pursue with appropriate out of band arrangements in place.</p>",
        "id": 226598803,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613521880
    },
    {
        "content": "<p>SHALL NOT (without out-of-band agreements)? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 226598911,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613521944
    },
    {
        "content": "<p>Yeah. Which is to say \"SHOULD NOT\" ;-)</p>",
        "id": 226599131,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613522107
    },
    {
        "content": "<p>Not quite.  SHOULD says You're free to do what you like, but best practice is not to.  SHALL NOT (some qualifier) sets a specific circumstance for when the SHALL NOT can be violated.</p>",
        "id": 226599280,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613522214
    },
    {
        "content": "<p>I honestly don't understand how SHALL NOT is possible. <br>\nA pended order must still undergo decision support. So it can show up in CDS Hooks / is part of scratchpad.<br>\nYet, it is also going to show up on the REST-ful endpoint as it is filed to the database.</p>",
        "id": 226602649,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613525047
    },
    {
        "content": "<p>To me, a pended order is an example of something that is in the intersection of scratchpad and REST-ful endpoint, thereby showing they are not disjoint.</p>",
        "id": 226602830,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613525240
    },
    {
        "content": "<blockquote>\n<p>Not quite.  SHOULD says You're free to do what you like, but best practice is not to.  SHALL NOT (some qualifier) sets a specific circumstance for when the SHALL NOT can be violated.</p>\n</blockquote>\n<p>Agreed that's the technical distinction. But I'd rather have us specify \"SHOULD\" if we specify anything here. (To reiterate, I don't think we're talking about anything that has come up as a real world issue, just a theoretical concern.)</p>",
        "id": 226608960,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613532132
    },
    {
        "content": "<p>It doesn't matter if they are disjoint or not; what matters is that app and service developers have a clear expectation of how to interact with the EHR once a specific conversation has been started.</p>",
        "id": 226608985,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613532203
    },
    {
        "content": "<p>(if the EHR says \"here is an order in progress\" the app needs to know where and how to bring up proposed changes.)</p>",
        "id": 226609040,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613532251
    },
    {
        "content": "<p>If an app receives something from the scratchpad API, it has no authorization to propagate what information it has to the RESTful  API.  If the information received from the scratchpad API happens to be identical to the version available from REST, the interaction is still expecting the information to be passed back to the scratchpad (which is how the launching system is prepared to receive it).  If it instead gets sent back to the RESTful API, the launching system has no reason to expect it to be there and, at best, will end up out-of-sync with what's in REST.</p>",
        "id": 226614268,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613538073
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> , building upon your patient demographics example, what is the behavior expectation when App 1 is manipulating patient demographics via scratchpad and SIMULTANEOUSLY App 2 is manipulating patient demographics on the REST-ful endpoint?</p>",
        "id": 226662311,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613571679
    },
    {
        "content": "<p>The invoker of App 1 will run into a collision if/when it chooses to apply the changes from App1because the ETag will have changed since it last queried due to the updates from App 2.</p>",
        "id": 226663931,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613572386
    },
    {
        "content": "<p>The same as if App 1 had never been involved and the invoker of App 1 had been making changes on its own when App 2 cut in with an update.</p>",
        "id": 226664030,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613572431
    },
    {
        "content": "<p>So<br>\n(1) you're saying the same data could be manipulated on the REST-ful endpoint and scratchpad simultaneously, and the EHR has to manage this Access.<br>\n(2) what is stopping App 1 and App 2 being the same - one app capriciously accessing the scratchpad or REST-ful endpoint, and the EHR applying the same guardrails?</p>",
        "id": 226664236,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613572515
    },
    {
        "content": "<ol>\n<li>The EHR has to manage access regardless.  There's always the possibility for resource contention - even if the only interface is REST.  </li>\n<li>I've proposed a SHALL saying that it's non-conformant to behave that way.  If we don't do that, then nothing prevents it, but you will end up with a frustrated end-user because their experience will suck.</li>\n</ol>",
        "id": 226664527,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613572657
    },
    {
        "content": "<p>Based on (1) I'm still not sure I understand there is a scratchpad different from the REST-ful endpoint.</p>",
        "id": 226664839,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613572798
    },
    {
        "content": "<p>So I'm still not sure what the scratchpad is, and that could use more definition. <br>\nOn the other hand, if we say, SMART Web Messaging has an EHR endpoint that provides managed access to work in progress resources, I can see that being reasonable.</p>",
        "id": 226665066,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613572890
    },
    {
        "content": "<p>The scratchpad is the stuff that isn't committed to the REST endpoint yet.  System 0 does a read, makes changes in memory, launches app 1 passes the 'dirty' resource, app 1 makes further changes,  passes back to System 0, user of system 0 may adjust further and eventually commits to the RESTful endpoint.  Only in that last step does a new version get exposed on the RESTful endpoint.  If some external system has changed the data on the REST endpoint in the meantime, then System 0 has to deal with the fact there's been a collision.  But very clearly there's a difference between the scratchpad and the REST endpoint because there have been multiple updates to the resource by different systems <em>without</em> creating a new version or exposing anything on the RESTful endpoint.</p>",
        "id": 226665821,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613573234
    },
    {
        "content": "<p>That is only one way to implement things. <br>\nIn the example of two Apps 1 and 2, one hitting scratchpad, and the other the REST-ful endpoint, I can see a different managed access mechanism syncing changes, so that both Apps can manipulate successfully, and the above picture of scratchpad wouldn't work.</p>",
        "id": 226666119,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613573365
    },
    {
        "content": "<p>In that sense, the above picture is not defining interface, but defining EHR implementation..</p>",
        "id": 226666331,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613573434
    },
    {
        "content": "<p>And that synching mechanism doesn't involve anything being written to the REST endpoint by System 0 or anything launched from System 0 before the user decides they want it to be?</p>",
        "id": 226667169,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613573736
    },
    {
        "content": "<p>Doesn't have to..</p>",
        "id": 226667583,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613573874
    },
    {
        "content": "<p>In that implementation, there is no \"in-memory\" store - everything always persists.. with versioning..</p>",
        "id": 226667680,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613573896
    },
    {
        "content": "<p>Again \"scratchpad\" is a mental model for developers interacting with resources that <em>may not be</em> permanently stored anywhere. This doesn't prevent you from persisting scratchpad data somewhere in your own EHR implementation, but it avoids system level <em>guarantees</em> that would prevent other EHR implementations from taking different choices. It is an abstraction that provides the functionality for CDS/app interactions with potentially ephemeral data, without impacting how you implement it under the hood.</p>",
        "id": 226669459,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613574558
    },
    {
        "content": "<p>It is an unnecessary mental model that does not need definition, nor has clear definition.</p>\n<blockquote>\n<p>On the other hand, if we say, SMART Web Messaging has an EHR endpoint that provides managed access to work in progress resources, I can see that being reasonable.</p>\n</blockquote>",
        "id": 226670635,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613574970
    },
    {
        "content": "<p>When you write the word \"endpoint\" here, do you mean what SMART Web Messagingc calls a message group / message type? Or do you mean a fhir endpoint? Or something else?</p>",
        "id": 226671142,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613575164
    },
    {
        "content": "<p>\"endpoint\" is a generic word as I used here. This would still be an endpoint that listens to postmessages.<br>\nBut instead of \"scarchpad.\" it will be \"ui.\" or \"host.\" or \"ehr.\" <br>\nSome word that captures the \"entity that provides managed access\"</p>",
        "id": 226671310,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613575226
    },
    {
        "content": "<p>That removes the issue currently asking for definition of \"scratchpad\"</p>",
        "id": 226671363,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613575250
    },
    {
        "content": "<p>Also, the same entity today gives \"launchActivity\", \"done\" etc. messages - so that I would say they both should be the same..</p>",
        "id": 226671434,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613575280
    },
    {
        "content": "<p>I think you're just talking about renaming the word \"scratchpad\" to use a different word, and maintaining the semantics. As I've said before, I am open to discussing new names within the scope of this ballot.</p>",
        "id": 226671453,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613575287
    },
    {
        "content": "<p>Yes, I have said before that changing from using a word that stands for an \"arbitrary and not clearly defined space\" to a word that stands for the \"entity that provides managed access\" will resolve my concern. <br>\nOur reasons for agreeing on that solution seem very different, but that doesn't really matter to me.</p>",
        "id": 226671839,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613575399
    },
    {
        "content": "<p>again, if you want to update your tracker from last week make this request, or if you want to close last week's tracker and create a new one that's focused on this renaming request, that's something we could take up in the course of our ballot reconciliation.</p>",
        "id": 226672122,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613575488
    },
    {
        "content": "<p>The key point to note is, what I am proposing avoids JIRA issue <a href=\"https://jira.hl7.org/browse/FHIR-29349\">https://jira.hl7.org/browse/FHIR-29349</a> altogether.</p>",
        "id": 226672124,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613575488
    },
    {
        "content": "<p>Well, my issue already documents this - <a href=\"https://jira.hl7.org/browse/FHIR-31052\">https://jira.hl7.org/browse/FHIR-31052</a></p>",
        "id": 226672219,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613575522
    },
    {
        "content": "<p>I am confident that whatever we call it, we will need a definition :-)</p>",
        "id": 226672231,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613575526
    },
    {
        "content": "<p>Defining \"arbitrary and not clearly defined space\" - is defining something that I'm not sure has a clear definition.<br>\nDefining \"entity that provides managed access\" - is defining the EHR that is hosting the App, which can actually be left implicit.</p>",
        "id": 226672428,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613575596
    },
    {
        "content": "<p>it might help guide discussion if you can get a pull request together implementing the cleanest way you see to make this change, and we can iterate on this before trying to bring it up for a vote.</p>",
        "id": 226672592,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613575656
    },
    {
        "content": "<p>I'm not saying this is requirement, just trying to make a productive suggestion, since we won't be able to devote another hour to this topic in our call.</p>",
        "id": 226672619,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613575671
    },
    {
        "content": "<p>Sure, I can do that.</p>",
        "id": 226672652,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613575681
    },
    {
        "content": "<p>It's not ok for content to be persisted with versioning unless the user says they want it to be.  Users sometimes want to be able to draft things without the outside world ever seeing what they're contemplating.  Also, the changes that they're contemplating sometimes <em>can't</em> be exposed until they declare 'done'.  E.g. processing a patient discharge.</p>",
        "id": 226672832,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613575733
    },
    {
        "content": "<p>The requirement of \"don't write to the REST endpoint\" is a firm one.</p>",
        "id": 226672882,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613575751
    },
    {
        "content": "<p>I'm pretty sure Matt is not planning to document a set of changes that involves writing to a REST endpoint or exposing a versioned history API -- I am expecting he is just going to rename the scratchpad message group and perhaps tweak or refine the associated definitions.</p>",
        "id": 226673096,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613575824
    },
    {
        "content": "<blockquote>\n<p>Users sometimes want to be able to draft things without the outside world ever seeing what they're contemplating.</p>\n</blockquote>\n<p>That is access control.</p>",
        "id": 226673111,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613575829
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> , again you're using the word \"draft\" :P</p>",
        "id": 226673223,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613575874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233081\">@Carl Anderson</span> it would be good to make sure the scratchpad definition we voted on last week is incorporated before this PR work happens, so Matt can either tweak or delete as he sees fit in his proposal</p>",
        "id": 226673232,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613575877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> , I think it shouldn't be incorporated.. <br>\nMy PR is going to say \"scratchpad.&lt;&gt;\" is deprecated since it is unclear what scratchpad is, and instead have \"ui.create\", \"ui.delete\", \"ui.update\".</p>",
        "id": 226673410,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613575935
    },
    {
        "content": "<p>That's fine; I just want to document this in the PR. It might look like we delete that paragraph. But since we voted on putting it in I want to make the lineage of these changes explicit in your proposal</p>",
        "id": 226673494,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613575968
    },
    {
        "content": "<p>(I would also suggest you may be able to avoid talking about deprecation since we have not yet published the API and in this first version it will be called whatever it is called.)</p>",
        "id": 226673577,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613575998
    },
    {
        "content": "<p>Okay</p>",
        "id": 226673786,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613576076
    },
    {
        "content": "<p>(I would also suggest you not directly propose new language to include in the specification that tries to explain problems with deleted language that readers will not be looking at -- best to publish something clear and proactive.)</p>",
        "id": 226673792,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613576076
    },
    {
        "content": "<p>I was going to make a PR that included all three issues..</p>",
        "id": 226673888,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613576117
    },
    {
        "content": "<p>If you are reworking things that we voted on last week, it would be good to make this explicit. I think there's a lot of useful informative context in the definition we put together even if we don't keep those words.</p>",
        "id": 226674080,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613576191
    },
    {
        "content": "<p>Let me discuss process with you and Carl offline?</p>",
        "id": 226674350,
        "sender_full_name": "Matt Varghese",
        "timestamp": 1613576288
    },
    {
        "content": "<p>Also, one concept that emerged in discussion on zulip over the last week for me is the usefulnessof explaining equivalence with the CDS hooks programming model; we already state equivalents in the specification but it didn't come up in our discussion, and I thought it was clarifying to note that the same kinds of access and manipulation that happen in CDS hooks \"suggestions\" are the sorts of things that apps can accomplish with SMART Web Messaging.</p>",
        "id": 226674454,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1613576331
    }
]