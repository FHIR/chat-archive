[
    {
        "content": "<p>Could someone please explain what the difference between patient and user scope is for a standalone launch? I'm on the Carin BlueButton track where we use SMART for a patient to authenticate to their payer to obtain EOBs etc. Would the user and patient scopes be the same here? Is it suffice to just support one (ie <code>patient/*.read</code> and not <code>user/*.read</code>)</p>",
        "id": 222890209,
        "sender_full_name": "Benjamin Langley",
        "timestamp": 1610730550
    },
    {
        "content": "<p>As a sort of follow up - is the patient scope just resources in the patient compartment? So if we wanted every user to be able to read all Organizations would that need to be <code>user/Organization.read</code> or would <code>patient/Organization.read</code> be suffice</p>",
        "id": 222890712,
        "sender_full_name": "Benjamin Langley",
        "timestamp": 1610730724
    },
    {
        "content": "<ul>\n<li>\n<p><code>patient/</code> scopes are appropriate when your app needs to get access to a specific patient record (the user will select which patient as part of the approval process).</p>\n</li>\n<li>\n<p><code>user/</code> scopes are appropriate when your app needs access to all the records the approving user is allowed to access</p>\n</li>\n</ul>",
        "id": 222896497,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1610733031
    },
    {
        "content": "<p>For patient access API requirements, often <code>patient/</code> scopes are good enough</p>",
        "id": 222896588,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1610733070
    },
    {
        "content": "<p>Scopes aren't strictly tied to the FHIR \"CompartmentDefinition\" because the compartment definition is quite rigid and authorization servers are free to define access and more flexible ways (e.g., including additional data that is linked to by resources in the patient compartment)</p>",
        "id": 222896770,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1610733150
    },
    {
        "content": "<p>Hi Josh, this was really helpful. One follow up - since its not required for servers to publish which scopes they support is it just expected the client will need to determine how to deal scope errors (i.e. if a client requests a scope and the auth server returns an error its up to the client to figure out how to deal with that). Is there any guidance for how a client could go about this (if the supported scopes aren't published)?</p>",
        "id": 222918687,
        "sender_full_name": "Benjamin Langley",
        "timestamp": 1610741627
    },
    {
        "content": "<p>We recommend that servers publish in the .well-known/smart-configuration doc; in the real world, servers should publish in their documentation, fo humans to read too. And ultimately, apps need to be robust to unsupported scopes (like, come back and try again).</p>",
        "id": 222919319,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1610741892
    },
    {
        "content": "<p>Gotcha. Is there a reason its not a required field?</p>",
        "id": 222919444,
        "sender_full_name": "Benjamin Langley",
        "timestamp": 1610741967
    },
    {
        "content": "<p>It can be hard for a server to express <em>all scopes</em> it can support, since they can grow combinatorially.</p>",
        "id": 222919662,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1610742059
    },
    {
        "content": "<p>But for your specific use case, actually you can just check whether <code>permission-patient</code> or <code>permission-user</code> are listed in <code>capabilities[]</code>.</p>",
        "id": 222919729,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1610742097
    },
    {
        "content": "<p>So that's actually a much better answer, in this specific case.</p>",
        "id": 222919766,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1610742116
    },
    {
        "content": "<p>Clear, unambiguous documentation, even ;-)</p>",
        "id": 222919823,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1610742128
    },
    {
        "content": "<p>Also keep in mind a server could support a scope but the user could remove it (or the server could deny it). I wouldn't just keep retrying :)</p>",
        "id": 222920276,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1610742335
    },
    {
        "content": "<p>You definitely don't want to auto-retry, or keep retrying repeatedly; but between authz responses and user input, there are cases where you'll want to re-try with different/down-selected scopes.</p>",
        "id": 222920999,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1610742628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191315\">Josh Mandel</span> <a href=\"#narrow/stream/179170-smart/topic/Patient.20vs.20User.20Scope/near/222896497\">said</a>:</p>\n<blockquote>\n<ul>\n<li>\n<p><code>patient/</code> scopes are appropriate when your app needs to get access to a specific patient record (the user will select which patient as part of the approval process).</p>\n</li>\n<li>\n<p><code>user/</code> scopes are appropriate when your app needs access to all the records the approving user is allowed to access</p>\n</li>\n</ul>\n</blockquote>\n<p>Need one clarification here. Does it mean the access token issued with patient scope with a specific patient (during approval) cannot be used for any FHIR API of another patient?</p>",
        "id": 222938156,
        "sender_full_name": "Sagar Shah",
        "timestamp": 1610751655
    },
    {
        "content": "<p>Correct</p>",
        "id": 222942620,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1610754862
    },
    {
        "content": "<p>Thank you for clarification here. Also, if the app only has patient/ scopes, then how does the auth server know what patients to be shown in the picker? Is it up to the EHR/patient portal to determine user permissions here and accordingly display the list of patients?</p>",
        "id": 222983125,
        "sender_full_name": "Sagar Shah",
        "timestamp": 1610806205
    },
    {
        "content": "<p>Up to the EHR. Usually it has a list of patient each user can access - like their family members or the likes</p>",
        "id": 223016204,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1610844985
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span>  for clarifying.</p>",
        "id": 223017085,
        "sender_full_name": "Sagar Shah",
        "timestamp": 1610846462
    },
    {
        "content": "<p>I'm getting a lot of questions about the patient scoping requirements- and making sure I'm following the right path.  Right now my understanding from all of this discussion is that if I request a patient/ scope, and the user picks a patient at consent time.  This token will be rejected by the resource server if an attempt is made to access a different patient than was selected.  The piece I'm struggling with is- in the implementations where the access_token is opaque- how does the resource server know which patient a given token is bound to (and all downstream refreshed tokens as well)?</p>",
        "id": 225168555,
        "sender_full_name": "Dan Cinnamon",
        "timestamp": 1612450182
    },
    {
        "content": "<p>The access token is opaque for the client, but the server must know how to validate it and what does it grant</p>",
        "id": 225173762,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1612452200
    },
    {
        "content": "<p>Gotcha- thank you <span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span> , so for example in a case where the resource server and the authorization server are part of the same product suite- there must be some communication within the components so that if authz server mints opaque token \"12345abcd\" for patient 6789, the resource server portion of that can look up that fact somewhere while validating/introspecting (and if the requested patient is not 6789- reject). Additionally, any refreshed access tokens would also be bound to patient 6789 and that same communication/lookup will occur. Is that right?</p>",
        "id": 225183858,
        "sender_full_name": "Dan Cinnamon",
        "timestamp": 1612455937
    },
    {
        "content": "<p>Yes</p>",
        "id": 225184390,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1612456127
    },
    {
        "content": "<p>Thank you! Much appreciated!</p>",
        "id": 225185246,
        "sender_full_name": "Dan Cinnamon",
        "timestamp": 1612456416
    },
    {
        "content": "<p>Not sure of that should be a 401 reject, or a 404 not found. Security considerations I expect here might result in either of these?</p>",
        "id": 225454367,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1612690077
    },
    {
        "content": "<p>403 or maybe 404, not 401</p>",
        "id": 225461711,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1612700597
    }
]