[
    {
        "content": "<p>Are there any examples by launching an app by using the \"Client Credential Flow\" from OAuth2? Here the SMART authorization is more simple and direct, because there are no users involved.</p>",
        "id": 255052689,
        "sender_full_name": "Bernard Stibbe",
        "timestamp": 1632751274
    },
    {
        "content": "<p>We don't call this an app launch -- but you could build a SMART Backend Services integration that happens to include a user facing application. The distinction is the trust model: if there is nothing to tell the EHR what user is running the app, then the trust is better the EHR and the service itself.</p>",
        "id": 255061043,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1632754227
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> </p>\n<p>I don't understand the trust is better the EHR and the service itself? <br>\nWe start from a (EHR) portal a module (service). The portal and module are registered and authenticated. <br>\nBut we need to have a launch context for the module. How do we do that?</p>",
        "id": 255068757,
        "sender_full_name": "Bernard Stibbe",
        "timestamp": 1632756794
    },
    {
        "content": "<p>I'm not saying anything about \"better\" -- but if you want to provide Launch Context for an app, using our existing standards, you'll need to use the App Launch profile.</p>",
        "id": 255071817,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1632757939
    },
    {
        "content": "<p>This needn't entail any additional user facing steps; the flow can be automatic from the user's perspective</p>",
        "id": 255071928,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1632757983
    },
    {
        "content": "<p>The problem with the authorization code flow is for the (confidential) apps. <br>\nAn Authorization header HTTP Basic authentication is (now) required, where username is the app’s client_id and the password is the app’s client_secret. However we are using signed tokens to authenticate  (confidential) apps.</p>",
        "id": 255074114,
        "sender_full_name": "Bernard Stibbe",
        "timestamp": 1632758703
    },
    {
        "content": "<p>In the upcoming SMARTv2 release, SMART App Launch clients can authenticate to the token endpoint using a JWS (just as with backend services) rather than a symmetric secret. This is still an authorization code flow though (I e., the grant is an authorization code).</p>",
        "id": 255077518,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1632760000
    },
    {
        "content": "<p><a href=\"https://build.fhir.org/ig/HL7/smart-app-launch\">https://build.fhir.org/ig/HL7/smart-app-launch</a> (see the authentication items in the menu)</p>",
        "id": 255077663,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1632760050
    }
]