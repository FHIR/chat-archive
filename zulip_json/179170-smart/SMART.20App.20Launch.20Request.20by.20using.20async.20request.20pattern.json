[
    {
        "content": "<p>Hello,</p>\n<p>Is there an \"Launch\" Request available as a asynchronous request pattern, like the \"Kick Off Request\", so we can launch a SMART app via a FHIR RESTfull API, with a FHIR Task resource as input parameter.</p>\n<p>The advantage of this is, is that a front-end, which is already authorized and possibly has a JWT (access token), does not need to have knowledge of \"SMART on FHIR\" and that all parties, except for a FHIR (Launch) RESTful server, launch interventions by a FHIR RESTful API.</p>",
        "id": 218019642,
        "sender_full_name": "B Stibbe",
        "timestamp": 1606407988
    },
    {
        "content": "<p>Just to add on to this you could add the launch context to the <code>access_token</code> itself. i.e. the decoded access token could look like (where <code>patient</code> and <code>encounter</code> provide context to the resource server):</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">\"patient\"</span><span class=\"p\">:</span> <span class=\"s2\">\"fc200fa2-12c9-4276-ba4a-e0601d424e55\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"encounter\"</span><span class=\"p\">:</span> <span class=\"s2\">\"800321\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"token_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bearer\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"scope\"</span><span class=\"p\">:</span> <span class=\"s2\">\"patient/*.* user/*.* launch openid fhirUser profile offline_access\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"client_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"whatever\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"expires_in\"</span><span class=\"p\">:</span> <span class=\"mi\">3600</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"fhirUser\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Patient/1234\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"iat\"</span><span class=\"p\">:</span> <span class=\"mi\">1606503609</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"exp\"</span><span class=\"p\">:</span> <span class=\"mi\">1606507209</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 218126922,
        "sender_full_name": "Robert Smayda",
        "timestamp": 1606508794
    },
    {
        "content": "<p>Hey B, I don't entirely understand your use-case.  Would the \"already authorized front-end\" ignore the iss and launch parameters?  Are you looking for context synchronization, a la <a href=\"http://fhircast.org/specification/STU2/\">FHIRcast</a>?</p>\n<p>At any rate, there isn't a proven pattern using Task, but here's an approach being experimented with: <a href=\"http://fhircast.org/specification/STU2/\">SMART app launch using Task Workflow</a>. Also CDS Hooks may also do what you're asking: <a href=\"https://cds-hooks.org/\">https://cds-hooks.org/</a>.</p>",
        "id": 218324634,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1606760442
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"191864\">@Isaac Vetter</span> </p>\n<p>The use-case is that we like to use a FHIR RESTful service that overlays underlying (standard) technologies, like SMART on FHIR, and provide an extra layer by encapsulating the apps by means of a (launching) service provider (as infrastructural facility).</p>\n<p>The (launching) service provider has the knowledge (registered info) of the apps: such as location, name, device, type, etc. and minimizes the dependencies between front- and back-end.</p>\n<p>Bernard<br>\n<a href=\"user_uploads/10155/gCaJMDO2bIB21zeAupDbhl19/Components.jpg\">Components.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/10155/gCaJMDO2bIB21zeAupDbhl19/Components.jpg\" title=\"Components.jpg\"><img src=\"user_uploads/10155/gCaJMDO2bIB21zeAupDbhl19/Components.jpg\"></a></div>",
        "id": 218406731,
        "sender_full_name": "B Stibbe",
        "timestamp": 1606820661
    }
]