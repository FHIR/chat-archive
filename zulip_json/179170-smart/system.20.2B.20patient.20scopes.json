[
    {
        "content": "<p>Good evening everyone,</p>\n<p>We have a patient-facing app that collects patient entered data and relies on the EMR to manage identities. Therefore we need patient/* scopes and we need the authorization code grant type for identity reasons. Except, we also wish to post a monthly summary report note back to the EMR, and hit a roadblock since most EMRs do not accept patient/DocumentReference.write nor (IMO) should they.</p>\n<p>The right solution here is probably to create a secondary app with its own client ID and register this secondary app with a single system-level scope (system/DocumentReference.write) and use its credentials to write back notes. Keeping the system/* scopes and the patient/* scopes separate in each app.</p>\n<p>Or is it? Wanted to see if incorporating system scopes and patient scopes in the same application is lunacy :)</p>",
        "id": 177102264,
        "sender_full_name": "Daniel Bonistalli",
        "timestamp": 1569967664
    },
    {
        "content": "<blockquote>\n<p>if incorporating system scopes and patient scopes in the same application is lunacy</p>\n</blockquote>\n<p>I don't see why you want a system level scope. Why not patient/DocumentReference.write?</p>",
        "id": 177102730,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569968088
    },
    {
        "content": "<p>how is system level better than patient level?</p>",
        "id": 177102740,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569968099
    },
    {
        "content": "<p>One clarification: patient/DocumentReference.write doesn't mean that the patient is the user creating the document. It just means the token is scoped to a specific patient that was chosen at launch. Do you mean that most systems don't accept DocumentReferences that are authored by the patient themselves? If so, that's likely true. However, I question if that is what is going on here.</p>",
        "id": 177150822,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570023754
    },
    {
        "content": "<p>Where is that DocumentReference coming from?</p>",
        "id": 177150920,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570023827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> We would prefer patient/DocumentReference.write, but have seen it not supported in some EHRs in their FHIR platforms. I think they are wary of including patient entered data in their EMR w/o clinician validation (understandable).<br>\n<span class=\"user-mention\" data-user-id=\"191356\">@Jenni Syed</span> patient facing apps in Cerner aren't supporting any write scopes which means that an app that wishes to write back to the EMR may need to rely on some kind of system level access to post back a summary note.</p>",
        "id": 177179545,
        "sender_full_name": "Daniel Bonistalli",
        "timestamp": 1570041653
    },
    {
        "content": "<p>Right. But there's a difference between not allowing \"patient entered data\" (when the patient is authenticated) and not allowing patient/DocumentReference.write (which we do allow - when the <em>practitioner</em> is authenticated and providing the data).</p>",
        "id": 177181037,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570042589
    },
    {
        "content": "<p>Who created the clinical note that is being sent back to the system? Did the patient themselves actually create it (eg: is it just a journal of something going on)?</p>",
        "id": 177181117,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570042662
    },
    {
        "content": "<p>Patient enrolls for a study in which they enter some patient sourced data on a daily or weekly basis. Hospital systems are desiring that either A: scheduled summaries to be posted to the EHR or B: summaries to be posted to the EHR when the patient completes an action such as completing a pain score survey.</p>\n<p>No practitioners are ever authenticated in this app. This is the root of the issue IMO - getting data into the EHR w/o practitioners needing to authenticate themselves and perform some action that triggers posting the note or observation.</p>\n<p>My understanding is this is a case where introducing an additional system-level app might make sense because the note is not explicitly created by the patient or the clinician - it is generated by the application. I think this conversation answers my original question; it doesn't make sense to include system level scopes and patient level scopes within the same app, and instead these functions could be handled by two separate apps with separate scope levels.</p>",
        "id": 177190448,
        "sender_full_name": "Daniel Bonistalli",
        "timestamp": 1570048852
    },
    {
        "content": "<p>I think you are confusing different issues. a patient scope grants access to a particular patient record to some known user. Whether the source of any data being uploaded is the patient, a device, or some 3rd party, that's not related to the scope, it's a provenance issue</p>\n<p>A system level scope grants access to the entire system, to upload documents for any patient (though a system typically will have additional permissions control)</p>\n<p>I think that you want patient level access, and you want a further discussion with the vendors about provenance and permissions, which is not something that the scopes are baout</p>",
        "id": 177191284,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570049417
    },
    {
        "content": "<p>Agreed - it's ultimately a permissions issue with the vendors and falls outside the bounds of scopes and probably this discussion stream. I imagine the use case is not unique and there may be other patient facing apps that need EHR write-back permissions for whatever reasons. Thanks!</p>",
        "id": 177195142,
        "sender_full_name": "Daniel Bonistalli",
        "timestamp": 1570052508
    },
    {
        "content": "<p>I actually question, from a security perspective, why the study system would be writing back data on behalf of the patient. Does this mean the system is passing around and storing bearer tokens per patient long term?</p>",
        "id": 177195208,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570052533
    },
    {
        "content": "<p>Typically we try to isolate bearer tokens by use case, and if the systems are separate architectures, to isolate them to the purposes they have</p>",
        "id": 177195242,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570052579
    },
    {
        "content": "<p>The questionaire side seems to be more like patient contributed data, and actually tied to the patient's session</p>",
        "id": 177195268,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570052610
    },
    {
        "content": "<p>Other data that is produced by the study itself seems like a separate use case and could be contributed back directly by the study system itself</p>",
        "id": 177195356,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570052655
    },
    {
        "content": "<p>Agreed on all accounts. Data produced by the study could be aggregated and pushed by the study system functioning as a system level application, isolating this bearer token from any patient-facing use case.<br>\nAnd questionnaire info would be patient contributed data and probably should be posted using the patient's session and bearer token. This use case is tough as bearer tokens issued to patients don't have write permissions for most EHRs (I could be totally mistaken though as my source of information is external facing EHR documentation).</p>",
        "id": 177195567,
        "sender_full_name": "Daniel Bonistalli",
        "timestamp": 1570052819
    },
    {
        "content": "<p>Yes, that is a gap today :) I know it's one there's also interest in closing.</p>",
        "id": 177195636,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570052879
    },
    {
        "content": "<p>It's an interesting discussion, the health systems we build FHIR apps for usually want some kind of write-back to the EHR; it fundamentally is the source of truth. But the .write scopes are quite broad and granting third party apps the freedom to let users write note after note after note comes with risk for the EHR.</p>",
        "id": 177196308,
        "sender_full_name": "Daniel Bonistalli",
        "timestamp": 1570053371
    },
    {
        "content": "<p>It'd be awesome to close that gap :) but I understand why it's not that simple</p>",
        "id": 177196377,
        "sender_full_name": "Daniel Bonistalli",
        "timestamp": 1570053434
    },
    {
        "content": "<p>I don't think that scopes are the question here. the scope is a authorization discussion between the record keeper, the application, and the user around what access <em>the user</em> wants to grant to the application. The discussion between the application and the record keeper is a different discussion that isn't limited to scopes and we shouldn't try and solve it with scopes</p>",
        "id": 177196798,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570053664
    },
    {
        "content": "<p>Sure, but when a patient authorizes an app to do something, they're authorizing the app to do it on behalf of them</p>",
        "id": 177197112,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570053843
    },
    {
        "content": "<p>They don't have the authority to authorize the app to do things as a clinical user</p>",
        "id": 177197135,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570053859
    },
    {
        "content": "<p>A practitioner doesn't typically authorize an app to act on their behalf (their system admin determines if that is an ok thing) - though there are exceptions</p>",
        "id": 177197174,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570053894
    },
    {
        "content": "<p>of course. a user can only authorise an application to do things that the record keeper is going to allow them to do (well, I mean, they can authorise more but that won't mean it's possible)</p>",
        "id": 177197190,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570053900
    },
    {
        "content": "<p>Which means the app can have no more privs beyond the original authorizer</p>",
        "id": 177197204,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570053906
    },
    {
        "content": "<p>typically</p>",
        "id": 177197215,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570053915
    },
    {
        "content": "<p>(otherwise, in a web world, the user could likely just do it  - without requiring server sides and signed bodies, etc)</p>",
        "id": 177197240,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570053938
    },
    {
        "content": "<p>I don't think he wants the <em>clinical</em> doc to follow the path we would follow if a patient handed us the same doc</p>",
        "id": 177197308,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570053967
    },
    {
        "content": "<p>from a trust and validation perspective</p>",
        "id": 177197316,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570053975
    },
    {
        "content": "<p>indeed. but again, this is not a scope related issue</p>",
        "id": 177197369,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570054029
    },
    {
        "content": "<p>correct</p>",
        "id": 177197376,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570054033
    },
    {
        "content": "<p>Though an unfortunate side effect of doing B2B auth in SMART <em>is</em> that the system scopes are used. Which is confusing, and does cause a lot of this intermingling</p>",
        "id": 177197481,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570054101
    },
    {
        "content": "<p>because the patient/ and user/ scopes just are tied to any \"on behalf of any user\" workflow</p>",
        "id": 177197499,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570054123
    },
    {
        "content": "<p>So I can see where the confusion comes from</p>",
        "id": 177197518,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570054135
    },
    {
        "content": "<p>y. on the system interface something totally different is required, but it's at app registration time.</p>",
        "id": 177197556,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570054180
    },
    {
        "content": "<p>This has confused me, as I agree the app context can't have more rights than the user. So I have often wondered what the use of patient scope was.</p>",
        "id": 177198552,
        "sender_full_name": "John Moehrke",
        "timestamp": 1570055097
    },
    {
        "content": "<p>triggers a different pathway on the AS</p>",
        "id": 177198891,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570055476
    },
    {
        "content": "<p>I heard the phrase \"foreground SMART\" yesterday used to make the distinction between b2b/backend/system/client_credentials and auth code/provider/patient-authorized. </p>\n<p>I thought it was an interesting (and useful) term.</p>",
        "id": 177203260,
        "sender_full_name": "Isaac Vetter",
        "timestamp": 1570059863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span>  the patient scopes limit that bearer token to a specific patient that was chosen at launch or before launch</p>",
        "id": 177262902,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570121107
    },
    {
        "content": "<p>So even if the user can access 10,000 patients, the app can only access 1 of those</p>",
        "id": 177262918,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570121124
    },
    {
        "content": "<p>as a security person, I would prefer that the specific <a href=\"http://Patient.id\" target=\"_blank\" title=\"http://Patient.id\">Patient.id</a> be included in the token. seems improper security to assume that the launch context is  a security resource</p>",
        "id": 177263890,
        "sender_full_name": "John Moehrke",
        "timestamp": 1570121790
    },
    {
        "content": "<p>In our implementation, it is, but token and how resources interact with the auth server are outside the scope of standards. The launch is just how that patient id gets chosen/the app requests it.</p>",
        "id": 177264791,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570122307
    },
    {
        "content": "<p>Other servers could choose to communicate token restrictions/scopes/etc in a different way and still enforce what is needed.</p>",
        "id": 177264839,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570122345
    },
    {
        "content": "<blockquote>\n<p>as a security person, I would prefer that the specific <a href=\"http://Patient.id\" target=\"_blank\" title=\"http://Patient.id\">Patient.id</a> be included in the token. seems improper security to assume that the launch context is a security resource</p>\n</blockquote>\n<p>The token is <em>bound to</em> the patient ID in this case -- but the token itself is opaque the the client, so this information needs to be communicated in some standard way (either a launch context parameter that comes next to the token, or through a context resolution API call, like token introspection)</p>",
        "id": 177267174,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1570123875
    },
    {
        "content": "<p>at the moment the only way I know to do this is search patient, to see what you have access to</p>",
        "id": 177279643,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570131771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> are you talking about if it's a user level scope and NOT constrained to a single patient?</p>",
        "id": 177280185,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570132096
    },
    {
        "content": "<p>or for the app to choose the patient in order to fulfill the launch/patient (or launch) that is required for a patient level scope?</p>",
        "id": 177280340,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570132183
    },
    {
        "content": "<p>no for the app to find out what patient it's actually dealing with with a patient level scope</p>",
        "id": 177281106,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570132588
    },
    {
        "content": "<p>Inspecting the launch context is the main way, right now (if you did a <em>single-patient</em> launch).</p>",
        "id": 177281341,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1570132724
    },
    {
        "content": "<p>what about stand-alone launch, which seems to me the more likely thing for patient/ access?</p>",
        "id": 177289354,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570137550
    },
    {
        "content": "<p>Use launch/patient, get back id in token response</p>",
        "id": 177289827,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1570137912
    },
    {
        "content": "<p>it's always in the returned launch context to the app when a patient (or encounter) is requested</p>",
        "id": 177290165,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570138191
    },
    {
        "content": "<p>our auth server errors if you use patient scopes and don't request the patient (via launch or launch/patient)</p>",
        "id": 177290230,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570138217
    },
    {
        "content": "<blockquote>\n<p>our auth server errors if you use patient scopes and don't request the patient</p>\n</blockquote>\n<p>how do you connect if you don't know the patient id - depend on the patient to identify themselves ?</p>",
        "id": 177290279,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570138269
    },
    {
        "content": "<p>The patient has to login to authorize the app - then it picks up the patient if there are more than one he can access to (dependents etc) - and that is returned to the app and becomes the patient-in-context</p>",
        "id": 177292801,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1570140118
    },
    {
        "content": "<p>but that's not consistent with </p>\n<blockquote>\n<p>our auth server errors if you use patient scopes and don't request the patient</p>\n</blockquote>",
        "id": 177293116,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570140364
    },
    {
        "content": "<p>? If the app does request patient scopes and do not specify launch/patient the auth server will complain, otherwise everything works</p>",
        "id": 177293516,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1570140685
    },
    {
        "content": "<p>'pick up the patient' happens as part of the auth sequence, not via FHIR calls - if that's what you are asking</p>",
        "id": 177293606,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1570140749
    },
    {
        "content": "<p>I think I might have misunderstood </p>\n<blockquote>\n<p>don't request the patient</p>\n</blockquote>",
        "id": 177294269,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570141364
    },
    {
        "content": "<p>yeah, by \"don't request the patient\" I mean the app doesn't include the request for the SMART launch or launch/patient scopes (which drive a patient being chosen via the auth process/launch process before the token is issued)</p>",
        "id": 177351278,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570203732
    },
    {
        "content": "<p>If it's \"launch\" - in our system, the patient would have been chosen before the app is launched. EG: in our native chart</p>",
        "id": 177351305,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570203758
    },
    {
        "content": "<p>If it's launch/patient, our authorization server will require the selection of the patient <em>during</em> the authorization process (the app itself is not involved in this, the auth server does this workflow)</p>",
        "id": 177351338,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1570203787
    }
]