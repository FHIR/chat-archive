[
    {
        "content": "<p>What does a scope of <code>patient/Practitioner.*</code> mean to everyone?</p>\n<p>It would seem that there are a certain set of nonsensical patient-level scopes. Currently, SMART's clinical scopes must start with <code>patient/</code> or <code>user/</code>. However, whether you can use <code>patient/</code> (and perhaps <code>user/</code>) depends upon the FHIR resource</p>",
        "id": 153817114,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1458597625
    },
    {
        "content": "<p>A related question: imagine a provider-facing SMART app that wants to provide the ability to read + write the authenticated provider's Practitioner record.<br>\nThe app would request a scope of <code>user/Practitioner.*</code> to be granted the proper permissions. However, based upon the current SMART documentation, the app would get permissions to update *any* Practitioner record. The ideal state for this scenario is that SMART app is granted read/write permission on just the authenticated user's Practitioner record</p>",
        "id": 153817116,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1458597787
    },
    {
        "content": "<p>I wonder if rather than <code>patient/</code> and <code>user/</code> prefixes, we should be using <code>context/</code> and <code>all/</code> (or something like that). <code>context</code> would mean something semantically depending on the FHIR resource (eg, the patient in context, the provider in context, etc).</p>",
        "id": 153817117,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1458597866
    },
    {
        "content": "<p>I haven't thought through all of this but wanted to throw this out here to see if others have already thought about this</p>",
        "id": 153817118,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1458597905
    },
    {
        "content": "<p>You're right that it doesn't make sense to request \"patient/\" scopes on a resource with no \"patient\" element. </p>",
        "id": 153817126,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1458598614
    },
    {
        "content": "<p>As for user permissions: remember that our goal is not to model the whole system. \"user/Practitioner.write\" means \"allow writing to any practitioner resources that I, as the user, am allowed to edit\". </p>",
        "id": 153817127,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1458598684
    },
    {
        "content": "<p>The ehr knows/sets/enforces policy to determine that I can't write to Dr.  Jones's practitioner resource (unless I'm an administrator). </p>",
        "id": 153817128,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1458598754
    },
    {
        "content": "<p>This feel like a reasonable balance to me. I'm not sure how much  a generic \"context\" prefixed would improve expectations/understanding/consistency. </p>",
        "id": 153817129,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1458598814
    },
    {
        "content": "<p>well, it depends how much you care about context other than patient. </p>",
        "id": 153817133,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458599903
    },
    {
        "content": "<p>I think there's a lot of uses for Smart on FHIR outside context = patient </p>",
        "id": 153817134,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458599920
    },
    {
        "content": "<p>and so I think that Kevin's idea makes a lot of sense</p>",
        "id": 153817135,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458599938
    },
    {
        "content": "<p>But you'd need to define what it meant, is my point. I'm reluctant to add a generic prefix. </p>",
        "id": 153817136,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1458601009
    },
    {
        "content": "<p>If we can establish uses that systems will support, sure. </p>",
        "id": 153817137,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1458601028
    },
    {
        "content": "<p>Good points. I'll ammend my off the cuff thoughts to perhaps we just rename <code>patient/</code> to <code>context/</code> then (leave <code>user/</code> as-is). So, it's not adding a generic prefix so much as changing patient to a word that isn't specific to a particular type of context</p>",
        "id": 153817138,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1458602038
    },
    {
        "content": "<p>But that's just it: you'll want it to behave one way when there context is a patient, and a different way when the context is... something else? I'm saying let's describe \"patient\" for patient context, and other values when some other context is relevant. That will force us to confront the actual use cases rather than resorting to an underdefined generic value. </p>",
        "id": 153817139,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1458602974
    },
    {
        "content": "<p>well, ehr plug-ins should be expected in the following contexts:<br>\n- observation (/DR)<br>\n- medicationX<br>\n- care plan<br>\n- condition<br>\n- allergy<br>\n....</p>",
        "id": 153817140,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458603013
    },
    {
        "content": "<p>and I expect to use it in the tooling framework with any of the non-patient related resources as context </p>",
        "id": 153817141,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458603033
    },
    {
        "content": "<p>I'll need to understand the intended use cases / semantics (since they're not obvious to me from you're list). </p>",
        "id": 153817143,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1458603102
    },
    {
        "content": "<p>And when \"context\" implies multiple values (e.g. a patient <strong>and</strong> an encounter <strong>and</strong> a location), a single \"context/\" scope prefix doesn't make sense. </p>",
        "id": 153817144,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1458603286
    },
    {
        "content": "<p>well, that's an interesting case, yes. is the context is a particular observation, is access limited to the observation and related information, or to the patient and related information? </p>",
        "id": 153817145,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458603346
    },
    {
        "content": "<p>out side of the patient space, there's probably less interest in preventing read, and less need to prevent write based on context </p>",
        "id": 153817146,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1458603381
    },
    {
        "content": "<p>Good points, Josh</p>",
        "id": 153817148,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1458603815
    },
    {
        "content": "<p>fyi, my questions were prompted by an internal discussion here on whether our authorization server shouldn't disallow scopes that don't make sense (like patient/Practitioner)</p>",
        "id": 153817149,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1458604542
    },
    {
        "content": "<p>So, there are not specific/concrete needs or use cases from my end. Our internal discussion just spurred some thought on some what-ifs outside of the current resources we support today</p>",
        "id": 153817150,
        "sender_full_name": "Kevin Shekleton",
        "timestamp": 1458604618
    },
    {
        "content": "<p>Completely new here ... but looking to contribute. Would it be a correct assessment that the 'patient/' and 'user/' scopes, convey the realm for the authenticated user, and that SMART does not attempt to stipulate how the SMART scopes are mapped to access decisions? Have you seen a need to present different projections of data  (e.g. different resource bundles for observations - prelim lab results, provider notes etc) so that only data that's approrpiate for consumption by the user (e.g. patient) is shared?</p>",
        "id": 153818284,
        "sender_full_name": "Jonathan Ben-Hamou",
        "timestamp": 1459045891
    },
    {
        "content": "<p>Also, consider for example delegated access from a young man caring for his elderly mother, leveraging a SMART app. Could this care giver, use an app that requests a 'patient' scope, even if this person is not necessarily a bona-fide patient of that institution, but more for the reason that the 'patient' scope would offer least-privilage access (non-provider)? If this person were a bona-fide patient in addition to caring for a parent who is also a bona-fide patient of the same healthcare organization, could the 'patient/Patient.read' provide contemporaneous access both his record and his parent's record?</p>",
        "id": 153818285,
        "sender_full_name": "Jonathan Ben-Hamou",
        "timestamp": 1459046053
    },
    {
        "content": "<p>The notion is that you ask for \"patient/\" scopes if you want to access \"all of the (somethings) about the relevant patient\". And you use \"user/\" scopes if you want to access \"all the (somethings) that the authorizing user has access to to\". </p>",
        "id": 153818287,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459053447
    },
    {
        "content": "<p>So for your caregiver example, the son would be able to grant  \"patient/*.read\" on the mother's record. </p>",
        "id": 153818288,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459053493
    },
    {
        "content": "<p>The actual policy lives in the EHR; we only standardize how the sharing (delegation) happens. </p>",
        "id": 153818289,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1459053544
    },
    {
        "content": "<p>Thanks for clarifying.</p>",
        "id": 153818298,
        "sender_full_name": "Jonathan Ben-Hamou",
        "timestamp": 1459054964
    },
    {
        "content": "<p>There is some efforts outside of smart that are working on using a profile of OAuth called User Managed Access (UMA) to support these kinds of delegation functionality. These are quite bleeding edge, but could be very helpful if they can be shown to be both functional and effective. They are complementary and could plug into a smart infrastructure once they prove trustworthy. See <a href=\"http://openid.bitbucket.org/HEART/openid-heart-uma.html\" target=\"_blank\" title=\"http://openid.bitbucket.org/HEART/openid-heart-uma.html\">http://openid.bitbucket.org/HEART/openid-heart-uma.html</a> </p>",
        "id": 153818328,
        "sender_full_name": "John Moehrke",
        "timestamp": 1459099517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191654\">@Jonathan Ben-Hamou</span>  - I did <a href=\"http://fhirblog.com/2016/03/23/smart-scopes-and-profiles/\" target=\"_blank\" title=\"http://fhirblog.com/2016/03/23/smart-scopes-and-profiles/\">a post</a> on scopes that may be useful...</p>",
        "id": 153818332,
        "sender_full_name": "David Hay",
        "timestamp": 1459105519
    },
    {
        "content": "<p>We've, for a while, been tossing around the notion that scopes like <code>patient/Observation.read</code> are too simple (e.g. you don't really wan to lump all observations together). The problem is that you try to \"fix\" this you get scopes like:</p>\n<div class=\"codehilite\"><pre>{&quot;context&quot;:&quot;patient&quot;,&quot;resource&quot;:&quot;Observation&quot;,&quot;category&quot;:&quot;laboratory&quot;,&quot;permissions&quot;:[&quot;read&quot;,&quot;create&quot;]}\n</pre></div>\n\n\n<p>... which I've generally looked upon with fear. But maybe they're not so bad.</p>",
        "id": 153820535,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1460171329
    },
    {
        "content": "<p>there's a precipice here for sure. Cross the line, and whee.....</p>",
        "id": 153820570,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460238451
    },
    {
        "content": "<p>but if people are going to be forced to cross the lines by themselves....</p>",
        "id": 153820571,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460238483
    },
    {
        "content": "<p>but finer grained permissions might not be the right way to manage this?</p>",
        "id": 153820572,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1460238500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> we should separate out the permissions needs from the scope needs. scope should focus on logical sub-sets that are likely to need to be segmented based on client needs. Meaning they don't need to be as fine-grain as permissions, but they do need to be powerful enough that one can authorize an app with a sub-set of the users permissions.</p>",
        "id": 153821161,
        "sender_full_name": "John Moehrke",
        "timestamp": 1460462273
    },
    {
        "content": "<p>I did propose a scope model <a href=\"http://healthcaresecprivacy.blogspot.com/2016/01/fhir-oauth-scope.html\" target=\"_blank\" title=\"http://healthcaresecprivacy.blogspot.com/2016/01/fhir-oauth-scope.html\">http://healthcaresecprivacy.blogspot.com/2016/01/fhir-oauth-scope.html</a></p>",
        "id": 153821162,
        "sender_full_name": "John Moehrke",
        "timestamp": 1460462291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> I think I understand that you're proposing different scopes, but your article doesn't mention \"permissions\". I typically use \"scopes\" and \"permissions\" as synonyms; how do you characterize the difference? </p>",
        "id": 153821175,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1460463162
    },
    {
        "content": "<p>Also, you here described a desire for *coarser* grained scopes, but your article proposes much finer grained scopes than SMART uses today (e.g. your proposal includes not just resource but also sensitivity, purpose of use, etc). </p>",
        "id": 153821177,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1460463249
    },
    {
        "content": "<p>For US use cases, it seems to me there would be clear value in defining read and write scopes for things like  \"medications\", \"vital signs\", \"lab results\" (i.e. Generally aligned at the level of MU API requirements) </p>",
        "id": 153821178,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1460463343
    },
    {
        "content": "<p>The article was written a while ago, we have learned more..   Yes, scopes are generally going to be more coarse than permissions.  I use a general term permissions to encompass all the Access Control space inclusive of the Resource types, Patient privacy consents, data tagging, etc. </p>",
        "id": 153821182,
        "sender_full_name": "John Moehrke",
        "timestamp": 1460464122
    },
    {
        "content": "<p>I do like your idea that scopes should likely be a very different vector that is more logical. We are struggling with the similar problem in the Consent work. In Consent we have the problem that a Patient might want to slice and segment their whole medical history to give some subset to one doctor, where this is a different vector than we generally have in the Resource types, or the user roles, or the data sensitivity.</p>",
        "id": 153821185,
        "sender_full_name": "John Moehrke",
        "timestamp": 1460464245
    },
    {
        "content": "<p>My blog yesterday on how to write a Consent that focuses on the Resource types is an example. It might be easy to encode but it is not necessarly useful. (Note it is not really easy to encoded today but that is a different problem).</p>",
        "id": 153821186,
        "sender_full_name": "John Moehrke",
        "timestamp": 1460464322
    },
    {
        "content": "<p>I've just learned that UMA is a potential candidate for the Dutch national efforts around PHRs. </p>",
        "id": 153878710,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1490090598
    },
    {
        "content": "<p>Anyone know if UMA complements SMART on FHIR, or overlaps it.</p>",
        "id": 153878711,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1490090683
    },
    {
        "content": "<p>UMA is a high-level specification, useful for all domains. There is a \"HEART\" workgroup that is working on how one might use UMA in Healthcare. There are various participants from healthcare. Josh has presented, I have presented, and others. Their work is useful as an alternative way of managing consent, that is the patient has a relationship with a UMA authority to set rules (in proprietary format), all accesses of that patients data is routed (UMA style) through that authority for a decision (Permit/Deny). The group is making progress, but is struggling with not focusing on realistic use-cases, not prioritizing, and not cutting off debate. <a href=\"http://openid.net/wg/heart/\" target=\"_blank\" title=\"http://openid.net/wg/heart/\">http://openid.net/wg/heart/</a></p>",
        "id": 153878722,
        "sender_full_name": "John Moehrke",
        "timestamp": 1490097251
    },
    {
        "content": "<p>We do point at HEART, as well as SMART, and IHE-IUA on the FHIR security pages...</p>",
        "id": 153878723,
        "sender_full_name": "John Moehrke",
        "timestamp": 1490097289
    },
    {
        "content": "<p>The development of Scopes will take some experimentation. The SMART scopes are the best we have today, HEART somewhat followed them. I expect that healthcare data is going to stress the simplistic concept of OAuth scopes.  I go into some initial dept, wanted to write more but didn't see any interest <a href=\"https://healthcaresecprivacy.blogspot.com/2016/08/controlling-big-data-feeding-frenzy.html\" target=\"_blank\" title=\"https://healthcaresecprivacy.blogspot.com/2016/08/controlling-big-data-feeding-frenzy.html\">https://healthcaresecprivacy.blogspot.com/2016/08/controlling-big-data-feeding-frenzy.html</a> </p>",
        "id": 153878724,
        "sender_full_name": "John Moehrke",
        "timestamp": 1490097504
    },
    {
        "content": "<p><img alt=\":thumbsup:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> thanks, John!</p>",
        "id": 153878739,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1490101869
    },
    {
        "content": "<p>I'm finally adding this to my server and covering the \"action\" part as <span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> described - the .(read|write|*)<br>\nWondering if we've considered extending it to cover the other actions like operations.<br>\nI was contemplating</p>\n<div class=\"codehilite\"><pre><span></span>( &#39;patient&#39; | &#39;user&#39; ) &#39;/&#39; ( fhir-resource | &#39;*&#39; ) &#39;.&#39; ( &#39;read&#39; | &#39;write&#39; | $[AZaz-.]+ | &#39;*&#39; )\n</pre></div>\n\n\n<p>Where the $ covers operations too.<br>\nThis would make a scope like these valid:</p>\n<div class=\"codehilite\"><pre><span></span>patient/Patient.$everything\nuser/Observation.$lastn\nuser/Questionnaire.$populate\n</pre></div>",
        "id": 153955571,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1525319570
    },
    {
        "content": "<p>I think this is definitely worth experimenting with!</p>",
        "id": 153955795,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1525380247
    },
    {
        "content": "<p>Would love to get a sense of your experience with it.</p>",
        "id": 153955796,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1525380255
    },
    {
        "content": "<p>I'll do some experimentation and see how it looks.</p>",
        "id": 153955818,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1525384802
    },
    {
        "content": "<p>the other action that is notably absent here is delete<br>\n(makes sense that search and get are under GET, but DELETE under write seems wrong)</p>",
        "id": 153955871,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1525400920
    },
    {
        "content": "<p>Looking through the operations, I can't generalize the operation access to either read or write permission.<br>\nany operation that changes data would need write permission (metaAdd), and others are read (valueset expand)</p>",
        "id": 153955885,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1525405316
    },
    {
        "content": "<p>so my first rule is that the OAuth scopes are not a permissions model. Are we talking permissions or authorizations? I personally think that the coarse split into read/write makes perfect sense for authorizing an application, but doesn't begin to cover it for a permissions models, which are notoriously complicated.</p>",
        "id": 153956114,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1525496514
    },
    {
        "content": "<p>I think of the OAuth scopes as function/feature level security, not data level security.<br>\nA first pass filter before the tough stuff gets done.<br>\n(Though that's probably wrong too)</p>",
        "id": 153956124,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1525503076
    },
    {
        "content": "<p>you are both partially right, but partially wrong. Scopes only need to cover the space which is a declaration of what is authorized for this requesting actor. It does not cover all the rules used to make that decision.  OAuth is optimized for REST. This works really well when the various patterns for this level of authorization are simple, hierarchical, and declarative.  Hence why most scope models are  compartment and CRUD based. We have mostly designed FHIR to this model, but health data is more complex than a wiki, blog, filesystem, etc...    I think we have also missed the  principle that all elements in a resource should be the same level of access control need, one should not mix sensitive data into a resource at needs normal access.   The grouping of elements purely according to clinical need can make resources that are hard to have a binary permit/deny decision on.</p>",
        "id": 153956134,
        "sender_full_name": "John Moehrke",
        "timestamp": 1525522583
    },
    {
        "content": "<p>Do the scopes in the way that we're using them in SMART more cover the types that the APP is able to access, not the user of the app. The users permissions are still then evaluated after that... (which may be more restrictive, but not less)</p>",
        "id": 153956238,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1525574258
    },
    {
        "content": "<p>Yes, this is how I have looked at things. Scopes convey what an app is authorized to do, but are always restricted by the permissions of the user running the app.</p>",
        "id": 153956239,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1525574357
    },
    {
        "content": "<p>In the case with SMART, where the AS is tightly bound to the RS,  there can be many simplifying mechanisms that you use.  You can even do nothing other than PERMIT vs DENY, and do all actual authorization decisions in the RS.  Thus never exposing in a token anything useful for the app. The more likely is that you do expose gross authorizations, like are found in the SMART scopes.  If this s a specific goal driving SMART, then it should be declared. That intent description will then help people understand better the use-case that will fit SMART best. I don't know that this changes much of anything, but is a very useful thing for the reader of SMART to see. Right?</p>",
        "id": 153956247,
        "sender_full_name": "John Moehrke",
        "timestamp": 1525615320
    },
    {
        "content": "<p>I am not saying it is a limitation of SMART, but rather that it is an intended deployment simplifying assumption.</p>",
        "id": 153956248,
        "sender_full_name": "John Moehrke",
        "timestamp": 1525615583
    }
]