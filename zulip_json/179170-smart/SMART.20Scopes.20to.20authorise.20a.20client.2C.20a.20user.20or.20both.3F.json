[
    {
        "content": "<p>Apologies if this is a daft question, but I'd always assumed that a SMART on FHIR OAuth2 authorisation request was essentially requesting authorisation for a client (system) to access data for a user (e.g. a healthcare professional), and that the OAuth2 server should take account of both the client (system) and the user (roles, etc) in deciding which scopes to authorise. I've come across other OAuth2 discussions which suggest it should only be used to authorise scopes for a client, and any user permissions should be handled in the API rather than the OAuth2 endpoint - e.g. this thread: <a href=\"https://stackoverflow.com/questions/50267663/how-to-return-different-scopes-for-different-roles-in-identityserver-4/50270143\" target=\"_blank\" title=\"https://stackoverflow.com/questions/50267663/how-to-return-different-scopes-for-different-roles-in-identityserver-4/50270143\">https://stackoverflow.com/questions/50267663/how-to-return-different-scopes-for-different-roles-in-identityserver-4/50270143</a><br>\nDo you have a view on this?</p>",
        "id": 168142849,
        "sender_full_name": "Adam Hatherly",
        "timestamp": 1560524737
    },
    {
        "content": "<p>could be either.. this level is a 'systems design' decision made between the team working on the authorization server and the resource server.  Typically the decision is the combined app rights and user rights. But there is no reason why it can't be only app rights. Note that there is a third vector of patient-consent which could also be included, or left to the resource server.  The more decisions one includes in OAuth, the better separation of duties (authZ vs Resource-Server); but the more decisions made the harder to encode the permissions and residual obligations in the token/scope. So it is ultimately a systems design complexity tradeoff.</p>",
        "id": 168143945,
        "sender_full_name": "John Moehrke",
        "timestamp": 1560525505
    },
    {
        "content": "<p>ok, that makes sense. To I think the blanket statement in that stackoverflow post that OAuth2 scopes are only for client AuthZ and should not be used for user rights is incorrect - which is what I thought!</p>",
        "id": 168144085,
        "sender_full_name": "Adam Hatherly",
        "timestamp": 1560525605
    },
    {
        "content": "<p>well, you might want to read this: <a href=\"http://www.healthintersections.com.au/?p=2967\" target=\"_blank\" title=\"http://www.healthintersections.com.au/?p=2967\">http://www.healthintersections.com.au/?p=2967</a></p>\n<p>I don't think you can't use them for user rights... in fact, I do, in <a href=\"http://test.fhir.org\" target=\"_blank\" title=\"http://test.fhir.org\">test.fhir.org</a>. But I can only do that because my server is not a real clinical system</p>",
        "id": 168172425,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560547076
    },
    {
        "content": "<p>I think the primary requirement is that, once the API is called, both the user and the app rights are enforced. The spec leaves it to the implementer to determine how that is done.</p>",
        "id": 168313591,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1560780731
    },
    {
        "content": "<p>Thanks all. I agree with the scope questions on the page you posted <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> - they are things I've grappled with in the past also. I'll have a think and maybe make some suggestions on the scopes thread if I come up with any ideas.</p>",
        "id": 168412044,
        "sender_full_name": "Adam Hatherly",
        "timestamp": 1560871649
    }
]