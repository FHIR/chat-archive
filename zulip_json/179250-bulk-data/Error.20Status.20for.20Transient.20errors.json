[
    {
        "content": "<p>One of the recent updates (section <a href=\"http://build.fhir.org/ig/HL7/bulk-data/export/index.html#response---error-status-1\">5.3.3</a>) was to let a server communicate whether an error response to a job status request indicated that the job failed, or that the error was transient and the client should check again later.  As specified, if the error is transient, the server should return an OperationOutcome with a transient code.  However this can be a problem if the transient error is due to network issues in front of the FHIR server.  For example if there is a reverse proxy and it can't talk to the backend FHIR server.  If we flip the model, and instead specify that the FHIR server should return a specific OperationOutcome if a job has failed, and any other error indicates a transient issue, then that lets the client detect cases where the transient error prevents the FHIR server from responding.</p>",
        "id": 212348425,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1601927738
    },
    {
        "content": "<p>That makes sense to me, but since errors where a server is unable to generate an OperationOutcome aren't necessarily transient and ideally transient errors would return an OO , perhaps we should loosen the requirement in a more general way? For example, in 5.3.3 we could change \"The server SHALL return a FHIR OperationOutcome resource in JSON format\" to something like \"When possible, the server SHOULD return a FHIR OperationOutcome resource in JSON format. If this is not possible, the server MAY return a plain text error message\".</p>",
        "id": 212442927,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1601997361
    },
    {
        "content": "<p>I'm mostly coming at this from the perspective of my day job, which deals with failures in the REST API that occur <em>between</em> the FHIR client and FHIR server.  Consider a network topology something like this (considering only HTTP-aware actors):  FHIR Server &lt;-&gt; API gateway &lt;-&gt; Reverse Proxy &lt;-&gt; Client.    My day job often involves dealing with failures in the API Gateway or Reverse proxy layers, and those are not FHIR-aware, and thus don't generate OOs.  Sometimes the issues are transient, but often not.   If our solution focuses on communicating job failures explicitly, where the \"else\" case is treated as a transient failure, then our solution is resilient to issues with non-FHIR actors.   If we explicitly communicate transient errors, but the \"else\" case is a job failure, then the client can't tell the difference between a job failure and a transient issue with a non-FHIR intermediary.</p>\n<p>I'm totally aware that this sort of problem is not normally addressed by the FHIR spec or IGs.</p>",
        "id": 212460021,
        "sender_full_name": "Cooper Thompson",
        "timestamp": 1602005701
    },
    {
        "content": "<p>Yup, agree that supporting non-OO errors for non-FHIR aware layers makes sense. Since these errors may be transient or reflect job failure though, wouldn't we want to relax the current OO requirement in the IG for across all status errors?</p>",
        "id": 212471196,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1602011251
    },
    {
        "content": "<p>I <em>think</em> the only distinction between what you're suggesting and the language I proposed above is whether or not a transient failure that <em>is</em> able to return an OO should do so, but don't see what we gain by not encouraging this?</p>",
        "id": 212471198,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1602011251
    },
    {
        "content": "<p>Maybe just be explicit? \"When possible, the server and its intermediary/infrastructure SHOULD...\"</p>",
        "id": 219075948,
        "sender_full_name": "Karl M. Davis",
        "timestamp": 1607345828
    }
]