[
    {
        "content": "<p>Hello,<br>\nI am looking for a JS or Python implementation of bulk client to pull the data from a FHIR bulk API and save it localy. I would appritiate any help on discovering such implementation. Could anybody help?</p>",
        "id": 223395785,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1611159383
    },
    {
        "content": "<p>Here is a JS client you can try: <a href=\"https://github.com/smart-on-fhir/sample-apps-stu3/tree/master/fhir-downloader\">https://github.com/smart-on-fhir/sample-apps-stu3/tree/master/fhir-downloader</a></p>",
        "id": 223396093,
        "sender_full_name": "Vladimir Ignatov",
        "timestamp": 1611159514
    },
    {
        "content": "<p>Thanks! Could you please help me figure out why it gives me an error:<br>\n413 Payload Too Large<br>\nToo many files</p>\n<p>PS: I've found this link <br>\n<a href=\"https://bulk-data.smarthealthit.org/?m=10&amp;stu=4\">https://bulk-data.smarthealthit.org/?m=10&amp;stu=4</a><br>\nit works if I set Database Size to 1.000 Patients. however if I set more it throws the same error.<br>\nShould I increace some system limits? Could you help please? or it is the server side limit?</p>",
        "id": 223428547,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1611173553
    },
    {
        "content": "<p>That is specific to that server only. To avoid it, restrict the export by passing a <code>_since</code> and/or <code>_type</code> parameter. To do so with this client you can pass the <code>-T</code> and <code>-s</code> options like so:</p>\n<p><code>node . -T Patient,Observation -s 2020-01-01T00:00:00</code><br>\nThis basically means \"Give me only patients and observations modified since 2020\".</p>\n<p>There are too many variables involved in this. It might be a good idea to play a little with <a href=\"https://bulk-data.smarthealthit.org/sample-app/index.html?server=https%3A%2F%2Fbulk-data.smarthealthit.org%2FeyJlcnIiOiIiLCJwYWdlIjoxMDAwMCwiZHVyIjoxMCwidGx0IjoxNSwibSI6MSwic3R1Ijo0LCJkZWwiOjB9%2Ffhir\">https://bulk-data.smarthealthit.org/sample-app/index.html?server=https%3A%2F%2Fbulk-data.smarthealthit.org%2FeyJlcnIiOiIiLCJwYWdlIjoxMDAwMCwiZHVyIjoxMCwidGx0IjoxNSwibSI6MSwic3R1Ijo0LCJkZWwiOjB9%2Ffhir</a>. Once you are satisfied with what gets exported, you can \"translate\" the used parameters to the CLI command.</p>",
        "id": 223434853,
        "sender_full_name": "Vladimir Ignatov",
        "timestamp": 1611176512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193731\">@Vladimir Ignatov</span> Thank you!!!</p>",
        "id": 223435593,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1611176843
    },
    {
        "content": "<p>I am wondering if there is a way of convenrting ndjson files to FHIR Bundles. I am going to use cql-exec-fhir library to perform healthcare quality measures. The FHIR Data Source (for cql-exec-fhir library) expects each patient to be represented as a single FHIR Bundle containing all of the patient's relevant data but we have .ndjson as output of fhir-downloader.</p>",
        "id": 223485626,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1611221579
    },
    {
        "content": "<p>The main challenge here isn't ndjson-&gt;bundle; it's bringing together all data about a patient (spread across multiple ndjson files) into a single file. It's easy enough at small scale... you can pretty much do this in a single pass over the ndjson files, scanning for resources linked to your \"target patient ID\".</p>",
        "id": 223511540,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1611237881
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>  I had a look at the Bulk Data API early on and I had thought I saw that each record for a resource was an individual file. Now I notice that in the Synthea generator output that all of one type of resource are in one file. This means that, for example, the Patient.ndjson has many patients in it. I'm curious as to this structure. I use Go a bit, and the 'everything in one file' per resource type creates additional compute steps to unmarshall into structs, vs each individual resource on its own.</p>",
        "id": 223514778,
        "sender_full_name": "Richard Stanley",
        "timestamp": 1611239277
    },
    {
        "content": "<p>The motivation for \"each file has resources of a specific type\" was designed to optimize loading into database / analysis tools. We don't optimize for \"ease of querying data about a single patient\" because bulk data is explicitly focused on larger populations.</p>",
        "id": 223518711,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1611240998
    },
    {
        "content": "<p>Ok, great. Thanks. I'm trying to push into a FHIR server efficiently. So, the current practice to load bulk data is to POST the entire file, rather than PUT (which requires a resource ID in path)?</p>",
        "id": 223520414,
        "sender_full_name": "Richard Stanley",
        "timestamp": 1611241676
    },
    {
        "content": "<p>Sorry, I'm trying to understand and will try to be more clear. With everything in one file the assumption seems to be that it's for POSTing new resources to the target server. Otherwise you have to parse the bulk data file and get IDs for a PUT (requires service_url/resource/id in the path). THis means that updating resources with PUT is not an anticipated use case.</p>",
        "id": 223522263,
        "sender_full_name": "Richard Stanley",
        "timestamp": 1611242346
    },
    {
        "content": "<p>This is out of scope for what we've tried to specify, so I don't have precise guidance for you. Specific servers often have \"fast path\" capabilities for bringing in large data sets all at once (e.g. <a href=\"https://cloud.google.com/solutions/importing-fhir-clinical-data\">this capability in GCP</a>) but this is \"below the abstraction barrier\" of the FHIR API.</p>",
        "id": 223523517,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1611242783
    },
    {
        "content": "<p>More broadly: you can decide whether you want to preserve IDs when you import if your server supports this (in which case, you can use PUTs, or batch bundles of PUTs, or transaction bundles of PUTs) or not (in which case, you might need to remap IDs to match the constraints of your server).</p>",
        "id": 223523678,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1611242851
    },
    {
        "content": "<p>I am trying to export bulk data from HAPI FHIR Server <a href=\"https://github.com/hapifhir/hapi-fhir-jpaserver-starter\">built from master</a> using the fhir-downloader. Seems like it works fine, but it gives me back ndjson files named in a weird way. How this is controlled? I expected to see [Resource-name].ndjson files. <br>\n<a href=\"/user_uploads/10155/2evHfkSnWI5e9JeqGth8HX2O/bulk-data.jpg\">bulk-data.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/2evHfkSnWI5e9JeqGth8HX2O/bulk-data.jpg\" title=\"bulk-data.jpg\"><img src=\"/user_uploads/10155/2evHfkSnWI5e9JeqGth8HX2O/bulk-data.jpg\"></a></div>",
        "id": 223824962,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1611509504
    },
    {
        "content": "<p>Server can name the files whatever they like</p>",
        "id": 223825161,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1611509741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span> Thanks! I just thought there is a way to setup naming thru <code>application.yaml</code> or something</p>",
        "id": 223825320,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1611509941
    }
]