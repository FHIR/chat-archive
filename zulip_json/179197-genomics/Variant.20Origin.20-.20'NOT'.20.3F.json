[
    {
        "content": "<p>Had an interesting question today.  Use Case: Sequence child + 1 parent (let's say Mom).  Find variant in child, but same variant is not found in Mom.  We don't know if it is is paternal or perhaps de novo?  Is there a way, using our component for Variant Origin, to indicate NOT 'maternal_variant'?  I don't know how to do it, but maybe I am missing something.  I know 'negation' in general is a hairy topic, but this seems like a reasonable use case to consider.</p>",
        "id": 184966617,
        "sender_full_name": "Kevin Power",
        "timestamp": 1578351990
    },
    {
        "content": "<p>How about this as a pointed question - Does anyone have an opinion on if this is a value set question (we ask SO to add \"not_maternal\" and \"not_paternal\" as codes) or a FHIR Observation question (do we need an extension/other option available on Observation.component[] to allow a 'negation' of the given concept?</p>",
        "id": 185046936,
        "sender_full_name": "Kevin Power",
        "timestamp": 1578426396
    },
    {
        "content": "<p>would prefer adding the negations to the list and increasing the cardinality of our component to 0..* with our current model.</p>",
        "id": 185048161,
        "sender_full_name": "Jamie Jones",
        "timestamp": 1578427039
    },
    {
        "content": "<p>we did mark it as extensible, so could do that already (but better to get it added to the list)</p>",
        "id": 185048211,
        "sender_full_name": "Jamie Jones",
        "timestamp": 1578427062
    },
    {
        "content": "<p>I'm still not sold having this as a component and not a separate Observation is the right choice though, as the 'method' becomes unclear</p>",
        "id": 185048457,
        "sender_full_name": "Jamie Jones",
        "timestamp": 1578427190
    },
    {
        "content": "<p>Yea, but I think you could make the same argument about many of our components.  I think that falls into the 'slippery slope' category.</p>",
        "id": 185048680,
        "sender_full_name": "Kevin Power",
        "timestamp": 1578427320
    },
    {
        "content": "<p>I heard Sequence Ontology altered codes in the past for us, is anyone aware of the procedure/contacts?</p>",
        "id": 185941880,
        "sender_full_name": "Jamie Jones",
        "timestamp": 1579284660
    },
    {
        "content": "<p>The \"Issues\" link on their home page takes you here: <a href=\"https://github.com/The-Sequence-Ontology/SO-Ontologies/issues\" target=\"_blank\" title=\"https://github.com/The-Sequence-Ontology/SO-Ontologies/issues\">https://github.com/The-Sequence-Ontology/SO-Ontologies/issues</a> - seems like a good place to start?</p>",
        "id": 185943218,
        "sender_full_name": "Kevin Power",
        "timestamp": 1579285609
    },
    {
        "content": "<p>115 open issues!! Might be years without a contact haha</p>",
        "id": 185943297,
        "sender_full_name": "Jamie Jones",
        "timestamp": 1579285664
    },
    {
        "content": "<p>apparently they are \"...working to update how we handle issues, so more changes to this repository are coming soon.\"</p>",
        "id": 185943494,
        "sender_full_name": "Jamie Jones",
        "timestamp": 1579285792
    },
    {
        "content": "<p>In general, I'm not a fan of pre-coordinated terms.  I also think we should keep the terms in our value sets mutually exclusive (disjoint).  If an observed variant is de novo, it is also not_maternal and not_paternal.  I don't think we should rely on implementations to enumerate all valid terms in a non-disjoint set, and we're guaranteed to have variability in how overlapping terms would be reported.</p>",
        "id": 189015512,
        "sender_full_name": "Bob Freimuth",
        "timestamp": 1582634209
    },
    {
        "content": "<p>That's good perspective, thanks! We don't have the structure of a grammar in our codes, so combinations of items aren't well defined... I think that means we should enumerate all relevant possibilities in the list, however, so we may need to add multiple items.</p>",
        "id": 189015826,
        "sender_full_name": "Jamie Jones",
        "timestamp": 1582634508
    },
    {
        "content": "<p>We should be fine to do this with a local list for now, but a strategy to get issues like this resolved with SO would be super</p>",
        "id": 189016324,
        "sender_full_name": "Jamie Jones",
        "timestamp": 1582634987
    },
    {
        "content": "<p>are we talking about the component with the new LOINC code? we do have a code for indicating that the variant is from a parent but without giving a parent. HOWEVER, if all you know is that the variant is not in mother, you're kinda stuck. Might be better to say unknown and send the mother's genetic information at the position....I think we should focus on the use case here. Is the information needed for research? how is the information expected to be used?</p>",
        "id": 189607732,
        "sender_full_name": "Bret H",
        "timestamp": 1583252054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"192198\">Bob Freimuth</span> <a href=\"#narrow/stream/179197-genomics/topic/Variant.20Origin.20-.20'NOT'.20.3F/near/189015512\" title=\"#narrow/stream/179197-genomics/topic/Variant.20Origin.20-.20'NOT'.20.3F/near/189015512\">said</a>:</p>\n<blockquote>\n<p>In general, I'm not a fan of pre-coordinated terms.  I also think we should keep the terms in our value sets mutually exclusive (disjoint).  If an observed variant is de novo, it is also not_maternal and not_paternal.  I don't think we should rely on implementations to enumerate all valid terms in a non-disjoint set, and we're guaranteed to have variability in how overlapping terms would be reported.</p>\n</blockquote>\n<p>as component only allows for a key-value representation of data we have to use pre-coordinated terms. Also pre-coordinated is easier to validate.</p>",
        "id": 189613320,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1583255505
    },
    {
        "content": "<p>where we do point to extensible or required lists to act as 'values' in a (pre-coordinated) concept, I agree they should definitely be disjoint--we may even want to add that to our list of \"design principles.\"</p>\n<p>I think I understand several arguments against pre-coordinated answer lists, but I personally feel erring towards not binding the answer lists (or only providing example lists) requires <em>very good</em> guidance around the concept definition and multiple, varied examples. We have to weigh implementers needing to support identified lists/systems vs employing subject matter experts to analyze and make a decision for what systems to use for each field (which they then still need to interface locally)... a separate discussion at this point. </p>\n<p>We should circle back to this with the LOINC concept Bret chased down for us.</p>",
        "id": 189630438,
        "sender_full_name": "Jamie Jones",
        "timestamp": 1583266881
    },
    {
        "content": "<p>There's a place to give a data absent reason. There it can be reported why the value is unknown etc...perhaps this can be considered in options</p>",
        "id": 190653502,
        "sender_full_name": "Bret H",
        "timestamp": 1584288324
    }
]