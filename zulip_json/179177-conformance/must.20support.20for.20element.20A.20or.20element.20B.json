[
    {
        "content": "<p>Is there a way in the current tooling to say must support element A OR element B (OR Both).</p>",
        "id": 204970811,
        "sender_full_name": "Eric Haas",
        "timestamp": 1595627693
    },
    {
        "content": "<p>In other words a conditional must support</p>",
        "id": 204970856,
        "sender_full_name": "Eric Haas",
        "timestamp": 1595627737
    },
    {
        "content": "<p>not formally.  However, you can provide usage notes that qualify the meaning of must support for a given element.  I'd probably flag them both (so they show up in the mustSupport view, and then include usage notes indicating the expectation to support either or.  We <em>could</em> look at adding an explicit \"mustSupport qualifier\" element on ElementDefinition which would allow us to put a flag and perhaps a fly-over on the mustSupport indicator to specifically highlight that there are special rules.  However, thus far, special rules on a per-element basis seem to be very rare.</p>",
        "id": 204971627,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1595628408
    },
    {
        "content": "<p>Seems a funny thing to be communicating through must support.<br>\nAn invariant rule would make sense if that's what is really being required.</p>",
        "id": 208080955,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1598442542
    },
    {
        "content": "<p>And then set it with warning level</p>",
        "id": 208105979,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1598455087
    },
    {
        "content": "<p>I think of must support being about the system, not the data, and there being no way to tell from the data that an item is not supported. <br>\nIn that case an invariant that tests data cannot check for the support.</p>",
        "id": 208161032,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1598483537
    }
]