[
    {
        "content": "<p>We are modelling (in STU3) for a usecase in which only very well-defined types of data are exchanged and all clients have agreed on the associated constraints. We want to check that all data pushed to the server conforms to the relevant profiles, but blindly checking incoming resources against all applicable profiles would be very slow in some cases as we have a range of profiles for e.g. Observation. Hence,  we would ideally like the server to</p>\n<p>1. reject resources (irrespective of type) that do not declare a profile in <code>meta.profile</code>, and <br>\n2. reject resources that declare a profile which is not contained in a pre-defined set</p>\n<p>Is there some way to declare such a constraint in CapabilityStatement (implying that the list of supported profiles is closed and that profiles must be declared)? E.g. could one declare one profile per resource type that only restricts <code>meta.profile</code> accordingly and put them in <code>CapabilityStatement.rest.resource.profile</code>?</p>\n<p>We effectively want to force <em>all</em> incoming resources to conform to a profile that makes <code>meta.profile</code> required and binds it to a custom valueset, but I gather from <a href=\"#narrow/stream/179166-implementers/topic/Create.20profile.20of.20DomainResource\" title=\"#narrow/stream/179166-implementers/topic/Create.20profile.20of.20DomainResource\">this thread</a> that profiling core types like <code>DomainResource</code> is not good practice.</p>",
        "id": 157693410,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1549463078
    },
    {
        "content": "<p>The simplest way to do this is to have the profiles for each resource declare that .meta and .meta.profile are mandatory (and perhaps have a mandatory slice on meta.profile that is bound to a value set of profiles the instance must match.  However, be aware that doing this is saying that every client system will need to customize itself to talk to you, so make sure that you've got the funds to actually pay for that to happen :)</p>",
        "id": 157696493,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1549465486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> Thanks!  - do you mean adapt our \"normal\" resource profiles? In that case,  would that not only say that <em>if</em> you happen to satisfy any of these profiles <em>then</em> you must declare it explicitly? If so, it seems it would not rule out resources that do not declare (and maybe don't conform to) any profile at all. Or did I get that wrong?</p>\n<p>Fair point about the interop burden - we happen to have quite specific business requirements for the data, but we're certainly keeping an ear on the ground <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>",
        "id": 157813509,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1549574149
    },
    {
        "content": "<p>If you put it in the rest.resource.profile and include a mandatory slice, that would say that you only support resources that declare one of the profiles you've identified.  Anyone who doesn't declare a profile at all or doesn't declare one of the ones you've listed wouldn't meet your profile and could therefore expect to be rejected.  If you declare a profile, you're required to comply with it, so that bit is taken care of implicitly.</p>",
        "id": 157815652,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1549576044
    },
    {
        "content": "<p>Alright, thanks Lloyd!</p>",
        "id": 157854442,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1549627446
    }
]