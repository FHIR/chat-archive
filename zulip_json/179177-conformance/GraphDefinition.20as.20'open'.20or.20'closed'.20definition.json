[
    {
        "content": "<p>Is there a way to say using MessageDef or GraphDef these are all the edges that are allowed? ( or conversely this is the minimum but there could be more)  I could not find any and I think for messaging it might be useful to nail it down.   Thoughts?</p>",
        "id": 183610747,
        "sender_full_name": "Eric Haas",
        "timestamp": 1576547865
    },
    {
        "content": "<p>In my new proposal for GraphDefinition (HL7 Jira site is down at the moment) I'm silent on this, but the default thinking was 'closed'. This question was already on my list.. we could define a flag define the entire Graph to be 'open'.  This could be an argument to start using Sub-graphs, because then some sub-graphs could be open whereas others could be closed. It does however add to the complexity. We'll also have to think of the Graph validation software: an open definition presumably would be harder to validate than a closed definition.</p>",
        "id": 183624457,
        "sender_full_name": "René Spronk",
        "timestamp": 1576567874
    },
    {
        "content": "<blockquote>\n<p>but the default thinking was 'closed'. </p>\n</blockquote>\n<p>Is this thethinking using the current GD as well?  I was not aware of that and did not see it documented?</p>",
        "id": 183653291,
        "sender_full_name": "Eric Haas",
        "timestamp": 1576593266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ? I don't think it's stated anywhere..</p>",
        "id": 183658455,
        "sender_full_name": "René Spronk",
        "timestamp": 1576596433
    },
    {
        "content": "<p>It's not closed in that sense</p>",
        "id": 183679701,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1576609462
    },
    {
        "content": "<p>GraphDef is build on StrucDefs (those can be open or closed in nature). GraphDef allows one to define cardinalities when it comes to (inbound/outbound) references, those could be bound (closed) or unbound (open). GraphDef allows one to constrain the number of instance resources of a type, but the cardinality needs not be limited.<br>\nIn other words: GraphDef allows you to create fully open graphs, full closed ones, or hybrids.</p>",
        "id": 183826747,
        "sender_full_name": "René Spronk",
        "timestamp": 1576745759
    },
    {
        "content": "<p>Is it possible to discuss this at Sydney?   I agree with what <span class=\"user-mention\" data-user-id=\"191372\">@René Spronk</span>  is saying...but  when I say <em>closed</em> in the context of a Graph:  I meant is this a complete graph overall and you can't add any more edges.   By <em>open</em> I mean you are allowed to add more edges the the graph.</p>",
        "id": 183987283,
        "sender_full_name": "Eric Haas",
        "timestamp": 1576888789
    },
    {
        "content": "<p>We'd need an attribute as part of the 'header' of GraphDefinition to ensure the definition is closed. Remember that if one of the StrucDefs referenced by the Graph is open, then the entire Graph is open. So labeling a Graph as closed effectively turns all open strucDefs into closed Strucdefs as well.</p>",
        "id": 184162569,
        "sender_full_name": "René Spronk",
        "timestamp": 1577184031
    },
    {
        "content": "<p>Ok I get it.    The profiles  would have to at least allow the references that the Graph defined.</p>",
        "id": 184171802,
        "sender_full_name": "Eric Haas",
        "timestamp": 1577197043
    },
    {
        "content": "<p>... but necessarily the other way  around depending on the  'aggregation'  in the SDs ....</p>",
        "id": 184184700,
        "sender_full_name": "Eric Haas",
        "timestamp": 1577214532
    },
    {
        "content": "<p>My wish was for the SDs (Profiles)  to be generally permissive which means:</p>\n<ul>\n<li>Define only the mandatory and must supports.</li>\n<li>Leave all the aggregation \"open\"</li>\n<li>don't exclude any elements</li>\n</ul>",
        "id": 184184793,
        "sender_full_name": "Eric Haas",
        "timestamp": 1577214705
    },
    {
        "content": "<p>Then use the Graphs to define the edges ( aggregations)  obviously not crossing the line where the SD excludes a reference (which would violates my permissive approach above anyway) or limits the target or cardinality and usage  ( e.g., mandatory --&gt; mandatory)</p>",
        "id": 184184913,
        "sender_full_name": "Eric Haas",
        "timestamp": 1577214860
    },
    {
        "content": "<p>So the Graph would be in control of whether the it could be open to addtitional edges  or not. </p>\n<p>...Are we saying the same thing?</p>",
        "id": 184185064,
        "sender_full_name": "Eric Haas",
        "timestamp": 1577215094
    },
    {
        "content": "<p>A GraphDef could be more restrictive than a StrucDef, so yes, ultimately GraphDef fully controls the edges. </p>\n<p>If we assume a GraphDef G has populated attributes for min/max on the edge relationships then it represents a closed graph. There are two uses cases for openess, to go beyond such a closed graph G: </p>\n<ol>\n<li>To state that anywhere there may be additional links, of reference-types not mentioned/defined in the GraphDef. This would require a new 'header' attribute on GraphDef,</li>\n<li>To state that on a particular node one could have additional links, f reference-types not mentioned/defined in the GraphDef for that specific node. This use case can be solved by adding a new node for resource type \"Resource\" (effectively an ANY). </li>\n</ol>\n<p>Note that if we were to ever introduce sub-graphs in GraphDef this will get even more complex. But let's not go there right now until we have a very good use case which requires it.</p>",
        "id": 184212533,
        "sender_full_name": "René Spronk",
        "timestamp": 1577270206
    }
]