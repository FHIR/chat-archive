[
    {
        "content": "<p>When I have a new context for an existing extension, I create new extension instead of profiling the old one( we are talking IGs here) , because I don't see any benefit.  It is just as much work all around to support a new extension vs profiling an old one.   Is there an easier way?</p>",
        "id": 153969147,
        "sender_full_name": "Eric Haas",
        "timestamp": 1528923112
    },
    {
        "content": "<p>If you can profile an existing extension, that's always better.  The reason is that systems are going to choose to implement specific extensions by URL.  If you profile the existing extension, any system that recognizes that URL will know what it means and be able to map it, display it, etc.  If you create your own custom extension, no one will know what it is - which sort of defeats the purpose of sharing it.  Creating a custom extension to constrain is as much a problem as creating a custom extension rather than using a core element.  If you can re-use &amp; profile, that's almost always a better path.</p>",
        "id": 153969152,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528923315
    },
    {
        "content": "<p>The profile gets its own url just like the new extension so I am not sure anything is gained.  What do you mean by \"That URL\" in  ' if you profile the existing extension, any system that recognizes that URL will know what it means and be able to map it, display it, etc.'?</p>",
        "id": 153969191,
        "sender_full_name": "Eric Haas",
        "timestamp": 1528925994
    },
    {
        "content": "<p>This is an interesting question. What's  case for 'profiling an extension'? We've never really talked about this to my knowledge</p>",
        "id": 153969195,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528926536
    },
    {
        "content": "<p>adding context A to extension B.  I've actually never done it, but I presumed it was possible.</p>",
        "id": 153969245,
        "sender_full_name": "Eric Haas",
        "timestamp": 1528931381
    },
    {
        "content": "<p>I don't think it is. It can't be added to the source of the extension?</p>",
        "id": 153969256,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528932228
    },
    {
        "content": "<p>The profile has a URL, but it doesn't change the fixed url.value of the original profile</p>",
        "id": 153969294,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528937049
    },
    {
        "content": "<p>So the profile URL is new, but the extension URL remains the same.</p>",
        "id": 153969295,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528937066
    },
    {
        "content": "<p>I've profiled quite a few extensions for my IGs - some HL7 defined and some defined within the IG itself where I had re-useable constraints that were different for the same base semantic.</p>",
        "id": 153969297,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528937103
    },
    {
        "content": "<p>It works just fine with both the validator and the publisher.</p>",
        "id": 153969300,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528937126
    },
    {
        "content": "<p>It just requires a bit of training for people to get used to the fact that \"URL used to reference the extension in the spec is not necessarily the same as the URL of the extension\".</p>",
        "id": 153969303,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528937162
    },
    {
        "content": "<p>I dislike this complexity</p>",
        "id": 153969313,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528937524
    },
    {
        "content": "<p>There's no complexity.  It's just how profiling works.</p>",
        "id": 153969336,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528938558
    },
    {
        "content": "<p>And there are use-cases where it's necessary.</p>",
        "id": 153969337,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528938566
    },
    {
        "content": "<p>We're not introducing any magic here.</p>",
        "id": 153969338,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528938578
    },
    {
        "content": "<p>no, on reflection, I think I have a problem with this.</p>",
        "id": 153969343,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528938960
    },
    {
        "content": "<p>I have an extension A. It's allowed to be used at elements X and Y</p>",
        "id": 153969344,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528938980
    },
    {
        "content": "<p>you can't, somewhere else, in a 'constraint' assert that hey, we can use it on Z too</p>",
        "id": 153969345,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1528938998
    },
    {
        "content": "<p>Agree with that</p>",
        "id": 153969348,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528939226
    },
    {
        "content": "<p>You can't change the allowed applicability</p>",
        "id": 153969349,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528939239
    },
    {
        "content": "<p>But you can constrain the data type for the value or child components and/or provide additional contextual guidance on their use.</p>",
        "id": 153969350,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528939265
    },
    {
        "content": "<p>In theory I guess you might be able to say that your constrained version is only allowed to be used at element X and not Y - that would be a legal constraint.  Though I haven't ever had a use-case to do that and can't, off the top of my head, think of a situation where an extension profile would need to do that.</p>",
        "id": 153969352,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1528939330
    },
    {
        "content": "<blockquote>\n<p>It just requires a bit of training for people to get used to the fact that \"URL used to reference the extension in the spec is not necessarily the same as the URL of the extension\".</p>\n</blockquote>\n<p>I never considered this, interesting.  But since the instance will refer to the old url, the only way to enforce the additional constraints in the profiled extension is by having an instance refer to a profile that points to that profiled extension?</p>",
        "id": 153972791,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1530525264
    },
    {
        "content": "<p>yes</p>",
        "id": 153972799,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530526361
    },
    {
        "content": "<p>Yup</p>",
        "id": 153972809,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530528909
    },
    {
        "content": "<p>Which is exactly what the implementations I have that do this do.</p>",
        "id": 153972810,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530528923
    }
]