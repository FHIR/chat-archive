[
    {
        "content": "<p>My understanding from firely's excellent <a href=\"https://fire.ly/2019/09/13/type-slicing-in-fhir-r4/\">Type Slicing in FHIR R4</a> article and from <a href=\"http://hl7.org/fhir/elementdefinition.html#typesx\">section 2.30.0.4.2</a> in the spec is that the use of choice type renaming (e.g., <code>valueQuantity</code>) should <em>not</em> constrain the available types in the choice.  That section of the spec specifically states:</p>\n<blockquote>\n<p>The inclusion of a type specific path (such as \"Patient.deceasedBoolean\") SHALL NOT be interpreted as constraining allowed types, but instead, it constrains the use of a particular type</p>\n</blockquote>\n<p>This is a change introduced in R4.  Prior to R4, the use of choice type renaming <em>did</em> constrain the available types.  But in R4, that behavior was removed (as detailed in firely's blog).</p>",
        "id": 231567274,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1616547564
    },
    {
        "content": "<p>But... <span class=\"user-mention\" data-user-id=\"397998\">@Max KÃ¶rlinge</span> discovered over in the <a href=\"#narrow/stream/215610-shorthand/topic/Adding.20a.20value.20type.20to.20value.5Bx.5D/near/231534976\">#shorthand stream</a> that when the differential contains elements that use the type slice renaming syntax, the IG Publisher is generating a snapshot that constrains the types only to the ones noted in the differential and produces a <em>closed</em> type slicing.  This seems to go directly against what the spec states should happen.</p>",
        "id": 231567555,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1616547754
    },
    {
        "content": "<p>I have an example project (which I will attach) that reproduces the behavior.  The differential of an Observation contains only these two elements:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">[{</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Observation.valueCodeableConcept\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Observation.valueCodeableConcept\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"min\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"max\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"CodeableConcept\"</span> <span class=\"p\">}],</span>\n  <span class=\"nt\">\"mustSupport\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">},</span>\n<span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Observation.valueQuantity\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Observation.valueQuantity\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"min\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"max\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Quantity\"</span> <span class=\"p\">}],</span>\n  <span class=\"nt\">\"mustSupport\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">}]</span>\n</code></pre></div>\n<p>but when you build it w/ the IG Publisher, the <code>value[x]</code> element gets generated like this (with irrelevant properties removed for brevity):</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Observation.value[x]\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Observation.value[x]\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"slicing\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"discriminator\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"type\"</span><span class=\"p\">,</span> <span class=\"nt\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$this\"</span> <span class=\"p\">}],</span>\n    <span class=\"nt\">\"ordered\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"rules\"</span><span class=\"p\">:</span> <span class=\"s2\">\"closed\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span> <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"CodeableConcept\"</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Quantity\"</span> <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 231568039,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1616548178
    },
    {
        "content": "<p>This seems wrong to me based on my understanding of the R4 spec, but I wanted confirmation before I file a bug against the publisher.  Also, I'm not sure where I am supposed to file bugs against the publisher (Jira? GitHub?).  You can reproduce using this simple FSH project: <a href=\"/user_uploads/10155/wUeyYOaKjUl3vBMY7JqdJobM/ChoiceConstraintsIG.zip\">ChoiceConstraintsIG.zip</a></p>",
        "id": 231568290,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1616548385
    },
    {
        "content": "<p>Just verified that this does not seem to happen with the .NET SDK. <a href=\"https://simplifier.net/testproject153/myobservationwithchoices\">This is the resource on Simplifier</a>. Looking at the rendering or downloading (Download &gt; Download with snapshot) the slicing is not constrained to Quantity only.</p>",
        "id": 232647824,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1617217845
    },
    {
        "content": "<p>I think it looks like a bug. The code is the snapshot generator, so bugs here: <a href=\"https://github.com/hapifhir/org.hl7.fhir.core/issues\">https://github.com/hapifhir/org.hl7.fhir.core/issues</a>, and the test cases for it are here: <a href=\"https://github.com/FHIR/fhir-test-cases/tree/master/r5/snapshot-generation\">https://github.com/FHIR/fhir-test-cases/tree/master/r5/snapshot-generation</a> - see <a href=\"https://github.com/FHIR/fhir-test-cases/blob/master/r5/snapshot-generation/manifest.xml\">https://github.com/FHIR/fhir-test-cases/blob/master/r5/snapshot-generation/manifest.xml</a> for an overview, and the relevant test cases of the obs-X ones</p>",
        "id": 234799793,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1618553645
    },
    {
        "content": "<p>Seen this <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> ?</p>",
        "id": 235698141,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1619105122
    },
    {
        "content": "<p>Yeah, but forgot to file a bug and didn't get a chance to look at the test cases.  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> -- are you looking for both a bug report and some failing test cases?</p>",
        "id": 235700693,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1619106145
    },
    {
        "content": "<p>well there's already test cases - do you think they're wrong?</p>",
        "id": 235744707,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1619124348
    },
    {
        "content": "<p>OK.  I just took a look.  Unless I'm missing it, I don't see any test cases that actually exercise this feature.  I'm concerned about how the snapshot generator handles choice type renaming in the differential.  I see many tests with something like this:</p>\n<div class=\"codehilite\" data-code-language=\"XML\"><pre><span></span><code><span class=\"nt\">&lt;differential&gt;</span>\n    <span class=\"nt\">&lt;element&gt;</span>\n      <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">\"Observation.value[x]\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;slicing&gt;</span>\n        <span class=\"nt\">&lt;rules</span> <span class=\"na\">value=</span><span class=\"s\">\"open\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/slicing&gt;</span>\n    <span class=\"nt\">&lt;/element&gt;</span>\n    <span class=\"nt\">&lt;element&gt;</span>\n      <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">\"Observation.value[x]\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;sliceName</span> <span class=\"na\">value=</span><span class=\"s\">\"valueQuantity\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>\n        <span class=\"nt\">&lt;code</span> <span class=\"na\">value=</span><span class=\"s\">\"Quantity\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/type&gt;</span>\n      <span class=\"nt\">&lt;binding&gt;</span>\n        <span class=\"nt\">&lt;strength</span> <span class=\"na\">value=</span><span class=\"s\">\"required\"</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;valueSet</span> <span class=\"na\">value=</span><span class=\"s\">\"http://somewhere/something-else\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/binding&gt;</span>\n    <span class=\"nt\">&lt;/element&gt;</span>\n<span class=\"nt\">&lt;/differential&gt;</span>\n</code></pre></div>\n<p>But the issue I raised would require a test that looks more like this:</p>\n<div class=\"codehilite\" data-code-language=\"XML\"><pre><span></span><code><span class=\"nt\">&lt;differential&gt;</span>\n    <span class=\"nt\">&lt;element&gt;</span>\n      <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">\"Observation.valueQuantity\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>\n        <span class=\"nt\">&lt;code</span> <span class=\"na\">value=</span><span class=\"s\">\"Quantity\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/type&gt;</span>\n      <span class=\"nt\">&lt;binding&gt;</span>\n        <span class=\"nt\">&lt;strength</span> <span class=\"na\">value=</span><span class=\"s\">\"required\"</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;valueSet</span> <span class=\"na\">value=</span><span class=\"s\">\"http://somewhere/something-else\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/binding&gt;</span>\n    <span class=\"nt\">&lt;/element&gt;</span>\n<span class=\"nt\">&lt;/differential&gt;</span>\n</code></pre></div>\n<p>This test case should actually act exactly like the test case above it -- because when choice type renaming (e.g., path <code>Observation.valueQuantity</code>) is used in R4:</p>\n<ul>\n<li>open type slicing should be inferred</li>\n<li>correct sliceName (<code>valueQuantity</code>) should be inferred</li>\n<li>value[x] base element should <em>not</em> be type-constrained to only Quantity (this is where I think the snapshot generator does it wrong)</li>\n</ul>",
        "id": 235762213,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1619132753
    }
]