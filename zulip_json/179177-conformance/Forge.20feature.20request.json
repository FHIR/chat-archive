[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> using Forge is really slow and frustrating. Actually, no, profiling is really slow and frustrating. Forge kind of magnifies it a little because it is slow to move from element to element. but what would really save me a lot of time is to be able to right click on an element, and turn all it's children off - set cardinality to 0..0 for anything that doesn't have min  = 1</p>",
        "id": 153896716,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1499855236
    },
    {
        "content": "<p>another thing that would be just sensational - though there are many difficulties - is to copy/paste stuff. I have a set of constraints on .subject that is the same in all my profiles...</p>",
        "id": 153896718,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1499855369
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> using Forge is really slow and frustrating. Actually, no, profiling is really slow and frustrating. Forge kind of magnifies it a little because it is slow to move from element to element. but what would really save me a lot of time is to be able to right click on an element, and turn all it's children off - set cardinality to 0..0 for anything that doesn't have min  = 1</p>\n</blockquote>\n<p>I think I heard <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> mention copy &amp; paste once......yes that would be really useful!</p>",
        "id": 153896719,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1499856321
    },
    {
        "content": "<p>Also, on References, this sequence keeps catching me out:<br>\n- I set cardinality for children to 0..0<br>\n- then I set .reference to 1..1 and update it's documentation to what I want<br>\n- then I remember to uncheck all the possible target profiles on the Reference itself, and check the one that applies<br>\n- and now I have lost anything I applied to the chidlren</p>",
        "id": 153896720,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1499856363
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, thank you for your feedback!<br>\nWe could certainly implement a (context menu) command to strike all child elements of the selected node. Never thought about it before, but I see how this would be useful.<br>\nRegarding element navigation, maybe we could implement some handy keyboard shortcuts to traverse the element tree. Would that be helpful?<br>\nCopy/paste would be really convenient, but unfortunately this is not so easy to implement, as it involves dynamically merging complex (sub)trees and dealing with discrepancies. I'd love to provide such a feature, but realistically, I don't expect this to happen soon. For now, our main priority is to correctly handle the advanced use cases, as we see an increasing complexity in profiles that users try to create.</p>",
        "id": 153896724,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1499867577
    },
    {
        "content": "<p>As for constraining references, if you change the datatype of a (polymorphic) element, Forge will try to re-expands all child elements. This allows you to author complex (deep) constraints on e.g. valueCodeableConcept. However it also implies that when you modify the datatype of an element, you inevitably loose all the existing child constraints. I'm open for suggestions on how to improve this.<br>\nThe problem somewhat resembles copy/paste, as an ideal solution would involve merging complex subtrees and gracefully dealing with discrepancies (i.e. trying to maintain all compatible constraints after changing the datatype). Currently, Forge doesn't even try to perform a merge, but simply discards all existing child constraints.</p>",
        "id": 153896726,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1499867981
    },
    {
        "content": "<p>I follow the logic of why changing the type resets the elements. But right now, changing the targetProfile resets them. That's the bit I don't appreciate. Changes to targetProfile should not change the child eleements</p>",
        "id": 153896784,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1499891587
    },
    {
        "content": "<p>Forge tries to apply/merge target profiles on the fly, in order to show the inherited constraints from the external profile so the author can then further constrain the elements. Anyway, that is the intent.</p>",
        "id": 153896817,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1499936628
    },
    {
        "content": "<p>e.g. an external target profile might introduce slices and/or extensions that you'd like to see inlined in the tree.</p>",
        "id": 153896818,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1499936679
    },
    {
        "content": "<p>I don't follow how that would happen at all. not for <em>targetProfile</em>. Of course that would be on for the profile element</p>",
        "id": 153896845,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1499957290
    },
    {
        "content": "<p>I think your're right... This looks like a symptom from DSTU2 =&gt; STU3 migration. I'll revisit the event logic, seems like I should disable child re-expansion for .targetProfile.</p>",
        "id": 153896853,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1499957779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> FYI I've improved the logic responsible for expanding element type profiles. Forge now only performs (re-)expansion when necessary, i.e. when the (common) element type and/or profile has changed. Changes to the .targetProfile property no longer trigger re-expansion.<br>\nThe improvement will be included in the upcoming new release.</p>",
        "id": 153897183,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1500366442
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, you suggested the following feature request:<br>\n\"but what would really save me a lot of time is to be able to right click on an element, and turn all it's children off - set cardinality to 0..0 for anything that doesn't have min = 1\"<br>\nCould you explain use case(s) when such a command would be useful? Would you mostly use this to profile e.g. ResourceReferences?<br>\nTrying to determine if/how useful this would in general.</p>",
        "id": 153897208,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1500384258
    },
    {
        "content": "<p>thanks for the logic improvement</p>",
        "id": 153897660,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500639507
    },
    {
        "content": "<p>when I'm profiling resources for actual implementations, I find that there's a lot of labor involved. One common operation I do is turn everything 'off' and then bring back what I'm going to use. I've found that I've missed things by getting distracted by the logic of what I'm doing.</p>",
        "id": 153897661,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500639596
    },
    {
        "content": "<p>this is particularly relevant in resource structures, where there can be quite a lot of children...</p>",
        "id": 153897662,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500639616
    },
    {
        "content": "<p>I'm trying to find ways to reduce the laboriousness of profiling</p>",
        "id": 153897663,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500639642
    },
    {
        "content": "<p>That makes perfect sense, thank you for the motivation. I've added a ticket for your feature suggestion.<br>\nIf you have any other ideas on how to improve the profiling workflow, please let me know.</p>",
        "id": 153897896,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1500889517
    },
    {
        "content": "<p>sure. I'll keep letting you know.</p>",
        "id": 153898032,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500970186
    },
    {
        "content": "<p>the next really useful feature will be to generate a profile from an instance</p>",
        "id": 153898033,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500970197
    },
    {
        "content": "<p>I think that will be like the code generation stuff I did - something to package on my server so you could call it there</p>",
        "id": 153898034,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500970232
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, thanks for the feedback. Definitely an interesting feature suggestion. But it sounds like quite a hairy problem to solve... how would the logic deal with ambiguities and/or options?</p>",
        "id": 153898035,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1500970379
    },
    {
        "content": "<p>well, you can only get close. Then the user has to load the profile into forge and fix up all that stuff.</p>",
        "id": 153898036,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500970409
    },
    {
        "content": "<p>that's why it's a forge feature - it's a way to get a leg up on the work, not an actual solution</p>",
        "id": 153898037,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500970428
    },
    {
        "content": "<p>Got it. Would certainly be useful. I've created a new ticket for your feature suggestion. Thanks!</p>",
        "id": 153898038,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1500972323
    }
]