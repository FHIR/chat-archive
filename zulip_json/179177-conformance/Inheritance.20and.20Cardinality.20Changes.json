[
    {
        "content": "<p>I've been looking through Zulip and haven't found anything: are Resources allowed to change cardinality on inherited fields?</p>\n<p>Currently in R5, <a href=\"http://build.fhir.org/conceptmap\">ConceptMap</a> inherits from <a href=\"http://build.fhir.org/canonicalresource\">CanonicalResource</a>.  But <a href=\"http://build.fhir.org/canonicalresource-definitions.html#CanonicalResource.identifier\">CanonicalResource.identifier</a> is <code>0..*</code> and <a href=\"http://build.fhir.org/conceptmap-definitions.html#ConceptMap.identifier\">ConceptMap.identifier</a> is <code>0..1</code>.</p>\n<p>Updating some tooling and it's throwing up because one should be coded as an array and the other should not.</p>\n<p>Is this legal?  If not, I can file a Jira.  (If it is, I may file one anyway, but that's a different issue).<br>\nThanks!</p>",
        "id": 200480651,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1591825233
    },
    {
        "content": "<p>CanonicalResource is a pattern.  It's not strict inheritance</p>",
        "id": 200480718,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1591825272
    },
    {
        "content": "<p>From a class perspective, you can say that ConceptMap implements the CanonicalResource interface</p>",
        "id": 200480750,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1591825298
    },
    {
        "content": "<p>So fields (e.g., id, meta, etc.) should not be inherited?</p>",
        "id": 200480772,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1591825314
    },
    {
        "content": "<p>(Though if you pass it more than one identifier, it'll yell)</p>",
        "id": 200480776,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1591825319
    },
    {
        "content": "<p>It has proper inheritance from DomainResource</p>",
        "id": 200480846,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1591825343
    },
    {
        "content": "<p>Where?  In R5 it's listed as Type: CanonicalResource</p>",
        "id": 200480866,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1591825368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, we probably need to clearly distinguish the difference between 'is a' and 'implements'</p>",
        "id": 200480869,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1591825368
    },
    {
        "content": "<p>Ahh, the base type is listed as deriving from <code>CanonicalResource</code>, but then fields are defined as parented by <code>DomainResource</code>.  Ugh.</p>",
        "id": 200481062,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1591825472
    },
    {
        "content": "<p>Thanks though</p>",
        "id": 200481105,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1591825494
    },
    {
        "content": "<p>Hmm.. there's no way for me to know that difference consuming the StructureDef is there?  It has <code>\"baseDefinition\": \"http://hl7.org/fhir/StructureDefinition/CanonicalResource\",</code>, but just doesn't inherit any fields from it.  Do we always just filter that off for CanonicalResource?</p>",
        "id": 200481495,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1591825715
    },
    {
        "content": "<p>the only way to tell in the StructureDefinitions is that the definition for CanonicalResource has extension <a href=\"http://hl7.org/fhir/StructureDefinition/structuredefinition-interface\">http://hl7.org/fhir/StructureDefinition/structuredefinition-interface</a> = true</p>",
        "id": 200785988,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1592082864
    },
    {
        "content": "<p>Created <a href=\"http://jira.hl7.org/browse/FHIR-27839\">FHIR#27839</a></p>",
        "id": 201186514,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1592420661
    },
    {
        "content": "<p>I was supposed to write up an algorithm for how code generation to support an interface might work.  Please see it here: <a href=\"https://docs.google.com/document/d/1YrdzZoChWCBCClynZ_5jLTXXl0_l0MdL2BdUnSWumh4\">https://docs.google.com/document/d/1YrdzZoChWCBCClynZ_5jLTXXl0_l0MdL2BdUnSWumh4</a></p>",
        "id": 276763956,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1648354916
    },
    {
        "content": "<p>I don't understand how this actually addresses the problem, honestly.</p>",
        "id": 276935672,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1648504176
    },
    {
        "content": "<p>perhaps you could add some actual code</p>",
        "id": 276935760,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1648504223
    }
]