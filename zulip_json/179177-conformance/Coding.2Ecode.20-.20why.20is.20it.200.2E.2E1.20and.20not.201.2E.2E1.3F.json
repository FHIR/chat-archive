[
    {
        "content": "<p>The specification is quite explicit on the intent that the Coding datatype is used when there is a code to be represented, and therefore it is not  suitable in most cases to represent \"real life\" concepts, as often they need to be represented using textual values. That is why almost everywhere in the core specification we see CodeableConcept, where CodeableConcept.Coding.code is used for the coded value, and CodeableConcept.text for the textual value, if a code is not available.</p>\n<p>Further, in the discussion for Coding.display, there is the following normative language: </p>\n<blockquote>\n<p>If the 'display' element is populated, the string used in display SHALL be one of the display strings defined for that code by the code system</p>\n</blockquote>\n<p>This implies that a Coding without Coding.code cannot have Coding.display. Is it possible then to have a Coding with only Coding.system, and if so, what purpose would it serve? If not, should Coding.code be 1..1?</p>",
        "id": 209697978,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1599766489
    },
    {
        "content": "<p>I think there's a corner case where it can be null, but this is normative, anyway</p>",
        "id": 209701587,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599768058
    },
    {
        "content": "<p>it's certainly a corner case</p>",
        "id": 209701606,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599768071
    },
    {
        "content": "<p>What is the corner case? Maybe we can add a description, as it is a bit unclear what a corner case might be</p>",
        "id": 209704902,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1599769781
    },
    {
        "content": "<p>Just a guess here, but maybe if an existing system had a code that doesn't match FHIR's requirements for the <code>code</code> type (\"Technically, a code is restricted to a string which has at least one character and no leading or trailing whitespace, and where there is no whitespace other than single spaces in the contents\") -- then the <code>system</code> might be present and an <code>extension</code> w/ <code>valueString</code> might be used to represent the code???  I don't really know -- I'm just guessing.</p>",
        "id": 209710584,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1599772686
    },
    {
        "content": "<p>Ohhh, if there is a Coding.extension, there is no need for code...<br>\nAre there other corner cases? </p>\n<p>Even with the extension, Coding.display can still only be present if Coding.code is present, correct?</p>",
        "id": 209714127,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1599774658
    },
    {
        "content": "<p>y</p>",
        "id": 209714737,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599775006
    },
    {
        "content": "<p>I think there's some uses where you want to sat there's a system and version but not code. I think they are replicating some weird v2 thing</p>",
        "id": 209714791,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599775044
    },
    {
        "content": "<p>Systems might occasionally have the display value but not the code - but it's known as a display value, not just text.</p>",
        "id": 209736369,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1599792735
    },
    {
        "content": "<p>Still, even in such a case, Coding.display cannot be populated without Coding.code, so an extension is necessary.</p>",
        "id": 209738290,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1599795757
    },
    {
        "content": "<p>Where do you see that rule <span class=\"user-mention\" data-user-id=\"192685\">@Vassil Peytchev</span> ?</p>",
        "id": 209739074,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1599797193
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhir/datatypes.html#Coding\">http://hl7.org/fhir/datatypes.html#Coding</a></p>\n<blockquote>\n<p>If the 'display' element is populated, the string used in display SHALL be one of the display strings defined for that code by the code system.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p>The Coding data type is used directly when there is certainty that the value must be selected directly from one of the available codes, and the list of possible codes is agreed to by all participants.</p>\n</blockquote>",
        "id": 209739494,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1599797914
    },
    {
        "content": "<p>I don't read either of those as saying the code must be present</p>",
        "id": 209741966,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1599801832
    },
    {
        "content": "<p>And the validator certainly doesn't force it to exist</p>",
        "id": 209741994,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1599801842
    },
    {
        "content": "<p>It has to be a display string for a code in the system - but nothing says the code must appear in the instance.</p>",
        "id": 209742022,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1599801870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> - thoughts?</p>",
        "id": 209742025,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1599801876
    },
    {
        "content": "<p>I think at Vassil is right, in that </p>\n<blockquote>\n<p>If the 'display' element is populated, the string used in display SHALL be one of the display strings defined for that code by the code system.</p>\n</blockquote>\n<p>means that you can't use a display if there's no code. (we could have phrased that differently to avoid that implication). </p>\n<p>And because it's an implication, I missed this in the validator - if there's a code present, it makes it a warning if it's not one of the displays (could be an error, but life is more complicated). But if there's no code, it doesn't check the display</p>",
        "id": 209746566,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599807424
    },
    {
        "content": "<p>Do we need a tracker item to either remove that implication, or alternatively make the implication explicit?</p>",
        "id": 209779814,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1599830623
    },
    {
        "content": "<p>well, to do something about that. not sure what</p>",
        "id": 209801179,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599840674
    },
    {
        "content": "<p>I'll raise a tracker - for Vocab I guess</p>",
        "id": 209803540,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1599841755
    },
    {
        "content": "<p><a href=\"http://jira.hl7.org/browse/FHIR-28492\">FHIR#28492</a></p>",
        "id": 209803864,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1599841919
    },
    {
        "content": "<p>I haven't read the tracker yet (I will), but I'm not sure if this is really too much of an issue.  It doesn't really make sense to populate display without also populating code, but as long as the code actually does exist in the code system and the display string is one that is published by the code system for that code, then it shouldn't matter for conformance whether the code is populated or not.  That's my take at this point.</p>",
        "id": 209804413,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1599842219
    },
    {
        "content": "<p>Sending display without the code would happen if that's what the sending system has stored.  Key thing is that we need the rules clarified.</p>",
        "id": 209805421,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1599842734
    },
    {
        "content": "<p>I agree - clarity is always good.</p>",
        "id": 209805556,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1599842789
    },
    {
        "content": "<p>I disagree that sending the display without a code makes much sense. Code A and Code B can have the same Display names - which code is the display name referring to? There is a hierarchy in the data elements explicit in the definition:  \"one of the display strings defined for <strong>that code</strong>\".</p>\n<p>If there is an exceptional case where there is value of exchanging the display name only, this is extension territory - that way, the consumer of the data knows that it is a valid exception, and not a misconfigured server.</p>\n<p>There is already a mechanism to send CodeableConcept.text in cases where a coded value is not available, but a textual representation is.</p>",
        "id": 209809798,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1599844920
    },
    {
        "content": "<p>If you've just got a display, then you don't necessarily have something that can be resolved to a unique concept.  I'm not saying it's good practice.  I'm saying there are system that do it, and we need to be able to share what they have.  coding.display and CodeableConcept.text aren't the same notion.</p>",
        "id": 209818794,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1599849470
    },
    {
        "content": "<p>If you don't know what the code is that the display came from, conceptually all you have is CodeableConcept.text. It is one of the reasons for existence (and for the encouraged use in the specification) of CodeableConcept.</p>",
        "id": 209896107,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1599938754
    },
    {
        "content": "<p>If you know you have the display value of a code, you don't have to know the code for it to be coding.display.  CodeableConcept .text is what the user typed/saw, which isn't necessarily the same thing.</p>",
        "id": 209896502,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1599939354
    },
    {
        "content": "<p>How do you know you have the display value of a code if you don't have the code? I think without real life examples these seem to be thought experiments. I don't think the purpose of the core specification is to cover every single corner case, that is why we have extensions. The current text is quite clear, if not necessarily explicit, and it is normative.</p>",
        "id": 209896855,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1599939899
    },
    {
        "content": "<p>If a system stores the display value but not the code, they can know it <em>is</em> a display value without having the code available.  I agree it's an edge case.  However, I expect that if we start enforcing the rule, it's going to break some systems - and I don't think the current text in the spec is as straight-forward as you assert.  At minimum, we need to be clearer - which is what the change request asks for.</p>",
        "id": 209897300,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1599940651
    },
    {
        "content": "<blockquote>\n<p>I don't think the purpose of the core specification is to cover every single corner case, that is why we have extensions</p>\n</blockquote>\n<p>This is true, but doesn't apply so much when it comes to invariants, since these can easily rule the corner cases out, in ways that can't be fixed with extensions. So weird corner cases are admissible for discussion on this invariant. </p>\n<p>Having said that, it's not particularly persuasive that you can have a display because you have a code, but also, you don't have a code. Given that it's only in weird v2 edge cases (because that is a thing I've seen plenty in v2), the validator at least should make it a warning with strong language</p>",
        "id": 209899605,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599944205
    }
]