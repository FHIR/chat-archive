[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> I'm looking at your comments on the snapshot generation tests.</p>",
        "id": 176532761,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569385834
    },
    {
        "content": "<blockquote>\n<p>===== T4a =====</p>\n</blockquote>\n<p>ok fixed.</p>",
        "id": 176532762,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569385847
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Error: element <code>Patient.extension</code> should inherit constraints from <code>DomainResource.extension</code></li>\n</ul>\n</blockquote>\n<p>well, see this in the java code:</p>",
        "id": 176532770,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569385862
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"nf\">checkExtensionDoco</span><span class=\"o\">(</span><span class=\"n\">ElementDefinition</span> <span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// see task GF#3970. For an extension, there&#39;s no point copying across all the underlying definitional stuff</span>\n    <span class=\"kt\">boolean</span> <span class=\"n\">isExtension</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"na\">getPath</span><span class=\"o\">().</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">&quot;Extension&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"na\">getPath</span><span class=\"o\">().</span><span class=\"na\">endsWith</span><span class=\"o\">(</span><span class=\"s\">&quot;.extension&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"na\">getPath</span><span class=\"o\">().</span><span class=\"na\">endsWith</span><span class=\"o\">(</span><span class=\"s\">&quot;.modifierExtension&quot;</span><span class=\"o\">);</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isExtension</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"na\">setDefinition</span><span class=\"o\">(</span><span class=\"s\">&quot;An Extension&quot;</span><span class=\"o\">);</span>\n      <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"na\">setShort</span><span class=\"o\">(</span><span class=\"s\">&quot;Extension&quot;</span><span class=\"o\">);</span>\n      <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"na\">setCommentElement</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n      <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"na\">setRequirementsElement</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n      <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"na\">getAlias</span><span class=\"o\">().</span><span class=\"na\">clear</span><span class=\"o\">();</span>\n      <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"na\">getMapping</span><span class=\"o\">().</span><span class=\"na\">clear</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">isExtension</span><span class=\"o\">;</span>\n  <span class=\"o\">}</span>\n</pre></div>",
        "id": 176532789,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569385890
    },
    {
        "content": "<p>though that doesn't explain why the constraints are missing.</p>",
        "id": 176532867,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569385996
    },
    {
        "content": "<p>and that is because I don't replicate ele-1 and ext-1 everywhere in the underlying definitions. I don't believe I've seen anything in the technical correction task list to change that either</p>",
        "id": 176533080,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569386363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> etc - have we ever talked about this?</p>",
        "id": 176533085,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569386386
    },
    {
        "content": "<p>Not that I recall.  I think the intention was to not spit out tons of useless verbiage, not to avoid inheriting constraints</p>",
        "id": 176534821,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1569389197
    },
    {
        "content": "<p>I was more asking about ele-1 and ext-1 not appearing everywhere in the base package</p>",
        "id": 176539638,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569395997
    },
    {
        "content": "<p>We haven't talked about them, since why would they need special treatment?  When you don't copy these into each element, how would a generic validator know to run these invariants?  If we don't want them everywhere because it takes up too much space, we need to document them as special exceptions so validators could hard-wire their validation.</p>",
        "id": 176548635,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1569404537
    },
    {
        "content": "<p>Well, I did do that but I didn’t really think about. I wrote a big long explanation about why we shouldn’t reproduce this in the snapshot but of course, that’s what snapshots should do. But does that mean you’re running off a jacked base Package? What other differences are there?</p>",
        "id": 176551391,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569407035
    },
    {
        "content": "<p>Sort of, we're using the base package, but our tools that need the snapshot (like the validator) will regenerate the snapshot before it runs.  Simplifier also recreates the snapshot based on the packages available in its database.  So, the differential is king for us - the snapshot is something we compute ourselves.</p>",
        "id": 176558984,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1569414634
    },
    {
        "content": "<p>Other differences.....the very useful exercise you and <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> are now doing should surface those, I hope.  Or maybe you mean other kinds of differences?</p>",
        "id": 176559030,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1569414683
    },
    {
        "content": "<p>no I came to the same conclusions... I don't regenerate base snapshots, but I will be regenerating snapshots for derived packages in the IG Publisher from now on (found bugs due to bad input snapshots yesterday)</p>",
        "id": 176560117,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569415499
    },
    {
        "content": "<p>but this process will surface whatever</p>",
        "id": 176560134,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569415508
    },
    {
        "content": "<p>FYI The <code>SnapshotGenerator</code> class in the .NET API exposes a configuration setting <code>SnapshotGeneratorSettings.ForceRegenerateSnapshots</code>. Forge and Simplifier enable this setting. This forces re-generation of all externally referenced snapshots, including core resource &amp; datatype profiles.</p>",
        "id": 176571659,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569422878
    },
    {
        "content": "<p><a href=\"https://github.com/FirelyTeam/fhir-net-api/blob/462d7a0cfe45a2faaac85e6aa874c1b8f23999d9/src/Hl7.Fhir.Specification/Specification/Snapshot/SnapshotGeneratorSettings.cs#L65\" target=\"_blank\" title=\"https://github.com/FirelyTeam/fhir-net-api/blob/462d7a0cfe45a2faaac85e6aa874c1b8f23999d9/src/Hl7.Fhir.Specification/Specification/Snapshot/SnapshotGeneratorSettings.cs#L65\">https://github.com/FirelyTeam/fhir-net-api/blob/462d7a0cfe45a2faaac85e6aa874c1b8f23999d9/src/Hl7.Fhir.Specification/Specification/Snapshot/SnapshotGeneratorSettings.cs#L65</a></p>",
        "id": 176571730,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569422894
    },
    {
        "content": "<p>ok, well, <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> I updated the generated snapshots in the current build. but I also found out how I was doing things.. the validator was validating  by the element, then by the type. Now I have to change the validator not to raise repeated errors from the same invariant which is on both the element and the type</p>",
        "id": 176723597,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569568219
    },
    {
        "content": "<p>anyway, can you check the generated snapshots in the current build</p>",
        "id": 176723602,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569568242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> changing the snapshot generation for your comments on T11 has completely changed all the other tests?</p>",
        "id": 176861813,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569744653
    },
    {
        "content": "<p>e.g. T1 forward...</p>",
        "id": 176861875,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569744757
    },
    {
        "content": "<p>T23 - yes, deliberately out of order; the generated snapshot has them in the correct order. Note sort=true in the manifest</p>",
        "id": 176903429,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569819741
    },
    {
        "content": "<blockquote>\n<p>changing the snapshot generation for your comments on T11 has completely changed all the other tests?</p>\n</blockquote>\n<p>Yes, correcting the base of <code>Extension</code> will affect many snapshots, as expected. However this change shouldn't break any snapshot manifest tests - unless they specifically inspect (inherited) properties of extension elements below the root.</p>",
        "id": 176918273,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569837656
    },
    {
        "content": "<blockquote>\n<p>T23 - yes, deliberately out of order</p>\n</blockquote>\n<p>Indeed, initially I didn't notice that this test is specifically to verify behavior for invalid element order.<br>\nThe .NET Implementation is not (yet) capable of rectifying element order, although I would like to add such logic eventually.</p>",
        "id": 176918448,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569837827
    },
    {
        "content": "<p>ok well, you could look at the updated tests then, though you can't pass the unless I give you updated definitions for the forthcoming technical correction</p>",
        "id": 176920756,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569840350
    },
    {
        "content": "<p>I guess I can \"look\" at the updated tests, but I cannot verify the results until we implement the technical correction.</p>",
        "id": 176921310,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569840896
    },
    {
        "content": "<p>well, I can send you the updated diffs, but, yes, you'll have to deal with the changes to primitive types</p>",
        "id": 176922132,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569841706
    },
    {
        "content": "<p>FYI I'm having a session with Ewout today to discuss the upcoming technical correction, try to assess the impact and schedule implementation.</p>",
        "id": 176922137,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569841712
    },
    {
        "content": "<p>ok. I can send you whatever you want</p>",
        "id": 176922164,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569841753
    },
    {
        "content": "<p>Can you send money?</p>",
        "id": 176922168,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569841765
    },
    {
        "content": "<p>lol. ok. sure. I'll make up a big pdf for you to print out. What's your preferred currency?</p>",
        "id": 176922243,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569841840
    },
    {
        "content": "<p>Do we have a FHIR crypto coin?</p>",
        "id": 176922292,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569841896
    },
    {
        "content": "<p>;p</p>",
        "id": 176922295,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569841904
    },
    {
        "content": "<p>I will try to work with the updated manifest tests in github. Maybe I will first create a new branch and implement the technical correction.</p>",
        "id": 176922345,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569841926
    },
    {
        "content": "<p>Is there already a published overview of the technical correction details?</p>",
        "id": 176922355,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569841953
    },
    {
        "content": "<p>ok. you can get the updated technical correction package from</p>",
        "id": 176922508,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569842127
    },
    {
        "content": "<p><a href=\"https://github.com/FHIR/packages/tree/master/hl7.fhir.rX/hl7.fhir.r4.core\" target=\"_blank\" title=\"https://github.com/FHIR/packages/tree/master/hl7.fhir.rX/hl7.fhir.r4.core\">https://github.com/FHIR/packages/tree/master/hl7.fhir.rX/hl7.fhir.r4.core</a></p>",
        "id": 176922596,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569842237
    },
    {
        "content": "<p>that's what matters from your pov, though there's a few changes not made in there yet</p>",
        "id": 176922607,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569842252
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 176922612,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569842261
    },
    {
        "content": "<p>Does the technical correction introduce any other changes to Snapshot, apart from the system types?</p>",
        "id": 176922758,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569842353
    },
    {
        "content": "<p>fixes a number of invariants</p>",
        "id": 176922777,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569842383
    },
    {
        "content": "<p>populates the inherited invariants</p>",
        "id": 176922783,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569842398
    },
    {
        "content": "<p>OK, shouldn't take long to implement.</p>",
        "id": 176922845,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569842436
    },
    {
        "content": "<p>some narrative definition fix ups</p>",
        "id": 176922847,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569842438
    },
    {
        "content": "<p>that's what I said ;-). The changes to the primitive types were a gift that kept giving</p>",
        "id": 176922859,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569842467
    },
    {
        "content": "<p>I expect (hope...) that the impact of the new system type extensions on FHIR .NET API will be relatively small.</p>",
        "id": 176927071,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1569846670
    }
]