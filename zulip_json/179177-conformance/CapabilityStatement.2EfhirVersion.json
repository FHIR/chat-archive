[
    {
        "content": "<p>This is probably a nit, but why is CapabilityStatement.fhirVersion of type id?  CapabilityStatement.software.version is of type string.  Seems like they should be of the same type.  In our implementation, we are internally mapping the FHIR id type directly to UUIDs.  I understand from the spec that ids can be any combination of characters with a length limit of 64 characters, but for those implementations who are mapping id to something other than a string internally (like some custom struct for example), fhirVersion will be a special case to code around if it is of type id.  fhirVersion feels more like a string than an id to me.</p>",
        "id": 153866556,
        "sender_full_name": "Steve Munini",
        "timestamp": 1484355661
    },
    {
        "content": "<p>I don't really know. it's always going to be x.y.z - nothing else. </p>",
        "id": 153866558,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484361239
    },
    {
        "content": "<p>where as the software version - that's other people's versions-  that could be anything. </p>",
        "id": 153866559,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1484361241
    },
    {
        "content": "<p>DataType ID is not just UUIDs, that might get you in trouble elsewhere with that mapping.<br>\nIds have a validation regex of [A-Za-z0-9\\-\\.]{1,64}. So a Z in your Id which is valid, is not valid for a UUID.</p>",
        "id": 153866560,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1484361267
    }
]