[
    {
        "content": "<p>Is it possible to use the FHIR validator CLI to validate an instance of a logical model against its StructureDefinition? If so, are there any specific content/formatting requirements for the instance? I can't seem to get it to work.</p>",
        "id": 259870121,
        "sender_full_name": "Matt Rouhana",
        "timestamp": 1635776865
    },
    {
        "content": "<p>Anybody have thoughts on the above? I know that Logical Models aren't technically supposed to be instantiated, but it's helpful as a way to persist the requirements of a non-FHIR artifact.</p>",
        "id": 260167494,
        "sender_full_name": "Matt Rouhana",
        "timestamp": 1635960037
    },
    {
        "content": "<p>should be supported as is</p>",
        "id": 260172356,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1635962221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> - what should be used as the <code>resourceType</code> of the instantiation? </p>\n<ul>\n<li>Using the name/ID of the logical model or <code>Base</code> yields an error: <code>Fatal @ Base (line 1, col2): This does not appear to be a FHIR resource (unknown name 'Base')</code></li>\n<li>Using <code>Resource</code> or <code>Element</code> yields errors for each defined field: <code>Error @ Resource (line 4, col23): Unrecognised property '@identifier'</code></li>\n<li>Not including the <code>resourceType</code> element at all yields yet another error: <code>Fatal @ $ (line 1, col2): Unable to find resourceType property</code></li>\n</ul>",
        "id": 260178363,
        "sender_full_name": "Matt Rouhana",
        "timestamp": 1635964730
    },
    {
        "content": "<p>we had a similar discussion yesterday in the <a class=\"stream\" data-stream-id=\"181579\" href=\"/#narrow/stream/181579-mapping-framework\">#mapping-framework</a> stream, see post <a href=\"#narrow/stream/181579-mapping-framework/topic/Custom.20JSON.20as.20Source.20Model\">here</a> but we did not yet come up with a solution</p>",
        "id": 260182735,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1635966619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191478\">@Oliver Egger</span> - it sounds like it should be supported, per <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>'s message above.</p>",
        "id": 260267987,
        "sender_full_name": "Matt Rouhana",
        "timestamp": 1636032013
    },
    {
        "content": "<p>the answer is, it only works for XML...</p>",
        "id": 260316681,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1636051684
    },
    {
        "content": "<p>I'll add a todo around json for me</p>",
        "id": 260316711,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1636051691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> - do you have an estimate of when the above will be available for JSON?</p>",
        "id": 261666622,
        "sender_full_name": "Matt Rouhana",
        "timestamp": 1637079748
    },
    {
        "content": "<p>well, it needs some discussion. In XML, there's a name at the root, and the name (+namespace) indicates what thing it is that is being read (to some degree). I haven't done anything about versioning in the XML logical model thing though - there's a lot of diffferent patterns in use for that</p>",
        "id": 261873856,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1637197679
    },
    {
        "content": "<p>in json, there's not even any common patterns for name.</p>",
        "id": 261873914,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1637197696
    },
    {
        "content": "<p>I've seen</p>\n<ul>\n<li>a json object containing a named object, and the name defines what is being read</li>\n<li>a json object with a property that defines it's type. Where the property could be 'type', \"_type\", \"resourceType\", \"@def\", \"@definition\", \"@context\"</li>\n<li>a json object where it's just known from some other context what it is</li>\n</ul>",
        "id": 261874065,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1637197806
    },
    {
        "content": "<p>reading the json is straight forward. It's deciding how to get going, or specifically, how to decide what logical model to use to read a json object, that's the problem to be solved</p>",
        "id": 261874115,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1637197850
    },
    {
        "content": "<p>That's a great point, Grahame -- and one of the reasons we have not yet implemented <em>instances</em> of logical models in SUSHI (since SUSHI is JSON-first).  I originally leaned toward using \"resourceType\" for consistency w/ JSON serialization of FHIR resource instances -- but I also realize that there could be some confusion there since \"resource\" is kind of an overloaded word in FHIR.  It might be nice if processors know that if they see \"resourceType\" that it conforms to one of the core FHIR resources.  So... maybe \"logicalType\"?  It at least has consistent form w/ the existing approach...</p>",
        "id": 261930111,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1637243920
    },
    {
        "content": "<p>In my mind, a JSON object containing a named object is the most analogous to the XML paradigm:</p>\n<div class=\"codehilite\" data-code-language=\"XML\"><pre><span></span><code><span class=\"nt\">&lt;my-logical-model</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://example.org/my-logical-model\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;name</span> <span class=\"na\">value=</span><span class=\"s\">\"Matt\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;favorite-color</span> <span class=\"na\">value=</span><span class=\"s\">\"orange\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/my-logical-model&gt;</span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n    <span class=\"nt\">\"my-logical-model\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Matt\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"favorite-color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"orange\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>That being said, this would be <em>less</em> aligned with how FHIR instantiates JSON resources (through the <code>resourceType</code> property).</p>",
        "id": 261936005,
        "sender_full_name": "Matt Rouhana",
        "timestamp": 1637246603
    },
    {
        "content": "<p>if you currently convert a xml logical model and write it out to json you get with the java implementation the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n   &quot;resourceType&quot;: &quot;my-logical-model&quot;,\n     &quot;name&quot;: &quot;Matt&quot;,\n     &quot;favorite-color&quot;: &quot;orange&quot;\n}\n</code></pre></div>",
        "id": 261937642,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1637247341
    },
    {
        "content": "<p>LMs are supposed to be identified by their full URL, so I think that whatever it is, it needs to use the full logical URL.  The only reason we don't need that for resources (I think) is because the spec indicates that lack of a URL implies a root of <code>http://hl7.org/fhir/StructureDefinition/</code>.</p>",
        "id": 261945378,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1637250553
    },
    {
        "content": "<p>+1 for logicalType as a URI.</p>",
        "id": 261945475,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1637250590
    },
    {
        "content": "<p>...and a full URI, yes.</p>",
        "id": 261948477,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1637251644
    },
    {
        "content": "<p>Is there a gap here for dealing with choice types, where the choice is a logical model type?  Don't know whether we allow that, but in that case we need something to resolve the type suffix of the choice.</p>",
        "id": 261948723,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1637251720
    },
    {
        "content": "<p>(and we might need to check whether any of the existing resources use <code>logicalType</code> as a top-level element - but I don't think so)</p>",
        "id": 261949094,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1637251864
    },
    {
        "content": "<p>For choice types you put the full logical URI in the <code>type.code</code>.  According to <a href=\"http://hl7.org/fhir/R4/elementdefinition-definitions.html#ElementDefinition.type.code\">type.code</a> doc (emphasis mine):</p>\n<blockquote>\n<p>URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to <a href=\"http://hl7.org/fhir/StructureDefinition\">http://hl7.org/fhir/StructureDefinition</a> e.g. \"string\" is a reference to <a href=\"http://hl7.org/fhir/StructureDefinition/string\">http://hl7.org/fhir/StructureDefinition/string</a>. <strong>Absolute URLs are only allowed in logical models.</strong></p>\n</blockquote>",
        "id": 261952369,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1637253162
    },
    {
        "content": "<p>But in the instance.....say we have an element  <code>valueMyNewLogicalType</code> - the suffix would need to agree with the id/name/last part of the uri?</p>",
        "id": 261953013,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1637253460
    },
    {
        "content": "<p>Oh right.  Yeah, I guess that's not as well defined, is it?  The documentation on formats says <a href=\"http://hl7.org/fhir/formats.html#choice\">this</a> about choices:</p>\n<blockquote>\n<p>A few elements have a choice of more than one data type for their content. All such elements have a name that takes the form nnn[x]. The \"nnn\" part of the name is constant, and the \"[x]\" is replaced with the <em>title-cased name</em> of the type that is actually used. The table view shows each of these names explicitly.</p>\n</blockquote>",
        "id": 261959144,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1637255774
    },
    {
        "content": "<p>Does that refer to the formal <code>StructureDefinition.name</code>?  If so, I guess that is our answer.  If not, the tail of the URI makes sense to me.</p>",
        "id": 261959252,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1637255832
    },
    {
        "content": "<blockquote>\n<p><a href=\"http://StructureDefinition.name\">StructureDefinition.name</a></p>\n</blockquote>\n<p>Yes</p>",
        "id": 261969146,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1637260084
    },
    {
        "content": "<p>That actually might solve another (mostly theoretical) issue I had been toying with: \"What is the 'x' in fixed[x] and example[x] referring to when you use a FHIR version 'N' StructureDefinition to express a resource in version 'N+1'\"....</p>",
        "id": 262038440,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1637309998
    },
    {
        "content": "<p>Should this be consistent with the custom resources work you did years ago <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ?</p>",
        "id": 262133900,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1637358097
    },
    {
        "content": "<p>maybe be that isn't current</p>",
        "id": 262140869,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1637361668
    },
    {
        "content": "<p>I think that the locigal models should be based on context, as noted earlier as one of the options by Grahame further above. One of the commun uses of this could be for mapping existing content, so we can't really force anything inside it.</p>",
        "id": 262156573,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1637375212
    },
    {
        "content": "<p>Sounds like there are a lot of differing opinions on this topic - how we can move this forward?</p>",
        "id": 263323246,
        "sender_full_name": "Matt Rouhana",
        "timestamp": 1638378519
    }
]