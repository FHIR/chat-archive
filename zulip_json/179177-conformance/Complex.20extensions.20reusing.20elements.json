[
    {
        "content": "<p>I have a complex extension with the elements A and B which are again complex having multiple sub-element</p>\n<div class=\"codehilite\"><pre><span></span>A\n  A1\n  A2\n  A3\nB\n  B1\n  B2\n</pre></div>\n\n\n<p>Question: Can element A be an extension of B, so that I have</p>\n<div class=\"codehilite\"><pre><span></span>A\n  A1\n  A2\n  A3\nB\n  B1\n  B2\n  A\n    A1\n    A2\n    A3\n</pre></div>\n\n\n<p>?</p>\n<p>If so, how do I define that (with Forge)?</p>",
        "id": 153981571,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1533285808
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191450\">@Simone Heckmann</span>, interesting scenario. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span> <br>\nIn theory, you may be able to (ab)use the <code>ElementDefinition.contentReference</code> property:<br>\nSomething like Extension.extension:B.extension:A.contentReference = \"Extension.extension:A\"<br>\nHowever:</p>\n<ul>\n<li>I'm not sure if derived profiles/extension definitions are allowed to introduce new contentReferences?</li>\n<li>I've never tested this in Forge, not sure if the tool supports this...</li>\n</ul>",
        "id": 153981610,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1533289098
    },
    {
        "content": "<p>I expect the IGPublisher and validator would blow up too...</p>",
        "id": 153981811,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1533307169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>, is this even allowed by the spec?</p>",
        "id": 153981817,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1533307606
    },
    {
        "content": "<p>There's no prohibition against recursion in defining a complex extension.</p>",
        "id": 153981925,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1533327260
    },
    {
        "content": "<p>It's certainly not something explicitly contemplated or discussed, but technically it should be doable.</p>",
        "id": 153981926,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1533327291
    },
    {
        "content": "<p>IMO, this should work the same as with reusing Backbone-Elements, like we do with nested items in Questionnaire, for example.<br>\n...which is - I guess - what Michel is proposing.</p>",
        "id": 153985703,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1534147597
    },
    {
        "content": "<p>Until now, I assumed that only core resource/datatype definitions (with StructureDefinition.derivation = specialization) are allowed to introduce a contentReference, to reduce complexity of the implementation. Interesting proposal however. Would you like to submit a gForge issue? i.e. also allow (complex) extension definitions to introduce a content reference.</p>",
        "id": 153985711,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1534153810
    },
    {
        "content": "<p>we have very specifically said, in r4, that only specialisations can use contentReference (after we considered all the truly confusing things you could do in a profile)</p>",
        "id": 153985719,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534156426
    },
    {
        "content": "<p>Phew... tool smith sigh of relief ;p</p>",
        "id": 153985729,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1534158286
    },
    {
        "content": "<p>Is deep nesting of complex extensions something to be encouraged? It kinda adds to the implementer complexity...</p>",
        "id": 153985863,
        "sender_full_name": "David Hay",
        "timestamp": 1534182967
    },
    {
        "content": "<p>Not encouraged.  Deeper nesting than 2 levels should be unusual except possibly in Basic</p>",
        "id": 153985876,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1534187989
    }
]