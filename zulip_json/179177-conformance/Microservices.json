[
    {
        "content": "<p>Yesterday, we saw a presentation here at DevDays where the implementer was implementing 'microservices'. For him, that meant that given a specific activity, the server would create a particular end--point. e,g. [base]/ActivityDefinition/[id]/[otherid]/</p>",
        "id": 153857675,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479463713
    },
    {
        "content": "<p>from that end point, you could access /metadata. WHat you would get back would be highly context specific - it would tell a client exactly what it could do in this particular context</p>",
        "id": 153857676,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479463745
    },
    {
        "content": "<p>For me, this raised a couple of questions<br>\n- is there any path restrictions or documentation we can provide about where to put these microservices to be conformant<br>\n- there is no way to indicate in a capabilities statement what the implicit context is. Should there be?</p>",
        "id": 153857677,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479463857
    },
    {
        "content": "<p>Not sure I understand this question. How does this relate to FHIR's Operations framework? What does \"implicit context\" for a capability statement mean?</p>",
        "id": 153857680,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1479464117
    },
    {
        "content": "<p>I guess that if you could get the CapabilityStatement from any endpoint, not just the [base], then it becomes relevant where you got it relative to the base?</p>\n<p>I must say that I also don't see why microservices could not be expressed using Operations.</p>\n<p>If you create pseudo resources that are actually services, they run a risk of name clashing with future actual resources.</p>",
        "id": 153857868,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1479575446
    },
    {
        "content": "<p>It's a different thing to operations - a microservice is a fully fledged FHIR service with it's own capability statement, not just another operation in some broad service. It might define it's own operation but the point is that it will expose a bunch of services, some of them existing FHIR interactions, and some of them fhir or custom operations. </p>",
        "id": 153857869,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479575711
    },
    {
        "content": "<p>Josh - implicit context - the microservice provides a set of operations that can be performed for a given workflow. In a sense, it's equivalent to an application launch context in Smart-on-fhir, except taht instead of making it an explicit parameter, you just expect that it's somehow implied in the URL of the FHIR server given to the smart app</p>",
        "id": 153857870,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479575793
    },
    {
        "content": "<p>Except that the smart app, the parameter may be available for introspection, but not in an implicit context in a micro-service</p>",
        "id": 153857872,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479575831
    },
    {
        "content": "<p>I'm still not sure of the overall use case, but we're overloading the word \"microservices\" in a way that's contributing to my confusion. </p>",
        "id": 153857942,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1479679007
    },
    {
        "content": "<p>yes, probably. Any suggestions for other terms?</p>",
        "id": 153857949,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1479706750
    }
]