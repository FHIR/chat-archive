[
    {
        "content": "<p>I'm reviewing the validation of primitive values by the validator. I have a couple of issues:<br>\n- are leading zeros allowed on exponents in decimals? we don't say anything about this (we don't allow leading zeros on the actual number). <br>\n- the validator says this is not valid:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"nt\">&lt;parameter&gt;</span>\n    <span class=\"nt\">&lt;name</span> <span class=\"na\">value=</span><span class=\"s\">&quot;paramMarkdownMissing&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;valueMarkdown&gt;</span>\n      <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/data-absent-reason&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;valueCode</span> <span class=\"na\">value=</span><span class=\"s\">&quot;unknown&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/extension&gt;</span>\n    <span class=\"nt\">&lt;/valueMarkdown&gt;</span>\n  <span class=\"nt\">&lt;/parameter&gt;</span>\n</pre></div>\n\n\n<p>in fact, it gives 3 errors:</p>\n<div class=\"codehilite\"><pre><span></span>ERROR: Parameters.parameter[37]: A parameter must have one and only one of (value, resource, part) [(part.exists() and value.empty() and resource.empty()) or (part.empty() and (value.exists() xor resource.exists()))]\nERROR: Parameters.parameter[37].value.ofType(markdown): Primitive types must have a value that is not empty\nERROR: Parameters.parameter[37].value.ofType(markdown): All FHIR elements must have a @value or children [hasValue() or (children().count() &gt; id.count())]\n</pre></div>\n\n\n<p>I think every one of those errors is wrong?</p>",
        "id": 171998652,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564451749
    },
    {
        "content": "<p>related to the decimal question, we say:</p>",
        "id": 171999264,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564452769
    },
    {
        "content": "<blockquote>\n<p>JSON is restricted to the precision limits documented in XML schema for xs:double and xs:decimal</p>\n</blockquote>",
        "id": 171999277,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564452813
    },
    {
        "content": "<p>consulting the xs:decimal limits, I see: </p>\n<blockquote>\n<p>All ·minimally conforming· processors ·must· support decimal numbers with a minimum of 18 decimal digits (i.e., with a ·totalDigits· of 18). However, ·minimally conforming· processors ·may· set an application-defined limit on the maximum number of decimal digits they are prepared to support, in which case that application-defined maximum number ·must· be clearly documented.</p>\n</blockquote>",
        "id": 171999328,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564452865
    },
    {
        "content": "<p>and for double, I see</p>",
        "id": 171999331,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564452876
    },
    {
        "content": "<blockquote>\n<p>The basic ·value space· of double consists of the values m × 2^e, where m is an integer whose absolute value is less than 2^53, and e is an integer between -1075 and 970, inclusive</p>\n</blockquote>",
        "id": 171999355,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564452940
    },
    {
        "content": "<p>I don't actually know how the double commentary is relevant</p>",
        "id": 171999360,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564452958
    },
    {
        "content": "<p>the decimal constraints... are not constraints.</p>",
        "id": 171999401,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564452967
    },
    {
        "content": "<p>so I'm not sure what we are trying to do here. (I know what we are doing: making a mess of precision limits)</p>",
        "id": 171999409,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564452992
    },
    {
        "content": "<p>relevant prior discussion here on Zulip:</p>",
        "id": 171999619,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564453275
    },
    {
        "content": "<ul>\n<li><a href=\"#narrow/stream/179266-fhirpath/topic/Decimal.20.3D.20vs.20~\" title=\"#narrow/stream/179266-fhirpath/topic/Decimal.20.3D.20vs.20~\">https://chat.fhir.org/#narrow/stream/179266-fhirpath/topic/Decimal.20.3D.20vs.20~</a></li>\n<li><a href=\"#narrow/stream/179266-fhirpath/topic/Fixed-precision.20decimal\" title=\"#narrow/stream/179266-fhirpath/topic/Fixed-precision.20decimal\">https://chat.fhir.org/#narrow/stream/179266-fhirpath/topic/Fixed-precision.20decimal</a></li>\n</ul>",
        "id": 171999621,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564453281
    },
    {
        "content": "<p>what the validator is presently doing:</p>\n<ul>\n<li>checking the syntax validity, allowing leading zeros on exponents</li>\n<li>noting a warning if there is more than 18 digits in the exponent / decimal, and if there's more than 4 digits in the mantissa</li>\n</ul>",
        "id": 172009168,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564467953
    },
    {
        "content": "<p>And I just found a shockingly large bug in the validator :-(</p>",
        "id": 172009325,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564468172
    },
    {
        "content": "<p>check this Java code, at the bottom of all primitive data type fixedValue checking</p>",
        "id": 172009353,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564468193
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"nf\">checkEquals</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">v1</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">Utilities</span><span class=\"o\">.</span><span class=\"na\">noString</span><span class=\"o\">(</span><span class=\"n\">v1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">v2</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n</pre></div>",
        "id": 172009402,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564468210
    },
    {
        "content": "<p>big logic flaw: if the fixed value has null, it's supposed to check that the instance value is null. But it doesn't - it ignores it. It should be</p>",
        "id": 172009427,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564468256
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> <span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"nf\">checkEquals</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">v1</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">Utilities</span><span class=\"o\">.</span><span class=\"na\">noString</span><span class=\"o\">(</span><span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">v2</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n</pre></div>",
        "id": 172009445,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564468269
    },
    {
        "content": "<p>is <code>-0</code> a valid decimal?</p>",
        "id": 172010000,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564468953
    },
    {
        "content": "<p>I think it is</p>",
        "id": 172010002,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564468956
    }
]