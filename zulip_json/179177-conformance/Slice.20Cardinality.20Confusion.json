[
    {
        "content": "<p>According to <a href=\"https://www.hl7.org/fhir/profiling.html#slice-cardinality\">5.1.0.12 Slice Cardinality</a>:</p>\n<blockquote>\n<p>When an element of a fixed cardinality m..n is sliced, the following rules apply:</p>\n<ul>\n<li>Each slice cannot have a greater cardinality than the maximum number of slices allowed</li>\n</ul>\n</blockquote>\n<p>I'm having trouble understanding what this rule means.  What is a \"greater cardinality\"? Is that in terms of min or max?  And does it really mean to compare to \"maximum number of slices allowed\" (because I don't understand how the number of slices is relevant)?  Or does it mean \"maximum number of items allowed in the sliced element\"?</p>",
        "id": 256138987,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1633384352
    },
    {
        "content": "<p>i would interpret that as saying the slice cardinality can't be greater than n.  So you can't say identifer = 0..1 and then slice it and say that slice X must appear 2 times.</p>",
        "id": 256149357,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1633389869
    },
    {
        "content": "<p>almost - slice max can't be  greater than element max</p>",
        "id": 256155345,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1633393391
    },
    {
        "content": "<p>OK.  We actually implemented SUSHI that way.  We emit an error if your slice max is &gt; your element max.  But... We received <a href=\"#narrow/stream/215610-shorthand/topic/Slicing.20cardinalits.20validation.20Error\">requests to remove the error</a> because a profile of a profile might zero out a sliced element that was inherited from the parent -- in which case you'd be forced to go through and zero out all the inherited slices too (which is annoying).  Apparently the IG Publisher allows slice max &gt; element max, so they thought it was an allowable situation. I was on board w/ removing the error until I saw the bit in the spec that I quoted above.</p>\n<p>Any thoughts on this, <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>?  It sounds like the spec requires that if you zero out a sliced element, you must also zero out all the slices. Since this is tedious, I'm thinking about having SUSHI automatically do it for you.</p>",
        "id": 256233798,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1633435798
    },
    {
        "content": "<p>Wait. But if you have a sliced optional element with 0..n which has two optional slices with 0..1 each. <br>\nThat means you can't decide, say, in a derived profile, that you don't want the optional element at all and constrain it to 0..0, because n &gt; 0 ?</p>",
        "id": 256235429,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1633436630
    },
    {
        "content": "<p>You <em>can</em> mark the element <code>0..0</code>.  That's fine.  But then you should also mark its slices as <code>0..0</code> since they are no longer optional (they are now prohibited since the whole array is prohibited).</p>",
        "id": 256236440,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1633437109
    },
    {
        "content": "<p>If there's a slice that's 1..5 in a parent profile, you can't make it go away in a child profile.  You can't ever make the overall element 0..0.</p>",
        "id": 256245578,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633440739
    },
    {
        "content": "<p>The defacto minimum cardinality is the sum of the minimums of the slices</p>",
        "id": 256247323,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633441472
    },
    {
        "content": "<p>You can't constrain the overall max below that minimum</p>",
        "id": 256247382,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633441498
    },
    {
        "content": "<p>Slice cardinalities must always be satisfied.  It's not a situation of \"if you have this element, then you must meet these cardinalities\".</p>",
        "id": 256247487,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633441545
    },
    {
        "content": "<p>ugh thats inconvenient  <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <br>\nI saw several use-cases were the derived profile constrained the sliced element to 0..0 to express: \"we don't need/use that\"</p>",
        "id": 256249851,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1633442349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> - agreed on all points.  I think the main issue of confusion here was related to max cardinality.  If you say an element can have at most <em>n</em> items, and then you define a slice saying it can have at most <em>n+1</em> items, then that slice max can never actually be achieved without violating the overall element cardinality.</p>",
        "id": 256249969,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1633442398
    },
    {
        "content": "<p>After your input this would mean, that these usecases would have to create their own \"alligned\" profile to do such things.</p>",
        "id": 256249972,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1633442399
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> for keeping track of the actual issue. The issue was only max card. related.</p>",
        "id": 256250169,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1633442453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/179177-conformance/topic/Slice.20Cardinality.20Confusion/near/256236440\">said</a>:</p>\n<blockquote>\n<p>You <em>can</em> mark the element <code>0..0</code>.  That's fine.  But then you should also mark its slices as <code>0..0</code> since they are no longer optional (they are now prohibited since the whole array is prohibited).</p>\n</blockquote>",
        "id": 256250263,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1633442488
    },
    {
        "content": "<p>I think this needs a test case for the validators, currently the java validator allows only setting the element to 0..0</p>",
        "id": 256250408,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1633442537
    },
    {
        "content": "<p>Agree that the validator should catch and prevent this.  Care to submit a Git issue?</p>",
        "id": 256253434,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633443560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191451\">Patrick Werner</span> <a href=\"#narrow/stream/179177-conformance/topic/Slice.20Cardinality.20Confusion/near/256249851\">said</a>:</p>\n<blockquote>\n<p>ugh thats inconvenient  <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <br>\nI saw several use-cases were the derived profile constrained the sliced element to 0..0 to express: \"we don't need/use that\"</p>\n</blockquote>\n<p>With luck, the derived profile can leave the sliced element not marked must support, then it can be ignored in implementations.</p>",
        "id": 256331600,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1633474486
    },
    {
        "content": "<p>Well, except sender must satisfy cardinalities regardless of how things are marked</p>",
        "id": 256341791,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633481403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179177-conformance/topic/Slice.20Cardinality.20Confusion/near/256253434\">said</a>:</p>\n<blockquote>\n<p>Agree that the validator should catch and prevent this.  Care to submit a Git issue?</p>\n</blockquote>\n<p><a href=\"https://github.com/hapifhir/org.hl7.fhir.core/issues/616\">https://github.com/hapifhir/org.hl7.fhir.core/issues/616</a></p>",
        "id": 256544612,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1633597157
    }
]