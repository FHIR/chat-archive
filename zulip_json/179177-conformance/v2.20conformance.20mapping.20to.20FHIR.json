[
    {
        "content": "<p>Added <a href=\"https://confluence.hl7.org/display/CONF/V2+conformance+to+FHIR+mapping\">https://confluence.hl7.org/display/CONF/V2+conformance+to+FHIR+mapping</a></p>",
        "id": 210892657,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600790694
    },
    {
        "content": "<p>Summary of my perspective on this morning's discussion:</p>\n<ol>\n<li>We should not define an extension that conveys codes that are redundant with information already expressed in normative elements on ElementDefinition, particularly when those codes don't cover the full set of permitted combinations and/or will cause implementers to misinterpret meaning given that behavior in v2 and FHIR are different.  The v2 codes do not provide computable capability that doesn't already exist in FHIR.</li>\n<li>There should be clear documentation added to the FHIR spec in the comparison-v2 page in the FHIR spec that explains the relationships between v2 conformance concepts and FHIR conformance concepts so that readers familiar with v2 understand the relationship (and why FHIR expresses information differently)</li>\n<li>FHIR-I should consider whether there is sufficient value to outweigh the risks associated with defining a 'simple' way to flag an element as not permitting extensions (which is what most people mean when they say \"this element can't be null\", though the meaning is actually quite different.)</li>\n<li>Either FHIR-I or Conformance should consider defining a 0..* CodeableConcept element that can express mustSupport semantics.  Possible codes would convey things like \"must persist\", \"must display to user\", \"must allow user to specify\", \"must consider in logic\", etc.  (Note that these codes should <em>not</em> deal with what can/must appear in an instance.)</li>\n</ol>",
        "id": 210896958,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600792538
    },
    {
        "content": "<p>with regard to #4 the first thing to do is to code up with a proposed code system</p>",
        "id": 210902513,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600795024
    },
    {
        "content": "<p>There's already a clear and simple way to say that an element can't have extensions which is to set .extension max = 0. So what would #3 achieve?</p>",
        "id": 210902707,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600795113
    },
    {
        "content": "<p>are we after an authoring short cut?</p>",
        "id": 210903258,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600795321
    },
    {
        "content": "<p>It would be an authoring short-cut, yes - that wouldn't look so ugly in the snapshot view.  (Because if you constrain extension (and modifierExtension) to max=0, then everything else gets listed in the snapshot</p>",
        "id": 210905153,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600796156
    },
    {
        "content": "<p>Of course, providing a shortcut to do something that's generally a bad idea is not necessarily a good thing...</p>",
        "id": 210905316,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600796225
    },
    {
        "content": "<p>if you want to change the presentation, that's not an authoring short cut then. that's something else</p>",
        "id": 210905360,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600796249
    },
    {
        "content": "<p>I think that I could do that automatically, if people wanted - detect that the only changes made  when walking into a type are to ban extensions, and present appropriately</p>",
        "id": 210905614,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600796368
    },
    {
        "content": "<p>It's a bit of both, I think, but presentation would be most relevant</p>",
        "id": 210905678,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600796396
    },
    {
        "content": "<p>do we have any profiles that do this now as a reference?</p>",
        "id": 210906072,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600796560
    },
    {
        "content": "<p>Don't think so - which is good.  Because preventing extensions is generally not good.</p>",
        "id": 210908726,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600797706
    },
    {
        "content": "<p>Da Vinci probably wouldn't ever prohibit extensions, but there might be some places where they'd want to make value mandatory</p>",
        "id": 210908894,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600797762
    },
    {
        "content": "<p>I interpreted 'mandatory' as value not null, not that extensions are disallowed (though perhaps I misinterpreted).   If you really wanted to prevent null values, could you do that with an invariant?</p>",
        "id": 210909161,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1600797861
    },
    {
        "content": "<p>you could but the canonical way is to just to say what you mean: set .value to min = 1</p>",
        "id": 210909629,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600798065
    },
    {
        "content": "<p>Is there somewhere that explicitly states that the presence of the Data Absent Reason alone does (or does not) fulfill the requirement that an element, when present (ie, as one with a minimum cardinality of 1 needs to be) \"SHALL have a value attribute, child elements, or extensions\"?</p>",
        "id": 210909851,
        "sender_full_name": "Craig Newman",
        "timestamp": 1600798162
    },
    {
        "content": "<p>there is nothing that makes any explicit statement like that about one particular extension.</p>",
        "id": 210910071,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600798250
    },
    {
        "content": "<p>Does that mean that the presence of the Data Absence Reason extension is sufficient to meet that requirement?</p>",
        "id": 210910138,
        "sender_full_name": "Craig Newman",
        "timestamp": 1600798295
    },
    {
        "content": "<p>it would follow as given that an extension fulfills there requirement that an element SHALL have a value attribute, child elements, or extensions, since it is an extension</p>",
        "id": 210910265,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600798349
    },
    {
        "content": "<p>I think that i should alert you to the fact that the data absent reason extension is far from special in the context of FHIR- there is plenty of other extensions that may or may not substitute for a value in some way</p>",
        "id": 210914213,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600800268
    },
    {
        "content": "<p>There's no such thing as \"null value\" in FHIR - you're not allowed to have an element that's empty.  For simple types, you must either have a value or extensions.  For complex types, you must have either components or extensions</p>",
        "id": 210914312,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600800343
    },
    {
        "content": "<p>There's nothing magic about \"data absent reason\".  There are all sorts of extensions that could be sent on a mandatory element that would let you avoid populating 'value'.  Some might actually convey a value in another form.  Others might explain why a value is absent.  Others might say nothing useful at all and just be a work-around to satisfy the validator.  All are legal.</p>",
        "id": 210914493,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600800442
    },
    {
        "content": "<p>Also, what's historically considered a 'null' in v3 and v2 can actually be  a proper value.  So if I send a Patient.gender with a value of \"unknown\", that's just as 'null' as if I send a <a href=\"http://Patient.name\">Patient.name</a> with an extension that says \"unknown\".</p>",
        "id": 210914627,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600800496
    },
    {
        "content": "<p>I think the underlying issue here is that sometimes we want to say \"there must be a value here\".  That's easy to understand for 'simple' types.  It's more complicated for complex types.  But having an easy way to assert that and render that would be useful.  Along with clear guidance on when it's appropriate (and not appropriate) to set such a flag would potentially be a good thing.</p>",
        "id": 210919633,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600802861
    },
    {
        "content": "<p>well, now i'm back to agreeing with this:</p>\n<blockquote>\n<p>whether there is sufficient value to outweigh the risks </p>\n</blockquote>\n<p>because there's a way to say whatever you want right now, and any easy short cut is basically only easy because you're being ambiguous</p>",
        "id": 210920586,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600803371
    },
    {
        "content": "<p>I agree that there are many ways to send \"null\" including value sets and in many cases these \"null\" values are perfectly valid and useful. The reason the Data Absent Reason extension does seem \"special\" to me is that it is part of the core standard and that by definition it seems (to me at least) that this extension would only be used when there is no value attribute, child element or extension other than this one. So by it's existence it provides an HL7 provided way to avoid the spirit (as I perceive it - which may be wrong) of a 1..x cardinality where there is a use case for the element to always be populated.</p>",
        "id": 210932690,
        "sender_full_name": "Craig Newman",
        "timestamp": 1600809605
    },
    {
        "content": "<p>it's in core, yes. But it's not the only extension that's relevant here. This discussion is inappropriately focused on the one extension. There's these possibilities:</p>\n<ul>\n<li>the data is absent for some reason</li>\n<li>the data is this string I don't know how to present properly</li>\n<li>the data can be calculated with this expression, if you know some other value(s)</li>\n<li>the data is here in the wrong code system </li>\n</ul>\n<p>I can never tell which of these possibilities you intend to cover or not.</p>",
        "id": 210932940,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600809772
    },
    {
        "content": "<p>For example, in an IG if I want to indicate that an Immunization resource where Immunization.vaccineCode which only contains the Data Absent Reason extension should not be sent, is my only option to constrain away the ability to use any extension on this element? I agree that unless I do that, an implementer can always come up with their own extension to do the  same basic think, but I suspect that many implementers will feel less \"guilty\" about using the Data Absent Reason extension because it's part of the base standard than they would if they defined their own extension.</p>",
        "id": 210932949,
        "sender_full_name": "Craig Newman",
        "timestamp": 1600809778
    },
    {
        "content": "<blockquote>\n<p>is my only option to constrain away the ability to use any extension on this element</p>\n</blockquote>\n<p>no, it's certainly not. you can prohibit the use of that particular extension</p>",
        "id": 210933028,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600809833
    },
    {
        "content": "<p>OK, I didn't know you could get that specific</p>",
        "id": 210933137,
        "sender_full_name": "Craig Newman",
        "timestamp": 1600809888
    },
    {
        "content": "<p>I still have a nagging feeling that \"absent\" is a bit different from \"can't be expressed as required by the resource definition\" but I guess ultimately, they are functionally similar</p>",
        "id": 210933304,
        "sender_full_name": "Craig Newman",
        "timestamp": 1600809974
    },
    {
        "content": "<p>that depends. Which is why the discussion shouldn't be obsessed with a single extension</p>",
        "id": 210933370,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600810033
    },
    {
        "content": "<p>However, prohibiting the HL7 core dataAbsentReason extension won't keep someone from sending their own local dataAbsentReasonPlus extension that does exactly the same thing</p>",
        "id": 210934318,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600810576
    },
    {
        "content": "<p>So there's no practical mechanism to allow certain classes of extensions while prohibiting other classes of extensions - in part because there's no current way of classifying extensions (and I'm not terribly confident that we could come up with a workable and reliable classification mechanism if we wanted one).</p>",
        "id": 210934411,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600810640
    },
    {
        "content": "<p>On item 3, I would think that generally what is required is a value, so make value required rather than prohibiting extensions.</p>",
        "id": 211088776,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1600920871
    },
    {
        "content": "<p>that works for simple data types, but not for others, such as HumanName, Address, Coding, CodeableConcept, Quantity</p>",
        "id": 211093265,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600927953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191682\">Richard Townley-O'Neill</span> <a href=\"#narrow/stream/179177-conformance/topic/v2.20conformance.20mapping.20to.20FHIR/near/211088776\">said</a>:</p>\n<blockquote>\n<p>On item 3, I would think that generally what is required is a value, so make value required rather than prohibiting extensions.</p>\n</blockquote>\n<p>I think this is the root of my misunderstanding. How do you make the value required in a way that doesn't allow an extension to satisfy the requirement to be valued (if that even makes sense the way I said it)?</p>",
        "id": 211128612,
        "sender_full_name": "Craig Newman",
        "timestamp": 1600953166
    },
    {
        "content": "<p>for a simple types, make the value 1..1</p>",
        "id": 211141027,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600958540
    }
]