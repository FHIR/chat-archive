[
    {
        "content": "<p>I'm creating a Logical model using the latest STU3 build of Forge. I dont seem to be able to set the \"type\" for the model (see diagram). The element does not accept any input.</p>\n<p>This is a mandatory element so I then get validation errors. What am I doing wrong?</p>\n<p><a href=\"/user_uploads/10155/1tYbakVle02aNtRUN-oZ-WoR/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/1tYbakVle02aNtRUN-oZ-WoR/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/1tYbakVle02aNtRUN-oZ-WoR/pasted_image.png\"></a></div>",
        "id": 153896878,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1499967545
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191362\">@Richard Kavanagh</span>, thank you for reporting the issue. We're currently working on an update for Forge. I'll investigate this and try to solve it.</p>",
        "id": 153896917,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1500021652
    },
    {
        "content": "<p>FHIR spec states the following:<br>\nsdf-11: \"If there's a type, its content must match the path name in the first element of a snapshot\"<br>\nSo assuming that this invariant also applies to logical models, this implies that Forge needs to synchronize the type property value with the (user-assigned) root element name.</p>",
        "id": 153896918,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1500022133
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191362\">@Richard Kavanagh</span>, I've fixed the issue, for logical models the StructureDefinition.type property value is now synced with the (user-assigned) root element name. This fix will be included in the upcoming new (STU3) release.<br>\nThank you for reporting!</p>",
        "id": 153897181,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1500366043
    },
    {
        "content": "<p>Is there an easy way to create a logical model using an existing resource as a starting point?</p>",
        "id": 169472671,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1562067260
    },
    {
        "content": "<p>What usecase have you got here?</p>",
        "id": 169476763,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1562071307
    },
    {
        "content": "<p>I want to create a logical model of \"patient\" which is ost of the patient resources plus a stack of extensions. Some of the elements have slightly different names, datatypes etc. Rather than typing them all in from scratch I wondered whether it was possible to do this in the tool. If not I'll edit the XML directly and do it that way...</p>",
        "id": 169495263,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1562084838
    },
    {
        "content": "<p>I don't think there is</p>",
        "id": 169544584,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1562137616
    },
    {
        "content": "<p>do you want to add new attributes?</p>",
        "id": 169548116,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1562141743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191549\">@Frank Oemig</span>  yes I will need to, I would envisage that I could do that using the existing functionality of Forge.</p>",
        "id": 169563036,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1562158105
    },
    {
        "content": "<p>ok, but then your stuff will become incompatible. Therefore we do have extensions, in combination with profiling.</p>",
        "id": 169563328,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1562158370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191549\">@Frank Oemig</span>  are we talking about the same thing here? My question relates to \"logical\" models these are abstract models not used for sharing data. When it comes to an implementable solution ten, of course, we would use appropriate resources and if required extend them in the normal manner.</p>",
        "id": 169601037,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1562186924
    },
    {
        "content": "<p>well, logical modules are for data exchange using FHIR technology. If you are looking for grasping relevant information you should use mindmaps or UML, at least IMO</p>",
        "id": 169604843,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1562190717
    },
    {
        "content": "<p>I don't think we have the same understanding of the purpose of Logical Models. I am taking mine from <a href=\"https://www.hl7.org/fhir/structuredefinition.html#logical\" target=\"_blank\" title=\"https://www.hl7.org/fhir/structuredefinition.html#logical\">https://www.hl7.org/fhir/structuredefinition.html#logical</a> . The original question relates to Forge, which I have an answer for. Thanks.</p>",
        "id": 169607187,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1562193306
    },
    {
        "content": "<p>Well, you're kind of both right... because there is data exchange happening based on logical models, but what RIchard is trying to is a valid thing to do.</p>",
        "id": 169609245,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562195913
    },
    {
        "content": "<p>Well, that's what the logical modeller in clinfhir does...  check out <a href=\"http://nz.clinfhir.com/\" target=\"_blank\" title=\"http://nz.clinfhir.com/\">http://nz.clinfhir.com/</a> for links to models that we're creating as part of putting a FHIR facade in front of our registries. The Patient one is reasonably complete...</p>",
        "id": 169622203,
        "sender_full_name": "David Hay",
        "timestamp": 1562218429
    },
    {
        "content": "<p>The idea is that the model collects data in a way that a non-techical person can understand, then that forms the requirements for the actual fhir profiles and extension definitions...</p>",
        "id": 169622260,
        "sender_full_name": "David Hay",
        "timestamp": 1562218514
    },
    {
        "content": "<p>Can also use it to create 'pure' information models - ie not based on an existing type. We're doing that for the Australian GP extract project - check out the common model at <a href=\"http://csiro.clinfhir.com/\" target=\"_blank\" title=\"http://csiro.clinfhir.com/\">http://csiro.clinfhir.com/</a> .   While some of the nodes kinda map to resources, this was used with a whole bunch of clinicians to collect their data requirements...</p>",
        "id": 169622315,
        "sender_full_name": "David Hay",
        "timestamp": 1562218658
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191362\">@Richard Kavanagh</span>, Forge does not contain any end-user functionality to convert a constraining profile to a logical model. However you may be able to \"hack\" it. Start by generating a snapshot from the constraining profile. Change the <code>kind</code> property value to <code>logical</code> and <code>type</code> property to <code>specialization</code>. You may have to remove the <code>.base</code> component from all element definitions. Now try to open the profile in Forge. You should end up with a similar element tree.<br>\nPlease note that Forge currently does NOT support extensions (nor slicing) on logical models. This is a tooling limitation, not a FHIR limitation. Forge does not fully support your scenario and you will still need to perform some manual updates.</p>",
        "id": 171170838,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1563457312
    },
    {
        "content": "<blockquote>\n<p>Can also use it to create 'pure' information models - ie not based on an existing type. We're doing that for the Australian GP extract project - check out the common model at <a href=\"http://csiro.clinfhir.com/\" target=\"_blank\" title=\"http://csiro.clinfhir.com/\">http://csiro.clinfhir.com/</a> .   While some of the nodes kinda map to resources, this was used with a whole bunch of clinicians to collect their data requirements...</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191321\">@David Hay</span> do you mean we can make logical models without datatypes? I am looking exactly for that.</p>",
        "id": 171191614,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1563471055
    },
    {
        "content": "<p>Well, every element does have a (single) datatype - you could just leave it<br>\nas a string if you weren't interested in actually defining it...</p>",
        "id": 171198545,
        "sender_full_name": "David Hay",
        "timestamp": 1563475912
    },
    {
        "content": "<p>ok thanks that would be a good fallback.</p>",
        "id": 171199483,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1563476530
    },
    {
        "content": "<p>The elements of a logical model can reference other logical custom \"datatypes\". However ultimately leaf elements (with a value and no children) should always map to a core primitive datatype, as you cannot introduce your own custom primitives.</p>",
        "id": 171241930,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1563527667
    },
    {
        "content": "<p>Makes sense, being a logical model, there will be a data type. <br>\nDavid's comment raised my interest because I want to see if this can be uses for purely business glossaries /info models, which normally would not have data types. <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> this info model is the same as you have in the Netherlands for Nictiz's ZIBs.</p>",
        "id": 171243851,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1563529576
    },
    {
        "content": "<p>I took the view that even in 'business' models (assuming we're talking about the same thing) there was still some value in specifying the datatype. For example, if you're modelling an address or a name you can 'defer' the details to that datatype without having to enumerate them (unless there's extra elements of course). There's also an element of education for the viewer as well - I'm always looking for ways to have people understand some of the core bits of FHIR!</p>\n<p>(as an aside, I should look to better support profiled datatypes - at a logical level that is)</p>",
        "id": 171384430,
        "sender_full_name": "David Hay",
        "timestamp": 1563736909
    }
]