[
    {
        "content": "<p>I am currently working on a IG and want to base it IPS. Accordingly, I would base most of the profiles on the IPS profiles, i.e. do re-profiling. Now suppose I mark further elements as must-support in one of my profiles. Then profiles may contain must-support elements originating from both IPS and from my IG. However, my own IG might have a different definition of what must-support means than IPS. So the question is: which definition holds for the must-support elements in my profiles?</p>\n<p>I would suppose the answer is my definition, i.e. that the definition in the IG now applies to all must-support flags, regardless of origin. But is that actually captured anywhere in the spec? And is there an (informal) expectation that must-support definitions in derived IG can somehow not be less restrictive than the underlying definition (similar to how profiling cannot loosen cardinalities)? It may be a bit theoretical, but I am wondering if it could still lead to issues if one introduces an extremely weak definition of must-support in the derived IG, causing systems to handle the data in ways that are not permissible per IPS.</p>",
        "id": 211932889,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1601567987
    },
    {
        "content": "<p>Must support can mean different things for different elements, as long as you say so. That only answers part of the question.</p>",
        "id": 211976888,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1601587189
    },
    {
        "content": "<p>Conformance is currently working on an extension to formalize what mustSupport means. A derived profile cannot weaken requirements.</p>",
        "id": 212036533,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1601621548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191549\">@Frank Oemig</span> sounds interesting, is there a preview somewhere?</p>",
        "id": 212112412,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1601664137
    },
    {
        "content": "<p><a href=\"https://confluence.hl7.org/display/CONF/FHIR+US+Conformance%3A+Specification+Outline\">https://confluence.hl7.org/display/CONF/FHIR+US+Conformance%3A+Specification+Outline</a></p>",
        "id": 214691814,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1603801540
    },
    {
        "content": "<p><a href=\"https://confluence.hl7.org/pages/viewpage.action?pageId=91991374\">https://confluence.hl7.org/pages/viewpage.action?pageId=91991374</a></p>",
        "id": 214691864,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1603801563
    },
    {
        "content": "<p>Note that none of this is approved methodology - and some is in conflict with approved FHIR methodology</p>",
        "id": 214695801,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1603803934
    },
    {
        "content": "<p>OK, thanks!</p>",
        "id": 214705867,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1603808583
    },
    {
        "content": "<p>We are still analyzing. Why would specific extensions be in conflict then?</p>",
        "id": 214728931,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1603817433
    },
    {
        "content": "<p>Extensions can't be used to convey information (or override) information that already has a formal place in the spec.</p>",
        "id": 214730146,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1603817935
    },
    {
        "content": "<p>The details conveyed \"behind\" mustSupport in IGs can be reduced to the following three aspects:</p>\n<ul>\n<li>direction</li>\n<li>functionality</li>\n<li>expected data (null values or additional values)<br>\nor a combination of the three.<br>\nI have added that to a PPT slide deck: <a href=\"https://confluence.hl7.org/pages/viewpage.action?pageId=91991374&amp;focusedCommentId=97476766&amp;refresh=1610526678860#comment-97476766\">https://confluence.hl7.org/pages/viewpage.action?pageId=91991374&amp;focusedCommentId=97476766&amp;refresh=1610526678860#comment-97476766</a></li>\n</ul>",
        "id": 222549168,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610526791
    },
    {
        "content": "<p>'Direction' might have made sense in v2 when there was a presumption of only 2 exchange partners (sender and receiver), but that's not a safe assumption in the FHIR space.  While there is the notion of 'client systems' and 'server systems', one can't presume that the expectations for all clients will always be the same, or event that all server expectations will be the same.  For example, you might have clients that are decision support systems and other clients that are rendering apps.  If an IG defines expectations for both, the notion of 'direction' won't help.  The way 'direction' is handled in FHIR, when it's relevant (i.e. different expectations for different systems in an exchange) is by having distinct profiles for each type of participant system.  This approach is necessary because it's not just mustSupport expectations that might vary by system type - cardinality, invariants and even just descriptive guidance might all vary depending on the type of system.</p>\n<p>As discussed previously, the notion of 'expected data' also doesn't make much sense in FHIR.  FHIR has no concept of 'null'.  Simple elements can have a value or not.  And they can have extensions or not.  They must have at least an extension or a value.  However, extensions don't necessarily indicate null.  The extension might be a reference, might be text, might be an alternate encoding, might be a formula, or might be a whole lot of other things.  So there's no simple boolean flag that can be used to talk about 'expected data'.  And even if there were, it wouldn't be handled as part of mustSupport because mustSupport doesn't deal with the types of value present - that's not its scope.</p>\n<p>The <em>only</em> aspect of mustSupport that could potentially be coded is 'functionality' - i.e. is the expectation the element must be captured in a UI, displayed in a UI, retained in persistent store, transmitted to downstream systems, considered as part of decision support logic, etc.  If this was captured via code, it would need to be 0..* because multiple functions could be required.  It would also have to be extensible because there's no chance we could ever come up with standard codes covering all possibilities.  The question then would be \"what's the benefit of having this information exposed in computable form\" (as opposed to text, which is what we expect now).  This far, I haven't heard an answer to that question.</p>",
        "id": 222611460,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1610557155
    },
    {
        "content": "<p>For direction, if sender/receiver is misleading, what about creator/consumer. A client be both. That should be described in an IG.</p>",
        "id": 222644634,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610571538
    },
    {
        "content": "<p>I know that there is no null flavor in FHIR. But in each IG there is a specific extension that is used for that purpose. And it is not boolean but a Codesystem to express that. I would also expect that is refined in each IG individually so that it can be adapted to formalize the needs.</p>",
        "id": 222644977,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610571699
    },
    {
        "content": "<p>And functionality can repeat exactly for the purpose you describe.</p>",
        "id": 222645090,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610571744
    },
    {
        "content": "<p>Those can be used alone or in combination.</p>",
        "id": 222645128,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610571765
    },
    {
        "content": "<p>So I do not see any contradiction. On the contrary, the proposal supports all your requirements and help to formalize IGs.</p>",
        "id": 222645443,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610571874
    },
    {
        "content": "<p>there are flavors of creator too... Create-New, Update... might be flavors of Update</p>",
        "id": 222645561,
        "sender_full_name": "John Moehrke",
        "timestamp": 1610571939
    },
    {
        "content": "<p>there are flavors of consumer too... view only, consume, import, etc</p>",
        "id": 222645578,
        "sender_full_name": "John Moehrke",
        "timestamp": 1610571959
    },
    {
        "content": "<p>This is functionality: display as consumer, create with original data only/no extension/null, support as creator only, ..</p>",
        "id": 222645862,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610572089
    },
    {
        "content": "<p>Or disallow extension for the whole instance, or only a specific attribute,..</p>",
        "id": 222645953,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610572151
    },
    {
        "content": "<p>So it expresses what folks are doing with IGs...</p>",
        "id": 222646034,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610572187
    },
    {
        "content": "<p>It's not a question of creator/consumer.  You might have two different consumers with different mustSupport rules.  So the way you describe it is a separate profile for each participant - if the rules are different depending on participant type.  (Because <em>any</em> of the rules might be different, not just mustSupport.)</p>",
        "id": 222653114,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1610575685
    },
    {
        "content": "<p>In each IG there IS NOT a specific extension that is used for that purpose.  Some don't list any extensions, some might list one, some might list more than one.  Even if not listed, in most cases implementers are free to make up their own extensions and use those too instead/in addition.</p>",
        "id": 222653186,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1610575754
    },
    {
        "content": "<p>More importantly, what types of extensions are used is orthogonal to the notion of mustSupport.  So a solution that tries to munge this into mustSupport isn't going to fly.</p>",
        "id": 222653333,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1610575840
    },
    {
        "content": "<p>For that reason they should be combined , if necessary.<br>\nDepending on the Codesystem for referring to Extensions that can be adapted. It is not defined per se, but allows to formalize what is described in an IG. It is replacing natural language sentences into codes.<br>\nTherefore it is additional.</p>",
        "id": 222654700,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610576371
    },
    {
        "content": "<p>The idea behind those extensions is to translate the natural language requirements into something that is computable. As a first step, the IG should drive the codes. In a subsequent step the instances should be analysed whether we can find commonalities. Probably it is not explained good enough so far.</p>",
        "id": 222656510,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610577156
    },
    {
        "content": "<p>They can't (and won't) be combined.  'null' is not a special concept in FHIR.  There's \"has a value\" and \"doesn't have a value\".  \"Doesn't have a value\" can cover numerous possibilities.  There is no notion of 'null'.   And there is no chance of all IGs having a common approach to what extensions are allowed.</p>",
        "id": 222661223,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1610579942
    },
    {
        "content": "<p>What sort of computation would you expect to happen on the codes?</p>",
        "id": 222661273,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1610580001
    },
    {
        "content": "<p>Null Flavor - RIP... except <a href=\"http://hl7.org/fhir/json.html#null\">http://hl7.org/fhir/json.html#null</a></p>",
        "id": 222661993,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1610580495
    },
    {
        "content": "<p>Right - and that's not conveying null, just handling the fact that value and extensions are conveyed in different places</p>",
        "id": 222670304,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1610586853
    },
    {
        "content": "<p>I have never said that there is a null flavor. On the contrary, but there is a recognition that something comparable is necessary. As you said, this is the reason why IG writers have designed a special extension for that. This named differently. It may cover different values. And there may be more than in a single IG.<br>\nMay proposal should use a Codesystem to identify that. Therefore it can and most probably will be different in every IG. Is this a problem - no.<br>\nBut such an individual Codesystem would identify all natural language requirements.<br>\nOne can use that alone or combined with others. Just as necessary.</p>",
        "id": 222689548,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610612428
    },
    {
        "content": "<p>To replace natural language requirements this extensions must be combined, at least it must be possible. If this is necessary depends on the requirement.<br>\nSo, you may use that on resource/ profile level to say, that xyz and abc are the only extensions allowed.</p>",
        "id": 222689748,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610612563
    },
    {
        "content": "<p>For Germany, such a possibility would be great because in our specifications the awareness of what FHIR allows is low.</p>",
        "id": 222689787,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610612614
    },
    {
        "content": "<p>Again, from my perspective, everything that is currently done can be represented. Of course, it needs a better and more complete explanation. And it is not a SHALL. If writers don't want to use it, fine. But if, it could and certainly will be helpful.</p>",
        "id": 222689925,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610612733
    },
    {
        "content": "<p>On the other hand, we were said to come with a proposal. I am astonished about this pushback.</p>",
        "id": 222690037,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1610612796
    },
    {
        "content": "<p>you shouldn't be astonished about that - everything generates pushback.</p>",
        "id": 222752284,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1610645541
    },
    {
        "content": "<p>Shouldn't the discussion about \"direction\" actually be about actors? Different actors have different expectations...</p>",
        "id": 222752344,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1610645568
    },
    {
        "content": "<p>yes, the expectations should be on the actor interacting with the profile (transaction). This is how IHE has done it for years.</p>",
        "id": 222757072,
        "sender_full_name": "John Moehrke",
        "timestamp": 1610647410
    },
    {
        "content": "<p>The comparable thing to v2's notion of 'null' is PATCH - that allows you to say \"changing some things, but not other things\".  There is <em>no</em> way to do that in a regular FHIR Update (and, at this point, it's safe to say there won't be).  The notion of 'null' in v3 is different in FHIR too - and there's no intention to ever have anything directly the same.  IG authors create extensions for all sorts of things - and they don't necessarily neatly overlap with v3's notion of 'Null flavor'.</p>\n<p>In any event, the notion of 'null flavor' <em>does not belong</em> in MustSupport - it's a different concept and is orthogonal.  You could place constraints on what extensions are allowed for elements that don't need to be supported; and you can have elements that are silent on the use of 'null-like' extensions but are marked as mustSupport.</p>\n<p>So combining the notions of 'what must be supported' vs. 'are null-like extensions allowed' vs. 'who do these rules apply to' is simply not appropriate.  In FHIR, \"Who do these rules apply to\" is covered by the CapabilityStatement.  If the rules are the same for multiple participants, they'll all point to the same profile.  If the rules differ for different participants, then each participant will have it's own profile - and those profiles will have different values for mustSupport, cardinality, invariants, descriptions and any other elements in the profile.</p>\n<p>Replacing natural language with computable content is not something that \"must be possible\".  It's something we <em>could</em> choose to do.  But it's only something we should choose to do if there are clear use-cases for what could be done computably with a statement of \"must display\" vs. \"must store\" vs. \"must allow capture on data entry\", etc.  You haven't shared that yet.</p>\n<p>Note that saying xyz and abc are the only extensions allowed is, generally, really bad practice.  It interferes with re-use as well as future evolution  and generally increases costs for the community.</p>",
        "id": 222766847,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1610651393
    },
    {
        "content": "<p>Here's a crazy idea: what about formalizing some of these rules in the form of <strong>Permission</strong>s?</p>",
        "id": 227161203,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1613906307
    },
    {
        "content": "<p>(\"This entity can read but not write to this part\" is what Permission is supposed to do)</p>",
        "id": 227161209,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1613906342
    },
    {
        "content": "<p>Permission is about what you're <em>allowed</em> to do.  MustSupport is about what you must be <em>able</em> to do.  Not really the same thing...</p>",
        "id": 227169450,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1613915939
    },
    {
        "content": "<p>In IHE we use Must-Support like we have used \"R2\" or \"RE\" in the past. Required If known, but not mandatory. Used to force populating an element when the data are available, but recognizing that many times the data are not available.   The problem we have run into is that a Profile derived off a minimal Profile, where the minimal Profile used Must-Support widely, the derived profile that has stricter mandatory elements ends up with an element marked both Must-Support and Mandatory. This is a conflict as an element can't logically be both mandatory and required if known. One solution would be to allow the Must-Support flag to be removed when the minimal cardinality is increased. As it stands today that is not possible (unless I don't know a trick) . So the best I can do is to define Must-Support in a more complex way, indicating that Must-Support means nothing when minimal cardinality is not zero but otherwise means required if known (R2).</p>",
        "id": 269869648,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643469057
    },
    {
        "content": "<p>I understand that others use Must-Support very differently.. but the rules of Must-Support tell me I can use it any way my IG wants. And IHE find this R2 concept very important, and use Must-Support for it.</p>",
        "id": 269869732,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643469161
    },
    {
        "content": "<p>mustSupport + mandatory are not conflicts.  It's possible to be mandatory with mustSupport=false.  I.e. \"There has to be a value here, but it's fine if you send a hard-coded fixed value, don't store it, don't expose it on your UIs and don't pay any attention to it.\"  If that's not your expectation for a mandatory element, then you need 'required' too.  Mandatory, by itself, is not enough.</p>",
        "id": 269872790,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643472462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> in my definition of Must-Support, which I am allowed to define... R2 is not logical for a mandatory element. You keep applying YOUR definition of must-support to others when your definition is not the only definition.</p>",
        "id": 269879663,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643480199
    },
    {
        "content": "<p>You can't redefine mustSupport in that way.  mustSupport <em>can't</em> reflect anything about cardinality in the instance.  It can only reflect what system is expected to do with the element (display, capture, store, consider in logic, etc.).  If you have a concept that integrates notions of both \"what must be supported\" and \"what must be sent\", then in FHIR, that'll have to be represented as two distinct elements.</p>",
        "id": 269880099,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643480760
    },
    {
        "content": "<p>Where is this stated?</p>\n<blockquote>\n<p>It can only reflect what system is expected to do with the element (display, capture, store, consider in logic, etc.).</p>\n</blockquote>\n<p>I am not expressing cardinality with Must-Support, i am expressing which elements are fully optional to populate, from those that must be populated if the data are available (R2).</p>",
        "id": 269882358,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643483298
    },
    {
        "content": "<p>Population is governed by cardinality and invariants alone.   The <a href=\"https://build.fhir.org/profiling.html#mustsupport\">profiling page</a> makes clear that mustSupport is separate from cardinality.</p>\n<p>If you want data to be populated if it exists, mark it as mustSupport=true.  If you want it to be fully optional mark it as mustSupport=false.  If the element is mandatory, you still need mustSupport if you want the system to actually 'support' the element and, as a sender, not just hardcode a fixed value or, as a receiver, completely ignore the element.  (That's what it means if the element is mandatory and mustSupport=false - there's no requirement to 'support' the element as a receiver at all, and the only support required of a sender is to ensure a value is there - even if there's no slot in any data base, UI, or anything else for it.)</p>",
        "id": 269904520,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643510280
    },
    {
        "content": "<p>The IHE R2 concept is a nice fit with MustSupport, and R2 is not about cardinality. I don't see any problems, 'mandatory' is a different dimension.</p>",
        "id": 269920435,
        "sender_full_name": "René Spronk",
        "timestamp": 1643532320
    },
    {
        "content": "<p>you could create a problem if you define it to be a problem, but it doesn't seem like there's any reason you must define it to be a problem</p>",
        "id": 269964656,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643585373
    },
    {
        "content": "<p>my problem is that as the second and more strict profile is derived off of the first profile. The second profile can increase the cardinality to mandatory,  but can't remove the Must-Support flag.  I want a way to remove the must-support flag.</p>",
        "id": 270035327,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643637712
    },
    {
        "content": "<p>That would be loosening the constraints, which is specifically against how profiles can be defined.</p>",
        "id": 270038088,
        "sender_full_name": "David Pyke",
        "timestamp": 1643638849
    },
    {
        "content": "<p>right... because of an assumption about what an IG might define for must-support. In my case my definition of must-support only applies if the element is not optional cardinality.</p>",
        "id": 270038500,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643639032
    },
    {
        "content": "<p>So, if it's mandatory, you don't have to support it?</p>",
        "id": 270038754,
        "sender_full_name": "David Pyke",
        "timestamp": 1643639135
    },
    {
        "content": "<p>I would update your definition to handle the mandatory use case</p>",
        "id": 270038923,
        "sender_full_name": "David Pyke",
        "timestamp": 1643639204
    },
    {
        "content": "<p>yes, that is the misunderstanding that comes about... a clearly mandatory (cardinality) with a flag that says \"required if known\".</p>",
        "id": 270039025,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643639239
    },
    {
        "content": "<p>Yes, the definition will likely need to be augmented... but I think the need is broader, and thus needs to be considered in the context of future evolution of must-support.</p>",
        "id": 270039238,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643639308
    },
    {
        "content": "<p>Mandatory with mustSupport = false means \"don't need to display, store, or consider\".  Is that what you want?  Because if not, then you <em>need</em> mustSupport=true as well.  Cardinality <em>never</em> says anything about what the system must do with the data - that's always handled with mustSupport.</p>",
        "id": 270046703,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643642001
    },
    {
        "content": "<p>Lloyd, that is YOUR definition of must-support. that is not a universal definition of must-support</p>",
        "id": 270053183,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643644293
    },
    {
        "content": "<p>so how do YOU convey to a sender the \"Required if Known\" concept?</p>",
        "id": 270053690,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643644450
    },
    {
        "content": "<p>Verbally, in the comment</p>",
        "id": 270053990,
        "sender_full_name": "David Pyke",
        "timestamp": 1643644556
    },
    {
        "content": "<p>so then every optional element is considered Required if Known? Which includes all extensions every defined?</p>",
        "id": 270054161,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643644606
    },
    {
        "content": "<p>If you define Optional in the prose of the IG/Profile, then yes.</p>",
        "id": 270054287,
        "sender_full_name": "David Pyke",
        "timestamp": 1643644645
    },
    {
        "content": "<p>I do define Optional as ... optional... a sender does not have any obligation to send optional elements.</p>",
        "id": 270055518,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643644950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span>: <br>\nIs it a requirement to derive from the profile with the MustSupport flags? If not, could you copy-paste the differential and then delete the MustSupports you don't need? </p>\n<p>And I agree with you about MustSupport flags. The spec says:</p>\n<blockquote>\n<p>Labeling an element MustSupport means that implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way. Because the base FHIR specification is intended to be independent of any particular implementation context, no elements are flagged as mustSupport=true as part of the base specification. This flag is intended for use in profiles that have a defined implementation context.</p>\n<p>For this reason, the specification itself never labels any elements as MustSupport. This is done in StructureDefinitions, where the profile labels an element as mustSupport=true. When a profile does this, it SHALL also make clear exactly what kind of \"support\" is required, as this could involve expectations around what a system must store, display, allow data capture of, include in decision logic, pass on to other data consumers, etc. </p>\n</blockquote>\n<p>(<a href=\"https://www.hl7.org/fhir/conformance-rules.html\">https://www.hl7.org/fhir/conformance-rules.html</a>).<br>\nTherefore, if you define it differently than Lloyd, it's alright, as long as you state, how you define it.</p>",
        "id": 270055852,
        "sender_full_name": "Mareike Przysucha",
        "timestamp": 1643645057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"196115\">Mareike Przysucha</span> <a href=\"#narrow/stream/179177-conformance/topic/must-support.20when.20re-profiling/near/270055852\">said</a>:</p>\n<blockquote>\n<p>Is it a requirement to derive from the profile with the MustSupport flags? If not, could you copy-paste the differential and then delete the MustSupports you don't need? </p>\n</blockquote>\n<p>This is what we've done on the Canadian IPS variant--the actual IPS MS flags are too restrictive, so rather than derived profile of IPS, we've developed parallel profiles that let you conform to IPS but don't require it.</p>\n<p>As for R2 or required-if-known, we've made or left elements optional (min cardinality 0), flagged them as MS, and made the definition of MS \"senders shall populate if they have a value\".</p>\n<p>I'm a little confused about how to apply the MS definitions of a parent IG to elements that I flag as MS in my IG, and how my definition of MS applies to elements in parent IGs, but I think that's mostly a separate issue from how to indicate R2.</p>",
        "id": 270063459,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1643647636
    },
    {
        "content": "<p>You can make the definition of mustSupport conditional on cardinality if you like.  You can say that mustSupport says \"must be capable of sending and must transmit if known (and consent and other business rules permit)\".  If an element is mandatory, then that automatically means the 'if' must be true.</p>",
        "id": 270076974,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643652422
    },
    {
        "content": "<p>Cardinality, by itself, has no meaning around mustSupport other than \"must be a value on the wire\".  You <em>can't</em> enforce that it has meaning other than that.  We specifically split off all meaning around \"what systems must do\" behavior-wise into the mustSupport element.</p>",
        "id": 270077225,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643652503
    },
    {
        "content": "<p>My 2CW is that MS is an instruction to designers, whereas cardinality is a mandate for implementers (enforced by the reference libraries) and certainly isn't restricted to 'the wire' as FHIR is increasingly used in the business and persistence layers of applications.</p>",
        "id": 270095736,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1643659373
    },
    {
        "content": "<p>If the purpose of a profile is defined as \"what must be persisted\", then I guess mandatory would apply to that.  But insofar as a profile defines an interface for exchange, if there's no expectation for support, then you can't make <em>any</em> assumptions about UI, persistence, consideration in logic, or subsequent propagation</p>",
        "id": 270105195,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643663377
    },
    {
        "content": "<p>Well, generally speaking, Profiles don't exist in isolation and therefore the encompassing IG(s) may have something to say about these concerns.</p>",
        "id": 270119433,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1643669353
    },
    {
        "content": "<p>IGs can do all sorts of things.  They can say \"every element whose name starts with an 'a' or 'q' must be persisted in its own relational database table\" if they really want to.  But in terms of using elements as they're defined to be used, \"cardinality\" is about \"must this element be present in the instance\" and \"mustSupport\" is about \"what is the system expected to do with respect to the capture, display, storage, use, re-transmission, etc. of the element\".  An element being mandatory in the core spec sets <em>no</em> expectations around capture/display/storage/use/etc.  Interpreting cardinality to mean things that are meant to be communicated by mustSupport is going to cause grief - especially when it comes to dealing with HL7 core elements that are mandatory and with the ability to leverage profiles defined by others.</p>",
        "id": 270120127,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643669685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> you keep saying that, but that is NOT what the spec says.</p>",
        "id": 270120230,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643669742
    },
    {
        "content": "<p>If we want to change must-support to the definition that Lloyd wants it to be defined as.. Fine, then give me a mecahnism to do what R2/RE has been used in Interoperability Implementation Guides for decades. I am writing Interoperability Implementation Guides. I am not writing systems design and user experience documents (SDD, UXDD).</p>",
        "id": 270120490,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643669866
    },
    {
        "content": "<p>how is it different to what the spec says?</p>",
        "id": 270122084,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643670512
    },
    {
        "content": "<p>Lloyd said</p>\n<blockquote>\n<p>\"mustSupport\" is about \"what is the system expected to do with respect to the capture, display, storage, use, re-transmission, etc. of the element\"</p>\n</blockquote>\n<p>Yet there is no mention of \"capture, display, storage, use, or re-transmission\" in the must-support text.<br>\n<a href=\"https://hl7.org/fhir/elementdefinition-definitions.html#ElementDefinition.mustSupport\">https://hl7.org/fhir/elementdefinition-definitions.html#ElementDefinition.mustSupport</a></p>\n<p>all the spec says about mustSupport is that \"Something useful\" </p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;Something useful&quot; is context dependent and impossible to describe in the base FHIR specification. For this reason, tue mustSupport flag is never set to true by the FHIR specification itself - it is only set to true in profiles. A profile on a type can always make musSupport = true if it is false in the base type but cannot make mustSupport = false if it is true in the base type. This is done in Resource Profiles, where the profile labels an element as mustSupport=true. When a profile does this, it SHALL also make clear exactly what kind of &quot;support&quot; is required, as this can mean many things. Note that an element that has the property IsModifier is not necessarily a &quot;key&quot; element (e.g. one of the important elements to make use of the resource), nor is it automatically mustSupport - however both of these things are more likely to be true for IsModifier elements than for other elements.\n</code></pre></div>",
        "id": 270127087,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643673345
    },
    {
        "content": "<p>Lloyd is just filling out 'something useful' with a set of possibly useful things. I don't think that his particular examples made any difference to the underlying fact here, which is that there's a clear and sometimes important difference between must-support = true and false for elements with minimum cardinality = 1</p>",
        "id": 270127455,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643673539
    },
    {
        "content": "<p>I completely don't understand your stated problem here on this subject.</p>",
        "id": 270127512,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643673575
    },
    {
        "content": "<p>Key point - minOccurs&gt;=1, mustSupport=false == element must be present, but neither sender nor receiver need to do anything useful with it.</p>",
        "id": 270127722,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643673647
    },
    {
        "content": "<p>I will try one more time. For example in MHD I have a profile on DocumentReference for \"minimal\" metadata, it has many elements as optional, but they are marked with MustSupport. Where MustSupport is \"required if known\". I then have a \"comprehensive\" profile that is derived off of that minimal metadata and  changes some elements to mandatory (for example, because XDS requires them). These elements happen to have been MustSupport in the minimal metadata profile that this comprehensive profile is derived off of. Thus the comprehensive profile has some elements that are cardionality 0.. with MustSupport (no problem), but also some elements that have cardionality 1.. with MustSupport. It is these second category that are manditory because of the comprhensive profile, but still have MustSupport from the minimal metadata profile.</p>\n<ol>\n<li>One solution is to define MustSupport as \"Please ignore MustSupport if the element is cardionality 1.., otherwise the indicated element must be populated if the sender knows a data value for the element\".  I can define MustSupport this way, it is just really messed up.</li>\n<li>I could just NOT derive comprehensive DocumentReference off of minimal DocumentReference. but this sure makes keeping everything nicely defined and aligned harder.</li>\n</ol>\n<p>Just seems to me that decades of experience by HL7, DICOM, and IHE to use \"Required if Known\", would have something like it ready for use in FHIR. I thought that MustSupport could be that.</p>",
        "id": 270128704,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179177-conformance/topic/must-support.20when.20re-profiling/near/270127722\">said</a>:</p>\n<blockquote>\n<p>Key point - minOccurs&gt;=1, mustSupport=false == element must be present, but neither sender nor receiver need to do anything useful with it.</p>\n</blockquote>\n<p>I do NOT have a receive side problem. I have a need to specify sender (Interoperability) requirements</p>",
        "id": 270128753,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674124
    },
    {
        "content": "<p>so I just don't see at all what needs solving. You seem to think it's somehow bad to say that the minimum cardinality is 1, and that it's also must support. Why?</p>",
        "id": 270128828,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643674183
    },
    {
        "content": "<p>my solution is: leave things as they are</p>",
        "id": 270128894,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643674204
    },
    {
        "content": "<p>I don't see a problem with deriving the comprehensive profile from the minimal one. The minimal one says send these elements if you have them; the comprehensive says you'd better have content for some of those if you want to send it.</p>",
        "id": 270128920,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1643674217
    },
    {
        "content": "<p>so, I have had an implementer read that as ... oh, that manditory item does not need to be sent if I don't have a value to put there.</p>",
        "id": 270128931,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674229
    },
    {
        "content": "<p>MS text doesn't override cardinality.</p>",
        "id": 270128967,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1643674260
    },
    {
        "content": "<p>ummm.... that's insane. doubly so because that would be a possible interpretation of a 1..1 element not marked as RE</p>",
        "id": 270128986,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643674269
    },
    {
        "content": "<p>aka. they saw that MustSupport is more powerful than cardionality 1..</p>",
        "id": 270128992,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674273
    },
    {
        "content": "<p>so you do want 1..1 marked as must-support</p>",
        "id": 270129005,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643674285
    },
    {
        "content": "<p>I do NOT mark 1..1 as must-support</p>",
        "id": 270129028,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674303
    },
    {
        "content": "<p>I think he wants MS to go away if its marked as 1..</p>",
        "id": 270129046,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1643674314
    },
    {
        "content": "<p>so that the wrong interpretation is less insane?</p>",
        "id": 270129102,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643674325
    },
    {
        "content": "<p>because my definition of must-support is \"Required if known\". So clearly that is NOT something to be used with 1..</p>",
        "id": 270129108,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674328
    },
    {
        "content": "<p>why not?</p>",
        "id": 270129128,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643674341
    },
    {
        "content": "<p>it's not incompatible. just possible redundant</p>",
        "id": 270129146,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643674357
    },
    {
        "content": "<p>Required if known and \"must be sent\" aren't mutually exclusive.  Mandatory says \"must be known\".</p>",
        "id": 270129155,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643674361
    },
    {
        "content": "<p>the person interprets 1..1 with MS as... Optional.</p>",
        "id": 270129187,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674381
    },
    {
        "content": "<p>They are wrong then.</p>",
        "id": 270129210,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1643674399
    },
    {
        "content": "<p>exactly</p>",
        "id": 270129211,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674399
    },
    {
        "content": "<p>of course they are wrong</p>",
        "id": 270129226,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674408
    },
    {
        "content": "<p>Ok.  So if the person is wrong, then add some additional guidance that makes it clear they're wrong, don't try to change the methodology...</p>",
        "id": 270129250,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643674425
    },
    {
        "content": "<p>You could beef up your definition of MS to clarify that ...</p>",
        "id": 270129257,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1643674430
    },
    {
        "content": "<p>exactly.</p>",
        "id": 270129267,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1643674435
    },
    {
        "content": "<p>but they are representative of some reader community... so I would prefer to not confuse others... I would rather remove the MS flag when I upgrade the cardionality to 1..</p>",
        "id": 270129282,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191380\">Elliot Silver</span> <a href=\"#narrow/stream/179177-conformance/topic/must-support.20when.20re-profiling/near/270129257\">said</a>:</p>\n<blockquote>\n<p>You could beef up your definition of MS to clarify that ...</p>\n</blockquote>\n<p>read above.. I said that was an option.. but it sure is ugly</p>",
        "id": 270129349,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674469
    },
    {
        "content": "<p>you'll just confuse others</p>",
        "id": 270129357,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643674473
    },
    {
        "content": "<p>If they make that mistake, how many others do they make?</p>",
        "id": 270129364,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1643674479
    },
    {
        "content": "<p>Removing the MS flag says \"it's fine to have no concept of this in your system - hard-code with something and you're fine\".</p>",
        "id": 270129365,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643674479
    },
    {
        "content": "<blockquote>\n<p>\"Please ignore MustSupport if the element is cardionality 1.., otherwise the indicated element must be populated if the sender knows a data value for the element\".</p>\n</blockquote>\n<p>That's a purposefully bad definition. You could instead say:</p>",
        "id": 270129403,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643674503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179177-conformance/topic/must-support.20when.20re-profiling/near/270129365\">said</a>:</p>\n<blockquote>\n<p>Removing the MS flag says \"it's fine to have no concept of this in your system - hard-code with something and you're fine\".</p>\n</blockquote>\n<p>I don't follow you... there are indeed some 1..1 that are hardcoded for a given IG and use-case.</p>",
        "id": 270129427,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674520
    },
    {
        "content": "<p>That, presumably, isn't what you want.  ibid - keep MS and make clear that MS + min&gt;0  means \"Definitely NOT optional\"</p>",
        "id": 270129448,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643674534
    },
    {
        "content": "<p>really, really, not optional</p>",
        "id": 270129485,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674558
    },
    {
        "content": "<p>like I said... I can document my way out of this.</p>",
        "id": 270129557,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674584
    },
    {
        "content": "<p>\"Some elements marked as must-support have a minimum cardinality of 1, so that they must be sent. This combination indicates that other variants of the same profile, they are marked as RE, but this label in addition to a minimum cardinality of 1 makes it explicitly clear that the value in the element SHALL come from a stored value, not some aribitrarily added fixed value to meet the cardinality requirements\"</p>",
        "id": 270129582,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643674607
    },
    {
        "content": "<p>but how many others really need R2/RE... just want this on the stack of iprovement opportunities for next generation beyond mustsupport</p>",
        "id": 270129633,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674650
    },
    {
        "content": "<p>because I have absolutely seen engineers hack fixed values into minimum cardinality elements, and then claim that there's nothing to say that they can't. Clinical Safety be damned.</p>",
        "id": 270129636,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1643674652
    },
    {
        "content": "<p>well, as I said.. there are some hardcoded 1..1... take a look at BloodPressure, that hard codes a specific LOINC code</p>",
        "id": 270129733,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674690
    },
    {
        "content": "<p>As an example, I have some profiles where I'll have min=1, mustSupport=false on MedicationRequest.intent.  The context is \"this is always a prescription, it must always be a prescription\".  Therefore, it's totally fine if the system can't capture, display, store, or do anything useful with MedicationRequest.intent.  Profile sets a fixed value for it.  All the normal rules that go with \"mustSupport\" don't apply to that element.  So it's meaningful to say mustSupport=false there.  However, MedicationRequest.medication is also 1..1.  And that's definitely mustSupport=true.  Which means there are expectations around actually supporting the concept in their system, letting users capture it, see it, etc.</p>",
        "id": 270129742,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643674696
    },
    {
        "content": "<p>I get that your definition of MustSupport fits you well.. and overall I  like it... but I need R2/RE concept, and your MustSupport does not help with that need.</p>",
        "id": 270129840,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643674771
    },
    {
        "content": "<p>It works just fine.  \"must send if have\" works fine with \"must have\".  If you've got no requirements about display, capture, store - so be it.</p>",
        "id": 270129956,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1643674824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/179177-conformance/topic/must-support.20when.20re-profiling/near/270128992\">said</a>:</p>\n<blockquote>\n<p>aka. they saw that MustSupport is more powerful than cardionality 1..</p>\n</blockquote>\n<p>I expect they will always choose the more convenient rule as the more powerful.</p>",
        "id": 270130020,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1643674882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/179177-conformance/topic/must-support.20when.20re-profiling/near/270129733\">said</a>:</p>\n<blockquote>\n<p>well, as I said.. there are some hardcoded 1..1... take a look at BloodPressure, that hard codes a specific LOINC code</p>\n</blockquote>\n<p>Right, MS and 1..1, and the presence of that code is what identifies the resource as meeting the  BP  profile, so it makes perfect sense to have it both hard-coded and MS.</p>",
        "id": 270130199,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1643674983
    },
    {
        "content": "<p>Put a table in the docco like<br>\n<a href=\"/user_uploads/10155/BACE_tFQLKPa9kkDI3xcnuJn/image.png\">image.png</a>     </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/BACE_tFQLKPa9kkDI3xcnuJn/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/BACE_tFQLKPa9kkDI3xcnuJn/image.png\"></a></div><table>\n<thead>\n<tr>\n<th></th>\n<th>min card = 0</th>\n<th>min card &gt; 0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MS=false</td>\n<td>not needed, not processed</td>\n<td>supply, not processed</td>\n</tr>\n<tr>\n<td>MS=true</td>\n<td>supply if available, is processed</td>\n<td>supply, is processed</td>\n</tr>\n</tbody>\n</table>",
        "id": 270131527,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1643675759
    },
    {
        "content": "<p>I would change the first row as:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MS != True</td>\n<td>not required, may not be processed</td>\n<td>supply, may not be processed</td>\n</tr>\n</tbody>\n</table>\n<p>It is up to the consumer to decide if they want to process it.</p>",
        "id": 271722107,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1644718911
    },
    {
        "content": "<p>Better to say \"need not be processed\" as \"may not be processed\" is the form of a command to not process</p>",
        "id": 271770409,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1644793187
    }
]