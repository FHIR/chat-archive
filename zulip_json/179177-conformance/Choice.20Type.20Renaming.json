[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> --choice type renaming has has come up in several threads (<a href=\"#narrow/stream/179190-united-states/topic/Non-conformant.20element.20ids/near/248173375\">here</a> in August and <a href=\"#narrow/stream/179252-IG-creation/topic/Odd.20IG.20broken.20link.20build.20issue.20with.20choice.20data.20elements/near/255099178\">here</a> just today) -- but I feel we still have not come to resolution on it.  Can you clarify whether or not you can use choice type renaming in a differential element's <code>id</code> and/or <code>path</code>?</p>\n<p>For example, if I want to add a value set binding to <code>Observation.value</code>'s <code>CodeableConcept</code> type, is this allowed in the differential?</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  &quot;id&quot;: &quot;Observation.valueCodeableConcept&quot;,\n  &quot;path&quot;: Observation.valueCodeableConcept&quot;,\n  // rest of element\n}\n</code></pre></div>\n<p>The <a href=\"http://fire.ly\">fire.ly</a> blog on <a href=\"https://fire.ly/blog/type-slicing-in-fhir-r4/\">Type Slicing in R4</a> describes the whole concept of choice type renaming, indicating that it <em>is</em> supported in FHIR R4:</p>\n<blockquote>\n<p>In FHIR R4, choice type element renaming is only allowed in the StructureDefinition.differential component, as a shortcut notation. When generating the StructureDefinition.snapshot component, renamed choice type element constraints are normalized to the regular slicing syntax, reverting the new element name back to the original name with [x] suffix (e.g. value[x]) and initializing the slice name from the new element name (e.g. valueString).</p>\n</blockquote>\n<p>In addition, several core profiles use choice type renaming in their differential <code>id</code>s and <code>path</code>s.  For example, the <a href=\"http://hl7.org/fhir/R4/bodyweight.profile.json.html\">BodyWeight</a> profile contains this element in the differential:</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  &quot;id&quot; : &quot;Observation.valueQuantity&quot;,\n  &quot;path&quot; : &quot;Observation.valueQuantity&quot;\n}\n</code></pre></div>\n<p>I haven't found this explicitly discussed in the spec except in passing in <a href=\"http://hl7.org/fhir/R4/elementdefinition.html#typesx\">section 2.30.0.4.2</a>:</p>\n<blockquote>\n<p>The inclusion of a type specific path (such as \"Patient.deceasedBoolean\") SHALL NOT be interpreted as constraining allowed types, but instead, it constrains the use of a particular type</p>\n</blockquote>\n<p>Note that the above was <em>added</em> in R4, so it is not just a remnant of previous versions.</p>\n<p>Last, when the IG Publisher encounters StructureDefinitions that use this choice type renaming in the differential, it <em>does</em> correctly \"normalize\" them to the full ids/paths in the snapshot (according to the approach documented in the <a href=\"http://fire.ly\">fire.ly</a> blog above).</p>\n<p>Based on these things (<a href=\"http://fire.ly\">fire.ly</a> blog, use in multiple core profiles [<em>and</em> many IGs], mention of it in the spec, and explicit behavior supporting it in the IG Publisher), I think that this may be an <em>intended</em> feature that is poorly documented.  <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>, however, says that he doesn't think it is supported (anymore?).  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> - do you have any insight on this topic?  SUSHI uses type renaming and if it's wrong, I need to fix it.</p>",
        "id": 255140867,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1632787947
    },
    {
        "content": "<p>Does a definitive answer to this question exist?  Or is it going unanswered because nobody actually knows for sure?</p>",
        "id": 255970667,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1633286595
    },
    {
        "content": "<p>it's on my todo list</p>",
        "id": 255975110,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1633290641
    },
    {
        "content": "<p>I think this is the issue that set this in motion: <a href=\"https://jira.hl7.org/browse/FHIR-12259\">https://jira.hl7.org/browse/FHIR-12259</a></p>",
        "id": 256256850,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1633444710
    },
    {
        "content": "<ol>\n<li>\n<p>A type choice element must remain in the profile snapshot as-is and will be interpreted as applying to all instances of the element regardless of type.</p>\n</li>\n<li>\n<p>Constraints limiting the acceptable list of types must be applied to the original \"[x]\" element as this is where the list of acceptable types is defined. The inclusion of a type specific path (such as \"Patient.deceasedBoolean\" shall not be interpreted as constraining allowed types).</p>\n</li>\n<li>\n<p>Type choice elements are treated as being implicitly sliced by type with the slice names that are displayed in the standard documentation (e.g. deceasedBoolean is the boolean slice of deceased[x]).</p>\n</li>\n<li>\n<p>Constraints applied to a named type slice apply only to instances of that type. For instance, an element in a profile with name \"deceasedBoolean\" constrains only boolean instances of the deceased[x] element. Note that this is simply the normal behavior of a slice.</p>\n</li>\n<li>\n<p>Paths to the type slices may directly use the type slice name (path=\"Patient.deceasedBoolean\") or may use the slice form (path=\"Patient.deceased[x]\", name=\"deceasedBoolean\").</p>\n</li>\n</ol>",
        "id": 256257320,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1633444846
    },
    {
        "content": "<p>But it did miss the R3 timeline, and Michel implemented in R4.</p>",
        "id": 256257396,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1633444875
    },
    {
        "content": "<p>What is the answer to this?  I have a tracker whose outcome depends on it:  <a href=\"https://jira.hl7.org/browse/FHIR-33233\">https://jira.hl7.org/browse/FHIR-33233</a> ?</p>\n<p>Should</p>\n<p>\"id: \"Extension.extension:ombCategory.valueCoding\"</p>\n<p>be</p>\n<p>id: \"Extension.extension:ombCategory.value[x]:valueCoding\"  ?</p>",
        "id": 258120499,
        "sender_full_name": "Eric Haas",
        "timestamp": 1634601417
    },
    {
        "content": "<p>Latter</p>",
        "id": 258128039,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1634607290
    },
    {
        "content": "<p>I know this has always been <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>'s view on this, but there is enough inconsistency in the spec regarding this that it  was on <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>'s TODO list for further investigation.  Grahame -- if we want to adopt Lloyd's position on this, that's fine, I just want to know so that we can update SUSHI.  If we do adopt this view (that choice type renaming is no longer valid) then this affects several of the Vital Signs profiles in FHIR core since they <em>do</em> use choice type renaming (which also may affect <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> since I think US Core points to these vital signs profiles as well).</p>",
        "id": 258186065,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1634646760
    },
    {
        "content": "<p>Hopefully we can get this resolved before too long. This is also causing build errors on an IG (Da Vinci Formulary) we are looking to ballot this cycle.<br>\n<a href=\"https://build.fhir.org/ig/HL7/davinci-pdex-formulary/branches/stu2-draft/qa.html#internal\">https://build.fhir.org/ig/HL7/davinci-pdex-formulary/branches/stu2-draft/qa.html#internal</a></p>",
        "id": 258467167,
        "sender_full_name": "Corey Spears",
        "timestamp": 1634776358
    },
    {
        "content": "<p>I think the decision was again reaffirmed: <a href=\"https://jira.hl7.org/browse/FHIR-33233\">https://jira.hl7.org/browse/FHIR-33233</a></p>",
        "id": 259280420,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1635357646
    },
    {
        "content": "<p>The element ids <em>must</em> be <code>value[x]:valueCoding</code> form. Also, there is no distinction in the spec between the differential and snapshot forms, regardless of the blog post.</p>",
        "id": 259280600,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1635357721
    },
    {
        "content": "<p>OK.  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> was also going to think on this.  Grahame, do you agree that the resolution to the US Core issue linked above applies to all of FHIR?  E.g., using choice type renaming is <em>not</em> allowed in FHIR profiles/extensions?  If so, then:</p>\n<ul>\n<li>The SUSHI team needs to fix SUSHI to stop using choice type renaming.</li>\n<li>The firely team should provide a disclaimer on their blog article saying it is no longer true.</li>\n<li>We should file tickets to fix the following profiles in core FHIR that  use choice type renaming: <code>cdshooksguidanceresponse</code>, <code>devicemetricobservation</code>, <code>resprate</code>, <code>oxygensat</code>, <code>heartrate</code>, <code>headcircum</code>, <code>bp</code>, <code>bodyweight</code>, <code>bodytemp</code>, <code>bodyheight</code>, <code>bmi</code>, <code>cholesterol</code>, <code>triglyceride</code>, <code>hdlcholesterol</code>, <code>ldlcholesterol</code>.</li>\n<li>We should file a ticket to remove the reference to <code>Patient.deceasedBoolean</code> in <a href=\"http://hl7.org/fhir/R4/elementdefinition.html#typesx\">section 2.30.0.4.2</a> and anywhere else choice type renaming is referred to in the spec.</li>\n<li>We should file a ticket to have the IG Publisher warn or error on use of choice type renaming (although, I think that at least for now the functionality to handle it in IG Publisher should remain intact).</li>\n</ul>",
        "id": 259379779,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1635423872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191351\">Chris Grenz</span> <a href=\"#narrow/stream/179177-conformance/topic/Choice.20Type.20Renaming/near/259280600\">said</a>:</p>\n<blockquote>\n<p>The element ids <em>must</em> be <code>value[x]:valueCoding</code> form. Also, there is no distinction in the spec between the differential and snapshot forms, regardless of the blog post.</p>\n</blockquote>\n<p>As far as I remember we have a difference between differential and snapshot. See <a href=\"#narrow/stream/179177-conformance/topic/Slicing.20a.20non-repeating.20element/near/167975569\">https://chat.fhir.org/#narrow/stream/179177-conformance/topic/Slicing.20a.20non-repeating.20element/near/167975569</a></p>",
        "id": 259384300,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1635426101
    },
    {
        "content": "<p>Which systems can't currently handle choice type renaming? We have support for it in SUSHI, IG Publisher and the .NET SDK, right?</p>",
        "id": 259384815,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1635426345
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> above that it <strong>should</strong> be changed as proposed in the tickets, but breaking all these implementations seems not a good way forward to me. Especially given the fact that sooner or later someone wants to have the same behaviour in .NET and the support would need to be removed there as well.</p>",
        "id": 259385427,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1635426634
    },
    {
        "content": "<blockquote>\n<p>Based on these things (<a href=\"http://fire.ly\">fire.ly</a> blog, use in multiple core profiles [and many IGs], mention of it in the spec, and explicit behavior supporting it in the IG Publisher), I think that this may be an intended feature that is poorly documented. Lloyd McKenzie, however, says that he doesn't think it is supported (anymore?). Grahame Grieve - do you have any insight on this topic? SUSHI uses type renaming and if it's wrong, I need to fix it.</p>\n</blockquote>\n<p>So, this behaviour has been discussed, decided on, been made part of a normative section of the spec, has been blogged about and implemented. Why would we remove it?</p>",
        "id": 259967146,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1635843160
    },
    {
        "content": "<p>Reading the history of the issue, it seems there are two major points:</p>\n<ul>\n<li>Whether there are bugs in its implementation (no value[x] generated in the snapshot to allow all other types)</li>\n<li>Whether the id needs to follow the pattern of the path (and Chris is wondering what the advantage of a shortcut notation is if you need to fully expand it in the id)</li>\n</ul>\n<p>I have missed where it says we should retract the choice type renaming (as Chris discusses in his Oct 28th post) (\"do you agree that the resolution to the US Core issue linked above applies to all of FHIR? E.g., using choice type renaming is not allowed in FHIR profiles/extensions?\").</p>\n<p>I wish we could just sit together behind a whiteboard!</p>",
        "id": 259968963,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1635844311
    },
    {
        "content": "<p>see comments here: <a href=\"#narrow/stream/179252-IG-creation/topic/Odd.20IG.20broken.20link.20build.20issue.20with.20choice.20data.20elements\">https://chat.fhir.org/#narrow/stream/179252-IG-creation/topic/Odd.20IG.20broken.20link.20build.20issue.20with.20choice.20data.20elements</a></p>",
        "id": 261084717,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1636597068
    },
    {
        "content": "<p>Thanks again, Grahame.  We'll add a task to update SUSHI to stop using choice type renaming in a future version.  At that point, it will always use the full form slice syntax for the <code>id</code> and original choice[x] path for the <code>path</code>.  This will affect the output of many IGs, but should be safe since it's effectively saying the same thing.</p>",
        "id": 261299651,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1636745377
    },
    {
        "content": "<p>So, copying the summary from that thread:</p>\n<blockquote>\n<p>We will follow through on your guidance and update SUSHI so that it always uses the full slice syntax in choice ids when creating the differential (e.g., Observation.value[x]:valueQuantity rather than just Observation.valueQuantity). We'll also avoid things like Observation.valueQuantity in the ElementDefinition path, and prefer simply Observation.value[x].</p>\n</blockquote>\n<p>Let me double check: </p>\n<ul>\n<li>this means you could still use type renaming in the differential, but SUSHI will not use it, so the differential will use the path <code>value[x]</code>  instead?</li>\n<li>Grahme's snapshot generator will (at some point)  generate the <code>value[x]</code> in the snapshot to allow other types <em>if</em> a type rename is used in the differential?</li>\n</ul>",
        "id": 261618385,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1637056711
    },
    {
        "content": "<p>My take was that <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> said you can \"continue to get away with\" using choice type renaming, but the \"correct\" form is the long form, and that is what is \"guaranteed to work\".  So it seems a pretty strong stance in favor of always using the long form.</p>\n<p>As for the snapshot generator, I thought it already was doing the right thing w/ choice type renaming now (particularly since he fixed the link anchor generation bug).</p>",
        "id": 261638266,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1637068563
    },
    {
        "content": "<p>I'm not exactly sure what this means:</p>\n<blockquote>\n<p>Grahme's snapshot generator will (at some point) generate the value[x] in the snapshot to allow other types if a type rename is used in the differential?</p>\n</blockquote>",
        "id": 261685425,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1637087428
    },
    {
        "content": "<p>\"continue to get away with\" ;-)    Good, so we don't need to remove code then - it's just Forge that might need to change policies on how to write differentials in a \"guaranteed to work\" way!</p>",
        "id": 261716807,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1637101823
    }
]