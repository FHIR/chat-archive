[
    {
        "content": "<p>When building a logical model, how could one describe an identifier with an implicit system?</p>\n<p>Instance data - mrn is an identifier of \"<a href=\"http://my.co/sid/MRN\">http://my.co/sid/MRN</a>\"</p>\n<div class=\"codehilite\"><pre><span></span><code>{ mrn: &#39;1234&#39; }\n</code></pre></div>\n<p>Logical model element:</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  path: &#39;Member.mrn&#39;,\n  type:[{\n    code:&quot;string&quot;  // or identifer?? or something?\n   }]\n}\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 230109462,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1615587827
    },
    {
        "content": "<p>If it was terminology and the system was implicit, I could use <code>code</code> and bind it. But that's also not quite right since the ValueSet would only contain all the codes from the system rather than actually <strong>being</strong> the system.</p>",
        "id": 230110034,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1615588136
    },
    {
        "content": "<p>Does this apply somehow? <a href=\"http://hl7.org/fhir/extension-elementdefinition-identifier.html\">http://hl7.org/fhir/extension-elementdefinition-identifier.html</a></p>\n<p>I think not...</p>",
        "id": 230110973,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1615588595
    },
    {
        "content": "<p>I've represented those as strings in my logical model.  in the actual mapping to FHIR, they'll get turned into Identifiers with a constraint on the system</p>",
        "id": 230115263,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1615591338
    },
    {
        "content": "<p>You can declare a logical data type. FHIR data types are physical data types, so they bring along a set of implementation constraints.</p>",
        "id": 230154378,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1615632187
    },
    {
        "content": "<p>I think the people who spoke before me are more expert in logical models than I am, so what they said.  Each gave you different options, and what you choose probably depends on what you're trying to accomplish with the LM and who your audience is.  For some uses, just the fact that the field is named <code>mrn</code> might be enough (if your audience know what that implies) -- so Jean's approach would make sense.  For others, you might want to make things more explicit, in which Jose's approach might make more sense.  You could also take an approach we see in some profiles and use <code>Identifier</code> type, then fix the <code>Member.mrn.system</code> to <code>http://my.co/sid/MRN</code> -- but then, as Jose said, you're taking on all the other implications of <code>Identifier</code>, which you may or may not want.</p>",
        "id": 230342453,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615814457
    },
    {
        "content": "<p>I'm pushing the boundaries a bit I think, trying to describe a physical schema with FHIR logical models and hoping to get the full FHIR semantics. <code>mrn</code> should be interpreted as <code>Identifier.value</code> of a non-materialized <code>Identifier</code> with a fixed <code>system</code>. So basically as you describe <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> , but explicitly tieing <code>Member.mrn</code> to <code>Member.mrn.value</code>.</p>\n<p>Stepping back a bit, isn't this something pretty common in logical modeling of mapping sources? Any time you have a \"flat\" structure, you need to logically construct what FHIR uses complex types for, especially Identifier and Concept, but also HumanName, Address, etc. For example, a SQL table with 5 columns for home address (line1, line2, city, state, zip) and another 5 for work address. It would be good to have a logical construct to attach the first five into an Address instance and the second 5 into another Address instance.</p>",
        "id": 230358362,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1615820319
    },
    {
        "content": "<p>Which seems like a mapping problem, but I think could be viewed as just a definition.</p>",
        "id": 230362700,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1615821610
    },
    {
        "content": "<p>I could definitely see you modelling that in a logical model as two Address instances or as two BackboneElements with five strings.  It depends on how \"abstract\" you want to get with your model.  Here's an example of what I was saying about identifiers:  <a href=\"http://build.fhir.org/ig/HL7/fhir-spl/branches/main/StructureDefinition-EstablishmentRegistrationLogicalModel.html\">http://build.fhir.org/ig/HL7/fhir-spl/branches/main/StructureDefinition-EstablishmentRegistrationLogicalModel.html</a>   I have two different identifiers represented as strings because they are fixed as an Organization's DUNS number and an Organization's FDA Establishment Identifier.   Even though I have a subset of Address elements that are actually exchanged, we decided to still represent that as the FHIR Address type because we thought we could expand the scope of what we are exchanging.  So we used Address and ContactPoint for that.</p>",
        "id": 230373908,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1615824807
    }
]