[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> I have committed the specification changes for <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12259\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12259\">GF#12259</a>. I'm now starting to work on the snapshot generator changes for it</p>",
        "id": 153937312,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518593208
    },
    {
        "content": "<p>.. and it's just too much work. I'll get back to it. But we'll have to think very carefully about how this works - it's basically a breaking change for the tooling across versions</p>",
        "id": 153937500,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518649352
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, I think that the current .NET API snapshot generator for STU3 (&amp; Forge) implement most of this behavior already. However Ewout will probably have to update the .NET validator for R4 according to the new rules.</p>",
        "id": 153937655,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1518689644
    },
    {
        "content": "<p>I don't know whether I'm going to get the change done; I've just run into a couple of other massive changes</p>",
        "id": 153937659,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518691967
    },
    {
        "content": "<p>If you'd like, we could create/identify some useful (STU3) test profiles, then generate and compare our snapshots, to identify any remaining differences/ambiguities.</p>",
        "id": 153937664,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1518692781
    },
    {
        "content": "<p>well, we already have the snapshot test suite. I wish that you guys would use that test suite</p>",
        "id": 153937669,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518696001
    },
    {
        "content": "<p>Indeed, we should. I submitted a change request, to remind myself:<br>\n<a href=\"https://github.com/ewoutkramer/fhir-net-api/issues/539\" target=\"_blank\" title=\"https://github.com/ewoutkramer/fhir-net-api/issues/539\">https://github.com/ewoutkramer/fhir-net-api/issues/539</a></p>",
        "id": 153937676,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1518696440
    },
    {
        "content": "<blockquote>\n<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, I think that the current .NET API snapshot generator for STU3 (&amp; Forge) implement most of this behavior already. However Ewout will probably have to update the .NET validator for R4 according to the new rules.</p>\n</blockquote>\n<p>Do we?  The validator does not, but since you are maintaining the snapshotgenerator, you probably are more aware of what needs to be done!</p>",
        "id": 153937686,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1518699503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span>, if I remember correctly from a while ago when I updated this logic, Chris' proposal introduces breaking changes in the _interpretation_ of type slices, but does not affect the rules for merging constraints in snapshots. For example, constraints on value[x] are merged with base profile constraints on value[x], and constraints on valueBoolean are merged with base constraints on valueBoolean. Also, the snapshot generator emits element id's for type slices of the form \"...value[x]:valueBoolean\", conforming to Chris' proposal.</p>",
        "id": 153937689,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1518699840
    },
    {
        "content": "<p>Maybe...but you could now get  valueBoolean, valueString, value[x] - if you already implemented that....that's nice....but also means the snapshot generator would be able to generate snapshots that the validator would not know how to handle currently...</p>",
        "id": 153937696,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1518700451
    },
    {
        "content": "<p>I documented it as nothing to do with slicing</p>",
        "id": 153937699,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518700605
    },
    {
        "content": "<p>The gForge tracker says: \"Type choice elements are treated as being implicitly sliced by type\"  - I guess Michel was referring to that.</p>",
        "id": 153937704,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1518700957
    },
    {
        "content": "<p>Forge STU3 already allows you to define type slices and specify separate (child) constraints per type, so I guess that part is also covered. However currently when you slice an element, Forge hides the default child elements, so you cannot author constraints on children of the slice introduction element. Instead, Forge displays concrete named slices as child nodes of the slice introduction. This is a UI design issue, currently we deliberately hide some complexity to keep the application somewhat \"user friendly\". Still thinking about how to introduce this functionality without cluttering the UI and/or confusing users.</p>",
        "id": 153937706,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1518701205
    },
    {
        "content": "<p>I know the task talks about slicing, but once these changes have been made, there's no reason to connect constraining choice types with slicing</p>",
        "id": 153937890,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518725763
    },
    {
        "content": "<p>Disagree - you can't slice a value[x] - it's already sliced. You must reslice one of the specific types (valueBoolean/myReslice).</p>",
        "id": 153938073,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1518752355
    },
    {
        "content": "<p>The proposal states: \"Type choice elements are treated as being implicitly sliced by type\".<br>\nDoes \"implicit\" imply that choice type element definitions in core resource definitions will NOT explicitly specify a slice component, however processing logic should act like there is a slice component with discriminator = \"type\"?</p>",
        "id": 153938224,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1518793198
    },
    {
        "content": "<p>they will not explicitly specify slice components. And neither will profiles</p>",
        "id": 153938267,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518810870
    }
]