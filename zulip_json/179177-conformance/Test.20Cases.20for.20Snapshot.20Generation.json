[
    {
        "content": "<p>Somehow, at least one signficant error was not picked up in the QA process for release 3. We're going to have to do a technical correction for it. </p>",
        "id": 153879602,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490308507
    },
    {
        "content": "<p>I'm working on a set of test cases for snapshot generation. Right now, they have the following form:</p>",
        "id": 153879603,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490308523
    },
    {
        "content": "<p>- a test script, with a series of operations<br>\n- each operation is $snapshot, with a differential provided, referring directly to to a base definition or to one o the other profiles in the test script <br>\n- for each operation, there's a series of fhirpath statements that must be true about the snapshot</p>",
        "id": 153879604,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490308610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> is this something that you would support in the C# context? @hat about <span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> ?</p>",
        "id": 153879605,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490308636
    },
    {
        "content": "<p>Unfortunately I don't have a fluentpath parser working...what's the error?</p>",
        "id": 153879791,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1490568675
    },
    {
        "content": "<p>not sure how to describe it yet</p>",
        "id": 153879793,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490578782
    },
    {
        "content": "<p>So an arcane and deeply technical arising out of these tests. </p>",
        "id": 153879956,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490649527
    },
    {
        "content": "<p>Should you be able to walk into a type in a differential without explicitly doing so </p>",
        "id": 153879957,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490649551
    },
    {
        "content": "<p>to illustrate, you might decide to profile Patient, and walk into the identifier:</p>",
        "id": 153879958,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490649569
    },
    {
        "content": "<p>so you have a differential like this:<br>\nPatient<br>\nPatient.identifier<br>\nPatient.identifier.system fixed = [some URL]</p>",
        "id": 153879959,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490649594
    },
    {
        "content": "<p>but should you be allowed to have a differential like this:</p>",
        "id": 153879960,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490649605
    },
    {
        "content": "<p>Patient.identiifer.system fixed = [some URL]</p>",
        "id": 153879961,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490649634
    },
    {
        "content": "<p>e.g. just jump straight into the deep path</p>",
        "id": 153879962,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490649651
    },
    {
        "content": "<p>My answer is \"sure\" - unless there's a reason why from a tooling perspective that's problematic.</p>",
        "id": 153879980,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1490654246
    },
    {
        "content": "<p>What additional information does having a \"bare\" element in the differential with the path \"Patient.identifier\" provide to the tooling - or anything else?</p>",
        "id": 153879981,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1490654285
    },
    {
        "content": "<p>Perhaps it makes rendering easier?</p>",
        "id": 153879983,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1490654325
    },
    {
        "content": "<p>it's related to the sequence of thought in the snapshot generation - you're walking the sequence in the base, looking for profiling in the differential</p>",
        "id": 153879984,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490654495
    },
    {
        "content": "<p>then, having found something, you look at whether you walk into that</p>",
        "id": 153879985,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490654513
    },
    {
        "content": "<p>I have no objection to requiring it.  As you recently pointed out to me, we have to do it if there's a sliceName on the parent.  Requiring regardless of whether there's a sliceName would make things consistent.</p>",
        "id": 153879987,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1490655884
    },
    {
        "content": "<p>figured out to do it in the tools</p>",
        "id": 153879995,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490661174
    },
    {
        "content": "<p>Sure, though I'd love to have the .NET/Java snapshot generators closely aligned (we discussed the current differences), so I can run a compare over all differentials/snapshots in the build.  Sure this won't hit every code path but would catch things we don't think about creating fhirpath statements!</p>",
        "id": 153880049,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1490698346
    },
    {
        "content": "<p>\"Should you be able to walk into a type in a differential without explicitly doing so\"<br>\nThe .NET snapshot generator first completes the differential by adding missing parent elements before further processing. As Lloyd mentions, parent elements with a slice name must always be included. But the diff does not strictly need to include unnamed parent elements.</p>",
        "id": 153880227,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1490779060
    },
    {
        "content": "<p>IMO, there should be no requirement in a differential to include anything you're not changing.  Sounds like that's where this thread already is though, so, um.. ditto? ;)</p>",
        "id": 153880296,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1490814267
    },
    {
        "content": "<p>Differentials do need to include elements with slice names to provide context for child elements - because we can't rely on ids for navigation.  So it's not true that the *only* time elements appear in differential is when you're chainging something</p>",
        "id": 153880301,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1490815934
    },
    {
        "content": "<p>We can't rely on ids for navigation? Why not...that was the whole point!</p>",
        "id": 153880303,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1490816033
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhir/elementdefinition.html#id\" target=\"_blank\" title=\"http://hl7.org/fhir/elementdefinition.html#id\">http://hl7.org/fhir/elementdefinition.html#id</a> makes me think we can</p>",
        "id": 153880304,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1490816109
    },
    {
        "content": "<p>I agree though that a *new* slice can't be introduced only via the id since the sliceName element must be set at the slice root.</p>",
        "id": 153880305,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1490816195
    },
    {
        "content": "<p>But I define a slice in Profile A and then create Profile B based on Profile A, I needn't restate the slice root to modify a sub-element of the slice:</p>\n<p><strong>Profile A differential:</strong><br>\nPatient.identifier (slicing)<br>\nPatient.identifier:mrn (sliceName)</p>\n<p><strong>Profile B differential:</strong><br>\nPatient.identifier:mrn.type.coding.code (constraint)</p>",
        "id": 153880306,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1490816386
    },
    {
        "content": "<p>I didn't think we had mandated that.  Will let <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> respond because he'd been the one who was reluctant</p>",
        "id": 153880314,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1490816773
    },
    {
        "content": "<p>There's SHALLs on existence and format.  I think it's done (although I'm always happy to hear Grahame out!).</p>",
        "id": 153880315,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1490816847
    },
    {
        "content": "<p>actually, what we didn't mandate is that an ElementDefinition has an id. I'm populating the Ids whenever I see them, but we have not said that differentials SHALL contain ids. And when they don't, you can't infer them correctly unless the slice is defined </p>",
        "id": 153880316,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490817139
    },
    {
        "content": "<p>\"In addition to the path, every ElementDefinition SHALL have a populated id,\"</p>",
        "id": 153880317,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1490817193
    },
    {
        "content": "<p>oh. so we did? </p>",
        "id": 153880318,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490817207
    },
    {
        "content": "<p>yep</p>",
        "id": 153880319,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1490817214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> is forge populating the ids for R3?</p>",
        "id": 153880320,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1490817230
    },
    {
        "content": "<p>The Snapshot generator in the .NET API for STU3 will generated element id's according to the proposed format. Forge for STU3 will also support this. However I doubt that it's safe to assume that input profiles will always have element id's in the canonical format. So I'm aiming for our implementations to gracefully handle missing element id's.</p>",
        "id": 153880377,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1490861850
    },
    {
        "content": "<p>Certainly within HL7 when authoring by hand or with spreadsheets, we don't populate ids in the differential.  Those ids all get assigned as part of the snapshot generation process</p>",
        "id": 153880413,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1490897874
    },
    {
        "content": "<p>Some of my tooling makes up for missing ids, but in STU3, missing ids in snapshot or differential is non-conformant and should be treated as such.</p>",
        "id": 153880431,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1490900751
    },
    {
        "content": "<p>Given that they can be generated - and are easy enough to mess up, I really don't want them mandated in the differential if no snapshot is present.  Creating profiles by hand is enough of a pain as it is.  (And until the tools are robust enough to handle all the edge cases, we need to support hand-edited profiles.)</p>",
        "id": 153880435,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1490900924
    },
    {
        "content": "<p>I'd argue that mandating ids relieves the complexity of relying on ordering in tooling and actually makes the profiles <strong>easier</strong> to hand-edit.  IMHO...</p>",
        "id": 153880441,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1490901876
    }
]