[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <br>\nI want Composition.section.entry to specify slices for profiled observations. So I sliced Composition.section.entry by pattern:resolve().code.coding. </p>\n<p>I also want to require each observation to have a particular code, but allow others, so I sliced Observation.code.coding by pattern:$this and made the slice with my preferred code 1..1.</p>\n<p>See structuredefinition-ncdhc-composition-estimated-date-birth.json in <a href=\"https://github.com/RichardTON/au-fhir-childhealth/tree/906a32c580d55c369319b003393bb3dcfcb37f39\" target=\"_blank\" title=\"https://github.com/RichardTON/au-fhir-childhealth/tree/906a32c580d55c369319b003393bb3dcfcb37f39\">https://github.com/RichardTON/au-fhir-childhealth/tree/906a32c580d55c369319b003393bb3dcfcb37f39</a></p>\n<p>My examples throw a \"Could not match discriminator \" error.  See ncdhc-estimated-date-birth-document-example.json</p>\n<p>I think that the validator should allow this.</p>\n<p>If I change the observation to eliminate slicing Observation.code.coding by pattern:$this and only allow the one coding, without alternates, my example validates. See <a href=\"https://github.com/RichardTON/au-fhir-childhealth/tree/b00dcfdaf307315f77d1c14efde80ce449ca5c20\" target=\"_blank\" title=\"https://github.com/RichardTON/au-fhir-childhealth/tree/b00dcfdaf307315f77d1c14efde80ce449ca5c20\">https://github.com/RichardTON/au-fhir-childhealth/tree/b00dcfdaf307315f77d1c14efde80ce449ca5c20</a></p>\n<p>Is this a reasonable use of slicing?</p>",
        "id": 190243405,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583890439
    },
    {
        "content": "<p>I</p>",
        "id": 190244092,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583891510
    },
    {
        "content": "<p>I'm not sure. how does the validator know what values are in the value set of the discriminated slice if the element is sliced? Does any acceptable slice meet the pattern? If so, how does it discriminate?</p>",
        "id": 190244138,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583891570
    },
    {
        "content": "<p>why note slice on the code rather than on the coding? do you have other slices?</p>",
        "id": 190244146,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583891602
    },
    {
        "content": "<p>Typo above: \" So I sliced Observation.section.entry\" should have been \"So I sliced Composition.section.entry by\"<br>\nNow corrected.</p>",
        "id": 190245425,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583893734
    },
    {
        "content": "<p>I didn't notice that typo - don't think it makes any difference?</p>",
        "id": 190245651,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583894130
    },
    {
        "content": "<blockquote>\n<p>how does the validator know what values are in the value set of the discriminated slice if the element is sliced?</p>\n</blockquote>\n<p>I thought that as the element has a required slice, you could use a value matching the required slice. <br>\n<a href=\"/user_uploads/10155/Qib5mTP3ZXQuHj8njTbtF0E8/image.png\" target=\"_blank\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/Qib5mTP3ZXQuHj8njTbtF0E8/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/10155/Qib5mTP3ZXQuHj8njTbtF0E8/image.png\"></a></div>",
        "id": 190245698,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583894189
    },
    {
        "content": "<blockquote>\n<p>Does any acceptable slice meet the pattern? If so, how does it discriminate?</p>\n</blockquote>\n<p>Would it make a difference if the slicing was closed?</p>",
        "id": 190245714,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583894271
    },
    {
        "content": "<blockquote>\n<p>why note slice on the code rather than on the coding? do you have other slices?</p>\n</blockquote>\n<p>I cannot slice on Observation.code as it is 1..1<br>\nThe reason for slicing Observation.code.coding is to follow a design pattern used in the project where future permitted coding can be added by simply adding a new slice.</p>",
        "id": 190245768,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583894368
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 190245824,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583894460
    },
    {
        "content": "<p>The idea is to require one coding of Observation.code, but allow others in the future.</p>",
        "id": 190245843,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583894508
    },
    {
        "content": "<p>I guess something similar could be done by a required binding of Observation.code to a valueset with one entry.<br>\nMust give the required value, can give translations.<br>\nThat would be less obvious, and would be harder to test for agreement with the profile.</p>",
        "id": 190245907,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583894611
    },
    {
        "content": "<p>you could just use a pattern on the code with the required details ?</p>",
        "id": 190246362,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583895317
    },
    {
        "content": "<p>A  pattern on code can say \"<strong>all</strong> codings will have this system and code\", it cannot say \"<strong>at least one</strong> coding will have this system and code\"</p>",
        "id": 190246417,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583895401
    },
    {
        "content": "<p>The idea is that sometime in the future a second coding might be permitted, and it will then be added as  a new slice.</p>",
        "id": 190246433,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583895434
    },
    {
        "content": "<p>permitted? that means you're closing the slicing for now?</p>",
        "id": 190246442,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583895457
    },
    {
        "content": "<p>why not just a fixed value then?</p>",
        "id": 190246449,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583895470
    },
    {
        "content": "<p>Yes. It is open in what I have committed, but it is meant to be closed.</p>",
        "id": 190246503,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583895507
    },
    {
        "content": "<blockquote>\n<p>why not just a fixed value then?</p>\n</blockquote>\n<p>Because the project likes the design pattern of having a slicing with the currently permitted codings in slices, even when there is only one permitted coding.</p>",
        "id": 190246636,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583895700
    },
    {
        "content": "<p>Note: If you want to build the ig, the config file ig-dphr.json runs much faster than ig,json.</p>",
        "id": 190250124,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583901381
    },
    {
        "content": "<p>A pattern on Observation.code that declares a single coding says exactly what you want I think - \"at least one coding must match what I've specified, but others are allowed\".  That's why pattern is the recommended way of expressing constraints on CodeableConcept.</p>",
        "id": 190285858,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1583936312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> thanks for the clarification. I have a quick question on this. How to profile an Observation using pattern where we want to say that a LOINC code and/or a SNOMED code is required to be present and the implementer can send any other code?</p>",
        "id": 190327634,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583958479
    },
    {
        "content": "<p>you can't do that with a pattern. you need to slice for that</p>",
        "id": 190327715,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583958508
    },
    {
        "content": "<p>or maybe just use a value set binding with a value set that covers both</p>",
        "id": 190327747,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583958532
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , we have actually did the sliced with pattern on the Observation.coding.code</p>",
        "id": 190327793,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583958564
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"191682\">@Richard Townley-O'Neill</span> mentioned that with this slicing in the observation, pattern:resolve().code.coding as the discriminator in the composition doesn't work.  It's working fine with profile=resolve(). The first question I have is do you see any issue of using  profile=resolve() in Composition section entry slicing?</p>",
        "id": 190328211,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583958805
    },
    {
        "content": "<p>what kind of benefit I'm expecting to get if I use pattern:resolve().code.coding  as opposed to profile=resolve(). does pattern:resolve().code.coding do the profile validation of the entire resource or it just checks if the code is present or not?</p>",
        "id": 190328448,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583958914
    },
    {
        "content": "<blockquote>\n<p>pattern:resolve().code.coding </p>\n</blockquote>\n<p>just checks the coding</p>",
        "id": 190328641,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583959026
    },
    {
        "content": "<p>Ok, which means, If I use that in a FHIR document, then I've to perform explicit profile validation for each individual resource seperately. The Composition validation will only help to check if the document contains the right list of 'things' (e.g.: Observation)  but it doesn't validate if they are also proper as per profile..If this is correct assumption, then It seems to me that profile = resolve() is a better option at this stage isn't it?</p>",
        "id": 190328951,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583959195
    },
    {
        "content": "<p>For and/or you'd actually need an invariant.  Slicing would let you define the two slices, but wouldn't let you say you need at least one of them.</p>",
        "id": 190329204,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1583959367
    },
    {
        "content": "<p>well, we're talking about the discriminator. It's a lot easier for anyone reading the documentation if the discriminator refers to a fixed value. The validator will still validate the whole profile, but the error messages will be much easier to understand when referring to a fixed value, and you can also figure out which slice is which without a full validator in play</p>",
        "id": 190329294,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583959439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> agreed.</p>",
        "id": 190329340,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583959448
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ,  in the context of a FHIR document, what is your recommendation to use as discriminator? is there any documentation I can refer to? As of now I've used profile=resolve() for all of our FHIR documents ( we have many of them) and it works. It comes back with proper error if there is anything wrong. But if there is a better way of doing it.I'm happy to take that option and propose of inclusion.</p>",
        "id": 190329749,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583959731
    },
    {
        "content": "<p>it's not wrong. it's just tough for users. It's always better if you can refer to a fixed value</p>",
        "id": 190329899,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583959828
    },
    {
        "content": "<p>what happens if you refer to a fixed value of resolve().code.coding[0]?</p>",
        "id": 190329915,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583959847
    },
    {
        "content": "<p>as <span class=\"user-mention\" data-user-id=\"191682\">@Richard Townley-O'Neill</span> mentioned, we are getting \"could't match discriminator' error since we have used sliced pattern in Observation.coding.code</p>",
        "id": 190330191,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583960020
    },
    {
        "content": "<p>looping in <span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> in this discussion. <span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> what approach you guys are taking in IPS for FHIR document entry slicing discriminator?</p>",
        "id": 190330487,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583960218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> sorry, I missed to answer your question..I haven't tried with fixed value. Our project adopted to use 'pattern' as the Observation.coding. We are extensively using 'pattern' in all over the places as discussed in <a href=\"#narrow/stream/179166-implementers/topic/Fixed.20Code.20vs.20Pattern\" title=\"#narrow/stream/179166-implementers/topic/Fixed.20Code.20vs.20Pattern\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Fixed.20Code.20vs.20Pattern</a>.<br>\n I'm happy to check the behavior with using a fixed value and try with resolve().code.coding[0]</p>",
        "id": 190332175,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583961180
    },
    {
        "content": "<p>I meant pattern not fixed</p>",
        "id": 190332698,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583961496
    },
    {
        "content": "<p>After many trials and iterations, in IPS we have arrived at this for our Composition.section.entry slicing definitions:</p>\n<div class=\"codehilite\"><pre><span></span>            &lt;slicing&gt;\n                &lt;discriminator&gt;\n                    &lt;type value=&quot;profile&quot;/&gt;\n                    &lt;path value=&quot;$this.resolve()&quot;/&gt;\n                &lt;/discriminator&gt;\n                &lt;rules value=&quot;open&quot;/&gt;\n            &lt;/slicing&gt;\n</pre></div>\n\n\n<p>There can be issues with \"This element does not match any known slice defined in the profile\" information qa messages for some of our example instances (depending on whether or not the possible profile matches are entirely non-overlapping), but this gives the choices the visibility that we were looking for in the IG for the IPS instance creators (and depending on what, if anything, you want or need to do with validation on the receiving end there isn't likely going to be a problem with that).</p>",
        "id": 190333365,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1583961888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> sorry, my bad..I'll try and let you know..</p>",
        "id": 190333894,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583962235
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> I'm inline with what approach you have taken...the only different in our case is that we are using closed slicing. We don't want the implements to send any extra section/entry that is not defined in our profile.</p>",
        "id": 190333920,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583962257
    },
    {
        "content": "<p>sure - that makes sense</p>",
        "id": 190334383,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1583962591
    },
    {
        "content": "<p>for IPS we didn't want to constrain it that tightly</p>",
        "id": 190334441,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1583962640
    },
    {
        "content": "<p>I'm also going to look further into the possibility of using multiple discriminators (for both type and profile) to further tighten up the slicing in at least some of our cases.  I did that successfully in a different context (not involving a reference) in a PlanDefinition profile for Order Catalog, and I think it may also have some applicability here - but that's still to be determined.</p>",
        "id": 190335771,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1583963431
    },
    {
        "content": "<p>sounds like something interesting <span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> .. I'll keep watching that space :)</p>",
        "id": 190336860,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583964130
    },
    {
        "content": "<p>I'll let you know how it goes.</p>",
        "id": 190337205,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1583964414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I used <a href=\"/user_uploads/10155/46x6Th28DCUyx_1lvsBiBkfv/image.png\" target=\"_blank\" title=\"image.png\">image.png</a>  and got \"illegal function name null() in discriminator\"  error.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/46x6Th28DCUyx_1lvsBiBkfv/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/10155/46x6Th28DCUyx_1lvsBiBkfv/image.png\"></a></div><p>Then I used <br>\n<a href=\"/user_uploads/10155/MoLSNpF7mqKyYfJLY73Ygk_j/image.png\" target=\"_blank\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/MoLSNpF7mqKyYfJLY73Ygk_j/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/10155/MoLSNpF7mqKyYfJLY73Ygk_j/image.png\"></a></div><p>and got \"Profile based discriminators must have a type with a profile\" I double checked, the sample has the meta.profile populated..</p>",
        "id": 190341329,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583967529
    },
    {
        "content": "<p>To use resolve().code.coding the type of slicing is pattern, not profile.<br>\nTry pattern:resolve().code.coding[0].<br>\nWhen I tried it, it behaved the same as pattern:resolve().code.coding. Which makes sense, as I have only one coding in the code.</p>",
        "id": 190349035,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583975656
    },
    {
        "content": "<p>I tried with pattern and got the same error as with profile <br>\n<a href=\"/user_uploads/10155/Kimxq4kgSs7KfPpNY_d6rT7M/image.png\" target=\"_blank\" title=\"image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/Kimxq4kgSs7KfPpNY_d6rT7M/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/10155/Kimxq4kgSs7KfPpNY_d6rT7M/image.png\"></a></div><p>Eroor: illegal function name null() in discriminator</p>",
        "id": 190349255,
        "sender_full_name": "Shovan Roy",
        "timestamp": 1583976024
    },
    {
        "content": "<p>I did not use Forge.</p>",
        "id": 190349272,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1583976078
    },
    {
        "content": "<p>oh yes you would. duh.</p>",
        "id": 190354694,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583985077
    }
]