[
    {
        "content": "<p>I'm looking at why a nictiz profile doesn't validate (<span class=\"user-mention\" data-user-id=\"191375\">@Alexander Henket</span> )</p>",
        "id": 172468718,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564962063
    },
    {
        "content": "<p><a href=\"https://simplifier.net/NictizSTU3-Zib2017/ZIB-Product/~overview\" target=\"_blank\" title=\"https://simplifier.net/NictizSTU3-Zib2017/ZIB-Product/~overview\">https://simplifier.net/NictizSTU3-Zib2017/ZIB-Product/~overview</a></p>",
        "id": 172468721,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564962080
    },
    {
        "content": "<p>what it does is slice a Coding:</p>",
        "id": 172468722,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564962089
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        <span class=\"nt\">&lt;element</span> <span class=\"na\">id=</span><span class=\"s\">&quot;Medication.code.coding&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Medication.code.coding&quot;</span> <span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;slicing&gt;</span>\n                <span class=\"nt\">&lt;discriminator&gt;</span>\n                    <span class=\"nt\">&lt;type</span> <span class=\"na\">value=</span><span class=\"s\">&quot;value&quot;</span> <span class=\"nt\">/&gt;</span>\n                    <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;system&quot;</span> <span class=\"nt\">/&gt;</span>\n                <span class=\"nt\">&lt;/discriminator&gt;</span>\n                <span class=\"nt\">&lt;rules</span> <span class=\"na\">value=</span><span class=\"s\">&quot;open&quot;</span> <span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;/slicing&gt;</span>\n            <span class=\"nt\">&lt;short</span> <span class=\"na\">value=</span><span class=\"s\">&quot;MedicationCode&quot;</span> <span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;definition</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Coding medication in the Netherlands is done on the basis of the G standard (issued by Z-index), which is filled under the direction of KNMP.</span>\n\n<span class=\"s\">The coded medication can be expressed as:</span>\n\n<span class=\"s\"> - GTIN International Article Number</span>\n<span class=\"s\"> - KNMP article number = ATKODE (2.16.840.1.113883.2.4.4.8)</span>\n<span class=\"s\"> - Trade product code (HPK)</span>\n<span class=\"s\"> - Prescription code (PRK)</span>\n<span class=\"s\"> - Generic product code (GPK)</span>\n<span class=\"s\"> - Anatomic Therapeutic Classification code (ATC)</span>\n<span class=\"s\"> - SNOMED CT code</span>\n<span class=\"s\"> - Substance Name Code (SNK)</span>\n<span class=\"s\"> - Substance Name Code, in combination with Route of Administration (SSK)</span>\n<span class=\"s\"> - 90.000.000 number (individual code setting) (or similar from the facility)</span>\n\n<span class=\"s\">The GTIN enables identification of the product including its origin with a barcode.</span>\n<span class=\"s\">The ATKODE is the number with which wholesalers link the article to pharmacy systems (e.g. a box with 3 strips of 10 tablets).</span>\n<span class=\"s\">The HPK is the code for the trade product (with the brand name) as used per dose/per time the medication is taken (1 pill, 1 puff, 1ml)</span>\n<span class=\"s\">The PRK codes for the same product as the HPK does, but is not linked to a manufacturer (no brand name, no characteristics such as color, geometrical shape etc.). This code will enable a generic prescription, while still defining which trade product can be taken (e.g. a 200ml bag).</span>\n<span class=\"s\">The generic product code defines the composition of a product, and is sufficient for recording the prescription, but not the order.</span>\n<span class=\"s\">The prescription code (PRK) was developed and added to the older generic (GPK) and supplier-specific (HPK, ATKODE) coding to enable a generic product to be entered without listing a specific brand on the one hand, and to enable providing enough information to support the pharmacy supplying it on the other.</span>\n\n<span class=\"s\">The Substance Name Code (SNK) and the Substance Name Code, in combination with Route of Administration (SSK) are used to prescribe at a more generic level.</span>\n\n<span class=\"s\">The GTIN coding is used for the implementation of a barcode scanning standard and to be able to trace the origin of the product.</span>\n\n<span class=\"s\">The 90.000.000 number is used in accordance with national agreements.&quot;</span> <span class=\"nt\">/&gt;</span>\n</pre></div>",
        "id": 172468724,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564962113
    },
    {
        "content": "<p>ok that seems straight forward - the slices are differentiated by system.</p>",
        "id": 172468767,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564962149
    },
    {
        "content": "<p>then, the slice is defined like this:</p>",
        "id": 172468768,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564962156
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        <span class=\"nt\">&lt;element</span> <span class=\"na\">id=</span><span class=\"s\">&quot;Medication.code.coding:productCodeZICodelijst&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Medication.code.coding&quot;</span> <span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;sliceName</span> <span class=\"na\">value=</span><span class=\"s\">&quot;productCodeZICodelijst&quot;</span> <span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;max</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1&quot;</span> <span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;binding&gt;</span>\n                <span class=\"nt\">&lt;strength</span> <span class=\"na\">value=</span><span class=\"s\">&quot;required&quot;</span> <span class=\"nt\">/&gt;</span>\n                <span class=\"nt\">&lt;description</span> <span class=\"na\">value=</span><span class=\"s\">&quot;ProductCodeZICodelijst&quot;</span> <span class=\"nt\">/&gt;</span>\n                <span class=\"nt\">&lt;valueSetReference&gt;</span>\n                    <span class=\"nt\">&lt;reference</span> <span class=\"na\">value=</span><span class=\"s\">&quot;http://decor.nictiz.nl/fhir/ValueSet/2.16.840.1.113883.2.4.3.11.60.40.2.9.7.1--20171231000000&quot;</span> <span class=\"nt\">/&gt;</span>\n                    <span class=\"nt\">&lt;display</span> <span class=\"na\">value=</span><span class=\"s\">&quot;ProductCodeZICodelijst&quot;</span> <span class=\"nt\">/&gt;</span>\n                <span class=\"nt\">&lt;/valueSetReference&gt;</span>\n            <span class=\"nt\">&lt;/binding&gt;</span>\n        <span class=\"nt\">&lt;/element&gt;</span>\n</pre></div>",
        "id": 172468770,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564962172
    },
    {
        "content": "<p>this doesn't work in the validator because the definition of the slicing says the the discriminator is <code>system</code>, but then it doesn't define a fixed value for the system; instead, this is implied by the value set defined in the coding itself (<code>$this</code>). So the validator says - quite rightly,in my view:</p>",
        "id": 172468816,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564962252
    },
    {
        "content": "<p>ERROR: Medication.code.coding[0]: Could not match discriminator ([system]) for slice Medication.code.coding:productCodeZICodelijst in profile <a href=\"http://nictiz.nl/fhir/StructureDefinition/zib-Product\" target=\"_blank\" title=\"http://nictiz.nl/fhir/StructureDefinition/zib-Product\">http://nictiz.nl/fhir/StructureDefinition/zib-Product</a> - does not have fixed value, binding or existence assertions</p>",
        "id": 172468819,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564962294
    },
    {
        "content": "<p>does anyone disagree with my analysis?</p>",
        "id": 172468826,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564962311
    },
    {
        "content": "<p>I think that it is too obscure to fix the value of system by binding to a value set (when value sets can use multiple code systems).<br>\nThe message has a problems as it says that the element doesn't have a binding assertion, but it does.</p>",
        "id": 172469169,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1564963028
    },
    {
        "content": "<p>the element does not have a binding assertion</p>",
        "id": 172469232,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564963157
    },
    {
        "content": "<p>because it is looking for something on a system element</p>",
        "id": 172469235,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564963170
    },
    {
        "content": "<p>...and the binding is on the coding.</p>",
        "id": 172469308,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1564963276
    },
    {
        "content": "<p>yes</p>",
        "id": 172469313,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564963293
    },
    {
        "content": "<p>maybe change the wording to </p>\n<blockquote>\n<p>profile <a href=\"http://nictiz.nl/fhir/StructureDefinition/zib-Product\" target=\"_blank\" title=\"http://nictiz.nl/fhir/StructureDefinition/zib-Product\">http://nictiz.nl/fhir/StructureDefinition/zib-Product</a> - <em>discriminator</em> does not have fixed value, binding or existence assertions</p>\n</blockquote>",
        "id": 172469429,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1564963477
    },
    {
        "content": "<p>y</p>",
        "id": 172469502,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564963606
    },
    {
        "content": "<p>Does slicing by Value Set work in all tools yet? We sliced on system for lack in tooling support in 2015/2016 when we started creating them</p>",
        "id": 172469804,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1564964226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192301\">@Ardon Toonstra</span> can you follow this thread while I’m on holiday?</p>",
        "id": 172469812,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1564964272
    },
    {
        "content": "<p>Don't know. I'll change it and test</p>",
        "id": 172469813,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564964273
    },
    {
        "content": "<p>By the way the STU3 validation under Touchstone apparently works with this construct. Or at least this is the first complaint I’ve heard so far. <span class=\"user-mention\" data-user-id=\"191370\">@Richard Ettema</span> does slicing by Value Set work under Touchstone. Wouldn’t want to change the profiles for one tool and break it for another</p>",
        "id": 172469976,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1564964613
    },
    {
        "content": "<p>Touchstone uses the same validator code. So it probably didn't really work - just wasn't even tested in the past</p>",
        "id": 172470077,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564964829
    },
    {
        "content": "<p>I think you could try pattern slicing on the coding ($this) and discriminate based on the value set expansions (not actually directly on the bindings) - that's assuming that the value set expansions don't overlap (which is probably the case here?).  I'm also interested in verifying that this actually works (and not just that it doesn't give errors).</p>",
        "id": 172470078,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1564964834
    },
    {
        "content": "<p>I have to sort out a heap of terminology stuff to test this one</p>",
        "id": 172470080,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564964852
    },
    {
        "content": "<p>I might simplify it a little</p>",
        "id": 172470081,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564964862
    },
    {
        "content": "<p>If the discriminator is 'system', then 'system' must either have a fixed value or there must be a value set on the 'system' element itself.</p>",
        "id": 172471400,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1564967673
    },
    {
        "content": "<p>ok, these tests:</p>\n<ul>\n<li><a href=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.validation/src/test/resources/validation-examples/valueset-slicing-meds.xml\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.validation/src/test/resources/validation-examples/valueset-slicing-meds.xml\">https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.validation/src/test/resources/validation-examples/valueset-slicing-meds.xml</a></li>\n<li><a href=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.validation/src/test/resources/validation-examples/valueset-slicing-med-profile.xml\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.validation/src/test/resources/validation-examples/valueset-slicing-med-profile.xml\">https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.validation/src/test/resources/validation-examples/valueset-slicing-med-profile.xml</a></li>\n<li><a href=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.validation/src/test/resources/validation-examples/valueset-slicing-med-cs.xml\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.validation/src/test/resources/validation-examples/valueset-slicing-med-cs.xml\">https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.validation/src/test/resources/validation-examples/valueset-slicing-med-cs.xml</a></li>\n</ul>",
        "id": 172474087,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564973013
    },
    {
        "content": "<p>that's what we want to test, yes?</p>",
        "id": 172474089,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564973019
    },
    {
        "content": "<p>... and it works...</p>",
        "id": 172480252,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564983714
    },
    {
        "content": "<p>Thanks for checking this out Grahame. I looked at your tests and agree that this is what we want to test. Seems like we should improve our profiles accordingly. So, to confirm, we only have to change our discriminator.path from system to $this, is that correct?</p>",
        "id": 172578409,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1565089475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191370\">@Richard Ettema</span>  does WildFHIR / Touchstone support this?</p>",
        "id": 172578439,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1565089517
    },
    {
        "content": "<p>I will check out what the .NET validator does</p>",
        "id": 172578509,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1565089565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , I would expect the below instance to fail in the validator, right? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;Medication</span> <span class=\"na\">xmlns=</span><span class=\"s\">&quot;http://hl7.org/fhir&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;code&gt;</span>\n    <span class=\"nt\">&lt;coding&gt;</span>\n      <span class=\"nt\">&lt;system</span> <span class=\"na\">value=</span><span class=\"s\">&quot;http://tst.org/fhir/CodeSystem/test-meds&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;code</span> <span class=\"na\">value=</span><span class=\"s\">&quot;s1&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/coding&gt;</span>\n    <span class=\"nt\">&lt;coding&gt;</span>\n      <span class=\"nt\">&lt;system</span> <span class=\"na\">value=</span><span class=\"s\">&quot;http://tst.org/fhir/CodeSystem/test-meds&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;code</span> <span class=\"na\">value=</span><span class=\"s\">&quot;s1a&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/coding&gt;</span>\n    <span class=\"nt\">&lt;coding&gt;</span>\n      <span class=\"nt\">&lt;system</span> <span class=\"na\">value=</span><span class=\"s\">&quot;http://tst.org/fhir/CodeSystem/test-meds&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;code</span> <span class=\"na\">value=</span><span class=\"s\">&quot;s3&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/coding&gt;</span>\n    <span class=\"nt\">&lt;text</span> <span class=\"na\">value=</span><span class=\"s\">&quot;some text&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/code&gt;</span>\n  <span class=\"nt\">&lt;status</span> <span class=\"na\">value=</span><span class=\"s\">&quot;active&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;isBrand</span> <span class=\"na\">value=</span><span class=\"s\">&quot;false&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/Medication&gt;</span>\n</pre></div>",
        "id": 172581438,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1565092692
    },
    {
        "content": "<p>This is good.  My question is, since the discrimination is based on contents of the value set expansion compared to the instance data and not on a fixed value, should the discriminator type be (1) value (as it is currently in these tests) or (2) pattern (which seems to me like it might be a more logical fit)?  Or do we intend to say that in this case you can use either value or pattern and both will work?  Presumably we should also test with pattern (if we decide that's a valid option, and probably even if we don't).</p>",
        "id": 172581513,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565092788
    },
    {
        "content": "<p>I think that should fail, and it looks just like my failing example in the validator tests</p>",
        "id": 172590168,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565099559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> I have tested value. I'm not really sure what pattern means here. value means that the coding is in the value set. I don't know what pattern would mean...</p>",
        "id": 172590227,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565099606
    },
    {
        "content": "<p>The notes on the discriminator type 'value' <a href=\"https://www.hl7.org/fhir/profiling.html#discriminator\" target=\"_blank\" title=\"https://www.hl7.org/fhir/profiling.html#discriminator\">here</a> say:</p>\n<blockquote>\n<p>This is the most commonly used discriminator type: to decide based on the value of an element. Elements used like this are mostly primitive types- code, uri.</p>\n</blockquote>\n<p>That's not what we're doing in this case.  We're not specifying a particular element in the discriminator path, and the slices don't fix any values - they declare a binding.  We're testing the instance data to see if it matches with one of the codes in the expansion of the bound value set.  That sounds very much like the idea of matching on a pattern (although with a somewhat different application of it).  Maybe what we actually should have is a 'binding' discriminator type (whatever we would want to call it) to make this clearer?  But I think that in lieu of that, allowing either 'value' or 'pattern' to be used makes sense, and seems consistent with how we've documented it:</p>\n<blockquote>\n<p>If the type is value, or pattern, then the element definition must use either:</p>\n<ul>\n<li>ElementDefinition.fixed[x], or</li>\n<li>ElementDefinition.pattern[x], or</li>\n<li>if the element has a terminology binding, a required binding with a Value Set that enumerates the list of possible codes in the value set (\"extensional definition\")</li>\n</ul>\n</blockquote>",
        "id": 172595822,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565103183
    },
    {
        "content": "<p>A question on a different aspect of this is, do we really want to restrict discriminating based on a value set binding <strong>only</strong> to extensionally defined value sets?  I agree that the binding needs to be required, but I can't see why we wouldn't want to be able to do it on intensionally defined value sets that are supported by the terminology server (and maybe that's already the case)?</p>",
        "id": 172596835,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565103797
    },
    {
        "content": "<p>Performance comes to mind. A profile validator would need to reach out to a TX server to evaluate the discriminator. This might not scale...</p>",
        "id": 172597062,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1565103957
    },
    {
        "content": "<p>I agree that may be an issue.  But we need to decide (I think) whether we actually disallow or explicitly don't support it.</p>",
        "id": 172597176,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565104020
    },
    {
        "content": "<p>Or if we've already decided it (as currently documented) and are comfortable sticking with that, we can.</p>",
        "id": 172597362,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565104139
    },
    {
        "content": "<p>And I didn't want to derail the \"value and/or pattern\" discriminator type discussion.</p>",
        "id": 172597545,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565104249
    },
    {
        "content": "<p>Feature-wise, this seems like a natural extension of the current discriminator specification. It may encourage modelers to introduce potential performance bottlenecks without noticing. But the spec could explicitly warn for that.</p>",
        "id": 172600221,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1565105980
    },
    {
        "content": "<p>I think we didn't see the point of discriminating by an intensionally defined value set. The point of the discriminator is too allow an implementation to quickly determine which slice is which without having to do any validation. Explicitly defined value sets lend themselves to turning into switch statements....</p>",
        "id": 172628058,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565125308
    },
    {
        "content": "<p>Yes, I think that's a reasonable rationale for making that distinction.</p>",
        "id": 172646204,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565146223
    },
    {
        "content": "<p>Where are we on the \"value and/or pattern\" discriminator type for value set slicing discussion?</p>",
        "id": 172646268,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565146326
    },
    {
        "content": "<p>value. it's the value of the coding etc that is submitted to test the binding</p>",
        "id": 172646350,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565146547
    },
    {
        "content": "<p>As I said in the earlier post, our current documentation implies otherwise - both value and pattern can use a terminology binding (as noted in the 3rd bullet).  That's what it says.  If that's wrong, then we'll have to change it (at least make it much clearer than it is now that value is the only correct choice in this case).</p>",
        "id": 172646582,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565146931
    },
    {
        "content": "<p>I don't know what it means to say that a pattern can be used with a binding. I don't know if anyone else has any ideas what we might have meant by that</p>",
        "id": 172653146,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565158690
    },
    {
        "content": "<p>Thank you all for helping me with this issue! If I understand correctly: I can just wait untill the profile is adjusted. (it doesn't work now because the only way to see which slice we are dealing with is to look at the valuereference,  right?)</p>",
        "id": 172672383,
        "sender_full_name": "Martijn Hermans",
        "timestamp": 1565180414
    },
    {
        "content": "<p>I have one more question about the profile: <a href=\"https://simplifier.net/NictizSTU3-Zib2017/ZIB-MedicationAgreement\" target=\"_blank\" title=\"https://simplifier.net/NictizSTU3-Zib2017/ZIB-MedicationAgreement\">https://simplifier.net/NictizSTU3-Zib2017/ZIB-MedicationAgreement</a></p>",
        "id": 172672461,
        "sender_full_name": "Martijn Hermans",
        "timestamp": 1565180510
    },
    {
        "content": "<p>If I validate a resource on basis of this profile I get the following warning:</p>",
        "id": 172672532,
        "sender_full_name": "Martijn Hermans",
        "timestamp": 1565180549
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>NotSupported : Slicing with a discriminator of type &#39;Type&#39; is not yet supported by this validator.\n</pre></div>\n\n\n<p>Does this just mean the validator cannot currently validate this slice. Or does it mean the profile may have a problem?</p>",
        "id": 172672586,
        "sender_full_name": "Martijn Hermans",
        "timestamp": 1565180616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  If you read through the definition of ElementDefinition.pattern[x], I agree that 'pattern' as it is described there does not fit with the slicing on a value set use case that we are discussing here.  The documentation for ElementDefinition.binding and its subelements doesn't mention anything about how it works in slicing (and maybe it doesn't need to).  The documentation for ElementDefinition.slicing.discriminator.type basically defers to the discriminator-type value set, which, as in the Profiling FHIR page, states that \"The slices have different values in the nominated element.\"  If you take that statement at face value, it doesn't include the idea that for use as a 'value' type discriminator, specifying a binding to an extensionally defined value set is equivalent to specifying a fixed value for the nominated element.  That's too broad a stretch to be an obvious conclusion to reach without a more explicit statement (or multiple statements).  If we want to broaden the declared scope of 'value' to cover this use (and to disallow 'pattern' for it) then we need to enhance the documentation to do that (I have some ideas on that).</p>",
        "id": 172672808,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565180805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224390\">@Martijn Hermans</span> My guess is that it probably means what you said first, that the validator cannot currently validate this slice.  I don't know that the profile is wrong (rather than just unsupported), but it does seem to me to be incomplete.  It has sliced MedicationRequest.dosageInstruction.dose[x], but hasn't defined any slices for it.</p>",
        "id": 172674181,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565181987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224390\">@Martijn Hermans</span> although FHIR allows slice-by-profile, in practice this feature is not implemented/supported yet by the popular FHIR frameworks (HAPI/Java &amp; .NET). Also keep in mind that evaluation of such a constraint can be very computationally intensive.</p>",
        "id": 172676960,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1565184117
    },
    {
        "content": "<p>Java validation can now</p>",
        "id": 172677058,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565184157
    },
    {
        "content": "<p>Ah, nice work! I think Ewout almost has this in place too.</p>",
        "id": 172677721,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1565184637
    },
    {
        "content": "<p>I made an issue for the .NET validator to support slicing based on valueset. I couldn't reproduce the expected validation errors based on the test data provided by Grahame.</p>",
        "id": 172758732,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1565266246
    },
    {
        "content": "<p>Hi all!</p>\n<p>The .NET validator now supports slicing discriminated by ValueSet. In our profiles, we have occasionally defined slices based on a valueset binding and one or more mandatory slices with fixed values on .system and .code. The .NET validator does not yet handle this combined kind of slicing.</p>\n<p>My concern: is this valid FHIR?  Should a validator be smart enough to look at valueset binding AND fixed values given in a slice with this discriminator:</p>\n<div class=\"codehilite\"><pre><span></span>        <span class=\"nt\">&lt;discriminator&gt;</span>\n          <span class=\"nt\">&lt;type</span> <span class=\"na\">value=</span><span class=\"s\">&quot;value&quot;</span> <span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;$this&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/discriminator&gt;</span>\n</pre></div>",
        "id": 177905937,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1570799957
    },
    {
        "content": "<p>The problem is that you discriminator is at two different levels.  A valueset constrains the values of a Coding.  If you're declaring fixed values on the 'code' and 'system', that's not happening at the coding level.  I think the correct solution is to treat a value set binding as legal for both 'value' and 'pattern' constraints.  Then you could declare a value set on the CodeableConcept or a pattern on the CodeableConcept and the discriminator would work for both.  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ?</p>",
        "id": 177912734,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1570804610
    },
    {
        "content": "<p>I'm not sure. I'd have to look at instance before I was sure what Ardon was asking</p>",
        "id": 177925438,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570812251
    },
    {
        "content": "<p>My question wasn't so much based on what Ardon was asking as wondering whether it's reasonable to allow a valueset assertion to work for 'pattern' slices as well as 'value' slices.  In practice, valueset assertion works more like 'pattern' than like 'value' anyhow - it just checks code + system and only cares about a match in one of the codings.  It ignores everything else.  If I were designing it now, I might actually argue that valueset doesn't make sense for a 'value' match unless you're dealing with code.  However, I'm ok with leaving that bit as it is at this point.</p>",
        "id": 177925655,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1570812420
    },
    {
        "content": "<p>There's been conversation about this before.  I agree that the fit for valueset assertion actually does seem to be better with pattern, as you describe, so I think it would make sense at least to allow for both.</p>",
        "id": 177936164,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1570819159
    },
    {
        "content": "<p>Hope this helps. This is the instance we want to validate, so we're basically looking for a syntax to do that:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">&lt;!-- Full example: https://github.com/Nictiz/Nictiz-STU3-Zib2017/blob/develop/Examples/medmij-bgz-fhir3-0-1-labresult-ts-01.xml --&gt;</span>\n<span class=\"c\">&lt;!-- Full profile: https://github.com/Nictiz/Nictiz-STU3-Zib2017/blob/develop/Profiles%20-%20ZIB%202017/zib-LaboratoryTestResult-Observation.xml --&gt;</span>\n<span class=\"nt\">&lt;Observation</span> <span class=\"na\">xmlns=</span><span class=\"s\">&quot;http://hl7.org/fhir&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;id</span> <span class=\"na\">value=</span><span class=\"s\">&quot;medmij-bgz-labresult-ts-01&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;meta&gt;</span>\n        <span class=\"nt\">&lt;profile</span> <span class=\"na\">value=</span><span class=\"s\">&quot;http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/meta&gt;</span>\n    <span class=\"nt\">&lt;status</span> <span class=\"na\">value=</span><span class=\"s\">&quot;final&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"c\">&lt;!-- Fixed values for coding.system and coding.code (Dutch extension of SNOMED hence fails at regular terminology servers) --&gt;</span>\n    <span class=\"nt\">&lt;category&gt;</span>\n        <span class=\"nt\">&lt;coding&gt;</span>\n            <span class=\"nt\">&lt;system</span> <span class=\"na\">value=</span><span class=\"s\">&quot;http://snomed.info/sct&quot;</span><span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;code</span> <span class=\"na\">value=</span><span class=\"s\">&quot;49581000146104&quot;</span><span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;display</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Laboratory test finding (finding)&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/coding&gt;</span>\n    <span class=\"nt\">&lt;/category&gt;</span>\n    <span class=\"c\">&lt;!-- Secondary category based on a binding --&gt;</span>\n    <span class=\"nt\">&lt;category&gt;</span>\n        <span class=\"nt\">&lt;coding&gt;</span>\n            <span class=\"nt\">&lt;system</span> <span class=\"na\">value=</span><span class=\"s\">&quot;http://snomed.info/sct&quot;</span><span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;code</span> <span class=\"na\">value=</span><span class=\"s\">&quot;275711006&quot;</span><span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;display</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Chemistry&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/coding&gt;</span>\n    <span class=\"nt\">&lt;/category&gt;</span>\n...\n</pre></div>",
        "id": 178083044,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1571041470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> , could you have a look at the instance provided by Alexander? How should this be discriminated?</p>\n<p>Currently, if we create a ValueSet that only contains the fixed code (49581000146104 - Laboratory test finding) and bind this in the profile, the validator would be satisfied and capable of proper validation. It is however very cumbersome to create a ValueSet for one fixed value. We rather would like a validator to be capable to handle both options with a $this discriminator. Or is this impossible?</p>",
        "id": 178281972,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1571227685
    },
    {
        "content": "<p>it's still on my todo list. I'm trying to catch up</p>",
        "id": 178283938,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571229496
    },
    {
        "content": "<p>I have a similar problem: I defined an extension with a CodeableConcept Value and now want to have three slices of coding which each bind to different ValueSets. I used system and version as slicing discriminators and have set the cardinality of system to 1..1 in each slice, but I still get an Error from the validator:</p>\n<div class=\"codehilite\"><pre><span></span>Error @ Specimen.extension[2].value.ofType(CodeableConcept).coding[0] (line 31, col17) : Could not match any discriminators ([system, version]) for slice Extension.value[x].coding:icd-10-gm in profile https://fhir.bbmri.de/StructureDefinition/SampleDiagnosis - None of the discriminator [system, version] have fixed value, binding or existence assertions\n</pre></div>\n\n\n<p>Is this a validator bug or an issue with my slicing?</p>",
        "id": 178378094,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1571317143
    },
    {
        "content": "<p>What is your discriminator?  It should be \"$this\" and the discrimination type should be by value</p>",
        "id": 178390650,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1571325177
    },
    {
        "content": "<p>Update: the .NET validator is capable of handling this kind of slices if the fixed values are given on the coding level. Not if the fixed values are given in the coding.system and coding.value ect. When the discrimination is of ype value and $this is used on the coding itself.</p>",
        "id": 178759349,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1571753316
    },
    {
        "content": "<p>Should a validator be smart enough to walk into the child elements if no fixed coding is given?</p>",
        "id": 178759508,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1571753434
    },
    {
        "content": "<p>Another update… </p>\n<p>Unfortunately, the fixed coding or fixed codeableConcept does not work because we cannot fix coding.display. Our implementers should be able to use translated display values or other values than we specify. Too bad, the validator will not match a slice that contains a coding.display to the slicing definition, resulting in an error. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;element</span> <span class=\"na\">id=</span><span class=\"s\">&quot;Observation.category&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Observation.category&quot;</span><span class=\"nt\">/&gt;</span>\n <span class=\"nt\">&lt;slicing&gt;</span>\n <span class=\"nt\">&lt;discriminator&gt;</span>\n<span class=\"nt\">&lt;type</span> <span class=\"na\">value=</span><span class=\"s\">&quot;value&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;$this&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/discriminator&gt;</span>\n<span class=\"nt\">&lt;rules</span> <span class=\"na\">value=</span><span class=\"s\">&quot;open&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/slicing&gt;</span>\n<span class=\"nt\">&lt;min</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/element&gt;</span>\n <span class=\"nt\">&lt;element</span> <span class=\"na\">id=</span><span class=\"s\">&quot;Observation.category:LaboratoryTestResultCode&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Observation.category&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;sliceName</span> <span class=\"na\">value=</span><span class=\"s\">&quot;LaboratoryTestResultCode&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;short</span> <span class=\"na\">value=</span><span class=\"s\">&quot;LaboratoryTestResultCode&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;min</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;max</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1&quot;</span><span class=\"nt\">/&gt;</span>\n <span class=\"nt\">&lt;fixedCodeableConcept&gt;</span>\n <span class=\"nt\">&lt;coding&gt;</span>\n<span class=\"nt\">&lt;system</span> <span class=\"na\">value=</span><span class=\"s\">&quot;http://snomed.info/sct&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;code</span> <span class=\"na\">value=</span><span class=\"s\">&quot;49581000146104&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/coding&gt;</span>\n<span class=\"nt\">&lt;/fixedCodeableConcept&gt;</span>\n<span class=\"nt\">&lt;/element&gt;</span>\n</pre></div>",
        "id": 178858357,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1571840722
    },
    {
        "content": "<p>Therefore, we now believe a validator should be smart enough to use the fixed values in the child elements. Do you agree?</p>",
        "id": 178858474,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1571840807
    },
    {
        "content": "<p>Have you considered using pattern?</p>",
        "id": 178858542,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1571840872
    },
    {
        "content": "<p>Hi Lloyd, Thanks for your reply! </p>\n<p>If we use pattern, we have to set the discriminator type to pattern as well right? How does that work with the ValueSet bindings?</p>",
        "id": 178859610,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1571841429
    },
    {
        "content": "<p>Just tried with pattern slicing --&gt; then the .NET validator expects all slices to contain a pattern. Does not work with ValueSet binding</p>",
        "id": 178859845,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1571841560
    },
    {
        "content": "<p>Ah, good news, the java validator works well with the pattern and the valueset binding  :) thnx</p>",
        "id": 178860678,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1571841982
    },
    {
        "content": "<p>Mm, I could also have read the spec somewhat better: <a href=\"http://hl7.org/fhir/profiling.html#discriminator\" target=\"_blank\" title=\"http://hl7.org/fhir/profiling.html#discriminator\">http://hl7.org/fhir/profiling.html#discriminator</a></p>",
        "id": 178865260,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1571844518
    },
    {
        "content": "<p>well, the page implies that you can't mix pattern and binding (in spite of it working with the validator). Do you have a use case for that?</p>",
        "id": 178994355,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571949138
    },
    {
        "content": "<p>Mm, like Marco mentioned in this <a href=\"#narrow/stream/179280-fhir.2Finfrastructure-wg/topic/Is.20there.20a.20difference.20between.20value.20or.20pattern.20slicing.3F\" title=\"#narrow/stream/179280-fhir.2Finfrastructure-wg/topic/Is.20there.20a.20difference.20between.20value.20or.20pattern.20slicing.3F\">zulip  chat</a> I can also read that a slice could have a fixed or pattern or binding. </p>\n<p>The use case for having a pattern and a valueset binding is described above with the given examples, isn't it? We use a (fixed) category slice to search and index and another category slice with a valueset binding to give a more specific category for the resource, based on a value out of a valueset</p>",
        "id": 179041809,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1572003666
    },
    {
        "content": "<p>The attached image shows our current idea on how to profile the above-mentioned use case (simplistic exame, e.g. removed descriptions and cardinalities ect.). What do you think?<br>\n<a href=\"/user_uploads/10155/ANB6AnxAIb5T1nHQoUROPUkX/Descriminator-example.png\" target=\"_blank\" title=\"Descriminator-example.png\">Descriminator-example.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/ANB6AnxAIb5T1nHQoUROPUkX/Descriminator-example.png\" target=\"_blank\" title=\"Descriminator-example.png\"><img src=\"/user_uploads/10155/ANB6AnxAIb5T1nHQoUROPUkX/Descriminator-example.png\"></a></div>",
        "id": 179240079,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1572275667
    },
    {
        "content": "<p>let's talk about this next week</p>",
        "id": 180685419,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573688379
    },
    {
        "content": "<p>Great, we will do that and let's include <span class=\"user-mention\" data-user-id=\"191375\">@Alexander Henket</span></p>",
        "id": 180824087,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1573818070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192301\">@Ardon Toonstra</span> <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Has there been a decision on this issue? I have the same use case for Observation.category (pattern slice for fixed values and one additional slice with a required binding).</p>",
        "id": 187604401,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1581036952
    },
    {
        "content": "<p>The use case is real. More info in this Zulip chat: <a href=\"#narrow/stream/179280-fhir.2Finfrastructure-wg/topic/Is.20there.20a.20difference.20between.20value.20or.20pattern.20slicing.3F\" title=\"#narrow/stream/179280-fhir.2Finfrastructure-wg/topic/Is.20there.20a.20difference.20between.20value.20or.20pattern.20slicing.3F\">https://chat.fhir.org/#narrow/stream/179280-fhir.2Finfrastructure-wg/topic/Is.20there.20a.20difference.20between.20value.20or.20pattern.20slicing.3F</a></p>",
        "id": 189312885,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1582899223
    },
    {
        "content": "<p>looks like we haven't close this out - this coming week on FHIR-I? <span class=\"user-mention\" data-user-id=\"192301\">@Ardon Toonstra</span></p>",
        "id": 194889397,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1587532755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , is this about the backwards-incompatible notion made by Ewout in <a href=\"https://jira.hl7.org/browse/FHIR-25206\" title=\"https://jira.hl7.org/browse/FHIR-25206\">https://jira.hl7.org/browse/FHIR-25206</a>?  Or about something else?</p>",
        "id": 194922363,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1587558600
    },
    {
        "content": "<p>oh yes I think that is. So it's closed now?</p>",
        "id": 194922463,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1587558641
    },
    {
        "content": "<p>I think this one is closed then. I am happy with the resolution and the upcoming change for the .net API. WildFHIR made adjustments to the validator as well. Still need to correct/update our profiles though.</p>",
        "id": 194923487,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1587559263
    },
    {
        "content": "<p>This issue thread is at least related to that JIRA ticket.</p>",
        "id": 194923527,
        "sender_full_name": "Ardon Toonstra",
        "timestamp": 1587559298
    }
]