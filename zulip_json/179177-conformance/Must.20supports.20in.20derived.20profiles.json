[
    {
        "content": "<p>So once an element is a must support always a must support, but what's not clear is does that that means that a must support could never be profiled to 0..0. It specifically says that it can be optional, so why couldn't a derived profile say that the element doesn't apply?</p>",
        "id": 153978746,
        "sender_full_name": "Eric Haas",
        "timestamp": 1532707878
    },
    {
        "content": "<p>Setting maxOccurs to 0 should generally be avoided.  That says the sender must strip this element out because I'm not willing to ignore it.  It's always better for interoperability to ignore rather than reject so long as doing so doesn't raise a safety issue.</p>",
        "id": 153978748,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1532708001
    },
    {
        "content": "<p>If a parent profile says \"mustSupport\", you <em>must</em> support the element as described in that IG if you want to be compliant with a derived profile.</p>",
        "id": 153978749,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1532708035
    },
    {
        "content": "<p>If you can't/won't support the element as described, then you can't make your profile a child profile.</p>",
        "id": 153978751,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1532708056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>  .... I guess that means no.</p>",
        "id": 153978756,
        "sender_full_name": "Eric Haas",
        "timestamp": 1532708209
    },
    {
        "content": "<p>Yes, I suppose so, because the intent of using mustSupport within QI-Core is that systems can rely on those elements for decision support and quality measurement.</p>",
        "id": 153978759,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1532708533
    },
    {
        "content": "<p>This has made me think that  mustSupport sits uncomfortably between profiles and implementation guides. The flag is set in a profile, but its meaning may be defined in the profile or in other docco that supports the implementation guide. See <a href=\"http://build.fhir.org/profiling.html#mustsupport\" target=\"_blank\" title=\"http://build.fhir.org/profiling.html#mustsupport\">Must Support</a>. When a profile is used in more than one implementation guide it will be easy for the flag to be separated from its meaning.</p>\n<p>Maybe we should say that the mustSupport flag's meaning must be described in the profile. Any thoughts?</p>",
        "id": 153979241,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1532909736
    },
    {
        "content": "<p>If a profile is published on its own, mustSupport must be defined in that profile.  If a profile is published as part of an IG, mustSupport can (and should) be defined once at the IG level for all profiles published in that IG.  (Though there could be a few situations where there are distinct mustSupport rules associated with different groups of profiles, you'd still manage this at the IG level.)</p>",
        "id": 153979264,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1532917216
    },
    {
        "content": "<p>So profiles can have context, and one must consider this when using a profile outside of its original context.<br>\nMakes sens.</p>",
        "id": 153979273,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1532918660
    },
    {
        "content": "<p>Profiles <em>have</em> to have context - you can't make constraints from the base resource unless you have context of some sort.</p>",
        "id": 153979276,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1532919976
    }
]