[
    {
        "content": "<p>This:</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"p\">{</span><span class=\"err\">“resourceType”:“Patient”,</span> <span class=\"err\">“active”:false,</span> <span class=\"err\">“active”:true</span><span class=\"p\">}</span>\n</pre></div>\n\n\n<p>In this case, should the validator make this an error or a warning?</p>",
        "id": 173473124,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566108112
    },
    {
        "content": "<p>if you think it's an error, on what do you base your argument? (quote from a standard please)</p>",
        "id": 173473173,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566108199
    },
    {
        "content": "<p>I'm confused - active is 0..1</p>",
        "id": 173512882,
        "sender_full_name": "David Hay",
        "timestamp": 1566183835
    },
    {
        "content": "<p>There’s only one active property...</p>",
        "id": 173513894,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566185744
    },
    {
        "content": "<p>I think it should be an error, <a href=\"http://www.hl7.org/fhir/json.html\" target=\"_blank\" title=\"http://www.hl7.org/fhir/json.html\">http://www.hl7.org/fhir/json.html</a> says: Property names SHALL be unique. Note: this is not explicitly stated in the original JSON specification,so stated for clarity here</p>",
        "id": 173519344,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1566195243
    },
    {
        "content": "<p>oh I missed that</p>",
        "id": 173530148,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566208006
    },
    {
        "content": "<p>hmm, the validator already gives this error:</p>",
        "id": 173530895,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566208719
    },
    {
        "content": "<p><code>FATAL: (document): Error parsing JSON: Error parsing JSON source: Duplicated property name: active at Line 10 (path=[/true])</code></p>",
        "id": 173530896,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566208719
    },
    {
        "content": "<p>I added a test case to make sure.</p>",
        "id": 173530941,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566208784
    },
    {
        "content": "<blockquote>\n<p>hmm, the validator already gives this error:</p>\n</blockquote>\n<p>But why does the HAPI library 3.7.0 FhirValidator not give this error?</p>",
        "id": 173554079,
        "sender_full_name": "Mukesh Sharma",
        "timestamp": 1566229323
    },
    {
        "content": "<p>I don</p>",
        "id": 173567664,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566239848
    },
    {
        "content": "<p>I don't know. it's the same code, so it should. DOes the HAPI 4.0.0 one give the error?</p>",
        "id": 173567681,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566239867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span></p>",
        "id": 173674039,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566319353
    },
    {
        "content": "<p>Which JSON parser returns duplicate keys and how? Or is the validation done before parsing? Parsers in Clojure, I use, return maps for JSON objects. Maps can't have duplicate keys.</p>",
        "id": 173679664,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1566323443
    },
    {
        "content": "<p>They typically don't return the duplicates, but some parsers will just ignore them, as opposed to raising an error during parsing.</p>",
        "id": 173684364,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1566326851
    },
    {
        "content": "<p>the validator uses a custom json parser in order to get line / col number, and the custom parser picks it up. So that's useful - if you pass the bytes to the validator, it can pick up this problem. But if you use any other parser, and then pass the resulting object to the validator, it won't report this problem because the source parser (any other json parser) will hide the problem somehow</p>",
        "id": 173695761,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566334814
    },
    {
        "content": "<p>Yes my parser just returns one of the key-value pairs.</p>",
        "id": 173772352,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1566374241
    }
]