[
    {
        "content": "<p>I notice that in the official FHIR R4 extension definitions (e.g. <code>extension-definitions.json</code>), the <code>[...].extension.url</code> elements in the snapshot specify a <code>fixedUri</code> property with the canonical url of the extension definition. However the <code>Extension.url</code> element is defined with special \"system\" string type and \"compiler magic\" extensions (<code>profiles-types.json</code>). Doesn't this imply that the fixed value should be a <code>fixedString</code>?</p>",
        "id": 176082903,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568886053
    },
    {
        "content": "<p>maybe... but we've never discussed that the URL the refers to an extension shouldn't have extensions, and it can in the way it is represented. And I suppose if I was to, well, wear my Lloyd hat, I could find some reasons why it might be rationale to extend it ;-)</p>",
        "id": 176083014,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568886169
    },
    {
        "content": "<p>If an element needs to support extensions, then it must be defined with a FHIR (primitive) type.<br>\nElements with system types (compiler magic) do not support extensions.<br>\nCurrently, in R4, <code>Extension.url</code> is currently defined using a system type. So it does not support extensions.<br>\nRight?</p>",
        "id": 176083535,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568886680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> ?</p>",
        "id": 176083606,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568886726
    },
    {
        "content": "<p>yes that's correct. But it's still a URL, even if it's a special type.</p>",
        "id": 176083640,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568886783
    },
    {
        "content": "<p>But a system url, not a FHIR url, right? If I understand correctly, this implies that the element should specify <code>fixedString</code>, not <code>fixedUri</code>? Because the latter applies to FHIR Uri, not to system Uri.</p>",
        "id": 176084337,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568887531
    },
    {
        "content": "<p>I don't think that's true. For several reasons:</p>\n<ul>\n<li>replacing FHIR.uri with FHIR.string doesn't get your closer to System.uri</li>\n<li>there's no way to use System.string in that location</li>\n<li>FHIR.uri has a conversion relationship with System.uri</li>\n<li>there's imagineable uses for extensions in that location</li>\n</ul>",
        "id": 176086023,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568889178
    },
    {
        "content": "<p>So how is the mapping defined between <code>Extension.url</code> and <code>fixedUri</code>?<br>\ni.e. how can a system derive this knowledge programmatically?<br>\nThe type of <code>Extension.url</code> is defined using compiler magic extensions with value \"string\".<br>\nThere is no additional metadata indicating that this string value actually represents an uri.<br>\nOr am I missing something?</p>",
        "id": 176087052,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568890258
    },
    {
        "content": "<p>FYI <code>Extension.url</code> element is defined with the following type:</p>\n<div class=\"codehilite\"><pre><span></span>            &lt;type&gt;\n              &lt;code&gt;\n                &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-json-type&quot;&gt;\n                  &lt;valueString value=&quot;string&quot;/&gt;\n                &lt;/extension&gt;\n                &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-xml-type&quot;&gt;\n                  &lt;valueString value=&quot;xsd:string&quot;/&gt;\n                &lt;/extension&gt;\n                &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-rdf-type&quot;&gt;\n                  &lt;valueString value=&quot;xsd:string&quot;/&gt;\n                &lt;/extension&gt;\n                &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/regex&quot;&gt;\n                  &lt;valueString value=&quot;((http|https)://([A-Za-z0-9\\\\\\.\\:\\%\\$]*\\/)*)?(Account|ActivityDefinition|AdverseEvent|AllergyIntolerance|Appointment|AppointmentResponse|AuditEvent|Basic|Binary|BiologicallyDerivedProduct|BodyStructure|Bundle|CapabilityStatement|CarePlan|CareTeam|CatalogEntry|ChargeItem|ChargeItemDefinition|Claim|ClaimResponse|ClinicalImpression|CodeSystem|Communication|CommunicationRequest|CompartmentDefinition|Composition|ConceptMap|Condition|Consent|Contract|Coverage|CoverageEligibilityRequest|CoverageEligibilityResponse|DetectedIssue|Device|DeviceDefinition|DeviceMetric|DeviceRequest|DeviceUseStatement|DiagnosticReport|DocumentManifest|DocumentReference|EffectEvidenceSynthesis|Encounter|Endpoint|EnrollmentRequest|EnrollmentResponse|EpisodeOfCare|EventDefinition|Evidence|EvidenceVariable|ExampleScenario|ExplanationOfBenefit|FamilyMemberHistory|Flag|Goal|GraphDefinition|Group|GuidanceResponse|HealthcareService|ImagingStudy|Immunization|ImmunizationEvaluation|ImmunizationRecommendation|ImplementationGuide|InsurancePlan|Invoice|Library|Linkage|List|Location|Measure|MeasureReport|Media|Medication|MedicationAdministration|MedicationDispense|MedicationKnowledge|MedicationRequest|MedicationStatement|MedicinalProduct|MedicinalProductAuthorization|MedicinalProductContraindication|MedicinalProductIndication|MedicinalProductIngredient|MedicinalProductInteraction|MedicinalProductManufactured|MedicinalProductPackaged|MedicinalProductPharmaceutical|MedicinalProductUndesirableEffect|MessageDefinition|MessageHeader|MolecularSequence|NamingSystem|NutritionOrder|Observation|ObservationDefinition|OperationDefinition|OperationOutcome|Organization|OrganizationAffiliation|Patient|PaymentNotice|PaymentReconciliation|Person|PlanDefinition|Practitioner|PractitionerRole|Procedure|Provenance|Questionnaire|QuestionnaireResponse|RelatedPerson|RequestGroup|ResearchDefinition|ResearchElementDefinition|ResearchStudy|ResearchSubject|RiskAssessment|RiskEvidenceSynthesis|Schedule|SearchParameter|ServiceRequest|Slot|Specimen|SpecimenDefinition|StructureDefinition|StructureMap|Subscription|Substance|SubstanceNucleicAcid|SubstancePolymer|SubstanceProtein|SubstanceReferenceInformation|SubstanceSourceMaterial|SubstanceSpecification|SupplyDelivery|SupplyRequest|Task|TerminologyCapabilities|TestReport|TestScript|ValueSet|VerificationResult|VisionPrescription)\\/[A-Za-z0-9\\-\\.]{1,64}(\\/_history\\/[A-Za-z0-9\\-\\.]{1,64})?&quot;/&gt;\n                &lt;/extension&gt;\n              &lt;/code&gt;\n            &lt;/type&gt;\n</pre></div>",
        "id": 176087095,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568890312
    },
    {
        "content": "<blockquote>\n<p>Or am I missing something?</p>\n</blockquote>\n<p>Y. check out the proposed technical correction which sorted that</p>",
        "id": 176087184,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568890352
    },
    {
        "content": "<p>The correction will certainly improve this and make it more explicit. I'm now focusing on current R4 implementation.<br>\nFor example, compare the current type declaration of <code>Element.id</code>:</p>\n<div class=\"codehilite\"><pre><span></span>            &lt;type&gt;\n              &lt;code&gt;\n                &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-json-type&quot;&gt;\n                  &lt;valueString value=&quot;string&quot;/&gt;\n                &lt;/extension&gt;\n                &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-xml-type&quot;&gt;\n                  &lt;valueString value=&quot;xsd:string&quot;/&gt;\n                &lt;/extension&gt;\n                &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/structuredefinition-rdf-type&quot;&gt;\n                  &lt;valueString value=&quot;xsd:string&quot;/&gt;\n                &lt;/extension&gt;\n              &lt;/code&gt;\n            &lt;/type&gt;\n</pre></div>\n\n\n<p>So the type declaration is similar to that of <code>Extension.url</code>, however the element id does not represent a uri.</p>",
        "id": 176087359,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568890462
    },
    {
        "content": "<p>no, you're right, it doesn't. But now I'm not sure what your point is.</p>",
        "id": 176087506,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568890599
    },
    {
        "content": "<p>I'm wondering how my logic could determine programmatically (from definitions) that <code>Extension.url</code> requires <code>fixedUri</code>, not <code>fixedString</code>?</p>\n<p>Currently my logic inspects these extensions and maps the value back to a FHIR type, using the following mapping table:</p>\n<div class=\"codehilite\"><pre><span></span>xsd:string =&gt; FhirString\nxsd:token =&gt; FhirString\nxsd:div =&gt; FhirString\nxsd:boolean =&gt; FhirBoolean\nxsd:anyURI =&gt; FhirUri\nxsd:dateTime =&gt; Instant\nxsd:time =&gt; Time\nxsd:gYear OR xsd:gYearMonth OR xsd:date =&gt; Date\nxsd:gYear OR xsd:gYearMonth OR xsd:date OR xsd:dateTime =&gt; FhirDateTime\nxsd:int =&gt; Integer\nxsd:positiveInteger =&gt; PositiveInt\nxsd:nonNegativeInteger =&gt; UnsignedInt\nxsd:decimal OR xsd:double =&gt; FhirDecimal\n</pre></div>",
        "id": 176087904,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568890929
    },
    {
        "content": "<p>Specifically, both <code>Element.id</code> and <code>Extension.url</code> specify the exact same type declaration with compiler magic extensions (\"xsd:string\"). How can a system determine that <code>Extension.url</code> actually needs <code>fixedUri</code>?</p>",
        "id": 176088174,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568891177
    },
    {
        "content": "<p>are you asking about the current deficient definitions, or the fixed ones?</p>",
        "id": 176088367,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568891367
    },
    {
        "content": "<p>The current R4 ones. We haven't started implementing the technical correction, pending final publication.</p>",
        "id": 176088564,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568891527
    },
    {
        "content": "<p>Just want to make sure that both our outputs are in sync.</p>",
        "id": 176088590,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568891553
    },
    {
        "content": "<p>well, the answer right now is that you need magic knowledge to know that Extension.uri is actually a uri</p>",
        "id": 176088736,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568891725
    },
    {
        "content": "<p>the technical corrections fix that</p>",
        "id": 176088741,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568891732
    },
    {
        "content": "<p>Ouch... I prefer not to rely on \"magic knowledge\" at all, as it is brittle and error prone.<br>\nSo why can't we use <code>fixedString</code> then? Are there any compelling reasons for introducing \"magic knowledge\" so we get a <code>fixedUri</code>? What benefits does this provide?</p>",
        "id": 176089131,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568892041
    },
    {
        "content": "<p>what benefits? How about consistency with the actual specification? Finding an issue in the structure definitions, with a known fix, and you want to solve it in a way that is inconsistent with the spec?</p>",
        "id": 176089477,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568892327
    },
    {
        "content": "<p>Is it really inconsistent? You just mentioned that this aspect requires \"magic knowledge\".  So there is no way to programmatically determine this and it is not (clearly) defined by the spec, i.e. ambiguous. By some historic convention (?), the official snapshots now introduce <code>fixedUri</code>. However the official definitions could also introduce <code>fixedString</code>, as the spec itself does not explicitly define what the type of the fixed value should be. And the latter wouldn't require any \"magic knowledge\".<br>\nApologies for the hammering, I'm just trying to determine if I can avoid any _magic_.</p>",
        "id": 176090604,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568893341
    },
    {
        "content": "<p>you cannot avoid magic and be conformant until I get the technical correction out</p>",
        "id": 176091098,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568893908
    },
    {
        "content": "<p>you could not use fixedString and be conformant with what the specification says (not the structure definitions).</p>",
        "id": 176091260,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568894054
    },
    {
        "content": "<p>The specification currently doesn't explicitly _say_ anything about this (hence my questioning), so it is unclear what conforms. The core profiles now seem to make arbitrary (inconsistent) decisions when introducing fixed values for system type elements, w/o any formal rules. Specifying <code>fixedString</code> for all element with system type \"xsd:string\" makes the definitions regular (consistent) and allows for deterministic logic w/o any magic.<br>\nOr are you simply worried about backwards compatibility with existing R4 definitions?</p>",
        "id": 176093047,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568895530
    },
    {
        "content": "<p>it absolutely does say that. it says that extension.url is a uri</p>",
        "id": 176093210,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568895644
    },
    {
        "content": "<p>Indeed, I see. I guess this is the \"magic\" that you mentioned, as this isn't expressed in the XML definitions.<br>\nI consider this a historic design mistake. Apparently I have no other option than to implement \"magic\" :(</p>",
        "id": 176093575,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568895964
    },
    {
        "content": "<p>The extension.url and the fixedUri won't necessarily be the same.  The StructureDefinition.url is the canonical URL for the extension 'profile'.  The fixedUri for the Extension.url identifies the semantics.  You can have extension profiles that constrain other extension profiles.  The fixedUri is set to the canonical url of the base extension profile.  The 'constraining' extension profiles define additional constraints and have their own distinct canonical URLs (possibly with different roots), but do not change the fixedUri.</p>",
        "id": 176094976,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1568897158
    },
    {
        "content": "<p>When you reference the extension in a profile, you might point to the profile for the constrained version of the extension.</p>",
        "id": 176095045,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1568897192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> thank you for the helpful clarification!<br>\nQuite subtle. I see why derived extension profiles should inherit fixed url values from the base.<br>\nWill revisit .NET (R4) SnapGen &amp; Forge to harmonize this.</p>",
        "id": 176095993,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568897838
    },
    {
        "content": "<p>well, the good news is that ot won't be magic once I issue the technical correction</p>",
        "id": 176096741,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1568898357
    },
    {
        "content": "<p>But there is indeed a subtle point here that in fixed[x], the 'x' cannot be a System.X type - but that manifests only in Extension.url and <a href=\"http://Element.id\" target=\"_blank\" title=\"http://Element.id\">Element.id</a> - which are already a bit exceptional anyway.</p>",
        "id": 176135301,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1568922650
    },
    {
        "content": "<p>@Ewout thanks, that explains.</p>",
        "id": 176176159,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1568970095
    }
]