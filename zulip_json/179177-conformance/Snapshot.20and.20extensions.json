[
    {
        "content": "<p>Question about the sparse representation of profile extensions in the <code>StructureDefinition.snapshot</code> component:</p>\n<p>The snapshot generator implementation in the .NET FHIR API library no longer includes the child elements <code>.extension.id</code>, <code>.extension.url</code> &amp; <code>.extension.value</code> of a referenced extension in the generated snapshot by default, unless the containing profile explicitly specifies one or more constraints on those extension child elements.</p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span>Patient\n  Patient.extension:myPatientExtension, type.profile=&quot;http://example.org/fhir/StructureDefinition/MyPatientExtension&quot;\n    (OMITTED: Patient.extension.id)\n    (OMITTED: Patient.extension.url, fixedUri = &quot;http://example.org/fhir/StructureDefinition/MyPatientExtension&quot;)\n    (OMITTED: Patient.extension.valueString)\n  Patient.identifier\n</pre></div>\n\n\n<p>This behavior conforms to generic rules for generating snapshots; include constrained elements with all their siblings and parents, exclude others. The omitted information is redundant and can be resolved from the referenced extension definition (via <code>type.profile</code>). Processing systems can resolve the target extension and further expand the snapshot on demand. Omitting redundant info significantly decreases the file size of profiles with extensions.</p>\n<p>However, I am wondering if our current implementation might break some (less capable) systems? Specifically, do systems expect the <code>.extension.url</code> element to always be present in the snapshot? Or should all systems be capable of resolving the redundant information from the referenced extension definitions?</p>",
        "id": 171434380,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1563805146
    }
]