[
    {
        "content": "<p>Hi<br>\nI disagree with this statement about ordering of xml-element (or a least with a possible interpretation of it):<br>\n\"When an element is allowed to repeat, the elements are ordered, and implementations must preserve order (note: the meaning of the order may not be known)\"<br>\n(from <a href=\"https://www.hl7.org/fhir/xml.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/xml.html\">https://www.hl7.org/fhir/xml.html</a>)</p>\n<p>This could be read as: Whenever a FHIR-ressource is created/updated: the order of ..* related elements must either be persisted or validated against some rules to ensure that the same order is returned.</p>\n<p>I strongly believe that it should be a case-by-case decision whether the order must be maintained/matters.</p>\n<p>Some examples of what I consider strange behaviour if we follow the statement:<br>\nExample1  <br>\nIf a client reads a fhir-ressource with 2 business identifier:<br>\nFHIR-ressource<br>\n- Businessidentifer:<br>\n   -&gt; SomeBusinessIdentifier<br>\n   -&gt; AnotherBusinessIdentifier<br>\nAnd this clients now adds a third business identifer and PUT's this to the server:<br>\nFHIR-ressource<br>\n- Businessidentifer:<br>\n   -&gt; SomeBusinessIdentifier<br>\n   -&gt; SomeNewBusinessIdentifier<br>\n   -&gt; AnotherBusinessIdentifier<br>\nNow the server should be now obligued to maintain this order?</p>\n<p>Example2  <br>\nIf a client reads a fhir-appointment with 3 participations:<br>\nFHIR-appointment<br>\nParticipants<br>\n   -&gt; PatientParticipation (it is a patient because of the actor)<br>\n   -&gt; LocationParticipation (it is a location because of the actor)<br>\n   -&gt; PractitionerParticipation (it is a practitioner because of the actor)<br>\nAnd this clients now updates the appointment in some way but changes the order of the participants.<br>\nNow the server should be now obligued to maintain this order of the participants - or just reject the update because of the order.</p>\n<p>Some other thoughts:<br>\n- if FHIR did use xsd we would have xs:all to define a unordered behaviour<br>\n- HL7 version 3 did have ActRrelationship.sequenceNumber to define a fixed sequence</p>\n<p>Any comments on this? Do you agree or disagree with me? (or have I missed some FHIR-defined way to specify an unordered list)</p>",
        "id": 153844268,
        "sender_full_name": "Allan Bro Hansen",
        "timestamp": 1471520855
    },
    {
        "content": "<p>You have interpeted 'implementations must preserve order' more expansively than we intended. </p>",
        "id": 153844269,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471521031
    },
    {
        "content": "<p><a href=\"http://hl7-fhir.github.io/updates.html\" target=\"_blank\" title=\"http://hl7-fhir.github.io/updates.html\">http://hl7-fhir.github.io/updates.html</a></p>",
        "id": 153844270,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471521075
    },
    {
        "content": "<p>What that sentence intends to say is that when you are reading and writing elements, the order does matter, and the reading and writing code needs to able to preserve order. </p>",
        "id": 153844271,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471521165
    },
    {
        "content": "<p>and reordering the elements may change the meaning</p>",
        "id": 153844272,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471521196
    },
    {
        "content": "<p>The requirement to preserve order doesn't automatically apply if you are editing the resource, but you should understand the meaning of the order, if there is one, when re-ordering</p>",
        "id": 153844273,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471521221
    },
    {
        "content": "<p>we could be clearer about the scope of our statement</p>",
        "id": 153844274,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471521244
    },
    {
        "content": "<p>In other words: this rule applies to serialization libraries and persistence layers -- not to clients editing a resource. One reason the current language may be unclear is that the word \"implementations\" can mean so many things (and to different people).</p>",
        "id": 153844275,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1471521286
    },
    {
        "content": "<p>yes that's what's unclear</p>",
        "id": 153844288,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471522656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192120\">@Allan Bro Hansen</span> Would you be willing to submit a change request for us to clarify the spec?</p>",
        "id": 153844372,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1471561204
    },
    {
        "content": "<p>Thank you for the clarification. And yes, of course \"the code\" should maintain the order until it knows whether the order matters (almost goes without saying). <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> : I'll be looking at a change request later today or monday.</p>",
        "id": 153844419,
        "sender_full_name": "Allan Bro Hansen",
        "timestamp": 1471594624
    },
    {
        "content": "<p>Could this be exemplified even more? AFAIK, order in xml is not part of the xml spec but can of course be mandated with schemas. On the other hand, in JSON, an array of objects is an ordered sequence. Since, FHIR is supporting both formats, I need some clarification on this matter. It must somehow mean that a 'collection' (an unordered list/set) when serialized in one format (xml) has one meaning but some other meaning when serialized to another format (JSON)?</p>",
        "id": 153844421,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1471595966
    },
    {
        "content": "<p>A possible \"better\" statement:<br>\n\"<br>\n- When an element is allowed to repeat, the elements are ordered, and implementations must be able to preserve order if the order matters<br>\n(see also <a href=\"https://www.hl7.org/fhir/conformance-rules.html#cardinality\" target=\"_blank\" title=\"https://www.hl7.org/fhir/conformance-rules.html#cardinality\">https://www.hl7.org/fhir/conformance-rules.html#cardinality</a> for a further description of elements with cardinality &gt; 1)<br>\n\"<br>\nTo replace<br>\n- When an element is allowed to repeat, the elements are ordered, and implementations must preserve order (note: the meaning of the order may not be known)</p>",
        "id": 153844423,
        "sender_full_name": "Allan Bro Hansen",
        "timestamp": 1471596680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span> meaning is the same in both formats. Both formats are explicitly serialised in a particular order. What we are saying is that the serialization order is significant, and the technical infrastructure needs to be able to access the items in the right orde</p>",
        "id": 153844429,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471603967
    },
    {
        "content": "<p>of course, the order might be be meaningful. or it might be meaningful to the writer but not the reader. That's tricky, and we can't make tha untricky</p>",
        "id": 153844430,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471604005
    },
    {
        "content": "<p>Allan, I'd like to go further than your proposal and replace implementations with 'the technical infrastructure needs to be able to access the items in the right order'</p>",
        "id": 153844431,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471604046
    },
    {
        "content": "<p>OK, just to understand it from <a href=\"https://www.hl7.org/fhir/conformance-rules.html#cardinality\" target=\"_blank\" title=\"https://www.hl7.org/fhir/conformance-rules.html#cardinality\">https://www.hl7.org/fhir/conformance-rules.html#cardinality</a>:</p>\n<p>... </p>\n<p>\"For elements that have cardinality &gt; 1, the order in which they appear may have meaning. Unless the element definition (either in this specification or the extension) defines a meaning to the order explicitly, the meaning of the order is not defined, and implementations are allowed to reorder the elements. Note that it is not possible to define a meaning for the order of the elements in a profile using a StructureDefinition. When there is no definition of the meaning of the order, implementations that need to choose a single element from a list of elements for some use SHALL do so based on the semantics of the content of the elements that repeats. Profiles and Implementation guides may often make rules about this selection process.\"</p>\n<p>The order cannot be defined using StructureDefinitions. - So if there is a defined order, it is not expressed in  terms of computable syntax or computable semantics by the StructureDefinition. Does that mean that it is OK to define an order expressed in human computable language and that is currently the only way do define such an order?</p>",
        "id": 153844434,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1471605333
    },
    {
        "content": "<p>yes that's what it means. But I don't know why we said you couldn't define the order in a profile. I think we were concerned that people would change the order from the base. but if the base doesn't assign an order....</p>",
        "id": 153844435,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471606629
    },
    {
        "content": "<p>OK - its just, when you read that order can be defined (with a technical mindset - FHIR is, in many aspects a technical standard), I would expect that order to be computable by a machine. It is however not the case here</p>",
        "id": 153844444,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1471609076
    },
    {
        "content": "<p>what would 'computable by machine' mean? </p>",
        "id": 153844445,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471609451
    },
    {
        "content": "<p>eg. order expressed in a schema or having an index attribue on the elements</p>",
        "id": 153844446,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1471609541
    },
    {
        "content": "<p>index attribute is a different question. that would mean that the actual order wasn't the order. It has nothing to do with meaning </p>",
        "id": 153844447,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471609652
    },
    {
        "content": "<p>what would the schema express? </p>",
        "id": 153844448,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471609662
    },
    {
        "content": "<p>you're right ... it cannot be done</p>",
        "id": 153844449,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1471610711
    },
    {
        "content": "<p>at least I dont know how</p>",
        "id": 153844450,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1471611564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> : In respect to replacing \"implementations\": I think the important part is to include the \"if the order matters\". \"Technical infrastructure\" sounds very low-level (hardware/network) and I don't think FHIR should be concerned with that.  </p>",
        "id": 153844451,
        "sender_full_name": "Allan Bro Hansen",
        "timestamp": 1471612578
    },
    {
        "content": "<p>When you persist an instance, you must retain the order of repeating elements whether the order has meaning or not - otherwise you'll break digital signatures</p>",
        "id": 153844469,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1471625586
    },
    {
        "content": "<p>Obviously if you're updating the instance, you're going to break the signature anyhow, so changing the order of things doesn't matter.  Changing the order should only be done in an update with an awareness of what meaning (if any) is associated to the ordering of a collection.</p>",
        "id": 153844470,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1471625651
    },
    {
        "content": "<p>Lloyd, could you please elaborate on \"otherwise you'll break digital signatures\" - is it the hashCode of e.g. a Java-object? <br>\nMy point is that the order is only mandatory to persist in the our system/database if the order matters. Likewise the order should not be guaranteed between multiple GETs.<br>\nSo e.g. in my first initial example given that the order of business identifers does not matter: it is complety legit to - as a response to a GET or a PUT - return the business identifers in whatever order the server likes - and the order may even be different on the next GET.</p>",
        "id": 153844591,
        "sender_full_name": "Allan Bro Hansen",
        "timestamp": 1471865439
    },
    {
        "content": "<p>If you store an instance and then respond to a query, if the order of the elements on the way out isn't identical to what the order was when the data was signed, the signature will be broken.  The FHIR canonical algorithm for signatures treats the order of all repeating elements as significant (because some of them are significant and differentiating would create more complexity than it's worth).</p>",
        "id": 153844681,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1471901983
    },
    {
        "content": "<p>Okay, now I understand that you are in fact addressing the XML signature, and the signature value of the XML document.<br>\nStill, I am talking about a POST or PUT operation in which the client has requested to get the created/updated ressource returned (Prefer-header with value return=representation). The returned resource will most likely be different than the one specified by the client: a logical id is added for a POST (if the resource is presisted), a version or lastUpdated meta-data will be updated (if included), other derived values may have changed. So changing the order of repeatable elements is just one of many possible differences between the post and returned ressource (unless logical id and meta-data are not included in the FHIR canonical algorithm for signatures?).<br>\nSo to me it appears  that changing the order of repeatable elements for a PUT/POST response is allowed altough not preferable.<br>\nThe signature issue is also addressed here: <a href=\"https://www.hl7.org/fhir/updates.html#2.10.6\" target=\"_blank\" title=\"https://www.hl7.org/fhir/updates.html#2.10.6\">https://www.hl7.org/fhir/updates.html#2.10.6</a>.</p>",
        "id": 153844687,
        "sender_full_name": "Allan Bro Hansen",
        "timestamp": 1471906414
    },
    {
        "content": "<p>When we sign an instance, it's a canonical signature that can be used for XML or JSON.  If you want to retain signature validity, the id would need to be pre-assigned (using PUT or as part of a Bundle or something).  And certainly there are circumstances where a server might not retain everything as received.  But the base expectation in FHIR is that order is retained.  Changing the order is equivalent in impact to throwing away a couple of elements.  It's within the rights of servers to do so, but doing so degrades the data received.</p>",
        "id": 153844688,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1471906929
    },
    {
        "content": "<p>ok, thank you for the clarification. We do not let the clients define the logical id of our ressource - so for a POST the signature will always be broken with the returned ressource (if a ressource is returned)</p>",
        "id": 153844690,
        "sender_full_name": "Allan Bro Hansen",
        "timestamp": 1471907668
    },
    {
        "content": "<p>We should probably talk about whether id should actually be part of the canonicalization algorithm because that's probably true of most servers - and it's not clear it should be part of the signed content.</p>",
        "id": 153844695,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1471912900
    },
    {
        "content": "<p>if id is not part of the signature, then links are not signed. There's almost no point then.</p>",
        "id": 153844698,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1471913343
    },
    {
        "content": "<p>I am not sure we have proven the point of signing FHIR resource instances... An assembled and serialized document, yes.   Not much actual work and lots of questions  <a href=\"http://wiki.hl7.org/index.php?title=FHIR_Digital_Signature_Working_Page\" target=\"_blank\" title=\"http://wiki.hl7.org/index.php?title=FHIR_Digital_Signature_Working_Page\">http://wiki.hl7.org/index.php?title=FHIR_Digital_Signature_Working_Page</a></p>",
        "id": 153844699,
        "sender_full_name": "John Moehrke",
        "timestamp": 1471913583
    },
    {
        "content": "<p>You're signing the link, not the linked-to content.  If you care about the linked-to content, then you'd need an extension on the reference containing a hash of the thing you're pointing to.  Signing the ids inside a bundle makes sense, just not the root id of the instance.</p>",
        "id": 153844746,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1471923521
    }
]