[
    {
        "content": "<p>Is there a way to upload packages created with Torinox to Simplifier?<br>\nI have created a package locally, but uploading to Simplifier returns </p>\n<div class=\"codehilite\"><pre><span></span>Initializing...\nStarting upload ...\nParsing resources to list of ImportFiles took: 00:00:00.0393055\nMetadata could not be extracted!\nImport failed!\n</pre></div>\n\n\n<p>Since I want to package an older version of the project I  have saved locally I can't create it directly in Simplifier...</p>",
        "id": 154007339,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539175725
    },
    {
        "content": "<p>BTW, I used  <code>pack       (&lt;path&gt;) | Creates a FHIR package from a folder</code> to create the package</p>",
        "id": 154007343,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539175895
    },
    {
        "content": "<p>We don't have a method of pushing a package directly to Simplifier (yet).</p>",
        "id": 154007363,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539177990
    },
    {
        "content": "<p>We have the intent on importing a package directly into a project.</p>",
        "id": 154007364,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539178015
    },
    {
        "content": "<p>And we are considering allowing direct pushing of packages. But that would bypass a lot of Quality Assurance.</p>",
        "id": 154007365,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539178044
    },
    {
        "content": "<p>What's the difference between direct import and direct push?</p>",
        "id": 154007373,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539180301
    },
    {
        "content": "<p>The difference i meant was more of Packages vs. Projects.</p>",
        "id": 154007376,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539180350
    },
    {
        "content": "<p>So: we are going to build importing/pushing to your project.</p>",
        "id": 154007377,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539180372
    },
    {
        "content": "<p>We're not sure yet we're going to build a push to the package repository directly.</p>",
        "id": 154007378,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539180388
    },
    {
        "content": "<p>Ok, I guess our use case of wanting to retrospectively create a package of a past version of a project is rather unique...</p>",
        "id": 154007379,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539180480
    },
    {
        "content": "<p>;-)</p>",
        "id": 154007380,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539180483
    },
    {
        "content": "<p>Problem is: we have a profile hosted on Simplifier that derived from an older version of the \"basis-DE\" project. We still have the older version saved, but currently we have no way to declare a dependency on this version in the derived profile, because we can only create a package from the current version.</p>",
        "id": 154007382,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539181742
    },
    {
        "content": "<p>Darn :)</p>",
        "id": 154007383,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539181782
    },
    {
        "content": "<p>Well, that's not exactly true. I <em>did</em> create a package with Torinox.</p>",
        "id": 154007384,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539181795
    },
    {
        "content": "<p>I just have no way to declare a dependency on it....</p>",
        "id": 154007385,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539181809
    },
    {
        "content": "<p>Why not?</p>",
        "id": 154007386,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539181850
    },
    {
        "content": "<p>Because Simplifier doesn't know the package</p>",
        "id": 154007387,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539181873
    },
    {
        "content": "<p>Ah, because you created it locally.</p>",
        "id": 154007388,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539181889
    },
    {
        "content": "<p>ok. I could <em>declare</em> it, but it wouldn't resolve :D</p>",
        "id": 154007389,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539181901
    },
    {
        "content": "<p>Yes. I see.</p>",
        "id": 154007390,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539181957
    },
    {
        "content": "<p>What if the package was hosted on a different npm server. Could I declare a dependency then?</p>",
        "id": 154007391,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539181964
    },
    {
        "content": "<p>Not yet. At least not for Torinox.</p>",
        "id": 154007392,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539181977
    },
    {
        "content": "<p>But It's a valid use case for us to solve. Give me a bit of time to think about it. Or are you in a hurry?</p>",
        "id": 154007393,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539182011
    },
    {
        "content": "<p>No, not really :)</p>",
        "id": 154007394,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539182029
    },
    {
        "content": "<p>Ok. I will let you know. We 've had some ideas in the past, that you could go back in time to a specific upload (transactionid). But that's not implemented yet.</p>",
        "id": 154007395,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539182077
    },
    {
        "content": "<p>We've also thought about branches. But we didn't want to build github :)</p>",
        "id": 154007396,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539182091
    },
    {
        "content": "<p>IIRC Simplifier builds the packages internally by saving version specific urls, right?<br>\nSo theoretically, It should be possible to create a package by providing a timestamp and simplifier could then package the resources with whatever the valid version at that time was...  However the results might be unpredictable since we may have deleted and re-uploaded resources with identical canonical urls but different IDs. I remember we had issues with duplicates at some point...</p>",
        "id": 154007399,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539182320
    },
    {
        "content": "<p>Didn't the _history interaction have an _at=&lt;timestamp&gt; parameter...?</p>",
        "id": 154007400,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539182408
    },
    {
        "content": "<p>Yes. But we don't do soft deletes yet.</p>",
        "id": 154007402,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539182435
    },
    {
        "content": "<p>I mean, if the packaging mechanism took an optional timestamp as parameter, simplifier could probably just append ?_at=&lt;timestamp&gt; instead of packaging the current version. The problem is in making sure that all resources in the project get packaged, not only those that <em>do have</em> a current version...</p>",
        "id": 154007408,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539183179
    },
    {
        "content": "<p>You still have the 'older' version locally on disk, correct?</p>",
        "id": 154007419,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539183943
    },
    {
        "content": "<p>Yep</p>",
        "id": 154007420,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539183954
    },
    {
        "content": "<p>also on a gitHub branch</p>",
        "id": 154007421,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539183969
    },
    {
        "content": "<p>So, you could always upload that to a new project and create a package.</p>",
        "id": 154007422,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539183973
    },
    {
        "content": "<p>from there.</p>",
        "id": 154007423,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539183986
    },
    {
        "content": "<p>Yes</p>",
        "id": 154007424,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539183988
    },
    {
        "content": "<p>In one of the next release, we are going to allow orphan packages.  -- packages where there is no longer a link to the project.</p>",
        "id": 154007426,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539184025
    },
    {
        "content": "<p>so that you can delete a project, without deleting the packages.</p>",
        "id": 154007427,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539184035
    },
    {
        "content": "<p>Ah! Awesome!</p>",
        "id": 154007428,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539184047
    },
    {
        "content": "<p>Could the project in the meanwhile be a private project?</p>",
        "id": 154007430,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539184158
    },
    {
        "content": "<p>Currently we are working out the relationship between packages and private projects.</p>",
        "id": 154007432,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539184196
    },
    {
        "content": "<p>It's a hard problem :)</p>",
        "id": 154007433,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539184200
    },
    {
        "content": "<p>Oh, and remember, you cannot yet create a package with the same package name in a different project.</p>",
        "id": 154007434,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539184221
    },
    {
        "content": "<p>So is it problematic if that older version has a different package name?</p>",
        "id": 154007435,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539184233
    },
    {
        "content": "<p>No. I think we could live with that...</p>",
        "id": 154007437,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539184342
    },
    {
        "content": "<p>Could Simplifier currently resolve a dependency to a package in a private project?</p>",
        "id": 154007442,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539184385
    },
    {
        "content": "<p>In our current implementation, you can only consume packages of private projects if you have access (membership) of that project.<br>\nWe acknowledge that that won't do.<br>\nSo we are working out a solution, and we're thinking in the direction of 'package feeds'.</p>",
        "id": 154007445,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1539184472
    },
    {
        "content": "<p>Great! Looks like there's going to be options :)</p>",
        "id": 154007448,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1539184822
    }
]