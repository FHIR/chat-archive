[
    {
        "content": "<p>Hi all,</p>\n<p>The FHIR documentation <a href=\"https://www.hl7.org/fhir/profiling.html#slicing\" target=\"_blank\" title=\"https://www.hl7.org/fhir/profiling.html#slicing\">states</a>: \"One common feature of constraining StructureDefinitions is to take an element that may occur more than once (e.g. in a list), and then split the list into a series of sub-lists [...]  this operation is known as \"Slicing\" a list\". This seems to imply that slicing is only allowed for elements with a cardinality &gt; 1. Indeed, the Java validator complains about \"Attempt to a slice an element that does not repeat\" when slicing an element with cardinality 0..1 or 1..1.</p>\n<p>Is this really the case? And if it is, why? There are many use cases where you want to say: \"this element may occur just once, but when you do, you may choose from one of these types/coding systems/etc\". This can be done quite naturally with slicing and the slicing cardinality rules <a href=\"https://www.hl7.org/fhir/profiling.html#slice-cardinality\" target=\"_blank\" title=\"https://www.hl7.org/fhir/profiling.html#slice-cardinality\">seem perfectly happy with this</a>.</p>",
        "id": 165886609,
        "sender_full_name": "Pieter Edelman",
        "timestamp": 1558086883
    },
    {
        "content": "<p>Hi Pieter, <br>\nThis topic has been discussed before here: <a href=\"#narrow/stream/179166-implementers/topic/Slicing.20non-repeating.20elements.20to.20define.20a.20choice\" title=\"#narrow/stream/179166-implementers/topic/Slicing.20non-repeating.20elements.20to.20define.20a.20choice\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Slicing.20non-repeating.20elements.20to.20define.20a.20choice</a><br>\nI don't know what the status of this is though. <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ??</p>",
        "id": 165887017,
        "sender_full_name": "Marten Smits",
        "timestamp": 1558087277
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191334\">@Marten Smits</span> , thanks for the pointer ... for some reason it didn't show up when I searched the discussions with exactly these search terms.</p>",
        "id": 165887147,
        "sender_full_name": "Pieter Edelman",
        "timestamp": 1558087418
    },
    {
        "content": "<p>Question is: is this still accurate, since it's a discussion from 2017 and Grahames last remark is that he's going to work on it....</p>",
        "id": 165889490,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1558089924
    },
    {
        "content": "<p>I think it's all done an implemented</p>",
        "id": 165941526,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558131742
    },
    {
        "content": "<p>The .NET API implementation and Forge certainly support this, exactly for the mentioned use case, to define type-specific constraints for a non-repeating choice type element.</p>",
        "id": 166075660,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1558350430
    },
    {
        "content": "<p>In other words, slicing applies to list elements and choice type elements.</p>",
        "id": 166075677,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1558350459
    },
    {
        "content": "<p>so the java stuff used to, right up until you guys convinced me not to</p>",
        "id": 166075684,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558350475
    },
    {
        "content": "<p>We did...? Forge STU3 has supported type slicing on choice type elements for a long time. Differential allows for a shorthand notation (w/o slicing introduction), but type slices are always fully expanded in the snapshot.</p>",
        "id": 166076010,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1558350754
    },
    {
        "content": "<p>evening decision in Jan meeting last year, leading to this paragraph:</p>",
        "id": 166076055,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558350815
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/elementdefinition.html#typesx\" target=\"_blank\" title=\"http://build.fhir.org/elementdefinition.html#typesx\">http://build.fhir.org/elementdefinition.html#typesx</a></p>",
        "id": 166076121,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558350883
    },
    {
        "content": "<p>That paragraph describes the behavior/interpretation of constraints on choice type elements, however it is silent about slicing. Does this section (2.30.0.4.2) intend to imply that slicing is actually forbidden for choice type elements? Because I interpreted the new R4 behavior as a (compatible) extension to existing behavior in STU3.</p>\n<p>Currently, Forge R4 allows users to author type-specific constraints for a choice type element, by toggling the original choice type (\"[x]\") element into \"slicing mode\". The application then auto-initializes the slicing discriminator for a type slice to the default value <code>{ type = \"type\", path = \"$this\" }</code>. The default slicing component is excluded from the generated differential (redundant), but included in the generated snapshot.<br>\nThe user can then add one or more named slices to specify type-specific constraints. If a named slice is constrained to a single type, then the element is renamed by replacing the \"[x]\" suffix with the type name, and the sliceName is initialized from the element name. Theoretically, it is even possible to introduce a named slice that applies to multiple types (subset of the original type list); such an element constraint is not renamed, but still recognizable by means of the (custom, author-assigned) slice name.</p>\n<p>Allowing slicing on choice types:</p>\n<ul>\n<li>allows the user to further constrain the default slicing discriminator, e.g. by adding additional terms to the discriminator </li>\n<li>Uniquely identifies constraints for specific (sets of) types, because the associated constraints (must) specify a slice name</li>\n<li>Naturally extends existing behavior as defined in STU3</li>\n<li>Does not bloat the differential component for common cases</li>\n</ul>",
        "id": 166249522,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1558515921
    },
    {
        "content": "<p>I understood it to be replacement behavior when we discussed it i the evening session and agreed to it in committee. <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> <span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span>  where there too in the evening session - can't remember who else was.</p>",
        "id": 166302786,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558554331
    },
    {
        "content": "<p>I had actually thought there would still be slicing, but have adapted to the fact there wasn't.</p>",
        "id": 166303280,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1558554680
    },
    {
        "content": "<p>Today I learned something.   I am also still slicing value[x] to apply constraints on specific types in the choice.  Good to know.  I have a slightly related question on this:</p>\n<blockquote>\n<p>Constraints limiting the acceptable list of types must be applied to the original \"[x]\" element as this is where the list of acceptable types is defined</p>\n</blockquote>\n<p>If you are limiting it to a single allowed type (e.g., limit <code>value[x]</code> to <code>Quantity</code> only) must you keep <code>value[x]</code> on the id/path or can you change it to <code>valueQuantity</code>?  In the past, I've changed it; not sure if that's still valid.</p>",
        "id": 166307867,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1558557962
    },
    {
        "content": "<p>if the validator sees valueQuantity, it will apply any constraints found there to a Quantity, but if some other type is present, it will assume that this is ok, and the quantity constraints do not apply</p>",
        "id": 166309462,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558558925
    },
    {
        "content": "<p>So for R4 choice type constraints, Forge does NOT include slicing discriminator in the differential (unless further constrained by the author). However the .NET snapshot generator for R4 currently expands choice type constraints to include the (implied) slicing component in the snapshot. Is that behavior wrong?</p>",
        "id": 166356084,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1558614856
    },
    {
        "content": "<p>BTW i do remember the evening session where we discussed R4 type slicing, especially</p>\n<ul>\n<li>allowing multiple type-specific constraints, and</li>\n<li>allowing the (default, implied and therefore redundant) type slicing discriminator to be omitted from the differential.</li>\n</ul>\n<p>However I don't recall that we explicitly forbid (custom) discriminator on type slices? Also, I assumed that the <em>snapshot</em> component should still provide a full expansion of the slicing component. Seems to make sense, as this still introduces slicing into the profile and in general, validators then need access to the discriminator.</p>",
        "id": 166356941,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1558615629
    },
    {
        "content": "<p>Note that <a href=\"http://build.fhir.org/elementdefinition.html#typesx\" target=\"_blank\" title=\"http://build.fhir.org/elementdefinition.html#typesx\">ยง2.30.0.4.2</a> does not mention anything about the slicing component.</p>",
        "id": 166357071,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1558615758
    },
    {
        "content": "<p>From <a href=\"http://build.fhir.org/profiling.html#discriminator\" target=\"_blank\" title=\"http://build.fhir.org/profiling.html#discriminator\">ยง5.1.0.11 Discriminator</a>:</p>\n<blockquote>\n<p>type: Used to match slices based on the type of the item. While it can be used with polymorphic elements such as <code>Observation.value[x]</code>, ...</p>\n</blockquote>",
        "id": 166357207,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1558615853
    },
    {
        "content": "<p>Clearly we have different recollections of the discussion that evening. I've asked FHIR-I to take it up on this weeks call</p>",
        "id": 166492825,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558733954
    },
    {
        "content": "<p>There isn't scheduled to be a call Monday - due to the US holiday</p>",
        "id": 166499521,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1558741695
    },
    {
        "content": "<p>hmm. maybe devdays then</p>",
        "id": 166500401,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558742996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Issue <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12259\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12259\">GF#12259</a> describes resolution for R4. I interpreted this as allowing for a shorthand notation (w/o explicit slicing), while still allowing the verbose form (with explicit slicing) and custom type slicing discriminators. Also see the first comment:</p>\n<blockquote>\n<p>Note- there is other reasons to use @type - retain the functionality.</p>\n</blockquote>\n<p>This GForge issue does not specifically mention rules for generating the snapshot. The .NET API snapshot generator for FHIR R4 currently always expands the full slicing introduction for all sliced elements, including type slicing and extensions.<br>\nI guess this decision mainly affects implementations of FHIR validators, and also code/form generators. Removing verbosity from the snapshot shifts some responsibility to consuming logic, which must be capable to correctly interpret the shorthand notation.</p>",
        "id": 166620973,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1558948518
    },
    {
        "content": "<p>What's the outstanding question here <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ? Can you change the discriminator at element[x]? No, it's already sliced. You could re-slice.</p>",
        "id": 166851833,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1559160462
    },
    {
        "content": "<p>ok. Sonara this evening (devdays)<br>\n6:30 packaging and composition <br>\n7:15 slicing and choice types</p>",
        "id": 167778571,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560188014
    },
    {
        "content": "<p>I'll be there</p>",
        "id": 167806685,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1560210487
    },
    {
        "content": "<p>Outcomes from the discussion: </p>\n<ul>\n<li>we agreed that the specification failed to be clear</li>\n<li>the task disposition is also not clear</li>\n<li>we agreed that this is a serious problem that needs resolution ASAP </li>\n<li>we didn't believe that there's convincing requirements for re-slicing in this case</li>\n<li>there is the CDA problem (forgot to mention this last night) where elements do not have [x] in the name, but have a type choice, so can't be done by renaming? </li>\n<li>the general feeling was the type slicing is more 'regular' with regard to snapshots</li>\n<li>we noted one of Chris's original concerns that the path is ambiguous where you use slicing without renaming the slices </li>\n<li>we ran out of time to resolve but we agree that we need to close it out this week</li>\n</ul>",
        "id": 167838860,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560250350
    },
    {
        "content": "<p>There are a few pop up sessions left tomorrow. Do we want to schedule another discussion?</p>",
        "id": 167888229,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1560285536
    },
    {
        "content": "<p>I think that would be good</p>",
        "id": 167888569,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560285782
    },
    {
        "content": "<p>I can do the 11:05 session</p>",
        "id": 167888625,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560285820
    },
    {
        "content": "<p>I scheduled the meeting</p>",
        "id": 167892363,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1560288768
    },
    {
        "content": "<p>Tomorrow 11:05 in Sonora</p>",
        "id": 167892405,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1560288802
    },
    {
        "content": "<p>Choices</p>\n<p>1. no slicing on snapshots - renaming only<br>\n2. renaming in differentials, slicing on snapshots<br>\n3. renaming or slicing in differentials, slicing in snapshots</p>",
        "id": 167975569,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560365102
    },
    {
        "content": "<p>decision  - #3</p>",
        "id": 167975586,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560365109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> is counting the minutes....</p>",
        "id": 167975607,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560365133
    },
    {
        "content": "<p>Can you illustrate via an example?</p>",
        "id": 168030544,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1560419895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> 3:13 <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 168037355,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560426748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> the renaming syntax documented here:</p>",
        "id": 168037368,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560426772
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhir/elementdefinition.html#typesx\" target=\"_blank\" title=\"http://hl7.org/fhir/elementdefinition.html#typesx\">http://hl7.org/fhir/elementdefinition.html#typesx</a></p>",
        "id": 168037410,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560426815
    },
    {
        "content": "<p>will be treated as one optional way to do the differential. Or you can do classic @type based slicing. Either way, what goes in the snapshot will be classic type based slicing.</p>",
        "id": 168037493,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560426870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Do you expect the igpublisher to currently produce classic type based slicing in the snapshot?</p>",
        "id": 168282933,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1560747929
    },
    {
        "content": "<p>right now I don't know what it's going to do</p>",
        "id": 168282986,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560747967
    },
    {
        "content": "<p>HL7 AU has ingredient in differential with slicing and in snaphot without<br>\n<a href=\"http://build.fhir.org/ig/hl7au/au-fhir-base/StructureDefinition-au-medication.html\" target=\"_blank\" title=\"http://build.fhir.org/ig/hl7au/au-fhir-base/StructureDefinition-au-medication.html\">http://build.fhir.org/ig/hl7au/au-fhir-base/StructureDefinition-au-medication.html</a><br>\n<a href=\"http://build.fhir.org/ig/hl7au/au-fhir-base/StructureDefinition-au-medication.html#tabs-snap\" target=\"_blank\" title=\"http://build.fhir.org/ig/hl7au/au-fhir-base/StructureDefinition-au-medication.html#tabs-snap\">http://build.fhir.org/ig/hl7au/au-fhir-base/StructureDefinition-au-medication.html#tabs-snap</a></p>",
        "id": 168283115,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1560748076
    },
    {
        "content": "<p>well, right now, we're just broken on here due to confusion between the various tool smiths. I think we sorted it out last week, but it will be some time before we get all aligned</p>",
        "id": 168283662,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560748997
    },
    {
        "content": "<p>Thanks. I wanted to check my understanding. Things will get better.  <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 168283707,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1560749093
    },
    {
        "content": "<p>ok. so. here's my test cases</p>",
        "id": 168808294,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1561324135
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/POHU3cpB70us_v4aypRwnOyh/choice-slicing-tests.xml\" target=\"_blank\" title=\"choice-slicing-tests.xml\">choice-slicing-tests.xml</a></p>",
        "id": 168808304,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1561324179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> please check that these differentials represent the right set of test cases. For the latter tests, the snapshot output should the same (43/44 &amp; 45/46)</p>",
        "id": 168808360,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1561324265
    },
    {
        "content": "<p>I get a bad document error when I click the link</p>",
        "id": 168809317,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1561326230
    },
    {
        "content": "<p>open it in a text editor - it's not valid xml</p>",
        "id": 168809488,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1561326553
    },
    {
        "content": "<p>there's multiple root elements</p>",
        "id": 168809499,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1561326576
    },
    {
        "content": "<p>I mean just clicking the link in zulip.  Tried opening in spy and link didn't resolve</p>",
        "id": 168812302,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1561332237
    },
    {
        "content": "<p>So there are no magic slice names?  I think there should be.  Otherwise when constraining downstream slices by name, the behavior will be different whether an element is named \"x.value[x]\" (where the slice name is manually assigned) vs. \"x.valueCodeableConcept\" (were the slice name will be auto-generated)</p>",
        "id": 168814624,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1561337043
    },
    {
        "content": "<p>(I was able to get the file by just downloading it.)</p>",
        "id": 168814627,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1561337058
    },
    {
        "content": "<p>Other than that, I saw no issues.</p>",
        "id": 168814631,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1561337084
    },
    {
        "content": "<p>I don't know what you mean by magic slice names. It's not ringing a bell for me</p>",
        "id": 168838434,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1561372761
    },
    {
        "content": "<p>You had slicenames of \"codeable\" and \"quantity\".  I thought we'd agreed to use \"CodeableConcept\" and \"Quantity\".  I.e. The sliceName would exactly match the type name if we were doing  type-based slicing on a polymorphic element.</p>",
        "id": 168838595,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1561372943
    },
    {
        "content": "<p>I don't recall any such agreement? is this written down anywhere?</p>",
        "id": 168839110,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1561373638
    },
    {
        "content": "<p>Not written down.  I just recall it as a verbal discussion.  Key question is as follows:<br>\n- If you use the shortcut, then behind the scenes the code's going to inject a slice name.  That slicename will be algorithmicly determined.  If we allow those who don't use the shortcut to manually define an arbitrary slice name that's different from the algorithmicly determined slice name, is that inconsistency going to cause issues?</p>\n<p>My concern is that someone who switches from shortcut to full expression or vice-versa could break downstream models (that are constraining slices).  I don't think that should happen.</p>",
        "id": 168839315,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1561373858
    },
    {
        "content": "<p>I don't recall the discussion. I agree that changing the slicing could impact downstream slicing, but that's true of any change to the slicing...</p>",
        "id": 168840246,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1561374796
    },
    {
        "content": "<p>Changing shortcut to/from non- shortcut is a representation change, not a content change.  Furthermore, it could be tooling-driven.  One tool might save using the shortcut.  Another might not.  You don't want switching tools in the parent model to break child models.</p>",
        "id": 168862717,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1561392509
    },
    {
        "content": "<p>Do you see a  problem with enforcing standard slice names for this case?</p>",
        "id": 168862743,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1561392547
    },
    {
        "content": "<p>well, that depends. I'm ok with generating standard names, but should the snapshot generator reject other names?</p>",
        "id": 169677708,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562287301
    },
    {
        "content": "<p>I think it should.  There's no good reason to have inconsistency and having it creates pain</p>",
        "id": 169678804,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1562289567
    },
    {
        "content": "<p>we don't do that anywhere else. that would imply Forge should force consistent names too, at least here. <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span></p>",
        "id": 169681024,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562293998
    },
    {
        "content": "<p>We don't have shortcuts that allow generation of names anywhere else...</p>",
        "id": 169710644,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1562335152
    },
    {
        "content": "<p>ok. updated the tests at <a href=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/main/resources/snapshot-generation-tests.xml\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/main/resources/snapshot-generation-tests.xml\">https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/main/resources/snapshot-generation-tests.xml</a>. I still have to write the assertions for Tests 45 &amp; 46, but <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> please check the assertions for 43/44 first</p>",
        "id": 169784941,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562451876
    },
    {
        "content": "<p>40 - 42 pass. 43/44 fail until I update the snapshot generation.</p>",
        "id": 169784945,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562451896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> please check these as well</p>",
        "id": 169784950,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562451903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> has been on holidays for the past two weeks, so I am sure he'll be in the mood and eager to pick this up this week ;-)</p>",
        "id": 169850217,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1562574656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> getting to this... it means that tests 5 and 6 are also broken too.</p>",
        "id": 170887518,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563193673
    },
    {
        "content": "<p>Will check in a fix for what I think they should be</p>",
        "id": 170887540,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563193682
    },
    {
        "content": "<p>in fact, I think that T6 doesn't make any sense any more:</p>",
        "id": 170887578,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563193727
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    <span class=\"nt\">&lt;StructureDefinition&gt;</span>\n      <span class=\"nt\">&lt;id</span> <span class=\"na\">value=</span><span class=\"s\">&quot;t6&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;url</span> <span class=\"na\">value=</span><span class=\"s\">&quot;urn:uuid:977f7fee-448e-4090-8c3a-441b3b3cca7a&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;name</span> <span class=\"na\">value=</span><span class=\"s\">&quot;t6&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;status</span> <span class=\"na\">value=</span><span class=\"s\">&quot;draft&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;description</span> <span class=\"na\">value=</span><span class=\"s\">&quot;fixture for #6: type narrowing #2 - this renames  the type element&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;kind</span> <span class=\"na\">value=</span><span class=\"s\">&quot;resource&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;abstract</span> <span class=\"na\">value=</span><span class=\"s\">&quot;false&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;type</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Patient&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;baseDefinition</span> <span class=\"na\">value=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/Patient&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;derivation</span> <span class=\"na\">value=</span><span class=\"s\">&quot;constraint&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;differential&gt;</span>\n        <span class=\"nt\">&lt;element&gt;</span>\n          <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Patient.deceasedDateTime&quot;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;type&gt;</span>\n            <span class=\"nt\">&lt;code</span> <span class=\"na\">value=</span><span class=\"s\">&quot;dateTime&quot;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;/element&gt;</span>\n      <span class=\"nt\">&lt;/differential&gt;</span>\n    <span class=\"nt\">&lt;/StructureDefinition&gt;</span>\n</pre></div>",
        "id": 170887581,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563193732
    },
    {
        "content": "<p>that's a null statement, I think</p>",
        "id": 170887589,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563193740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> have you looked at this thread?</p>",
        "id": 170887601,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563193763
    },
    {
        "content": "<p>the last question leads me to a related question:</p>",
        "id": 170893992,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563198387
    },
    {
        "content": "<p>Do these 2 xml fragments have the same meaning?</p>",
        "id": 170894030,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563198416
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    <span class=\"nt\">&lt;StructureDefinition&gt;</span>\n      <span class=\"nt\">&lt;id</span> <span class=\"na\">value=</span><span class=\"s\">&quot;t44&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;url</span> <span class=\"na\">value=</span><span class=\"s\">&quot;urn:uuid:ecb6f563-2957-4da8-832e-cb6d94329a93&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;name</span> <span class=\"na\">value=</span><span class=\"s\">&quot;t44&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;status</span> <span class=\"na\">value=</span><span class=\"s\">&quot;draft&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;description</span> <span class=\"na\">value=</span><span class=\"s\">&quot;fixture for #44: Choice Types: constrain list of choices to 1 and constrain the type (shortcut)&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;kind</span> <span class=\"na\">value=</span><span class=\"s\">&quot;resource&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;abstract</span> <span class=\"na\">value=</span><span class=\"s\">&quot;false&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;type</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Observation&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;baseDefinition</span> <span class=\"na\">value=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/Observation&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;derivation</span> <span class=\"na\">value=</span><span class=\"s\">&quot;constraint&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;differential&gt;</span>\n        <span class=\"nt\">&lt;element&gt;</span>\n          <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Observation&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/element&gt;</span>\n        <span class=\"nt\">&lt;element&gt;</span>\n          <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Observation.value[x]&quot;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;short</span> <span class=\"na\">value=</span><span class=\"s\">&quot;some text&quot;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;type&gt;</span>\n            <span class=\"nt\">&lt;code</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Quantity&quot;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;/element&gt;</span>\n        <span class=\"nt\">&lt;element&gt;</span>\n          <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Observation.valueQuantity&quot;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;short</span> <span class=\"na\">value=</span><span class=\"s\">&quot;some text for quantity&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/element&gt;</span>\n        <span class=\"nt\">&lt;element&gt;</span>\n          <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Observation.valueQuantity.value&quot;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;min</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/element&gt;</span>\n      <span class=\"nt\">&lt;/differential&gt;</span>\n    <span class=\"nt\">&lt;/StructureDefinition&gt;</span>\n</pre></div>",
        "id": 170894031,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563198416
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    <span class=\"nt\">&lt;StructureDefinition&gt;</span>\n      <span class=\"nt\">&lt;id</span> <span class=\"na\">value=</span><span class=\"s\">&quot;t44&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;url</span> <span class=\"na\">value=</span><span class=\"s\">&quot;urn:uuid:ecb6f563-2957-4da8-832e-cb6d94329a93&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;name</span> <span class=\"na\">value=</span><span class=\"s\">&quot;t44&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;status</span> <span class=\"na\">value=</span><span class=\"s\">&quot;draft&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;description</span> <span class=\"na\">value=</span><span class=\"s\">&quot;fixture for #44: Choice Types: constrain list of choices to 1 and constrain the type (shortcut)&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;kind</span> <span class=\"na\">value=</span><span class=\"s\">&quot;resource&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;abstract</span> <span class=\"na\">value=</span><span class=\"s\">&quot;false&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;type</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Observation&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;baseDefinition</span> <span class=\"na\">value=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/Observation&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;derivation</span> <span class=\"na\">value=</span><span class=\"s\">&quot;constraint&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;differential&gt;</span>\n        <span class=\"nt\">&lt;element&gt;</span>\n          <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Observation&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/element&gt;</span>\n        <span class=\"nt\">&lt;element&gt;</span>\n          <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Observation.valueQuantity&quot;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;short</span> <span class=\"na\">value=</span><span class=\"s\">&quot;some text for quantity&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/element&gt;</span>\n        <span class=\"nt\">&lt;element&gt;</span>\n          <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Observation.valueQuantity.value&quot;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;min</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/element&gt;</span>\n      <span class=\"nt\">&lt;/differential&gt;</span>\n    <span class=\"nt\">&lt;/StructureDefinition&gt;</span>\n</pre></div>",
        "id": 170894040,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563198424
    },
    {
        "content": "<p>No.  The second one constraints the valueQuantity slice.  It doesn't prevent the other types from being used.  (That was a very clear outcome of our meeting two WGMs ago.)</p>",
        "id": 170899260,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1563201735
    },
    {
        "content": "<p>so... this invalidates every generated Extension we have ever generated. I have a problem with that</p>",
        "id": 170983073,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563282083
    },
    {
        "content": "<p>in fact, it's not a backwards compatible change. Which is yet another problem.</p>",
        "id": 170983245,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563282213
    },
    {
        "content": "<p>we need to interpret the second the same as the first....</p>",
        "id": 170983296,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563282242
    },
    {
        "content": "<p>You agreed to it when we had the discussion long ago.  And I thought you'd changed the code to align well before we published R4?  Talking about valueQuantity is just talking about a specific slice.  Constraining what types are allowed needs to be done on value[x].</p>",
        "id": 170989124,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1563286166
    },
    {
        "content": "<p>it's not clear to me what I may have thought I was agreeing with, or not, nor is it clear what other people may have thought I was agreeing too, but this is clear: </p>\n<p><a href=\"http://hl7.org/fhir/extension-capabilities.xml.html\" target=\"_blank\" title=\"http://hl7.org/fhir/extension-capabilities.xml.html\">http://hl7.org/fhir/extension-capabilities.xml.html</a></p>\n<p>Every extension we've ever published has a differential like this. And it's a pattern that exists in other profiles as well. See, for example:</p>\n<p><a href=\"https://simplifier.net/NictizSTU3-Zib2017/nl-core-relatedperson-role/~xml\" target=\"_blank\" title=\"https://simplifier.net/NictizSTU3-Zib2017/nl-core-relatedperson-role/~xml\">https://simplifier.net/NictizSTU3-Zib2017/nl-core-relatedperson-role/~xml</a></p>\n<p>I don't think that we can change this now. <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span></p>",
        "id": 171027817,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563311515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span></p>",
        "id": 171028235,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1563311860
    },
    {
        "content": "<p>ok I have committed a set of tests and code based on the idea that we aren't breaking backwards compatibility on this</p>",
        "id": 171067806,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563361573
    },
    {
        "content": "<p><a href=\"https://github.com/hapifhir/org.hl7.fhir.core/tree/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/tree/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation\">https://github.com/hapifhir/org.hl7.fhir.core/tree/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation</a></p>",
        "id": 171068063,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563361899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> the language here: <a href=\"http://hl7.org/fhir/elementdefinition.html#typesx\" target=\"_blank\" title=\"http://hl7.org/fhir/elementdefinition.html#typesx\">http://hl7.org/fhir/elementdefinition.html#typesx</a> specifically exists to make this clear. Note: </p>\n<blockquote>\n<p>Constraints limiting the acceptable list of types must be applied to the original \"[x]\" element as this is where the list of acceptable types is defined</p>\n</blockquote>",
        "id": 171112714,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563393848
    },
    {
        "content": "<p>So path: Observation.valueQuantity is referring to id: Observation.value[x]:valueQuantity and is making <em>no</em> statement about the other value types.</p>",
        "id": 171112789,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563393922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> has also affirmed this interpretation in his blog post here: <a href=\"https://blog.fire.ly/2019/02/06/fhir-r4-profiling-and-forge/\" target=\"_blank\" title=\"https://blog.fire.ly/2019/02/06/fhir-r4-profiling-and-forge/\">https://blog.fire.ly/2019/02/06/fhir-r4-profiling-and-forge/</a></p>",
        "id": 171112903,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563394002
    },
    {
        "content": "<p>Even more clear in the R4 spec, the next bullet:</p>\n<blockquote>\n<p>The inclusion of a type specific path (such as \"Patient.deceasedBoolean\") SHALL NOT be interpreted as constraining allowed types, but instead, it constrains the use of a particular type</p>\n</blockquote>",
        "id": 171113583,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563394467
    },
    {
        "content": "<p>This profile: <a href=\"http://hl7.org/fhir/extension-capabilities.xml.html\" target=\"_blank\" title=\"http://hl7.org/fhir/extension-capabilities.xml.html\">http://hl7.org/fhir/extension-capabilities.xml.html</a> has not been converted properly from STU3 and isn't generating conformant element ids.</p>",
        "id": 171113748,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563394584
    },
    {
        "content": "<p>That's what I recall.  And I thought Grahame had gone in and fixed the code so that the snapshot generator worked this way...</p>",
        "id": 171114929,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1563395597
    },
    {
        "content": "<p>I think we need to re-gen all the SDs in the R4 technical correction, a la <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=22681\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=22681\">GF#22681</a></p>",
        "id": 171115743,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563396161
    },
    {
        "content": "<p>The R4 technical correction is getting out of hand</p>",
        "id": 171115778,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563396191
    },
    {
        "content": "<p>but I now have a problem: I cannot manage this process any more.</p>",
        "id": 171115793,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563396208
    },
    {
        "content": "<p>the R4 technical correction was slated for once the ballot opened, so that it wasn't competing for resources etc with ballot opening. Since that tends to be all en-compassing for us</p>",
        "id": 171115870,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563396247
    },
    {
        "content": "<p>but now, getting the ballot out depends on the R4 technical corrections</p>",
        "id": 171115882,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563396259
    },
    {
        "content": "<p>and already, doing the technical corrections (R2-R4) was a reset of the entire tooling base that I expected to take a week....</p>",
        "id": 171115910,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563396295
    },
    {
        "content": "<p>What support can be offered? What would be helpful?</p>",
        "id": 171148352,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563439027
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, apologies for radio silence. As Ewout has mentioned, I took a vacation after DevDays. Now ready to start working on this.<br>\nIndeed, the impact on extensions also dawned on me. The simple/compact notation used in DSTU3 no longer limits the list of allowed types in R4. Most R4 extensions I've seen still use the STU3 compact notation, which is interpreted differently in R4, and usually not what the author intends. Instead, all (...) R4 extensions should now always specify both a <code>value[x]</code> ElementDef to limit types, and usually another named slice e.g. <code>valueBoolean</code> to specify further constrains on the allowed type - in the differential! So this is not a matter of simply re-generating the snapshot.</p>",
        "id": 171169794,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1563456676
    },
    {
        "content": "<p>Concerning slice names, we've also received some questions from Forge customers about this.<br>\nForge auto-generates slice names for named type slices, according to the default pattern, e.g. <code>valueBoolean</code>. Currently, the user cannot override/customize these auto-generated slice names. If you open a (manually edited) profile with custom type slice names, then Forge will automatically revert to the default slice names.<br>\nUsers have been asking us if Forge could allow custom type slice names in R4. For example, one user mentioned a use case where they introduce multiple <code>valueQuantity</code> slices, representing constraints on different units. Of course, this requires assigning unique and therefore custom slice names - which is currently not supported by Forge.<br>\nQuestion: does FHIR allow this? If not, is there an alternative approach?</p>",
        "id": 171170488,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1563457102
    },
    {
        "content": "<p>This would be a case of re-slicing (slicing an existing slice).  Wouldn't the id convention distinguish?</p>",
        "id": 171179570,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1563462656
    },
    {
        "content": "<p>Agree - <code>id:\"Observation.value[x]:valueQuantity/valueInCm\"</code></p>",
        "id": 171180414,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563463174
    },
    {
        "content": "<p>The slicing definition at <code>value[x]</code> is set by the standard to type. <code>id:\"Observation.value[x]:valueInCm\"</code> would be illegal.</p>",
        "id": 171180559,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563463269
    },
    {
        "content": "<p>As for the STU3 Extension SDs - they need to be converted to R4 format like all resources.</p>",
        "id": 171180674,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563463367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> if I understand correctly, in your reslicing example, the full sliceName is <code>valueQuantity/valueInCm</code>, where the first segment is defined/prescribed by FHIR standard, and the last segment is custom and author-defined? So to support this scenario, Forge could for example auto-generate the first segment and require authors to specify the remainder?</p>",
        "id": 171241795,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1563527524
    },
    {
        "content": "<p>Yes, as a reslice - the slice of value[x] is valueQuantity and mandated by the standard. The (re)slice of valueQuantity is user defined and user named.</p>",
        "id": 171244873,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563530533
    },
    {
        "content": "<p>Makes sense, thank you for the feedback!</p>",
        "id": 171248095,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1563534168
    },
    {
        "content": "<blockquote>\n<p>What support can be offered? What would be helpful?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> thanks. Right now the most useful thing someone could do is sort out the gForge tasks for the technical corrections - do we know what they are, are they all approved by FHIR-I? Is there anything that's been reported that's not a task? DO the tool smiths have any last call issues?</p>",
        "id": 171256299,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563542368
    },
    {
        "content": "<p>the other useful thing to do would be check the test cases</p>",
        "id": 171256420,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563542440
    },
    {
        "content": "<p>FYI I'm planning to implement &amp; review the test cases next week.</p>",
        "id": 171256469,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1563542481
    },
    {
        "content": "<p><a href=\"https://github.com/hapifhir/org.hl7.fhir.core/tree/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/tree/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation\">https://github.com/hapifhir/org.hl7.fhir.core/tree/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation</a></p>",
        "id": 171256474,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563542486
    },
    {
        "content": "<p>great.</p>",
        "id": 171256476,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563542488
    },
    {
        "content": "<p>They're not yet done - currently, I am interpreting the shortcut syntax the old way. I will update them to the new way over the next 2 days</p>",
        "id": 171256550,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563542531
    },
    {
        "content": "<p>(they're good other than that)</p>",
        "id": 171256577,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563542554
    },
    {
        "content": "<p>fixed. I think they're right now. In particular, T6, T43 and T44 deserve close attention, along with their last delta</p>",
        "id": 171296588,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563573550
    },
    {
        "content": "<p>For T6, should the snapshot include all type slices once one of them is included? A minor point...more about consistency than correctness...</p>",
        "id": 171323976,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563622453
    },
    {
        "content": "<p>T43's input should be rejected -&gt; value[x]'s slice for Quantity must be named valueQuantity. And value isn't a child of value[x]. Only Element children can be children of [x] elements.</p>",
        "id": 171324051,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563622622
    },
    {
        "content": "<p>T44's differential is generating incorrect ids -&gt; <code>&lt;element id=\"Observation.valueQuantity\"&gt;</code> should be <code>&lt;element id=\"Observation.value[x]:valueQuantity\"&gt;</code></p>",
        "id": 171324108,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563622701
    },
    {
        "content": "<p>And the snapshot goes off the rails @ line 951 with the introduction of the \"Quantity\" slice to value[x]</p>",
        "id": 171324123,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563622801
    },
    {
        "content": "<p>I think T44 line 1043 should be <code>&lt;path value=\"Observation.valueQuantity.value\"/&gt;</code> instead of current <code>&lt;path value=\"Observation.value[x].value\"/&gt;</code></p>",
        "id": 171324179,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563622873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> is probably best suited to generate a snapshot and PR for these? I don't have any tooling at the moment apart from his...</p>",
        "id": 171324230,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563622982
    },
    {
        "content": "<p>T6 - no, I don't think it should.</p>",
        "id": 171361170,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563694617
    },
    {
        "content": "<p>T43:</p>\n<ul>\n<li>don't agree about the slice name, see above. (<span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>). At least I don't think that's what we agreed, but I don't care </li>\n<li>value is a child of value[x]. That we also discussed specifically</li>\n</ul>",
        "id": 171361338,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563694940
    },
    {
        "content": "<p>I don't see where the snapshot goes off the rails</p>",
        "id": 171361399,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563695126
    },
    {
        "content": "<p>T44 I don't agree either</p>",
        "id": 171361401,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563695146
    },
    {
        "content": "<p>ok I pushed corrected differentials to <a href=\"https://github.com/FHIR/packages/tree/master/hl7.fhir.rX/hl7.fhir.r4.examples/package\" target=\"_blank\" title=\"https://github.com/FHIR/packages/tree/master/hl7.fhir.rX/hl7.fhir.r4.examples/package\">https://github.com/FHIR/packages/tree/master/hl7.fhir.rX/hl7.fhir.r4.examples/package</a> and <a href=\"https://github.com/FHIR/packages/tree/master/hl7.fhir.rX/hl7.fhir.r4.core/package\" target=\"_blank\" title=\"https://github.com/FHIR/packages/tree/master/hl7.fhir.rX/hl7.fhir.r4.core/package\">https://github.com/FHIR/packages/tree/master/hl7.fhir.rX/hl7.fhir.r4.core/package</a></p>",
        "id": 171363517,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563698984
    },
    {
        "content": "<p>note: the snapshots are not correct at this time. I have not regenerated them (problems). So just review the differentials...</p>",
        "id": 171363562,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563699010
    },
    {
        "content": "<p>ok all sorted. I think they are correct</p>",
        "id": 171387221,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563742063
    },
    {
        "content": "<p>My recollection was that the slice names for the short-cut was the 'type', not the element name.  I don't really care either, but I do have a slight bias towards shorter - which the type name would be.  <span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> do you have a reason for wanting the element name (beyond the fact that you probably implemented things that way? :))</p>",
        "id": 171389542,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1563746441
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhir/elementdefinition.html#id\" target=\"_blank\" title=\"http://hl7.org/fhir/elementdefinition.html#id\">http://hl7.org/fhir/elementdefinition.html#id</a> defines the id for a type slice and uses the full path name.</p>",
        "id": 171406574,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563776593
    },
    {
        "content": "<p>But sure how thatโs relevant to the question at hand?</p>",
        "id": 171413507,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563785243
    },
    {
        "content": "<p>Grr. Not sure...</p>",
        "id": 171413509,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563785254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> The question is whether the sliceName should be \"Quantity\" or \"valueQuantity\" (not what the id should be).  Is there a reason why you think we should use \"valueQuantity\" rather than \"Quantity\"?</p>",
        "id": 171432510,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1563803857
    },
    {
        "content": "<p>I seem to remember that we decided to standardize slice names of type slices to e.g. <code>valueBoolean</code> - derived from element name by replacing <code>[x]</code> with the name of associated single type. The current implementations of the .NET FHIR API &amp; Forge (STU3 &amp; R4) follow this pattern.<br>\nHowever section 2.30.0.3 (<a href=\"http://hl7.org/fhir/elementdefinition.html#id\" target=\"_blank\" title=\"http://hl7.org/fhir/elementdefinition.html#id\">http://hl7.org/fhir/elementdefinition.html#id</a>) of the R4 spec states:</p>\n<blockquote>\n<p>For type choice elements, the id reflects the type slice. e.g. For path = <code>Patient.deceasedBoolean</code>, the id is <code>Patient.deceased[x]:deceasedBoolean</code></p>\n</blockquote>\n<p>This line suggests, but does not actually <em>require</em> pre-defined slice names for type slices.<br>\nThis would imply that <code>Patient.deceased[x]:boolean</code> and <code>Patient.deceased[x]:foo</code> are also valid.</p>",
        "id": 171434244,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1563805050
    },
    {
        "content": "<p>The illustration in the id section indicates it should be valueQuantity. No strong opinion, but think that guidance should tip the scales.</p>",
        "id": 171435408,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1563805898
    },
    {
        "content": "<p>well, ok. updated the tests. Check them again</p>",
        "id": 171465163,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1563827496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  Looking at the commit (<a href=\"https://github.com/hapifhir/org.hl7.fhir.core/commit/4274392020cbac6b9e5cf7cfafc3be1e656fda2f#diff-64f5d43722b5cabb662451ca19679f13\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/commit/4274392020cbac6b9e5cf7cfafc3be1e656fda2f#diff-64f5d43722b5cabb662451ca19679f13\">https://github.com/hapifhir/org.hl7.fhir.core/commit/4274392020cbac6b9e5cf7cfafc3be1e656fda2f#diff-64f5d43722b5cabb662451ca19679f13</a>) it looks like you only changed the slice names. Those look fine.</p>\n<p>For <code>Observation.value[x].value</code> and generally for children of [x] type choice elements, how do you know <em>which</em> element is being constrained? If I create a constraint on <code>Extension.value[x].system</code>, where will you apply it? <code>Coding.system</code> or <code>Quantity.system</code>? Both? Element's children are the only ones unambiguous. I certainly wasn't part of any agreement on this (not that I have to be!).</p>\n<p>Will re-check others on plane...</p>",
        "id": 171680256,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564051453
    },
    {
        "content": "<p>On path - should the path be reflective of the instance structure? For <code>id:\"Observation.value[x]:valueQuantity\"</code>, I assume either <code>path:\"Observation.value[x]\"</code> or <code>path:\"Observation.valueQuantity\"</code> would be ok? </p>\n<p>This becomes more important with children as in my last comment. <code>value[x].value</code> is ambiguous. <code>valueQuantity.value</code> is not.</p>",
        "id": 171686304,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564057696
    },
    {
        "content": "<p><a href=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t44-expected.xml#L1043\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t44-expected.xml#L1043\">https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t44-expected.xml#L1043</a></p>",
        "id": 171686400,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564057802
    },
    {
        "content": "<p>At very least, in T44's input (<a href=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t44-input.xml#L30\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t44-input.xml#L30\">https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t44-input.xml#L30</a>), the element id should be required...although in this case I guess it happens to be unambiguous due to the type limits on value[x].</p>",
        "id": 171686541,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564057931
    },
    {
        "content": "<p>Appears you're accepting any slice name: <a href=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t43-input.xml#L33\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t43-input.xml#L33\">https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t43-input.xml#L33</a></p>\n<p>And then converting it to the <code>valueUnit</code> name in the snapshot: <a href=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t43-expected.xml#L958\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t43-expected.xml#L958\">https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t43-expected.xml#L958</a></p>\n<p>While leaving the original in the differential: <a href=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t43-expected.xml#L2144\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t43-expected.xml#L2144\">https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t43-expected.xml#L2144</a></p>\n<p>Is this intended?</p>",
        "id": 171686689,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564058051
    },
    {
        "content": "<p>yes, the path is now ambiguous; you have to look back up the path parents to see what the type is.</p>",
        "id": 171687178,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564058471
    },
    {
        "content": "<p>we specifically discussed this in Seattle while coming to agreement</p>",
        "id": 171687198,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564058490
    },
    {
        "content": "<p>So what happens with <code>Extension.value[x].system</code>?</p>",
        "id": 171687234,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564058519
    },
    {
        "content": "<p>assuming I don't limit the types.</p>",
        "id": 171687279,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564058529
    },
    {
        "content": "<p>I do not require the element ids on the differential</p>",
        "id": 171687284,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564058537
    },
    {
        "content": "<p>and I am testing that. though it is not formally valid</p>",
        "id": 171687293,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564058549
    },
    {
        "content": "<p>So <code>path:\"Extension.value[x].system\"</code> should be rejected?</p>",
        "id": 171687320,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564058585
    },
    {
        "content": "<p>you can't say anything about Extension.value[x].system unless you limit the types. there's a another test about that somewhere - you can only constrain things on all elements if you don't constrain the type</p>",
        "id": 171687322,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564058586
    },
    {
        "content": "<p>Meaning you have to check all the remaining types and see if there's any ambiguity?</p>",
        "id": 171687451,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564058644
    },
    {
        "content": "<p>That's pretty brittle I think...</p>",
        "id": 171687479,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564058671
    },
    {
        "content": "<p>and yes, I rewrite the sliceName in the snapshot without fixing it in the differential. I'm open to discussion on the point. I can raise an exception, or fix it (though fixing it is super hard for me). I elected not to. discussion welcome.</p>",
        "id": 171687483,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564058680
    },
    {
        "content": "<p>no that situation doesn't arise. Either you have a single type, or you can only talk about element properties</p>",
        "id": 171687504,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564058706
    },
    {
        "content": "<p>I think it's pretty confusing if the snapshot generator creates identifier inconsistencies between snapshot and differential.</p>",
        "id": 171687536,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564058729
    },
    {
        "content": "<p>well, let's see what other people think.</p>",
        "id": 171687601,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564058766
    },
    {
        "content": "<blockquote>\n<p>no that situation doesn't arise. Either you have a single type, or you can only talk about element properties</p>\n</blockquote>\n<p>Where can I find this rule? Also, if I limit to 2 types, say Quantity and Coding, and then constrain <code>id:\"Extension.value[x].valueQuantity.system\"</code> and <code>id:\"Extension.value[x].valueCoding.system\"</code>, both will have <code>path:\"Extension.value[x].system\"</code>. And you don't require ids in the differential...</p>",
        "id": 171687813,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564058981
    },
    {
        "content": "<p>It seems to me that either ids need to be required, or paths need to be type specific.</p>",
        "id": 171687911,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564059024
    },
    {
        "content": "<p>they'll have to be sliced, either fomally, or informally. The rule is... somewhere. probably only in Zulip for now - I think we discussed this about 3 months ago</p>",
        "id": 171687960,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564059067
    },
    {
        "content": "<p>if you're talking about the differential, ids are derivative. Either you fomally specify the slices, or you use the short cut. Either way, there is no ambiguity.</p>",
        "id": 171687995,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564059103
    },
    {
        "content": "<p>My leaning is to raise an error if the differential slice name is wrong.  Otherwise you end up with non-matching ids in the snapshot and differential - which should cause an error.</p>",
        "id": 171688159,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1564059223
    },
    {
        "content": "<p>We agree this is an error - it's ambiguous.</p>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;path&quot;:&quot;Extension.value[x]&quot;,\n  &quot;type&quot;: [\n    { &quot;code&quot;:&quot;Quantity&quot; },\n    { &quot;code&quot;:&quot;Coding&quot; }\n  ]\n},\n// slices valueQuantity and valueCoding implicitly exist already. Don&#39;t need to declare.\n{\n  &quot;path&quot;:&quot;Extension.value[x].system&quot;,\n  &quot;min&quot;:1\n}\n</pre></div>",
        "id": 171688311,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564059350
    },
    {
        "content": "<p>I think you're saying I need to do this:</p>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;path&quot;:&quot;Extension.value[x]&quot;,\n  &quot;type&quot;: [\n    { &quot;code&quot;:&quot;Quantity&quot; },\n    { &quot;code&quot;:&quot;Coding&quot; }\n  ]\n},\n// slices valueQuantity and valueCoding implicitly exist already. Don&#39;t need to declare.\n{\n  &quot;path&quot;:&quot;Extension.value[x]&quot;,\n  &quot;sliceName&quot;:&quot;valueQuantity&quot;\n},\n{\n  &quot;path&quot;:&quot;Extension.value[x].system&quot;,\n  &quot;min&quot;:1\n}\n</pre></div>\n\n\n<p>and then infer the last constraint based on the ordering of the elements.</p>",
        "id": 171688476,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564059472
    },
    {
        "content": "<p>Which is one of the explicit reasons for the well-formed ids - that you don't have to try and capture meaning from the order of elements in the differential.</p>",
        "id": 171688585,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564059568
    },
    {
        "content": "<p>Aside...on T6, the snapshot declares the slicing closed (good): <a href=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t6-expected.xml#L566\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t6-expected.xml#L566\">https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation/t6-expected.xml#L566</a></p>\n<p>But then fails to include all the slices. I guess we do need to include them all.</p>",
        "id": 171688745,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564059675
    },
    {
        "content": "<p>I'm not understanding the point about T6</p>",
        "id": 171688911,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564059780
    },
    {
        "content": "<p>I don't mind if other tooling requires properly formed ids. It is required. Just that mine doesn't.</p>",
        "id": 171688946,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564059809
    },
    {
        "content": "<p>but the ids by themselves are not enough</p>",
        "id": 171688961,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564059824
    },
    {
        "content": "<p>Looking again... sdf-14 requires ids in both snapshot and differential.</p>",
        "id": 171688963,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564059827
    },
    {
        "content": "<p>What scenario/id would be ambiguous?</p>",
        "id": 171689060,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564059861
    },
    {
        "content": "<p>ambiguous?</p>",
        "id": 171689097,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564059879
    },
    {
        "content": "<p>Why aren't ids enough?</p>",
        "id": 171689110,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564059893
    },
    {
        "content": "<p>With ids, you don't need to infer anything from element ordering.</p>",
        "id": 171689151,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564059918
    },
    {
        "content": "<p>you can't imply the existence of slices in the id. You actually have to have the slices present. I didn't say anything about ambiguous</p>",
        "id": 171689189,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564059950
    },
    {
        "content": "<p>Based on my understanding of our discussions, a differential with a single element, <code>id:\"Extension.value[x]:valueQuantity.value\"</code> is legal.</p>",
        "id": 171689336,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564060058
    },
    {
        "content": "<p>Type slices implicitly exist.</p>",
        "id": 171689347,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564060070
    },
    {
        "content": "<p>I disagree. I've seen nothing to say that this is the case. It's driven by the path, not the id</p>",
        "id": 171689407,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564060095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 171689435,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564060117
    },
    {
        "content": "<p>the path <code>Extension.valueQuantity.value</code> establishes the implicit type slice. We never said that you could establish it by id</p>",
        "id": 171689469,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564060149
    },
    {
        "content": "<p>value[x] establishes the implicit type slices</p>",
        "id": 171689773,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564060351
    },
    {
        "content": "<p>id is just referring to what's already there.</p>",
        "id": 171690033,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564060561
    },
    {
        "content": "<p>For T6 - a \"closed\" slicing needs to enumerate all the possible slices, no?</p>",
        "id": 171690123,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564060612
    },
    {
        "content": "<p>Agree with Grahame that the paths drive, not the ids.  You'd have to have an element with \"Extension.valueQuantity\" or \"Extension.value[x]:valueQuantity\" because neither of those is explicitly declared in the snapshot of what you're inheriting from - and every element must be explicitly declared either in the parent snapshot or the child differential.</p>",
        "id": 171690281,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1564060749
    },
    {
        "content": "<p>I am not sure about T6. I don't want to have to enumerate all the slices. The snapshots will be massive</p>",
        "id": 171690397,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564060817
    },
    {
        "content": "<p>So if I have a single element like this, it's ok?</p>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;id&quot;:&quot;Extension.value[x]:valueQuantity.value&quot;,\n  &quot;path&quot;:&quot;Extension.valueQuantity.value&quot;,\n  &quot;min&quot;:1\n}\n</pre></div>\n\n\n<p>I'm fine with that.</p>",
        "id": 171690631,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564061035
    },
    {
        "content": "<p>yes</p>",
        "id": 171690734,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564061127
    },
    {
        "content": "<p>To be clear: that's the <em>only</em> element in the differential.</p>",
        "id": 171690824,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564061189
    },
    {
        "content": "<p>Of course, sdf-14 makes this distinction moot since a well-formed id is required on all elements, snapshot and differential.</p>",
        "id": 171692290,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564062275
    },
    {
        "content": "<p>For T6 - a closed slicing (to me) means that all valid slices have been enumerated, no more are allowed. If you then only enumerate one, type, even though the value[x] type list allows more, the slicing validation won't (only one slice, instance isn't in that slice, error).</p>",
        "id": 171692874,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564062607
    },
    {
        "content": "<p>Not sure in practice that means that much bloat in snapshot - only would be sizeable when the type choice list is long (e.g. Extension.value[x]), the allowed types aren't constrained, and one type has a constraint. Seems like a rare intersection...</p>",
        "id": 171692960,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1564062686
    },
    {
        "content": "<p>if you think that the slices should be enumerated if the type list is restricted, then you'll also think that they should be enumerated when the type list is not restricted</p>",
        "id": 171725769,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564087294
    },
    {
        "content": "<p>ok I updated t29 and t43 - and added clones. The generation now blows up if the slice names are wrong in the differential. I actually changed t29, so that difference needs checking please</p>",
        "id": 171730052,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564090892
    },
    {
        "content": "<blockquote>\n<p>I disagree. I've seen nothing to say that this is the case. It's driven by the path, not the id</p>\n</blockquote>\n<p>My validator totally disregards the id - it's driven by the path to recognize slices. Then again, I full rely on the snapshot as generated by <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span>  - I don't know how much he used the id to generate the snapshot....</p>",
        "id": 171932206,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1564394227
    },
    {
        "content": "<p>The .NET SnapshotGenerator generates Element Ids, but does not use/depend on them.</p>",
        "id": 171934808,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1564397001
    },
    {
        "content": "<p>i.e. elements are identified strictly by list order, Path &amp; SliceName.</p>",
        "id": 171934883,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1564397072
    },
    {
        "content": "<p>Same as java</p>",
        "id": 171935197,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1564397355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> FYI I've managed to pass all your SnapGen unit tests - with some discrepancies/corrections. Tomorrow I will create and submit a report of all my findings.</p>",
        "id": 173557492,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1566232034
    },
    {
        "content": "<p>ok thanks</p>",
        "id": 173567972,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566240102
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, I took all the SnapshotGenerator unit tests from HAPIFHIR github repo:<br>\n<a href=\"https://github.com/hapifhir/org.hl7.fhir.core/tree/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation\" target=\"_blank\" title=\"https://github.com/hapifhir/org.hl7.fhir.core/tree/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation\">https://github.com/hapifhir/org.hl7.fhir.core/tree/master/org.hl7.fhir.r5/src/test/resources/snapshot-generation</a><br>\nand re-implemented and executed them on the .NET FHIR library (R4 development branch):<br>\n<a href=\"https://github.com/FirelyTeam/fhir-net-api/tree/develop-r4\" target=\"_blank\" title=\"https://github.com/FirelyTeam/fhir-net-api/tree/develop-r4\">https://github.com/FirelyTeam/fhir-net-api/tree/develop-r4</a><br>\nYou can find the results here:<br>\n<a href=\"https://gist.github.com/wmrutten/acc5e24601eb74df582ff39b21f41efc\" target=\"_blank\" title=\"https://gist.github.com/wmrutten/acc5e24601eb74df582ff39b21f41efc\">https://gist.github.com/wmrutten/acc5e24601eb74df582ff39b21f41efc</a></p>",
        "id": 173664806,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1566312575
    },
    {
        "content": "<p>Next, I am going to look into the type slicing change as we discussed during DevDays US in Redmond; specifically to always emit a type slicing entry to the snapshot component, even when omitted from the differential. May have to update our SnapGen logic.</p>",
        "id": 173665164,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1566312753
    }
]