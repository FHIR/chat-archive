[
    {
        "content": "<p>Is there some reason that snapshots include id and extension children of backbone element but not on other elements?  At the root of a resource this makes sense since id, extension, and modifierExtension are included via base inheritance (id here is <a href=\"http://Resource.id\" target=\"_blank\" title=\"http://Resource.id\">Resource.id</a> and not <a href=\"http://Element.id\" target=\"_blank\" title=\"http://Element.id\">Element.id</a>).  But BackboneElement is just a type and seems to be treated specially in that its children are included.  This is in contrast to say Identifier elements where children are not included.</p>",
        "id": 153835906,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467303248
    },
    {
        "content": "<p>In other worlds, why is:<br>\n<code>ValueSet.compose.extension</code> in the snapshot and,<br>\n<code>ValueSet.identifier.extension</code> not?</p>",
        "id": 153835948,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467321731
    },
    {
        "content": "<p>because ValueSet.identifier is a reference to another type which does include those in it's snapshot. If you look at the profiles that walk into a data type, you'll see that in that case, those elements are included. </p>",
        "id": 153835960,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467322382
    },
    {
        "content": "<p>ValueSet.identifier references the Identifier type, and Identifier.extension is included in that type profile's snapshot. Similarly...<br>\nValueSet.compose references the BackboneElement type, and BackboneElement.extension is included in *that* type's snapshot.<br>\nI don't see the difference....</p>",
        "id": 153835966,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467325833
    },
    {
        "content": "<p>I'm ok with \"just because\"....but as I'm working out the canonical snapshot rules, I need to understand...</p>",
        "id": 153835967,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467325878
    },
    {
        "content": "<p>well, the reason they're different is because the snapshot walks into the backbone elmenet, but doesn't walk into the identifier</p>",
        "id": 153835968,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467325994
    },
    {
        "content": "<p>yeah...I don't \"walk\" into either type in my case...</p>",
        "id": 153835969,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467326045
    },
    {
        "content": "<p>you can tell whether a type is being referenced or desribed by whether there's any child elements. No child elements - see the type for furthe details. Child details: ignore the type, and use what's inline</p>",
        "id": 153835970,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467326067
    },
    {
        "content": "<p>e.g. I don't generate the compose.extension because I don't retrieve the type's children...</p>",
        "id": 153835971,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467326078
    },
    {
        "content": "<p>you have to walk into a backbone element, because it's abstract </p>",
        "id": 153835973,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467326086
    },
    {
        "content": "<p>I would only include compose.extension if the local profile includes extension in the differential</p>",
        "id": 153835974,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467326152
    },
    {
        "content": "<p>then you're wrong, I'm afraid. </p>",
        "id": 153835975,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467326176
    },
    {
        "content": "<p>:) maybe...I don't see clear reasoning why BackboneElement's children get included.</p>",
        "id": 153835976,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467326240
    },
    {
        "content": "<p>And Element's children don't.</p>",
        "id": 153835977,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467326262
    },
    {
        "content": "<p>in the snapshot, it's all or nothing - either you reference a type, or you inline the type - all of the type </p>",
        "id": 153835978,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467326275
    },
    {
        "content": "<p>Ah....</p>",
        "id": 153835979,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467326304
    },
    {
        "content": "<p>if you can find anywhere where the profiles don't follow that rule, then I'll have to fix something</p>",
        "id": 153835980,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467326305
    },
    {
        "content": "<p>we don't want to have the situation where you inline of some a type and then something has to figure out what the intent is in overlap/gap somewhere. it's all or nothing</p>",
        "id": 153835981,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467326368
    },
    {
        "content": "<p>ok....that really sucks for my tooling, but now I understand....</p>",
        "id": 153835982,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467326368
    },
    {
        "content": "<p>value[x] variations don't count?</p>",
        "id": 153835983,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467326478
    },
    {
        "content": "<p>not sure what you mean by 'count' there. </p>",
        "id": 153835984,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467326550
    },
    {
        "content": "<p>For instance, if my extension allows boolean and dateTime types for value[x], and I include a valueBoolean element in my differential, should the snapshot also create a valueDateTime element?</p>",
        "id": 153836061,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1467384209
    },
    {
        "content": "<p>that's a good question. I'm not really sure. </p>",
        "id": 153836122,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467409256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> What does Forge do with this?</p>",
        "id": 153846168,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1472770791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191351\">@Chris Grenz</span> Forge development branch now uses the FHIR.NET API for snapshot expansion.<br>\nHere's an example of the currently generated snapshot:<br>\n<a href=\"https://simplifier.net/noAuditLog/noAuditEvent\" target=\"_blank\" title=\"https://simplifier.net/noAuditLog/noAuditEvent\">https://simplifier.net/noAuditLog/noAuditEvent</a><br>\nAs you can see, currently the generated snapshot always expands elements of type BackboneElement to include extension and modifierExtension child elements.<br>\nWe received some feedback from Simplifier customers about this. Apparently our users are considering this to be noise and would like these elements to be hidden in the rendering. From a user's perspective, a rendering only needs to include these elements if the profile actually contains associated differential constraints:<br>\n- If  the profile introduces one or more specific extensions<br>\n- If the profile specifies custom cardinality on the extension element (e.g. extension.max = 0)<br>\n- If the profile specifies custom constraints on the extension slicing entry (e.g. slicing.rules = closed)</p>",
        "id": 153846250,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1472810627
    },
    {
        "content": "<p>How you display the snapshot is up to you, but the snapshot itself definitely needs to contain them.  (And it would be good to have at least an indicator that elements from abstract parents have been hidden.)</p>",
        "id": 153846274,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1472823852
    },
    {
        "content": "<p>Also, keep in mind that it's not just extensions that can get profiled.  I would say that if there are *any* constraints/overrides on an element (even adding a usage note to \"id\"), you should make sure you render it.</p>",
        "id": 153846276,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1472823911
    },
    {
        "content": "<p>Agree with Lloyd - if it's a valid child of an element that is being expanded, it must be included.</p>",
        "id": 153846281,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1472827108
    },
    {
        "content": "<p>Indeed, I see why. So the logic to hide/show \"noisy\" infrastructural elements should be incorporated into the rendering logic.</p>",
        "id": 153846293,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1472835032
    },
    {
        "content": "<p>e.g. if the element is inherited from DomainResource/BackboneElement and it has no associated differential constraints, then hide the element in the UI.</p>",
        "id": 153846294,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1472835102
    }
]