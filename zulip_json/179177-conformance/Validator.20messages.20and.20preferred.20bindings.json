[
    {
        "content": "<p>The DocumentReference resource has a preferred binding for DocumentReference.content.format. If you validate a resource that has some other code not in the preferred binding, you get this:</p>\n<blockquote>\n<p>The Coding provided is not in the value set <a href=\"http://hl7.org/fhir/ValueSet/formatcodes\" target=\"_blank\" title=\"http://hl7.org/fhir/ValueSet/formatcodes\">http://hl7.org/fhir/ValueSet/formatcodes</a>, and a code is recommended to come from this value set</p>\n</blockquote>\n<p>An IG  can redefine that, and define another binding. All good.</p>\n<p>However: Whenever you validate, the validation validates not only against the profile you ask to validate against, but also against the base specification. That has the consequence that irrespective of the validity of the code in the profile, you're always going to get the message from the base spec. </p>\n<p>I have a consumer who is confused by the message, and asking what they can do to conform the specification</p>",
        "id": 186135215,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579556431
    },
    {
        "content": "<p>I</p>",
        "id": 186135218,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579556433
    },
    {
        "content": "<p>m not sure how to handle this</p>",
        "id": 186135220,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579556436
    },
    {
        "content": "<p>My first take on it is that if it's an example or preferred binding in the base that is being bound differently in the profile, that the validation message against the base spec shouldn't be generated (or if generated, not shown).  The base message won't add anything except confusion (as seems to be the case here).</p>",
        "id": 186135628,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1579556928
    },
    {
        "content": "<p>the validator doesn't know, when validating against the base spec, what other validations are in it's future...</p>",
        "id": 186135961,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579557340
    },
    {
        "content": "<p>I would be happy with a IG specific override to hide the message. This would be an explicit act to hide the message based on doing the analysis that it is indeed working as expected. Note that the info message should indicate that the value was found within the IG specified valueset... right?   <br>\n However the message being thrown isn't a warning, so I can't hide it... right?</p>",
        "id": 186136478,
        "sender_full_name": "John Moehrke",
        "timestamp": 1579557900
    },
    {
        "content": "<p>I've been suffering from this for a few years.  My ideal is that if we validate against a profile of the resource, we don't validate against the resource itself (on the grounds that the profile will inherit all of the rules from the resource except for those it's allowed to override, in which case, we shouldn't be checking against those rules.</p>",
        "id": 186136586,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1579558016
    },
    {
        "content": "<blockquote>\n<p>However the message being thrown isn't a warning, so I can't hide it... right?</p>\n</blockquote>\n<p>its only an information in the java validator. But i agree a misleading one.</p>",
        "id": 186137521,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1579559092
    },
    {
        "content": "<blockquote>\n<p>I've been suffering from this for a few years.  My ideal is that if we validate against a profile of the resource, we don't validate against the resource itself (on the grounds that the profile will inherit all of the rules from the resource except for those it's allowed to override, in which case, we shouldn't be checking against those rules.</p>\n</blockquote>\n<p>+1<br>\nIf a snapshot of the profile is provided this is easy to do (if none is provided, we create one). But i think the problem starts when we chain validators like hapi does.</p>",
        "id": 186137603,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1579559196
    },
    {
        "content": "<p>given the nature of 'preferred' it seems like it would be better to make it a warning against a profile that differs, rather than an instance. But I don't really know how to do that - checking a value set against a value set and deciding whether they are meaningfully different is harder</p>",
        "id": 186137614,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579559214
    },
    {
        "content": "<p>one validator checks against base, one against the profile(s)</p>",
        "id": 186137615,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1579559214
    },
    {
        "content": "<p>the java validator does both internally. Partly because I am not fully confident in the snapshot generator enforcing the logical rules correctly. not all of them are in it's perview to resolve</p>",
        "id": 186137643,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579559278
    },
    {
        "content": "<p>Hmmm then we would some logic to look at all terminology bindings, and create a list of  bindings which the validation against core should skip</p>",
        "id": 186137732,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1579559396
    },
    {
        "content": "<p>skip: example-&gt;\"*,\" preferred-&gt; required/extensible</p>",
        "id": 186137817,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1579559480
    },
    {
        "content": "<p>already skips example</p>",
        "id": 186137885,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579559530
    },
    {
        "content": "<p>preferred only should produce an error if the derived profile is binding it to example. Which is a check on the profile, not the instance.</p>",
        "id": 186137910,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1579559579
    },
    {
        "content": "<blockquote>\n<p>preferred only should produce an error if the derived profile is binding it to example</p>\n</blockquote>\n<p>?</p>",
        "id": 186137937,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579559635
    },
    {
        "content": "<p>the core resource has a preferred binding, a profile on this resource type binds to example. But that's an error which should be thrown when validating the profile, not a instance.</p>",
        "id": 186138027,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1579559725
    },
    {
        "content": "<p>Could also be thrown when an instance is validated, to be safe.</p>",
        "id": 186138113,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1579559803
    },
    {
        "content": "<p>required should be always checked, extensible as well</p>",
        "id": 186138127,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1579559828
    },
    {
        "content": "<p>so the only new check would be to have a look at the same ValueSet binding in the base and the derived profile an add it to a skipIt List for the Validator validating against the base StructureDefinition</p>",
        "id": 186138228,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1579559956
    },
    {
        "content": "<p>The warning should be thrown if you're validating against the core resource.  The issue is if you're validating against a profile, you shouldn't be spitting out issues related to validating against the resource</p>",
        "id": 186138632,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1579560370
    },
    {
        "content": "<p>it's almost like you didn't read what I wrote</p>",
        "id": 186139557,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579561432
    },
    {
        "content": "<p>I don't know what you mean by \"meaningfully different\".  If the new value set expansion contains codes that aren't in the original preferred value set expansion, that's a meaningful difference.  If you can't expand either (or it's two expensive to check), you can spit out an info message saying that when checking the profile.</p>",
        "id": 186141689,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1579564276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> i also now have a customer which really dislikes these validation messages as they are confusing users. I gave the issue another thought and came up with a very basic solution:<br>\nAdding a mode to the Validator which allows you to:</p>\n<ul>\n<li>validate everything and report all messages as it is now </li>\n<li>when validating against a base spec profile, suppress infos </li>\n<li>when validating against a base spec profile, suppress infos &amp; warnings</li>\n</ul>",
        "id": 190646306,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1584277257
    },
    {
        "content": "<p>We have an ability now to suppress specific infos and warnings present in a text file - and those can be generic messages or messages tied to a specific location.</p>",
        "id": 190651389,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1584285237
    },
    {
        "content": "<p>This is only possible in the IG creator, i'm talking about the Validator.</p>",
        "id": 190652969,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1584287526
    },
    {
        "content": "<p>Also this is based on a String comparison, which works in an stable IG but would be hard to implement for Validations where we don't know the Instance which a user will be validating.</p>",
        "id": 190653363,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1584288106
    },
    {
        "content": "<p>I believe the validator lets you pass in a file too.  Agree that if you don't know the instance, the best you could do is suppress an error independently of where it appears, but that's still better than suppressing all of them</p>",
        "id": 190666514,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1584305744
    },
    {
        "content": "<p>what specifically is it that they dislike?</p>",
        "id": 190666944,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1584306308
    },
    {
        "content": "<p>They dislike that they get infos and warnings for preferred and extensible bindings against the base profile.</p>",
        "id": 190715663,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1584362153
    },
    {
        "content": "<p>Even if their specific profile has a required binding</p>",
        "id": 190715743,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1584362197
    },
    {
        "content": "<p>I think there's universal dislike for that.  When there's a child profile, we shouldn't be validating the constraints of the parent resource.  But that's not so straight-forward to do.</p>",
        "id": 190720393,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1584364741
    },
    {
        "content": "<p>thats why i proposed my simple approach above.</p>",
        "id": 190721447,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1584365303
    },
    {
        "content": "<p>Adding a mode to the Validator which allows you to:</p>\n<p>validate everything and report all messages as it is now<br>\nwhen validating against a base spec profile, suppress infos<br>\nwhen validating against a base spec profile, suppress infos &amp; warnings</p>",
        "id": 190721500,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1584365334
    },
    {
        "content": "<p>so there can be an option to skip the adding of a info/warning created when validating against a base profile</p>",
        "id": 190721706,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1584365411
    },
    {
        "content": "<p>Ideally the validator should be rewritten with layers knowing of each other. But that would be a lot! of of work. So i'm searching for a quick and a little dirty solution.</p>",
        "id": 190748710,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1584377069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191451\">Patrick Werner</span> <a href=\"#narrow/stream/179177-conformance/topic/Validator.20messages.20and.20preferred.20bindings/near/190721500\" title=\"#narrow/stream/179177-conformance/topic/Validator.20messages.20and.20preferred.20bindings/near/190721500\">said</a>:</p>\n<blockquote>\n<p>Adding a mode to the Validator which allows you to:</p>\n<p>validate everything and report all messages as it is now<br>\nwhen validating against a base spec profile, suppress infos<br>\nwhen validating against a base spec profile, suppress infos &amp; warnings</p>\n</blockquote>\n<p>would this make sense to add to the Validatorcode (as an optional mode) ?</p>",
        "id": 192311780,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1585599396
    }
]