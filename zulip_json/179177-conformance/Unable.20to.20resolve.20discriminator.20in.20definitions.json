[
    {
        "content": "<p>In the CG IG we have the following discriminator on Observation.derivedFrom: Slice: Unordered, Open by type:resolve(), pattern:resolve().code</p>",
        "id": 197536113,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1589453157
    },
    {
        "content": "<p>(<a href=\"http://build.fhir.org/ig/HL7/genomics-reporting/haplotype.html\">http://build.fhir.org/ig/HL7/genomics-reporting/haplotype.html</a>)</p>",
        "id": 197536161,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1589453171
    },
    {
        "content": "<p>We want to discriminate by type as derivedFrom can be an Observation or a MolecularSequence, pattern:resolve().code is used to discriminate the different Observations</p>",
        "id": 197536214,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1589453222
    },
    {
        "content": "<p>When trying to validate examples against the profile we are getting: <code>  Error @ Bundle.entry[9].resource.ofType(Observation).derivedFrom[0] (line 428, col14) : Unable to resolve discriminator in definitions: code</code></p>",
        "id": 197536314,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1589453285
    },
    {
        "content": "<p>For the slices we added Pattern like: <code>{\"coding\":[{\"system\":\"http://loinc.org\",\"code\":\"69548-6\"}]}</code><br>\n<a href=\"/user_uploads/10155/20A8FhV70LNQkFSdwbhqByFb/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/20A8FhV70LNQkFSdwbhqByFb/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/20A8FhV70LNQkFSdwbhqByFb/image.png\"></a></div>",
        "id": 197536784,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1589453594
    },
    {
        "content": "<p>But these patterns aren't applied to the slices by the IG publisher.</p>",
        "id": 197536817,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1589453612
    },
    {
        "content": "<p>do you want to make a validator test case? (valid and invalid examples, and profile)</p>",
        "id": 197538001,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1589454566
    },
    {
        "content": "<p>will do</p>",
        "id": 197538973,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1589455258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179177-conformance/topic/Unable.20to.20resolve.20discriminator.20in.20definitions/near/197538001\">said</a>:</p>\n<blockquote>\n<p>do you want to make a validator test case? (valid and invalid examples, and profile)</p>\n</blockquote>\n<p>do you think the content in the pattern column is correct? Was not sure if can do a pattern like this on a reference.</p>",
        "id": 197539044,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1589455317
    },
    {
        "content": "<p>looks ok to me</p>",
        "id": 197539770,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1589455878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span> Is <code>Open by type:resolve()</code> somehow valid (or is that just a typo)?  As far as I know, slicing.discriminator.type must be \"value | exists | pattern | type | profile\".</p>",
        "id": 197556872,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1589464317
    },
    {
        "content": "<p>thats how it is rendered, in JSON:</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"s2\">&quot;slicing&quot;</span> <span class=\"err\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">&quot;discriminator&quot;</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n              <span class=\"nt\">&quot;type&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">,</span>\n              <span class=\"nt\">&quot;path&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;resolve()&quot;</span>\n            <span class=\"p\">},</span>\n            <span class=\"p\">{</span>\n              <span class=\"nt\">&quot;type&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;pattern&quot;</span><span class=\"p\">,</span>\n              <span class=\"nt\">&quot;path&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;resolve().code&quot;</span>\n            <span class=\"p\">}</span>\n          <span class=\"p\">],</span>\n          <span class=\"nt\">&quot;rules&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;open&quot;</span>\n        <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 197557358,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1589464517
    },
    {
        "content": "<p>OK, yeah.  Never mind.  It looked strange to me for some reason when you posted that - but I have the same in my IG - except that I use $this.resolve() as the path. :)</p>",
        "id": 197557896,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1589464736
    },
    {
        "content": "<p>Sometimes the double use of 'type' can be confusing (particularly if you read it wrong!).</p>",
        "id": 197558232,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1589464882
    },
    {
        "content": "<p>oh yes!</p>",
        "id": 197570862,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1589469584
    }
]