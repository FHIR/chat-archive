[
    {
        "content": "<p>Just to make sure that I understand the approach to using prefetch. If we wanted to provide everything that the payer would need in the initial request, we would have the following prefetch query (white space used for readability):</p>\n<div class=\"codehilite\"><pre><span></span>ServiceRequest?id={{context.orders.ServiceRequest.id}}&amp;_include=ServiceRequest:insurance\n  &amp;_include:recurse=Coverage:payor\n  &amp;_include=ServiceRequest:performer:PractitionerRole\n  &amp;_include:recurse=PractitionerRole:practitioner\n  &amp;_include:recurse=PractitionerRole:location\n</pre></div>\n\n\n<p>In this case, we would be including information about the payer by ServiceRequest.insurance -&gt; Coverage.payor -&gt; Organization. We would use PractitionerRole to record the provider requested to perform the service as well as the location for the service to be performed at.</p>\n<p>Is this the expected approach?</p>",
        "id": 153984339,
        "sender_full_name": "Andy Gregorowicz",
        "timestamp": 1533837474
    },
    {
        "content": "<p>Yes, that's probably the route we'll go.  It reduces the redundancy and keeps the number of variables passed back to a minimum</p>",
        "id": 153984381,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1533839170
    },
    {
        "content": "<p>OK. The only downside that I'm not sure we can get around is that the ServiceRequest will also be returned in the prefetch. It will be a duplicate of what is in <code>context.orders</code>. I don't know of a way to get around that using FHIR search. We may just have to live with it.</p>",
        "id": 153984383,
        "sender_full_name": "Andy Gregorowicz",
        "timestamp": 1533839336
    },
    {
        "content": "<p>Yeah.  It's not optimal, but the alternative is a much more complex context variable approach.  It's also a bit messy in that the same Coverages, Practitioners, etc. could be present in multiple variables - some in the MedicationRequest results, some in the ServiceRequest results, some in the DeviceRequest results, etc.  However, it'll work and it requires the least imposition on the existing capabilities, so it's a reasonable starting point.  After connectathon we can figure out whether more/different is needed.</p>",
        "id": 153984395,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1533840733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> I don't know what _config.yml is</p>",
        "id": 153984404,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1533841315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> Agree. We can go with what we have now. In the future, it seems like it would be nice if CDS Hooks had a way to let you in prefetch resolve a reference from a resource in the context. It's a further complication on the template syntax though (as you mention).</p>",
        "id": 153984427,
        "sender_full_name": "Andy Gregorowicz",
        "timestamp": 1533843659
    },
    {
        "content": "<p>Yes.  The ideal would be able to point into references and amalgamate them across resource types even if the paths are different.  That'd be a complex beast to describe though.  And the CDS Hook fallback is \"just write the queries you want and run them\".  The more complicated we make stuff, the more pushback there'll be.</p>",
        "id": 153984429,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1533843854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  the Jekyll config file : <a href=\"https://jekyllrb.com/docs/configuration/\" target=\"_blank\" title=\"https://jekyllrb.com/docs/configuration/\">https://jekyllrb.com/docs/configuration/</a></p>",
        "id": 153984471,
        "sender_full_name": "Eric Haas",
        "timestamp": 1533846010
    },
    {
        "content": "<p>The IG publisher doesn't touch that</p>",
        "id": 153984508,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1533848688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>   OK I thought maybe is overridden since it doesn't seem to do anything for me when like when I tried to use it for global parameters like baseurl</p>",
        "id": 153984516,
        "sender_full_name": "Eric Haas",
        "timestamp": 1533849360
    },
    {
        "content": "<p>It may just not be 'visible' to Jekyll.  I'll try to play with it this weekend.</p>",
        "id": 153984522,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1533852082
    }
]