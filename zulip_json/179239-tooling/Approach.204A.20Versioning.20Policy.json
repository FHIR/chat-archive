[
    {
        "content": "<p>Place holder for discussion to come</p>",
        "id": 199679294,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591219795
    },
    {
        "content": "<p>see <a href=\"#narrow/stream/179240-Announcements/topic/Release.20R4A\">https://chat.fhir.org/#narrow/stream/179240-Announcements/topic/Release.20R4A</a></p>",
        "id": 199687572,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591225159
    },
    {
        "content": "<p>The original proposal for an interim R4 release was for 4.1 - that would be 4.1.0. 4.1.0 has already existed as the version of the current build after 4.0.0 was published, but there is no remaining evidence of that except in my memory (and maybe a few others).</p>\n<p>So we could release an interim release as 4.1.0. Tools and reference implementations would need to know what 4.1.0 is, and how it does and doesn't differ from 4.0.0. My own intention would be to drop support for 4.0 internally and just treat it was 4.1.0 (though still supporting it as a stated version)</p>\n<p>But we have no way to get to a 4.1.0 release under the current versioning rules, since there would be at least 4 staging releases to get there. The current versioning rules don't give us space to do it. So we'd have to change them somehow, and at least the following tools/libraries would need to handle this somehow:</p>\n<ul>\n<li>NPM package specification </li>\n<li>FHIR core / Validator / IG publisher </li>\n<li><a href=\"http://tx.fhir.org\">tx.fhir.org</a> + <a href=\"http://packages.fhir.org\">packages.fhir.org</a></li>\n<li>reference implementations (dotnet etc)</li>\n<li>Forge? Simplifier?</li>\n</ul>",
        "id": 199688020,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591225486
    },
    {
        "content": "<p>I'm not sure how we would go about this.</p>",
        "id": 199688032,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591225498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> <span class=\"user-mention\" data-user-id=\"203235\">@Ward Weistra</span> <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> <span class=\"user-mention\" data-user-id=\"191335\">@Martijn Harthoorn</span> <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> <span class=\"user-mention\" data-user-id=\"248736\">@Mark Iantorno</span> at a minimum should all comment on this please</p>",
        "id": 199688140,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591225575
    },
    {
        "content": "<p>Just making sure I understand that initial question. Are you saying that we would need staging releases and each one would sort of take up a version slot at the minor position? so the lowest number version we could get to through our existing process would be 4.5.0?</p>",
        "id": 199688439,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1591225829
    },
    {
        "content": "<p>we're using 4.X for the r5 development - so we've already published 4.2 and 4.4</p>",
        "id": 199688620,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591226010
    },
    {
        "content": "<p>we could intersperse r5 and r4a, so that 4.6 is the first draft of what would become r4a</p>",
        "id": 199688691,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591226044
    },
    {
        "content": "<p>that sounds like the worst of all worlds to me</p>",
        "id": 199688700,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591226054
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 199688701,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1591226058
    },
    {
        "content": "<p>I'm just trying to understand whether/why all of our staging releases require minor version numbers.</p>",
        "id": 199688733,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1591226088
    },
    {
        "content": "<p>because they represent changes to structures and so are not wire format compatible, and that's how the tools decide what versions they support</p>",
        "id": 199688809,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591226154
    },
    {
        "content": "<p>we could change that. If we wanted. It would mean that the tools couldn't work that way. But whatever we do breaks the tools somehow</p>",
        "id": 199688891,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591226188
    },
    {
        "content": "<p>we could say that the first draft of 4a would be 4.0.2, for instance. But the tools would look at that and say 'under the current rules, that's means it's a patch on 4.0.1 and wire format compatible'. And, btw, we already patched 4.0.0 to 4.0.1</p>",
        "id": 199689040,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591226247
    },
    {
        "content": "<p>and the tools know that they treat 4.0.0 as 4.0.1 for all purposes except for a few since it's a patch change</p>",
        "id": 199689060,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591226271
    },
    {
        "content": "<p>and we do have requests for 4.0.2 already too. So we'd be interspersing something different</p>",
        "id": 199689125,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591226299
    },
    {
        "content": "<p>Yeah this doesn't feel right either.</p>",
        "id": 199689207,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1591226389
    },
    {
        "content": "<p>If we're going to break things for sure, now would be a good time to seriously consider semantic versioning...  In most people's semantic versioning implementations, pre-releases are done via labels.  So, for example, if we were marching toward 5.0.0, we would have started at 5.0.0-alpha.1, then 5.0.0-alpha.2 (or 5.0.0-beta.1), and ballot versions would be 5.0.0-rc.1, etc.  I'm not sure that helps us right now w/ the 4.x stuff though.</p>",
        "id": 199689211,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1591226395
    },
    {
        "content": "<p>But if we followed that, then the rules for official releases are still very tight and predictable.  And rules for pre-releases would basically be \"expect that anything can change\".</p>",
        "id": 199689444,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1591226514
    },
    {
        "content": "<p>That'd let us squeeze in 4.1.0-alpha1 etc as as needed.</p>",
        "id": 199689497,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1591226531
    },
    {
        "content": "<p>I don't think I understand completely... How long lived would this version be? Would it be the only r4 version? Or would we now be maintaining both an r4 and the r4-alpha as well?</p>",
        "id": 199690130,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1591227117
    },
    {
        "content": "<p>well, we do use semantic versioning as we can but we did not adopt the pre-release system since that's never quite what we were doing</p>",
        "id": 199690357,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591227321
    },
    {
        "content": "<p>but it still doesn't solve the problem we have now, either</p>",
        "id": 199690372,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591227342
    },
    {
        "content": "<p>because every version would be 4.1.0-something, or 5.0.0-something and there'd never be anything else other than them and 4.1.0 and 5.0.0</p>",
        "id": 199690448,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591227395
    },
    {
        "content": "<p>Well, in theory you still might have 4.1.1 and 5.0.1 too (official patch releases).  But semantic versioning is pretty clear that minor increments represent backwards-compatible changes (i.e., no breaking changes) and thus far FHIR has not followed that.  As Josh noted, if we did adopt it, it gives us a way to get to 4.1.0 while also having staging releases (using the labels).  But given the current state of things, it would still be messy for a while.</p>",
        "id": 199690914,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1591227833
    },
    {
        "content": "<p>as I said, we use it as we can. What we actually have - and document - is publication.major.minor.patch. So it's semver, but off by one, and with a publication cycle added.</p>\n<p>We used to have patch, which was the svn version number (e.g. v1.0.0-6850 for <a href=\"http://hl7.org/fhir/2015Sep/\">http://hl7.org/fhir/2015Sep/</a>), but we lost that when we moved to github, and so we dropped it quietly, though some of you might remember how discomforted I was about that</p>",
        "id": 199692287,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591228991
    },
    {
        "content": "<p>so 4.1 is actually first major release after R4.</p>",
        "id": 199692328,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591229031
    },
    {
        "content": "<p>I agree semver would be a great solution, as I understand it. So, for going from R5 to R6:</p>\n<ul>\n<li>R5 gets released: <code>5.0.0</code> (after coming from <code>5.0.0-prerelease6</code> or <code>5.0.0-rc7</code>)</li>\n<li>Development for a patch release releases an evaluation version: <code>5.0.1-prerelease1</code> or <code>5.0.1-rc1</code></li>\n<li>R5 patches (backwards compatible bugfixes) are released: <code>5.0.1</code></li>\n<li>Development for new feature release releases an evaluation version: <code>5.1.0-prerelease1</code> or <code>5.1.0-rc1</code></li>\n<li>R5 gets more (backwards compatible) functionality (like the current proposal, assuming this is all backwards compatible): <code>5.1.0</code></li>\n<li>Development for R6 releases an evaluation version: <code>6.0.0-prerelease1</code> or <code>6.0.0-rc1</code> or <code>6.0.0-wgm042022</code></li>\n</ul>",
        "id": 199712327,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1591255065
    },
    {
        "content": "<p>Anything with <code>-whatever</code> behind it will be treated as a prerelease version. So, it's easy for all tooling to warn users when they are depending on those (especially if non-prerelease newer versions are available).</p>",
        "id": 199712787,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1591255428
    },
    {
        "content": "<p>Similarly, we can warn any user which doesn't use the latest patch or minor version and inform when there is a newer major version of the FHIR core package (and any other package) they are depending on.</p>",
        "id": 199712924,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1591255531
    },
    {
        "content": "<p>For R4 we currently seem to have <a href=\"http://hl7.org/fhir/directory.html\">the following official version numbers</a>:</p>\n<ul>\n<li><code>4.0.0</code> - Archived</li>\n<li><code>4.0.1</code> - FHIR Release #4</li>\n<li><code>4.2.0</code> - FHIR Release #5: Preview #1</li>\n<li><code>4.4.0</code> - FHIR Release #5: Preview #2</li>\n</ul>\n<p>In published packages there's</p>\n<ul>\n<li><code>4.0.1</code> for <a href=\"https://simplifier.net/packages/hl7.fhir.r4.core\">hl7.fhir.r4.core</a>.</li>\n<li><code>4.2.0</code> and <code>4.4.0</code> for hl7.fhir.r5.core. Both not marked as a prerelease in the semver way. (And not in the registry, since the FHIR versions aren't supported yet)</li>\n</ul>",
        "id": 199713338,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1591255871
    },
    {
        "content": "<p>Since there's no published packages for hl7.fhir.r4.core beyond <code>4.0.1</code> we could just release <code>4.1.0-rc1</code> or <code>4.1.0</code> next. Going forward we could avoid reusing <code>4.2.0</code> and <code>4.4.0</code> as a version number for R4 (just skip over those minor versions if we get there).</p>\n<p>And unlist the current two packages for hl7.fhir.r5.core and republish them as:</p>\n<ul>\n<li><code>4.2.0</code> -&gt; <code>5.0.0-prerelease1</code></li>\n<li><code>4.4.0</code> -&gt; <code>5.0.0-prerelease2</code></li>\n</ul>",
        "id": 199714199,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1591256654
    },
    {
        "content": "<p>so what is the problem with 4A being 4.5 or 4.6? Are we all that wrapped up in worrying that people are going to see  this and bother us wondering where 4.1, 4.2, 4.3, and 4.4 went? Surely we can take that kind of questions.</p>",
        "id": 199745948,
        "sender_full_name": "John Moehrke",
        "timestamp": 1591277268
    },
    {
        "content": "<p>or what about 4.10.0   really mess with their minds</p>",
        "id": 199746037,
        "sender_full_name": "John Moehrke",
        "timestamp": 1591277298
    },
    {
        "content": "<p>We could go all Apple on them and start using roman numerals.</p>",
        "id": 199748640,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1591278307
    },
    {
        "content": "<p>or microsoft and use the year -- 2020 will already be remembered</p>",
        "id": 199748730,
        "sender_full_name": "John Moehrke",
        "timestamp": 1591278350
    },
    {
        "content": "<p>Indeed, we could divorce the 'marketing version number' from the actual under the hood version number.<br>\nI do think <code>4.5.0</code> not being based on <code>4.4.0</code> and being closer in similarity to <code>4.0.1</code> to be very confusing.</p>",
        "id": 199757737,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1591282102
    },
    {
        "content": "<blockquote>\n<p>or microsoft and use the year -- 2020 will already be remembered</p>\n</blockquote>\n<p>Not entirely sure that we want FHIR associated with 2020 myself...</p>",
        "id": 199953308,
        "sender_full_name": "David Hay",
        "timestamp": 1591412771
    },
    {
        "content": "<p>why not? It's a great year. Going awesomely well</p>",
        "id": 199999963,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591489745
    },
    {
        "content": "<p>Memorable, at least...</p>",
        "id": 200027587,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1591541780
    },
    {
        "content": "<p>I think package <a href=\"https://simplifier.net/packages/hl7.fhir.core/4.0.1/files/123234\"><code>hl7.fhir.core 4.0.1</code></a>(<a href=\"http://hl7.org/fhir/R4/package.tgz\">http://hl7.org/fhir/R4/package.tgz</a>) illustrates why it would be preferable to have the patch version part for packages still available for package-only fixes: It has dependencies on hl7.fhir.<strong>r3</strong>.core etc. which clearly were meant to be hl7.fhir.<strong>r4</strong>.core. But now, if we want to keep package version and FHIR version in sync, we can't update that package without a new FHIR release. <a href=\"http://jira.hl7.org/browse/FHIR-27792\">FHIR#27792</a></p>",
        "id": 200185981,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1591684255
    },
    {
        "content": "<p>sigh. Typo I made yesterday :-(</p>",
        "id": 200187145,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591685761
    },
    {
        "content": "<p>they should most definitely be r4 not t3</p>",
        "id": 200187213,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591685816
    },
    {
        "content": "<p>actually, it wasn't yesterday</p>",
        "id": 200187322,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591685925
    },
    {
        "content": "<p>Yes, it seems the decision we made years ago that the R5 \"WGM previews\" are still numbered 4.x are a cause of this versioning problem .  Grahame - we did thoroughly discuss this back then - what were our reasons to chose 4.x for early R5 releases, do you remember?</p>",
        "id": 200203237,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1591696958
    },
    {
        "content": "<p>Note that none of this of course fixes the problem around publishing a new version - we get pushback that we automatically upgrade 4.0.0. to 4.0.1 in Forge, so whatever guise we choose to publish R4A under, it will feel like publishing a new (major) version I am afraid.</p>",
        "id": 200203446,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1591697123
    },
    {
        "content": "<p>I wonder if some of it can be solved by allowing IGs to publish new resources.  I know this will hurt, since we have this fixed ResourceType and FhirType enumerations everywhere, but I could then publish at least those new medication resources as an addon to 4.0.1, instead of a new version.</p>",
        "id": 200203621,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1591697232
    },
    {
        "content": "<p>(also, problably you need to add some of the newer types to existing Resource Reference typerefs - well, there might be more of these \"little\" issues)</p>",
        "id": 200203711,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1591697290
    },
    {
        "content": "<p>it won't be little issues</p>",
        "id": 200208917,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591701060
    },
    {
        "content": "<blockquote>\n<p>what were our reasons to chose 4.x for early R5 releases</p>\n</blockquote>\n<p>So that r5 would be 5.0.0</p>",
        "id": 200296926,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591740214
    },
    {
        "content": "<p>the fundamental problem is that semver doesn't have a versioning strategy for forking, which was what 4A is</p>",
        "id": 200297026,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591740254
    },
    {
        "content": "<p>e.g. in classic semver, someone asks you to make a breaking change to 3.1.3, after you've gone and already published 3.1.4, 3.1.5, and all of 3.2.0 -&gt; 3.2.8 (and 3.4.x and 4.0.x as well)</p>",
        "id": 200297113,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591740327
    },
    {
        "content": "<p>what will the version be?</p>",
        "id": 200297129,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591740338
    },
    {
        "content": "<p>doesn't that depend on whether you're introducing the same change across all of your versions?  i.e. 3.1.6, 3.2.9, 3.4.(x+1), 4.0.(x+1)?</p>",
        "id": 200297929,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1591740858
    },
    {
        "content": "<p>what if you're not</p>",
        "id": 200298909,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591741499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203235\">@Ward Weistra</span> I can fix the package at <a href=\"http://hl7.org/fhir/R4/package.tgz\">http://hl7.org/fhir/R4/package.tgz</a> but that won't matter, right? is there a way forward to fix this without a whole new release of R4?</p>",
        "id": 200299927,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591742190
    },
    {
        "content": "<blockquote>\n<p>e.g. in classic semver, someone asks you to make a breaking change to 3.1.3, after you've gone and already published 3.1.4, 3.1.5, and all of 3.2.0 -&gt; 3.2.8 (and 3.4.x and 4.0.x as well)</p>\n</blockquote>\n<p>In theory (or perhaps in an ideal world), that's not a request that someone makes.  If 3.1.x are truly <em>patch</em> releases, and 3.x are truly <em>backwards-compatible</em> minor releases, there is no reason for someone to insist on being on 3.1.3.  If semver is working, anyone on 3.1.3 <em>should</em> be able to be on the latest 3.x (3.4?) without any trouble. So a breaking change would go to the next major number.  BUT... that is an ideal world, and that does fit better for software than for specs, so... point taken.</p>",
        "id": 200312120,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1591753719
    },
    {
        "content": "<p>4.a.0 ?</p>",
        "id": 200313319,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1591755189
    },
    {
        "content": "<p>I think the mixing of build versions (4.2.0, 4.4.0) and release versions (4.0.0, 4.0.1) is at the root of the problem.</p>\n<p>What if, in addition to the CI Build master branch, we had a publish branch, and each PSS manages its own branch,<br>\n periodically merging their changes into master, and when ready to ballot, merge into the publish branch, then create the ballot branch from there for ballot reconciliation, and eventually publish the new release.</p>\n<p>I understand that this probably is not taking into account any tooling issues, but is it too hard of a problem to solve?</p>\n<p>Just to figure out some of these things for myself, I am trying to build the R4Final branch locally, and then will attempt to apply the 4A candidates to that branch to see if the result is worth the effort...</p>",
        "id": 200318226,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1591762710
    },
    {
        "content": "<p>well, you've mixed up different issues there - one is the process for how to achieve something, and the other is the way to label what is achieved</p>",
        "id": 200383622,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591772231
    },
    {
        "content": "<p>4.a.0 is a serious proposal.<br>\nAs things stand, the first two \"digits\" of the x.y.z really indicate the Major version of FHIR (since changes to either x or y indicate  a breaking change).<br>\nA consequence of this is that order is unimportant (for machines). I would further posit that nobody necessarily depends on the semver elements being numbers.<br>\nIntroducing 'a' not only escapes the strangeness of 4A being closer to 4.0.1 than 4.2.0 or 4.4.0, but it also resonates with \"4A\" and clearly distinguishes it as different</p>",
        "id": 200383727,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1591772331
    },
    {
        "content": "<p>I don't believe it's totally true that order is not important. It's truer that we could define it as not important, maybe</p>",
        "id": 200383876,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591772483
    },
    {
        "content": "<p>But I think it creates my some tooling difficulties, in principle, because I can code to specific decisions and use order dependent logic for whether they apply</p>",
        "id": 200383945,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591772527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I think the only real solution would be releasing a 4.0.2 package and separating package (patch) version from FHIR release... Using the R4.0 FHIR standard? Then take the latest 4.0.x version of <code>hl7.fhir.r4.core</code>.</p>\n<p>I think semver supports branching, as long as you only use the stable version numbers for stable releases and every backwards incompatible change ups the major version (Or maybe we could stretch that to 'up the major or minor' version for FHIR).</p>\n<ul>\n<li>So, any technical correction version of FHIR 4.0 comes out as 4.0.x. And since those changes are backwards compatible users can always use the latest.</li>\n<li>Anyone introducing backwards incompatible changes compared to the latest stable release should up the major (or minor) version number, eg 4.1.x. And if releases are made that are not yet stable (like for WGMs) they should get labeled as such: 4.1.x-preview1 or 4.1.x-mybranch. The latter part should only be removed when its ready for public release.</li>\n</ul>",
        "id": 200398605,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1591784210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> I wonder whether standard NPM servers or semver libraries would be able to handle characters in the version numbers (except in the postfix part).</p>",
        "id": 200398782,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1591784343
    },
    {
        "content": "<blockquote>\n<p>I think semver supports branching</p>\n</blockquote>\n<p>As long as you only branch in some ways</p>",
        "id": 200407527,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591791182
    },
    {
        "content": "<p>and we are talking about making the latest changes in a way that doesn't meet those conditions</p>",
        "id": 200407558,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591791214
    },
    {
        "content": "<p>but I think that the proposal isn't going to fly; there's too many problems. I think we'll just STU the first publication of R5 and publish a reconciled version as the STU for 4B and also the first normative ballot for R5</p>",
        "id": 200407671,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591791282
    },
    {
        "content": "<p>this doesn't mean that we can't revise the way we do versioning, but it does mean that the branching thing is not the driver</p>",
        "id": 200407703,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1591791308
    },
    {
        "content": "<p>At some point, it might be interesting to consider adopting something like the Linux kernel version numbering convention, where an even-numbered minor version indicates a stable release, and  an odd-numbered minor version indicates a development release.</p>",
        "id": 204718469,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1595449624
    },
    {
        "content": "<p>well, we're pretty much following that now.</p>",
        "id": 204720350,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1595450627
    },
    {
        "content": "<p>though it's not formal</p>",
        "id": 204720366,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1595450636
    }
]