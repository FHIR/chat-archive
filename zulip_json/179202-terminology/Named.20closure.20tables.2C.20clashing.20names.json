[
    {
        "content": "<p>Generally in fhir when a client needs to create a resource on a server, the POST pattern is most widely supported because servers can manage resource IDs; this avoids issues where two different clients each want to create a <code>Patient/123</code> but mean different things by it.</p>\n<p>I am just reading the definition for the <code>$closure</code> operation and it strikes me that this operation effectively creates (pseudo-resource-like) state on a server, where this state is identified entirely by a client supplied \"name\" parameter (also called \"scope\" elsewhere in the docs). It's always possible that different clients might try to manage their own closure tables while happening to assign the same name (e.g., \"my-diabetes-codes\"). I am guessing this has not been a problem in practice?</p>",
        "id": 230245744,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1615736203
    },
    {
        "content": "<p>Yes, interesting that the server maintains client state. I'm not sure how widely this operation has been implemented, but a Server is expected to return an HTTP Status of 400 with an OperationOutcome Resource if there is an issue with a Closure Table Name, and that would include using the name of an existing table when attempting to initialize a new one. See <a href=\"http://hl7.org/fhir/terminology-service.html#closure\">http://hl7.org/fhir/terminology-service.html#closure</a></p>",
        "id": 230263892,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1615751551
    },
    {
        "content": "<p>Indeed. Would be interested to hear who has implemented this server-wise and who has consumed it client-wise.</p>",
        "id": 230267375,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1615755387
    },
    {
        "content": "<p>We've implemented it and have used it with our FHIR analytics platform, Pathling (<a href=\"https://pathling.csiro.au\">https://pathling.csiro.au</a>)<br>\nWe haven't run into this problem, but using uuids or similarly generated names, I wouldn't expect to.</p>",
        "id": 230270143,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1615758200
    },
    {
        "content": "<p>Yeah, asking clients to generate IDs within a namespace they control (or with sufficient entropy) helps here.  Very cool to see Pathling BTW!</p>",
        "id": 230275843,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1615761384
    },
    {
        "content": "<p>Is there a way to initialize the closure table with a specific valueset?</p>",
        "id": 277568189,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1648957648
    },
    {
        "content": "<p>Not directly; you'd need to expand it then initialise with the result.</p>\n<p>But that seems like an unusual question -- why would you want to do this?  Normally the concepts you add to a closure table relate to those in a search query and in actual resources (<code>Observation.code</code> for example)</p>",
        "id": 277577686,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1648964050
    },
    {
        "content": "<p>Will chat tomorrow with you about it if you've got some time.</p>",
        "id": 277583483,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1648967419
    },
    {
        "content": "<p>bring a legacy database into the picture? I could see this as a useful idea</p>",
        "id": 277661782,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1649021023
    },
    {
        "content": "<p>That's roughly what was trying to do. Was going to create a valueset that has the values used in our database so that the terminology server knows that set of values.</p>",
        "id": 277681606,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1649047804
    },
    {
        "content": "<p>Nice.  It would be interesting to then maintain that ValueSet incrementally.  I'm thinking that FHIRPatch would work if it is only adding new concepts</p>",
        "id": 277685258,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1649051916
    }
]