[
    {
        "content": "<p>A code system can define filters as well as properties; a value set can apparently reference both of these through <code>ValueSet.compose.include.filter</code>, which can \"Select codes/concepts by their properties (including relationships)\"</p>\n<ol>\n<li>\n<p>Does this imply that it's invalid to define a filter and a property with the same name? Otherwise how do you resolve the difference in case of conflict? Should there be a constraint to this effect?</p>\n</li>\n<li>\n<p>When filtering in a ValueSet based on a CodeSystem property... those <a href=\"http://build.fhir.org/codesystem-definitions.html#CodeSystem.concept.property.value_x_\">property values can be codings, booleans, date times, strings, integers, decimals, etc</a>. What syntax is used to query for boolean properties or or codings or for dates? Is the syntax based on FHIR search parameters? Are prefixes like <code>gt</code> allowed? I am having trouble finding details on this.</p>\n</li>\n</ol>",
        "id": 276556642,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1648167524
    },
    {
        "content": "<ol>\n<li>No.  If you only declare a property, then there's a (limited) default set of filters for that property.  If you additionally declare a filter then that specifies what's available.</li>\n<li>Most are straightforward - boolean is true / false, integers are sequences of digits, optional sign, etc Mostly we rely on HAPI's default behaviour for a String passed to the single-argument constructor of the primitive type class: e.g., <code>new DateTimeType(propValue)</code><br>\nFor Coding we opted for system|code as the syntax.  I recall discussing it here somewhere, but I don't believe it's in the spec itself.</li>\n</ol>",
        "id": 276558229,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1648168789
    },
    {
        "content": "<p>Thanks! and for date times, are they iso8601 strings? Is matching based on timespan containment?</p>",
        "id": 276558799,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1648169293
    },
    {
        "content": "<p>It ultimately uses <code>BaseDateTimeType.parse()</code> which accepts a range of formats (not documented except by code).<br>\nOur matching is just based on the string representation.  However, having just looked a little more closely, I see that the only impact of the parsing is to \"validate\" the string's format and that our matching is exactly against the original string value in the CodeSystem.</p>",
        "id": 276559799,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1648170262
    },
    {
        "content": "<p>Also, there's no range/less/greater querying available via filters</p>",
        "id": 276559913,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1648170330
    },
    {
        "content": "<p>Interesting -- thanks again for the details here!</p>",
        "id": 276560110,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1648170557
    },
    {
        "content": "<p>I think the reasoning is that DateTimes in terminology are controlled and, within a single code system, have consistent format, precision and interpretation, so more sophisticated handling is not really needed.<br>\nHowever, SNOMED has a dateTime property (<code>effectiveTime</code>) which we handle specially because of ECL where you can do before/after queries, but the timezone is fixed (Zulu/UTC).</p>",
        "id": 276560114,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1648170564
    },
    {
        "content": "<p>Thanks! I'm a bit uneasy in my understanding of what gets modeled by filters and what gets modeled by properties. It seems like there is gray area -- like, a filter asking about \"code: is-a, op: =, value: 123\" vs asking about \"code: concept, op: is-a, value: 123\". (I'm trying to imagine that every concept has a fixed list of attributes and relationships -- together, \"properties\" -- and ideally filters could be expressed as queries against that list.)</p>\n<p>Am I right in thinking that not every property is currently addressable through the filters mechanism? Like, should a server explicitly list properties in the filters array of a CodeSystem if it plans to allow filtering by them?</p>",
        "id": 276563948,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1648174338
    },
    {
        "content": "<p>Gino recently pointed me at <a href=\"https://build.fhir.org/codesystem.html#filters\">https://build.fhir.org/codesystem.html#filters</a> which partially addresses the question. I submitted  <a href=\"http://jira.hl7.org/browse/FHIR-36643\">FHIR-36643</a> to request that \"exists\" and \"regex\" should have standard filter semantics for all properties, in addition to the currently defined \"=\" and \"in\".</p>\n<p>It would also be good to standardize a \"concept\" filter supporting \"child-of\", \"is-a\", \"descendant-of\" and \"generalizes\", similar to what is described at <a href=\"https://build.fhir.org/snomedct.html#filters\">https://build.fhir.org/snomedct.html#filters</a> but applying to any CodeSystem with hierarchical concepts.</p>",
        "id": 276656799,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1648231067
    },
    {
        "content": "<p>To this end I've also submitted <a href=\"http://jira.hl7.org/browse/FHIR-36644\">FHIR-36644</a></p>",
        "id": 276658054,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1648231606
    }
]