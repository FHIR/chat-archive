[
    {
        "content": "<p>What is the meaning of the property.subproperty return paramters in the $lookup-operation<br>\n<a href=\"http://build.fhir.org/codesystem-operations.html#lookup\" target=\"_blank\" title=\"http://build.fhir.org/codesystem-operations.html#lookup\">http://build.fhir.org/codesystem-operations.html#lookup</a><br>\nThe CodeSystem doesn't have such a property...</p>",
        "id": 153918809,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1510302586
    },
    {
        "content": "<p>These sub-properties are principally for returning SNOMED CT attributes contained in relationship groups. Understand that there isn't a sub-property element in the CodeSystem resource, not sure if one is required because at this level it's not easy to find common patterns across different code systems.</p>",
        "id": 153918815,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1510305274
    },
    {
        "content": "<p>we're trialling stuff. might be an extension or not, and probably will be consistent</p>",
        "id": 153918824,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1510308314
    },
    {
        "content": "<p>I think I understand how FHIR sub-properties can express SNOMED CT relationship groups. However, all examples I can find of sub-properties in the CodeSystem resource don't use the <code>property.code</code> field which, according to the most recent spec, has a <code>1..1</code> cardinality. What is meant to go in the <code>property.code</code> field for these grouped sub-properties?</p>",
        "id": 173072985,
        "sender_full_name": "Elise Myers",
        "timestamp": 1565654684
    },
    {
        "content": "<p>That's an interesting conundrum; for SNOEMD CT I would expect that the natural value would be the SNOMED code for |Role group| 609096000 - <a href=\"http://ontoserver.csiro.au/shrimp/?concept=609096000\" target=\"_blank\" title=\"http://ontoserver.csiro.au/shrimp/?concept=609096000\">http://ontoserver.csiro.au/shrimp/?concept=609096000</a></p>",
        "id": 173087508,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1565675346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224108\">@Elise Myers</span>  I don't think I'm following how examples of \"sub-properties\" aren't using CodeSystem.property.code, since it is required.  I must be missing something.  Which examples are you referring to?</p>",
        "id": 173111723,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565702015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span>  In the XML on this ticket <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14329\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14329\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14329</a> , you can see that the property parameters and their sub-properties utilize parts and have name values but no codes. In figure 2 in these docs about modeling SNOMED CT <a href=\"https://confluence.ihtsdotools.org/display/DOCEG/Relationship+Group\" target=\"_blank\" title=\"https://confluence.ihtsdotools.org/display/DOCEG/Relationship+Group\">https://confluence.ihtsdotools.org/display/DOCEG/Relationship+Group</a> , it looks like the yellow ovals are sub-property codes, the blue boxes are sub-property values and the where the encompassing property.code should be is where that empty circle is to the left.</p>",
        "id": 173127899,
        "sender_full_name": "Elise Myers",
        "timestamp": 1565713114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span>  that makes sense to me. But then, would a single concept with multiple grouping of sub-properties have multiple properties with that same code?</p>",
        "id": 173128218,
        "sender_full_name": "Elise Myers",
        "timestamp": 1565713340
    },
    {
        "content": "<p>Yes, they would, and that is exactly how the underlying OWL modelling in SNOMED CT works.<br>\nHowever, I'm not convinced that the 1..1 cardinality for code is correct, nor that this necessarily is the right / best way to expose the SNOMED sub-properties.</p>",
        "id": 173146011,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1565726511
    },
    {
        "content": "<p>Two questions for me...<br>\na. When should a Role Group be included - only if all properties are requested (i.e. where the  property is 410662002 |Concept model attribute|), or also if any individual property or combination of properties is requested?<br>\nb. When a Role Group is included, should that be regarded as the property and all members of that Role Group as sub-properties?<br>\nLooking at an extreme case - 86299006 |Tetralogy of Fallot (disorder)| This concept has 4 Role Groups consisting of the same combination of property types with varying values. How useful is it to include the Role Groups if only a single property (e.g. in this case 246454002 |Occurrence (attribute)|) is requested? It so happens that 246454002 |Occurrence (attribute)| = 255399007 |Congenital (qualifier value)|  is a member of all 4 Role Groups for this concept - does adding the Role Group in this example provide any value other than (maybe) indicating that repeating the same property/value combination 4 times isn't a server bug?</p>",
        "id": 173181005,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1565767656
    },
    {
        "content": "<p>This question really does open up a can of worms.<br>\nLet's start by considering some simple cases :</p>\n<ul>\n<li><code>76069003 |Disorder of bone|</code>, which has a |Finding site| of |Bone structure|, and</li>\n<li><code>125605004 |Fracture of bone|</code>, which has a |Morphology| of |Fracture| and also a |Finding site| of |Bone structure|, with the two things \"grouped\" together.</li>\n</ul>\n<p>One might expect a <code>$lookup</code> on the first to return property[0].code=|Finding site| and property[0].valueCode=|Bone Structure|.<br>\nWhat about the second?  Since they are grouped, then they should be represented as sub-properties with property[0].subproperty[0].code = |Morphology|, property[0].subproperty[0].valueCode = |Fracture|, property[0].subproperty[1].code = |Finding site|, and property[0].subproperty[1].valueCode = |Bone structure|.</p>\n<p>But actually, the SNOMED attribute |Finding site| is always grouped, even if there's only a single relationship, so the first should really be property[0].subproperty[0].code = |Finding site|, and property[0].subproperty[0].valueCode = |Bone structure|.</p>\n<p>And then we need to address the mandatory property[0].code value for both of these - i.e., what are they sub-properties of?  Since July 2013 SNOMED has had 609096000 |Role group|, so this seems a reasonable option.</p>\n<p>But now we look at the <code>$lookup</code> operation itself.  It's up to the server to decide what (sub-)properties are returned unless one or more <code>property</code> parameters are suppled.  How does a client request a sub-property?  Do they just use the only parameter that's available?  If so, then what happens when you do a <code>$lookup</code> on <code>125605004 |Fracture of bone|</code> with property=|Finding site| -- should both sub-properties <em>always</em> be returned, or should that be at the server's discretion?  Furthermore, what should happen for a <code>$lookup</code> for property <code>609096000 |Role group|</code>?</p>",
        "id": 173271503,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1565854500
    },
    {
        "content": "<p>my take on this is that this is delegated to a SNOMED CT implementation guide, which we are working on</p>",
        "id": 173276575,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565861093
    },
    {
        "content": "<p>Also note that a server can return additional properties than those listed if it wants</p>",
        "id": 173276606,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565861136
    },
    {
        "content": "<p>We discussed this issue in this week's SNOMED on FHIR meeting and decided to try and get more opinions by carrying on the debate here!</p>\n<p>My inclination, where an individual property belonging to an explicit Role Group is requested, is to return all members of that Role Group as sub-properties of that group in order to provide the full context in which the requested property belongs.</p>",
        "id": 173276974,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1565861589
    },
    {
        "content": "<p>ok, so given that, I'll engage seriously. What kind of client wants to decompose this stuff fully?</p>",
        "id": 173276994,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565861631
    },
    {
        "content": "<p>and if it does, why?</p>",
        "id": 173277058,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565861692
    },
    {
        "content": "<p>I would think that the only client interested in this stuff can parse an expression itself</p>",
        "id": 173277078,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565861714
    },
    {
        "content": "<p>Good question, I raised that in the meeting. Traversing a complex parameters resource with numerous parts, etc. isn't a trivial exercise....and yes, I also suggested that I'd be inclined to request the Necessary Normal Form Expression and parse that. Others weren't totally convinced by that.</p>",
        "id": 173277261,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1565861937
    },
    {
        "content": "<p>I'll look forward to hearing why....</p>",
        "id": 173277394,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565862117
    }
]