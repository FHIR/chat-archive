[
    {
        "content": "<p>This possibility was news to me - is it actual permitted and, if so, good practice?...</p>\n<p><a href=\"https://fhirblog.com/2017/01/10/extending-a-required-valueset-binding/\">https://fhirblog.com/2017/01/10/extending-a-required-valueset-binding/</a></p>",
        "id": 227669837,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1614199730
    },
    {
        "content": "<p>I would think that as long as the code in the extension is a <em>more specific</em> representation of the <em>required</em> code, then it's fine (and maybe even good).  But if the code in the extension really represents something <em>different</em> than the selected required code, that would be problematic -- as systems that don't understand the extension may act on the non-extension code.</p>",
        "id": 227676070,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614202169
    },
    {
        "content": "<p>Overall, I think this makes sense and is what I would expect.  Maybe I missed it, but I don't see the actual extension definition, though.  And you will need that to understand that in the instance the valueCode of 'stopped' is from the \"<a href=\"http://hl7.org/fhir/ValueSet/example-inline\">http://hl7.org/fhir/ValueSet/example-inline</a>\" value set (in the STU3 example) and ultimately from the code system \"<a href=\"http://fhir.hl7.org.nz/CodeSystem/ms-code\">http://fhir.hl7.org.nz/CodeSystem/ms-code</a>\".  I would also think that the examples would be clearer if the value set canonical url was the same in both the STU2 and STU3 examples (and also remove the extraneous trailing spaces in the urls in a couple of places).  And I agree with Chris's concern - but that's mostly a mapping issue, and when you have to make a mapping (which you are doing in this case even if it's not explicit) you should always follow the rule that you make the most accurate (closest) mapping that you can. <span class=\"user-mention\" data-user-id=\"191321\">@David Hay</span></p>",
        "id": 227677100,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1614202556
    },
    {
        "content": "<p>In this case the intent is to represent the 'identifier' of a user in a message exchange system that is very widely used in NZ. Here's the current SD: <a href=\"http://build.fhir.org/ig/HL7NZ/nzbase/branches/master/StructureDefinition-edi-address.html\">http://build.fhir.org/ig/HL7NZ/nzbase/branches/master/StructureDefinition-edi-address.html</a>. Note that the context is currently on the root - the question we're debating is whether it is better suited against .telecom elements (like Practitioner.telecom) as it's not unlike using email / fax / etc to communicating with the recipient (though better of course :) </p>\n<p>The actual value we'd be 'overriding' is likely to be  'other'. (if the proposal is accepted)</p>",
        "id": 227678372,
        "sender_full_name": "David Hay",
        "timestamp": 1614203140
    },
    {
        "content": "<p>Just to be clear - the post was written over 3 years ago - it isn't what we're currently considering...</p>",
        "id": 227679898,
        "sender_full_name": "David Hay",
        "timestamp": 1614203817
    },
    {
        "content": "<p>I wouldn't frame this as \"extending\".  You're still using the base value set.  You're just choosing to send a translation for a 'code' element.  (If the 'required' binding was on a CodeableConcept, you could just send another coding.  There's certainly no issue with sending extensions or sending additional Codings, but with a 'required' binding, you MUST pick a code from the value set in order to have the element.</p>",
        "id": 227691782,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614208644
    },
    {
        "content": "<p>Agree.</p>",
        "id": 227694042,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1614209786
    },
    {
        "content": "<p>Seems like quite an opaque  solution and I'm not sure if it's possible to do this in the C# library where codes used in required bindings are implemented as enumerated types. <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> ?</p>",
        "id": 227696234,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1614210966
    },
    {
        "content": "<p>Yes you can still do it, as there's always the pair property with the fhir datatype<br>\nAddress.UseElement.GetExtension(...)</p>",
        "id": 227699435,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1614212875
    },
    {
        "content": "<p>How about 'refining' a binding?</p>",
        "id": 227700855,
        "sender_full_name": "David Hay",
        "timestamp": 1614213886
    },
    {
        "content": "<p>So how would the extension look if added to this telecom element?</p>\n<p>&lt;telecom&gt;<br>\n   &lt;system value=\"other\" /&gt;<br>\n   &lt;value value=\"someedi\" /&gt;<br>\n   &lt;use value=\"work\" /&gt;<br>\n&lt;/telecom&gt;</p>",
        "id": 227700913,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1614213920
    },
    {
        "content": "<p>deleted</p>",
        "id": 227702497,
        "sender_full_name": "David Hay",
        "timestamp": 1614215056
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 227702573,
        "sender_full_name": "David Hay",
        "timestamp": 1614215110
    },
    {
        "content": "<p>how about:</p>\n<div class=\"codehilite\"><pre><span></span><code>    &lt;telecom&gt;\n        &lt;system value=&quot;other&quot;&gt;\n            &lt;extension url=&quot;http://hl7.org.nz/fhir/StructureDefinition/edi-address&quot;&gt;\n                &lt;valueCode value=&quot;edi-number&quot;/&gt;\n            &lt;/extension&gt;\n        &lt;/system&gt;\n        &lt;value value=&quot;someedi&quot;/&gt;\n    &lt;/telecom&gt;\n</code></pre></div>",
        "id": 227703826,
        "sender_full_name": "David Hay",
        "timestamp": 1614216020
    },
    {
        "content": "<p>Validator didn't complain. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span><br>\nWill see how easy it is to fish out of an instance.  Rather looks, and smells, like another form of extensible binding to me.</p>",
        "id": 227704609,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1614216681
    },
    {
        "content": "<p>well, I'm far from qualified to argue the minutiae of terminology, but I would suggest that it is more like specialization -  in oo terms anyway...</p>",
        "id": 227709892,
        "sender_full_name": "David Hay",
        "timestamp": 1614221073
    },
    {
        "content": "<p>it shouldn't be too surprising that an extension can look like an extensible binding</p>",
        "id": 227712128,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614223295
    },
    {
        "content": "<p>Main difference is that with an extensible binding, you don't have to include a code from the base value set if none of them apply. With a required binding, if none of them apply, you can't send the element at all (let alone with an extension on it).</p>",
        "id": 227713825,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614225018
    },
    {
        "content": "<p>Well this is not how \"extending\" a required binding was allowed when VSAC chose to use new codes for the filter operator value set, per <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> when I just asked earlier this week. Seems to me that any value set can be \"extended\" whenever a user wants to do so.  Look at the example VSAC just included in the announcement for support of intensional includes: <a href=\"https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.11.20.9.46\">https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.11.20.9.46</a>.  So how in any way would this align with the discussion so far? Bottom line is there is little computable control on terminology in FHIR.</p>",
        "id": 227714818,
        "sender_full_name": "Robert McClure",
        "timestamp": 1614226067
    },
    {
        "content": "<p>the problem with the VSAC case was that none of the underlying codes were appropriate, so I didn't suggest this approach. I certainly thought about it</p>",
        "id": 227715069,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614226317
    },
    {
        "content": "<p>Actually, one fo the \"extensions\" was flat out incorrect and is ==is-a. The other should also not be allowed given there is a known transformation for child-of so don't make up something that exists. Instead do the accepted allowed transform and work to add the concepts as we are doing. That is what we have always said to do but FHIR makes doing the incorrect thing possible, so others will always choose that easy solution.</p>",
        "id": 227715559,
        "sender_full_name": "Robert McClure",
        "timestamp": 1614226852
    },
    {
        "content": "<p>We're not talking about revising the base value set, we're talking about a derived profile wanting to extend the set of codes available.  And that's not allowed.  If the binding is required, you're stuck with the defined value set and can't introduce new codes except as translations (and MUST have one of the approved codes to include the element at all).</p>",
        "id": 227715655,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614226958
    },
    {
        "content": "<p>lloyd, if people keep giving alternative solutions \"thumb-up\" and the validator allows it, then it's never going to be a real restriction. And that leads to the situation that VSAC followed, which also passes validation.</p>",
        "id": 227715812,
        "sender_full_name": "Robert McClure",
        "timestamp": 1614227131
    },
    {
        "content": "<p>The validator won't allow a coded element with a required binding that doesn't have a code from the value set.  David's solution lets you send an extra code.  It doesn't allow bypassing the need to send a code from the base value set.  I don't know what VSAC did, but if you didn't send one of the allowed codes, then you couldn't have sent the element at all.  (Which is fine, if it's not a mandatory element.)</p>",
        "id": 227715979,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614227299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191367\">Brian Postlethwaite</span> <a href=\"#narrow/stream/179202-terminology/topic/Extending.20a.20Required.20ValueSet.20BInding/near/227699435\">said</a>:</p>\n<blockquote>\n<p>Yes you can still do it, as there's always the pair property with the fhir datatype<br>\nAddress.UseElement.GetExtension(...)</p>\n</blockquote>\n<p>I'm not sure as ContactPoint.ContactPointSystem does not have an AddExtension() method. OTOH ContactPoint.ContactPointUse does have that method.</p>",
        "id": 228349204,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1614657335
    },
    {
        "content": "<p>Problem solved - needed to use the ContactPoint.ContactPointSystem.SystemElement property (FHIR Code), rather than ContactPoint.ContactPointSystem.System (.NET enum)! Should have read Brian's reply more carefully (MTF).</p>",
        "id": 228680252,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1614810492
    }
]