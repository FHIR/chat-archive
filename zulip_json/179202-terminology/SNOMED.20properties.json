[
    {
        "content": "<p><a href=\"http://hl7.org/fhir/snomedct.html#props\" target=\"_blank\" title=\"http://hl7.org/fhir/snomedct.html#props\">http://hl7.org/fhir/snomedct.html#props</a> defines a set of properties for the SNOMED CT code system.  Specifically, it says that \"any SNOMED CT relationships where the relationship type is subsumed by Attribute (246061005) automatically become properties\".</p>\n<p>However, it goes on to say that the (input) property code is a human readable code, eg 'Laterality' or 'Procedure site - Direct', but that in the output Parameter, the (sub)property code is the associated URI (<a href=\"http://snomed.info/id/272741003\" target=\"_blank\" title=\"http://snomed.info/id/272741003\">http://snomed.info/id/272741003</a> and <a href=\"http://snomed.info/id/405813007\" target=\"_blank\" title=\"http://snomed.info/id/405813007\">http://snomed.info/id/405813007</a> respectively).</p>\n<p>This raises a number of issues:<br>\n1. Having the input and output codes being different means a client needs to maintain its own mapping between them in order to interpret the results.<br>\n2. What is the canonical mapping from the SCTID to the human readable string?  It's not the Fully Specified Name (because it's missing the text in brackets at the end), and using the preferred term means that it can change depending on the locale (eg Swedish and other translations).<br>\n3. What are the reasons for not just adopting the approach of using the SCTID for the input and output code values?</p>\n<p>There are other corner-cases to consider as well:<br>\n4. Not all descendants of Attribute are \"real\" properties eg, |Concept history atttribute|, |Concept model attribute|, and |Unapproved attribute| - are these valid and if so how should they be interpreted? (Note, not all non-leaf descendants are abstract like these three. For example |Procedure site| has two child attributes)<br>\n5. If so, then Attribute (246061005) itself a valid property?<br>\n6. What about |Is a| - it's already covered by the parent and child properties and it is not a relationship in the same sense as the others<br>\n7. How should 609096000 | Role group | behave as an input property?</p>",
        "id": 153922465,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1512088156
    },
    {
        "content": "<p>Thus far, I haven't come across a requirement to request individual SCT attributes in a CodeSystem $lookup and would prefer an explicit property called 'attribute' that would return all defining relationships. Otherwise I agree with Michael Lawley that the SCTID should be used for both input and output attribute code values.</p>",
        "id": 153922515,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1512107549
    },
    {
        "content": "<p>My first cut at this actually used 246061005 to mean \"all of the (non-ISA) SNOMED relationships\", but we do have use-cases where people want only some of them</p>",
        "id": 153922524,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1512107840
    },
    {
        "content": "<p>There's another issue too - SNOMED CT-AU has decimal-valued properties and these aren't supported by $lookup</p>",
        "id": 153922526,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1512107892
    },
    {
        "content": "<blockquote>\n<p>There's another issue too - SNOMED CT-AU has decimal-valued properties and these aren't supported by $lookup</p>\n</blockquote>\n<p>Nasty!  Has the terminology world ever debated an alternative to the slightly Orwellian term 'non-ISA'?</p>",
        "id": 153922528,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1512108170
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14236\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14236\">GF#14236</a> created for the decimal issue</p>",
        "id": 153922540,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1512114449
    },
    {
        "content": "<p>These are good observations, Michael.  I think that the point about not being able to rely on the human readable string to define the property is definitely valid, and I also agree with using the SCTID for this (for code system defined properites we need to reference them the same way that the code system does).  It's also true that some of the descendants of Attribute (including Attribute itself and the other \"abstract\" descendants) are not really valid properties, and \"Is a\" is handed separately.  And \"Role group\" is also special in its own way.  But maybe we don't need to worry about that too much and assume that (at least for the most part) people won't try to use those descendants in ways that don't make sense (or, if they do, they'll need to figure that out)?  I agree with updating $lookup per <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14236\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14236\">GF#14236</a>.</p>",
        "id": 153922629,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1512155959
    },
    {
        "content": "<p>the problem with this is that some things that have concept ids are already fixed to FIR defined codes for cross-code system consistency</p>",
        "id": 153922840,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1512421560
    },
    {
        "content": "<p>Grahame, I'm not quite sure which \"this\" and the context for cross-code system consistency that  you are referring to here.  Can you clarify a bit?</p>",
        "id": 153922957,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1512480949
    },
    {
        "content": "<p>using snomed concept ids for relationships. I'll be face to face with <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> today - we'll grab some time to talk about it</p>",
        "id": 153923031,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1512500083
    },
    {
        "content": "<p>Sadly not - I was only able to do day 1 of the connectathon &amp; am back at home in Brisbane doing family stuff today</p>",
        "id": 153923056,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1512509620
    },
    {
        "content": "<p>oh. I wish you'd said yesterday....</p>",
        "id": 153923058,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1512509661
    },
    {
        "content": "<p>me too...</p>",
        "id": 153923059,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1512509794
    },
    {
        "content": "<p>It's too bad the face to face didn't happen, but we can keep discussing here.  And I do get the point about using the FHIR-defined codes (when they exist) for cross-code system consistency.  It seems to me that both could be used.  If you want to be general you can use a FHIR-defined standard property code (assuming that one exists for the relationship that you're interested in), or if you want to be specific to SNOMED CT you can use the sctid (or the url?).  Is that going to be a problem?</p>",
        "id": 153923091,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1512525397
    },
    {
        "content": "<p>If there are fixed cross-code system FHIR-defined property codes then naturally they should work. If there are also SNOMED relationship types that are equivalent then they should work too (with the SCTID), but I'm not sure what these might be (not parent/child, nor status).</p>\n<p>As an example of what Ontoserver currently does, see <a href=\"http://ontoserver.csiro.au/stu3-latest/CodeSystem/$lookup?system=http%3A%2F%2Fsnomed.info%2Fsct&amp;code=14207011000036103&amp;property=246061005&amp;property=version&amp;property=display&amp;_format=json\" target=\"_blank\" title=\"http://ontoserver.csiro.au/stu3-latest/CodeSystem/$lookup?system=http%3A%2F%2Fsnomed.info%2Fsct&amp;code=14207011000036103&amp;property=246061005&amp;property=version&amp;property=display&amp;_format=json\">http://ontoserver.csiro.au/stu3-latest/CodeSystem/$lookup?system=http%3A%2F%2Fsnomed.info%2Fsct&amp;code=14207011000036103&amp;property=246061005&amp;property=version&amp;property=display&amp;_format=json</a></p>\n<p>Note, Ontoserver does not return these relationship properties by default, but only on request using the <code>property</code> parameter. You can also request them all by specifying <code>246061005</code> (Attribute) as the property</p>",
        "id": 153923514,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1512687700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> the way that Ontoserver renders the attribute/values pairs, as two-part sub-properties, probably needs to be proposed as an addition to the specification (unless I've missed something).</p>",
        "id": 153923519,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1512691411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191364\">@Peter Jordan</span> How else would you do it?  Did you expect something like:</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"p\">{</span>\n         <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;property&quot;</span><span class=\"p\">,</span>\n         <span class=\"s2\">&quot;part&quot;</span> <span class=\"o\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n               <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;subproperty&quot;</span>\n               <span class=\"s2\">&quot;part&quot;</span> <span class=\"o\">:</span> <span class=\"p\">[</span>\n                  <span class=\"p\">{</span>\n                     <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;700000061000036106&quot;</span><span class=\"p\">,</span>\n                     <span class=\"s2\">&quot;valueCode&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;700031831000036109&quot;</span>\n                  <span class=\"p\">},</span>\n                  <span class=\"p\">{</span>\n                     <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span>\n                     <span class=\"s2\">&quot;valueCode&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;esomeprazole 20 mg enteric tablet, 14&quot;</span>\n                  <span class=\"p\">}</span>\n               <span class=\"p\">]</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">]</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">...</span>\n</pre></div>",
        "id": 153924401,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1513046927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> - maybe something like this...</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"nt\">&lt;parameter&gt;</span>\n        <span class=\"nt\">&lt;name</span> <span class=\"na\">value=</span><span class=\"s\">&quot;property&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;part&gt;</span>\n            <span class=\"nt\">&lt;name</span> <span class=\"na\">value=</span><span class=\"s\">&quot;code&quot;</span> <span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;valueCode</span> <span class=\"na\">value=</span><span class=\"s\">&quot;363705008&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/part&gt;</span>\n        <span class=\"nt\">&lt;part&gt;</span>\n            <span class=\"nt\">&lt;name</span> <span class=\"na\">value=</span><span class=\"s\">&quot;valueCode&quot;</span> <span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;valueCode</span> <span class=\"na\">value=</span><span class=\"s\">&quot;24184005&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/part&gt;</span>\n    <span class=\"nt\">&lt;/parameter&gt;</span>\n</pre></div>\n\n\n<p>I view it as a single property exposing a name/value pair - both of which happen to be coded values. I'm not quite sure how the notion of a sub-property arises but, as ever, will bow to your subject-matter expertise.</p>",
        "id": 153924407,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1513050721
    },
    {
        "content": "<p>The subproperty stuff encodes role grouping</p>",
        "id": 153924408,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1513052702
    },
    {
        "content": "<p>Couldn't role grouping numbers be <em>just</em> another part?</p>",
        "id": 153924409,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1513053051
    },
    {
        "content": "<p>Two problems:<br>\n1. exposing the the number-value of a role group is bad (an internal implementation detail that is too complex to expect people to process correctly)<br>\n2. How do you associate the group numbers with the property-value pairs?</p>",
        "id": 153924410,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1513053485
    },
    {
        "content": "<p>If the concept of grouping is too complex for clients to process correctly, isn't expecting them to parse a parameter--&gt;property--&gt;part--&gt;subproperty--&gt;part structure to identify groups, without a group identifier,  going to be even more problematic? Why not just add another part to parameter--&gt;property and treat the group number as a surrogate identifier - or leave the joys of grouping to the NormalForm property?</p>",
        "id": 153924443,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1513060212
    },
    {
        "content": "<p>The current approach with <code>subproperty</code> already does, I think, what's needed to make things simpler for clients -- it groups the actual attribute/value pairs together and hides the group numbers.  All a client needs to know at this point is that \"grouping\" is happening.</p>",
        "id": 153924598,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1513110619
    },
    {
        "content": "<p>Something is happening, but they don't know what it is - sounds like a Bob Dylan lyric.<br>\nMight be a case of trying both approaches and seeing what clients prefer?</p>",
        "id": 153924599,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1513110734
    },
    {
        "content": "<p>I think this concept is a useful one to illustrate why the grouping is needed:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n    <span class=\"s2\">&quot;resourceType&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Parameters&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;parameter&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;version&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;valueString&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;http://snomed.info/sct/32506021000036107/version/20171130&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;display&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;valueString&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Creation of connection from spinal syrinx&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;property&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;part&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;subproperty&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;part&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;code&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;260686004&quot;</span>\n                        <span class=\"p\">},</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;129284003&quot;</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">},</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;subproperty&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;part&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;code&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;363704007&quot;</span>\n                        <span class=\"p\">},</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;280401006&quot;</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;property&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;part&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;subproperty&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;part&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;code&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;260686004&quot;</span>\n                        <span class=\"p\">},</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;360240009&quot;</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">},</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;subproperty&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;part&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;code&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;363700003&quot;</span>\n                        <span class=\"p\">},</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;75797008&quot;</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">},</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;subproperty&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;part&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;code&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;405813007&quot;</span>\n                        <span class=\"p\">},</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;39916009&quot;</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 153924607,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1513111383
    },
    {
        "content": "<p>Is 'subproperty' the correct name and construct? Does your example include un-grouped properties?</p>",
        "id": 153924609,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1513111843
    },
    {
        "content": "<p>Here's an example with an ungrouped property:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n    <span class=\"s2\">&quot;resourceType&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Parameters&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;parameter&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;version&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;valueString&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;http://snomed.info/sct/32506021000036107/version/20171130&quot;</span>\n         <span class=\"p\">},</span>\n         <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;display&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;valueString&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Xenon-133&quot;</span>\n         <span class=\"p\">},</span>\n         <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;property&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;part&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;code&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;127489000&quot;</span>\n                <span class=\"p\">},</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;valueCode&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;80751004&quot;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 153924624,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1513116061
    },
    {
        "content": "<p><code>subproperty</code> is what appears in the specification <a href=\"http://hl7.org/fhir/codesystem-operations.html#4.7.15.1\" target=\"_blank\" title=\"http://hl7.org/fhir/codesystem-operations.html#4.7.15.1\">http://hl7.org/fhir/codesystem-operations.html#4.7.15.1</a><br>\nBut maybe I am misreading the spec.  There are no examples included for this.<br>\nI've tried to see what <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> 's server does but I can't work out how to get at these properties via <code>$lookup</code></p>",
        "id": 153924626,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1513116550
    },
    {
        "content": "<p>Don't think you're misreading the spec. Just a failure on my part, due to fixation on the SCT-specific properties on the Using SNOMED... page! In fact, it cites SCT Relationship Groups as the main use of nested properties. Still not convinced that nesting is the best construct for rendering grouping, and would prefer Group IDs, but will go with the consensus - or maybe not implement this variation as it will only be applicable to a request for all, non is-a, attributes.</p>",
        "id": 153924662,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1513137093
    }
]