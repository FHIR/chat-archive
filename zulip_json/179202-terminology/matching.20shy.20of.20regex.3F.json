[
    {
        "content": "<p>Has there been discussion about a filter operation that is more closely modeled on SQL <code>LIKE</code> semantics? I.e. something more powerful than <code>=</code> but less powerful than <code>regex</code>, that supports \"contains substring\" or \"starts with\" queries without requiring full regular expression support?</p>\n<p>This would be nice to have when searching designations, for servers that can't/won't support arbitrary regex evaluation at query time.</p>",
        "id": 276733077,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1648311118
    },
    {
        "content": "<p>Yeah, I have thoughts like this every time I see someone propose \"regex\" as a matching algorithm.<br>\nOne option today is to only support a subset of regex - e.g., only those that start/end with <code>.*</code></p>",
        "id": 276933242,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1648502597
    },
    {
        "content": "<p>An example to consider are the term filters in the SNOMED CT \"ECL\" language (introduced in ECL version 1.5). They allow searching concept terms using multi-prefix any-order matching, or wildcard matching. These two strategies seem to have a good balance between covering many use cases and not being too complex to use and implement. <br>\nSee <a href=\"https://confluence.ihtsdotools.org/display/DOCECL/6.8+Description+Filter+Constraints\">ECL Description Term Filter</a> from about the third paragraph \"By default, term filters match using...\"</p>",
        "id": 277019174,
        "sender_full_name": "Kai Kewley",
        "timestamp": 1648566523
    },
    {
        "content": "<p>Shall I propose a filter operator called \"like\"? Or is server-specific restrictions on regex \"good enough\"?</p>",
        "id": 277023242,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1648568191
    },
    {
        "content": "<p>A conservative approach would be to provide advice to implementers on recognizing prefix/suffix matches in a regex and otherwise returning a TooCostly error.<br>\nHowever, for authoring ValueSets it would probably be nicer to give people comfort that there's a \"safe\" subset of regex that is more widely implemented. The question is what that subset should be?</p>",
        "id": 277064214,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1648587655
    },
    {
        "content": "<p>\"Contains substring\" or \"Has prefix\" (case-insensitive) are the two main capabilities I'd suggest here (both implementable on top of sql<code>LIKE</code>)</p>",
        "id": 277066799,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1648589218
    }
]