[
    {
        "content": "<p>We have a CodeSystem filter that we want to support but it takes 2 parameters (actually, the second is optional).  They are both of the same type (URI), but both CodeSystem and ValueSet only allow a single parameter value for a filter.  Any suggestions on how to handle this?</p>",
        "id": 153937504,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1518651325
    },
    {
        "content": "<p>can you provide a concrete example?</p>",
        "id": 153937505,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518651661
    },
    {
        "content": "<p>The actual filter is complex to describe, so as an example, let's consider a filter called <code>difference(ValueSetA, ValueSetB)</code> (in this case the 2nd parameter is not optional, but order is important).<br>\nThe I want to be able to define a ValueSet with <code>difference(\"http://example.com/myvaluesetA\", \"http://example.com/myvaluesetB\")</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"err\">//</span> <span class=\"err\">...</span>\n  <span class=\"nt\">&quot;compose&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;include&quot;</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n      <span class=\"nt\">&quot;system&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://snomed.info/sct&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;filter&quot;</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n        <span class=\"nt\">&quot;property&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;difference&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;op&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;=&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://example.com/myvaluesetA&quot;</span><span class=\"p\">,</span>\n        <span class=\"err\">//</span> <span class=\"err\">HELP!</span>\n      <span class=\"p\">}]</span>\n    <span class=\"p\">}]</span>\n  <span class=\"p\">}</span>\n  <span class=\"err\">//</span> <span class=\"err\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>As an aside, I've just noticed that the type of <code>filter.value</code> is <code>code</code> which seems \"wrong\" given that it is documented as being a code, a string, or a boolean, and should really be at least that set of valid things for a CodeSystem property (code | Coding | string | integer | boolean | dateTime and soon decimal).</p>",
        "id": 153937506,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1518652638
    },
    {
        "content": "<p>should be simply string, I think. In this particular case</p>",
        "id": 153937518,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518656563
    },
    {
        "content": "<p>is this snomed specific thing? not done using snomed expression language?</p>",
        "id": 153937520,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518656598
    },
    {
        "content": "<p>It's not snomed specific, no.  The problem is I need to provide two input values</p>",
        "id": 153937623,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1518675287
    },
    {
        "content": "<p>I think you'll need an extension</p>",
        "id": 153937626,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518676262
    },
    {
        "content": "<p>I was thinking more of adopting a convention where I have one property name called \"foo\" and the other (optional one) called \"foo.bar\".  It will be an error to provide \"foo.bar\" without also providing \"foo\"</p>",
        "id": 153937628,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1518676547
    },
    {
        "content": "<p>I'm not sure what you mean</p>",
        "id": 153937629,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1518676563
    },
    {
        "content": "<p>I think I get what Michael means.  You create two separate filters, but internally there is a dependency between them which will result in an error unless you satisfy it (i.e. you can't have 'foo.bar' unless you also have 'foo').  In the 'include' in the value set definition you would specify both filters, and both properties and values would be used together in determining the expansion.  But in looking at Michael's example, I believe you could obtain the same result for \"difference\" by using an 'include' for myvaluesetA and an 'exclude' for myvaluesetB?</p>",
        "id": 153937871,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1518722574
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15557\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15557\">GF#15557</a> for changing the data type to string</p>",
        "id": 153937873,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1518723338
    },
    {
        "content": "<p>That's exactly right <span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> .  I was only using \"difference\" as an example because the the actual filter we have is as-yet un-named (we have an interim name for it, but it is not accurate)</p>",
        "id": 153938327,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1518851999
    }
]