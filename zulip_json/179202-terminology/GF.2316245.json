[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193751\">@Bob Dolin</span> - we must resolve task <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=16245\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=16245\">GF#16245</a> next week or defer it. Your comment: \"Is there a time when Aziz and I can attend the Vocab call and discuss this? We'd like to explain our rationale for why we feel the current service is too time costly, making it difficult to use for real-time checking.\" - please make your comments here</p>",
        "id": 153978462,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532638918
    },
    {
        "content": "<p>I'm not sure how you'll persuade us to change the definition of an API because a particular implementation has a performance issue...</p>",
        "id": 153978463,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532638968
    },
    {
        "content": "<p>also <span class=\"user-mention\" data-user-id=\"195129\">@Aziz Boxwala</span></p>",
        "id": 153978464,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532638983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> : The API asks the question what is the relationship between two concepts A and B, with the possible answers being A is subsumed by B, B is subsumed by A, A = B, or A is not-subsumed by B. For CDS purposes, I typically only care if A is subsumed by B. All other responses are the same as A is not subsumed by B. Our server performance is not the concern, but trying to determine the other relationships when don't need to, is taking up valuable milliseconds. From the perspective of our use case, the API is asking the wrong or too broad a question. Our current implementation of the API does not bother to determine equivalence or the reverse relationship, which then does not conform fully to the API. We'd very much like to have the option to only answer whether A is subsumed by B in this API and be considered conformant. Or do you think we should propose a new API?</p>",
        "id": 153978469,
        "sender_full_name": "Aziz Boxwala",
        "timestamp": 1532640021
    },
    {
        "content": "<p>if a = b then a is subsumed by b, yes?</p>",
        "id": 153978471,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532640242
    },
    {
        "content": "<p>Possibly, but in practice, I probably won't encounter that scenario.  We use the API to determine class of medications or categories of problems, for example. </p>\n<p>Also, if B is subsumed by A, then A is not subsumed by B. So there is some overlap/ambiguity in the response valueset.</p>",
        "id": 153978478,
        "sender_full_name": "Aziz Boxwala",
        "timestamp": 1532640504
    },
    {
        "content": "<p>I don't know why you won't encounter that problem with medications or problems - both are subject to multiple ways of saying the same thing</p>",
        "id": 153978484,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532640619
    },
    {
        "content": "<p>agree that the definition of A is not subsumed by B is problematic.</p>",
        "id": 153978485,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532640638
    },
    {
        "content": "<p>the API allows for the determination of the reverse response because in some cases, this saves the client from asking the follow up question in the reverse direction</p>",
        "id": 153978492,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532640797
    },
    {
        "content": "<p>Typically, we'd ask if &lt;problemcode from problemlist&gt; is subsumed by &lt;classcode&gt;. Generally, there is good separation of the codes in patient records to class codes, though it is possible. So, I'll stop arguing since we want to cover the general scenario :-)</p>",
        "id": 153978493,
        "sender_full_name": "Aziz Boxwala",
        "timestamp": 1532640832
    },
    {
        "content": "<p>does any one else have any comment? <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> you have a scale implementation of this..?  (my implementation it doesn't take any longer to figure out the answer either way)</p>",
        "id": 153978495,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532640963
    },
    {
        "content": "<blockquote>\n<p>the API allows for the determination of the reverse response because in some cases, this saves the client from asking the follow up question in the reverse direction</p>\n</blockquote>\n<p>Should that be an option in the request, i.e., a flag that is set to true to also ask the reverse question. This way, one can optimize if needed.</p>",
        "id": 153978496,
        "sender_full_name": "Aziz Boxwala",
        "timestamp": 1532640980
    },
    {
        "content": "<blockquote>\n<p>does any one else have any comment? <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> you have a scale implementation of this..?  (my implementation it doesn't take any longer to figure out the answer either way)</p>\n</blockquote>\n<p>Our implementation uses a directed graph, so the reverse relationship becomes a second query.</p>",
        "id": 153978501,
        "sender_full_name": "Aziz Boxwala",
        "timestamp": 1532641384
    },
    {
        "content": "<p>We're with <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> on the implementation cost. It's a trivial bit of extra to populate the result object, but no extra effort to check.</p>",
        "id": 153978506,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1532642690
    },
    {
        "content": "<p>Being able to distinguish subsumed from strictly subsumed (ie &lt;= from &lt;) is often important for the client</p>",
        "id": 153978508,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1532642783
    },
    {
        "content": "<p>If you've got really high volume uses then $closure may be a better option</p>",
        "id": 153978511,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1532642911
    },
    {
        "content": "<p>(some figure from yesterday when a local university was hitting our public server - nearly 500,000 $subsumes calls (via POST, so no caching) with an average of 1.78ms per call; faster than $lookup which is averaging at 2.7ms)</p>",
        "id": 153978528,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1532645992
    },
    {
        "content": "<p>one way to resolve this is to restructure the return codes, so the choices are:</p>\n<ul>\n<li>\n<p>subsumes<br>\n** equivalent</p>\n</li>\n<li>\n<p>not subsumed<br>\n** subsumed-by<br>\n** disjoint</p>\n</li>\n</ul>",
        "id": 153978845,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532726500
    },
    {
        "content": "<p>Equivalent would normally be a child of subsumed-by as well.  The above requires subsumed-by to mean strictly-subsumed-by</p>",
        "id": 153978852,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1532727888
    },
    {
        "content": "<blockquote>\n<p>Equivalent would normally be a child of subsumed-by as well</p>\n</blockquote>",
        "id": 153978853,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532727930
    },
    {
        "content": "<p>uh why?</p>",
        "id": 153978854,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532727933
    },
    {
        "content": "<p>umm no, wrong question:</p>",
        "id": 153978855,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532727951
    },
    {
        "content": "<p>\"strictly-subsumed-by\" .. means... ?</p>",
        "id": 153978856,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532727961
    },
    {
        "content": "<p>strictly subsumed by would mean that A is truly a specialization of B - not equivalent</p>",
        "id": 153978858,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1532728108
    },
    {
        "content": "<p>ok, then, I'm not sure that it does require that</p>",
        "id": 153978861,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532728527
    },
    {
        "content": "<p>I think that what Michael is getting at is that if you take subsumes to mean \"include self\", then equivalent concepts subsume each other - if you don't want that, then you have to define subsumption \"strictly\" to require specialization</p>",
        "id": 153978864,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1532728658
    },
    {
        "content": "<p>Subsumed-by includes equivalent, so equivalent would also be a child of subsumed-by, but this would conflict with the ancestor not-subsumed.<br>\nBut really, this approach just re-introduces the original problem: if a client wants to distinguish strictly subsumed from equivalent then it needs to make two calls.<br>\nThis will always be far more costly than any overhead of having the server return a precise answer even when the client doesn't care.</p>",
        "id": 153978865,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1532728777
    },
    {
        "content": "<p>right</p>",
        "id": 153978867,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1532728821
    },
    {
        "content": "<p>Except that for $subsumes in the <a href=\"http://build.fhir.org/valueset-concept-subsumption-outcome.html\" target=\"_blank\" title=\"http://build.fhir.org/valueset-concept-subsumption-outcome.html\">concept-subsumption-outcome</a> value set we've defining subsumes and subsumes-by strictly (i.e. requiring additional properties).  That's not the case for the is-a <a href=\"http://build.fhir.org/valueset-filter-operator.html\" target=\"_blank\" title=\"http://build.fhir.org/valueset-filter-operator.html\">filter operator</a>, which includes self (but we also have descendent-of which doesn't).</p>",
        "id": 153978869,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1532729300
    },
    {
        "content": "<p>Back to the resolution for this issue, I'm still inclined toward the arguments that <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> and <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> are making to stay with the proposed resolution and the current four codes in the value set which cover the possible outcomes.</p>",
        "id": 153978874,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1532730096
    },
    {
        "content": "<p>I'm looking for a way for a server to do a partial implementation without having to lie.</p>",
        "id": 153978880,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532730515
    },
    {
        "content": "<p>I do not follow this logic: Subsumed-by includes equivalent, so equivalent would also be a child of subsumed-by</p>",
        "id": 153978881,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532730535
    },
    {
        "content": "<p>that would depend on the definitions</p>",
        "id": 153978882,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532730544
    },
    {
        "content": "<p>If a server can do a partial implementation then clients that need to dIstInguish always have to cater for that and thus always need to do two calls to separate equivalent from subsumed-by/subsumes.<br>\nI don't see a way around that.</p>",
        "id": 153978892,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1532731257
    },
    {
        "content": "<p>if the server does it in one, it returns one of the specific codes, and you don't need to make a follow up call</p>",
        "id": 153978894,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532731452
    },
    {
        "content": "<p>yes</p>",
        "id": 153978898,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1532731849
    },
    {
        "content": "<p>but with the hierarchy above, subsumes is not a specific code</p>",
        "id": 153978937,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1532763888
    }
]