[
    {
        "content": "<p>Looking back at the slides from DevDay (Amster dam). I am trying to get my head around the two slides attached that show a ValueSet compose statement and subsequent expansion. How does the expansion work when the underlying CoseSystem has no definitions to support the \"is-a\" filter.<br>\nThe CoseSystem is at <a href=\"http://hl7.org/fhir/STU3/codesystem-condition-ver-status.json.html\" target=\"_blank\" title=\"http://hl7.org/fhir/STU3/codesystem-condition-ver-status.json.html\">http://hl7.org/fhir/STU3/codesystem-condition-ver-status.json.html</a><br>\n<a href=\"/user_uploads/10155/OHzW3w2-I3p03oAG92HAIGLl/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a><br>\n<a href=\"/user_uploads/10155/w8Q_Hw9ZtcEx6hi2GjnA2DIA/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/OHzW3w2-I3p03oAG92HAIGLl/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/OHzW3w2-I3p03oAG92HAIGLl/pasted_image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/10155/w8Q_Hw9ZtcEx6hi2GjnA2DIA/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/w8Q_Hw9ZtcEx6hi2GjnA2DIA/pasted_image.png\"></a></div>",
        "id": 187756978,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1581250714
    },
    {
        "content": "<p>If you look at the code system resource in <a href=\"http://hl7.org/fhir/codesystem-condition-ver-status.json.html\" target=\"_blank\" title=\"http://hl7.org/fhir/codesystem-condition-ver-status.json.html\">R4</a> you'll see 'provisional' and 'differential' nested under 'unconfirmed' - which is structurally the equivalent of an 'is-a' relationship (although I do note that 'hierarchyMeaning' isn't specified for the condition-ver-status code system - it probably should be).</p>",
        "id": 187759010,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1581254986
    },
    {
        "content": "<p>make a task to fix that?</p>",
        "id": 187770713,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581278331
    },
    {
        "content": "<p>Should we have an invariant that says something like \"if concept.concept exists then hierarchyMeaning must exist\" (we can work out the actual code)?</p>",
        "id": 187829803,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1581350958
    },
    {
        "content": "<p><code>CodeSystem.concept.concept.exists() implies hierarchyMeaning.exists()</code></p>",
        "id": 187867526,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581375248
    },
    {
        "content": "<p>And similarly if you define values for either of the properties <code>parent</code> or <code>child</code>?</p>",
        "id": 187880552,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1581391920
    },
    {
        "content": "<p>hmm. thats a more complicated fhirpath</p>",
        "id": 187881668,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581393817
    },
    {
        "content": "<p>Something like:<br>\n<code>CodeSystem.concept.where(property.code = 'parent' or property.code = 'child').empty().not() implies hierarchyMeaning.exists()</code><br>\n?</p>",
        "id": 187882770,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1581395584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> It seems that we could (should?) remove 'CodeSystem.' and make it:</p>\n<div class=\"codehilite\"><pre><span></span>concept.concept.exists() implies hierarchyMeaning.exists()\n</pre></div>\n\n\n<p>And <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span>, this would be a bit simpler and read more consistently:</p>\n<div class=\"codehilite\"><pre><span></span>concept.where(property.code = &#39;parent&#39; or property.code = &#39;child&#39;).exists() implies hierarchyMeaning.exists()\n</pre></div>",
        "id": 187886627,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1581401740
    },
    {
        "content": "<p><a href=\"http://jira.hl7.org/browse/FHIR-25983\" target=\"_blank\" title=\"http://jira.hl7.org/browse/FHIR-25983\">J#25983</a></p>",
        "id": 187887863,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1581403701
    },
    {
        "content": "<p>We discussed this on the FHIR Tracker Issues call today.  There was general support on the call for adding the invariants if we are able to do that.  I think this would essentially be a technical correction, as the intent was always that hierarchyMeaning <strong>would</strong> be populated whenever a code system hierarchy was being represented.  But we didn't enforce that rule, and therefore if we start enforcing it now then this non-compatible change will break some of the existing instances (as we have seen) which previously the validator would pass.  Since CodeSystem is a normative resource, to be able to make this change we need to determine that \"there is a high level of confidence that the change will not impact existing implementers\" (or presumably we get agreement from them to make the change even if it does), which requires \"broad notification, extensive community consultation and reviews by multiple levels of HL7 governance processes.\" </p>\n<p>So we can start the process here by soliciting comments from the CodeSystem resource implementer community.  Please review the tracker and add your comments (I will post a link to this topic on implementers, too).  What other steps should we take? <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 188163798,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1581636526
    },
    {
        "content": "<p>Reach out by the product director blog, reach out via the terminology list server, reach out to all contacts you have at organizations that might implement the operation.  If you can't get an 'error' invariant approved, we could introduce a 'warning'.</p>",
        "id": 188164332,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581637022
    },
    {
        "content": "<p>Thanks, Lloyd.</p>",
        "id": 188164646,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1581637334
    },
    {
        "content": "<p>How does/should <code>hierarchyMeaning</code> interact with code systems that have a compositional grammar (<code>compositional</code> = <code>true</code>)?</p>\n<p>Apart from the grammar question, for one code system I have in mind the <code>hierarchyMeaning</code> would be <code>grouped-by</code>, which doesn't seem particularly useful.</p>",
        "id": 188165912,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1581638532
    },
    {
        "content": "<p>you don't have to have a heirarchy. The intent here is just that you should say what it means if you have. Which really seems reasonable</p>",
        "id": 188172450,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581646261
    },
    {
        "content": "<p>but given the the specification itself includes code systems marked as  normative that don't meet this rule, it really seems like a non-starter to survey the market to me</p>",
        "id": 188172456,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581646294
    },
    {
        "content": "<p>So what do you think is the best choice, <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>?  Should we just target adding the invariants as warnings (which won't break anything), as Lloyd mentioned?  Or leave things alone as they are because it's already normative?  Or something else?</p>",
        "id": 188176346,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1581652839
    },
    {
        "content": "<p>definitely do something. definitely add the invariant. for me, as best practice, with a note that they'd be an error but for backward compatibility rules</p>",
        "id": 188176635,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581653282
    }
]