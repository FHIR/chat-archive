[
    {
        "content": "<p>Is it a requirement that a <code>ValueSet.uri</code> must be different from every <code>CodeSystem.uri</code>?</p>",
        "id": 153966016,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527739834
    },
    {
        "content": "<p>yes</p>",
        "id": 153966032,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527753156
    },
    {
        "content": "<p>Is that documented anywhere?</p>",
        "id": 153966212,
        "sender_full_name": "Jim Steel",
        "timestamp": 1527810760
    },
    {
        "content": "<p>no. I don't think so. how can be the same?</p>",
        "id": 153966214,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527810992
    },
    {
        "content": "<p>if you put the same string in one ValueSet's url field, and in one CodeSystem's url field?</p>",
        "id": 153966215,
        "sender_full_name": "Jim Steel",
        "timestamp": 1527811054
    },
    {
        "content": "<p>well, then, they won't be unique will tehy?</p>",
        "id": 153966220,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527813160
    },
    {
        "content": "<p>No. But the question is, does that matter?</p>",
        "id": 153966221,
        "sender_full_name": "Jim Steel",
        "timestamp": 1527813180
    },
    {
        "content": "<p>yes</p>",
        "id": 153966222,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527813279
    },
    {
        "content": "<p>The url... \"SHOULD be globally unique\"</p>",
        "id": 153966223,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527813314
    },
    {
        "content": "<p>SHOULD != MUST -- we're seeing some validation rules that enforce MUST</p>",
        "id": 153966226,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527813672
    },
    {
        "content": "<p>well, we wanted to make that a SHALL but there's all sorts of weird edge cases that mean it can't be. but it would absolutely be WRONG for 2 resources to have the same canonical URL in scope</p>",
        "id": 153966238,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527814412
    },
    {
        "content": "<p>maybe I'm missing something - if it \"would absolutely be WRONG\" then why can't we make it SHALL?</p>",
        "id": 153966242,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1527814642
    },
    {
        "content": "<p>well, from memory...  how do you construct a really unique identifier... what if domain names are reassigned? who do you know if someone else has created an resource that they shouldn't have? What would we say about versions an uniqueness?</p>",
        "id": 153966243,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527814928
    },
    {
        "content": "<p>For one thing it would prevent having more than one version or edition of snomed in the system</p>",
        "id": 153966244,
        "sender_full_name": "Jim Steel",
        "timestamp": 1527814980
    },
    {
        "content": "<p>or any other code system</p>",
        "id": 153966245,
        "sender_full_name": "Jim Steel",
        "timestamp": 1527814986
    },
    {
        "content": "<p>no it wouldn't. but the detailed rules around that would have be elucidated completely if we made it a SHALL</p>",
        "id": 153966246,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527815066
    },
    {
        "content": "<p>Its still not clear to me why it matters</p>",
        "id": 153966247,
        "sender_full_name": "Jim Steel",
        "timestamp": 1527815136
    },
    {
        "content": "<p>why what matters?</p>",
        "id": 153966249,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527815179
    },
    {
        "content": "<p>Why having ValueSet and CodeSystem resources with the same uri is a problem</p>",
        "id": 153966250,
        "sender_full_name": "Jim Steel",
        "timestamp": 1527815201
    },
    {
        "content": "<p>well, because they can't resolve correctly. But more, it's expected that you can have a  single dictionary of metadata resources by their url</p>",
        "id": 153966252,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527815278
    },
    {
        "content": "<p>and some of my tools do tht</p>",
        "id": 153966253,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527815285
    },
    {
        "content": "<p>They're URIs, not URLs. Its not necessary that the resolve, let alone resolve correctly</p>",
        "id": 153966254,
        "sender_full_name": "Jim Steel",
        "timestamp": 1527815340
    },
    {
        "content": "<p>If we're talking about _resolve_ in the URL sense, then presumably you should end up at some kind of disambiguation page. But within a server you should always have context about the resource-type for the \"URI\" you are resolving - at least, we always do within Ontoserver.</p>",
        "id": 153966260,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527816152
    },
    {
        "content": "<p>that assumes that the source location differentiates explicitly between the two kinds of resources. That's not true in the wider context of FHIR, where we sometimes refer to 'conformance resources' as a group - publishing contexts, for instance</p>",
        "id": 153966264,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527816534
    },
    {
        "content": "<p>but ultimately, the answer to my question is SHOULD, not SHALL, regardless of what technical difficulties this might impose</p>",
        "id": 153966265,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527816815
    },
    {
        "content": "<p>I guess so.</p>",
        "id": 153966266,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817169
    },
    {
        "content": "<p>but it's very much a case of nearly nearly SHALL. I tried to thnk of various alternative phrasing... URLs SHALL not be used for more than one type of resource.</p>",
        "id": 153966267,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817241
    },
    {
        "content": "<p>but all come back to have the same problems.</p>",
        "id": 153966268,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817253
    },
    {
        "content": "<p>but we should make constraints: <br>\nCodeSystem.url != CodeSystem.valueSet<br>\nValueSet.url != ValueSet.compose.include.system</p>",
        "id": 153966269,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817298
    },
    {
        "content": "<p>How about adding language that says \"Tooling is likely to rely upon uniqueness of URLs.\"</p>",
        "id": 153966270,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1527817406
    },
    {
        "content": "<p>That at least explains to people that there are ramifications to not adhering to the SHOULD - and that they have no right to complain if they don't adhere to the guidance and their stuff doesn't work.</p>",
        "id": 153966271,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1527817481
    },
    {
        "content": "<p>well, it's slightly stronger than that - we can say that in some contexts, resources are referred to solely by their URL, and different resources that have the same URL are indistinguishable</p>",
        "id": 153966273,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817535
    },
    {
        "content": "<p>and the intent is that they are all different; the only reason that the rule is not SHALL is because of practical difficulties in edge cases</p>",
        "id": 153966274,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817568
    },
    {
        "content": "<p>Well, the source of my question is that a <code>Library</code> we (want to) rely on (the<code>org.hl7.fhir.r4.validation.InstanceValidator</code>) enforces this rule - SHALL semantics</p>",
        "id": 153966275,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527817632
    },
    {
        "content": "<p>where? let me check, but that's certainly by design. There's no place where you can detect non-uniqueness that it's ok</p>",
        "id": 153966276,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817692
    },
    {
        "content": "<p>It's in <code>checkCoding()</code></p>",
        "id": 153966278,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527817722
    },
    {
        "content": "<p>this:       rule(errors, IssueType.CODEINVALID, element.line(), element.col(), path, !isValueSet(system), \"The Coding references a value set, not a code system (\\\"\"+system+\"\\\")\");</p>",
        "id": 153966280,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817748
    },
    {
        "content": "<p>?</p>",
        "id": 153966281,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817750
    },
    {
        "content": "<p>Yep</p>",
        "id": 153966282,
        "sender_full_name": "Jim Steel",
        "timestamp": 1527817756
    },
    {
        "content": "<p>well, i stand by that rule, and we need to say whatever we can say in the standard to make that OK</p>",
        "id": 153966283,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817774
    },
    {
        "content": "<p>code is</p>\n<div class=\"codehilite\"><pre><span></span>        <span class=\"n\">rule</span><span class=\"o\">(</span><span class=\"n\">errors</span><span class=\"o\">,</span> <span class=\"n\">IssueType</span><span class=\"o\">.</span><span class=\"na\">CODEINVALID</span><span class=\"o\">,</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"na\">line</span><span class=\"o\">(),</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"na\">col</span><span class=\"o\">(),</span> <span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"o\">!</span><span class=\"n\">isValueSet</span><span class=\"o\">(</span><span class=\"n\">system</span><span class=\"o\">),</span> <span class=\"s\">&quot;The Coding references a value set, not a code system (\\&quot;&quot;</span><span class=\"o\">+</span><span class=\"n\">system</span><span class=\"o\">+</span><span class=\"s\">&quot;\\&quot;)&quot;</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>I want to have:</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isCodeSystem</span><span class=\"o\">(</span><span class=\"n\">system</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        <span class=\"n\">rule</span><span class=\"o\">(</span><span class=\"n\">errors</span><span class=\"o\">,</span> <span class=\"n\">IssueType</span><span class=\"o\">.</span><span class=\"na\">CODEINVALID</span><span class=\"o\">,</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"na\">line</span><span class=\"o\">(),</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"na\">col</span><span class=\"o\">(),</span> <span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"o\">!</span><span class=\"n\">isValueSet</span><span class=\"o\">(</span><span class=\"n\">system</span><span class=\"o\">),</span> <span class=\"s\">&quot;The Coding references a value set, not a code system (\\&quot;&quot;</span><span class=\"o\">+</span><span class=\"n\">system</span><span class=\"o\">+</span><span class=\"s\">&quot;\\&quot;)&quot;</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n</pre></div>",
        "id": 153966284,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527817777
    },
    {
        "content": "<p>It doesn't check for the non-existence of a CodeSystem with that URL</p>",
        "id": 153966285,
        "sender_full_name": "Jim Steel",
        "timestamp": 1527817782
    },
    {
        "content": "<p>I don't follow</p>",
        "id": 153966286,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817813
    },
    {
        "content": "<p>or</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"n\">rule</span><span class=\"o\">(</span><span class=\"n\">errors</span><span class=\"o\">,</span> <span class=\"n\">IssueType</span><span class=\"o\">.</span><span class=\"na\">CODEINVALID</span><span class=\"o\">,</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"na\">line</span><span class=\"o\">(),</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"na\">col</span><span class=\"o\">(),</span> <span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"n\">isCodeSystem</span><span class=\"o\">(</span><span class=\"n\">system</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">isValueSet</span><span class=\"o\">(</span><span class=\"n\">system</span><span class=\"o\">),</span> <span class=\"s\">&quot;The Coding references a value set, rather than a code system (\\&quot;&quot;</span><span class=\"o\">+</span><span class=\"n\">system</span><span class=\"o\">+</span><span class=\"s\">&quot;\\&quot;)&quot;</span><span class=\"o\">);</span>\n</pre></div>",
        "id": 153966287,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527817867
    },
    {
        "content": "<p>I still don't follow.</p>",
        "id": 153966288,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817887
    },
    {
        "content": "<p>If the <code>system</code> is a valid CodeSystem URI, then you don't care that it might also be a valid ValueSet URI</p>",
        "id": 153966290,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527817923
    },
    {
        "content": "<p>I guess what you are saying is that you want to reuse ids and that it should be ok because the specification only says that you SHOULD not</p>",
        "id": 153966291,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817929
    },
    {
        "content": "<p>not Ids, URIs</p>",
        "id": 153966292,
        "sender_full_name": "Jim Steel",
        "timestamp": 1527817942
    },
    {
        "content": "<p>y uris. sorry</p>",
        "id": 153966293,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817950
    },
    {
        "content": "<p>I do care.</p>",
        "id": 153966294,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527817956
    },
    {
        "content": "<p>The current code disables validation in this case, even though the presence of multiple resources needn't actually directly prevent it</p>",
        "id": 153966295,
        "sender_full_name": "Jim Steel",
        "timestamp": 1527818010
    },
    {
        "content": "<p>Seems overly dogmatic</p>",
        "id": 153966296,
        "sender_full_name": "Jim Steel",
        "timestamp": 1527818030
    },
    {
        "content": "<p>and we don't <em>want</em> to, we just stumbled across this and it seemed \"what <span class=\"user-mention\" data-user-id=\"191376\">@Jim Steel</span> said\" :-)</p>",
        "id": 153966297,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527818049
    },
    {
        "content": "<p>I think it's good as it is. I agree it's a side issue, but one of the biggest problems we have is people confusing value sets and code systems and so I don't want to back it off</p>",
        "id": 153966298,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527818087
    },
    {
        "content": "<p>is it a practical problem or a theoretical concern?</p>",
        "id": 153966300,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527818793
    },
    {
        "content": "<p>We're debugging now to determine that</p>",
        "id": 153966307,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527819341
    },
    {
        "content": "<p>I agree with Grahame's comment about people confusing value sets and code systems. So I agree using the same value in both should be discouraged.</p>",
        "id": 153966314,
        "sender_full_name": "Reuben Daniels",
        "timestamp": 1527819772
    },
    {
        "content": "<p>It shouldn't just be discouraged - it's reasonable to treat it as an outright error.</p>",
        "id": 153966316,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1527820917
    },
    {
        "content": "<p>I think I'm ready to say this is a concern of pedantry, not a blocker.<br>\nHowever, there's another <em>real</em> bug in code nearby:</p>\n<div class=\"codehilite\"><pre><span></span>              <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">binding</span><span class=\"o\">.</span><span class=\"na\">hasValueSet</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">binding</span><span class=\"o\">.</span><span class=\"na\">getValueSet</span><span class=\"o\">()</span> <span class=\"k\">instanceof</span> <span class=\"n\">Reference</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">ValueSet</span> <span class=\"n\">valueset</span> <span class=\"o\">=</span> <span class=\"n\">resolveBindingReference</span><span class=\"o\">(</span><span class=\"n\">profile</span><span class=\"o\">,</span> <span class=\"n\">binding</span><span class=\"o\">.</span><span class=\"na\">getValueSet</span><span class=\"o\">(),</span> <span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"na\">getUrl</span><span class=\"o\">());</span>\n</pre></div>\n\n\n<p><code>resolveBindingReference</code> can handle either a <code>Reference</code> or a <code>UriType</code>, but the code here never gives it a chance, so bindings to implicit (UriType) valuesets are ignored</p>",
        "id": 153966345,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527830536
    },
    {
        "content": "<p>so...</p>",
        "id": 153966347,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527831286
    },
    {
        "content": "<p>there's a reason for that.</p>",
        "id": 153966348,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527831291
    },
    {
        "content": "<p>value sets bound to a url are outside the scope of the validator.</p>",
        "id": 153966349,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527831314
    },
    {
        "content": "<p>Why is it up to  the <code>IValidationSupport</code> concrete implementation to determine that?</p>",
        "id": 153966351,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527832382
    },
    {
        "content": "<p>umm?</p>",
        "id": 153966352,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527832761
    },
    {
        "content": "<p>where is this code?</p>",
        "id": 153966353,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527832782
    },
    {
        "content": "<p>Sorry, that should have read why is it <strong>not</strong></p>",
        "id": 153966355,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527833127
    },
    {
        "content": "<p>because that definition comes from the spec, so why would it be up to an implementation?</p>",
        "id": 153966357,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527834007
    },
    {
        "content": "<p>I'm really confused as why this discussion is focused on the technical requirements. The defining identifier for a value set can not be the same as a code system. And visa-versa. They are different things. I've not seen in this any example of something that <strong><em>MUST</em></strong> break that rule to work. So it's a SHALL.</p>",
        "id": 153966474,
        "sender_full_name": "Robert McClure",
        "timestamp": 1527868597
    },
    {
        "content": "<p>So, (playing devil's advocate here) exactly what is going to happen if someone goes ahead and blatantly disregards the SHALL (assuming we would decide to make it that) and for some reason gives a code system and a value set the exact <strong>same</strong> url?  When you use the url in an element binding in a resource or profile you will be referring to the value set.  When you use the url in Coding.system you will be referring to the code system.  And in ValueSet.compose, when it's used in include.system it will refer to the code system and in include.valueSet it will refer to the value set (and the same for exclude).  In ConceptMap source and target it might not be clear which one you are referring to, but it also might not matter in most of the cases where anyone would ever do this.  Maybe I've missed something, but I think this covers most of the uses.  I agree that these are different things, and we should continue to tell people to make their identifying urls unique, but it doesn't seem that it's likely to be especially catastrophic if someone doesn't listen to that and goes ahead and in a few cases makes them the same anyway.</p>",
        "id": 153966490,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1527881154
    },
    {
        "content": "<p>it is because your situation only works in the terminology stack itself, where you know by context what type of thing you are referring to. In the publishing stack, we assume that the URLs are distinct and don't know what type of thing something is when resolving the URLs. Having two distinct artefacts with the same URL is fatal in publishing</p>",
        "id": 153966503,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527883717
    },
    {
        "content": "<p>it would be good to add Rob's clearer statement - one not restricted by corner cases around global uniqueness - to the terminology pages.</p>",
        "id": 153966504,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527883758
    },
    {
        "content": "<p>Agree about the publishing stack generally.</p>",
        "id": 153966506,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1527883838
    },
    {
        "content": "<p>Which is Rob's clearer statement?</p>",
        "id": 153966507,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1527883861
    },
    {
        "content": "<blockquote>\n<p>\"The defining identifier for a value set can not be the same as a code system\"</p>\n</blockquote>",
        "id": 153966513,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527884138
    },
    {
        "content": "<p>To answer <span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> 's question, it is the rule in the validation engine that would report a problem</p>",
        "id": 153966560,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527926235
    },
    {
        "content": "<p>actually, the validation engine should report the problem first. that is, the loader I use should report the problem (HAPI loader might not)</p>",
        "id": 153966561,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527926494
    },
    {
        "content": "<p>ah, so the profile should fail to validate, not the instance</p>",
        "id": 153966562,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1527931368
    },
    {
        "content": "<p>I think it makes sense to have the statement and the rule in validation (at least for the profile).</p>",
        "id": 153966563,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1527941539
    },
    {
        "content": "<p>Okay, I'm going to re-open this discussion as it's just been brought to my attention that <a href=\"https://www.hl7.org/fhir/terminology-service.html#validation\" target=\"_blank\" title=\"https://www.hl7.org/fhir/terminology-service.html#validation\">https://www.hl7.org/fhir/terminology-service.html#validation</a> explicitly requires that a code system's URI can be used as a proxy for the \"all codes defined in the code system\" value set.</p>\n<blockquote>\n<p>Every code system has an implicit value set that is \"all the concepts defined in the code system\" (CodeSystem.valueSet). For some code systems, these value set URIs are defined in advance (e.g. for LOINC, it is <a href=\"http://loinc.org/vs\" target=\"_blank\" title=\"http://loinc.org/vs\">http://loinc.org/vs</a>). However, for some code systems, they are not known. Clients can refer to these implicit value sets by providing the URI for the code system itself.</p>\n</blockquote>\n<p>Now, I think the referenced use-case at the end is covered by <code>CodeSystem/$validate-code</code> so, in theory, this paragraph could be amended to suggest that operation is used instead</p>",
        "id": 175217159,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1568009178
    }
]