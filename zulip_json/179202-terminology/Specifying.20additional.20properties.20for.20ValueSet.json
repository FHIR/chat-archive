[
    {
        "content": "<p>Here is one possible solution for how ValueSet might be modified to handle additional properties that would meet the need I have for selecting additional properties to be returned and to be searched (when filtering):</p>\n<p>On ValueSet, under \"contains\" add a new \"properties\" key:</p>\n<div class=\"codehilite\"><pre><span></span>contains:\n   properties:    0..*\n     name:  string\n     value[x]:  *\n</pre></div>\n\n\n<p>Then,  to request that these properties be retrieved or searched, use two new optional parameters for ValueSet $expand:</p>\n<ul>\n<li>\"properties\":  list,of,additonal,properties   -- returned with above \"properties\" section</li>\n<li>\"filterProperties\": list,of,properties filtered by \"filter\"</li>\n</ul>\n<p>If the properties are not specified, the server would just use a default value.</p>",
        "id": 153971334,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1529708199
    },
    {
        "content": "<p>I am intrigued by this possibility now that we have decided to do away with expansion profile. I do think it would be useful to be able to identify specific code system concept attributes within the compose that would then end up as included in the <code>$expand</code>. We'd also want a default.</p>",
        "id": 153971372,
        "sender_full_name": "Robert McClure",
        "timestamp": 1529857260
    },
    {
        "content": "<p>There is work in progress to allow the output of <code>$expand</code> to be passed into <code>$lookup</code> (and <code>$translate</code>) which will resolve this issue.<br>\nIt also leaves it to the client to decide what the desired properties are, which is where the decision should lie.</p>",
        "id": 153971379,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1529877515
    },
    {
        "content": "<p>so. I've been thinking about this and playing around with approaches. There's not really any generic way to pipe operations to each other.... but there's a way to resolve this.</p>",
        "id": 153973641,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530775080
    },
    {
        "content": "<p>at present, the lookup operation takes a code + system to look up. We could add another option, to pass a value set. if you do this, the server expands the value set, and then returns the result of lookup for all the members of the value set</p>",
        "id": 153973642,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530775171
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>GET [base]/CodeSystem/$lookup?valueset=http://hl7.org/fhir/ValueSet/doc-classcodes&amp;property=definition\n</pre></div>",
        "id": 153973643,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530775326
    },
    {
        "content": "<p>this same approach works for translation:</p>",
        "id": 153973644,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530775335
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>GET [base]/ConceptMap/$translate?valueSet=http://hl7.org/fhir/ValueSet/composition-status\n  &amp;source=http://hl7.org/fhir/ValueSet/composition-status\n  &amp;target=http://hl7.org/fhir/ValueSet/v3-ActStatus\n</pre></div>",
        "id": 153973645,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530775395
    },
    {
        "content": "<p>So another use case came up today which was chaining $translate eg to do AMT -&gt; SCT -&gt; RxNorm</p>",
        "id": 153973646,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1530775468
    },
    {
        "content": "<p>in both cases, you get back a Parameters with a series of parameters, each of which contains a set of parts that is the normal set of output parameters for the operation, one for each code in the expansion</p>",
        "id": 153973647,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530775472
    },
    {
        "content": "<p>that's one way to do this ... it probably works well for translate, but maybe not so much for lookup</p>",
        "id": 153973648,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530775508
    },
    {
        "content": "<p>an alternative approach which is more value set centric - and probably better for getting properties, is to add to value set (probably extensions for now) a column : string 0..* for each contains, and a column: {name, uri, type} to the expansion that defines the columns. and some kind of column= parameter in the $expand</p>",
        "id": 153973650,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530775622
    },
    {
        "content": "<p>I can prototype either of these, but I thought I'd see what people said</p>",
        "id": 153973651,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530775664
    },
    {
        "content": "<p>the 3rd option I spent the most time pursuing is the most complicated... extending batch to allow feeding outputs from one batch entry into a subsequent batch entry</p>",
        "id": 153973652,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530775715
    },
    {
        "content": "<p>that is powerful, but rapidly gets really messy....</p>",
        "id": 153973653,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530775725
    },
    {
        "content": "<p>the first option looks pretty good to me - if the \"not so much for lookup\" isn't too big an issue<br>\ncan you elaborate on that?</p>",
        "id": 153973704,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1530798994
    },
    {
        "content": "<p>In the first option, would it be possible to specify a \"filter\" parameter to control what parts of the ValueSet are returned  by the $lookup?  My use case for this is matching against what the user is typing in a field.</p>",
        "id": 153973794,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1530804334
    },
    {
        "content": "<p>well, all the parameters for expand would become relevant</p>",
        "id": 153973849,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530817482
    },
    {
        "content": "<p>$lookup on an expand would obscure the value set expansion itself</p>",
        "id": 153973850,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530817510
    },
    {
        "content": "<p>I'm not entirely sure what you mean by \"obscure the ...expansion\", but I like the idea that the $expand parameters would be available.  I took a quick look at the $expand and $lookup parameter lists, and it looks like the only overlap is displayLanguage, which I don't think would be an issue.</p>\n<p>So, this idea would allow extra properties to be specified and retrieved, but still leaves it up to the server to decide which properties should be searched.  I really think that should be a client-side decision, but as I recall from a previous phone call, reaching a consensus on how to do that was difficult for some reason.  Anyway, I am happy to have half the problem solved, and if the other half (specifying which properties should be searched) needs to be considered separately or put off for now, that is fine.</p>",
        "id": 153973891,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1530820592
    },
    {
        "content": "<p>My preference would be to create a new $lookup operation for the ValueSet resource, rather than pass ValueSet resources to the $lookup operation on the CodeSystem resource.</p>",
        "id": 153973904,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1530823016
    },
    {
        "content": "<p>I see two different use cases here:<br>\n  1. perform an <code>$expand</code> but allow specified properties to be returned in the expansion rather than than just the <code>code</code>/<code>designations</code>, and<br>\n  2. perform a <code>$lookup</code> on a set of codes in a single request - a <code>ValueSet</code> might be the way to specify that set of codes.<br>\nThen there is the extension of this idea to other operations, e.g., <code>$translate</code>:<br>\n  3. perform a <code>$translate</code> on a set of codes in a single request - again, a <code>ValueSet</code> might be the way to specify that set of codes, and<br>\n  4. link a series of <code>$translate</code> calls where the initial input is either a single code, or a set of codes (3)</p>\n<p>Note:</p>\n<ul>\n<li>the key difference between 1 &amp; 2 is that 1 still returns an expansion where as 2 does not (or probably does not), and 1 really just needs an upgrade to <code>$expand</code> and <code>ValueSet.expansion</code> to allow for request and return of properties.</li>\n<li>neither <code>$lookup</code> nor <code>$translate</code> current tell you what the input code was so they will both need some mechanism to indicate this when used in a \"multi-input\" context</li>\n</ul>\n<p>An approach to 2&amp;3 I have been toying with involves extending <code>$lookup</code> and <code>$translate</code> to allow a <code>ValueSet</code> (with expansion) as an input parameter and to extend <code>$expand</code> with a new parameter <code>chain</code> (or <code>pipe</code> or...?) that takes a URL as a value.  That URL would be either <code>/CodeSystem/[id/]$lookup?...</code> or <code>/ValueSet/[id/]$translate?...</code> without the <code>code</code>, <code>system</code> input parameter values.</p>\n<p>What I don't like about this approach is that it expand-based which suggest the result should be a ValueSet with expansion.  The alternative would be to extend each of <code>$lookup</code> and <code>$translate</code> with a new parameter <code>input</code> (or <code>from</code> or ...?) that takes an <code>$expand</code> URL as a value - <code>/ValueSet/[id/]$expand?...</code> - instead of the <code>code</code>, <code>system</code> input parameter values.</p>",
        "id": 153973927,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1530828655
    },
    {
        "content": "<p>No feedback? <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <span class=\"user-mention\" data-user-id=\"191364\">@Peter Jordan</span></p>",
        "id": 153975240,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1531560278
    },
    {
        "content": "<p>I don't know - I'm hoping to get back to this later this week</p>",
        "id": 153975312,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1531700203
    },
    {
        "content": "<p>Was there a tracker for this functionality going through, I can see that the ValueSet expansion doesn't have the properties of the codes in it.</p>",
        "id": 153985207,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1533961634
    },
    {
        "content": "<p>no this was always going to miss the boat but I will get back to it... there's just too much to do right now</p>",
        "id": 153985215,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1533962992
    },
    {
        "content": "<p>The tracker I had submitted was <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=17324&amp;start=0\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=17324&amp;start=0\">#GF17324</a>.  (I just noticed that this conversation had updates.)</p>",
        "id": 153991351,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1535484347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Is it still on your list to propose something further on this?</p>",
        "id": 154015265,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1541187896
    },
    {
        "content": "<p>yes still on my list</p>",
        "id": 154015288,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541193192
    }
]