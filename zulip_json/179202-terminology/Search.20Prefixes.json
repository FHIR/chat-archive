[
    {
        "content": "<p>Would appreciate some clarification on 3.1.1.4.5 Prefixes in Search. The use of \"parameter\" is highly overloaded in this section. Are the following equivalences true:</p>\n<p>\"the value for the parameter in the resource\" is the same as \"the search value\", and<br>\n\"the provided value\" is the same as \"the target value\" is the same as \"the value that follows the operator in the search parameter\" (my words)</p>\n<p>Thanks</p>",
        "id": 154013040,
        "sender_full_name": "Jack Bowie",
        "timestamp": 1540742396
    },
    {
        "content": "<p>There are specific rules for numeric equality - so 2.13 is considered equal to 2, for example.  But yes, I think your equivalencies are correct.  If you want to submit a change request to make the wording clearer, you can.</p>",
        "id": 154013044,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540743868
    },
    {
        "content": "<p>Thanks. Just wondered why the two columns of the table used such very different descriptors. Also, in the Introduction section it cites the format as having \"?[parameters]\" which is yet another definition of the term \"parameter\" unlike that used elsewhere in the topic.</p>",
        "id": 154013053,
        "sender_full_name": "Jack Bowie",
        "timestamp": 1540747918
    },
    {
        "content": "<p>Okay, but if that is the case, look at \"gt\". Rephrasing: \"the range above the value for the parameter in the resource intersects with the range of the provided value\". That seems backwards. Also does \"the range above\"  include or exclude the referenced range, i.e. is the start of \"the range above\" the start of the base range or the end of the base range?</p>",
        "id": 154013061,
        "sender_full_name": "Jack Bowie",
        "timestamp": 1540750894
    },
    {
        "content": "<p>The more I look at this, I'm not sure what the equivalences should be. If you look at \"eq\", what should be the result of \"2018\" =eq \"2018-1\" and \"2018-1 =eq \"2018\"?</p>",
        "id": 154013068,
        "sender_full_name": "Jack Bowie",
        "timestamp": 1540753198
    },
    {
        "content": "<p><code>gt</code> excludes <code>ge</code> includes.  I presume in your examples you mean '2018-01'.  The answer is that both would match because equality with dates is treated as a range.  So \"2018\" counts as 1 second after midnight to midnight on Dec. 31.  The range intersection will be non-empty, which means the result will be included.</p>",
        "id": 154013069,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540755391
    },
    {
        "content": "<p>But the definition of eq is given as \"the range of the search value fully contains the range of the target value\" which is not just non-empty intersection, and is not commutative.</p>",
        "id": 154013075,
        "sender_full_name": "Jack Bowie",
        "timestamp": 1540757790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ?</p>",
        "id": 154013076,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540758038
    },
    {
        "content": "<p>Hmm, 3.1.1.4.6 omits an example for <code>eq</code> so it's unclear if * When a comparison prefix in the set <code>lgt, lt, ge, le, sa &amp; eb</code> is provided, the implicit precision of the number is ignored, and they are treated as if they have arbitrarily high precision* also applies in the <code>eq</code> case.<br>\nThat is, <code>foo=100</code> means <code>foo</code> in range <code>[95.5 ... 100.5)</code>, but does <code>foo=eq100</code> mean exactly equal to <code>100</code>?</p>",
        "id": 154013082,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1540765963
    },
    {
        "content": "<blockquote>\n<p>what should be the result of \"2018\" =eq \"2018-1\" and \"2018-1 =eq \"2018\"?</p>\n</blockquote>\n<p>I'm not sure how to read this?</p>",
        "id": 154013103,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1540785973
    },
    {
        "content": "<p>First (to the left of '=') is the data in the system, second (to the right of '=') is the search value</p>",
        "id": 154013105,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1540786822
    },
    {
        "content": "<p>I agree with Lloyd re what I was trying to ask. Let's take another example. Say we have range1 =gt range2. Is the intent that for this to be true, every point in range1 must be greater than every point in range2, i.e., the ranges must be disjoint? FYI, I think the definitions in the second column of 3.1.1.4.5 are inconsistent with the examples in 3.1.1.4.7. This is what caused me to raise the topic. Also, when I said that the current definition of =eq is not transitive I meant commutative. I'll edit my comment.</p>",
        "id": 154013143,
        "sender_full_name": "Jack Bowie",
        "timestamp": 1540803740
    },
    {
        "content": "<p>Sometimes I need a picture, so check out the attached. I've tried to represent \"range1 =xx range2\". The height of the pink box in the middle represents a range2. The blue boxes are examples of range1s. I only see two options for our range arithmetic: Option A and Option B. Option A shows gt as disjoint and eq as non-empty intersection as Lloyd suggested. Option 2 eq is similar to 3.1.1.4.5 and gt is \"some points in range1 are greater than any point in range2\". The tricky case is a range1 that encompasses Range 1b through Range 1d. In Option 2, it can't be equal but seems to be both gt and lt. Does this help?<br>\n<a href=\"/user_uploads/10155/kyg1n7dsUUOCrZbYQAn01Pe_/Search-Prefix.pptx\" target=\"_blank\" title=\"Search-Prefix.pptx\">Search-Prefix.pptx</a></p>",
        "id": 154013219,
        "sender_full_name": "Jack Bowie",
        "timestamp": 1540821607
    }
]