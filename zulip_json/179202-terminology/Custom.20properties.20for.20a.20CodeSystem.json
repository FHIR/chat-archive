[
    {
        "content": "<p>If wanted to add additional properties to a known code system (for example <a href=\"http://loinc.org\" target=\"_blank\" title=\"http://loinc.org\">http://loinc.org</a>), because the additional properties are useful for my application, would I just create my own local CodeSystem resource, basing it on the standard one, and reference that custom one in my ValueSet definitions?  In the expansion, I would still want the canonical URL (<a href=\"http://loinc.org\" target=\"_blank\" title=\"http://loinc.org\">http://loinc.org</a>) in the contains.system.</p>",
        "id": 154018217,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1542145607
    },
    {
        "content": "<p>you're describing a supplement- read what the <a href=\"http://build.fhir.org/codesystem.html\" target=\"_blank\" title=\"http://build.fhir.org/codesystem.html\">build.fhir.org/codesystem.html</a> has to say abotu that</p>",
        "id": 154018283,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1542163345
    },
    {
        "content": "<p>Is a supplement CodeSystem obligated to support all of the properties and filters of the original CodeSystem?</p>",
        "id": 154018877,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1542298025
    },
    {
        "content": "<p>There'd be no point to supporting any of them - they're already defined for all the codes by the base code system.  The wole point of the supplement is to define new properties and filters for the existing codes.  (Remember, supplements can't define any new codes or concepts.)</p>",
        "id": 154018878,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542298491
    },
    {
        "content": "<p>But, if none are supported, then someone doing a $lookup on a code to get additional properties would need to do two lookups (probably at different servers), first to get the standard properties, and then to get the supplemental ones.</p>",
        "id": 154018881,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1542298775
    },
    {
        "content": "<p>Yup</p>",
        "id": 154018951,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542315278
    },
    {
        "content": "<p>They're separate objects.  If you query the supplement, you'll only see the codes that are supplemented and only see the supplementary properties and designations.  You have to have a copy of the original code system to know what's in the original code system.  In some cases, the supplement won't even have permission from the original system to publish its information.</p>",
        "id": 154018952,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542315393
    },
    {
        "content": "<p>For our <a href=\"https://clinicaltables.nlm.nih.gov\" target=\"_blank\" title=\"https://clinicaltables.nlm.nih.gov\">Clinical Table Search Service</a> we have a number of standard code systems to which we have (in some cases) added additional fields.  This is an autocompletion service; we do not make users first hit us for the extra fields and then go away somewhere else to get the standard fields.  We have the standard fields indexed together with our extra ones.  What I'm trying to understand with these questions is what type of ValueSet and CodeSystem resources we'll need to serve in order to make this usable via FHIR.</p>\n<p>I was assuming the supplement type of CodeSystem would not only allow us to provide additional fields, but also the standard ones.  Is that not the case?</p>",
        "id": 154018953,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1542316834
    },
    {
        "content": "<p>A CodeSystem supplement <em>should</em> only expose the additions.  There's no way in the resource to distinguish what's yours vs. what comes from the original code system, so if you declare everything, it looks like the supplement is defining all of those things.  In practice, only terminology services would ever need to query code system supplements - and they'll always query both the supplement and the code system.  Clinical systems will generally not care about code systems or supplements.  They'll just care about the value set expansions provided by the terminology service - which will include information from both the code system and the supplement(s).</p>",
        "id": 154018954,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542317061
    },
    {
        "content": "<p>If a clinical system cares about the extra properties defined in a code system, doesn't it need to do a lookup on the CodeSystem currently?</p>",
        "id": 154018955,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1542317204
    },
    {
        "content": "<p>We should probably make the $lookup operation code system supplement aware...</p>",
        "id": 154018966,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542318099
    },
    {
        "content": "<p>I think what you're suggesting is that $lookup on a supplement could include properties from the original code system, and not just the supplement.  Correct?</p>",
        "id": 154018975,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1542319162
    },
    {
        "content": "<p>More that when you invoke lookup on a code, you can include a valueset or list of supplements so the terminology server knows what code system supplements to incorporate when determining the properties</p>",
        "id": 154018976,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542319696
    },
    {
        "content": "<p>What would the ValueSet be for, and what would be in it?</p>",
        "id": 154019000,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1542321679
    },
    {
        "content": "<p>The ValueSet would be the ValueSet associated with the element that the code was found in - and it would indicate the supplements that were relevant for doing an expansion.</p>",
        "id": 154019012,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542322788
    },
    {
        "content": "<p>Since $expand operates on a value set I'm not sure if anything further is needed there, but we may want to be able to control whether information from code supplements in included in the output for both $lookup and $expand.</p>",
        "id": 154019017,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1542323874
    },
    {
        "content": "<blockquote>\n<p>$lookup on a code to get additional properties would need to do two lookups (probably at different servers), first to get the standard properties, and then to get the supplemental ones.</p>\n</blockquote>\n<p>I don't agree that this is true</p>",
        "id": 154019041,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1542351360
    },
    {
        "content": "<p>Neither do I.</p>",
        "id": 154019131,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1542370717
    },
    {
        "content": "<p>Hi everyone, I work in Paul's team, new to FHIR. Guess my main confusion is what exactly a supplement is. I could imagine two extreme views:<br>\n(1) A supplement is a \"patch\" to the code system it references, it's not a code system by itself (and thus can't be used in a Coding). A supplement-aware terminology server considers it to be part of the code system it \"supplements\".<br>\n(2) A supplement is a code system of its own right, it \"inherits\" the definitions from the code system it references and adds extra, much like a subclass in  the context of object oriented modeling. It thus has its own code system URL (e.g., loinc.org-ext1) and can be used in \"Coding\".</p>\n<p>For the \"patch\" view in (1), there could be issues of local vs. global/standard, and consistency issues across terminology servers on specific code systems (with/without different supplements defined).<br>\nFor the \"subclass\" view,  it may obligate terminology servers hosting such \"supplement/subclass\" code systems to be fully aware of/support the filters, properties, etc., defined in the original (parent) code system?<br>\nThis \"subclass\" view was what I thought it should roughly be but it does not appear to be the case based on the conversations in this thread?</p>",
        "id": 154019165,
        "sender_full_name": "Xiaocheng Luan",
        "timestamp": 1542378312
    },
    {
        "content": "<p>A code system supplement is absolutely constrained to be #1.  It <em>cannot</em> define new codes, nor can it define new meanings for codes.  However, it can define new properties, new display values and/or new relationships for codes defined in another code system.</p>",
        "id": 154019174,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542382068
    },
    {
        "content": "<p>If you have something that defines new codes, it's a code system.</p>",
        "id": 154019175,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542382097
    },
    {
        "content": "<p>(not a supplement)</p>",
        "id": 154019176,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542382102
    },
    {
        "content": "<p>Thanks for the clarification, Lloyd.</p>",
        "id": 154019231,
        "sender_full_name": "Xiaocheng Luan",
        "timestamp": 1542393956
    },
    {
        "content": "<p>Just to clarify-- no one is takling about adding codes.  The \"extra' Xiaocheng mentioned was a reference to extra properties.</p>\n<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> So, if I understand you correctly, for the form field autocompletion scenario, with each keystroke, the clinical system would first send an $expand request on the ValueSet, and then for each returned code (but together as a batch) there would be a $lookup request, with every lookup request also sending the VallueSet and a list of code supplements?  That seems a lot to ask to be sent for each keystroke in a field.</p>",
        "id": 154019242,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1542395469
    },
    {
        "content": "<p>If you need the properties to be displayed instead of just the display names and you need properties provided by supplements, there isn't much choice unless we revise $expand to be able to include properties</p>",
        "id": 154019253,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542397287
    },
    {
        "content": "<p>although you might not want to do it as a batch because that require POST and POST cannot be cached (at the HTTP layer)</p>",
        "id": 154019315,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1542410395
    },
    {
        "content": "<p>I’ve given this a lot of thought and tried various complicated ways to pipe expand and lookup together. The simplest way to solve this is to add the property parameters from $lookup to $expand, and then say that properties you ask for come back as extensions (for now)</p>",
        "id": 154019319,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1542421726
    },
    {
        "content": "<p>Agree.  This makes sense.</p>",
        "id": 154019369,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1542457893
    }
]