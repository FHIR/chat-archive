[
    {
        "content": "<p>I've had to introduce a new parameter to $validate-code when the java validator uses the terminology server. The problem relates to CodeableConcepts with multiple codes, one of which is valid and one of which is unknown. The validator now adds a valueSetMode parameter with possible values of CHECK_MEMERSHIP_ONLY and NO_MEMBERSHIP_CHECK</p>\n<ul>\n<li>CHECK_MEMERSHIP_ONLY - only called with a CodeableConcept, and indicates not to validated each coding, simply to check that one of them is in the value set</li>\n<li>NO_MEMBERSHIP_CHECK - only called with a Coding, and indicates that value set membership has already been tested, and just to check the coding details. Note that the value set is still provided, so that version / display etc can be checked if possible</li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span>. I don't know if anyone else needs to respond to this. Note that this change is immediate (including with the IG publisher). The consequence of not making this change is that any users using an alternate to <a href=\"http://tx.fhir.org\" target=\"_blank\" title=\"http://tx.fhir.org\">tx.fhir.org</a> will find that alternate codings are considered invalid</p>",
        "id": 185287647,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1578640325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Are you proposing adding a new parameter to $validate-code operation?</p>",
        "id": 185316218,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1578667850
    },
    {
        "content": "<p>I'm not sure. I just know what I had to do in the validator</p>",
        "id": 185333618,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1578678759
    },
    {
        "content": "<p>According to $validate-code operation, only one coding in a CodeableConcept need to be valid. <code>The server returns true if one of the coding values is in the value set, and may also validate that the codings are not in conflict with each other if more than one is present</code>. So what is point to add that CHECK_MEMBERSHIP_ONLY ?</p>",
        "id": 185335322,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1578679831
    },
    {
        "content": "<p>I had the same question.  It seems like we just want to be sure that is the behavior, and then CHECK_MEMERSHIP_ONLY  wouldn't be needed?  I think I can see why the NO_MEMBERSHIP_CHECK (or equivalent to it) still may be needed to be able to turn on and off the value set membership check for a Coding.</p>",
        "id": 185340963,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1578683391
    },
    {
        "content": "<p>so there's a couple of issues. Say you have a CodeableConcept that contains 2 codings. One is valid and is in the required value set. The other is invalid - it contains a code that does not exist in the specified code system</p>",
        "id": 185343320,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1578685032
    },
    {
        "content": "<p>$validate-code will fail. As it should.</p>",
        "id": 185343342,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1578685044
    },
    {
        "content": "<p>but the problem isn't that the value set requirement hasn't been met.</p>",
        "id": 185343357,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1578685058
    },
    {
        "content": "<p>for the validator, which is validating both the CodeableConcept, and also each Coding, it needs to tell the terminology service what to do, so that the errors are reported in the correct place</p>",
        "id": 185343501,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1578685118
    },
    {
        "content": "<p>Fair point.  Makes sense.</p>",
        "id": 185343591,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1578685182
    },
    {
        "content": "<p>Will the <a href=\"https://confluence.hl7.org/display/FHIR/Using+the+FHIR+Validator\" target=\"_blank\" title=\"https://confluence.hl7.org/display/FHIR/Using+the+FHIR+Validator\">Validator Documentation</a> be updated to reflect this?  This documentation also doesn't mention <a href=\"https://www.hl7.org/fhir/terminologycapabilities.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/terminologycapabilities.html\">TerminologyCapabilities</a> which appears to be required.  I'd be happy to contribute to the documentation, but not sure if I'm allowed to edit it directly or if I'm informed of everything that needs to be there.  If I can though let me know!</p>\n<p>Much appreciation for your work on this!</p>",
        "id": 185347586,
        "sender_full_name": "Reece Adamson",
        "timestamp": 1578687730
    },
    {
        "content": "<p>well, i was wondering about that last night. This is not part of the 'how to use the validator documentation', so it doesn't belong there. But it does need documenting, along with a couple of other things</p>",
        "id": 185348484,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1578688336
    },
    {
        "content": "<blockquote>\n<p>$validate-code will fail. As it should.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Why the $validate-code should fail?</p>",
        "id": 185349854,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1578689283
    },
    {
        "content": "<p>because one of the codes is invalid</p>",
        "id": 185350585,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1578689793
    },
    {
        "content": "<p>I hope that typo is only in this thread, not in the implementation <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 186948752,
        "sender_full_name": "Jim Steel",
        "timestamp": 1580349560
    },
    {
        "content": "<p>I don't quite follow why its important that these calls to $validate-code, with an invalid (presumably non-existent) code somewhere in the CodeableConcept, should return true</p>",
        "id": 186948996,
        "sender_full_name": "Jim Steel",
        "timestamp": 1580349859
    },
    {
        "content": "<p>For NO_MEMBERSHIP_CHECK on Codings, could this not be done with CodeSystem.$validate-code?</p>",
        "id": 186949038,
        "sender_full_name": "Jim Steel",
        "timestamp": 1580349940
    },
    {
        "content": "<p>The possibility of the display being overridden in the ValueSet seems to be discounted for use in a Coding by the ValueSet descriptive text that says <code>Any display name for a concept provided in the value set is for display to a human user. The display in the Coding that results from a user selecting a concept from the expansion must be taken from the underlying code system definition, even if a value set is referenced explicitly in the Coding (e.g. by an extension).</code></p>",
        "id": 186949103,
        "sender_full_name": "Jim Steel",
        "timestamp": 1580350027
    },
    {
        "content": "<p>hmm well we are not conforming to that in practice</p>",
        "id": 186949167,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580350114
    },
    {
        "content": "<p>in particular affiliates are using value sets to do language translations in versions prior to supplements being avialable</p>",
        "id": 186949665,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580350778
    },
    {
        "content": "<p>Could the CodeableConcept case not be handled by the client (in this case the validator) sending separate validate-code requests for each of the codings inside the CodeableConcept?</p>",
        "id": 186950034,
        "sender_full_name": "Jim Steel",
        "timestamp": 1580351351
    },
    {
        "content": "<p>I agree -- this really seems like pushing special-case client side semantics into the server rather than using the existing API semantics in a more explicit manner.</p>",
        "id": 186950208,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1580351615
    },
    {
        "content": "<p>it does to validate-code for each of the codings, yes.</p>",
        "id": 186950426,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580351882
    },
    {
        "content": "<p>initially I didn't pass the value set in for those requests. but then there's the pesky translation issue, so you still need the value set - hence the 'don't validate the value set membership' flag</p>",
        "id": 186950455,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580351928
    },
    {
        "content": "<p>also, the terminology server gets to validate the whole codeable concept as well, so it can say, for instance, 'these translations are invalid' and also so it can validate the binding as a whole. But I don't want it to validate the codings individually since I'm going to call validate-code on each of them as well</p>",
        "id": 186950481,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580351999
    },
    {
        "content": "<p>I'm still trying to understand the drivers here.  I get why you need the ValueSet to check the display, but why, in that case, do you want to prevent a membership test?</p>",
        "id": 186951923,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1580354198
    },
    {
        "content": "<p>For CHECK_MEMERSHIP_ONLY (sic) semantics, why not just strip the <code>display</code> text from the <code>CodeableConcept</code> before doing the <code>$validate-code</code> call?  Then the Tx won't have anything other than the codes to validate.</p>",
        "id": 186952466,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1580355015
    },
    {
        "content": "<p>I guess it may still do some \"are these multiple codings valid translations of each other\" checks</p>",
        "id": 186952494,
        "sender_full_name": "Jim Steel",
        "timestamp": 1580355071
    },
    {
        "content": "<p>but valid translations based on what criteria?</p>",
        "id": 186952632,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1580355256
    },
    {
        "content": "<p>That's up to the tx server</p>",
        "id": 186952633,
        "sender_full_name": "Jim Steel",
        "timestamp": 1580355267
    },
    {
        "content": "<p>From the spec for ValueSet.$validate-code.codeableConcept: <code>The server returns true if one of the coding values is in the value set, and may also validate that the codings are not in conflict with each other if more than one is present</code></p>",
        "id": 186952645,
        "sender_full_name": "Jim Steel",
        "timestamp": 1580355307
    },
    {
        "content": "<p>yes</p>",
        "id": 186954758,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580359135
    },
    {
        "content": "<blockquote>\n<p>why, in that case, do you want to prevent a membership test</p>\n</blockquote>\n<p>because there may be multiple codings, and only one of them needs to be in the value set. the validator doesn't know which one</p>",
        "id": 186954765,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580359166
    },
    {
        "content": "<p>Wait, isn't NO_MEMBERSHIP_CHECK for a Coding</p>",
        "id": 186954821,
        "sender_full_name": "Jim Steel",
        "timestamp": 1580359245
    },
    {
        "content": "<p>yes.</p>",
        "id": 186955072,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580359733
    },
    {
        "content": "<p>I am still confused. I think that by default, the validator and/or tx server should check membership only. According to the CodeableConcept data type <code>A typical use of CodeableConcept is to send the local code that the concept was coded with, and also one or more translations to publicly defined code systems such as LOINC or SNOMED CT.</code> In such \"typical\" use, the server does not know the local code (very possible).</p>",
        "id": 187019156,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1580411021
    },
    {
        "content": "<p>of course. but it may know some of the codes and be confident that they are not equivalent.</p>",
        "id": 187019721,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580411335
    },
    {
        "content": "<p>at present <a href=\"http://tx.fhir.org\" target=\"_blank\" title=\"http://tx.fhir.org\">tx.fhir.org</a> does not do anything like this anywhere</p>",
        "id": 187020333,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580411686
    },
    {
        "content": "<p>is this closed, or do we need to some face to face on this?</p>",
        "id": 187233402,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580703541
    },
    {
        "content": "<p>mainly that's a question for <span class=\"user-mention\" data-user-id=\"191376\">@Jim Steel</span> and <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span></p>",
        "id": 187233433,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580703575
    },
    {
        "content": "<p>I think we might need some face to face</p>",
        "id": 187233438,
        "sender_full_name": "Jim Steel",
        "timestamp": 1580703598
    },
    {
        "content": "<p>I think I got talking with <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> was that I was comfortable that there was some need, but I still needed some clarity on whether one or other case might not already be doable by other means, and it not then just getting comfortable that the proposed approach was the right fix. I can't speak for <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> 's opinion :)</p>",
        "id": 187233509,
        "sender_full_name": "Jim Steel",
        "timestamp": 1580703705
    },
    {
        "content": "<p>break out room at 4pm?</p>",
        "id": 187233648,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580703891
    },
    {
        "content": "<p>Presentations start at 4...</p>",
        "id": 187233865,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1580704220
    },
    {
        "content": "<p>I know</p>",
        "id": 187233875,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580704244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> what was the outcome of this?  Primarily curious if the validator is expecting support for this behavior (<code>CHECK_MEMBERSHIP_ONLY</code>) and, if so, where it is documented.</p>",
        "id": 209574412,
        "sender_full_name": "Reece Adamson",
        "timestamp": 1599689076
    },
    {
        "content": "<p>it presently is, yes, and is only documented here.</p>",
        "id": 209575611,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599689983
    },
    {
        "content": "<p>It's on my to do list to rework this after corridoor discussion back in Sydney</p>",
        "id": 209575689,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599690020
    },
    {
        "content": "<p>Attempting to summarise the gist how to avoid the need for these (reiterating some of the above comments):</p>\n<ul>\n<li>NO_MEMBERSHIP_CHECK says to validate code in context of a ValueSet (picking up code system version, if any, from the valueset, and also any alternate display text).  My understanding is that this is only every called when membership is known to be true, so it is only an optimisation and doesn't affect the actual response.</li>\n<li>CHECK_MEMBERSHIP_ONLY behaviour is identical to the normal behaviour iff the contained Codings have no display text.</li>\n</ul>\n<p>Note, the behaviour documented for validating codeableConcept does not say it should also fail if any of the included Codings is invalid, only that at least one (valid?) Coding is in the ValueSet.  Optionally also that the Codings do not conflict.</p>",
        "id": 209587910,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1599701460
    },
    {
        "content": "<p>the solution we discussed in Sydney is to change the output of the validate-code operation so that the validator knows what path in the CodeableConcept that the errors come from. It's still on my list to prototype that</p>",
        "id": 209967253,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600062628
    },
    {
        "content": "<p>this would avoid the rather curly need to partially ignore the value set</p>",
        "id": 209967255,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600062648
    }
]