[
    {
        "content": "<p>so I spent some time on the plane working on support for post-coordinated terms. and I came up with a question: does it make sense to allow or  disallow the use of post-coordinated codes in ValueSet.compose.include.filter.value</p>",
        "id": 153851155,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1475110216
    },
    {
        "content": "<p>?</p>",
        "id": 153851156,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1475110220
    },
    {
        "content": "<p>If the op relates to subsumption (isa / is-not-a / generalises), then yes it does make sense to allow it</p>",
        "id": 153851159,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1475112569
    },
    {
        "content": "<p>But it does raise the question of whether the op '=' means \"equivalent\" (which would require subsumption testing) or \"identical\" (which would only require lexical equality).</p>",
        "id": 153851160,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1475112704
    },
    {
        "content": "<p>yes it raises several questions. but why do you think it makes sense to allow it? </p>",
        "id": 153851164,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1475116554
    },
    {
        "content": "<p>what's a coherent use case?</p>",
        "id": 153851165,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1475116564
    },
    {
        "content": "<p>Any time there isn't an appropriate pre-coordinated code - eg <code>finding : laterality = side</code></p>",
        "id": 153851387,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1475193808
    },
    {
        "content": "<p>but that would be more conveniently 2 filters:<br>\n concept is-a finding<br>\n laterality = code</p>",
        "id": 153851388,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1475193888
    },
    {
        "content": "<p>Sorry, I keep losing my messages due to the <code>esc</code> key being right next to the backtick &amp; I was hurried in my re-typing.<br>\nThe correct post coordinated expression for this contains nesting and is<br>\n<code>finding : finding_site = ( body_structure : laterality = side )</code></p>",
        "id": 153851394,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1475194665
    },
    {
        "content": "<p>yes but you could do all that with filters and it would be more convenient</p>",
        "id": 153851400,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1475195419
    },
    {
        "content": "<p>You could do this example with one or more \"simple\" filters.  That approach probably is going to meet most of the typical cases, but there are more complex cases where that wouldn't work.  So I think we either need to decide to limit our support to the \"simple\" cases, or we'll need to allow the post-coordinated expressions (and support that approach).</p>",
        "id": 153851660,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1475530201
    },
    {
        "content": "<p>well, the filter that is relevant to me is expression = [constraint]. I think that it's a bad idea to support 2 different things with that sophistication; make it one or the other </p>",
        "id": 153851662,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1475530366
    }
]