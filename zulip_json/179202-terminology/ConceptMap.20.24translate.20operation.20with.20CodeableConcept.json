[
    {
        "content": "<p>Hello!</p>\n<p>I'm trying to wrap my head around implementing the <code>$translate</code> operation for <code>ConceptMap</code> (<a href=\"https://www.hl7.org/fhir/conceptmap-operations.html#translate\" target=\"_blank\" title=\"https://www.hl7.org/fhir/conceptmap-operations.html#translate\">https://www.hl7.org/fhir/conceptmap-operations.html#translate</a>). The spec says:</p>\n<blockquote>\n<p>One (and only one) of the in parameters (code, coding, codeableConcept) must be provided, to identify the code that is to be translated.</p>\n</blockquote>\n<p>Both code and coding are fairly straightforward as I'll only be translating a single concept. However, codeableConcept presents me with a challenge. A <code>CodeableConcept</code> can include 0..* codings, each with its own code. If I were to translate multiple source concepts identified in a single request, how should I deliver the resulting target concepts in the response such that it's clear which target concepts are associated with which source concepts?</p>",
        "id": 153949115,
        "sender_full_name": "Diederik Muylwyk",
        "timestamp": 1522349593
    },
    {
        "content": "<p>In this case, the spec states that \"the server can translate any of the coding values (e.g. existing translations) as it chooses\". If you require mappings to specific source concepts, my advice would be to make a request for each individual concept (which you might place in a batch).</p>",
        "id": 153949119,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1522350124
    },
    {
        "content": "<p>Hi, Peter.</p>\n<p>Can you describe a use case for submitting a request with a <code>CodeableConcept</code> that includes multiple codings? I'm having trouble interpreting the intent of the spec here. I don't understand what purpose it might serve to submit multiple source concepts in a single request if you can't reconcile the response with the input.</p>\n<p>I'll take a stab at it, though. Let's say I've got a few related concepts (for example, codes from a specific value set that identify the different bones in the hand). I want to find similar concepts in a different value set but I don't necessarily care which source concepts resulted in which specific target concepts. The response includes a number of concepts for hand bones that belong to the target value set. In this case, the equivalence for each target concept is generally meaningless because I can't know  for which specific source concept a given target concept is (for example) equivalent . Does this make sense?</p>",
        "id": 153949134,
        "sender_full_name": "Diederik Muylwyk",
        "timestamp": 1522351334
    },
    {
        "content": "<p>If you have multiple codings in a single CodeableConcept, then those codings all need to be talking about the same thing - so you'd never have a CodeableConcept that include codes for different bones.  You could have codes that said \"bone\" or \"hand\" or \"hand bone\" or the specific hand bone in question.  Translations would then be translations of one (or more) of those.</p>",
        "id": 153949157,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1522353047
    },
    {
        "content": "<p>An NZ use case might be where a primary care system has a medication coded using two different Code Systems and wishes either one of them to be translated to another (third) Code System. Translations between the different (now legacy) drug coding systems used by PMS occurs in GP2GP transfers and now we have a new(ish) Code System in NZMT.</p>",
        "id": 153949167,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1522353481
    },
    {
        "content": "<p>Lloyd. Each coding is a representation of the same concept. Of course. Thanks!</p>",
        "id": 153949168,
        "sender_full_name": "Diederik Muylwyk",
        "timestamp": 1522353530
    },
    {
        "content": "<p>Peter, that's a great use case. Thanks!</p>",
        "id": 153949170,
        "sender_full_name": "Diederik Muylwyk",
        "timestamp": 1522353584
    }
]