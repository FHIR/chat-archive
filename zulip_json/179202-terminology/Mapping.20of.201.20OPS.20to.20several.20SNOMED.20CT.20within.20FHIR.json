[
    {
        "content": "<p>Dear FHIR community,<br>\nI am a newbie here and read an interesting study about „aligning an administrative procedure coding system with SNOMED CT“ (<a href=\"http://ceur-ws.org/Vol-2518/paper-ODLS8.pdf\">http://ceur-ws.org/Vol-2518/paper-ODLS8.pdf</a>). Now I am uncertain how I can map different SNOMED CT codes, which stand for 1 OPS procedure, within one ConceptMap. Moreover, the paper differentiates between the logical connections AND, OR, and ADD.<br>\nI was thinking about to use the postcoordinated expressions (<a href=\"https://confluence.ihtsdotools.org/display/DOCSTART/7.+SNOMED+CT+Expressions\">https://confluence.ihtsdotools.org/display/DOCSTART/7.+SNOMED+CT+Expressions</a>). <br>\nI am really looking forward to hear about your experiences. Maybe you can give me a solution for these two examples of the pages 9/10:</p>\n<p>OPS:                                  1-430.1 Endoscopic biopsy of respiratory organs: bronchus<br>\nSNOMED CT 1:              312849006312849006 Biopsy of bronchus<br>\nSNOMED CT 2:              10847001 Bronchoscopy<br>\nlogical connection:    ADD</p>\n<p>OPS:                            1-490.6 Biopsy without incision on skin and subcutaneous tissue: lower leg<br>\nSNOMED CT 1:              287538006 Non-surgical skin biopsy<br>\nSNOMED CT 2:              118714000 Procedure on lower leg<br>\nlogical connection:     AND</p>",
        "id": 207534294,
        "sender_full_name": "Andrea Riedel",
        "timestamp": 1597936648
    },
    {
        "content": "<p>I'm not familiar with any mechanism in ConceptMap to map to a 'combination' of concepts.  If you can't define your concept in SNOMED CT using post-coordination, then I think you'd be looking at introducing a modifier extension to ConceptMap to do what you're looking for.  <span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 207785360,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1598207367
    },
    {
        "content": "<blockquote>\n<p>map to a 'combination' of concepts</p>\n</blockquote>\n<p>that's what ConceptMap.group.element.target.dependsOn and ConceptMap.group.element.target.product are for. They don't work that well, but it's a tough problem</p>",
        "id": 207791479,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598216924
    },
    {
        "content": "<p>Your second example is a straight forward post coordination with + I.e., 287548006+118714000<br>\nThe first example is more complex since it's a composite procedure -- you'd need to ensure the expression was subsumed by 55198006 | Bronchoscopy with biopsy|</p>",
        "id": 207793335,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1598220118
    },
    {
        "content": "<p>The Schulz, et. al. paper is actually describing a mapping from OPS to SNOMED CT using a non-standard compositional syntax that is a simpler alternative to the official SNOMED CT compositional grammar.  The definition of Coding.code states that it is \"A symbol in syntax defined by the system\".  The definition of ConceptMap.group.element.target.code is \"Identity (code or path) or the element/item that the map refers to\", which is different.  But in combination with ConceptMap.group.target I think it would be considered equivalent to Coding.system and Coding.code.  So using the Shulz, et. al syntax (e.g. something like \"312849006 |Biopsy of bronchus (procedure)| ADD 10847001 |Bronchoscopy (procedure)|\") would be non-standard.  But, with that said, if the syntax being used is declared and documented (as in the paper), then it seems that it would make sense for it to be allowed?  I'm not sure that we have an explicit way to do that (unless I'm forgetting), but an extension with the Expression data type likely could do it, as Expression.language specifies the specific syntax used (with the limitation that it should be included, or at least should be includable, in BCP13).</p>",
        "id": 207793449,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1598220285
    },
    {
        "content": "<p>The problem with product and dependsOn is that they don't involve the code system's semantics and thus you cannot clearly express your AND and ADD semantics.  OR is tricky too - you need two maps and a target more specific relationship</p>",
        "id": 207793458,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1598220306
    },
    {
        "content": "<p>if we wanted to support that directly, it would be a different code system that defined a grammar that included snomed ct concept its</p>",
        "id": 207793518,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598220430
    },
    {
        "content": "<p>I suppose it could be a code system supplement that would do that.  We can declare in the CodeSystem resource that it is 'compositional', but it seems that we still don't have a way (extension or otherwise) to declare the particular compositional syntax.</p>",
        "id": 207794322,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1598221911
    },
    {
        "content": "<p>the new syntax is what makes it a new code system. That the syntax uses SNOMED codes internally is specific to the syntax</p>",
        "id": 207794366,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598221959
    },
    {
        "content": "<p>Yeah, I get that.  But it seems like you would need a way to describe the syntax within the CodeSystem resource that defines it (for FHIR).  I guess you would do that in CodeSystem.description (likely including, in this case, a reference to the Schulz paper as well as some further description).</p>",
        "id": 207794709,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1598222546
    },
    {
        "content": "<p>yep, we've not tried to do anything other than narrative for syntax. Even if there's a formal grammar, it's not going to make sense or be usable without extensive human documentation</p>",
        "id": 207794852,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598222828
    },
    {
        "content": "<p>Upon a bit of further reflection, it seems to me that creating the new code system as a supplement to SNOMED CT probably isn't going to work (with the current specification), as defining a new compositional expression syntax will be adding \"new codes\" to the code system.  It will define a new set of values that (if allowed) would be specified in CodeSystem.concept.code (or Coding.code) - which violates the rule:</p>\n<blockquote>\n<p>A codesystem supplement cannot define any new CodeSystem.concept.code. i.e.: all CodeSystem.concept.code in the supplement must be a code from the \"supplemented\" code system</p>\n</blockquote>",
        "id": 207797247,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1598226674
    },
    {
        "content": "<p>Thanks for your input! Based on it, my colleague <span class=\"user-mention\" data-user-id=\"331216\">@Andrea Riedel</span> and our team arrived at the following solution that only uses SNOMED CT expressions and the basic ConceptMap without extensions:</p>\n<ul>\n<li>OR-joined Codes: easy, one element with two targets</li>\n<li>AND-joined codes: Use SCT postcoordination syntax to build one single \"FHIR-code\" as target</li>\n<li>ADD-joined codes: use target.product with some \"property\" value specific to ADD</li>\n<li>more complex expressions: transform into \"Disjunctive normal form\" like expression ((OR-less individual expressions seperated by OR). Use multiple element.targets and transform individual expressions as described above.<br>\n-Additional Material mapping: Use target.product with property specific to \"material\" (on all target elements of the mapping). In cases of only material mapping, leave target.code empty and use \"relatedTo\" Equivalence.</li>\n</ul>\n<p>However, I do not yet quite understand what values to use for product.property, since the grammar is not in any formal CodeSystem / ADD and \"Material\" concepts are not in some formal information model. Can we just invent some Magic URI? E.g. with NamingSystems, there is a Resource with additional Information at the URL target. Is there any FHIR-way to provide people that might stumble upon this property with an explanation?</p>",
        "id": 210273219,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1600267908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span></p>",
        "id": 210293196,
        "sender_full_name": "Robert McClure",
        "timestamp": 1600276836
    },
    {
        "content": "<p>I _think_ the promoted approach to deal with composite (ADD) things in SNOMED is via the Situation hierarchy.<br>\nHowever, it's not a part of the semantics / editorial guidance I'm familiar with, and I generally shun use of that hierarchy anyway since it is tainted with a semantically broken approach to negation.<br>\nThe place to start would be here <a href=\"https://confluence.ihtsdotools.org/display/DOCEG/Situation+with+Explicit+Context\">https://confluence.ihtsdotools.org/display/DOCEG/Situation+with+Explicit+Context</a></p>",
        "id": 210484550,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1600412293
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> , we will look into this. (For material, we're planning to use the material (attribute) SNOMED concept now, unfortunately, ADD is much less straightforward.)</p>",
        "id": 210485749,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1600413440
    }
]