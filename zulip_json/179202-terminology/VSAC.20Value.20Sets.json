[
    {
        "content": "<p>Does anyone know if FHIR can retrieve all available definition versions for a given OID?   For example:<br>\n<a href=\"https://cts.nlm.nih.gov/fhir/ValueSet?identifier=2.16.840.1.113883.3.526.2.39\" target=\"_blank\" title=\"https://cts.nlm.nih.gov/fhir/ValueSet?identifier=2.16.840.1.113883.3.526.2.39\">https://cts.nlm.nih.gov/fhir/ValueSet?identifier=2.16.840.1.113883.3.526.2.39</a>  <br>\nThis gives me back:<br>\n&lt;version value=\"20180302\"/&gt; <br>\nBut there are other definition versions that have been published that I may want to choose from.   Is this within the FHIR spec?</p>",
        "id": 153970352,
        "sender_full_name": "Steve Emrick",
        "timestamp": 1529356251
    },
    {
        "content": "<p>FHIR allows this - it's a question of whether the server exposes multiple versions or not.  VSAC <em>could</em> expose all of the versions, with a different 'id' for each, but the same OID and canonical URLs and different ValueSet.version elements.  If it did, your query would return all of them.  However, VSAC doesn't have to do that, and there are some complexities to doing so if VSAC also wants a direct GET on the canonical URL.  They're not impossible to work around, but it adds complexity to server design.</p>",
        "id": 153970373,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1529362873
    },
    {
        "content": "<p>Right.  Well my thinking is that since VSAC allows viewing of all past and present definition versions in the UI, returning them in the API is not too far out of reach.  <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  do you know of other implementations that already do this?</p>",
        "id": 153970375,
        "sender_full_name": "Steve Emrick",
        "timestamp": 1529365376
    },
    {
        "content": "<p>No.  In fact, just last week we were in deep discussions about the appropriate way to do it ourselves with HL7's integrated terminology management solution (which will handle v2, v3, CDA and FHIR terminology as an integrated whole using FHIR under the covers).</p>",
        "id": 153970376,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1529365522
    },
    {
        "content": "<p>On the other hand, the fact I don't know anyone who's doing it means very little :)</p>",
        "id": 153970377,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1529365562
    },
    {
        "content": "<p>Interesting.  Well my use case is that my implementation needs to be able to be aware of value set definition versions in a standards-based way, regardless of the 'profiles' or bindings that are using them for some other program or purpose.  Ideally the relevant metadata regarding the value set definition could be returned in some fashion.</p>",
        "id": 153970378,
        "sender_full_name": "Steve Emrick",
        "timestamp": 1529366856
    },
    {
        "content": "<p>What you're wanting seems reasonable.  <span class=\"user-mention\" data-user-id=\"191503\">@Robert McClure</span>, thoughts?</p>",
        "id": 153970389,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1529376683
    },
    {
        "content": "<p>As Lloyd says, FHIR itself is definitely capable of this.  From my recollection, I think the only real reason that it wouldn't (or couldn't) work that way for VSAC now is that they have chosen to use the value set OID as the actual 'id' of the ValueSet resource on the server, and not just as a value of 'identifier' (as referenced in your query).  Rob M. has definitely discussed this issue with them.</p>",
        "id": 153970398,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1529380543
    },
    {
        "content": "<p>I think that VSAC made the wrong decision for their use case. I agree that they are conformant; just that the decision they made means that they can't support your use case. As said, this has been a signficant discussion with VSAC</p>",
        "id": 153970428,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1529407045
    },
    {
        "content": "<p>ok I see.   they are not making a distinction between the internal server ID and a public-facing OID.  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  or anyone else, is what I am asking for available on other FHIR  implementations?</p>",
        "id": 153970637,
        "sender_full_name": "Steve Emrick",
        "timestamp": 1529440792
    },
    {
        "content": "<p>Ontoserver would support this.  If you store each version with a separate id, then you can use each separately at an instance level, they'll all be visible via search, and assuming that the versioning scheme matches either semantic versioning or datestamp versioning then the latest version will be selected when a specific version/instance isn't specified.</p>",
        "id": 153970685,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1529465852
    },
    {
        "content": "<p>Note, you could also support the VSAC convention where the id == the oid in the case of the latest version.<br>\nFor example, for <a href=\"https://cts.nlm.nih.gov/fhir/ValueSet?identifier=2.16.840.1.113883.3.526.2.39\" target=\"_blank\" title=\"https://cts.nlm.nih.gov/fhir/ValueSet?identifier=2.16.840.1.113883.3.526.2.39\">https://cts.nlm.nih.gov/fhir/ValueSet?identifier=2.16.840.1.113883.3.526.2.39</a> you would store version 1.0.0 as <a href=\"https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.39\" target=\"_blank\" title=\"https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.39\">https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.39</a> then when a later version (say 1.1.0) is to be published, this would replace <a href=\"https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.39\" target=\"_blank\" title=\"https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.39\">https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.39</a> but you would the re-publish the 1.0.0 version as <a href=\"https://cts.nlm.nih.gov/fhir/ValueSet/xyz\" target=\"_blank\" title=\"https://cts.nlm.nih.gov/fhir/ValueSet/xyz\">https://cts.nlm.nih.gov/fhir/ValueSet/xyz</a> (for some arbitrary xyz, or just use POST and let the server chose).  This way <a href=\"https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.39\" target=\"_blank\" title=\"https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.39\">https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.39</a> will always be the latest version, but historical versions will still be present and returned in a search like <a href=\"https://cts.nlm.nih.gov/fhir/ValueSet?identifier=2.16.840.1.113883.3.526.2.39\" target=\"_blank\" title=\"https://cts.nlm.nih.gov/fhir/ValueSet?identifier=2.16.840.1.113883.3.526.2.39\">https://cts.nlm.nih.gov/fhir/ValueSet?identifier=2.16.840.1.113883.3.526.2.39</a></p>",
        "id": 153970686,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1529466259
    },
    {
        "content": "<p>I think most other servers support it</p>",
        "id": 153970700,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1529486329
    },
    {
        "content": "<p>Sorry, been off zulip for a bit. <span class=\"user-mention\" data-user-id=\"192442\">@Steve Emrick</span>, VSAC says they have some sort of solution for this but they have not told me how that can work. I assume we've not seen this used much is because users are not exercising it yet - I agree that most servers I know of <strong>do</strong> support it. I do know of one situation in C-CDA: Problem Type where two versions of the same value set are needed, but once a user downloads the value set, it's not clear they would need API-based access to the version-specific expansion on an ongoing basis. Sure, I <strong>absolutely</strong> want the VSAC FHIR API to support this, and I'll note that the native VSAC API does, as you know. But most of the use-cases I bring up are constructed to demonstrate the need. Can you be more specific on what your need is? Perhaps then we could push VSAC a bit harder.</p>",
        "id": 153970847,
        "sender_full_name": "Robert McClure",
        "timestamp": 1529517442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191503\">@Robert McClure</span> thanks.   Normally I would happily use the SVS API, however the &lt;version&gt; element returned in those calls are not definition versions, but expansion versions that either a) represent the date at which the expansion took place or b) are actually versions of profiles/bindings (e.g. 'MU2 2018....Update').   See example: <a href=\"https://vsac.nlm.nih.gov/vsac/oid/2.16.840.1.113762.1.4.1116.221/versions\" target=\"_blank\" title=\"https://vsac.nlm.nih.gov/vsac/oid/2.16.840.1.113762.1.4.1116.221/versions\">https://vsac.nlm.nih.gov/vsac/oid/2.16.840.1.113762.1.4.1116.221/versions</a></p>\n<p>In addition, if your value set is not bound to a profile, the expansion version of that value set (via the SVS API) is auto-replaced when VSAC updates relevant terminologies.     We encountered this recently in our dev environment when a value set version that was referenced for drug allergies literally disappeared.   So effectively, unbound value sets only have 1 (volatile) expansion version available via the SVS API.    They may have announced this behavior on the VSAC listserv at some point after I left NLM so maybe I missed it.    </p>\n<p>The use case is that our software platform is pulling in value sets for drug allergies/intolerances.   If we update a definition version of a value set within VSAC, I would like our platform to be aware of the fact that there is a new definition version and give our Science staff the option of updating the content to align with the new versions (as we will publish a metadata file that includes OID, Name, Definition Version, Code System, and Code System Version).   Now, I realize we can create a profile in VSAC that will give us binding versions, but this is suboptimal for our use case because we would effectively have to publish a new binding version as a pre-requisite for the definition version to become visible, or alternatively use the 'draft' options (I know the eCQM crowd uses this if I recall correctly).     Bottom line is that VSAC has definition versions available in the user interface, so it does have knowledge of available definition versions for all OIDs.  Making them available over web services for implementations to discover is the ask.  <span class=\"user-mention\" data-user-id=\"191503\">@Robert McClure</span>  let's discuss more...</p>",
        "id": 153970882,
        "sender_full_name": "Steve Emrick",
        "timestamp": 1529524718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192442\">@Steve Emrick</span> Let's email and find a time to talk next week. A couple of comments:</p>\n<blockquote>\n<p>So effectively, unbound value sets only have 1 (volatile) [Latest] expansion version available via the SVS API. </p>\n</blockquote>\n<p>You've discovered a key item in VSAC workflow and there are actually <em>two</em> ways to have a fixed \"expansion version\" live in VSAC:<br>\n1. An expansion that is created for a release, is tied to a VSAC expansion version and given the expansion version name as it's expansion version identifier.<br>\n2. An expansion that is explicitly created for publication by the author using the expansion/publication UI. This type of expansion will be given a publication date string as it's expansion version id. It is this second approach you can use for any of your value sets to insure they are officially published forever. And while not available originally, you can now do this for any value set definition version and code system combination, and so you can create a published expansion for older content.<br>\nNone of this fixes the API issues you have identified and you, better than most, understand getting this changed may not be easy...</p>",
        "id": 153970933,
        "sender_full_name": "Robert McClure",
        "timestamp": 1529580271
    }
]