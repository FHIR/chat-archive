[
    {
        "content": "<p>(Cross posting from the committers)<br>\nIs this valueset/codesystem really going to be normative?<br>\n<a href=\"http://build.fhir.org/valueset-FHIR-version.html\" target=\"_blank\" title=\"http://build.fhir.org/valueset-FHIR-version.html\">http://build.fhir.org/valueset-FHIR-version.html</a><br>\nI think it needs to be extensible, and obviously needs to be changed for publishing the final version.<br>\nAnd if the CapabilityStatement doesn't change, how can it be a required binding to exactly this valueset, and not extensible to add in the new versions as they are built?<br>\nI picked up the FHIR Version valueset change as its a required binding in <a href=\"http://hl7.org/fhir/2018Sep/capabilitystatement.html\" target=\"_blank\" title=\"http://hl7.org/fhir/2018Sep/capabilitystatement.html\">http://hl7.org/fhir/2018Sep/capabilitystatement.html</a> to an id value, but in the CI build its a <code>code</code> type, hence we generate an enumeration for it.<br>\nIs this as much of a problem as I think it is?</p>",
        "id": 154015399,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541246041
    },
    {
        "content": "<p>The <code>resource_type</code> valueset/codesystem also has a similar issue, however there is a note on that stating that it will be regenerated from version to version.<br>\n(however it won't need to be updated for final publication or R4)</p>",
        "id": 154015400,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541246265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 154015401,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541246468
    },
    {
        "content": "<p>Answered on committers.  In short, normative and required (not extensible) is correct.  Required bindings can be extended by HL7 in new versions.  The fhir_version code system is no different from gender, observation status or any other required binding in that sense.</p>",
        "id": 154015415,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541255843
    },
    {
        "content": "<p>So normative valueset can change from version to version, and this one will change for every version (even connectathon inerin builds)</p>",
        "id": 154015470,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541275020
    },
    {
        "content": "<p>I'll re-read the versioning rules page.</p>",
        "id": 154015471,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541275062
    },
    {
        "content": "<p>Let's keep in mind that a required binding is a binding to <strong>a value set definition</strong>, not to an expansion. Restriction to a specific expansion would only occur is the binding was STATIC. So if the CLD is \"all codes in code system x\" and the code system gets a new version, the conformant expansion will change without any other thing being versioned <em>even with a required binding.</em></p>",
        "id": 154015520,
        "sender_full_name": "Robert McClure",
        "timestamp": 1541310325
    },
    {
        "content": "<p>It's also a <code>code</code> data type - which means that for the purpose of  code generation, it is a STATIC binding.  the set of codes can't change except with a new release</p>",
        "id": 154015545,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541344602
    },
    {
        "content": "<p>There's something seriously wrong with this code system - the code <code>3.6.0</code> has the definition <code>Current Development build</code> but as soon as we get R4, this definition will be wrong</p>",
        "id": 154016017,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1541540205
    },
    {
        "content": "<p>this value set should have this extension added to it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">&quot;http://hl7.org/fhir/StructureDefinition/valueset-special-status&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">&quot;This Value Set is normative - it is generated based on the information defined in this</span>\n<span class=\"s\">     specification. The definition will remain fixed  across versions, but the actual contents</span>\n<span class=\"s\">     will change from version to version&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/extension&gt;</span>\n</pre></div>",
        "id": 154016018,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541540790
    },
    {
        "content": "<p>for me, that's a technical correction</p>",
        "id": 154016019,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541540808
    },
    {
        "content": "<p>there's 4 other value sets like this</p>",
        "id": 154016020,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541540832
    },
    {
        "content": "<p>Can that be a coding I stead of just string so my generator can pick it up without matching the description?</p>",
        "id": 154016023,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541541247
    },
    {
        "content": "<p>I don't understand this question</p>",
        "id": 154016024,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541541338
    },
    {
        "content": "<p>My concern is that the \"definition\" of the codes in the underlying CodeSystem will change from version to version.  This does not gel with the notion of concept permanence</p>",
        "id": 154016045,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1541543512
    },
    {
        "content": "<p>no that won't happen</p>",
        "id": 154016052,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541546104
    },
    {
        "content": "<p>It can't happen for this one - but it could for other normative code systems -e.g. ones that list value sets.  If the description/scope for a draft resource definition changes, then the \"definition\" of the code will absolutely change.  The special status will have to draw attention to this</p>",
        "id": 154016056,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541547465
    },
    {
        "content": "<p>So the code \"3.6.0\" will forever have the definition \"Current development build\"?</p>",
        "id": 154016057,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1541547614
    },
    {
        "content": "<p>The value foreach build / snapshot changes is what I understand (now)</p>",
        "id": 154016063,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541551633
    },
    {
        "content": "<p>So current keeps moving (there is now value current though)</p>",
        "id": 154016064,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541551671
    },
    {
        "content": "<p>current keeps moving, but I will remove old current versions - e.g. 3.6.0 will disappear</p>",
        "id": 154016066,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541552140
    },
    {
        "content": "<p>when I publish R4, it will have 4.0.0, and current will become 4.1.0</p>",
        "id": 154016067,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541552167
    },
    {
        "content": "<p>So, I am expecting the 4.0.0 version of the CodeSystem to have a code \"4.0.0\" with display = \"4.0.0\" and definition = something like \"FHIR Release 4 (R4)\", but I am not expecting that the 4.0.0 version of this CodeSystem will have the code \"3.6.0\" with a definition of \"Current Development build\", but rather another code like \"4.1.0\" with that \"definition\"<br>\n(um, I think this is as <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> just said).</p>\n<p>My concern here is that the text being used to define the code is not <em>defining</em> because it is inherently relative to a point in time.</p>",
        "id": 154016068,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1541552404
    },
    {
        "content": "<p>this is only true for the current version, and it will always be removed.</p>",
        "id": 154016070,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541552548
    },
    {
        "content": "<p>I suppose we could make the definition clear by changing the definition of the current build to \"Current Development build - post Baltimore Meeting Sept 2018\"</p>",
        "id": 154016071,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541552606
    },
    {
        "content": "<p>That would be better, yes.  Is removal of the code <code>3.6.0</code> \"correct\", or should it be made <code>inactive</code> (or <code>retired</code>) instead?  Should it currently be marked <code>experimental</code>?</p>\n<p>Also, is there a reason that \"4.0.0\" is not already defined?</p>",
        "id": 154016072,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1541552953
    },
    {
        "content": "<p>doesn't exist yet. I do that sort of stuff in the run in to actually publishing R4, which will start in early December</p>",
        "id": 154016073,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541553089
    },
    {
        "content": "<p>those old codes would be made retired if we kept them around. but why would we do that?</p>",
        "id": 154016141,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541577137
    },
    {
        "content": "<p>this is not a clinically meaningful terminology</p>",
        "id": 154016142,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541577152
    },
    {
        "content": "<p>No one should ever go into production with \"current build\" because it reflects content that changes many hundred times over the course of a release.  There's no frozen snapshot of it and you'd have no hope of getting interoperability.</p>",
        "id": 154016170,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541595471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  Oh boy do I strongly dislike the idea of embedding \"current build\" into the definition of a code when that idea will be moved from code to code over time. Remember the foundational premise of meaning permanence. Why is this needed?? Name the version meaning as you have done in all the other codes and identify which one is \"current\" some other way please! Seems to me it will always be the one with the largest semantic value? Or last one in the code system?</p>",
        "id": 154016252,
        "sender_full_name": "Robert McClure",
        "timestamp": 1541612487
    },
    {
        "content": "<p>It's needed because the code generators need it.  When we're publishing the CI build, something must be present in the version element and it must be present in the value set.  I guess in theory we could ditch semantic versioning for the CI build and just have a fixed code of \"current\", but I'm not sure if that would cause other issues.</p>",
        "id": 154016304,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541616188
    },
    {
        "content": "<p>it'll never be in a release version of the code system. But just to make everyone happy, I will make the useless definition specific</p>",
        "id": 154016342,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541619278
    },
    {
        "content": "<p>Actually, I think we can do this by retiring the old \"Current Development build\" code (we shouldn't remove it) and creating a new one - so there will be only one code with the definition of \"Current Development build\" that is active at any point in time.  As long as the '3.6.0' code, for example, isn't going to be used to indicate anything other than the current build during the period that it is active (which is what Grahame described), then I don't think this is a problem (and I don't think we have to make it \"specific\").</p>",
        "id": 154016353,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1541619772
    },
    {
        "content": "<p>Right. this is not about concept permanence at all</p>",
        "id": 154016355,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541619883
    },
    {
        "content": "<p>You've already ditched semantic versioning because <code>3.6.0</code> has breaking changes with respect to 3.x for x &lt;= 5</p>",
        "id": 154016462,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1541630629
    },
    {
        "content": "<p>only for current build</p>",
        "id": 154016489,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541633275
    },
    {
        "content": "<p>actually, no. we use semver - but we prefix with a milestone...</p>",
        "id": 154016496,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541634034
    },
    {
        "content": "<p>So the intent is that each published version of that CodeSystem will be updated, and no published version will ever have the current build included in it?<br>\n(I don't see any harm in adding R4 there now though...)</p>",
        "id": 154016509,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541636234
    },
    {
        "content": "<p>yes</p>",
        "id": 154016510,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541636391
    },
    {
        "content": "<p>agree that there's no harm in adding R4, I just haven't got to it yet</p>",
        "id": 154016511,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541636396
    }
]