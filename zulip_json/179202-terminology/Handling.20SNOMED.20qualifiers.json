[
    {
        "content": "<p>Is there an agreed method for catering for SNOMED qualifiers. </p>",
        "id": 153839959,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1468996991
    },
    {
        "content": "<p>Looking at the following V3 snippet, how would this be coded in FHIR.</p>",
        "id": 153839960,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1468997009
    },
    {
        "content": "<p>&lt;value xsi:type=\"CD\" code=\"405843009\" displayName=\"Widespread metastatic malignant neoplastic disease\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.15\"&gt;<br>\n                        &lt;qualifier&gt;<br>\n                           &lt;name codeSystem=\"2.16.840.1.113883.2.1.3.2.4.15\" code=\"106229004\" displayName=\"Qualifier for type of diagnosis\"/&gt;<br>\n                           &lt;value codeSystem=\"2.16.840.1.113883.2.1.3.2.4.15\" code=\"8319008\" displayName=\"Principal diagnosis\"/&gt;<br>\n                        &lt;/qualifier&gt;<br>\n                     &lt;/value&gt;</p>",
        "id": 153839961,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1468997012
    },
    {
        "content": "<p><a href=\"http://hl7-fhir.github.io/snomedct.html#4.1.1.1.1\" target=\"_blank\" title=\"http://hl7-fhir.github.io/snomedct.html#4.1.1.1.1\">http://hl7-fhir.github.io/snomedct.html#4.1.1.1.1</a></p>",
        "id": 153839966,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468998348
    },
    {
        "content": "<p>The following SNOMED CT artifacts are valid in the code element for the <a href=\"http://snomed.info/sct\" target=\"_blank\" title=\"http://snomed.info/sct\">http://snomed.info/sct</a> namespace: Concept IDs , Expressions  (grammar ) and SNOMED Legacy codes .</p>",
        "id": 153839967,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468998356
    },
    {
        "content": "<p>so you would convert that to the snomed grammar prior to expressing in FHIR. </p>",
        "id": 153839968,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468998386
    },
    {
        "content": "<p>405843009: 106229004= 8319008 off the top of my head</p>",
        "id": 153839969,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1468998405
    },
    {
        "content": "<p>Back on the subject of qualifiers. using the example by <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> above. How would this impact a RESTful query if say this was an Observation.Code value?. We have some partners here in England that are currently looking to handle qualifiers using a datatype extension as opposed to a compositional expression. <br>\nHow are others doing this?</p>",
        "id": 153846446,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1473092222
    },
    {
        "content": "<p>I have not heard of any one doing extensions for this. </p>",
        "id": 153846463,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1473108159
    },
    {
        "content": "<p>why would people choose to use an extension rather than a snomed ct expression?</p>",
        "id": 153846464,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1473108176
    },
    {
        "content": "<p>What is  the example exactly?  can't find it</p>",
        "id": 153846479,
        "sender_full_name": "Eric Haas",
        "timestamp": 1473123209
    },
    {
        "content": "<p>I asked how to cater for SNOMED qualifiers and the response was to use a compositional expression. So in FHIR the following</p>\n<p>405843009: 106229004= 8319008 </p>\n<p>would be comparable to this V3 construct</p>",
        "id": 153846491,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1473148481
    },
    {
        "content": "<p>&lt;value xsi:type=\"CD\" code=\"405843009\" displayName=\"Widespread metastatic malignant neoplastic disease\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.15\"&gt;<br>\n                        &lt;qualifier&gt;<br>\n                           &lt;name codeSystem=\"2.16.840.1.113883.2.1.3.2.4.15\" code=\"106229004\" displayName=\"Qualifier for type of diagnosis\"/&gt;<br>\n                           &lt;value codeSystem=\"2.16.840.1.113883.2.1.3.2.4.15\" code=\"8319008\" displayName=\"Principal diagnosis\"/&gt;<br>\n                        &lt;/qualifier&gt;<br>\n                     &lt;/value&gt;</p>",
        "id": 153846492,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1473148538
    },
    {
        "content": "<p>yes that's correct</p>",
        "id": 153846496,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1473154529
    },
    {
        "content": "<p>I assume you mean by the question of how to do a RESR Query for SNOMED Expression you have an expression in a coded element. <br>\nFor Example:</p>\n<div class=\"codehilite\"><pre>&quot;code&quot;: {\n &quot;coding&quot;: [\n  {\n    &quot;system&quot;: &quot;http://snomed.info/sct&quot;,\n    &quot;code&quot;: &quot;405843009: 106229004= 8319008&quot;,\n    &quot;display&quot;: &quot;Widespread metastatic malignant neoplastic disease: Qualifier for type of diagnosis= Principal diagnosis&quot;\n   }\n  ]\n },\n</pre></div>\n\n\n<p>And you want this Condition to show up in your query for code = 405843009</p>\n<div class=\"codehilite\"><pre>GET [base]/Condition?code=http://snomed.info.sct|405843009\n</pre></div>",
        "id": 153846587,
        "sender_full_name": "Eric Haas",
        "timestamp": 1473186512
    },
    {
        "content": "<p>I don't  think that has been answered or at least documented in the specification...</p>",
        "id": 153846589,
        "sender_full_name": "Eric Haas",
        "timestamp": 1473186597
    },
    {
        "content": "<p>For this to work (if the server supports reasoning on SNOMED CT compositional expressions - not too likely), the search also needs subsumption, such as:</p>\n<p>GET [base]/Condition?code:below=http://snomed.info.sct|405843009 </p>",
        "id": 153846591,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1473188433
    },
    {
        "content": "<p>I think this works on my server</p>",
        "id": 153846593,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1473192346
    },
    {
        "content": "<p>that's great - I need to check that out</p>",
        "id": 153846597,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1473192549
    },
    {
        "content": "<p>do we document that Queries may need to consider expressions rather than simple lists of codes?</p>",
        "id": 153846610,
        "sender_full_name": "Eric Haas",
        "timestamp": 1473200886
    },
    {
        "content": "<p>subsumption logic, yes </p>",
        "id": 153846614,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1473203399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Your server does full subsumption reasoning?<br>\nWould GET [base]/Condition?code:below=http://snomed.info.sct|128462008 match the code 64572001:116676008=14799000 ?</p>",
        "id": 153846630,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1473211574
    },
    {
        "content": "<p>umm, it should.... but it's possible I haven't strung all the pieces together yet. </p>",
        "id": 153846637,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1473224496
    }
]