[
    {
        "content": "<p>Required binding mean a source system  can support 80% of them and still be conforman,   I kind of derived it from looking at the min binding extension.  <a href=\"http://hl7.org/fhir/StructureDefinition/elementdefinition-minValueSet\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/elementdefinition-minValueSet\">http://hl7.org/fhir/StructureDefinition/elementdefinition-minValueSet</a>  but <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  this particular nugget is not explicitly stated in the spec ( I can't find it)? should it be?</p>",
        "id": 172988623,
        "sender_full_name": "Eric Haas",
        "timestamp": 1565567562
    },
    {
        "content": "<p>A system can be conformant if it only supports one code.  There's an extension to indicate the minimum that must be supported</p>",
        "id": 172994314,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1565579106
    },
    {
        "content": "<p>This is a surprise to me if I'm understanding <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> . Are you saying that vocabulary has agreed that to be conformant to a required binding, all a system has to do is understand one of the defined members of the required expansion? I do not remember hearing or voting on that and would like to see the specification in FHIR that purports to clarify that.</p>",
        "id": 173037063,
        "sender_full_name": "Robert McClure",
        "timestamp": 1565626429
    },
    {
        "content": "<p>there's a subtle but important change there, between 'support' and 'understand'.</p>",
        "id": 173052284,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565637986
    },
    {
        "content": "<p>I think we can say that a system cannot <em>mis-understand</em> any of the codes in a required binding. But we do not say anywhere which particular values in an allowed value domain that a system must <em>support</em></p>",
        "id": 173052350,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565638056
    },
    {
        "content": "<p>this is typically a subject that is taken up in particular implementation guides</p>",
        "id": 173052377,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565638076
    },
    {
        "content": "<blockquote>\n<p>this is typically a subject that is taken up in particular implementation guides</p>\n</blockquote>\n<p>As one currently tasked to review all the SCT concepts in a CDA Implementation Guide, that makes sense to me!  Given that, in practice, there is no guarantee that any given concept will be active in the edition and version of the underlying Code System in use, it would be impractical for an international standard to mandate support for particular concepts in many Value Sets, even where there is a required binding to a VS.</p>",
        "id": 173056214,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1565641012
    },
    {
        "content": "<p>So what I am hearing is two things:</p>\n<p>1. It may not be obvious to the average reader of the spec that required does not mean that they have to support all the codes.<br>\n2. That IGs may define what codes must be supported</p>",
        "id": 173060457,
        "sender_full_name": "Eric Haas",
        "timestamp": 1565643835
    },
    {
        "content": "<p>if not specified in an IG then the only two ways I can think of  for the implementation to expose this information is if they create their own profiles or return OperationOutcomes for unsupported codes on queries etc...</p>",
        "id": 173060533,
        "sender_full_name": "Eric Haas",
        "timestamp": 1565643869
    },
    {
        "content": "<p>Required binding is about what codes are permitted.  The set of codes that<br>\nare supported MUST be allowed to be a subset and the base binding is (and<br>\nmust be) silent as to the size and nature of the subset.  A profile can use<br>\na standard extension to indicate a \"must support\" value set if desired.<br>\nThe core spec never asserts mustSupport about anything.  Even mandatory<br>\nelements can be hard- coded as fixed values by senders or ignored by<br>\nreceivers.</p>\n<p>It's important that we separate declarations of \"what's allowed in the<br>\ninstance\" from \"what must implementers actually support/do something useful<br>\nwith\".  The latter can only ever be asserted by profiles.</p>",
        "id": 173067051,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1565648672
    },
    {
        "content": "<p>I think we need to state that explicitly about required bindings.  (for the casual fan)</p>",
        "id": 173129289,
        "sender_full_name": "Eric Haas",
        "timestamp": 1565714269
    },
    {
        "content": "<p>make a task...</p>",
        "id": 173185074,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565772136
    },
    {
        "content": "<p>Ok - well this to me sounds like something we need to make <strong>very clear</strong> to implementers and profile creators as it seems to me to be a <strong>BIG</strong> hole in how folks will assume the process works. What is the default behavior expected to be? I'm going to guess <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> will say an implementer does not have to <em>support</em> any required codes at all. So <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , tell me what it means in plain english to implement a required binding with none of this specified? What would I be <strong>required</strong> to do? How do I explain you need to \"not <em>mis-understand</em>\" all the codes and you don't need to <em>support</em> any of them?  What does this mean practically?</p>",
        "id": 173234341,
        "sender_full_name": "Robert McClure",
        "timestamp": 1565811083
    },
    {
        "content": "<p>I'm not understanding this. A required binding means that the element, if present, SHALL contain one of the specified codes. Surely that's crystal clear.</p>",
        "id": 173240655,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565815530
    },
    {
        "content": "<p>I'm not sure what you think \"<strong>support</strong> any codes\" means.</p>",
        "id": 173240741,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565815573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I'm asking how this requirement is <strong>implemented</strong>, I already understand what is expected in the object created. That's easy, you need to be clear about what you are telling implementers to create in their systems.</p>",
        "id": 173243190,
        "sender_full_name": "Robert McClure",
        "timestamp": 1565817270
    },
    {
        "content": "<p>I don't know what you mean. It's implemented by doing whatever it takes to make sure that the instance is valid, or that you don't mis-represent it.</p>",
        "id": 173243512,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565817518
    },
    {
        "content": "<p>As soon as we start trying to write anything extra about what it means to implement, we run into the problem that there's a limitless number of ways to use FHIR, because who knows what you are trying to do. That's why must-support is never set to true in the base specification; instead, we delegate that to implementation guides, where they may have enough context to make rules about what your system must do</p>",
        "id": 173243659,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565817616
    },
    {
        "content": "<p>If an element with a required binding is present, it must have a code from the value set.  However, it's possible the sender will not \"support\" some or even most of the codes in the valueset.  For example, a system could hardcode Patient.gender as \"unknown\" if it was trying to comply with US Core.  Similarly, a receiver might ignore any codes other than \"male\" or \"female\".  If you want your profile to dictate more, you have the extension to do that.</p>",
        "id": 173257766,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1565832760
    },
    {
        "content": "<p>it seems to me that we could be clear in the section about must-support that in the absence of any implementation guidance otherwise, systems are not required to 'support' the entire value domain of any element (or not support the element at all) as long as instances are conformant, and to reference this from the section about required bindings</p>",
        "id": 173259549,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565834988
    },
    {
        "content": "<p>In addition to what <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> has said, I think we need to make clear that even if the element is a \"must support\" it requires an extension to also define any codes in a value set, even a required one, which codes an implementer must accept and be able to send. The fact that this is an extension in the base is a big mistake IMO - 100% of systems must decide what codes they can send and receive to use - ever heard of semantic interoperability? I'll bet a <em>purchased beer</em> that less than 50% pf FHIR implementers understand the implications of this thread.  Asking folks about this at the connectahon would be worthwhile.</p>",
        "id": 173264110,
        "sender_full_name": "Robert McClure",
        "timestamp": 1565842248
    },
    {
        "content": "<p>well, you can certainly propose that we change something. It might be time to consider elevating min-valueSet and max-valueSet to base properties of ElementDefinition.binding rather than being extensions. But I don't think that'll help much with the understanding problem. </p>\n<p>but while we're talking about we can talk about additional additional other bindings, since we have ongoing discussion about the limitations of a single main binding (<span class=\"user-mention\" data-user-id=\"191375\">@Alexander Henket</span> )</p>",
        "id": 173264240,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565842420
    },
    {
        "content": "<p>I agree with that</p>",
        "id": 173264324,
        "sender_full_name": "Robert McClure",
        "timestamp": 1565842499
    },
    {
        "content": "<p>I could certainly extend the IG publisher such that it could represent an expansion with codes that are also in the min-ValueSet binding in bold, for instance, if there was such a binding defined</p>",
        "id": 173264335,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1565842513
    },
    {
        "content": "<p>Yes, we need to talk about allowing for additional bindings</p>",
        "id": 173264360,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565842550
    },
    {
        "content": "<p>and making min and max-valueSet core in ElementDefinition I think is also a good step, especially since we use it (at least max) in the core spec</p>",
        "id": 173264478,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1565842705
    },
    {
        "content": "<p>I think a  better place to state the clarification would be here: <a href=\"http://build.fhir.org/terminologies.html#strength\" target=\"_blank\" title=\"http://build.fhir.org/terminologies.html#strength\">http://build.fhir.org/terminologies.html#strength</a>  by adding to each binding  where it is stated \"the concept in this element SHALL be from the specified value set\"   Lloyd's dulcet phrasing : \"However, it's possible a system will not \"support\" some or even most of the codes in the valueset.\"</p>",
        "id": 173321945,
        "sender_full_name": "Eric Haas",
        "timestamp": 1565901006
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=23707\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=23707\">GF#23707</a> as a straw man proposal for vocab to gnaw on</p>",
        "id": 173322538,
        "sender_full_name": "Eric Haas",
        "timestamp": 1565901517
    },
    {
        "content": "<blockquote>\n<p>\"However, it's possible a system will not \"support\" some or even most of the codes in the valueset.\"</p>\n</blockquote>\n<p>After \"support\" add a link to some docco on must support, maybe <a href=\"https://hl7.org/fhir/R4/conformance-rules.html#mustSupport\" target=\"_blank\" title=\"https://hl7.org/fhir/R4/conformance-rules.html#mustSupport\">https://hl7.org/fhir/R4/conformance-rules.html#mustSupport</a></p>",
        "id": 173334866,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1565912782
    },
    {
        "content": "<p>OTOH I worry trying to parse out the meaning here it may lead to more confusion than clarity.</p>",
        "id": 173420572,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566006260
    },
    {
        "content": "<p>I've read this thread cover to cover. As of yet I don't see a use case for min/max value set. Also I was unfamiliar with them before today.</p>\n<p>When the element binding is required, senders SHALL draw from that binding, and receivers SHALL support anything the binding allows. That has always been the most clear statement we were able to get. Now where things go sour is when you try to define <em>support</em>. As Lloyd already mentioned: when you only care about pregnant women, then your receiver <em>support</em> for men/unknown is probably that you discard the info. So I guess the profile were to say: required AdministrativeGender, minValueSet \"female\" for that system.</p>\n<p>maxValueSet is a whole different ball game. I'm still trying to grasp that one. Seems like I could say: extensible SNOMED CT ObservableEntities, maxValueSet SNOMED CT ObservableEntities  + LOINC</p>\n<p>But if both SNOMED CT and LOINC are allowable for an element: why not create a combined ValueSet, or (our usual), slice the thing where one slice points to SNOMED CT and the other points to LOINC?</p>",
        "id": 173666985,
        "sender_full_name": "Alexander Henket",
        "timestamp": 1566313937
    },
    {
        "content": "<p>minValueSet allows you to identify what codes must be supported.  The reason for maxValueSet is so that you can have a 'useful' value set as your extensible binding that's reasonable for use in a drop-down, while still placing an outer bound on what codes are allowed.  We do this for things like language and units of measure where the set of possible codes from the underlying code systems (which we want to enforce) is infinite/near-infinite, but the set of commonly used codes is relatively small.  The extensible binding lets systems use a dropdown for the easy stuff and the max binding ensures that we still end up with a legal UCUM or IETF language code if the user decides to enter an 'other'.</p>",
        "id": 173667676,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566314515
    }
]