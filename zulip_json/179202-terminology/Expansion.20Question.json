[
    {
        "content": "<p>What should be the result of expanding this?</p>",
        "id": 153855103,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478112565
    },
    {
        "content": "<div class=\"codehilite\"><pre>&lt;ValueSet&gt;\n  &lt;compose&gt;\n    &lt;include&gt;\n      &lt;system value=&quot;http://snomed.info/sct&quot;/&gt;\n      &lt;concept&gt;\n        &lt;code value=&quot;41672002&quot;/&gt;\n        &lt;display value=&quot;Respiratory disease specialist&quot;/&gt;\n      &lt;/concept&gt;\n      &lt;concept&gt;\n        &lt;code value=&quot;41672002&quot;/&gt;\n        &lt;display value=&quot;Respiratory physician&quot;/&gt;\n      &lt;/concept&gt;\n    &lt;/include&gt;\n  &lt;/compose&gt;\n&lt;/ValueSet&gt;\n</pre></div>",
        "id": 153855104,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478112568
    },
    {
        "content": "<p>my server returns this: </p>",
        "id": 153855118,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478117173
    },
    {
        "content": "<div class=\"codehilite\"><pre>&lt;ValueSet xmlns=&quot;http://hl7.org/fhir&quot;&gt;\n    &lt;expansion&gt;\n        &lt;contains&gt;\n            &lt;system value=&quot;http://snomed.info/sct&quot;/&gt;\n            &lt;code value=&quot;41672002&quot;/&gt;\n            &lt;display value=&quot;Respiratory disease specialist&quot;/&gt;\n        &lt;/contains&gt;\n    &lt;/expansion&gt;\n&lt;/ValueSet&gt;\n</pre></div>",
        "id": 153855119,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478117225
    },
    {
        "content": "<p>I think that's a correct response (but not necessarily the only correct response).  I think it should be a single 'contains' element with code = 41672002.  The 'contains.display' element, if returned, I think is up to the discretion of the server (typically that would be the \"preferred term\" from the code system - not sure if we say anywhere in this context that it must be from the code system?).  I've re-read the description of the expansion process, and I don't see anywhere that we address the issue of duplicate codes in the expansion - there may be something about it in VSD, but I'd have to check.  The behavior with all of this seems to be somewhat underspecified, so we may need to address that.</p>",
        "id": 153855160,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1478122209
    },
    {
        "content": "<p>we say that the display must be a correct display for the code system. And then we also say that the display can be overridden in the value set compose like the one above. (we have a note about the risks of that) </p>",
        "id": 153855164,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478122390
    },
    {
        "content": "<p>the question here is: both those displays are defined by snomed, so both are relevant. Can you have an expansion that includes the same concept with more than one display? and I think that if the display is for the user to pick, then that makes perfect sense to do that</p>",
        "id": 153855165,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478122441
    },
    {
        "content": "<p>OK, I think you're right.  I don't find anyting in VSD or elsewhere that says that multiple instances of a particular code can't (or shouldn't) be returned in a value set expansion.  And there are clearly use cases where it makes sense to do so, including if abstract or other navigational codes are returned and the output is intended to be grouped/ordered in hierarchical or other ways.  Since we do say that ValueSet.compose.include.concept.display is \"The text to display to the user for this concept in the context of this valueset\", if ValueSet.compose includes two (or more) instances of the code with different display strings, then the obvious intention would be that all of those code/display pairs should be returned in the expansion.  So, contrary to my earlier suggestion, I think that we should interepret the specification that way, as it covers all of the use cases without unnecessary restrictions.  I don't know if we need to, but if we think that it may be desirable to filter out duplicates in some situations, we could consider adding a 'removeDuplicateCodes' parameter to ExpansionProfile and $expand, either as core or extension.  </p>",
        "id": 153855177,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1478126324
    },
    {
        "content": "<p>so we should clarify this in the spec, because you wouldn't return duplicates if they arose through an union of filters. But you would if they were listed explicitly in a single compose.... y? </p>",
        "id": 153855178,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478126613
    },
    {
        "content": "<p>and wouldn't the duplicate or not be directly linked to forUI? when would it be different?</p>",
        "id": 153855179,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478126648
    },
    {
        "content": "<p>I agree that removing duplicates is typical practice with union (at least in the db world - union vs. union all)<br>\nbut since it can be done both ways, we should be clear about which one it is<br>\nI'm actually thinking that for consistency maybe including the duplicates across the board would be best? - no confusion if we are consistent about it<br>\nif the end use doesn't want them, they can be filtered (either if we add a parameter or otherwise)</p>",
        "id": 153855183,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1478127594
    },
    {
        "content": "<p>duplicates codes with different displays...? I hope that's what you mean. </p>",
        "id": 153855186,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478127706
    },
    {
        "content": "<p>well, let's say we did that.... can we have opinions please <span class=\"user-mention\" data-user-id=\"195650\">@Reuben Daniels</span> <span class=\"user-mention\" data-user-id=\"191337\">@Dion McMurtrie</span> <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> <span class=\"user-mention\" data-user-id=\"192018\">@John Gresh</span> <span class=\"user-mention\" data-user-id=\"191375\">@Alexander Henket</span> <span class=\"user-mention\" data-user-id=\"191944\">@Russ Hamm</span> <span class=\"user-mention\" data-user-id=\"191506\">@Yunwei Wang</span> <span class=\"user-mention\" data-user-id=\"191364\">@Peter Jordan</span> <span class=\"user-mention\" data-user-id=\"192077\">@Linda Bird</span> <span class=\"user-mention\" data-user-id=\"191503\">@Robert McClure</span> <span class=\"user-mention\" data-user-id=\"191982\">@Ted Klein</span> </p>",
        "id": 153855188,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478127839
    },
    {
        "content": "<p>that's generally what I mean<br>\nbut there is a case where even having the same code and same display might be needed, and that's if you introduce navigation or other hierarchy and you have the same code (and display) showing up in two (or more) branches</p>",
        "id": 153855189,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1478127846
    },
    {
        "content": "<p>Actually the VSD does have something to say about this in that an expansion code set is only the concept representations (codes here) that are requested in the CLD. But remember the VSD is only informative - speculative actually - about what should be in a fully formed expansion file noting that it is expected to include the required parts (in the expansion code set.). We've had further discussions that this might best be modified to say that the required set of concept information to be included in an expansion code set would be the concept representation, the code system ID and version, and \"a default description.\" It was our expectation that any other information to be included in the \"expansion file” (the returned expansion content based on an expansion definition) would be based on a concomitant query to the code system based on an expansion specification that defined what concept elements are also needed in the file. That would include multiple descriptions plus all sorts of other things basd on the fact that you have the concept ID an can get info based on that. </p>\n<p>Now you all are combining the \"pure\" expansion process to get the code list AND the expansion file creation process to yield one final set of code information. We think that can be problematic and this conundrum of \"Lets rmove duplicates here but not here\" is because you are trying to do two functions in one process. I'd rather see a way that the specific cncept information that you want that is not the required set is defined someplace. I don't think it should be (or is easly made to be) a part of the COMPOSE function. <br>\nAnd BTW I am very much against having duplicates in the expansion. If you want to show multiple, or specific descriptions in the expansion I would like to see some sort of expansion definition that dictates that and I would like to see one concept ID with all the other parts in that same concept element, not multiple “concepts” in the expansion.</p>",
        "id": 153855190,
        "sender_full_name": "Robert McClure",
        "timestamp": 1478129947
    },
    {
        "content": "<p>I too am very much opposed to expansion returning duplicate codes (except if distinguished by code system version).<br>\nDo we really need to provide a mechanism for suppoting this use case?  The purist in me shudders; the code system itself can be interrogated to determine a set of \"acceptable\" synonyms, and the ValueSet allows you to specify a preferred one.  This looks like a scenario where the ValueSet is trying to narrow the acceptable ones down further (but not to just one) - is this an 80% ??</p>",
        "id": 153855202,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1478146937
    },
    {
        "content": "<p>well, remember that 80% is about requirements disagreements, and punting things to extensions. Strictly, that doesn't apply here</p>",
        "id": 153855207,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478152883
    },
    {
        "content": "<p>I do think that for UI usage, there's several different reasons to list a concept more than once, whether for different displays, or for different points in a classified list.... those seem reasonable to me, even if it is by extension</p>",
        "id": 153855208,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478152956
    },
    {
        "content": "<p>Brief discussion on Vocab call:<br>\n- We believe that this is a valid use case - there are circumstances where the same concept may be found more than once in an expansion<br>\n- we are concerned about finding the right balance between complexity and effectiveness for specifying how to build value sets to manage this<br>\n- we don't want to add any more complexity to the expansion structure because of this</p>\n<p>further discussion tabled due to time constraints, and referred back to this thread</p>",
        "id": 153855396,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478206895
    },
    {
        "content": "<p>one way to suppor this but cap the complexity this is to say:<br>\n- if a value set enumerates concepts in ValueSet.compose.include, explicitly explicitly specifies the same concept more than once with  different displays, then the expansion contains the concept as specified<br>\n- if there is a ValueSet.compose.include.valueSet, or a ValueSet.compose.include.filter, then the expansion does not contain the same concept more than once</p>",
        "id": 153855399,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478207099
    },
    {
        "content": "<p>What about implicit value sets returned as a result of a querying via a text filter parameter? Should the server return only one description for each concept - if not, how does it prioritise...say between 2 SCT synonyms that aren't preferred terms.</p>",
        "id": 153855438,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1478230281
    },
    {
        "content": "<p>server decision how to prioritise</p>",
        "id": 153855439,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478230373
    },
    {
        "content": "<p>I would add that if the value set expansion contains categorization or hierarchy, then the same concept (with the same or different display) may appear in different sections or branches as appropriate (but there shouldn't be duplicated concepts as siblings)</p>",
        "id": 153855440,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1478230437
    },
    {
        "content": "<p>yes. also, a present, server discretion, since there's no way to specify such value sets other than by building the expansions directly - but that doesn't mean servers can't define their own ways to do it </p>",
        "id": 153855441,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478230495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191364\">@Peter Jordan</span> For SNOMED, every code should have a single preferred term. That is what your server should return <em>regardless</em> of what it matched on.  The optional list of designations would be the place to return an indicator of which ones actually matched, either by only including the match ones, or by annotating them with an extension element that says \"this one matched\"<br>\nOf course, then we get into questions of what constitutes a \"match\" - if your server does acronym expansion, spelling correction, or other fuzzy / sloppy matching, then \"match\" becomes a nebulous concept.</p>",
        "id": 153855442,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1478230931
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span>. There will be some presentation layer challenges with that approach as (naïve?) end users will expect to see responses that directly match their requests - rather than, to use an example, filtering on 'nebulous urine' and receiving 'cloudy urine'. Spelling corrections are a live issue in NZ as we're discovering that there are still some US English spellings in the UK English Language Reference Set (e.g. 'behavior').</p>",
        "id": 153855446,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1478232070
    },
    {
        "content": "<p>I've yet to experience that in practice.  Ontoserver has always operated in this way (only display the preferred term regardless of how the match occurred), and we've not had a complaint except where the preferred term itself was considered inappropriate (eg spelling, antiquated language, etc).</p>",
        "id": 153855447,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1478232287
    },
    {
        "content": "<p>It's actually a single preferred term per Language reference set - along the lines of what Peter said, this will likely complicate things when we're working with multiple (combined) editions as we've been discussing (e.g. having both the US and UK English preferred terms) </p>",
        "id": 153855449,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1478232608
    },
    {
        "content": "<p>Yes, you need to choose which language refset you're operating with at the time of expansion, otherwise you're going to end up with a vrey large number of cross-language preferred terms.</p>",
        "id": 153855450,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1478232804
    },
    {
        "content": "<p>Some of our 'industry partners' (NZ Preferred Term for vendors) are highly particular on such things and actively looking for these issues in SCT as the mandated replacement for Read Codes. This I view as a good thing...and we've agreed to use only the UK English Terms in the Language Reference Set that comes with the International Edition.</p>",
        "id": 153855451,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1478232805
    },
    {
        "content": "<p>And they are pursuing this at the SCT end with a language refset rather than at the FHIR end?</p>",
        "id": 153855452,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1478232883
    },
    {
        "content": "<p>if you want to see SCT with multiple language ref sets, see here: <a href=\"http://fhir3.healthintersections.com.au/snomed/11000201108\" target=\"_blank\" title=\"http://fhir3.healthintersections.com.au/snomed/11000201108\">http://fhir3.healthintersections.com.au/snomed/11000201108</a></p>",
        "id": 153855453,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478232888
    },
    {
        "content": "<p>and what you'll see is that having multiple language refsets has broken my PN choosing algorithm, and I have to give it some love</p>",
        "id": 153855454,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478232915
    },
    {
        "content": "<p>At last week's SNAPP event,  we found mapping from NZ Medicinal Product to SCT Pharmaceutical Product quite challenging with both UK and US terms in the Language Refset!!</p>",
        "id": 153855455,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1478233064
    },
    {
        "content": "<p>So, did we get to the point of deciding how to handle that for international servers that may respond to requests by clients from varying jurisdictions and languages?<br>\npresumably the server will declare its default edition/language and will use that unless the request explicitly specifies otherwise<br>\nthat seems like a good use of the (future) Terminology Capability Statement that we discussed on the Vocab call today</p>",
        "id": 153855456,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1478233240
    },
    {
        "content": "<p>i am presently performing operations in the combined SCT edition unless the version parameter or version in the expansion profile says otherwise</p>",
        "id": 153855457,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1478233357
    }
]