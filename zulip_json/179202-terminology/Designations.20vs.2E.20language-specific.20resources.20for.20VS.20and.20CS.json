[
    {
        "content": "<p>(This question is related to <a href=\"#narrow/stream/179202-terminology/topic/Designations.20from.20code.20system.20supplements.20in.20Coding.2Edisplay.3F\">the recent discussion about designation and code system supplements</a>, but is slightly more general so I'm opening a new thread.)</p>\n<p>Both ValueSet and CodeSystem support the inclusion of language-specific labels through designations. At the same time, they have the <code>language</code> element. That means that one (seemingly) has two ways of handling multiple languages for these resource types:</p>\n<ol>\n<li>Create a separate copy of each resource (with translated labels) for each language and indicate the latter in the <code>language</code> element - for ValueSets, one could e.g. generate expansions in each language (and drop the designations)</li>\n<li>Have only a single copy of each resource (in some base language) but always include all translated labels in designations (leaving it for the consumer to pick out the right one).</li>\n</ol>\n<p>On an IG I worked on recently,  we used a combination: we did (2) for CodeSystem, but then generated one expanded ValueSet set per language, as in (1), since it allows the consuming systems to be less sophisticated (no need to know about designations).</p>\n<p>My questions is: Is there general guidance on which approach is preferable (or, conversely, illegal) in a given use cases, and for VS vs. CS resources?</p>",
        "id": 206146454,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1596723267
    },
    {
        "content": "<p>You don't want multiple instances of a resource with the same canonical URL and same 'version' on the same server.  That means that you should use designation.  The 'language' element indicates the primary language of the resource content, but it's not the intention (even with non-canonical resources) to have different copies of the same resource with different language declarations.</p>",
        "id": 206149365,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1596724582
    },
    {
        "content": "<p>I was under the impression that the <a href=\"https://www.hl7.org/fhir/languages.html##http\"><code>Accept-Language</code> header</a> was meant to allow pulling the same resource in different languages from the same URL (with the language in the header matching that in the <code>language</code> element of the returned resource, if present). Was that simply a misunderstanding? - if each resource can only exist in one (declared) language, it seems there will only ever be a single language code that will produce a hit when put in the <code>Accept-Language</code> header (for a given URL).</p>",
        "id": 206151773,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1596725619
    },
    {
        "content": "<p>I was not familiar with that use.  That would mean real-time translation of the resource - as there'd be no way to update the resource and specify multiple languages.  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ?</p>",
        "id": 206152875,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1596726080
    },
    {
        "content": "<blockquote>\n<p>pulling the same resource in different languages from the same URL</p>\n</blockquote>\n<p>yes. How that is achieved is up to the server. But there's no facility for anything like this through an IG, except by using designations. It would be possible that when we (a) distribute expansions and (b) do the langauge support in the publisher (both planned future enhancements) that we would distribute expansion language packs, but then it would still be up to the IG consumer to decide how to handle those expansions</p>",
        "id": 206188353,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1596743420
    },
    {
        "content": "<p>generally, note that while distributing expansions might be simpler, it's inherently fragile.</p>",
        "id": 206188398,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1596743452
    },
    {
        "content": "<p>If you want to separate translations into separate CodeSystems, then CodeSystem supplements are the way to go.  This has the advantage of decoupling the translation from the base CodeSystem which may make maintenance simpler / more flexible.  But, it is more moving parts and requires a more sophisticated terminology server.</p>\n<p>For translations of the <code>display</code> for a code in a single CodeSystem, then I believe you should use a designation with a <code>use</code> value of <code>display</code> (based on examples in the FHIR spec, but missing from the bound ValueSet - there is a ticket for this).</p>\n<p>If you are generating multiple ValueSet expansions (one per language), then the <code>ValueSet.expansion.parameter</code> should include an appropriate value for <code>displayLanguage</code>.</p>",
        "id": 206194679,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1596746762
    },
    {
        "content": "<p>Thanks for all the input! Just to consolidate my understanding so far: </p>\n<ul>\n<li>A server may be able to generate (or hold, e.g. in cache) copies of the same resource - as defined by (canonical) URL and version - in different languages, as indicated by the <code>language</code> element (and, for expanded VSs, <code>expansion.parameter</code>)</li>\n<li>These language variants can then be targeted using GET with the <code>Accept-Language</code> header</li>\n<li>However, there is no FHIR API mechanism for <em>writing/updating</em> such variants via HTTP, so the server has to get /generate them by some other mechanism.</li>\n</ul>\n<p>Is that correct?</p>",
        "id": 206250076,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1596802856
    },
    {
        "content": "<p>pretty much. There's nothing to stop a server adding some mechanism for writing, but we haven't talked about it before</p>",
        "id": 206250240,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1596802980
    },
    {
        "content": "<p>You mean smt. like adding <code>Content-Language</code> headers to POST requests (not sure if that is even HTTP valid)?</p>",
        "id": 206250436,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1596803141
    },
    {
        "content": "<p>maybe. I agree</p>",
        "id": 206251002,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1596803561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"194703\">Morten Ernebjerg</span> <a href=\"#narrow/stream/179202-terminology/topic/Designations.20vs.2E.20language-specific.20resources.20for.20VS.20and.20CS/near/206250076\">said</a>:</p>\n<blockquote>\n<p>Thanks for all the input! Just to consolidate my understanding so far: </p>\n<ul>\n<li>A server may be able to generate (or hold, e.g. in cache) copies of the same resource - as defined by (canonical) URL and version - in different languages, as indicated by the <code>language</code> element (and, for expanded VSs, <code>expansion.parameter</code>)</li>\n<li>These language variants can then be targeted using GET with the <code>Accept-Language</code> header</li>\n<li>However, there is no FHIR API mechanism for <em>writing/updating</em> such variants via HTTP, so the server has to get /generate them by some other mechanism.</li>\n</ul>\n</blockquote>\n<p>Is the suggestion here that I could </p>\n<p>GET HealthcareService/123</p>\n<p>...and it would come in French or English by including a different Accept-Language header in the request? That sounds neat ... is it FHIR-legit?</p>",
        "id": 211566306,
        "sender_full_name": "Tim Berezny",
        "timestamp": 1601337780
    },
    {
        "content": "<p>yes that's how it works, though its must more likely to be supported for $expand rather than a simple get</p>",
        "id": 211570165,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1601341468
    },
    {
        "content": "<p>In this case, could the valueset still contain the display text in multiple languages?</p>",
        "id": 233325436,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1617718370
    },
    {
        "content": "<p>In fact, generally, the CS supports multi-language, but if we want the VS to contain content in 2 languages, can we use the translation extension for that?</p>",
        "id": 233325690,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1617718464
    },
    {
        "content": "<p>(to me that seems the way to do it, but I don't know if there is another, more sensible /orthodox way of doing it)</p>",
        "id": 233326566,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1617718808
    },
    {
        "content": "<p>Use case: user has an offline questionnaire which has some contained VS and they want to switch languages</p>",
        "id": 233326624,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1617718835
    },
    {
        "content": "<p>Expansions can include multiple designations for a code.  Each one can indicate the language it is from.</p>",
        "id": 233417551,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1617759610
    },
    {
        "content": "<p>I presume that for a given concept (or in an entire CodeSystem), the display and the definitions SHALL be in the same language, right?</p>",
        "id": 238445424,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1620811490
    },
    {
        "content": "<p>we cannot use a display in a language and the definition in another language. <br>\nCan someone confirm?</p>",
        "id": 238445499,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1620811527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span>  That's an interesting and good question.  I think the probably obvious assumption would be that it is normally expected that would be the case.  We don't have any particular structure that supports it to be otherwise (i.e. using a different language for the display and the definition) or makes it particularly useful to do that, but I don't think that it is strictly prohibited, either.  In the comments for Resource.langauge it notes that \"Not all the content has to be in the base language.\"  This is probably worth some further exploration - especially if you some use cases in mind where this would be needed.</p>",
        "id": 238446710,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1620812237
    },
    {
        "content": "<p>I've seen one idea where the definition was used for describing the concept in another language, and it felt strange.</p>",
        "id": 238446861,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1620812300
    },
    {
        "content": "<p>I felt that we should rather use the designations for that</p>",
        "id": 238446894,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1620812324
    },
    {
        "content": "<p>but then I did not find any explicit guidance on this</p>",
        "id": 238446926,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1620812348
    },
    {
        "content": "<p>I think you are right.  And we should probably clarify this - and either explicitly support it, or provide guidance or rules that discourage or even prohibit it.  You might consider submitting a tracker?</p>",
        "id": 238447275,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1620812541
    },
    {
        "content": "<p>Note that SNOMED CT uses the FSN (Fully Specified Name) as the source-of-truth (almost definition) of a concept.  It also allows for translations of the FSN as well as the Preferred Term (i.e., display).  I think calling a translation of the FSN also the FSN is a bad idea, but that ship has sailed.</p>",
        "id": 238556267,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1620860210
    },
    {
        "content": "<p>well, technically, the language of the resource applies to both display and definition equally</p>",
        "id": 238569806,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1620870655
    },
    {
        "content": "<p>That makes things <em>very</em> hard when you do an <code>ValueSet/$expand?displayLanguage=fr&amp;includeDefinition=true</code> and only some of the codes have translations, so your codes have <code>display</code>s that are a mix of <code>en</code> and <code>fr</code> while the language of the resource might be <code>en</code> since all the meta-data (copyright, etc) is <code>en</code>.</p>",
        "id": 238580731,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1620880988
    },
    {
        "content": "<p>However, you can always define <code>display</code> in languages other than that of the resource by using a <code>designation</code> and specifying a <code>use</code> of <code>display</code> (or, in R5, the redundant <code>preferred-for-display</code>)</p>",
        "id": 238580817,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1620881094
    },
    {
        "content": "<p>yes but honestly, that would be hard whatever so I'm not going to lose sleep over that one</p>",
        "id": 238581860,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1620882208
    }
]