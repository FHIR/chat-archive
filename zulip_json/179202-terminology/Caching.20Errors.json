[
    {
        "content": "<p>An issue has arisen in the IG publisher, which is a heavy user of terminology services. </p>",
        "id": 153880713,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1491191530
    },
    {
        "content": "<p>in order to keep the performance up, the terminology server aggresively caches responses from the server, and editors are encouraged (but not required) to keep the cache in version control. </p>",
        "id": 153880716,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1491191571
    },
    {
        "content": "<p>the other reason was because I paid for every query out of my own pocket. </p>",
        "id": 153880717,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1491191588
    },
    {
        "content": "<p>that's not true anymore (yay Google) and some I'm considering not caching some error responses - transient ones....</p>",
        "id": 153880718,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1491191610
    },
    {
        "content": "<p>but the terminology service API does not differentiate between errors that are transient, and ones that are repeatable. </p>",
        "id": 153880719,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1491191653
    },
    {
        "content": "<p>that's because how do you, as a server author, know? ok, for some things you do. If a code system is not defined on the system, you'll always say that it's not known (at least until someone defines it)</p>",
        "id": 153880720,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1491191694
    },
    {
        "content": "<p>where as others - database down, capactity exceeded - are obviously not suitable for caching. </p>",
        "id": 153880721,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1491191714
    },
    {
        "content": "<p>does anyone have any opinions about getting the terminology service error responses to deal with this? </p>",
        "id": 153880722,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1491191736
    },
    {
        "content": "<p>Should be able to deal with this using response headers, right? Expires, etc?</p>",
        "id": 153880724,
        "sender_full_name": "Jim Steel",
        "timestamp": 1491191804
    },
    {
        "content": "<p>we put \"Cache-Control: must-revalidate,max-age=1\"  on our errors at present</p>",
        "id": 153880728,
        "sender_full_name": "Jim Steel",
        "timestamp": 1491192009
    },
    {
        "content": "<p>(which is kind of turning off caching unless you optimise for ETags)</p>",
        "id": 153880729,
        "sender_full_name": "Jim Steel",
        "timestamp": 1491192067
    },
    {
        "content": "<p>you do that for all errors?</p>",
        "id": 153880730,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1491192112
    },
    {
        "content": "<p>We do that for all everything, actually. We're pretty conservative about caching</p>",
        "id": 153880736,
        "sender_full_name": "Jim Steel",
        "timestamp": 1491192467
    },
    {
        "content": "<p>If I could make that max-age=0 and still have nginx respect it, I would</p>",
        "id": 153880737,
        "sender_full_name": "Jim Steel",
        "timestamp": 1491192519
    },
    {
        "content": "<p>Actually, now you mention it, there are some things I need to fix to make that work properly...</p>",
        "id": 153880738,
        "sender_full_name": "Jim Steel",
        "timestamp": 1491192715
    },
    {
        "content": "<p>We specify must-revalidate because its a transactional system - the code systems / value sets could be updated at any time and thus invalidate a cached expand / translate / lookup / read response.  With a client that understands ETags and sends an if-none-match header, you'll get back a 304 if appropriate.  So the round-trip isn't saved, but the bandwidth of sending the result is.  Times drop from 100s of ms down to ~10ms</p>",
        "id": 153880933,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1491347372
    }
]