[
    {
        "content": "<p>Question came up on SDC today about whether it's possible for an expansion to include code system properties.  (Presumably the desired properties would be identified in the expansion profile.)  When displaying codes to choose from in questionnaires we sometimes want to expose properties other than just the display names.</p>",
        "id": 153953290,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1524179060
    },
    {
        "content": "<p>Based on offline feedback from Rob, <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15979\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15979\">GF#15979</a></p>",
        "id": 153953294,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1524179809
    },
    {
        "content": "<p>I added my earlier reply to Lloyd to the tracker.</p>",
        "id": 153953296,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1524180046
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 153953297,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1524180284
    },
    {
        "content": "<p>My comments are on the tracker, but they're broader than the specific issue so I'm including them here for greater visibility.</p>\n<p>We faced a similar problem when implementing Shrimp (<a href=\"https://ontoserver.csiro.au/shrimp\" target=\"_blank\" title=\"https://ontoserver.csiro.au/shrimp\">https://ontoserver.csiro.au/shrimp</a>) and Snapper (<a href=\"https://ontoserver.csiro.au/snapper2\" target=\"_blank\" title=\"https://ontoserver.csiro.au/snapper2\">https://ontoserver.csiro.au/snapper2</a>).  We've found that doing a set of <code>$lookup</code> calls in a batch is pretty (very) fast, although the use of <code>POST</code> means no HTTP-level caching.</p>\n<p>What we struggle more with is doing a <code>$translate</code> of a set of codes from an expansion.</p>\n<p>One could think of these problems in a general form like: \"map an operation (<code>$lookup</code> / <code>$translate</code>) over the results of an expansion\". Alternatively, <code>$lookup</code> &amp; <code>$translate</code> could support a <code>ValueSet</code> as an alternative input(s) to the code (src/target), or be defined as additional operations for the <code>ValueSet</code> resource.</p>",
        "id": 153955214,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1525176687
    },
    {
        "content": "<p>why is this related?</p>",
        "id": 153955358,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1525248411
    },
    {
        "content": "<p>$lookup is the normal path to getting properties</p>",
        "id": 153955360,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1525249511
    },
    {
        "content": "<p>umm so?</p>",
        "id": 153956093,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1525494723
    },
    {
        "content": "<p>So, one way to get properties into an expansion is to extend how <code>$expand</code> works and have a mechanism to request that properties (default, listed, or all) are included in the expansion.<br>\nAn alternative would be to extend how <code>$lookup</code> works and allow it to operate on (the expansion of) a <code>ValueSet</code>.  This would probably be more complex to define, but perhaps result in a more regular mechanism to compose terminology operations.  For us this is attractive because we also have use cases where we need to perform a <code>$translate</code> on a (large) set of codes. It would be nice if one extension could solve what I see as two related problems.</p>",
        "id": 153956107,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1525495765
    }
]