[
    {
        "content": "<p>There have been several discussions here about the use of NamingSystem versus CodeSystem.  I might be off base, but it seems like one important point has been overlooked. In my view, a <strong>naming system</strong> is a literally a system of naming, i.e., a set of rules on how to name new things. An example is HGVS (Sequence Variant Nomenclature). It is a recipe for naming that is used to generate new names on the fly. For example, for protein substitution variants, the name-creation formula is:</p>\n<div class=\"codehilite\"><pre><span></span><code>Format: “prefix”“amino_acid”“position”“new_amino_acid”, e.g. p.(Arg54Ser)\n\n“prefix” = reference sequence used = p.\n“amino_acid” = reference amino acid = Arg\n“position” = position amino acid subtituted = 54\n“new_amino_acid” = new amino acid = Ser\n</code></pre></div>\n<p>As a true _system of naming_, there is no database of codes. There are an infinite number of possible codes. It is up to the user to follow the naming rules to communicate the variant.</p>\n<p>In contrast, coding systems like SNOMED or LOINC need a central authority to mint new codes for each new concept. It is certainly true that coding systems follow internal rules, but two users confronted with a new concept separated by time and space cannot come up the same code. </p>\n<p>Potentially, it is the ability for a <strong>user</strong> to create codes that forms the central distinction between a code system and naming system. Code systems do not have this capability, and thus, must have a pre-determined set of codes. Naming systems do not need a pre-determined set of codes, since codes not by fiat, but by applying repeatable formulas. </p>\n<p>Under that point of view, a single system should not be represented by <strong>both</strong> a NamingSystem and CodingSystem. Not denying there will be gray areas, it is one or the other.</p>\n<p>Does that make sense?</p>",
        "id": 229484702,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1615299977
    },
    {
        "content": "<p>CodeSystem defines the rules for post-coordination.  NamingSystem is purely about \"hey, this system exists, here's the URI/OID/v2 code and how to translate\".  While it might also summarize the rules around code expression, those would be sourced from the CodeSystem.  NamingSystems ware never allowed to define post-coordination rules that aren't defined in the base CodeSystem.</p>",
        "id": 229485452,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615300285
    },
    {
        "content": "<ol>\n<li>Wouldn't you put alternate business identifiers for a CodeSystem in CodeSystem.identifier?  Why carry the weight of an additional NamingSystem resource?  </li>\n<li>Why should the entity you describe as \"hey, this system exists...\" be called a \"NamingSystem\"? Here's an example of that term is normally used: <a href=\"https://www.nature.com/articles/d41586-021-00105-z\">https://www.nature.com/articles/d41586-021-00105-z</a></li>\n</ol>",
        "id": 229511353,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1615309048
    },
    {
        "content": "<p>NamingSystem is a very simple resource.  Its purpose is just to look up systems for identifiers and code systems.  If we didn't need it for identifiers, it's possible it wouldn't exist.  However, given that translation is often done by systems that have no need for information about the actual CodeSystem and NamingSystem is much lighter-weight, it makes sense to allow it to be used for both.</p>",
        "id": 229515511,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615310384
    },
    {
        "content": "<p>'NamingSystem' is the best name we could come up with.  It's not normative, so in theory we could rename it, but it's pretty widely implemented so we'd need a very good reason (i.e. a much more compelling name)</p>",
        "id": 229515798,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615310470
    },
    {
        "content": "<p>What should I do with a <strong>real</strong> \"system of naming\"?  Again, I'm talking about something that has no explicit codes whatsoever.  If not NamingSystem, what? </p>\n<p>(It seems like a shame to use NamingSystem as a bucket of business identifiers for a CodeSystem and waste that name when CodeSystem.identifier seems perfectly up to that task. In other words, if you have a CodeSystem defined, why-o-why-o-why do you need a NamingSystem to further describe that CodeSystem?).</p>",
        "id": 229526601,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1615313987
    },
    {
        "content": "<p>If you're using a CodeableConcept, Coding or code, then there's an implicitly a CodeSystem.  You don't necessarily have to have a CodeSystem instance available, but there has to be one.</p>",
        "id": 229528177,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615314577
    },
    {
        "content": "<p>For CodeSystems, NamingSystem is either a limited subset of the information in the CodeSystem instance, or is the only thing available because there is no full CodeSystem resource</p>",
        "id": 229528295,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615314619
    },
    {
        "content": "<p>I don't understand. <br>\nI want to bind a CodeableConcept to any code that is valid in a naming system (system of naming). You don't know the codes in advance, but any given code can be validated using the rules of the naming system.<br>\nHow do I do that in FHIR?</p>",
        "id": 229531121,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1615315701
    },
    {
        "content": "<p>If you're sending it in a CodeableConcept, it must be a code.  The rules are defined in a CodeSystem, not a NamingSystem.  All that NamingSystem does is allow you to map between the OID and the URI.</p>",
        "id": 229531588,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615315892
    },
    {
        "content": "<p>It is a shame we have a NamingSystem resource but we don't using it for naming systems, and we force naming systems to be misrepresented as code systems.</p>",
        "id": 229532208,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1615316154
    },
    {
        "content": "<p>\"All that NamingSystem does is allow you to map between the OID and the URI.\"  &lt;-- This information belongs in CodeSystem.identifier</p>",
        "id": 229532463,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1615316245
    },
    {
        "content": "<p>The NamingSystem resource is for identifier management - CodeSystem identifiers being just one kind of identifier. It includes attributes (preferred and type properties) that are not present in the identifier data type and these attributes facilitate performing operations such as determining the preferred identifier of a particular kind ($preferred-id) and translation ($translate-id - upcoming in R5) from one kind (e.g. OID) to another (URI). </p>\n<p>From a practical perspective, I've found it to be the most efficient way to map OIDs used in CDA documents to URIs for FHIR Resources in a couple of national projects - so this is not just theory. However, if I didn't have this kind of requirement, I'm not sure if I would create NamingSystem resources for Code System identifiers as I always identify them via their URL - however, I would still use them for managing other kinds of identifiers as they contain a lot of metadata (description, publisher, jurisdiction, usage, etc.).</p>\n<p>As you can imagine, there have been extensive discussions on this topic in the Vocabulary WG over the past few years! Suffice to say that - despite the fact NamingSystem replicates some of the properties of CodeSystem  -sufficient additional value was discovered in NamingSystem for it to be used extensively in the UTG IG.</p>",
        "id": 229538806,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1615318412
    },
    {
        "content": "<p><code>CodeSystem.identfier.type</code> is already available, and together with an extension (e.g., <code>CodeSystem.identifier.extension:preferred</code>), you could easily put all the information in one place. I realize Vocab already is quite far down this road, but using NamingSystem seems unnecessary and confusing. I think you should be using NamingSystem for what it sounds like. IMO.</p>",
        "id": 229542524,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1615319845
    },
    {
        "content": "<p>If you're sending a code in code, that code must be defined by a CodeSystem - end stop.</p>",
        "id": 229542738,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615319920
    },
    {
        "content": "<p>identifier.type (<a href=\"http://hl7.org/fhir/valueset-identifier-type.html\">http://hl7.org/fhir/valueset-identifier-type.html</a>) is different from NamingSystem.type and NamingSystem.kind.  IMO, creating an extension on CodeSystem.identifier would be more difficult and, again from practical  experience,  it's easier to get the preferred identifier or translate identifiers using NamingSystem , rather than CodeSystem resources - given that these operations don't work on instances. As to what I should be doing, I don't even use CodeSystem.identifier on Terminz (i.e. I use the id property for the instance and the url property as the canonical identifier).</p>",
        "id": 229547929,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1615321826
    },
    {
        "content": "<p>All this being said, a terminology server that properly supported  HGVS would need to understand the grammar and the set of atoms/terminals that the grammar uses. There's currently no standard way to define these in FHIR.</p>",
        "id": 229552722,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1615323568
    },
    {
        "content": "<p>Right.  We said there's no way to standardize representation of post-coordination syntaxes.  IETF language codes, UCUM, SNOMED, CPT - every single one of these behaves quite differently.</p>",
        "id": 229553121,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615323697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191364\">@Peter Jordan</span>  I compared many instance of CodeSystem to corresponding instance of NamingSystem.  NamingSystem covers almost exactly the same ground as CodeSystem, and having two resources is confusing and unnecessary. They could easily be combined, and I can show you how if you'd like.</p>",
        "id": 229732418,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1615406358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191447\">@Mark Kramer</span> . Whether, or not, the NamingSystem resource is required for the management of Code System identifiers is a question for the implementer community to decide. However, whatever the outcome of that debate (and I suggest that you discuss this with the Vocabulary WG if they are willing to spend time re-litigating this topic, yet again), Naming System definitely IS needed for the management of other Naming System kinds (nb. identifiers) - there are R4 production systems using this resource, as well as some of the FHIR tooling, so IMHO petitioning for its removal is a waste of time.</p>",
        "id": 229735320,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1615407309
    },
    {
        "content": "<p>Ugh.</p>",
        "id": 229738647,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1615408344
    },
    {
        "content": "<p>If we were only dealing with CodeSystems, NamingSystem wouldn't exist.  However, we <em>must</em> have NamingSystem for identifier systems, and it turns out that it solves a bunch of issues if you stick the relevant subset of data in a NamingSystem instance for code systems too.</p>",
        "id": 229742211,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615409598
    },
    {
        "content": "<p>In practice, CodeSystem doesn't have a 'standard' way of distinguishing amongst URLs, OIDs and 'string' identification schemes to tell you which of them is 'preferred', so there's a tiny bit of functionality NamingSystem has that CodeSystem doesn't, but the main reason for duplicating the CodeSystem content into NamingSystem is so software that's translating OIDs to URLs or vice versa only has to look one place.</p>",
        "id": 229742489,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615409686
    },
    {
        "content": "<p>Do both a CodeSystem and its NamingSystem instance need to co-exist within the same FHIR Server in order to be conformant?</p>",
        "id": 229769733,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1615421003
    },
    {
        "content": "<p>Nope.  Nor do both need to even exist.  And you might have multiple copies of either on different servers</p>",
        "id": 229770448,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615421385
    },
    {
        "content": "<p>Alright, Thanks, <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 229772249,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1615422466
    },
    {
        "content": "<p>In HL7 THO (HL7 Terminology, maintained using UTG process) we are using NamingSystem for a special case we needed to solve  - easy tracking and documenting of multiple CodeSystem urls used as canonical URLs - sometimes they are changed, some valid in some times but not others, etc.    It solves a bunch of problems that using Provenance to track it proved to be very unsatisfactory.</p>",
        "id": 229887820,
        "sender_full_name": "Ted Klein",
        "timestamp": 1615482804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191982\">@Ted Klein</span> A little bit like preferred term and synonyms for a concept, right?</p>",
        "id": 229971831,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1615521262
    },
    {
        "content": "<p>No actually.   In opposition to our fervent hopes and prayers, we are finding that MANY code systems have more than one identifier in a particular technology (OID, URI, etc).  Some change over time (are replaced), some are active at certain times concurrently (some financial systems used widely in the US do this with a 3 month overlap during update cycles),  correction of errors, etc.  Many Use Cases.  It turns out that without a single registry fully integrated that makes this clear and documented and machine processable, problems ensue.    So there are similarities to how concepts are handled, but major differences.   The Vocabulary WG is still working through all the policy details to fully lay all this out.</p>",
        "id": 230046697,
        "sender_full_name": "Ted Klein",
        "timestamp": 1615562645
    },
    {
        "content": "<p>It's also been an annoying problem for us.  For us in this country, the difference is there is no formal team/group/organization to work on it yet.  That is to say, there is no identifier/oid/etc available to refer to.</p>",
        "id": 230065391,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1615569083
    },
    {
        "content": "<p>So we're looking forward to the WG's solution.</p>",
        "id": 230065756,
        "sender_full_name": "Lin Zhang",
        "timestamp": 1615569247
    }
]