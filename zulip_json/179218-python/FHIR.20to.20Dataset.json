[
    {
        "content": "<p>Hi @all,<br>\nI'm new to this chat <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>\n<p>I was wondering, is there any python tool out there to specify and extract a dataset from a FHIR api to do some Machine Learning?<br>\nTypical output structure would be a pandas dataframe or a pyTorch Dataset. <br>\nI'm looking for smthg which doesn't use Spark, only assumes there is a FHIR api available, and allows to get back a flat dataset containing stuff like Patient age, bodyweight, and last episofe of care date.<br>\nCheers!<br>\nThéo</p>",
        "id": 187815501,
        "sender_full_name": "Théo Ryffel",
        "timestamp": 1581341990
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"252922\">@Théo Ryffel</span>, nothing that does exactly that already, but it shouldn't be too hard to create it with one of the previously mentioned clients: <a href=\"#narrow/stream/179218-python/topic/FHIR.20101.20Jupyter.20notebook/near/187329666\" title=\"#narrow/stream/179218-python/topic/FHIR.20101.20Jupyter.20notebook/near/187329666\">https://chat.fhir.org/#narrow/stream/179218-python/topic/FHIR.20101.20Jupyter.20notebook/near/187329666</a>.<br>\nBuild the query for the resources you need and  flatten the JSON to a Pandas dataframe.</p>",
        "id": 187927989,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1581438753
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 187933872,
        "sender_full_name": "Alex F. Bokov, Ph.D.",
        "timestamp": 1581442446
    },
    {
        "content": "<p>Funny that you posted this just now-- I also asked <a href=\"#narrow/stream/179166-implementers/topic/What.20is.20the.20state.20of.20FHIR-.3ECSV.20export.3F/near/187932675\" title=\"#narrow/stream/179166-implementers/topic/What.20is.20the.20state.20of.20FHIR-.3ECSV.20export.3F/near/187932675\">a similar question</a> in #implementers </p>\n<p>This extends beyond Python-- there needs to be a general-purpose tool for doing this, for any selection of FHIR resources.</p>",
        "id": 187933968,
        "sender_full_name": "Alex F. Bokov, Ph.D.",
        "timestamp": 1581442523
    },
    {
        "content": "<p>Pandas is the way to go ...  I use Pandas to create instances but not the other way. ( well technically I go excel --&gt; Panda df --&gt; FHIR instance.  ) anybody going the other way?</p>",
        "id": 187950077,
        "sender_full_name": "Eric Haas",
        "timestamp": 1581452077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"196561\">@Nick George</span> This seems like an excellent use case for Protobuf based FHIR, right? <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 188022222,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1581522694
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"196561\">Nick George</span> This seems like an excellent use case for Protobuf based FHIR, right? <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>\n</blockquote>\n<p>Wow, I learned several new things googling what you just wrote.</p>\n<p>You're talking about <a href=\"https://github.com/google/fhir\" target=\"_blank\" title=\"https://github.com/google/fhir\">https://github.com/google/fhir</a> , right?</p>\n<p>But, how would converting a FHIR message to a protobuf string help turn it into a tabular format?</p>\n<p>Or, are you saying that the values of individual cells would be chunks of the FHIR message serialized in the protobuf format?</p>",
        "id": 188035505,
        "sender_full_name": "Alex F. Bokov, Ph.D.",
        "timestamp": 1581530067
    },
    {
        "content": "<p>One of the things they do when converting to Protobuf is converting some difficult fields to a format that's easier to work with in tabular format: <a href=\"https://youtu.be/iBkyZ86eiiw?t=1635\" target=\"_blank\" title=\"https://youtu.be/iBkyZ86eiiw?t=1635\">https://youtu.be/iBkyZ86eiiw?t=1635</a>. But also generally Protobuf might be a good format to work with when doing machine learning.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"iBkyZ86eiiw\" href=\"https://youtu.be/iBkyZ86eiiw?t=1635\" target=\"_blank\" title=\"https://youtu.be/iBkyZ86eiiw?t=1635\"><img src=\"https://i.ytimg.com/vi/iBkyZ86eiiw/default.jpg\"></a></div>",
        "id": 188037340,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1581531109
    },
    {
        "content": "<p>Here is simple and naive FHIR instance to dataframe to csv transform with and without a flattening algorithm.  This is kind of a brute force method as a starting point and there is no round tripping but I think that would be relatively straight forward.</p>\n<p><span aria-label=\"notebook\" class=\"emoji emoji-1f4d3\" role=\"img\" title=\"notebook\">:notebook:</span> <a href=\"https://mybinder.org/v2/gh/Healthedata1/MyBinder/master\" target=\"_blank\" title=\"https://mybinder.org/v2/gh/Healthedata1/MyBinder/master\">https://mybinder.org/v2/gh/Healthedata1/MyBinder/master</a></p>\n<p>to start the Notebook:</p>\n<ol>\n<li>click on the <code>FHIR-to-CSV</code> folder</li>\n<li>click on the notebook file <code>FHIR-to-csv.ipynb</code></li>\n</ol>",
        "id": 188138746,
        "sender_full_name": "Eric Haas",
        "timestamp": 1581620617
    },
    {
        "content": "<blockquote>\n<p>Here is simple and naive FHIR instance to dataframe to csv transform with and without a flattening algorithm.  This is kind of a brute force method as a starting point and there is no round tripping but I think that would be relatively straight forward.</p>\n<p><span aria-label=\"notebook\" class=\"emoji emoji-1f4d3\" role=\"img\" title=\"notebook\">:notebook:</span> <a href=\"https://mybinder.org/v2/gh/Healthedata1/MyBinder/master\" target=\"_blank\" title=\"https://mybinder.org/v2/gh/Healthedata1/MyBinder/master\">https://mybinder.org/v2/gh/Healthedata1/MyBinder/master</a></p>\n<p>to start the Notebook:</p>\n<ol>\n<li>click on the <code>FHIR-to-CSV</code> folder</li>\n<li>click on the notebook file <code>FHIR-to-csv.ipynb</code></li>\n</ol>\n</blockquote>\n<p>Cool! This is very helpful.</p>\n<p>I tried an uglier, multi-resource query:</p>\n<div class=\"codehilite\"><pre><span></span>http://hapi.fhir.org/baseDstu2/Patient?_id=1834&amp;_revinclude=Encounter:patient&amp;_revinclude=Condition:patient&amp;_revinclude=DiagnosticReport:patient&amp;_include=DiagnosticReport:result&amp;_revinclude=Procedure:subject\n</pre></div>\n\n\n<p>It still worked, though it didn't traverse the branches all the way down, which is to be expected since I didn't tell it how far down to go.</p>\n<p>Do you think there is a way to tell <code>squash()</code> to look for distinct elements that share the same <code>start</code>, <code>performedDateTime</code>, <code>issues</code>, <code>onsetDateTime</code>, or <code>effectiveDateTime</code> rounded down to the closest day and put each such set in its own row, creating empty cells for elements that are missing on that day?</p>\n<p>FYI, in the process I learned that <code>loads()</code> gets confused by the escaped <code>\"</code> s in HAPI DSTU2 <code>text.div</code> values. This can be fixed by replacing the backslashes with double backslashes in the input data.</p>",
        "id": 188162342,
        "sender_full_name": "Alex F. Bokov, Ph.D.",
        "timestamp": 1581635382
    },
    {
        "content": "<p>re the text.div you can pop it out too if you don't need it .<br>\nI updated the notebook to show some simple black lists  in a custom flatten function ( you could white list the same way)  This function is simplified version of the <a href=\"https://pypi.org/project/flatten-json/\" target=\"_blank\" title=\"https://pypi.org/project/flatten-json/\">library version</a>.</p>",
        "id": 188167070,
        "sender_full_name": "Eric Haas",
        "timestamp": 1581639804
    },
    {
        "content": "<p>Here are a couple of example scripts:  </p>\n<ol>\n<li>The takes a search bundle and converts it to a Panda dataframe flattening the data of interest  ( note the identifiers and codeableConcepts are not flattened) and does some simple stats and plots:</li>\n<li>Using GraphQL which does all the work to flatten the data and then convert to Panda dataframe and and does some simple stats and plots:<br>\nto start the Notebook:</li>\n</ol>\n<p><span aria-label=\"notebook\" class=\"emoji emoji-1f4d3\" role=\"img\" title=\"notebook\">:notebook:</span> <a href=\"https://mybinder.org/v2/gh/Healthedata1/MyBinder/master\" target=\"_blank\" title=\"https://mybinder.org/v2/gh/Healthedata1/MyBinder/master\">https://mybinder.org/v2/gh/Healthedata1/MyBinder/master</a></p>\n<ol>\n<li>click on the <code>FHIR-to-Panda</code> folder</li>\n<li>for 1. click on the notebook file <code>Playing_with_pandas_pt4.ipynb</code></li>\n<li>for 2. click on the notebook file<code>Playing_with_pandas_pt2.ipynb</code></li>\n</ol>",
        "id": 191504034,
        "sender_full_name": "Eric Haas",
        "timestamp": 1584982828
    },
    {
        "content": "<p>I'm looping back here to know if there are any updates. <span class=\"user-mention\" data-user-id=\"263598\">@Alex F. Bokov, Ph.D.</span>  are you now working using <span aria-label=\"notebook\" class=\"emoji emoji-1f4d3\" role=\"img\" title=\"notebook\">:notebook:</span> <a href=\"https://mybinder.org/v2/gh/Healthedata1/MyBinder/master\" title=\"https://mybinder.org/v2/gh/Healthedata1/MyBinder/master\">https://mybinder.org/v2/gh/Healthedata1/MyBinder/master</a> ?</p>\n<p>I'm very interested by the SQL on FHIR initiative but I haven't found lots of details about it. In particular what's cool about this idea is that virtually everyone one know this query model, while graphql would be smarter but less user friendly for beginners.</p>\n<p>In the meantime, I don't think anyone would want to really transform their FHIR data into SQL tables (well at least not everyone!) and we shouldn't make any assumption on how people really store your data (mongo, postgres+jsonb, etc).  The best way to query data would then be the rest API again because this is the most used interface.</p>\n<p>So, putting back together my ideas: I'd like a SQL-like language which would transform the query into (possibly &gt;1) API calls and involve minimal post-processing on the data.</p>\n<p>Does this sounds conceptually like feasible? We're trying to do a small proof of concept (open-source) but I'd like feedback on the overall direction before diving too much into it :)</p>",
        "id": 191748906,
        "sender_full_name": "Théo Ryffel",
        "timestamp": 1585144942
    },
    {
        "content": "<p>you should ask this on the <a class=\"stream\" data-stream-id=\"179219\" href=\"/#narrow/stream/179219-analytics-on-FHIR\">#analytics on FHIR</a> channel</p>",
        "id": 191806643,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1585168078
    },
    {
        "content": "<p>Oh god I thought I was already on the #analytics on FHIR channel! Thanks a lot, I'm moving there</p>",
        "id": 192017955,
        "sender_full_name": "Théo Ryffel",
        "timestamp": 1585316472
    }
]