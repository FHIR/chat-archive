[
    {
        "content": "<p>def pp(a, b=None):<br>\n    print(b)</p>\n<p>pp('a')<br>\npp('a',b='hello')<br>\npp('a') </p>\n<p>Outputs None, 'hello', None.  (as one would expect)</p>\n<p>But I seem to have the situation whereby after pp('a',b='hello') all pp('a') calls afterwards regard b as being 'hello'. Any thoughts as to what might cause that to happen?</p>",
        "id": 203410547,
        "sender_full_name": "René Spronk",
        "timestamp": 1594313076
    },
    {
        "content": "<p>what do you mean \"regard b as being 'hello'\"?  the fact that the third pp('a') prints None means that b doesn't have a value.</p>",
        "id": 203411656,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1594313679
    },
    {
        "content": "<p>Your example and your description seem to contradict one another :-)</p>",
        "id": 203417741,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1594317007
    },
    {
        "content": "<p>Maybe create a runnable example with something like <a href=\"https://notebooks.azure.com/\">https://notebooks.azure.com/</a> and share a link?</p>",
        "id": 203417762,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1594317026
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 203417808,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1594317048
    },
    {
        "content": "<p>The <a href=\"https://google.github.io/styleguide/pyguide.html#212-default-argument-values\">google python style guide</a> recommends against using mutable object types as default parameters.</p>\n<blockquote>\n<p>Default arguments are evaluated once at module load time. This may cause problems if the argument is a mutable object such as a list or a dictionary. If the function modifies the object (e.g., by appending an item to a list), the default value is modified.</p>\n</blockquote>\n<p>So, if you're seeing this with an immutable type like a string, that would be odd.  But if it's an instance of something mutable, that might explain it.</p>",
        "id": 203436969,
        "sender_full_name": "Carl Anderson",
        "timestamp": 1594326975
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191372\">@René Spronk</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">pp</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pp</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">hello</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pp</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pp</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">hello</span>\n</code></pre></div>\n\n\n<p>Your example works fine.</p>\n<p>However, if you mutate default argument value it changes permanently.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">pp</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"p\">{}):</span>\n<span class=\"o\">...</span>     <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pp</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,{})</span>\n<span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pp</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pp</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pp</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n<span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pp</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</code></pre></div>",
        "id": 203465596,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1594350893
    },
    {
        "content": "<p>Thanks - as it turned this was the classic 'by reference' vs 'by value' issue - using a global dict in a procedure, assigning a local variable name to a part of that global dict, modification of the local variable (and hence: of the global). Solved it by casting the gobal to dict() which forces a copy by value. (I wrote my own FHIR/REST module, just to learn Py, not because I'd do a better job than some of the libraries out there - I'm a trainer, not a programmer).</p>",
        "id": 203478543,
        "sender_full_name": "René Spronk",
        "timestamp": 1594367431
    }
]