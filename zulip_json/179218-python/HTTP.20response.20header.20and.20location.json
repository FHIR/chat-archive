[
    {
        "content": "<p>I've been exploring the <code>fhirclient</code> python package from the smart client-py repo, and wonder what the correct way to figure out the <code>Location</code> of the resource created after posting it to a server. For example posting to an open server with </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">mypatient</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">smart</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>gives me</p>\n<div class=\"codehilite\"><pre><span></span>{\n    &quot;resourceType&quot;: &quot;OperationOutcome&quot;,\n    &quot;text&quot;: {\n        &quot;status&quot;: &quot;generated&quot;,\n        &quot;div&quot;: &quot;&lt;div xmlns=\\&quot;http://www.w3.org/1999/xhtml\\&quot;&gt;&lt;h1&gt;Operation Outcome&lt;/h1&gt;&lt;table border=\\&quot;0\\&quot;&gt;&lt;tr&gt;&lt;td style=\\&quot;font-weight: bold;\\&quot;&gt;INFORMATION&lt;/td&gt;&lt;td&gt;[]&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Successfully created resource &amp;quot;Patient/2516/_history/1&amp;quot; in 3ms&lt;/pre&gt;&lt;/td&gt;\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t&lt;/tr&gt;\\n\\t\\t&lt;/table&gt;\\n\\t&lt;/div&gt;&quot;\n    },\n    &quot;issue&quot;: [\n        {\n            &quot;severity&quot;: &quot;information&quot;,\n            &quot;code&quot;: &quot;informational&quot;,\n            &quot;diagnostics&quot;: &quot;Successfully created resource \\&quot;Patient/2516/_history/1\\&quot; in 3ms&quot;\n        }\n    ]\n}\n</pre></div>\n\n\n<p>I can parse the <code>issue.diagnostics</code>, but is there a structured way to get the <code>Location</code> field from a HTTP response header using the fhirclient package?</p>",
        "id": 153951340,
        "sender_full_name": " Bob Milius",
        "timestamp": 1523107774
    },
    {
        "content": "<p>I believe exposing response headers has not been implemented yet. You'd have to hook into the <code>create</code> and <code>update</code> methods in <code>fhirabstractresource</code>. The line <code>ret = srv.post_json(...)</code> returns a \"requests\" object that you can inspect to learn more about the response.</p>",
        "id": 153951360,
        "sender_full_name": "Pascal Pfiffner",
        "timestamp": 1523165818
    },
    {
        "content": "<p>thanks, <span class=\"user-mention\" data-user-id=\"191339\">@Pascal Pfiffner</span> , I''ll look there.</p>",
        "id": 153951374,
        "sender_full_name": " Bob Milius",
        "timestamp": 1523198443
    },
    {
        "content": "<p>With the <code>fhirclient</code> package  as distributed from <a href=\"https://github.com/smart-on-fhir/\" target=\"_blank\" title=\"https://github.com/smart-on-fhir/\">https://github.com/smart-on-fhir/</a>, <code>mypatient.create(smart.server)</code> returns the JSON formatted <code>Content</code>. I wanted access to the full HTTP header response, so I made the following simple change to the <code>create</code>, <code>update</code>, and <code>delete</code> methods in <code>fhirclient/models/fhirabstractresource</code> so that the entire <code>requests.models.Response</code> object is returned.</p>\n<p>from</p>\n<div class=\"codehilite\"><pre><span></span>        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">srv</span><span class=\"o\">.</span><span class=\"n\">post_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">relativeBase</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_json</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span>        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">srv</span><span class=\"o\">.</span><span class=\"n\">post_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">relativeBase</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_json</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"c1\"># return the full requests.Response object</span>\n            <span class=\"k\">return</span> <span class=\"n\">ret</span>\n            <span class=\"c1\"># return ret.json()</span>\n</pre></div>\n\n\n<p>Now I can replicate the previous behavior of <code>response</code> by using <code>response.json()</code> and also access the headers by using <code>response.headers</code>, e.g., <code>response.headers.['location']</code></p>\n<p>Now testing to see if it breaks anything.</p>\n<p>thanks again, <span class=\"user-mention\" data-user-id=\"191339\">@Pascal Pfiffner</span> , for pointing me in the right direction.</p>",
        "id": 153951392,
        "sender_full_name": " Bob Milius",
        "timestamp": 1523234119
    }
]