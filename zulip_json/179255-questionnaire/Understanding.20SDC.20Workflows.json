[
    {
        "content": "<p>I've been working through SDC workflows for single and multiple Questionnaires. For a group of Questionnaires, I have been using a Task (or possibly a Task with multiple sub-tasks). I think this makes sense for both EHR launch or external EHR launch. I've been using the full workflow below:</p>\n<ol>\n<li>ServiceRequest (refers to PlanDefinition)</li>\n<li>Task (created from Resources in the PlanDefinition)</li>\n<li>Questionnaires/QuestionnaireResponses as inputs/outputs for the Task</li>\n<li>Measure/MeasureReport to calculate overall scores for multiple Questionnaires in one location</li>\n</ol>",
        "id": 264472553,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1639154109
    },
    {
        "content": "<p>What I'm not completely sure of is the workflow for a single Questionnaire. I'm assuming this is almost always going to be launched from within an EHR, and I could go through the above workflow, but it feels a little cumbersome if it's just for a single Questionnaire. Does anyone else have a suggestion on the workflow for a single Questionnaire?</p>",
        "id": 264473060,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1639154334
    },
    {
        "content": "<p>Each Questionnaire should have its own Task - because status around \"will I complete\" and \"Is it completed\" is on a per QuestionnaireResponse basis.  There's only a need for a ServiceRequest if you need a formal order/authorization.  Otherwise you can just use Task.  Obviously Measure/MeasureReport utility depends on whether you need those too.</p>",
        "id": 264496057,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639164308
    },
    {
        "content": "<p>What's the advantage of having a Task for each questionnaire? If I have a number of Questionnaires as the input for a single Task, and QuestionnaireResponses as the output. I can check which QuestionnaireResponse is completed vs in-process, what extra information would sub-tasks have in this situation?</p>",
        "id": 264507059,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1639169876
    },
    {
        "content": "<p>The user might refuse to fill out Questionnaire #1, have completed #2 and have #3 on-hold because they need to hear back from their mom before they can finish it - each would have a distinct Task.status (and possibly Task.reason).</p>",
        "id": 264542642,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639200085
    },
    {
        "content": "<p>Tasks should be issued at the level such that acceptance/refusal and complete/cancel applies to the full request.</p>",
        "id": 264542689,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639200140
    },
    {
        "content": "<p>So in that case, would the overall organization be something like this:</p>\n<ol>\n<li>Primary Task: inputs would include all Questionnaires, ValueSets, outputs would be subtasks</li>\n<li>Subtasks: inputs would include a single Questionnaire, outputs would be a single QuestionnaireResponse</li>\n</ol>",
        "id": 264605851,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1639288131
    },
    {
        "content": "<p>My expectation would be that primary Task wouldn't list any questionnaires, but might have a high-level description such as \"complete admission forms\".  SubTasks would each point to the Questionnaire and QuestionnaireResponse.  I don't see a whole lot of benefit to listing all of the Questionnaires and QRs multiple times</p>",
        "id": 264647925,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639349038
    },
    {
        "content": "<p>So then would the overarching task have any inputs? I guess maybe just a planDefinition?</p>",
        "id": 264650898,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1639353277
    },
    {
        "content": "<p>It could be 'basedOn' a planDefinition.  Do you need to track overall completeness of the collection of Questionnaires?  I.e. Is there a need for an overarching Task?</p>",
        "id": 264654922,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639358895
    },
    {
        "content": "<p>I think so. The assignment would be to complete a group of questionnaires (based on the PlanDefinition). So I think I'd need an overarching Task, and then multiple subtasks for each questionnaire. I was just trying to clarify what the input and output for each of those would be.</p>",
        "id": 264718983,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1639407961
    },
    {
        "content": "<p>You don't need to have the Task <em>just</em> because you're instantiating the PlanDefinition.  The Task should have a business value in and of itself.</p>",
        "id": 264720904,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639408730
    },
    {
        "content": "<p>Then I may be confused over the best way to represent the workflow. Say I have a doctor enter an order (ServiceRequest) for a patient to complete a group of screening Questionnaires (which Questionnaries are defined in a PlanDefinition). It is multiple Questionnaires that need to be completed, so they would each have their own Task. At the same time, it is a single order placed by the doctor, so I thought there would be some way to group them all together as a single unit (which I assumed was the overarching Task). Would I just keep track of each individual Task instead?</p>",
        "id": 264730888,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1639412568
    },
    {
        "content": "<p>Typically yes.  The only time you'd need an overarching Task is if you're trying to get someone to say yes to something 'overall' and have that be meaningful and useful as distinct from their responses on the individual tasks.</p>",
        "id": 264782974,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639436310
    },
    {
        "content": "<p>I think I was thinking about a way to group them together for more efficient searching, something like this scenario: If I have a patient, and the doctor has ordered the patient to complete 3 different sets of questionnaires, and each set contains 3 questionnaires. In this case, let's say it's 3 different procedures. Each procedure has a different insurance form, a different medical history form, and then a consent form. </p>\n<ol>\n<li>Colonoscopy - insurance form, history form, consent form</li>\n<li>Mole removal - insurance form, history form, consent form</li>\n<li>Mammogram - insurance form, history form, consent form</li>\n</ol>\n<p>The patient has to complete all 3 questionnaires in a set before the doctor can act on them. The patient has a mobile application installed on their phone that lets them complete the questionnaires, and they would like to complete the 2nd set of questionnaires first because the mole removal appointment is going to happen soonest. How do I find those? Would I go back and look at the ServiceRequest? That feels a little inefficient (e.g. ServiceRequest -&gt; PlanDefinition -&gt; Questionnaires -&gt; QuestionnaireResponses). The system that we're interacting with could just pass a list of the 3 Questionnaires along with 3 Tasks for each procedure, but that list would have to be stored in whatever system we're interacting with, it wouldn't be stored in FHIR, UNLESS there's an overarching task that groups each set of questionnaires together. </p>\n<p>At least, this is how it happens in my head. Is there a better way to represent this?</p>",
        "id": 264865453,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1639492326
    },
    {
        "content": "<p>You'd have 3 ServiceRequests.  Each of the Tasks would have a 'basedOn' link to their respective ServiceReqeust.  So that might suffice.  You certainly <em>can</em> create a parent Task if you need one.  I just wanted it to be clear that it's not necessarily something that will be necessary.</p>",
        "id": 264881747,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639498484
    },
    {
        "content": "<p>No, that makes sense. Not needed but allowed. So then, our workflow would look like this (not all pieces required, but allowed in the way we are using them):</p>\n<div class=\"codehilite\"><pre><span></span><code>---\nresourceType: ServiceRequest\nid: 1\ninstantiatesUri:\n- PlanDefinition/1\nintent: order\nsubject:\n  reference: Patient/1\nrequester:\n  reference: Provider/1\nperformer:\n- reference: Patient/1\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>---\nresourceType: PlanDefinition\nid: 1\ndescription: Colonoscopy, Pre-Procedure\nname: pre_colonoscopy\ntitle: Forms to be Completed Prior to Colonoscopy\naction:\n- definitionUri: Questionnaire/1\n  participant:\n  - type: patient\n  title: Insurance Form\n- definitionUri: Questionnaire/2\n  participant:\n  - type: patient\n  title: History Form\n- definitionUri: Questionnaire/3\n  participant:\n  - type: patient\n  title: Consent Form\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>---\nresourceType: Task\nid: overarching\nintent: order\nowner:\n  reference: Patient/1\nrequester:\n  reference: Provider/1\ninstantiatesUri: PlanDefinition/1\nbasedOn:\n- reference: ServiceRequest/1\n- reference: PlanDefinition/1\nfor:\n  reference: Patient/1\noutput:\n- type:\n    coding:\n    - system: http://hl7.org/fhir/resource-types\n      code: Task\n  valueUri: Task/1\n- type:\n    coding:\n    - system: http://hl7.org/fhir/resource-types\n      code: Task\n  valueUri: Task/2\n- type:\n    coding:\n    - system: http://hl7.org/fhir/resource-types\n      code: Task\n  valueUri: Task/3\n</code></pre></div>\n<p>Should the PlanDefinition be in the instantiatesUri or basedOn field? And I assume the subtasks will be considered outputs?</p>\n<div class=\"codehilite\"><pre><span></span><code>---\nresourceType: Task\nid: 1\nintent: order\nowner:\n  reference: Patient/1\nrequester:\n  reference: Provider/1\nfor:\n  reference: Patient/1\npartOf:\n  reference: Task/overarching\ninput:\n- type:\n    coding:\n    - system: http://hl7.org/fhir/uv/sdc/CodeSystem/temp\n      code: questionnaire\n  valueUri: Questionnaire/1\noutput:\n- type:\n    coding:\n    - code: collect-information\n      display: Collect Information\n      system: http://hl7.org/fhir/uv/cpg/CodeSystem/cpg-activity-type\n  valueUri: QuestionnaireResponse/1\n</code></pre></div>\n<p>Is there a preference, generally, between using valueUri, valueCanonical, and valueReference? It would be nice if valueReference was part of the _include=* search, but since it's not a Search Parameter it isn't (but it would make it much easier to pull all included Resources).</p>",
        "id": 265035850,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1639585840
    },
    {
        "content": "<p>You wouldn't have the sub-tasks as outputs.  The sub-tasks would point to the parent via partOf.   (We always try to avoid bidirectional references.) The parent Task wouldn't have any inputs or outputs, just an overall status.  (Which is why I was questioning its value)</p>",
        "id": 265068876,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639599214
    },
    {
        "content": "<p>It's value probably isn't huge, and in some cases it could probably be removed. I think I was trying to come up with a similar pattern for all of the workflows, but maybe that isn't possible.<br>\nIf there's +/- ServiceRequest -&gt; Task/Questionnaire/QuestionnaireResponse, that's pretty straight forward.<br>\nIf there's a ServiceRequest with multiple Tasks/Questionnaires/QuestionnaireResponses without an overarching Task, then as you say, I have to reference the ServiceRequests from each Task in order to group them together.<br>\nBut then I still run into the problem, what if there's a group of questionnaires that are supposed to be completed together, and there's no ServiceRequest (for instance, if I'm in clinic, completing multiple forms for a Patient). If there are 3 Questionnaires that need to be completed by me, but no ServiceRequest (because there's no order placed). So then I'm left with a Task/Questionnaire/QuestionnaireResponse x 3, but no way to group them together, unless I create that overarching Task (which really ONLY has the function of identifying that they belong together).</p>",
        "id": 265097307,
        "sender_full_name": "Grey Faulkenberry",
        "timestamp": 1639614710
    },
    {
        "content": "<p>You could use Task.groupIdentifier</p>",
        "id": 265201780,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1639680803
    }
]