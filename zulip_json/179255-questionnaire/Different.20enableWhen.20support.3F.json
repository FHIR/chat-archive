[
    {
        "content": "<p>EnableWhen is a weird beast.  It's not totally clear whether it makes the 80% rule - and we have a more generic solution (enableWhenExpression) that covers everything enableWhen allows plus more - and it's not clear that it's significantly more complex to support.  Also, we have some forms that have a design approach of \"skip to Question X\" which is somewhat clunky to implement using enableWhen.</p>\n<p>How comfortable are we that we want to lock this down into \"can't break compatibility going forward\"?</p>",
        "id": 228993277,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614965770
    },
    {
        "content": "<p>enableWhen and enableWhenExpression were backwards for our questionnaire purposes.  We had the \"skip to question\" version of the rules.  Based on the answer to this question (or some external parameters), we need to say go to the next question and, as you said, that is clunky or downright not doable using enableWhen.</p>",
        "id": 228993470,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614965865
    },
    {
        "content": "<p>It should be doable (curious what couldn't be expressed if not), but definitely can get super clunky.</p>",
        "id": 228993682,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614965951
    },
    {
        "content": "<p>I think that replacing <code>enableWhen</code> with <code>enableWhenExpression</code> is a good idea. It is much easy to support the only enableWhenExpression rather than try to implement all weird options for <code>enableWhen</code>.<br>\nWe can provide a tool that automatically converts old <code>enableWhen</code> elements to <code>enableWhenExpression</code> notation.</p>",
        "id": 229456175,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1615286549
    },
    {
        "content": "<p>I like the idea of a \"skipToItem\" extension, though I wonder would should happen if a question is skipped but its own enableWhen logic (or its group's) says to show it.  I think implementations would need separate flags for both.</p>",
        "id": 229751236,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1615412922
    },
    {
        "content": "<p>Does \"skipTo\" need to be partnered with \"backTo\"? Assuming that for each question I have \"next question\" and \"previous question\" buttons, and use skipTo to jump from Q2 to Q5, would the \"previous question\" button take me Q4 or Q2? Does it matter if Q3 and Q4 are enabled, but skipped? Can you skip an enabled question?</p>\n<p>I like enableWhen because it means I don't need to learn (the even more poorly documented than SDC) FHIRPath or CQL to turn on or off particular questions. If enableWhen is replaced, enableWhenExpression needs to have solid examples that correspond to the basic use cases that enableWhen covered.</p>",
        "id": 229752853,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1615413593
    },
    {
        "content": "<p>I think skipToItem would override enableWhen(Expression).  A back button would have to skip over any skipped or disabled items.</p>",
        "id": 229763151,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1615417342
    },
    {
        "content": "<p>Great thread ...</p>\n<p>I do like the <code>skipTo</code> idea having built many questionnaires and the code to implement form filler behavior. </p>\n<p>I was thinking of <code>skipTo</code> as a way of specifying an alternative exit edge from an item (where the default exit edge is either the next child, or next sibling  item). As <code>enableWhen</code> is an entry condition (similar to <code>condition</code> in Plan/ActionDef.action), I don't think one would override the other (e.g. <code>enableWhen</code> logic would still apply). </p>\n<p>But I don't think this idea should be conflated with trying to specify item navigational state (e.g. <code>backTo</code>). It is a special case if the form filler  experience is one-question-at-a-time (as opposed to seeing all items at once, or broken down by group, or other hierarchy).</p>",
        "id": 229789035,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1615434448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191380\">@Elliot Silver</span>  I am not using CQL, so I can't help with it.<br>\nHowever, FHIRPath is well documented and it is very simple to convert <code>enableWhen</code> to FHIRPath powered <code>enableWhenExpression</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code>  enableWhen:\n  - question: has-claim-number\n    operator: &quot;!=&quot;\n    answer:\n      Coding:\n        system: http://snomed.info/sct\n        code: &quot;373066001&quot;\n        display: &quot;Yes&quot;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>QuestionnaireResponse.repeat(item).where(linkId=&#39;has-claim-number&#39;).answer.children().code ~ &#39;373066001&#39;\n</code></pre></div>\n<p>Leveraging FHRPath boolean logic <a href=\"http://hl7.org/fhirpath/N1/#and\">http://hl7.org/fhirpath/N1/#and</a> makes complex expression more flexible and readable than <code>enableBehavior</code>.</p>\n<p>I am using two FHIRPath implementations.<br>\njavascript-based is <a href=\"https://github.com/HL7/fhirpath.js\">https://github.com/HL7/fhirpath.js</a> <br>\npython-based is <a href=\"https://github.com/beda-software/fhirpath-py\">https://github.com/beda-software/fhirpath-py</a></p>\n<p>Both of them contains data-driven tests that can be used as examples of FHIRPath expression</p>\n<p><a href=\"https://github.com/beda-software/fhirpath-py/tree/master/tests/cases\">https://github.com/beda-software/fhirpath-py/tree/master/tests/cases</a><br>\n<a href=\"https://github.com/HL7/fhirpath.js/tree/master/test/cases\">https://github.com/HL7/fhirpath.js/tree/master/test/cases</a></p>",
        "id": 229857561,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1615473226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"196255\">@Ilya Beda</span> , perhaps I was inaccurate when I said FHIRPath is not well documented. What I meant was, there is no easy entry point to learning FHIRPath. I can look at what you wrote, and understand what it means, but I couldn't have gone from the enableWhen to your expressions myself. </p>\n<p>Apparently FHIRPath is a subset of CQL, or vice-versa.</p>",
        "id": 229879390,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1615480075
    },
    {
        "content": "<p>FHIRPath is a subset of CQL</p>",
        "id": 229896357,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1615485487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179255-questionnaire/topic/Different.20enableWhen.20support.3F/near/228993277\">said</a>:</p>\n<blockquote>\n<p>EnableWhen is a weird beast.  It's not totally clear whether it makes the 80% rule - and we have a more generic solution (enableWhenExpression) that covers everything enableWhen allows plus more - and it's not clear that it's significantly more complex to support.  Also, we have some forms that have a design approach of \"skip to Question X\" which is somewhat clunky to implement using enableWhen.</p>\n<p>How comfortable are we that we want to lock this down into \"can't break compatibility going forward\"?</p>\n</blockquote>\n<p>Maybe it depends on the point from which you are starting. I am currently implementing a Questionnaire filler app in Flutter using Dart. That means I don't have a ready-to-use mature Open Source FHIRPath implementation at my disposal. enableWhen vs enableWhenExpression is making the difference between 50 lines of if-then logic vs. writing a FHIRPath engine from scratch. Seeing how most of my use-cases are trivial (similar to the SDC samples, \"if female then ask pregnancy\") I would like to keep the simplistic option.</p>",
        "id": 232117936,
        "sender_full_name": "Tilo Christ",
        "timestamp": 1616878771
    },
    {
        "content": "<p>There are a lot of open-source FHIRPath implementations you can use as an example. <br>\nAlso, there is no need to implement the whole spec you can implement a small subset that meets your needs.<br>\nFinally, FHIRpath is one of the FHIR core elements, so you have to implement it anyway.</p>",
        "id": 232290743,
        "sender_full_name": "Ilya Beda",
        "timestamp": 1617033208
    },
    {
        "content": "<p>It's not accurate to say that you have to implement FHIRPath anyway - a Questionnaire rendering tool could easily have no support for FHIRPath.</p>",
        "id": 232293417,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1617034218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191320\">Lloyd McKenzie</span> <a href=\"#narrow/stream/179255-questionnaire/topic/Different.20enableWhen.20support.3F/near/232293417\">said</a>:</p>\n<blockquote>\n<p>It's not accurate to say that you have to implement FHIRPath anyway - a Questionnaire rendering tool could easily have no support for FHIRPath.</p>\n</blockquote>\n<p>Mine goes for consumer appeal and smoothness <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  <a href=\"/user_uploads/10155/9i_o1REraCVlmOBi789_Ovwz/image.png\">image.png</a>  <br>\nMaybe the first one to do 90fps on a phone.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/9i_o1REraCVlmOBi789_Ovwz/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/9i_o1REraCVlmOBi789_Ovwz/image.png\"></a></div>",
        "id": 232295173,
        "sender_full_name": "Tilo Christ",
        "timestamp": 1617035039
    }
]