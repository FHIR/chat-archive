[
    {
        "content": "<p>How do we specify range of a value in enableWhen, for example to enable when question value is 0 to 10? The operator codes don't seem to cover the use case...</p>",
        "id": 154019804,
        "sender_full_name": "Ajay Kanduru",
        "timestamp": 1542726073
    },
    {
        "content": "<p>I think in R3 you could only define a set of enableWhen statements each covering one of the allowed numbers since several enableWhen statements are always combined with a logical OR:<br>\n- enableWhen value=0<br>\n- enableWhen value=1<br>\n- ...<br>\n- enableWhen value=10</p>\n<p>In R4 you could specify enableBehavior = all (which means a logical AND) and then you would only need the following conditions:<br>\n- enableWhen value &gt;= 0<br>\n- enableWhen value &lt;= 10</p>",
        "id": 154019808,
        "sender_full_name": "Astrid Corinna Wolff",
        "timestamp": 1542726419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"196149\">@Astrid Corinna Wolff</span> The problem with that approach is that you cannot add another enableWhen, say doing OR with different question.   </p>\n<p>Ideally, I would like to see operator code expanded or add some additional attributes in enableWhen, without the use of enableBehavior.</p>",
        "id": 154019831,
        "sender_full_name": "Ajay Kanduru",
        "timestamp": 1542732875
    },
    {
        "content": "<p>There's a new enableWhenExpression extension being introduced in SDC that gives you the ability to do full expression logic</p>",
        "id": 154019848,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542738236
    },
    {
        "content": "<p>Using fhirpath as the expression language</p>",
        "id": 154019855,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1542741853
    },
    {
        "content": "<p>That's an interesting approach - thanks for the hint. </p>\n<p>However, using the extension from SDC would mean that I can't be sure that all clients will know and understand this extension and there might be some that could not handle it and therefore, the enableWhen statements within might not be executed at all and the actually depending items might always be displayed.</p>",
        "id": 154020041,
        "sender_full_name": "Astrid Corinna Wolff",
        "timestamp": 1542788000
    },
    {
        "content": "<p>That's true even for core elements.  Not every system that implements Questionnaire will necessarily support enableWhen.  It's part of core because we believe \"most\" systems will support it, but there's never a guarantee.</p>",
        "id": 154020251,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1542821917
    },
    {
        "content": "<p>It feels like there can be a simpler solution. Something like including answerRange in answer[x] might work better, isn't it?</p>",
        "id": 154020663,
        "sender_full_name": "Ajay Kanduru",
        "timestamp": 1543072623
    },
    {
        "content": "<p>Adding things to core always makes things easier for some, but harder for everyone else.  When we try to include the needs of everyone in the core spec, the specification becomes overwhelmingly complex.  Extensions for uncommon behavior is the best way we've found to manage the complexity.</p>",
        "id": 154020666,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1543089980
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 193244357,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1586291929
    }
]