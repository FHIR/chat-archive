[
    {
        "content": "<p>I was trying to write a questionnaire-initialExpression for an item of type \"choice\", and realized it would need to return a valueCoding which is defined in the Questionnaire resource and which can't be directly constructed in FHIRPath.  The \"resolve\" extension to FHIRPath could be used on the Questionnaire reference in the QR, but depending on the implementation (of which I currently have none) \"resolve\" could be an asynchronous fetch over the network (which I don't think would work well in FHIRPath) or a synchronous blocking call which cause the rendering/updating of the form to halt while the fetch was made.  A third option would be to have resolve() take a shortcut for the case of the Questionnaire reference; perhaps the renderer could have it on hand in cases some FHIRPath asked for it.</p>\n<p>A much simpler approach would be to just make the Questionnaire available as an environment variable.  In this case, %questionnaire would refer to the \"current\" Questionnaire much like %patient can be made (via questionnaire-launchContext) to refer to the current patient.</p>",
        "id": 154015992,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1541534360
    },
    {
        "content": "<p>That sounds like one we could define without even relying on the context extension.</p>",
        "id": 154016014,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1541539640
    },
    {
        "content": "<p>Is that initial expression the fhirpath extract operation, I thought that was only for the populate operation.</p>",
        "id": 154016022,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541541088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> For population.</p>",
        "id": 154016029,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1541541767
    },
    {
        "content": "<p>What's the example expression?<br>\nFor things like a Coding, as long as your selector is locating a coding type, all good. But your right that you can't convert a string to a coding, or at least we haven't defined that.</p>",
        "id": 154016061,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541551523
    },
    {
        "content": "<p>I may have implemented that though.</p>",
        "id": 154016062,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541551535
    },
    {
        "content": "<p>Yes, if it returned the right Coding, it would be fine.  But, I am pulling Patient.gender, which uses AdministrativeGender, and I am trying to convert that Coding to a Coding for a different gender list in the questionnaire I'm populating.  There are just three entries, so I was going to just do that conversion in FHIRPath, using a couple of nested iif statements.</p>",
        "id": 154016202,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1541605362
    },
    {
        "content": "<p>That code you mean ;)<br>\nMy implementation does do some type tweaking in the populate code covering some stuff like this.<br>\nBut your exact example is an interesting one, as the type is a code with a fixed binding, so could be converted into a Coding quite easily.</p>",
        "id": 154016472,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541632435
    },
    {
        "content": "<p>There is also details on terminologies here:<br>\n<a href=\"http://build.fhir.org/fhirpath.html#txapi\" target=\"_blank\" title=\"http://build.fhir.org/fhirpath.html#txapi\">http://build.fhir.org/fhirpath.html#txapi</a><br>\nspecifically <code>%terminologies.translate(conceptMap, code, params) : Parameters</code> that I thought you might use to convert from the patientGender to the system that you're looking for. (rather than an IIf statement)</p>",
        "id": 154016473,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541632588
    },
    {
        "content": "<p>(Not that I've implemented that part - though should be pretty simple, have all the other parts for it)</p>",
        "id": 154016474,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541632610
    },
    {
        "content": "<p>If it were a long list, I suppose I would have to do something like that.  But, the fewer HTTP calls the better.  (And, how would asynchronous calls to a terminology server work if they happened in the middle of a FHIRPath expression?  Do you pause the evaluation and resume when the HTTP call returns?)</p>",
        "id": 154016480,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1541632843
    },
    {
        "content": "<p>my FHIRPath implementation has a factory that can construct things like Coding, but we haven't made anything like that standard</p>",
        "id": 154016981,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1541723112
    },
    {
        "content": "<p>For reference, this issue is now <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19629&amp;start=0\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19629&amp;start=0\">GF#19629</a>.</p>",
        "id": 154018237,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1542147261
    }
]