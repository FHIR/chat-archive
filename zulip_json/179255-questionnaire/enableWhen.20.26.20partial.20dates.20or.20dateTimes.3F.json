[
    {
        "content": "<p>Is there documentation for how enableWhen should handle comparisons of dates and dateTimes when one or both is a partial date or dateTime?  I know that is documented in FHIRPath, but I didn't see it for enableWhen.</p>",
        "id": 273831311,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646237463
    },
    {
        "content": "<p>This has become problematic as the updated fhirpath text now says you can't mix precisions, which makes this even more difficult to design as you don't have control over what the user is going to provide.</p>",
        "id": 273881538,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646257264
    },
    {
        "content": "<p>Um, yeah.  That seems like an unrealistic constraint.  There are all sorts of situations where we're going to need to compare dates and dateTImes with differing precision.  Where's the best thread to discuss this in FHIRPath?</p>",
        "id": 273914358,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646276219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> Is this text from <a href=\"https://hl7.org/fhirpath/#comparison\">https://hl7.org/fhirpath/#comparison</a> what you are referring to, or is there a later revision?</p>\n<blockquote>\n<p>For partial Date, DateTime, and Time values, the comparison is performed by comparing the values at each precision, beginning with years, and proceeding to the finest precision specified in either input, and respecting timezone offsets. If one value is specified to a different level of precision than the other, the result is empty ({ }) to indicate that the result of the comparison is unknown.</p>\n</blockquote>\n<p>That permits comparison of partial DateTimes with differing precision, but returns empty {} if the comparison would be ambiguous.  For example, <code>2018-02 &gt; 2018-01</code> is true, but <code>2018-02 &gt; 2018</code> should be {}.  (\"should be\" because fhirpath.js currently has the second one wrong, I think).</p>",
        "id": 274016404,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646331930
    },
    {
        "content": "<p>That's correct. If the precision is different, you get nothing. (And makes Brian sad <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> )</p>",
        "id": 274034085,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646339062
    },
    {
        "content": "<p>That's not helpful.  If I say \"Is 1982 &lt; 1987-12-15?\", the answer should absolutely be 'true'.  The difference in precision <em>only</em> matters if I say something like \"Is 1982 &lt; 1982-12=15?\"</p>",
        "id": 274034354,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646339167
    },
    {
        "content": "<p>And that is the case where you get empty.  @1982 &lt; @1987-12-15 will return true.</p>",
        "id": 274047102,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646345028
    },
    {
        "content": "<p>Yes, but it would also return true if you said <code>@2015 &lt; @1987-12-15</code>, would it not?</p>",
        "id": 274053898,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646348678
    },
    {
        "content": "<p>That is false.  Try it at <a href=\"https://hl7.github.io/fhirpath.js/\">https://hl7.github.io/fhirpath.js/</a><br>\nThe reason is that the precision only comes into play when components are equal.  You compare dates starting with the lowest precision, year, then year+month if the years are equal, then year+month+day if the year+month was equal, and so on.  So, in your example it compares 2015 with 1987, finds that 2015 &lt; 1987 is false, and stops there.</p>",
        "id": 274062055,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646353827
    },
    {
        "content": "<p>ah.  That's the bit that wasn't clear to me.  So, for dates that are equivalent except for precision, =, &lt; and &gt; all return true?  That's probably acceptable.  So using the FHIRPath rules for comparison would presumably be a reasonable clarification to add to the spec?</p>",
        "id": 274063555,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646355027
    },
    {
        "content": "<p>No.  Maybe you meant \"empty\"?  @2015 &lt; @2015-05 is empty, and also for  &gt; and =.   Yes, since FHIRPath went to the trouble to figure this out already, I think it is best if Questionnaire enableWhen just follows that.</p>",
        "id": 274063831,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646355256
    },
    {
        "content": "<p>Right, but 'empty' would have to have a behavior for enableWhen - and my presumption is we'd say that \"empty\" = true for our purposes.</p>",
        "id": 274065879,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646356906
    },
    {
        "content": "<p>I.e. if things aren't clear, turn it on.</p>",
        "id": 274065889,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646356916
    },
    {
        "content": "<p>It seems to me that the comparison would have been better defined using the something like \"is the last instant of the first time before the first instant of the second time?\"</p>",
        "id": 274074711,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1646363929
    },
    {
        "content": "<p>But I guess it's too late for that now, and I'm sure there were plenty of reasons why it is defined the way it is currently defined.</p>",
        "id": 274074736,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1646363971
    },
    {
        "content": "<p>Can the differing length issue be dealt with by truncating both dates to the length of the shorter of the two?</p>",
        "id": 274074814,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1646364037
    },
    {
        "content": "<p>empty does not evaluate as true...</p>",
        "id": 274084828,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646373831
    },
    {
        "content": "<p>We want this to be the same as the invariant processing (and I don't like that empty doesn't do that - it's how the dotnet engine did it till a short time ago)</p>",
        "id": 274084893,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646373871
    },
    {
        "content": "<p>Right - but enableWhen <em>must</em> evaluate to 'true' or 'false'.  There's no room for an 'unknown'.  So I'm asserting that, for our purposes, if the FHIRPath evaluation is empty, the element would be enabled.</p>",
        "id": 274086962,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646375533
    },
    {
        "content": "<p>I'd really encourage us to have the same rules as validation here.</p>",
        "id": 274090986,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646379314
    },
    {
        "content": "<p>Validation can spit out warnings.  enableWhen can't really do that...</p>",
        "id": 274136726,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646404413
    },
    {
        "content": "<p>That's the type of invariant, not from the expression itself.</p>",
        "id": 274367424,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646645751
    },
    {
        "content": "<p>I don't follow...  What do you mean by \"type of invariant\"?  We're not talking about an invariant at all...</p>",
        "id": 274446347,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646682006
    },
    {
        "content": "<p>We're talking about an expression that results in either a true or false value here.<br>\nI don't want there to be multiple interpretations of that for different places.</p>",
        "id": 274453229,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646685214
    },
    {
        "content": "<p>Right.  But you were saying that it would evaluate to true, false or empty - and we need to decide what 'empty' means, correct?</p>",
        "id": 274470032,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646693257
    },
    {
        "content": "<p>And that should be the same regardless of where we do it is what I want.</p>",
        "id": 274492309,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646710860
    },
    {
        "content": "<p>Ok, so what does 'empty' do in an invariant?</p>",
        "id": 274496901,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646715522
    },
    {
        "content": "<p>Unfortunately that results as false.<br>\nWhich the dotnet implementation didnt do till a few months ago (and was happy) then sometime said the Java is doing the other, and that's what was intended, so I was sad <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span></p>",
        "id": 274530045,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646740039
    },
    {
        "content": "<p>Is there a place where this is discussed?</p>",
        "id": 274545792,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646748789
    },
    {
        "content": "<p>On the fhirpath channel.</p>",
        "id": 274592475,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646767326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> Can you post a link to where it says {} in an invariant means false?</p>",
        "id": 274593462,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646767750
    },
    {
        "content": "<p>And Grahame points to this part of the spec.<br>\n<a href=\"http://hl7.org/fhirpath/N1/#null-and-empty\">http://hl7.org/fhirpath/N1/#null-and-empty</a></p>",
        "id": 274593976,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646767929
    },
    {
        "content": "<p>That part doesn't mention \"false\".</p>",
        "id": 274605443,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646772960
    },
    {
        "content": "<p>Problem is boolean evaluation in tri-state condition.<br>\nTrue else false<br>\nOr<br>\nFalse else true.<br>\nAnd null falls into else case.<br>\nI do need to find in the spec where the invariant case is documented.</p>",
        "id": 274613341,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646776651
    }
]