[
    {
        "content": "<p>In the spec, \"choice\" and \"open-choice\" are limited to use for answers of type \"Coding\", but conceptually, they mirror CNE and CWE, which less about data type and more about whether the user is allowed to enter a value that is not on the list.  For reasons I don't quite understand, answerOption is allowed to take other data types other than Coding.  So, suppose one has a question with answerOptions containing valueString, instead.  Is the item.type then set to \"string\"?  How then does one indicate whether a value can be entered that is not on the list?</p>",
        "id": 158398284,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1550014737
    },
    {
        "content": "<p>CNE and CWE are definitely about coded data.  I don't think you can send dates or numbers in either.</p>\n<p>AnswerOption was allowed to take other data types because use-cases were presented where, for certain questions, the answer might be a constrained list of times, dates or numbers.   If you'd like to propose we enforce a constraint that the option choices align with the item type, that's probably a good idea.  I don't think anyone's ever presented a use-case to support an \"open\" choice for anything other than codes.</p>",
        "id": 158413644,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1550034803
    },
    {
        "content": "<blockquote>\n<p>AnswerOption was allowed to take other data types because use-cases were presented where, for certain questions, the answer might be a constrained list of times, dates or numbers.</p>\n</blockquote>\n<p>If someone has real-world examples of that that I could see, that would be helpful.  Strings and numbers, at least, could be handled with a Coding, since the codes are optional.</p>\n<p>I see Questionnaire is still \"Trial-Use\".  Rather than having choice and open-choice in item.type, I think it would be better to allow item.type Coding, and then have \"choice\" and open-choice be set somewhere else.  That way item.type could define the data type, and the specification of whether off-list answers were allowed (whatever the type) would be independent.</p>\n<blockquote>\n<p>I don't think anyone's ever presented a use-case to support an \"open\" choice for anything other than codes.</p>\n</blockquote>\n<p>LHC-Forms defines an optional form header field called \"where done\" which is basically a free text field but has a list of suggested entries like \"Home\", \"Lab\", etc.  It is not a list for which codes are important, and the user can type whatever they want.  As I said above, this could be handled with Coding, but it might be more natural to use item type \"string\".  (I am not arguing for keeping these other non-Coding types of answerOption, but I am trying to make the point that if we have them, circumstances arise in which open-choice is a reasonable thing to want for those kinds of lists.)</p>",
        "id": 158455104,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1550075676
    },
    {
        "content": "<p>Picking a time-slot, Indicating a number of tickets where the number needs to be a number for math purposes but there are fixed quantity choices available.  The need was for the result to be captured in the appropriate data type, but the set of choices available was finite.  Agree it's not a common thing, but the use-cases seemed reasonable when presented and it was going to cause less grief to add them than to try to make it work with extensions.</p>",
        "id": 158455940,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1550076320
    },
    {
        "content": "<p>The open choice can have an answer of type string or coding. So it's not a selection of data type.</p>",
        "id": 158520575,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1550142021
    },
    {
        "content": "<p>Example: A set of predefined dates available to choose from (generated server side from key moments in an encounter)</p>",
        "id": 158520605,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1550142082
    },
    {
        "content": "<blockquote>\n<p>The open choice can have an answer of type string or coding. So it's not a selection of data type.</p>\n</blockquote>\n<p>You are right, but it is not necessary to handle the free text entry as a string (though the spec might currently require that).  It could be stuffed into a Coding, since Coding.code is optional.</p>",
        "id": 158574536,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1550186340
    },
    {
        "content": "<p>That would be a misuse of the data type</p>",
        "id": 158575977,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1550187758
    },
    {
        "content": "<p>If a code is not requried, how could a Coding without a code be a misuse?</p>",
        "id": 158619496,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1550242414
    },
    {
        "content": "<p>Display without a code would be a misuse if it's not a proper display from the code system - it's not for capturing free text.</p>",
        "id": 158623283,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1550245338
    },
    {
        "content": "<p>Okay-- after reading <a href=\"https://www.hl7.org/fhir/datatypes.html#Coding\" target=\"_blank\" title=\"https://www.hl7.org/fhir/datatypes.html#Coding\">https://www.hl7.org/fhir/datatypes.html#Coding</a>, I guess that is clear enough.</p>",
        "id": 158625854,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1550247190
    },
    {
        "content": "<p>Where just text is used elsewhere is with the CodeableConcept filling only text, and no coded values.</p>",
        "id": 158673483,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1550288138
    },
    {
        "content": "<p>That's not an option for QuestionnaireResponse</p>",
        "id": 158675970,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1550292040
    },
    {
        "content": "<p>In QuestionnaireResponse the solution is to use answerString</p>",
        "id": 158675978,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1550292056
    },
    {
        "content": "<blockquote>\n<p>I see Questionnaire is still \"Trial-Use\".  Rather than having choice and open-choice in item.type, I think it would be better to allow item.type Coding, and then have \"choice\" and open-choice be set somewhere else.  That way item.type could define the data type, and the specification of whether off-list answers were allowed (whatever the type) would be independent.</p>\n</blockquote>\n<p>In case the above paragraph got lost in the surrounding discussion, I am re-posting.  Also, there is a <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20396\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20396\">tracker item</a> I created for it which explains the idea in more detail.  In addition to feedback about the idea itself, I would like to hear how disruptive it would be to have a breaking change in Questionnaire (which is still \"trial use\").</p>",
        "id": 159113768,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1550790776
    }
]