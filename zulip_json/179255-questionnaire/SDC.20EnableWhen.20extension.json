[
    {
        "content": "<p>SDC defines an extension for enable when using url <a href=\"http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-enableWhenExpression\" target=\"_blank\" title=\"http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-enableWhenExpression\">http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-enableWhenExpression</a> at <a href=\"https://build.fhir.org/ig/HL7/sdc/extension-sdc-questionnaire-enableWhenExpression.html\" target=\"_blank\" title=\"https://build.fhir.org/ig/HL7/sdc/extension-sdc-questionnaire-enableWhenExpression.html\">https://build.fhir.org/ig/HL7/sdc/extension-sdc-questionnaire-enableWhenExpression.html</a></p>",
        "id": 179014216,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571966102
    },
    {
        "content": "<p>the extension does not define how the expression is made aware of the context in the QR in which it is being run</p>",
        "id": 179014246,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571966148
    },
    {
        "content": "<p>There is no way, at this time, to use this extension</p>",
        "id": 179014290,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571966173
    },
    {
        "content": "<p>there's basically 2 sets of information to pass to the expression:<br>\n- the stack of questions in the Questionnaire<br>\n- the stack of answer items in the QuestionnaireResponse</p>\n<p>You need this context as soon as your dependency depends on a question within the context of a repeating item above you</p>",
        "id": 179014594,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571966630
    },
    {
        "content": "<p>The finnish project ignores this and assumes that the expression is evaluated in the context of the QR itself.</p>",
        "id": 179014642,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571966668
    },
    {
        "content": "<p>so what I propose is that the:<br>\n- the expression is executed in the context of the QuestionnaireResponse<br>\n- there's a variable %qstack which is a collection that has the stack of answer contexts in the QR. Each is a Tuple with .answer and .question properties<br>\n- there's a variable %questionnaire that has the actual questionnaire (for simplicity, since it's also the .question for the first entry in the stack)</p>",
        "id": 179015034,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571967328
    },
    {
        "content": "<p>Have you read the content about expressions in SDC?  It indicates how you access answers to other questions, variables that have been defined higher in the questionnaire, etc.</p>",
        "id": 179015855,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1571968583
    },
    {
        "content": "<p>I don't think we need anything more.</p>",
        "id": 179015860,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1571968594
    },
    {
        "content": "<p>where are you looking? (it would probably help to reference it from the extension)</p>",
        "id": 179016496,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571969552
    },
    {
        "content": "<p>if you are referring to this: <a href=\"https://build.fhir.org/ig/HL7/sdc/expressions.html#expression-extensions\" target=\"_blank\" title=\"https://build.fhir.org/ig/HL7/sdc/expressions.html#expression-extensions\">https://build.fhir.org/ig/HL7/sdc/expressions.html#expression-extensions</a> , then  I don't see any answer to my question</p>",
        "id": 179016518,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571969600
    },
    {
        "content": "<p>Some of the change requests aren't reflected yet which will let you reference the root of the Questionnaire or the QuestionnaireResponse or a particular Question in the Questionnaire.  However, with variable, you can make the values of \"previous\" answers available.</p>",
        "id": 179016953,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1571970332
    },
    {
        "content": "<p>so I kind of feel let down, since I can't actually see what matters - perhaps you could provide details....</p>\n<p>but it sounds like it doesn't get to the heart of the matter anyway: when you are evaluating enableWhen, you need access to stack for the item you are evaluating it's enabled-ness</p>",
        "id": 179017014,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571970435
    },
    {
        "content": "<p>I'm not sure what you mean by \"stack\".  Are you talking about all of the ancestor items?  (I recall asking for an ancestor ability in FHIRPath a couple of years ago and you weren't thrilled :&gt;)</p>\n<p>To get around that, the expectation now is that if you're going to have an item depend on stuff that isn't a descendant of that item, you declare a variable on a higher level item that captures the necessary information.  the expressions within the item then reference the variable - which is available in scope.</p>",
        "id": 179017274,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1571970909
    },
    {
        "content": "<p>That's a very hard way to go about the problem.</p>",
        "id": 179017340,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571971033
    },
    {
        "content": "<p>The evaluator has an internal stack of the answers it is working with. It can make that available to the enableWhen expression without the need for the author to define variables</p>",
        "id": 179017411,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571971179
    },
    {
        "content": "<p>By stack, do you mean just the ancestors or do you mean all preceding items?</p>",
        "id": 179017717,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1571971696
    },
    {
        "content": "<p>all the containing elements that bring you to the answer your evaluating the enabled-ness of</p>",
        "id": 179017743,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571971786
    },
    {
        "content": "<p>I think that ancestor isn't the right word</p>",
        "id": 179017746,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571971797
    },
    {
        "content": "<p>but maybe doing via variables is better for re-use</p>",
        "id": 179018014,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571972277
    },
    {
        "content": "<p>I don't expect the tool that's rendering the questionnaire to necessarily have a clue which elements are going to be relevant for subsequent enableWhens.  If it's keeping track of anything, it would either have to be all prior items (which seems kinda big/complicated) or all ancestors (which makes my XPath heart happy, but is a capability I'm surprised to hear you proposing)</p>",
        "id": 179018071,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1571972396
    },
    {
        "content": "<p>the engine needs to have the containers (=ancestors) in order to evaluate a normal enable when. It can pass that collection to the expression if we define a way. that's not the same thing as the XPath ancestor thing)</p>",
        "id": 179018139,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571972480
    },
    {
        "content": "<p>Would you care to submit a change request? :)</p>",
        "id": 179018456,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1571973031
    }
]