[
    {
        "content": "<p>Hi all,</p>\n<p>I'm considering performing multiple $extract calls from the same QR, and since it isn't explicitly mentioned in the spec, I wanted to flesh out my rationale here so that we can potentially clarify the spec. </p>\n<p>Bullet one on the extract docs (<a href=\"http://hl7.org/fhir/uv/sdc/2019May/extraction.html#caveats-and-considerations-with-form-population\" target=\"_blank\" title=\"http://hl7.org/fhir/uv/sdc/2019May/extraction.html#caveats-and-considerations-with-form-population\">http://hl7.org/fhir/uv/sdc/2019May/extraction.html#caveats-and-considerations-with-form-population</a>) says: </p>\n<blockquote>\n<p>Extraction is a step that only makes sense to occur once a QuestionnaireResponse is completed.<br>\nBut it doesn't say anything about $extract-ing again after it is complete, though editing a QR after completion is supported (QR.status = amended).</p>\n</blockquote>\n<p>Why do I even want multiple $extract-s?</p>\n<ul>\n<li>Imagine if a user fills out a questionnaire and we extract some resources from it, but there are also some important questions that don't get extracted and just live in the form. The completed form is a needed and useful source of truth in this case. And if we want to allow users to edit those same resources through a consistent UI, we'd need to be able to $extract from this QR again.</li>\n</ul>\n<p>Has anyone run into this before? Considered doing something like this?</p>",
        "id": 188988524,
        "sender_full_name": "Spencer Evans",
        "timestamp": 1582601179
    },
    {
        "content": "<p>In most workflows, the original QR wouldn't be edited once completed.  If there was a need to re-capture the same information at a later date, you might 'populate' from the original QR, but you'd have a new QR with a distinct date (that you could then extract from).  The reason is that you'd want to be able to query all of the responses the users had given over time.  While some resources are intended to evolve continuously (e.g. Condition, AllergyIntolerance), resources like Observation and Questionnaire tend to be frozen once complete.  That doesn't mean you <em>can't</em> have a workflow where the same QR is continuously updated over time, it just means that most implementations would find such a workflow surprising.</p>",
        "id": 188988669,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1582601513
    },
    {
        "content": "<p>Thanks for the response Lloyd, helpful as always :) A couple follow-up questions + thoughts:</p>\n<blockquote>\n<p>In most workflows, the original QR wouldn't be edited once completed.</p>\n</blockquote>\n<p>Agreed! I don't intend for this to be a \"normal\" workflow.</p>\n<blockquote>\n<p>if there was a need to re-capture the same information at a later date, you might 'populate' from the original QR, but you'd have a new QR [...] The reason is that you'd want to be able to query all of the responses the users had given over time.</p>\n</blockquote>\n<p>I agree with the strategy here on a number of axes, but I am less sure about the tactics. How would a series of edited QR's be linked together in such a way that you could present them as related (and presumably just show the most recent to the user, in the base case)? There doesn't seem to be any reference(QuestionnaireResponse) field on the QR StructureDefinition (though extensions are of course always an option). On the other hand, we already have the _history API for showing how a QR has changed over time, if we were to just update the existing one. The QR.status <code>amended</code> code seems to get at this use case as well. </p>\n<p>I do notice that the \"canonical status\" for <code>amended</code> is <code>replaced</code>, which is in support of your idea of linking to a new QR that replaces the \"existing\" one. Do you have recommendations for how to create that link? (an extension?) or would it not be too much of a violation to rely on mutable QR's for the use cases that require updating.</p>",
        "id": 189050201,
        "sender_full_name": "Spencer Evans",
        "timestamp": 1582657674
    },
    {
        "content": "<p>A series of edited versions of a QuestionnaireResponse would be a single instance that happens to have history - you'd have to execute a history operation to see the previous version.  There's no mechanism for a server to have multiple QR instances that share the same id.  (And if the ids are different, then it's not an 'update', it's a new 'create'.)  Amended is the same as it is with Observation.  It's the same instance, but has been changed after it was deemed 'complete'</p>",
        "id": 189051182,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1582658311
    },
    {
        "content": "<p>I think we're on the same page then, thanks Lloyd. </p>\n<p>some quick clarification:</p>\n<blockquote>\n<p>There's no mechanism for a server to have multiple QR instances that share the same id. (And if the ids are different, then it's not an 'update', it's a new 'create'.)</p>\n</blockquote>\n<p>Okay I think I might have misunderstood you originally then. Your comment \"you might 'populate' from the original QR, but you'd have a new QR with a distinct date\" made me think you were advocating for creating new QR's (with their own ID's) for each \"update\". </p>\n<p>I plan to just update a single QR, changing the status to <code>amended</code> upon an edit, and relying on the history API to see previous versions.</p>",
        "id": 189066355,
        "sender_full_name": "Spencer Evans",
        "timestamp": 1582668415
    },
    {
        "content": "<p>In a \"normal\" business flow, you <em>would</em> have a different QuestionnaireResponse each time the user \"filled it out\" - each repetition would be treated as a new response and you'd just be grabbing information from previously filled versions - if that was even appropriate.  For some Questionnaires, you'd want each response to be fresh and un-influenced by prior responses.  However if you're truly updating a single QuestionnaireResponse, then you'd only have one instance, one id and a deep history.</p>",
        "id": 189077453,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1582678806
    }
]