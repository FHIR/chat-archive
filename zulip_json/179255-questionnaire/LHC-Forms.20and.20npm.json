[
    {
        "content": "<p>We are considering ceasing publication of LHC-Forms as a npm package, and just directing people either to download built versions from <a href=\"https://clinicaltables.nlm.nih.gov/lforms-versions\">https://clinicaltables.nlm.nih.gov/lforms-versions</a> or to build it themselves.  The reason for this is that as of version 30, LHC-Forms is now a web-component, which is meant to encapsulate and isolate its resources from the surrounding page, so npm's idea of shared packages with the containing app does not apply anymore.  I think if we published to npm, what we would include there would be the same set of files downloadable from <a href=\"https://clinicaltables.nlm.nih.gov/lforms-versions\">https://clinicaltables.nlm.nih.gov/lforms-versions</a>, i.e. the built files minimized and bundled together with the dependencies, which seems odd for npm.  I am also not sure an \"import\" of those files would work-- you might have to copy them out of node_modules and include them with script tags, just as if you has downloaded them.</p>\n<p>So the question is, is any using the npm package for LHC-Forms for whom switching to downloading the package would be an issue?</p>",
        "id": 273705071,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646166418
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"195344\">@Paul Lynch</span>, so happy you made the jump to web components!  I'd encourage you to keep publishing to npm, since I know many front-end apps are built using it to manage dependencies.  I can imagine wanting to pull in lhc-forms from npm and injecting into an app, which would be much easier to do if it was still on npm.  It looks like your <a href=\"https://github.com/lhncbc/lforms#using-the-lhc-forms-web-component\">current distribution</a> includes all the dependencies and polyfills, but someone using your package on npm might want to bundle in their own.</p>",
        "id": 273790999,
        "sender_full_name": "David Winters",
        "timestamp": 1646219941
    },
    {
        "content": "<p>So I agree it probably doesn't make sense for you to just push your dist folder to npm.  Ideally you would just publish the raw web components and specify the dependencies in your package.json file.  Then it would be up to users to polyfill if they're targeting an older browser.</p>",
        "id": 273791149,
        "sender_full_name": "David Winters",
        "timestamp": 1646220012
    },
    {
        "content": "<p>Also super cool that you're using TypeScript :)</p>",
        "id": 273791454,
        "sender_full_name": "David Winters",
        "timestamp": 1646220186
    },
    {
        "content": "<p>If you're interested in supporting npm, you could try following the approach that SurveyJS takes.  They have the core TS library which they then build for integration with different front-end frameworks (e.g., React, Angular, etc.).  It's these integrations they then publish on npm.  Here's an example <a href=\"https://github.com/surveyjs/survey-library/blob/master/build-scripts/survey-jquery/package.json\">package.json</a> which you can see is just a group of minified files with a single point of entry that you can import into your project.  Their build process looks pretty complicated, but I think for your case it would be much simpler since you just have the WCs and I don't think are doing anything special for specific frameworks.</p>",
        "id": 273792603,
        "sender_full_name": "David Winters",
        "timestamp": 1646220689
    }
]