[
    {
        "content": "<p>Per <a href=\"http://build.fhir.org/ig/HL7/sdc/expressions.html#calculatedExpression\" target=\"_blank\" title=\"http://build.fhir.org/ig/HL7/sdc/expressions.html#calculatedExpression\">the SDC IG</a>, \"The %context variable will be set [for expressions on items].... to the QuestionnaireResponse.item\".    However, if there is no value for the field yet, then the QuestionnaireResponse does not have an item for that field, does it?  I guess I could shove in a temporary value to create the item so the calculatedExpression can have its context (which is really just needed for the linkId).</p>",
        "id": 187580117,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581017323
    },
    {
        "content": "<p>Agree we should clarify that behavior in the spec</p>",
        "id": 187580293,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581017425
    },
    {
        "content": "<p>I could file a JIRA issue, but do you have any thoughts about how it should be clarified?</p>",
        "id": 187584195,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581020024
    },
    {
        "content": "<p>My leaning is to say that the item should be treated as having the 'initial value' if there is one or being empty.  If there's an initialValueExpression, that should be evaluated if the system is capable of doing so.</p>",
        "id": 187588097,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581022770
    },
    {
        "content": "<p>The initialExpression would have the same problem as calculatedExpression.  Conceivably, I could create an empty-valued item node (with its linkId and possibly other empty-valued child item nodes) and give that to the expression to run on.  But, that item would not really be a part of the QuestionnaireResponse.</p>",
        "id": 187589180,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581023443
    },
    {
        "content": "<p>Why not?</p>",
        "id": 187592215,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581025696
    },
    {
        "content": "<p>Because until there is a value, the item is not in the QuestionnaireResponse.  After the expressions run, assuming the expression does not evaluate to empty, there will be a value and the item will be there.  But, the QuestionnaireResponse given to the expression processor has to be generated before the expression runs.</p>",
        "id": 187596518,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581029004
    },
    {
        "content": "<p>The item would exist, just with a null answer? I'll have to read more closely, I'm about to implement this too.</p>",
        "id": 187623876,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581066975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span>   QuestionnaireResponses do not include unanswered items.</p>",
        "id": 187650890,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581090643
    },
    {
        "content": "<p>When persisted, true.  When in memory, they absolutely can.</p>",
        "id": 187683627,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581112249
    },
    {
        "content": "<p>You're right Paul, and maybe as Lloyd mentions we could do it at runtime (which is probably what I implied)</p>",
        "id": 187686829,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581115041
    },
    {
        "content": "<p>Yes, but it's messy.  I have function that produces a QuestionnaireResponse, and before evaluating the expressions, I call that and build a hash from my internal structure to the QuestionnaireResponse items, so I can fetch them for the expressions' context nodes.  I could add some code to the QR generator that optionally allows expression-carrying nodes to be included even if they don't have values.  However, one could construct an expression whose value is dependent on the number of items on the QR, in which case added empty expression nodes could through things off.</p>",
        "id": 187689116,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581117187
    },
    {
        "content": "<p>Maybe the context for an expression whose item has no value should be the Questionnaire item, rather than the QuestionnaireResponse item (which does not really exist yet)?</p>",
        "id": 187689184,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581117248
    },
    {
        "content": "<p>I'd rather be considering absence rather than mixing Q and QR in processing.</p>",
        "id": 187689233,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581117345
    },
    {
        "content": "<p>But I'm not 100% on thinking it through either.</p>",
        "id": 187689285,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581117371
    },
    {
        "content": "<p>Since the only use of the empty QR context item would be to get the linkId to get the corresponding Questionnaire item, it would save some steps.</p>",
        "id": 187690473,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581118550
    },
    {
        "content": "<p>When you're doing populate, you're essentially populating every possible answer with the 'initial' values - even if those happen to be no-answer.  That includes questions that might not even be enabled yet.  When you save, you strip anything that's not answered or is disabled.</p>",
        "id": 187691931,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581120152
    },
    {
        "content": "<p>What if the calculatedExpression computes the number of answered questions by counting the items in the QuestionnaireResponse?  I think that would be a fair thing to do based on the QR spec, but if you've populated every answer, you would get the wrong count.</p>",
        "id": 187852112,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581364665
    },
    {
        "content": "<p>Counting items without checking to see if they've been answered yet would be risky</p>",
        "id": 187852306,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581364801
    },
    {
        "content": "<p>Populating every item would also be inefficient for the step of generating the QR, and also potentially for the evaluation of FHIRPath, and introduces an odd intermediate (and currently unspecified) state of the QR which differs from the what people see as the output.</p>",
        "id": 187854815,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581366571
    },
    {
        "content": "<p>Perhaps we could just clarify the first bullet under <a href=\"http://build.fhir.org/ig/HL7/sdc/expressions.html#fhirpath-and-questionnaire\" target=\"_blank\" title=\"http://build.fhir.org/ig/HL7/sdc/expressions.html#fhirpath-and-questionnaire\">http://build.fhir.org/ig/HL7/sdc/expressions.html#fhirpath-and-questionnaire</a> with, \"While QuestionnaireResponse.item is not normally present for items without answers, when evaluating FHIRPath expressions on items without answers,  the context will be an answerless item with the linkId set to the question's linkId.\"  That leaves it up to the implementation to decide whether to really put empty item nodes in its internal structure or not.</p>",
        "id": 187856350,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581367671
    },
    {
        "content": "<p>If you're doing operation-based pre-pop and you want to populate descendant questions, there's not much choice other than to have empty answer nodes for ancestors.</p>",
        "id": 187859555,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581369792
    },
    {
        "content": "<p>I think you are saying that ancestor items of answered items must exist.  I agree with that.  They do not have answers, but they have child items, so I would not view those as \"empty\".</p>",
        "id": 187859807,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581369935
    },
    {
        "content": "<p>If the ancestor is a question, it has to have an answer element - as the nesting happens inside the answer element for questions</p>",
        "id": 187860399,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581370266
    },
    {
        "content": "<p>Right, because the nested questions are considered part of the \"answer\" (even if the question's input field is blank).  When I wrote \"items without answers\" above, I meant without answers themselves, and without descendant items that have answers.</p>",
        "id": 187861364,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581370859
    },
    {
        "content": "<p>Right.  My leaning is that the logic should behave as though the nodes are there with no answer whether they are sitting there in memory or not.</p>",
        "id": 187861665,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581371045
    },
    {
        "content": "<p>That might be best.  I think there is actually not much use in the Questionnaire.item of an unanswered question as a context, because all it will have is the linkId, and if you are writing an expression on that item, presumably you already know the linkId.  But, the spec should be clarified, because another reasonable interpretation would be to pass a null context.  I'll add a JIRA item.</p>",
        "id": 187862306,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581371491
    },
    {
        "content": "<p><a href=\"http://jira.hl7.org/browse/FHIR-25982\" target=\"_blank\" title=\"http://jira.hl7.org/browse/FHIR-25982\">J#25982</a></p>",
        "id": 187866716,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581374630
    },
    {
        "content": "<p>A null context might make sense. As there is no answer with that linkId.</p>",
        "id": 187891911,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581409707
    },
    {
        "content": "<p>Have you got some sample questionnaires for these types of things?</p>",
        "id": 187891929,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581409738
    },
    {
        "content": "<p>And we can get the same implementation.</p>",
        "id": 187891939,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581409747
    },
    {
        "content": "<blockquote>\n<p>Have you got some sample questionnaires for these types of things?</p>\n</blockquote>\n<p>This was prompted by my working on a questionnaire in which I tried use the item's linkId in a calculatedExpression, to avoid hard-coding it, e.g.: .  %questionnaire.item.where(linkId= %context.linkId).  That questionnaire is still a work in progress, but in the short term I will just hard-code the linkId value.</p>",
        "id": 187957369,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1581456372
    },
    {
        "content": "<p>Maybe we should be adding test questionnaires into a folder in the SDC IG.<br>\nDo you have committer rights there too?</p>",
        "id": 188001931,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581507422
    },
    {
        "content": "<p>Or just load them onto our public servers?</p>",
        "id": 188001951,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1581507448
    },
    {
        "content": "<p>Anybody should be able to submit a pull request - and if anyone else wants committer privileges, we can certainly make that happen too.  Examples are certainly welcome :)</p>",
        "id": 188017345,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581519646
    }
]