[
    {
        "content": "<p>I'd like to assert that a server must support certain extensions using a capability statement. How would I make that assertion in the CapabilityStatement? I don't see anything that indicates where extensions should be listed...<br>\nAlso, CapabilityStatement.rest.resource.type is limited to the ResourceType value set, which <em>does not</em> include \"Extension\".</p>",
        "id": 177764412,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570662680
    },
    {
        "content": "<p>I support extension X isn't a useful assertion.  What really matters is \"I support extension X in locations A, B and C\" - and that declaration is exposed through CapabilityStatement.rest.resource.profile (and/or in the profiles for messages or documents if those are the paradigms you're using.)</p>",
        "id": 177766661,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1570665059
    },
    {
        "content": "<p>so, I should put extensions that apply to Organization resources within CapabilityStatement.rest.resource[type=Organization].supportedProfile?</p>",
        "id": 177822836,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570722174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 177825276,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570723618
    },
    {
        "content": "<p>I think what Lloyd is saying you assert the extensions in the strucdef and assert the profile in the capstatements using conformance expectations extensions.</p>",
        "id": 177825868,
        "sender_full_name": "Eric Haas",
        "timestamp": 1570723967
    },
    {
        "content": "<p>ok, got it... that was the other option I was thinking</p>",
        "id": 177827717,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570725067
    },
    {
        "content": "<p>wanted to make sure, though</p>",
        "id": 177827719,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570725069
    },
    {
        "content": "<p>so CapabilityStatement asserts the core profiles for resources</p>",
        "id": 177827727,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570725077
    },
    {
        "content": "<p>and the core profiles for resources assert the extensions</p>",
        "id": 177827732,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570725083
    },
    {
        "content": "<p>I still imagine it would be good for the CapabilityStatement to be able to assert what extensions the server must support generally speaking</p>",
        "id": 177827760,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570725101
    },
    {
        "content": "<p>but, understand that the CapabilityStatement may not be able capable of that,  right now</p>",
        "id": 177827772,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570725113
    },
    {
        "content": "<p>The StructureDefinition that creates the Extension is what is declared in a CapabilityStatement.rest.resource.supported. That StructureDefinition is the extension. So it is a single step.  Use of an ImplementationGuide should be seen as MORE specific, as it casts that StructureDefinition within a use-context. This is also supported through CapabilityStatement.implementationGuide.      right?</p>",
        "id": 177828607,
        "sender_full_name": "John Moehrke",
        "timestamp": 1570725675
    },
    {
        "content": "<p>Sean, are you asking about CapabilityStatement in Instance, Capability, or Requirements?</p>",
        "id": 177828984,
        "sender_full_name": "John Moehrke",
        "timestamp": 1570725938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> that seems like it conflicts with what <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> was saying...</p>",
        "id": 177829637,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570726369
    },
    {
        "content": "<p>CapabilityStatement as Requirements</p>",
        "id": 177829662,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570726386
    },
    {
        "content": "<p>I don' think Eric is saying anything different. He is just using the word \"Profile\" as a proxy for the StructureDefinition where you have defined the extension. Unfortunately FHIR community has taken on this use of the word \"Profile\".</p>",
        "id": 177830314,
        "sender_full_name": "John Moehrke",
        "timestamp": 1570726797
    },
    {
        "content": "<p>So you are defining an ImplementationGuide, an actors within using CapabilityStatement (Requirements), thus yes you should declare for each .rest.resource exactly where the extensions (StructureDefinition) are to be implemented (.supported)</p>",
        "id": 177830443,
        "sender_full_name": "John Moehrke",
        "timestamp": 1570726863
    },
    {
        "content": "<p>so, then, I again ask: where should the StructureDefinition for an Extension for an Organization go in the CapabilityStatement?</p>",
        "id": 177833058,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570728571
    },
    {
        "content": "<p>there is no CapabilityStatement.rest.resource.type of \"Extension\"</p>",
        "id": 177833072,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570728579
    },
    {
        "content": "<p>so, does it that extension belong under CapabilityStatement.rest.resource[type=Organization].supportedProfile?</p>",
        "id": 177833093,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570728600
    },
    {
        "content": "<p>In general, there is no 'general' support for an extension :)   Servers don't arbitrarily support \"data absent reason\".  They typically support it in specific resources at specific locations.  CapabilityStatement.rest.resource.profile defines exactly what elements (including extensions) your server can handle.</p>",
        "id": 177836609,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1570730741
    },
    {
        "content": "<p>supportedProfile is more about what kind of profiles you can search for</p>",
        "id": 177836636,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1570730756
    },
    {
        "content": "<blockquote>\n<p>supportedProfile is more about what kind of profiles you can search for</p>\n</blockquote>\n<p>I would not have read it that way... which points out the folly of the word \"support\" in a standard.</p>",
        "id": 177838492,
        "sender_full_name": "John Moehrke",
        "timestamp": 1570731759
    },
    {
        "content": "<p>Sean, are you speaking of an extension that is defined as being applicable anywhere; where you want to define in your IG that that extension is required to be supported in Observation?</p>",
        "id": 177838607,
        "sender_full_name": "John Moehrke",
        "timestamp": 1570731819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> that is one scenario</p>",
        "id": 177846470,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570736563
    },
    {
        "content": "<p>what I'm gathering is that there is generally no guidance on whether extensions should be asserted in the CapabilityStatement</p>",
        "id": 177846549,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570736628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191505\">@Sean McIlvenna</span> Why would you want to assert support for extensions generally rather than point to exactly where they're supported?</p>",
        "id": 177847117,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1570737050
    },
    {
        "content": "<p>how about scenarios where the extension is allowed globally? ex: any resource?</p>",
        "id": 177847706,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570737467
    },
    {
        "content": "<p>Any resource, any location?  I guess that's theoretically possible, but I haven't actually seen a situation where that was true of certain extensions but not true of all</p>",
        "id": 177847825,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1570737520
    },
    {
        "content": "<p>So, if I have an extension that is used by two different Patient profiles, at the top of both Patient resources (not nested within its elements), how should I assert that in the CapabilityStatement, if at all?</p>",
        "id": 177851256,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570739795
    },
    {
        "content": "<p>again, I go back to one of my original statements... it doesn't sound like there was ever any intent to assert extensions in the CapabilityStatement</p>",
        "id": 177851285,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570739827
    },
    {
        "content": "<p>Correct, there was never an intent for that - and to my knowledge, there's been no use-case presented for doing so.</p>\n<p>With CapabilityStatement, there's only an ability to define a single Patient profile that reflects what patient data the system is capable of storing.  I.e. either you support Patient.telecom or you don't.  Same thing with the US-race extension.  If there are business rules where you support the concept sometimes, but not other times, that nuance isn't really exposed other than as constraints and/or documentation.</p>",
        "id": 177852485,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1570740736
    },
    {
        "content": "<p>how about CapStatement.rest.resource.type = StructDef then define all the extensions there as supported profiles?</p>",
        "id": 177855757,
        "sender_full_name": "Eric Haas",
        "timestamp": 1570743140
    },
    {
        "content": "<p>an interesting idea...</p>",
        "id": 177860909,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1570747508
    },
    {
        "content": "<p>That would mean that you supported StructureDefinitions being posted to or read from and searched from your server - it wouldn't say anything about extensions appearing in instances</p>",
        "id": 177860911,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1570747509
    }
]