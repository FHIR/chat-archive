[
    {
        "content": "<p>For people doing non-HL7 IGs, I've set up a GitHub workflow to do IG auto-builds and publish to GitHub pages outside the <a href=\"http://build.fhir.org\">build.fhir.org</a> infrastructure. It leverages the ig-publisher-base docker image. There are likely a few more tweaks I need to make, but I've documented the process <a href=\"https://www.argentixinfo.com/archives/156\">here</a>.<br>\nThanks to <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> for helping me get started on this.</p>",
        "id": 208745180,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1598992798
    },
    {
        "content": "<p>why is this good?</p>",
        "id": 208746081,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598993277
    },
    {
        "content": "<p>It shares tooling and provides automation to give people more options for working with the fhir publication infrastructure.</p>",
        "id": 208747804,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598994048
    },
    {
        "content": "<p>for example some organizations might want to develop guides that they publish entirely internally, and it would not be fair to expect they would leverage a universally readable <a href=\"http://build.fhir.org\">build.fhir.org</a> infrastructure.</p>",
        "id": 208747886,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598994072
    },
    {
        "content": "<p>At the same time, it would be great to make sure they are able to leverage the existing tool chain and get the same results</p>",
        "id": 208747918,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598994088
    },
    {
        "content": "<p>that's fair. What I can tell you is:</p>\n<ul>\n<li>this page <a href=\"https://fhir.github.io/auto-ig-builder/builds.html\">https://fhir.github.io/auto-ig-builder/builds.html</a> is incredibly useful, and it would be sad for it to be missing stuff</li>\n<li>there's a view amongst some (including on the HL7 side) that <a href=\"http://build.fhir.org\">build.fhir.org</a> is only for HL7 IGs and I don't want to give that weight</li>\n<li>I didn't follow the justification about IGs being removed from <a href=\"http://build.fhir.org\">build.fhir.org</a> after 30 days - that doesn't happen, except for branches?</li>\n</ul>",
        "id": 208748232,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598994207
    },
    {
        "content": "<p>The FHIR IG auto-build is great, but:</p>\n<ul>\n<li>How do I get my IG off of the server after the build? I don't want to use my local build for the source of a published version--I'd prefer a controlled environment, but I don't know how to download the entire published IG from <a href=\"http://build.fhir.org\">build.fhir.org</a>.</li>\n<li>I see this as the first step toward being able to automatically publish milestone releases linked to code branches (or labels). This would give a fully automated publication system without need for manual steps.</li>\n</ul>\n<p>I don't know where I'd heard the 30-day deletion. I'll remove the comment if it is wrong. \"Except for branches\" -- does that mean builds from master are kept, but not others?</p>",
        "id": 208751181,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1598995609
    },
    {
        "content": "<p>Currently we delete branches on the main fhir build but I don't think we delete anything from implementation guides based on time elapsed. Of course we do overwrite old branch builds when new content is committed to those branches.</p>",
        "id": 208751933,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598996095
    },
    {
        "content": "<p>well, publishing is a different thing indeed. We do a local build for publishing, and you currently need to, I agree. It seems like overkill to set up a different publishing paradigm just for that</p>",
        "id": 208752165,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598996230
    },
    {
        "content": "<p>have you looked at the publishing process we currently use? It's quite manual, but the manual stuff is very much around QA</p>",
        "id": 208752310,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598996323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191380\">@Elliot Silver</span> thanks so much for writing this up. I learned something, or at least I have questions :-) Without mounting any directories from the host into the docker image, how do you ensure that the outputs generated in one step are available mounted into the container in the next step? There must be some magic under the hood?</p>",
        "id": 208752603,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598996488
    },
    {
        "content": "<p>I did look at the current publication process, but (and this ties back to an earlier discussion), it wasn't easy to figure out which steps were HL7-specific, and which were necessary for anyone publishing.</p>",
        "id": 208752723,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1598996556
    },
    {
        "content": "<p><a href=\"https://docs.github.com/en/actions/creating-actions/dockerfile-support-for-github-actions#workdir\">https://docs.github.com/en/actions/creating-actions/dockerfile-support-for-github-actions#workdir</a> is the answer to my question, I think. So it's not using the expected working directory but rather one supplied by the GitHub actions framework. Cool!</p>",
        "id": 208752820,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598996631
    },
    {
        "content": "<p>well, perhaps we could clarify that, and more generally, the documentation needs work (as always). And there's not really a set answer - there's certain things about the way the HL7 publishes that are not necessary but are an extremely good idea. So what is HL7 specific? The only truly HL7 specific stuff is the the HL7 publishing requirements</p>",
        "id": 208752933,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598996677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>  Exactly, and the whole action is being run from an ubuntu image that hosts the complete process and launches the docker images from within it. The ubuntu drive persists across steps.</p>",
        "id": 208753009,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1598996726
    },
    {
        "content": "<p>I don't know which parts are HL7 specific--that was part of my problem. I suspect when I get to actually doing a milestone build, I'll have to figure that out.</p>",
        "id": 208753203,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1598996842
    },
    {
        "content": "<p>so I was thinking about this. The first problem is that you can't publish the <a href=\"http://build.fhir.org\">build.fhir.org</a> version - it's to do with the internal identification of what is generated - it's always and specifically identified internally as the ci-build output. And when you build locally, that is also labelled internally as local. </p>\n<p>There's a special parameter to generate a build intended for publication</p>",
        "id": 208753520,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598997007
    },
    {
        "content": "<p>Perhaps a useful analogy here is a system offered by Docker Hub called a \"trusted build\" -- the idea is that instead of uploading your own images to Docker hub, you can ask Docker hub to watch your GitHub repository and build an image automatically following your own script anytime the content changes. This helps your users trust that the images you publish don't have random extra stuff hidden in them.</p>",
        "id": 208754102,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598997369
    },
    {
        "content": "<p>Ideally any fhir publication would be created automatically from a repository anytime certain tags were applied.</p>",
        "id": 208754122,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598997390
    },
    {
        "content": "<p>Assuming of course the various kinds of checks have passed.</p>",
        "id": 208754134,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598997402
    },
    {
        "content": "<p>That way has an author you can declaratively state that it's time for a commit to be picked up as a publication, simply by playing a tag .</p>",
        "id": 208754160,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598997424
    },
    {
        "content": "<p>I recognize that's probably a ton of complexity that will make this impractical for hl7, but at least we can start to match things in that direction...</p>",
        "id": 208754182,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598997448
    },
    {
        "content": "<p>well, we could. The auto-ig-build could add the requisite parameters under the right conditions, and then it could provide for a zip of the output to be downloaded.</p>",
        "id": 208754269,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598997498
    },
    {
        "content": "<p>but I don't exactly follow the tag thing, and how it inter-relates with the PR process</p>",
        "id": 208754302,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598997531
    },
    {
        "content": "<p>but we could make that change and remove the need for a local build from our publishing process</p>",
        "id": 208754369,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598997595
    },
    {
        "content": "<p>I think it's a distinct thing from the pull request process -- a tag can be applied to any commit on a branch. Then various systems that listen for changes can look for new tags. So you can embed some semantics in these tags and have new tags like <code>v1.2.3</code> trigger certain actions, like a build and test suite run and publication to npm registry...</p>",
        "id": 208754463,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598997652
    },
    {
        "content": "<p>I think Josh means that if I label a build with \"2020Sep\" it would recognize it as a milestone build.</p>",
        "id": 208754502,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1598997681
    },
    {
        "content": "<p>so if a commit makes it into 2 different PRs, which PR is the actual right one?</p>",
        "id": 208754548,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598997714
    },
    {
        "content": "<p>or if you build off master, because a tag is present, when does it stop being present?</p>",
        "id": 208754629,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598997754
    },
    {
        "content": "<p>The PR is the update of the content. The labelling is the trigger for a publication build.</p>",
        "id": 208754635,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1598997756
    },
    {
        "content": "<p>I suspect you'd want to branch off main for each milestone so that you can do later technical corrections.</p>",
        "id": 208754737,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1598997821
    },
    {
        "content": "<p>so a branch for the publication, and the branch carries the tag? That's something I can understand</p>",
        "id": 208754897,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598997914
    },
    {
        "content": "<p>Yes that is correct. The branch might eventually advance past the tag; the tag is immutable.</p>",
        "id": 208755025,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598997988
    },
    {
        "content": "<p>That's why I say that technically the tag is attached to a commit rather than to a branch.</p>",
        "id": 208755048,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598998003
    },
    {
        "content": "<p>Fundamentally in git, tags and branches are both just ways to label a specific commit; but tags are best understood as immutable, whereas branches are typically advanced along to the newest commit in a particular line of work.</p>",
        "id": 208755189,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598998110
    },
    {
        "content": "<p>clearly my understanding of git is deficient. If you tag master, how is that evident to someone who is attached to master?</p>",
        "id": 208755369,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598998243
    },
    {
        "content": "<p>because I don't see how you 'tag a commit'.</p>",
        "id": 208755469,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598998311
    },
    {
        "content": "<p>They are listed on the same pulldown as the branches.<br>\n<a href=\"/user_uploads/10155/T8liTQfGi98MIjYqVISb5IH5/Screen-Shot-2020-09-01-at-3.11.40-PM.png\">Screen-Shot-2020-09-01-at-3.11.40-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/T8liTQfGi98MIjYqVISb5IH5/Screen-Shot-2020-09-01-at-3.11.40-PM.png\" title=\"Screen-Shot-2020-09-01-at-3.11.40-PM.png\"><img src=\"/user_uploads/10155/T8liTQfGi98MIjYqVISb5IH5/Screen-Shot-2020-09-01-at-3.11.40-PM.png\"></a></div>",
        "id": 208755563,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1598998344
    },
    {
        "content": "<p>Right. I had thought they were pretty much the same as branches.</p>",
        "id": 208755627,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598998375
    },
    {
        "content": "<p>And at the top right of that image, obscured by some floating text, is how you create a tag.</p>",
        "id": 208755699,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1598998431
    },
    {
        "content": "<p>so you actually tag a particular version... Josh, does that prompt a build through the ci-build?</p>",
        "id": 208755862,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598998524
    },
    {
        "content": "<p>Definitely maybe. <br>\nI think the standard way of setting up the auto-build webhook is to only kick it off on a push, but there is an option to set the webhook to kick off on a label action too. The payload that is sent with the webhook probably has enough content to be able to identify what the trigger was (and what the label is).</p>",
        "id": 208756855,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1598999133
    },
    {
        "content": "<p>Currently the CI build infrastructure pays no attention to tags. But of course it could, if we want to adopt some conventions around publication. Right now the CI infrastructure is all about preview</p>",
        "id": 208756945,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598999189
    },
    {
        "content": "<p>if it would build on a tag, and provide the tag to the IG publisher (<code>-tag v3.1.1</code>), then I could do things differently and generate as if it's a real publication. And then, if the ci-build provides a way to download a .zip, I would rewrite the process to use that zip)</p>",
        "id": 208757138,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598999320
    },
    {
        "content": "<p>Cool. These seem like ideas worth pursuing.</p>",
        "id": 208757178,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1598999360
    },
    {
        "content": "<p>note, though that this brings me to a different problem - there's a set of QA requirements for <em>publication</em> that are not imposed for regular builds, and we typically have to do a round of editing to finish those issues off. And as I understand this workflow, tagging is not a proposal to start that workflow, but a declaration it's finished. So I'm nervous about sorting that workflow out</p>",
        "id": 208757266,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598999409
    },
    {
        "content": "<p>at least I can probably fail the build if they're not met and the tag is passed to the IG publisher.</p>",
        "id": 208757317,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598999443
    },
    {
        "content": "<p>Definitely seems like ideas worth pursuing.<br>\nI wonder if there is a better way than a zip (or at least a way for the process to get notification of the availability of the zip), so that the content can be auto published to a website?</p>\n<p>I've seen various QA tasks, like security analysis, included in workflows. If the workflow fails, publication fails. You could also set up publication to require the presence of a particular file or similar that flags that the review has been done.</p>",
        "id": 208757753,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1598999717
    },
    {
        "content": "<p>I don't know what happens if you label a commit as \"R6\" but then decide that the commit has errors. I suspect you want to do all the touch-up etc. and validate before doing the label.</p>",
        "id": 208757895,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1598999821
    },
    {
        "content": "<blockquote>\n<p>so that the content can be auto published to a website</p>\n</blockquote>\n<p>Let's get to that later. It's a big step for me given how much work we have to do around getting things right for publication</p>",
        "id": 208758331,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599000160
    },
    {
        "content": "<p>very few editors at all understand package-list.json, for instance. but that's critical to the actual publishing process</p>",
        "id": 208758387,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599000207
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> and <span class=\"user-mention\" data-user-id=\"191380\">@Elliot Silver</span> I just talked to <span class=\"user-mention\" data-user-id=\"248736\">@Mark Iantorno</span> about this, who runs the build pipelines for all the java code and will eventually take over all the build processes for the FHIR stuff.</p>\n<p>We don't think that a tag based process works for this; the problem is that fundamentally you're taking an action (\"check and publish this version\"), and the tag is the outcome (\"we just published this version\"). So we think that the right way to set this up is to create a pipeline in (e.g.) azure that runs the checks and executes the publishing, and that tags the release as part of the process.</p>",
        "id": 209441256,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599597574
    },
    {
        "content": "<p>OK. I don't know enough of the details of doing automated deployments to know how others handle this. It <em>seems</em> like it should be possible, but I'll defer to you and Mark.</p>",
        "id": 209443220,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1599598613
    },
    {
        "content": "<p>Sure, either of these is good, and if you get your tag semantics right they're not exclusive. For example, you might have a tag meaning \"this is a candidate for 1.2 publication\" and the pipeline can pick it up, run checks, publish, and apply a tag meaning \"this is memorialized as version 1.2\"</p>",
        "id": 209456292,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599607668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> I'm still running the webhook in parallel with my action. My action is triggered by a commit on the master branch, and ends up committing the generated IG on the gh-pages branch. The webhook build seems to watch for a commit on any branch, and is thus doing a build on master and a build on gh-pages for every commit. The build on gh-pages will obviously fail, since the content isn't IG source. Is it possible to get the webhook auto-build to abort if, for example, there is a \"no-autobuild\" file in the branch root directory?</p>",
        "id": 209467674,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1599621101
    },
    {
        "content": "<p>I assume your desired behavior is to only build the master branch, and not other random branches that would overwrite the master branch content?</p>",
        "id": 209467733,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599621182
    },
    {
        "content": "<p><a href=\"https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestbranchestags\">https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestbranchestags</a> shows how you can specify one or more branches explicitly; just leave the GitHub pages Branch out of this list</p>",
        "id": 209467811,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599621292
    },
    {
        "content": "<p>Well, \"only build the master branch\" is equivalent in my project to \"not build the gh-pages branch\" since I only have two branches. I'm not so worried about overwriting the content, as I am ...</p>",
        "id": 209467818,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1599621306
    },
    {
        "content": "<p>... about triggering an auto-build with known content that will fail.</p>",
        "id": 209467829,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1599621332
    },
    {
        "content": "<p>Fair enough. You can have a policy of defaulting to \"always build\" and skipping the pages branch or default to \"never build\" and only building if it's master</p>",
        "id": 209467832,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599621341
    },
    {
        "content": "<p>That link is for a workflow actions I'm authoring. I can deal with that.</p>",
        "id": 209467878,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1599621378
    },
    {
        "content": "<p>It's the webhook that calls <a href=\"https://us-central1-fhir-org-starter-project.cloudfunctions.net/ig-commit-trigger\">https://us-central1-fhir-org-starter-project.cloudfunctions.net/ig-commit-trigger</a> that I have no control over.</p>",
        "id": 209467893,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1599621422
    },
    {
        "content": "<p>Ohh, I understand what you're talking about now. You don't want to have the centralized Auto builder try to build your gh-pages branch.</p>",
        "id": 209467912,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599621478
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 209467980,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1599621518
    },
    {
        "content": "<p>Hopefully this is not causing you any actual problems, but I agree it would be nice to provide some way to opt out.</p>",
        "id": 209467983,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599621524
    },
    {
        "content": "<p>in general you wouldn't to build the gh-pages branch but I think people starting out would find simply being ignored because their configuration is wrong deeply disorientating</p>",
        "id": 209468008,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599621556
    },
    {
        "content": "<p>No, not causing problems. Just an extra failed notification in committers/notification.</p>",
        "id": 209468012,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1599621570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> agree, which is why I suggested the explicit act of adding a file to the root directory a branch you didn't want built.</p>",
        "id": 209468078,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1599621639
    },
    {
        "content": "<p>Cool. If you're feeling adventurous, the place to add logic is at <a href=\"https://github.com/FHIR/auto-ig-builder/blob/master/images/ig-build/builder/builder.py#L39\">https://github.com/FHIR/auto-ig-builder/blob/master/images/ig-build/builder/builder.py#L39</a> -- otherwise if you don't mind creating an issue on the repository to track this, that would be lovely.</p>",
        "id": 209468096,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599621682
    },
    {
        "content": "<p>Thanks. Let me take a look.</p>",
        "id": 209468152,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1599621726
    },
    {
        "content": "<p>I might just do an explicit filter to test for the GitHub pages Branch rather than a special \"no build\" file, to start.</p>",
        "id": 209468153,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1599621736
    },
    {
        "content": "<p>I'm late picking this up too, I have 3 internal projects setup now with CI through publishing in Azure using docker images for build and some custom release actions.<br>\nIn my case each official release ends up with the output in git too under a versions folder.<br>\nThe release prep step runs through all builds and updates the links based on package-list.json I assume like the hl7 ones do.</p>",
        "id": 210119178,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1600171165
    },
    {
        "content": "<p>To get the output from the docker image, I mount a folder into it for both the package cache and output folder.</p>",
        "id": 210119288,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1600171243
    },
    {
        "content": "<p>I should write this up on my public blog too.</p>",
        "id": 210119320,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1600171273
    },
    {
        "content": "<p>This is one of the guides produced by it. <br>\n<a href=\"https://fhir.medicationknowledge.com.au/\">https://fhir.medicationknowledge.com.au/</a></p>",
        "id": 210119503,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1600171419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191380\">@Elliot Silver</span>  Two questions:<br>\n1) Is the docker approach faster than the alternative of installing jekyl and downloading the ig publisher jar on each invocation?<br>\n2) Does your recipe build all branches (similar to the HL7 build system), which I've found to be very useful.</p>",
        "id": 210268872,
        "sender_full_name": "Saul Kravitz",
        "timestamp": 1600266241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215604\">@Saul Kravitz</span> Sorry for the delay responding.</p>\n<ol>\n<li>My Docker approach uses the image Josh has prepared, which already has jekyl in it, and it downloads the IG publisher each time it is run. I think it is slower than the HL7 auto-build, which I believe stays alive between invocations.</li>\n<li>The action I wrote only looks for commits to the master branch, but could easily be extended for any branch, with the caveat that the output of the build is committed to the gh-pages branch, so you don't want changes to that branch to trigger build.</li>\n</ol>",
        "id": 210461426,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1600383385
    },
    {
        "content": "<blockquote>\n<p>I think it is slower than the HL7 auto-build, which I believe stays alive between invocations.</p>\n</blockquote>\n<p>Nope -- they're both based on docker containers that spin up just-in-time. Both download the publisher jar every time, too.</p>",
        "id": 210474242,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1600397433
    },
    {
        "content": "<p>(The auto-build version <em>is</em> on a much beefier VM than Github Actions offers by default, so it probably does run faster...)</p>",
        "id": 210474253,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1600397462
    },
    {
        "content": "<blockquote>\n<p>output of the build is committed to the gh-pages branch,</p>\n</blockquote>\n<p>It might be a neat enhancement to make branch builds get committed to subdirectories of the <code>gh-pages</code> build, to preserve content.</p>",
        "id": 210474278,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1600397507
    },
    {
        "content": "<blockquote>\n<p>It might be a neat enhancement to make branch builds get committed to subdirectories of the <code>gh-pages</code> build, to preserve content.</p>\n</blockquote>\n<p>Agree. However the action I'm leveraging doesn't support that right now. There is an existing Github (issue)[https://github.com/peaceiris/actions-gh-pages/issues/455] for it, and I've added our use case, but I don't know what sort of development schedule they are on.</p>",
        "id": 210556353,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1600452829
    }
]