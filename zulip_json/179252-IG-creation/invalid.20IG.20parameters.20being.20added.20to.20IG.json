[
    {
        "content": "<p>Using IG v1.1.84 with FHIR version 4.0.1, I get an IG resource that has definition.parameters with codes of 'path-resource', 'path-pages', and 'path-tx-cache'.<br>\nwith FHIR version 4.1.0, I get an IG resource that has invalid <a href=\"http://definition.parameter.codes\">definition.parameter.codes</a>: path-liquid, path-qa, path-temp, path-output, apply-jurisdiction, etc.</p>\n<p>In both cases, my input IG is the same and doesn't have those codes.  There appears to be some fhir version-specific code that causes these parameters to be output even though they are invalid.</p>",
        "id": 259899562,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1635790501
    },
    {
        "content": "<blockquote>\n<p>I get an IG resource</p>\n</blockquote>\n<p>where?</p>",
        "id": 259918578,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1635799475
    },
    {
        "content": "<p>The parameters get inserted by the template process.  However, I thought we had a mechanism so the process didn't choke on them...</p>",
        "id": 259924415,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1635802348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  the fhir-spl guide.  I’m just switching it over to use R4B and encountered those errors.  It’s in the IG that gets produced in output.</p>\n<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> the validator is complaining about all the codes.  I would assume that the templates are the same whether I use 4.0.1 or 4.1.0 so it seems something else isn’t stripping them?</p>",
        "id": 259943449,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1635816559
    },
    {
        "content": "<p>it's in the input or the output?</p>",
        "id": 259943514,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1635816615
    },
    {
        "content": "<p>The template puts the content in the input.</p>",
        "id": 259945516,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1635818900
    },
    {
        "content": "<p>In the output.  When I look out the output/ig.json, all of the improper codes are there.  I didn’t look in the temp but my input Ig doesn’t have them</p>",
        "id": 259946006,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1635819551
    },
    {
        "content": "<p>well, then it's not going to be valid. That's according to the specification itself. It's not clear to me what I should do about it</p>",
        "id": 259946101,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1635819654
    },
    {
        "content": "<p>What I don’t understand is why I’m getting a different IG depending on which fhirVersion I specify.  Why would that matter?</p>",
        "id": 259946676,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1635820325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> is there code in the templates that depends on fhirVersion that might be causing this?</p>",
        "id": 259946710,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1635820373
    },
    {
        "content": "<p>I don't believe so.  To be honest, I'm not sure why it wasn't complaining before.</p>",
        "id": 259946913,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1635820600
    },
    {
        "content": "<p>Out of curiosity, do you get the same issue if you try building locally with a publisher from say a month or so ago?</p>",
        "id": 259948633,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1635822200
    },
    {
        "content": "<p>I’ll try that later.  Just to recap though, specifying 4.0.1 doesn’t give the invalid codes in the Ig while 4.1.0 does.</p>",
        "id": 259949086,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1635822748
    },
    {
        "content": "<p>Ah.  Maybe we do something special for 4.0 and earlier, but the builder assumes that &gt; 4.0.x is an R5 IG and thus all is good.  And you're the first author of an R4B IG.</p>",
        "id": 259949181,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1635822869
    },
    {
        "content": "<p>Troublemaker... ;)</p>",
        "id": 259949183,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1635822875
    },
    {
        "content": "<p>I take pride in being a troublemaker and pushing the envelope but I <em>think</em> that I got those errors when I put 4.6.0 first.</p>",
        "id": 259949344,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1635823132
    },
    {
        "content": "<p>That'd be super weird, because R5 doesn't constrain the set of parameters - it's an unbound string</p>",
        "id": 259953741,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1635829372
    },
    {
        "content": "<p>yes, you're right.  So temp IG has those parameters for both 4.0.1 and 4.1.0, but 4.0.1 somewhere turns the invalid coded parameters into extensions while 4.1.0 doesn't</p>",
        "id": 259954122,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1635829862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> do you have a potential fix to this that I could try?</p>",
        "id": 260087626,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1635911929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> The issue is that VersionUtilities.isR4Ver() determines whether something is an R4 version based on whether the version starts with 4.0 - which means that 4.1.x releases aren't included, which means that R4B stuff is not converted down to R4 from the R5 version that we use internally.  Given that (I believe) we don't convert any of the resources that change in R4B, I <em>think</em> it should be safe to change this logic to return true if the version starts with 4.0 <em>or</em> 4.1.  Thoughts?</p>",
        "id": 260090930,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1635916551
    },
    {
        "content": "<p>no, don't do that. Because it does matter very much in some places. Instead, add a isR4orR4BVer, and call that where this decision is made</p>",
        "id": 260090991,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1635916604
    },
    {
        "content": "<p>The decision is made when spitting out resources - there's no special processing for the ImplementationGuide</p>",
        "id": 260092147,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1635918340
    },
    {
        "content": "<p>okay, <span class=\"user-mention\" data-user-id=\"191415\">@Giorgio Cangioli</span> and I have IGs that based on R4B and there might be others.  I'm now actively working on this IG and the vast set of errors that are being generated are making it hard to see the real errors that I'm injecting into the IG.  Is there something we can do to fix this issue that R4B is considered R5 when spitting out resources?  (<span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>)</p>",
        "id": 262353165,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1637603139
    },
    {
        "content": "<p>they'll go away next release</p>",
        "id": 262984963,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1638178902
    },
    {
        "content": "<p>Thx grahame</p>",
        "id": 263012995,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1638195151
    }
]