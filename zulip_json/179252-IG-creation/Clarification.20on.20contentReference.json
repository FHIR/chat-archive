[
    {
        "content": "<p>I'd like to ensure that we are handling <code>contentReference</code> correctly.  There are two points in the wording of the <a href=\"http://hl7.org/fhir/R4/elementdefinition-definitions.html#ElementDefinition.contentReference\" target=\"_blank\" title=\"http://hl7.org/fhir/R4/elementdefinition-definitions.html#ElementDefinition.contentReference\">spec documentation</a> that we'd like clarified.</p>\n<p>The <em>definition</em> says:</p>\n<blockquote>\n<p>Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.</p>\n</blockquote>\n<p>The <em>comment</em> says:</p>\n<blockquote>\n<p>ContentReferences can only be defined in specializations, not constrained types, and they cannot be changed and always reference the non-constrained definition.</p>\n</blockquote>\n<p>We find the current wording a little confusing, as the <em>definition</em> implies that \"rules\" (including cardinality constraints and bindings) should be \"brought over\" -- but the <em>comment</em> implies that \"contraints\" should not be brought over (i.e., contentReferences \"always reference the non-constrained definition\").  We're not sure if we're misunderstanding the definition (e.g., is it actually referring to \"all the rules\" on the element w/ the <em>contentReference</em>, not the <em>pointed-to</em> element?), or if we're misunderstanding what is meant by the \"non-constrained definition.\"</p>",
        "id": 187834376,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1581353902
    },
    {
        "content": "<p>So... Let's say a profile on <code>Questionnaire</code> has some constraints on <code>item</code> -- say a required <code>extension</code> and a binding on <code>code</code>.  Does <code>item.item</code> inherit those constraints or not?  We think the intent is that it does <em>not</em>.  We think that the proper way to think of contentReferences is that they start w/ the unconstrained definition from the base FHIR resource, and then retain any constraints/definitions that were put on the element that contains the <code>contentReference</code>.  Any constraints in the <em>profile</em> on the original element <em>pointed to</em> by the contentReference are <em>not</em> inherited -- as the context of the contentReference may be quite different than the original occurrence in the profile.  Is that right?</p>",
        "id": 187834841,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1581354168
    },
    {
        "content": "<p>It's a bit of a mess - as there are constraints that apply to the 'type' and others that apply to the 'element'.  We'd like the former to apply to all uses and the latter to not carry across.  Unfortunately we don't have a mechanism to differentiate.  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, do you remember where we ended with this?</p>",
        "id": 187839526,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1581357239
    },
    {
        "content": "<p>I'm not sure that the type/element thing matters here.</p>",
        "id": 187851954,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581364551
    },
    {
        "content": "<p>I'm not actually sure what the answer is (or should be). The implication of the rules cited is that <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>  is right, but then I'm not sure how to get re-use in a profile - I can't remember whether we discussed that or not</p>",
        "id": 187852098,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581364648
    },
    {
        "content": "<blockquote>\n<p>the comment implies that \"contraints\" should not be brought over</p>\n</blockquote>\n<p>no, it means that you can't do it in a constraint, and anything in the constraint doesn't matter.</p>",
        "id": 187852187,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581364704
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> -- I was specifically referring to \"always reference the non-constrained definition\" when I suggested it implies that constraints should not be brought over (from the referenced element to the element w/ the contentReference).  Sorry for the confusion.</p>",
        "id": 187852423,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1581364847
    },
    {
        "content": "<p>actually, what I think it's saying is that you don't touch contentReference in the profiles. It always refers back to the base definition.</p>",
        "id": 187852552,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581364924
    },
    {
        "content": "<p>you can reuse constraints using this extension:</p>",
        "id": 187852559,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581364935
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhir/StructureDefinition/elementdefinition-profile-element\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/elementdefinition-profile-element\">http://hl7.org/fhir/StructureDefinition/elementdefinition-profile-element</a></p>",
        "id": 187852736,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581365050
    },
    {
        "content": "<blockquote>\n<p>actually, what I think it's saying is that you don't touch contentReference in the profiles. It always refers back to the base definition.</p>\n</blockquote>\n<p>Ah.  OK.  That's a clearer interpretation.  Got it.</p>",
        "id": 187852752,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1581365060
    },
    {
        "content": "<blockquote>\n<p>you can reuse constraints using this extension:<br>\n<a href=\"http://hl7.org/fhir/StructureDefinition/elementdefinition-profile-element\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/elementdefinition-profile-element\">http://hl7.org/fhir/StructureDefinition/elementdefinition-profile-element</a></p>\n</blockquote>\n<p>I think I'm going to need to think about this one some more...  Let me see if I understand... So if an element with a <code>contentReference</code> uses this extension to point to the <em>constrained</em> version of the element it references (in its own profile), then it takes on the constraints of that one? Is that what you mean?</p>\n<p>The element w/ the <code>contentReference</code> doesn't have a <code>type</code> -- and this extension is supposed to go on <code>type.profile</code> -- so is the implication that you have to copy over the type from the referenced element into the element with contentReference, add a <code>profile</code> in the type that points to itself, and then apply this extension on that <code>profile</code>, pointing to the same path as the <code>contentReference</code>?</p>",
        "id": 187853638,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1581365673
    },
    {
        "content": "<p>I'm not sure. What I'm sure about is that we don't have a test case for this for the validator. So let me design one and then we can talk about. Do you have a scenario you are working with?</p>",
        "id": 187866927,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581374768
    },
    {
        "content": "<p>(e.g. what element are you looking to constrain?)</p>",
        "id": 187866937,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581374776
    },
    {
        "content": "<p>I don't have a very specific use case.  It came up because someone was using FSH to write an instance of <a href=\"http://hl7.org/fhir/uv/sdc/2019May/sdc-questionnaire.html\" target=\"_blank\" title=\"http://hl7.org/fhir/uv/sdc/2019May/sdc-questionnaire.html\">SDC Questionnaire</a> -- and asking about the extensions on <code>item</code> and if they applied to <code>item.item</code>.  They pointed out that the individual narrative definitions of the extensions said they applied to both <code>item</code> and <code>item.item</code>, but that this is not as clear in the profile view.</p>",
        "id": 187873852,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1581381896
    },
    {
        "content": "<p>They assumed that any constraints/extensions on <code>item</code> automatically applied to <code>item.item</code> because of the <code>contentReference</code> -- and since that was not my understanding (as a general concept), I wanted to double-check with the FHIR community.  (Especially since we implemented <code>contentReferences</code> in SUSHI based on the interpretation that I expressed in the first messages of this thread).</p>",
        "id": 187873953,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1581382033
    },
    {
        "content": "<p>ok I'll do my exmaple based on that</p>",
        "id": 187877408,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1581386817
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> -- this question has come up again in the #shorthand stream (this time in reference to <code>PlanDefinition.action</code> and how you can have an extension apply to all recursive instances of <code>action</code> (e.g., <code>PlanDefinition.action.action</code>, <code>PlanDefinition.action.action.action</code>, etc.)).  Did you ever get a chance to flesh this out in an example and think more on how it actually should work?</p>",
        "id": 204911129,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1595595196
    },
    {
        "content": "<p>If it helps - <a href=\"http://build.fhir.org/ig/HL7NZ/cca/branches/master/index.html\">this is the IG</a> I'm working on that triggered the question. It uses PlanDefinition that I'm trying to simplify for a regimen use case - using one of <a href=\"http://hl7.org/fhir/plandefinition-example-kdn5-simplified.html\">the examples</a> of that resource type.<br>\n<span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> - I had intended to ping you at some point for comment on whether I was doing this correctly anyway...</p>",
        "id": 204954646,
        "sender_full_name": "David Hay",
        "timestamp": 1595617561
    },
    {
        "content": "<p>the extension automatically applies to the recursive instances</p>",
        "id": 204963141,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1595622719
    },
    {
        "content": "<p>Resurrecting this topic...  We've established that in a profile a <code>contentReference</code> will inherit <em>extensions</em> declared on the source element (in the profile) that the <code>contentReference</code> points to.  Are there any other contraints, potentially added by the profile to the source element, that should be inherited as well?  Or only extensions? While it would be easy to say they all apply, I imagine this gets complicated when considering implications for something like <code>ValueSet.compose.exclude</code> (since its source element, <code>ValueSet.compose.include</code>, has literally the opposite meaning -- so all constraints from <code>include</code> might not be semantically appropriate for <code>exclude</code>).</p>",
        "id": 221942378,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1610027003
    },
    {
        "content": "<p>Furthermore, even if we do bring over extensions from the source element to the <code>contentReference</code>, which constraints on the extension element(s) are brought over?  Is cardinality carried over?  What about metadata like \"short\" and \"definition\" if those were modified in the profile use of the extension?  How about if the extension's <code>valueCodeableConcept</code> was bound to a value set _in the profile use_ (not the extension definition).  Does that get carried along into the content reference?  Or is it just the original extension definition that gets carried over?</p>",
        "id": 221947350,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1610029719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179252-IG-creation/topic/Clarification.20on.20contentReference/near/204963141\">said</a>:</p>\n<blockquote>\n<p>the extension automatically applies to the recursive instances</p>\n</blockquote>\n<p>Hi <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>.  I'm looking into this further and have a question.  I'm testing using a slimmed down PlanDefinition profile from the NZ CcaImplementationGuide.  In the profile, <code>action.extension</code> contains a <code>sact-plan-instructions</code> extension, and <code>act.act.extension</code> adds a <code>sact-timing-of-days</code> extension.  This is what the differential looks like:<br>\n<a href=\"/user_uploads/10155/QslPwVNOXt4w9GNJ399OyEPA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/QslPwVNOXt4w9GNJ399OyEPA/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/QslPwVNOXt4w9GNJ399OyEPA/image.png\"></a></div>",
        "id": 223399872,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1611161040
    },
    {
        "content": "<p>Based on your comment above, I assumed I do <em>not</em> need to redeclare the<code>sact-plan-instructions</code> on <code>action.action.extension</code> in the differential, because \"the extension automatically applies to recursive instances.\"</p>",
        "id": 223400158,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1611161153
    },
    {
        "content": "<p>But when I look at the snapshot (after running IG Publisher), I don't see the <code>sact-plan-instructions</code> applied to <code>action.action.extension</code>.  It shows only the extension I <em>explicitly</em> declared on <code>action.action.extension</code>.  Is this an issue w/ the publisher, or do I need to redeclare the extension from the element the contentreference refers to (even though it is supposed to be automatically applied)?<br>\n<a href=\"/user_uploads/10155/xrQpMxY7X0L5rdgfEUkpSrrV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/xrQpMxY7X0L5rdgfEUkpSrrV/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/xrQpMxY7X0L5rdgfEUkpSrrV/image.png\"></a></div>",
        "id": 223400700,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1611161371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> <span class=\"user-mention\" data-user-id=\"203235\">@Ward Weistra</span> -- you have a snapshot generator, so I'll ask you too.  ;-). Any thoughts on how differentials should work w/ contentReferences, particularly in regard to extensions on the element the contentReference points to?  See above few messages for details...</p>",
        "id": 223512889,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1611238459
    },
    {
        "content": "<p>Hi Chris. These are all great questions, and the reason it remains silent is probably because......I don't know. I do remember discussing this years ago  at FHRI-I, but we've just let the topic rest since we did not came up with definite answers.   We can check what our current snapshot generator is doing, but that's not to say that's the correct thing to do!</p>",
        "id": 224753366,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1612197496
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span>.  I suspected that the silence might reflect that this is a topic to no one has clarity on.  For now, we've implemented it like this:</p>\n<ul>\n<li>When a content reference refers to an element that has an extension defined, SUSHI will consider that extension -- and any constraints on that extension -- as applicable the content reference as well.</li>\n<li>If SUSHI has to manifest any sub-paths of the content reference in the differential, it will also manifest the \"inherited\" extension in the differential.</li>\n</ul>\n<p>The second bullet above ensures that the snapshot will be generated with the extension in place and should be harmless since redundant elements in the differential are basically like no-ops (except when they're not, like in this case!).</p>",
        "id": 224754741,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612198046
    },
    {
        "content": "<p>Hi Chris - I looked at our implementation. We are applying the constraints on the referring element on top of the referred element. Actually, we are applying them over the <em>original</em> definition in the core profile of the referred element.  So, if you profile Questionnaire and put constraints on Questionnaire.item, Questionnaire.item.item will not inherit the constraints from the profiled Questionnaire.item but rather on top of the original element in the core definition.   It's clear from the code that this was not always the case - originally they were applied on top of the constraints on the referred element (profiled or not) - but in april 2018 Michel has changed this bit - no doubt after a discussion with Grahame on this topic.</p>",
        "id": 224842019,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1612255437
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span>.  If I understand you correctly, what you're describing is exactly how SUSHI used to work.  We understood the content reference to refer to the element from the base resource, not the current profile.  So constraints on the referring element were merged w/ a copy of the referred element from the base resource.  This effectively meant that if an extension was required on <code>Questionnaire.item</code> in a profile, that extension was <em>not</em> implied to be required (or even defined) on <code>Questionnaire.item.item</code>.</p>\n<p>But... <a href=\"#narrow/stream/179252-IG-creation/topic/Clarification.20on.20contentReference/near/204963141\">in the thread above</a>, <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> said \"the extension automatically applies to the recursive instances\", which means that the former approach of referring only to the element in the base resource definition was incorrect.  We then implemented it that way in SUSHI, but it led to more questions, as evidenced here.  Still, we have the basic use case of recursively applying extensions implemented and working now.  But.. it's not yet released, so if that is in fact <em>wrong</em>, I'd like to fix it before it goes out to the world in a release.</p>",
        "id": 225076333,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612384081
    },
    {
        "content": "<p>umm there might be a misunderstanding here</p>",
        "id": 225076962,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612384363
    },
    {
        "content": "<p>it may be on my part</p>",
        "id": 225077045,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612384395
    },
    {
        "content": "<p>There's 2 different things that we could be talking about</p>\n<ul>\n<li>how to understand StructureDefinition.context </li>\n<li>how to profile an element</li>\n</ul>\n<p>I thought we were talking about the first. I agree with Ewout about the second</p>",
        "id": 225077241,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612384478
    },
    {
        "content": "<p>Oh...  So when you said \"the extension automatically applies to the recursive instances\", you meant that the Extension definition <code>context</code> does not need to list out <code>Questionnaire.item</code>, <code>Questionnaire.item.item</code>, etc.  If the <code>StructureDefinition.context</code> references an element that is the target of a <code>contentReference</code>, then it implies that it is valid for all referencing elements as well.</p>",
        "id": 225077584,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612384658
    },
    {
        "content": "<p>yes</p>",
        "id": 225077631,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612384677
    },
    {
        "content": "<p>But if a profile on <code>Questionnaire</code> adds a required extension on <code>Questionnaire.item</code>, then it is required only for <code>Questionnaire.item</code>, and <em>not</em> <code>Questionnaire.item.item</code>.  If you wanted to have the extension be required on <em>all</em> nested <code>item</code>s, you'd need to do that via an invariant (if that's even possible to express)?</p>",
        "id": 225077877,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612384790
    },
    {
        "content": "<p>no, you could refer back to your profile recursively by applying it to it's own children</p>",
        "id": 225078057,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612384854
    },
    {
        "content": "<p>Do you have an example of what that would look like?  I see that you did reference the <a href=\"http://hl7.org/fhir/R4/extension-elementdefinition-profile-element.html\">profile-element extension</a> in the thread above, but it's still not clear to me how it is used in a use case like this.</p>",
        "id": 225078556,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612385065
    },
    {
        "content": "<p>Actually, I guess I already asked this in a more detailed way <a href=\"#narrow/stream/179252-IG-creation/topic/Clarification.20on.20contentReference/near/187853638\">here</a>. So all those questions still apply. ;-)</p>",
        "id": 225078967,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612385257
    },
    {
        "content": "<p>well, here:</p>",
        "id": 225079393,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612385443
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"XML\"><pre><span></span><code><span class=\"nt\">&lt;StructureDefinition</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://hl7.org/fhir\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;url</span> <span class=\"na\">value=</span><span class=\"s\">\"http://hl7.org/fhir/test/StructureDefinition/document-structure\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;differential&gt;</span>\n    <span class=\"nt\">&lt;element&gt;</span>\n      <span class=\"nt\">&lt;path</span> <span class=\"na\">value=</span><span class=\"s\">\"Composition.section\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;min</span> <span class=\"na\">value=</span><span class=\"s\">\"1\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>\n        <span class=\"nt\">&lt;profile</span> <span class=\"na\">value=</span><span class=\"s\">\"http://hl7.org/fhir/test/StructureDefinition/document-structure\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;extension</span> <span class=\"na\">url=</span><span class=\"s\">\"http://hl7.org/fhir/StructureDefinition/elementdefinition-profile-element\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;valueString</span> <span class=\"na\">value=</span><span class=\"s\">\"Composition.section\"</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;/extension&gt;</span>\n        <span class=\"nt\">&lt;/profile&gt;</span>\n      <span class=\"nt\">&lt;/type&gt;</span>\n    <span class=\"nt\">&lt;/element&gt;</span>\n <span class=\"nt\">&lt;/differential&gt;</span>\n<span class=\"nt\">&lt;/StructureDefinition&gt;</span>\n</code></pre></div>",
        "id": 225079400,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612385446
    },
    {
        "content": "<p>this says that there must be a composition section, and that each section must have a section, recursively.</p>",
        "id": 225079496,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612385487
    },
    {
        "content": "<p>good luck trying to satisfy that ;-)</p>",
        "id": 225079516,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612385495
    },
    {
        "content": "<p>OK.  So the extension goes <em>on the element that is being referred to</em>.  So in the case of the <code>Questionnaire</code> example, that extension would go on <code>Questionnaire.item</code>'s <code>type[0].profile[0]</code> element.  Then when I process <code>Questionnaire.item.item</code>, when I see the <code>contentReference</code> to <code>#Questionnaire.item</code>, I first look at <code>Questionnaire.item</code> in the <em>current</em> profile.  If it has that extension, I copy over all the constraints to <code>Questionnaire.item.item</code>.  If it doesn't, I just use the element definition from the base <code>Questionnaire</code> resource.  Is that right?</p>",
        "id": 225081768,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612386359
    },
    {
        "content": "<blockquote>\n<p>So in the case of the Questionnaire example, that extension would go on Questionnaire.item's type[0].profile[0] element. </p>\n</blockquote>\n<p>well, no - it would be a type[0].profile[0] on Questionnaire.item.extension </p>\n<blockquote>\n<p>Then when I process Questionnaire.item.item, when I see the contentReference to #Questionnaire.item, I first look at Questionnaire.item in the current profile. </p>\n</blockquote>\n<p>no. as you are processing, you have 2 levels of reference. contentReference points at the underlying base definition. The current profile has nothing to say about that. But when you want to know what profile is applied to the underlying content found in contentReference, you look at the stated profile</p>\n<blockquote>\n<p>If it has that extension, I copy over all the constraints to Questionnaire.item.item. If it doesn't, I just use the element definition from the base Questionnaire resource. Is that right?</p>\n</blockquote>\n<p>I think you're reading the element-profile extension backwards. it points forward - 'this profile applies' comes from type[0].profile[0]. the element-profile says 'when you apply this profile, start at the element' (since profiles must start at an resource, but you are already inside the resource (the element types must match)</p>",
        "id": 225084061,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612387257
    },
    {
        "content": "<p>OK.  I am obviously confused.  I'll see if someone else on my team can help me understand it better, because I think I am a little lost.</p>\n<p>I am also confused because up until an hour ago, I thought that if a <code>type</code> has a <code>profile</code>, then the profile <em>must</em> be a constraint on the definition specified by <code>type.code</code> (e.g., if <code>type.code</code> is <code>Quantity</code> you can't specify <code>type.profile</code> to be <code>Observation</code>) -- but this approach seems to violate that.  And if the extension changes the meaning of <code>type.profile</code>, then shouldn't it be a <code>modifierExtension</code>?</p>",
        "id": 225085746,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612387999
    },
    {
        "content": "<blockquote>\n<p>I am also confused because up until an hour ago, I thought that if a <code>type</code> has a <code>profile</code>, then the profile <em>must</em> be a constraint on the definition specified by <code>type.code</code> (e.g., if <code>type.code</code> is <code>Quantity</code> you can't specify <code>type.profile</code> to be <code>Observation</code>) -- but this approach seems to violate that.  </p>\n</blockquote>\n<p>sort of. The profile must express a constraint on the type. In the absence of the element-profile extension, that will be assessed on the root element in the profile (which must match StructureDefinition.type). But with this extension present, then you base the decision on a different element. The type must still match. </p>\n<blockquote>\n<p>And if the extension changes the meaning of <code>type.profile</code>, then shouldn't it be a <code>modifierExtension</code>?</p>\n</blockquote>\n<p>It doesn't change the meaning; it changes how you use it.</p>",
        "id": 225087084,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612388565
    },
    {
        "content": "<p>OK.  I guess it depends on how you interpret \"If any profiles are specified, then the content must conform to at least one of them.\"  But anyway...  I'll try to wrap my head around the rest then.  I want to be sure I get this right.  Because I already have to delete a lot of code from when I got it wrong the last time. ;-)</p>\n<p>One more question (which may be misguided based on my lack of understanding), but... when this extension is used to point to an element in a profile (e.g., <code>Foo.x</code>), would constraints on subpaths of <code>Foo.x</code> (e.g., <code>Foo.x.y</code>) in the profile also apply?  Or would you also need to independently apply the extension to <code>Foo.x.y</code>?</p>",
        "id": 225088833,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612389353
    },
    {
        "content": "<blockquote>\n<p>would constraints on subpaths apply</p>\n</blockquote>\n<p>yes.</p>",
        "id": 225089363,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612389597
    },
    {
        "content": "<p>I think fleshing out another example might help.  The following is a differential from the <em>MyQuestionnaire</em> profile. Is this the right differential array to attempt to say:</p>\n<ul>\n<li>all recursive instances of <code>item</code> (e.g., <code>item.item</code>, <code>item.item.item</code>) should conform to <code>Questionnaire.item</code> from the <em>MyQuestionnaire</em> profile</li>\n<li>and <code>Questionnaire.item</code> from <em>MyQuestionnaire</em> requires a <code>questionnaire-itemControl</code> extension</li>\n<li>therefore all recursive <code>item</code>'s also require a <code>questionnaire-itemControl</code> extension</li>\n</ul>\n<p>Differential from <em>MyQuestionnaire</em> profile structure definition:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Questionnaire.item\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Questionnaire.item\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n      <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"BackboneElement\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"profile\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"http://example.org/StructureDefinition/MyQuestionnaire\"</span><span class=\"p\">],</span>\n      <span class=\"nt\">\"_profile\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n        <span class=\"nt\">\"extension\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n          <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://hl7.org/fhir/StructureDefinition/elementdefinition-profile-element\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"valueString\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Questionnaire.item\"</span>\n        <span class=\"p\">}]</span>\n      <span class=\"p\">}]</span>\n    <span class=\"p\">}]</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Questionnaire.item.extension:item-ctl\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Questionnaire.item.extension\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"sliceName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"item-ctl\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"min\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"max\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n      <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Extension\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"profile\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl\"</span><span class=\"p\">]</span>\n    <span class=\"p\">}]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre></div>",
        "id": 225098098,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612394459
    },
    {
        "content": "<p>yes that's what it says</p>",
        "id": 225253134,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1612491523
    },
    {
        "content": "<p>Thanks for the example, <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> .  Never thought we'd use this extension to solve this problem. Quite elegant.</p>",
        "id": 228211037,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1614596130
    }
]