[
    {
        "content": "<p>SearchParameters are the Rodney Dangerfield of the FHIR IG specifications -- they don' t get no respect.   (OK, Capability Statements get even less respect).    Designing/understanding SearchParameters requires all of the same insights as designing/understanding the structure of the resources.</p>\n<p>As a user, there is no place (within the IG world) that one can see the COMPLETE set of SearchParameters for a resource, or which SearchParameters have been redefined in the derived profile.  For a deep nesting of profiles    Profile B--&gt;Profile A--&gt; US Core Profile --&gt; R4 Profile...it is quite an odyssey to figure out the existing search parameters.</p>\n<p>I suggest that an IG should include both Snapshot and Differential views of the search parameters for each profiled resource.</p>",
        "id": 184689399,
        "sender_full_name": "Saul Kravitz",
        "timestamp": 1578003936
    },
    {
        "content": "<p>I think we defined the SPs in US Core pretty thoroughly as SHOULDs and SHALLs and went a step further and defined whether ands, or and includes as well as combinations.  I don't think there is an IG out there that has done that to this level.   But this does expose the shortcomings of how SPs are defined elsewhere including the FHIR Spec as well.  (The spec's sp  tables take some getting used to and hide most of the details. )</p>\n<p>If you mean to have a differential and snapshot view for only a set of selected SPs defined in a IG - I think that is doable but if SPs are exposed in all their detail only in the  IG's I Think folks will be clamoring for more detail in the FHIR Spec as well.  Technically  this might make the spec an order of magnitude bigger than it already is and may not be manageable due to the volume of new files.</p>",
        "id": 184702899,
        "sender_full_name": "Eric Haas",
        "timestamp": 1578021211
    },
    {
        "content": "<p>Search parameters aren't characteristics of a profile, they're characteristics of a server's capabilities for a particular resource.  I.e. search parameters exist at the level of Observation.  You can't define different search parameters for lab results vs. vitals vs. other types of Observations.  Expectations around search parameters are covered by CapabilityStatements.  And those don't have snapshot or differential.  A CapabilityStatement lists <em>all</em> expectations about what search parameters must be supported.</p>",
        "id": 184750279,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1578071573
    },
    {
        "content": "<p>If the sp is derived from another. You certainly could have a differential view.</p>",
        "id": 184765047,
        "sender_full_name": "Eric Haas",
        "timestamp": 1578083176
    },
    {
        "content": "<p>Not as the resources are defined, no.  There's no record of any delta.</p>",
        "id": 184766275,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1578084300
    },
    {
        "content": "<p>Not as the resources are defined, no.  There's no record of any delta.</p>",
        "id": 184767106,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1578085025
    },
    {
        "content": "<p>I meant you could generate a delta programmatically. But I agree there is nothing in the resource definition that defines it.</p>",
        "id": 184769349,
        "sender_full_name": "Eric Haas",
        "timestamp": 1578086809
    },
    {
        "content": "<p>Generating a delta would be challenging.  The key elements are the expression and description and neither of those would be easy to diff.</p>",
        "id": 184770990,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1578088336
    },
    {
        "content": "<p>I’m not sure I’d try to derive a so and then rewrite the expression.  I’m talking about all the extra stuff like ands , ors, comps,  mods and includes</p>",
        "id": 184773717,
        "sender_full_name": "Eric Haas",
        "timestamp": 1578091086
    },
    {
        "content": "<p>You have to specify the expression even if deriving I think?</p>",
        "id": 184775478,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1578093088
    },
    {
        "content": "<p>I think you are missing the point.   Unless you expect each profile to recapitulate all search parameters that are needed from the profiled resource, the poor implementer is left to perform the recursive union of all search parameters that are available.   </p>\n<p>Why not provide a listing of all available search parameters in the IG, including those defined in the IG, and those defined in the resources that are profiled in the IG?    For example, the Formulary IG uses MedicationKnowledge which has a 'code' SP.   The only way to know this is to read both the FormularyIG and the R4 specification, unless the formulary recapitulates the 'code' SP.</p>",
        "id": 184776901,
        "sender_full_name": "Saul Kravitz",
        "timestamp": 1578094709
    },
    {
        "content": "<p>A profiled resource won't list <em>any</em> search parameters at all.  Search parameters aren't tied to profiles.  They're tied to CapabilityStatements.  And CapabilityStatements <em>will</em> list each and every search parameter (for each and every resource) that systems that conform to that CapabilityStatement are expected to implement.</p>",
        "id": 184776950,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1578094795
    },
    {
        "content": "<p>There is no recursive search.  The CapabilityStatement will list everything relevant.  There's no mechanism for inheriting search parameters from a higher-level CapabilityStatement (though you can assert conformance with another CapabilityStatement).</p>",
        "id": 184777030,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1578094853
    },
    {
        "content": "<p>Well I think you could summarize / aggregate all the conformance in a single view but that would be bit of effort.  It might be simpler faster to just run a series of test queries on a server to discover its capabilities.   In fact that is what Crucible does. You get actual vs expected. .</p>",
        "id": 184786950,
        "sender_full_name": "Eric Haas",
        "timestamp": 1578110838
    },
    {
        "content": "<p>I think the audience for ig capstatements is pretty small but important group. The server implementing the ig and the testers.</p>",
        "id": 184787050,
        "sender_full_name": "Eric Haas",
        "timestamp": 1578111042
    },
    {
        "content": "<p>I can see what <span class=\"user-mention\" data-user-id=\"215604\">@Saul Kravitz</span> is getting at, but it seems difficult to know quite where it would fit, since it's not profile specific</p>",
        "id": 184816868,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1578166968
    },
    {
        "content": "<p>In US Core we actually expose the derived SP definitions in the narrative which would be akin to snapshot in my opinion.  They are all referenced in the CapStatements and in the Profile narratives.   We also added in  a bunch of conformance language around the different bits.   I think it would be possible to highlight the elements that are specific to the base definition which would be like the delta.  But I question whether clients would use it or just do their own discovery by trial and error?</p>",
        "id": 184824589,
        "sender_full_name": "Eric Haas",
        "timestamp": 1578181154
    }
]