[
    {
        "content": "<p>One of the things that seems to be missing from CapabilityStatement is a clearly computable definition of the combinations of Query Parameters a server supports.  Not every server supports every parameter, and some combinations of parameters have different business requirements in different contexts.  The important of having this be computable comes out when trying to create a test plan (as we did in the SANER Project).</p>\n<p>To give an example:<br>\nA server is required to support queries by MeasureReport using _id, period, measure, and location, and _include=*.  </p>\n<ol>\n<li>\n<p>MeasureReport?_id and _include=* must be supported by the server</p>\n</li>\n<li>\n<p>MeasureReport? measure and period and location and _include=* must be supported by the server.  The server may require that both measure and period be specified (e.g., min=1 for both parameters), and location and _include are both optional for the client.</p>\n</li>\n</ol>\n<p>One can express 1. and 2. above as an OperationDefinition (a named search), but there's nothing special about this named search other than the fact that it expresses some cardinality constrained for the client and for the server.  The search behavior is otherwise as required by FHIR.<br>\nSo, we have a way to describe the requirements, but no real way to express them without creating a named search, but no need for a named search other than to express capabilities.</p>\n<p>If we put these named searches in a capability statement, it implies that they exist as a named search in the server.<br>\nI'll also point out that expect</p>",
        "id": 199380471,
        "sender_full_name": "Keith Boone",
        "timestamp": 1591024213
    },
    {
        "content": "<p>We've talked about this before.  Expressing the full sophistication of what combinations are supported in a computable way introduces a very large degree of complexity.  So far, we've landed on the side that says \"CapabilityStatement is more than complex enough, thanks\".  That said, we're currently looking at refactoring CapabilityStatement (to the extent we can with a normative artifact), and it's possible we could introduce something like this with the new approach.</p>",
        "id": 199386373,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1591027001
    },
    {
        "content": "<p>I found what I needed in the <a href=\"http://hl7.org/fhir/extension-capabilitystatement-search-parameter-combination.html\">http://hl7.org/fhir/extension-capabilitystatement-search-parameter-combination.html</a></p>",
        "id": 199388485,
        "sender_full_name": "Keith Boone",
        "timestamp": 1591027947
    }
]