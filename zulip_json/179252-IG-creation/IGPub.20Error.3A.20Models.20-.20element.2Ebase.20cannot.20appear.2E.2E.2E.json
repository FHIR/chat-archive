[
    {
        "content": "<p>I'm not sure what to make of the following error being reported by the IG Publisher:</p>\n<blockquote>\n<p><strong>Path</strong>: StructureDefinition/oncology-StageTimingPrefix-model: StructureDefinition<br>\n<strong>Severity</strong>: error<br>\n<strong>Message</strong>: element.base cannot appear if there is no base on the structure definition [snapshot.exists() implies (snapshot.element.base.exists() = baseDefinition.exists())]</p>\n</blockquote>\n<p>I see that a lot.  Above is just an example.</p>\n<p>In my structure definition, I declare a <code>baseDefinition</code>:</p>\n<div class=\"codehilite\"><pre><span></span>&quot;baseDefinition&quot;: &quot;http://hl7.org/fhir/StructureDefinition/Element&quot;\n</pre></div>\n\n\n<p>I don't have any snapshot elements, however, that use <code>base</code>, as none of them are based on a parent element.  Is that my problem?  Should I be adding a <code>base</code> on my root element that points to <code>Element</code>?</p>",
        "id": 153947763,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1522018675
    },
    {
        "content": "<p>I don't know if this is related, but I just noticed that when the IG Publisher processes my logical models, it seems to <em>insert</em> a <code>base</code> on every one of my <code>snapshot</code> elements.  For example, in the example above (<code>StructureDefinition/oncology-StageTimingPrefix-model</code>), although I didn't put any <code>base</code> properties in the elements, the JSON in my IG now has:</p>\n<div class=\"codehilite\"><pre><span></span>&quot;base&quot; : {\n  &quot;path&quot; : &quot;oncology-StageTimingPrefix-model&quot;,\n  &quot;min&quot; : 0,\n  &quot;max&quot; : &quot;*&quot;\n}\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span>&quot;base&quot; : {\n  &quot;path&quot; : &quot;oncology-StageTimingPrefix-model.value&quot;,\n  &quot;min&quot; : 1,\n  &quot;max&quot; : &quot;1&quot;\n}\n</pre></div>\n\n\n<p>Is this expected?  And is it related to my post above?</p>",
        "id": 153947764,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1522018953
    },
    {
        "content": "<p>umm. I'm not sure what the right solution to this one is. For r4, all the base elements must be populated</p>",
        "id": 153947785,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1522035241
    },
    {
        "content": "<p>so this appears to be an R4 issue, and you should populate base on the snapshot properly</p>",
        "id": 153947786,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1522035267
    },
    {
        "content": "<p>OK.  So when I'm creating a new logical model and declaring a brand new element not based on anything, just set the base to itself (e.g., copy its own path and cardinality)?  Is that what you're suggesting?</p>",
        "id": 153947918,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1522068153
    },
    {
        "content": "<p>In STU3, logical model element definitions don't have a base at all. Forge for STU3 generates logical models w/o any base component. According to the spec, ElementDefinition.base is still optional in R4:<br>\n<a href=\"http://build.fhir.org/elementdefinition-definitions.html#ElementDefinition.base\" target=\"_blank\" title=\"http://build.fhir.org/elementdefinition-definitions.html#ElementDefinition.base\">http://build.fhir.org/elementdefinition-definitions.html#ElementDefinition.base</a><br>\nHowever the R4 spec now also states: \"For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.\"<br>\nSo I guess we should clarify the use of .base specifically for logical models.</p>",
        "id": 153947923,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1522068775
    },
    {
        "content": "<p>Also see <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12295\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12295\">GF#12295</a></p>",
        "id": 153947926,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1522068921
    },
    {
        "content": "<p>Thanks for the extra information, <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span>.  I now understand what Grahame meant by \"it's an R4 issue\"...  So even though I'm publishing a STU3 IG, the publisher is enforcing an R4 rule in this case.  Assuming that it's not outright <em>wrong</em> to generate an STU3 element with itself as a base, and since the publisher is inserting a <code>base</code> at publish-time anyway, I'll probably go ahead and add it to my STU3 models.  One less thing to do when we eventually move to R4!</p>",
        "id": 153948011,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1522073286
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>, If I recall correctly, Chris Grenz (submitter of <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12295\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=12295\">GF#12295</a>) proposed that in R4, the .base property of newly introduced elements (allowed in resource definitions and logical model definitions) should simply refer to the element itself (empty in STU3). So your approach conforms to Chris' proposal for R4.</p>",
        "id": 153948020,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1522074074
    },
    {
        "content": "<p>I</p>",
        "id": 153948185,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1522090850
    },
    {
        "content": "<p>I'm not quite sure why that's being applied to an R3 logical model.</p>",
        "id": 153948187,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1522090878
    }
]