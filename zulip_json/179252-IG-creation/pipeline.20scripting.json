[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203235\">@Ward Weistra</span> does the Firely Terminal have the capability of being able to validate a FHIR package. It's a bit of a wierd question, but it is about getting faster from the IG to the demo setup. Currently, the IGPublisher (CI) setup allows a FHIR package to contain invalid FHIR resources (<span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> should listen in on this). What I would like to build (or expand) is a pipeline that takes the output from the IG publisher (being the NPM package) - and validates whether the package contains example resources that cannot be parsed and so forth. If the package does contain invalid examples or invalid sdf's the pipeline should probably email someone responsible. If the package does NOT contain invalid resources/examples, the pipeline should proceed and spin up eg. a HAPI FHIR server with the current state of the IG and eg. enable validation of the resources.</p>\n<p>If Firely Terminal does support the feature of being able to validate a package, please ping me (in that case I'll wrap it in docker and take it from there). If not, I'll probably just build the tooling myself.</p>",
        "id": 229316660,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1615217318
    },
    {
        "content": "<p>The whole idea is to make the IG as <strong>executable</strong> as fast as possible</p>",
        "id": 229317541,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1615217613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span> Good stuff. <a href=\"https://docs.fire.ly/projects/Firely-Terminal/\">Firely Terminal</a> has the option to <a href=\"https://docs.fire.ly/projects/Firely-Terminal/Commands/Quality-Control/Validate.html\">validate resource one-by-one</a> (<code>fhir validate</code>). And with the next Terminal release we're adding <a href=\"https://fire.ly/2021/03/04/quality-control-how-to-validate-full-fhir-specifications-in-one-click/\">Quality Control</a> to that, including the option for bulk validation and checking any other FHIRPath rules (<code>fhir check</code>).</p>\n<p>Before validation you'll want to make sure you install the package dependencies (<code>fhir restore</code> which reads the package.json and installs the dependencies listed)</p>",
        "id": 229449786,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1615283473
    },
    {
        "content": "<p><code>fhir check</code> will be a Firely Terminal option that is customer-only (any <a href=\"https://simplifier.net/pricing\">Simplifier.net plan</a>), which shouldn't be a problem for you, but perhaps if you want to have others without a license using it.</p>",
        "id": 229450065,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1615283627
    },
    {
        "content": "<p>Hmmm ... thats good news and not-so-good news at the same time. I have full understanding for your choices of licensing. You choice however probably pulls me in the direction that I'll have to cook it up myself so that it can go in anyones pipeline - but thx for the response</p>",
        "id": 229471671,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1615294579
    },
    {
        "content": "<p>And I understand that <span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span> . We'll publish a Github Actions pipeline soon on how to use Firely Terminal for bulk validation on every commit/PR. Perhaps as inspiration.</p>",
        "id": 229483482,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1615299530
    },
    {
        "content": "<blockquote>\n<p>Currently, the IGPublisher (CI) setup allows a FHIR package to contain invalid FHIR resources</p>\n</blockquote>\n<p>Uhh? <span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span> it shouldn't allow this without notifying the IG author via qa.html</p>",
        "id": 232483147,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1617132411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  It does make some noise in the qa page. The problem I encountered was invalid example resources, specifically, and those are part of the IG eventhough I would recommed to blacklist them in the resulting package. Bear in mind - I'm trying to automate stuff here - not bombarding an IG author. The thing is that (I imagine) while only computable profiles are part of the package, invalid example resources are also part the package, which breaks my build chain currently. Hence the need for a tool that can detect and/or remove invalid example resources as they stop the process of automatically rolling out a FHIR server with the validation capabilities of the IG</p>",
        "id": 232497495,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1617138093
    },
    {
        "content": "<p>I'm interested in other people's opinions on this. I could either:</p>\n<ul>\n<li>ignore Jens</li>\n<li>restrict what goes in packages to only valid resources for examples</li>\n<li>restrict what goes in packages to only valid resources </li>\n<li>create a special package that only contains valid resources</li>\n</ul>\n<p>One of the tricky things about this is that different people will care about different errors. e.g. most people won't care about a wrong code, or a broken link, but others will</p>",
        "id": 232497870,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1617138242
    },
    {
        "content": "<p>What constitutes 'valid' is a hard thing to say.  The validator continues to evolve and get smarter - what it catches today and what it caught two years ago aren't the same.  Terminologies can also evolve in ways that make instances valid or invalid.  Finally, there are some rules that automated validators might never be able to detect - or at least that require human review.  For example, having bad codes for an extensible binding.</p>\n<p>Also, sometimes an IG might <em>deliberately</em> have invalid examples - to show what not to do, to show ramifications of certain inputs, etc.</p>\n<p>If a server wants to have rules that it will only store instances that pass its own validation rules, then I think that's an obligation for the server.  If an IG published with instances that don't meet those rules, the server is free to kick them out.  It's also free to reconsider what data it stores as its own rules evolve.</p>",
        "id": 232499757,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1617139077
    },
    {
        "content": "<p>could this be a command line argument? <br>\n--ignore-errors (default) / --skip-invalid-examples / --skip-invalid... /--use-qa</p>",
        "id": 232500704,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1617139557
    },
    {
        "content": "<p>--use-qa: only skip the errors that are in the ignore-warnings (if ignore-warnings can also contain errors to skip</p>",
        "id": 232500926,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1617139670
    },
    {
        "content": "<p>Or perhaps a simple option /ig parameter \"-skip-validation-errors\" (default=true). If false, the publisher will return some error code ( not 0) and the pipeline can detect it</p>",
        "id": 232501269,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1617139845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I thought you already <em>did</em> ignore me ;)<br>\nI agree that context is everything here (as always), and yes, different people are with different needs. I <em>could</em> actually <em>just</em> (for once) ignore <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> / <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> and just hack my way through it by making a PR to HAPI FHIR that parameterizes how the IG loading capacity should treat examples and take it from there. In my case, invalid examples are worthless, as they clutter up the picture by being present on a testing server that should only show what is actually considered valid.</p>",
        "id": 232503438,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1617141021
    },
    {
        "content": "<p>As a bonus info, the HAPI FHIR starter project may not be the only piece of software that is able to be bootstrapped within seconds with an entire range of IG's. Something tells me that AWS is also looking into this: <a href=\"https://github.com/awslabs/fhir-works-on-aws-deployment/commit/393846b8edd6b9d1a016a8968c8b163c3ba61658\">https://github.com/awslabs/fhir-works-on-aws-deployment/commit/393846b8edd6b9d1a016a8968c8b163c3ba61658</a></p>",
        "id": 232503719,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1617141221
    },
    {
        "content": "<blockquote>\n<p>I thought you already did ignore me ;)</p>\n</blockquote>\n<p>I only pretend to some times.</p>",
        "id": 232504197,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1617141467
    },
    {
        "content": "<p>Anyways - keep me posted if you actually intend to do something about this. <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> from top of my head, it sounds a bit intimidating if running with a parameter that is not default can change the result - while that may only sound intimidating to me.</p>",
        "id": 232504592,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1617141647
    },
    {
        "content": "<p>Maybe that would actually be the correct way to do it for this particular task</p>",
        "id": 232504643,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1617141671
    },
    {
        "content": "<p>Unless I just fix it with adjusting HAPI.</p>",
        "id": 232504678,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1617141695
    },
    {
        "content": "<p>I suspect that the answer lies in reading the package. What if I add validity information to .index.json?</p>",
        "id": 232504800,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1617141749
    },
    {
        "content": "<p>That could actually work</p>",
        "id": 232504845,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1617141774
    },
    {
        "content": "<p>I mean ... it wouldn't hurt to actually have a machine readable format of the QA page</p>",
        "id": 232504930,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1617141811
    },
    {
        "content": "<p>and that would fit the bill to my setup</p>",
        "id": 232504955,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1617141828
    },
    {
        "content": "<p>well, there is qa.json, you know. but it's probably not organised right for what you want</p>",
        "id": 232505067,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1617141872
    },
    {
        "content": "<p>not it doesn't have what you need at all.</p>",
        "id": 232505111,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1617141898
    },
    {
        "content": "<p>qa.xml does, but not nice</p>",
        "id": 232505173,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1617141929
    },
    {
        "content": "<p>no .. its 'not nice'</p>",
        "id": 232505418,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1617142052
    },
    {
        "content": "<p>and qa.json is .... too slim</p>",
        "id": 232505677,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1617142173
    },
    {
        "content": "<p>An OperationOutcome from hell? :)  Or perhaps a Bundle of OperationOutcomes - one per resource?</p>",
        "id": 232512087,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1617145926
    },
    {
        "content": "<p>we currently test our validator setup with testing all ig examples against it (and exclude in the test setup explicitly which examples we know fail due to that they already have errors), so if we could get that information from the package in some way that would very nice.</p>",
        "id": 232541460,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1617171057
    },
    {
        "content": "<p>I deliberately put in non conforming resources to show the edges of what to test. I don't mind needing some way to tag them as deliberately non conforming.</p>",
        "id": 232581279,
        "sender_full_name": "John Moehrke",
        "timestamp": 1617193746
    },
    {
        "content": "<p>.index.json is intened to be generated - or even regenerated by multiple tools. If we want to keep .index.json cross tool compatible, we should be very conservative in making changes there.<br>\nI would also suggest that reading a resource always has the risk of being not valid. It's something every piece of software should deal with.<br>\nHowever we might add a marker in package.json to at least state that it's a preview/alpha/untested/non-qa package</p>",
        "id": 232712661,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1617260567
    },
    {
        "content": "<p>Or a new json file beside the index, so regeneration doesn't lose the data. The bundle of OperationOutcome almost feels like a good idea.<br>\nThe could pick what violations you can accept...</p>",
        "id": 233619157,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1617870751
    },
    {
        "content": "<p>ok so from the next IG publisher release, it will add two new files to the package it produces:</p>\n<p>/other/validation-summary.json<br>\n/other/validation-oo.json</p>\n<p>ValidationSummary is an easy to read JSON file with an entry for each resource like this:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code> <span class=\"nt\">\"{type}/{id}\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"errors\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"warnings\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n  <span class=\"p\">},</span>\n</code></pre></div>\n<p>validation-oo.json is a bundle of OperationOutcomes, one for each resource, like this:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code>    <span class=\"p\">{</span>\n      <span class=\"nt\">\"fullUrl\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"{ig-canonical}/OperationOutcome/{type}-{id}\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"resource\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"resourceType\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"OperationOutcome\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"id\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"{type}-{id}\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"issue\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"err\">errors</span> <span class=\"err\">a</span><span class=\"kc\">n</span><span class=\"err\">d</span> <span class=\"err\">war</span><span class=\"kc\">n</span><span class=\"err\">i</span><span class=\"kc\">n</span><span class=\"err\">gs</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n</code></pre></div>\n<p>if there's no errors or warnings, then there'll be be no issue property</p>",
        "id": 235421942,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1618955302
    },
    {
        "content": "<p>Is there a reason it needs to go in /other rather than /output or /temp?  (I'd prefer to keep directory clutter to a minimum.)</p>\n<p>Also, what's the driver for having this in a more computable form?</p>",
        "id": 235424315,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618956707
    },
    {
        "content": "<p>it's in the package not the directory structure. And the driver is further back in this thread, people having problems with processing the packages because the IG publisher will produce IG packages with invalid resources</p>",
        "id": 235424866,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1618957015
    },
    {
        "content": "<p>My brain interpreted \"to the package\" as \"to the generated output\".  Sorry for not paying more attention.</p>",
        "id": 235425206,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1618957223
    }
]