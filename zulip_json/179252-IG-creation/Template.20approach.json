[
    {
        "content": "<p>One of the things that would be nice to do as part of the onCheck (and/or onGenerate) is the ability for the Ant process to define additional validation results.  For example, one of my clients has a rule that every element in a differential must declare mustSupport.  Right now, I run a check before the IGPublisher launches that just blows up if the check fails, but really this should be something that shows up in the validation results.  Would it be possible to define a file (presumably JSON) that the Ant script could populate with a list of additional issues (with severity, the artifact, the location and the issue) that could then be integrated and sorted and reported as part of the final build (including being incorporated into error and warning counts, etc.)?  (<span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> )</p>",
        "id": 167730451,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1560137830
    },
    {
        "content": "<p>ok. it's a file validation.json/xml in the root of the template directory. The IGPublisher will ensure that it doesn't exist before running the script, and if it does exist afterwards, will load it. Format will be :</p>\n<ul>\n<li>an OperationOutcome in json or xml format (by file extension) in R5 format</li>\n<li>each issue must have a severity, a code, a details.text, and an expression (which need not be fhirpath)</li>\n</ul>\n<p>Issues may also carry extensions:</p>\n<ul>\n<li>\"<a href=\"http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-source\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-source\">http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-source</a>\" - the filename in which the error occurs, relative to the root. If this is not present, or not matched, the error will be reported against the IG as a whole</li>\n<li><a href=\"http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-line\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-line\">http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-line</a></li>\n<li><a href=\"http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-col\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-col\">http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-col</a></li>\n<li><a href=\"http://hl7.org/fhir/StructureDefinition/rendering-xhtml\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/rendering-xhtml\">http://hl7.org/fhir/StructureDefinition/rendering-xhtml</a> - an html rendering of the element, if preferred as a view</li>\n</ul>",
        "id": 167753726,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560168789
    },
    {
        "content": "<p>a fatal error will terminate the publication process</p>",
        "id": 167755095,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560170123
    },
    {
        "content": "<p>done and released</p>",
        "id": 167789421,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560195534
    },
    {
        "content": "<p>Another question:<br>\nThe onLoad event says the only thing you're allowed to change is the IG resource.  However, this seems like the appropriate time to make changes to other source files (or at least copying a transformed version of source files to a different location that will be used as actual input).  There doesn't seem to be any other event that will allow for the source artifacts to be manipulated.  (Examples of potential manipulation include changing the metadata associated with the artifacts, setting defaults for things like 'mustSupport' that haven't been declared, expanding \"shortcuts\" embedded in descriptive text, etc.)  Is there a reason to not allow changes to other files?  Does it create problems with the 'continuous publication' mode (because you're not watching source files that would be 'copied')?  If so, is there a way we could work around that by letting you know where to look for files that should be monitored for changes but should not be used as source?</p>",
        "id": 167819527,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1560229607
    },
    {
        "content": "<blockquote>\n<p>at least copying a transformed version of source files to a different location that will be used as actual input</p>\n</blockquote>\n<p>Why?</p>",
        "id": 167837290,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560248872
    },
    {
        "content": "<blockquote>\n<p>hanging the metadata associated with the artifacts, setting defaults for things like 'mustSupport' that haven't been declared, expanding \"shortcuts\" embedded in descriptive text</p>\n</blockquote>\n<p>Why is this the business of the <em>template</em>? Why not just get the content correct?</p>",
        "id": 167837364,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1560248913
    },
    {
        "content": "<p>Getting the content correct may require the author to correctly set values in 100s of artifacts and/or reproduce the 'same content' in hundreds of places.  Doing that in bulk is much more efficient and more likely to be accurate/consistent</p>",
        "id": 167863210,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1560268470
    },
    {
        "content": "<p>Is there a reason why doing this is problematic?</p>",
        "id": 167863266,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1560268503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ?</p>",
        "id": 167893760,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1560290025
    }
]