[
    {
        "content": "<p>I am getting a large number of errors because of bad links on the Profile \"Detailed Description\" pages.  They refer to anchors not on the page. Is it possibly something I'm doing? <a href=\"/user_uploads/10155/834H6FsZyqhnDtNVcxAcH1g9/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/834H6FsZyqhnDtNVcxAcH1g9/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/834H6FsZyqhnDtNVcxAcH1g9/pasted_image.png\"></a></div>",
        "id": 186335966,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1579730752
    },
    {
        "content": "<p>Typically it's caused by snapshot generation issues</p>",
        "id": 186342371,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1579735460
    },
    {
        "content": "<p>The StructureDefinition input to the IG Pub has this: <code>\"comment\": \"For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.\"</code> So, somewhere in the publication process the wrong root URL was added. Is this the fault of the IGP, or a bad configuration in the IG json file, perhaps?</p>",
        "id": 186345572,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1579738164
    },
    {
        "content": "<p>That's something the publisher should   be fixing as part of the publication process.  Is this checked in somewhere?</p>",
        "id": 186346107,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1579738790
    },
    {
        "content": "<p>Yes, <a href=\"https://github.com/standardhealth/fsh-mcode\" target=\"_blank\" title=\"https://github.com/standardhealth/fsh-mcode\">https://github.com/standardhealth/fsh-mcode</a>.</p>",
        "id": 186383244,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1579782476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 186386841,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1579785474
    },
    {
        "content": "<p>When we create profiles, we start by cloning the base resource and then constraining it.  Maybe we should be removing the \"comment\" field since it's really a comment about the base resource (and not necessarily the profile)?  Perhaps the same goes for \"description\" and other fields?  Clearing \"comment\" when we create a profile would fix at least this one specific instance noted above.</p>",
        "id": 186388710,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1579786862
    },
    {
        "content": "<p>My opinion: I'd start with that, yes. If this part of the cloning brings this issue, we should remove it.</p>",
        "id": 186389340,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579787098
    },
    {
        "content": "<p>Generally, I'd be in favour of not keeping anything from the cloning that we do not need or that can cause issues.</p>",
        "id": 186389422,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579787158
    },
    {
        "content": "<p>that's 2 cents. :)</p>",
        "id": 186389485,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579787176
    },
    {
        "content": "<p>I'll make a list of the properties that we may want to consider clearing when we clone a resource for the purpose of profiling it.  Then we can discuss.</p>",
        "id": 186389753,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1579787393
    },
    {
        "content": "<p>Blacklist? Why not whitelist?</p>",
        "id": 186389940,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579787504
    },
    {
        "content": "<p>Programmatically, we are literally <em>cloning</em> the JSON.  So from that standpoint, we are clearing the things we don't want.  I suppose we could create a blank SD and then clone in the things we <em>do</em> want from the original SD.  I guess after we have a better understanding of what we keep vs what we toss the best approach might be more clear.</p>",
        "id": 186390792,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1579788086
    },
    {
        "content": "<p>But the overall approach w/ profiling (for SUSHI) is to clone all the snapshot elements from the parent SD, then to apply constraints on top of them (making it easier to track incompatible/invalid constraints) -- then we programatically compare the new snapshots to the olds snapshots to determine the differentials.  (More or less...)</p>",
        "id": 186391029,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1579788214
    },
    {
        "content": "<p>I did not mean change the code to a new approach. I meant that as we make that list, we can consider everything to be a candidate for removal until proven useful. All suspects until proven innocent.</p>",
        "id": 186391357,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579788453
    },
    {
        "content": "<p>(but uit was just an idea, the net result will be the same, and I do not know the practical impact of implementing in a different way, sorry if it was distracting)</p>",
        "id": 186391487,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579788530
    },
    {
        "content": "<p>I would be super, super happy if we would eliminate my \"favorite\" text repeated 20 times in every StructureDefinition: \"There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.\"</p>",
        "id": 186392971,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1579789395
    },
    {
        "content": "<p>Well, that is in the comment field for extension, so depending on how this is implemented, you can get indeed rid of that as soon as we do not clone the .comment</p>",
        "id": 186394382,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579790321
    },
    {
        "content": "<p>I think the issue is diffs -- any change in an element would need to be reported as a diff.</p>",
        "id": 186394536,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1579790403
    },
    {
        "content": "<p>you mean conformance-wise, we should not change the content of .comment?<br>\nOtherwise I don't see an issue - we just have to delete all fields called \"comment\" that are descendants of the structuredef.</p>",
        "id": 186395375,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579790950
    },
    {
        "content": "<p>Removing comments should be in profiling, not in code. <br>\nSo, you may want to profile the structuredefinition-extension to have an extension that has no \"no stigma\" in it <br>\na \"structuredefinition-extension-no-no-stigma\" :)</p>",
        "id": 186395768,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579791186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> do you support recursive changes? <br>\nDoes FSH support that?<br>\ncan we say \"all descendants called \"comment\" will have this value\"?</p>",
        "id": 186396014,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579791361
    },
    {
        "content": "<p>Not (yet) supported in Shorthand. Never occurred to me that would be useful.</p>",
        "id": 186396303,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1579791519
    },
    {
        "content": "<p>No, we don't support recursive changes.  And regarding diffs, it depends on where we're making the change.</p>\n<ul>\n<li>If we change a top-level resource metadata attribute (not in snapshot elements), then there is no effect on diff</li>\n<li>If we change something in a snapshot element, technically I think it is supposed to result in a diff.  So removing comments from snapshot elements might require diffs, which just starts to get a little noisy.<br>\n<span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> -- it's been a while since I asked.  Are there any fields in ElementDefinition that we can change or remove <em>without</em> requiring it to be reflected in the differential?</li>\n</ul>",
        "id": 186396647,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1579791681
    },
    {
        "content": "<p>Differential must reflect all changes.  Snapshot gets generated from the differential.  Even if you provide a snapshot, many tools will wipe it and re-generate.</p>",
        "id": 186410268,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1579799060
    },
    {
        "content": "<p>It's totally fine to refine usage notes to reflect the constrained context of a profile, but I'm not a fan of wiping all comments \"just because\" and it also shouldn't be necessary to wipe comments because they have links that don't resolve properly.</p>",
        "id": 186410372,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1579799114
    },
    {
        "content": "<blockquote>\n<p>When we create profiles, we start by cloning the base resource and then constraining it.</p>\n</blockquote>\n<p>Would be interesting to know if that's the approach that Forge takes - <span class=\"user-mention\" data-user-id=\"203235\">@Ward Weistra</span> ? (BTW - is Michel Rutten still around?</p>",
        "id": 186411694,
        "sender_full_name": "David Hay",
        "timestamp": 1579799821
    },
    {
        "content": "<p>The link should resolve. I thought I sorted this months ago. I’ll look later today</p>",
        "id": 186427569,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579808761
    },
    {
        "content": "<p>It sounds like maybe not everyone is a fan of wiping some of the high-level metadata from the resource when creating a derived profile.  Before I knew this, however, I put together a proposed approach toward what would get wiped and what we would keep.  Comments welcome:</p>\n<ul>\n<li><strong>id</strong> - overwrite w/ new id</li>\n<li><strong>meta</strong> - clear</li>\n<li><strong>implicitRules</strong> - clear</li>\n<li><strong>language</strong> - clear</li>\n<li><strong>text</strong> - clear</li>\n<li><strong>contained</strong> - clear</li>\n<li><strong>extension</strong> - clear (see <a href=\"https://github.com/FHIR/sushi/issues/116\" target=\"_blank\" title=\"https://github.com/FHIR/sushi/issues/116\">https://github.com/FHIR/sushi/issues/116</a>)</li>\n<li><strong>modifierExtension</strong> - clear</li>\n<li><strong>url</strong> - overwrite w/ new url</li>\n<li><strong>identifier</strong> - clear</li>\n<li><strong>version</strong> - overwrite w/ IG version (author can override if maintaining per-profile versions)</li>\n<li><strong>name</strong> - overwrite w/ new name</li>\n<li><strong>title</strong> - clear or overwrite w/ new title (if applicable)</li>\n<li><strong>status</strong> - currently defaults to <code>active</code> but FSH should add (required?) keyword</li>\n<li><strong>experimental</strong> - clear</li>\n<li><strong>date</strong> - clear</li>\n<li><strong>publisher</strong> - clear (or overwrite w/ publisher from config?)</li>\n<li><strong>contact</strong> - clear (or overwrite w/ contributors from config?)</li>\n<li><strong>description</strong> - clear or overwrite w/ new description (if applicable)</li>\n<li><strong>useContext</strong> - clear</li>\n<li><strong>jursidiction</strong> - clear</li>\n<li><strong>purpose</strong> - clear</li>\n<li><strong>copyright</strong> - clear</li>\n<li><strong>keyword</strong> - clear or keep? Would parent keywords still be applicable to child profiles?</li>\n<li><strong>fhirVersion</strong> - set to target version (should match anyway)</li>\n<li><strong>mapping</strong> - keep (assuming mappings are still valid and because removing them would require use to remove mappings from every element, creating tons of diffs)</li>\n<li><strong>kind</strong> - keep (this should not change)</li>\n<li><strong>abstract</strong> - keep or set to false.  If you set an abstract profile as a parent should you need to explicitly toggle abstractness to <code>false</code>?  Or should we default to <code>false</code>?</li>\n<li><strong>context</strong> - keep (assuming context is still valid for child extensions)</li>\n<li><strong>contextInvariant</strong> - keep (assuming context is still valid for child extensions)</li>\n<li><strong>type</strong> - keep (this should not change for profiles or extensions)</li>\n<li><strong>baseDefinition</strong> - overwrite w/ the parent URL of the new profile/extension</li>\n<li><strong>derivation</strong> - set to constraint (so far, SUSHI only supports constraints)</li>\n<li><strong>snapshot</strong> - keep, but elements will obviously be overwritten by constraints</li>\n<li><strong>differential</strong> - clear, as the differential starts from scratch to reflect changes the profile has made to the parent</li>\n</ul>",
        "id": 186460459,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1579837218
    },
    {
        "content": "<p>When you're creating a new profile, you really shouldn't be starting by copying the original profile at all.  You should be setting all of the meta to the appropriate values for what you're creating - so copyright, jurisdiction, etc. shouldn't be clear - they really ought to be populated with what's correct for the artifact you're creating.  Also note that there are no defaults in FHIR.  You shouldn't ever start with a snapshot.</p>",
        "id": 186461126,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1579838101
    },
    {
        "content": "<p>What I mean by <em>clear</em> is that we clear them before we set them with the appropriate profile-specific metadata.  This means that in cases where there is metadata the profile does not specify, it's properly <em>not-specified</em> in the profile rather than inheriting it from the parent.</p>",
        "id": 186492523,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1579873382
    },
    {
        "content": "<p>I used to actually omit the inherited extension documentation stuff, since I agree that people don't want to see it, but I had to remove that special case logic as part of reconciliation with simplifier</p>",
        "id": 186529180,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579896443
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>When we create profiles, we start by cloning the base resource and then constraining it.</p>\n</blockquote>\n<p>Would be interesting to know if that's the approach that Forge takes - <span class=\"user-mention silent\" data-user-id=\"203235\">Ward Weistra</span> ? (BTW - is Michel Rutten still around?</p>\n</blockquote>\n<p>I'll check with <span class=\"user-mention\" data-user-id=\"221719\">@Abel Enthoven</span>! Michel is focusing on other projects right now.<br>\nOn the 'inherited extension documentation stuff': if we'd define fields like comment as not applicable to derived profiles we can of course change the snapshot logic to exclude them.</p>",
        "id": 186747344,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1580178173
    },
    {
        "content": "<p>Forge does 'whitelisting' as <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> suggested. The following properties are populated:</p>\n<ul>\n<li>type - copied from base</li>\n<li>url - initialized with an example URL</li>\n<li>status - initialized as 'draft'</li>\n<li>fhirVersion - copied from base</li>\n<li>kind - copied from base</li>\n<li>abstract - initialized as 'false'</li>\n<li>baseDefinition - initialized as {base.url}</li>\n<li>derivation - initialized as 'constraint'</li>\n<li>mapping - copied on user request (via setting)</li>\n</ul>\n<p>As to documentation in the elements: Clearing any documentation there would indeed mean those elements all need to be repeated in the differential (if we stick to the current snapshotting strategy). Apart from the huge differentials this may result in, I also think automatically clearing documentation in one of the elements changes the meaning of that element. One could argue the same goes for the general profile documentation, although the chances of a user not wanting to change those are very slim</p>",
        "id": 186766845,
        "sender_full_name": "Abel Enthoven",
        "timestamp": 1580204837
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"221719\">@Abel Enthoven</span> --that is helpful.  I think we'll align SUSHI/FSH with this.  I had actually just done an initial implementation last night that is extremely close to this, so I should only need to make a few tweaks.</p>",
        "id": 186786017,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580220871
    },
    {
        "content": "<p>One thing you didn't note was <code>context</code> or <code>contextInvariant</code>.  It seems to me that if someone profiles an Extension, it might make sense for the <code>context</code>/<code>contextInvariant</code> to default to that of the base.  E.g., if the parent applied to <code>Patient</code>, it seems unlikely that the child would apply to something else (except maybe a profile on Patient).  So for SUSHI, we'll probably copy those two from the base.</p>",
        "id": 186787192,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580221625
    },
    {
        "content": "<p>if an extension defines an context, a constraint on the extension can't specify a different context</p>",
        "id": 186817857,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580239211
    },
    {
        "content": "<p>To confirm, if you constrain an existing extension, you can't narrow the context for that constraint?</p>",
        "id": 186819709,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1580240390
    },
    {
        "content": "<p>you can narrow it. but not change it</p>",
        "id": 186820145,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580240627
    },
    {
        "content": "<p>I can confirm that <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> , context is also copied</p>",
        "id": 186871806,
        "sender_full_name": "Abel Enthoven",
        "timestamp": 1580293048
    }
]