[
    {
        "content": "<p>We are trying to add new functionality in Trifolia on FHIR to allow users to search  dependencies using the FHIR IG Registry definitions:<br>\n<a href=\"https://raw.githubusercontent.com/FHIR/ig-registry/master/fhir-ig-list.json\">https://raw.githubusercontent.com/FHIR/ig-registry/master/fhir-ig-list.json</a></p>\n<p>However, ImplementationGuide.dependsOn.uri needs to contain the cannonical URI of the target IGs ImplementationGuide resource (for US Core this is \"<a href=\"http://hl7.org/fhir/us/core/ImplementationGuide/hl7.fhir.us.core\">http://hl7.org/fhir/us/core/ImplementationGuide/hl7.fhir.us.core</a>\"), and that URI is not in the fhir-ig-list.json file. <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> is this something that could be added? If not, how do you recommend programatically discovering the cannonical URI of the ImplementationGuide resource for a specific version of a given IG? </p>\n<p>Adding <span class=\"user-mention\" data-user-id=\"191667\">@Arvind Jagannathan</span> and <span class=\"user-mention\" data-user-id=\"191505\">@Sean McIlvenna</span> for awareness.</p>",
        "id": 198486283,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1590176608
    },
    {
        "content": "<p>the dependsOn.uri is [canonical]/ImplementationGuide/[package] not including the version</p>",
        "id": 198500870,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1590185612
    },
    {
        "content": "<p>We can certainly work with that, but is it actually true, especially for historical IGs? <br>\nThe type for dependsOn.uri is canonical(ImplementationGuide), which I would assume equates to ImplementationGuide.url for the ImplementationGuide resource in that IG. </p>\n<p><a href=\"http://build.fhir.org/implementationguide.html\">http://build.fhir.org/implementationguide.html</a></p>\n<p>Have the ImplementationGuide resources for all historical IGs in the registry been updated to meet the convention you listed above, or does the IG Publisher just do it's own thing and ignore what is actually in ImplementationGuide.url (in which  case we should update the spec to reflect what is actually going on)?</p>",
        "id": 198772970,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1590504652
    },
    {
        "content": "<p>In SUSHI, we look up dependency IGs using their package ID and version -- then add them to the primary IG's ImplemenationGuide JSON using the URL specified in the dependency IGs' ImplementationGuide JSON files.  So far that's worked for us, but there may be edge cases we have not hit yet.</p>",
        "id": 198781713,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1590507857
    },
    {
        "content": "<p>the IG publisher used to just use [base]. Lloyd helpfully pointed out that this was illegal, so I had to change to using [base]/ImplementationGuide/[package-id]. Some old packages might exist that don't conform to this, but the IG publisher is pretty forgiving on this</p>",
        "id": 198830204,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1590532723
    },
    {
        "content": "<p>Ok, so the IG publisher uses [base]/ImplementationGuide/[package-id] which is good from our perspective as we can discover that info from the IG registry. However, seems that doesn't mean that an actual ImplementationGuide resource instance exists where ImplementationGuide.uri conforms to [base]/ImplementationGuide/[package-id], right? Not a problem for us, just an inconsistency to be aware of.</p>",
        "id": 199046816,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1590683785
    },
    {
        "content": "<p>it will be true going forward</p>",
        "id": 199067319,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1590692695
    }
]