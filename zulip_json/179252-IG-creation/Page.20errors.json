[
    {
        "content": "<p>I've got an IG resource with pages like this:</p>\n<p>&lt;page&gt;<br>\n    &lt;nameReference&gt;<br>\n        &lt;reference value=\"#6509\"/&gt;<br>\n        &lt;display value=\"Page content 6509\"/&gt;<br>\n    &lt;/nameReference&gt;<br>\n    &lt;title value=\"Introduction\"/&gt;<br>\n    &lt;generation value=\"markdown\"/&gt;<br>\n&lt;/page&gt;</p>\n<p>The reference points to a contained Binary resource within the IG resource itself. However, I am seeing the following in the QA file:</p>\n<p>Base IG resource      error      The page \"Introduction\" is missing a name/source element</p>\n<p>Pretty sure this is an IG Publisher error, since the page does have a name[x] element (in this case nameReference) which points to the source. <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ?</p>\n<p>Here is the QA log:</p>\n<p><a href=\"http://build.fhir.org/ig/HL7/davinci-ehrx/qa.html\" target=\"_blank\" title=\"http://build.fhir.org/ig/HL7/davinci-ehrx/qa.html\">http://build.fhir.org/ig/HL7/davinci-ehrx/qa.html</a></p>",
        "id": 160863084,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1552646055
    },
    {
        "content": "<p>I'll have a look</p>",
        "id": 160868928,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1552652062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> this is actually your code, for generating pages.json. It's not immediately obvious how this should be resolved</p>",
        "id": 160918651,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1552688869
    },
    {
        "content": "<p>If you're using my framework, it's not set up to handle that.  It presumes all pages are in a folder.  What you'd need to do is change the pre-process transform the manipulates the IG and split the binaries out into files in an appropriate folder and change the IG to have references to them.  (I'm not likely to have bandwidth to do it myself between now and Sunday.)  (I'm not sure that Eric's framework would be any happier...)</p>",
        "id": 160919783,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1552690080
    },
    {
        "content": "<p>The IG is not using your framework. So why is it an error?</p>",
        "id": 160919884,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1552690177
    },
    {
        "content": "<p>here are how I do STU3 pages ( inspired by Lloyd ):</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"c\">&lt;!-- ============ Home Page =============== --&gt;</span>\n  <span class=\"nt\">&lt;page&gt;</span>\n    <span class=\"nt\">&lt;source</span> <span class=\"na\">value=</span><span class=\"s\">&quot;index.html&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;title</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Home&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;kind</span> <span class=\"na\">value=</span><span class=\"s\">&quot;page&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"c\">&lt;!-- ============ Framework Page =============== --&gt;</span>\n    <span class=\"nt\">&lt;page&gt;</span>\n      <span class=\"nt\">&lt;source</span> <span class=\"na\">value=</span><span class=\"s\">&quot;framework.html&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;title</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Framework&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;kind</span> <span class=\"na\">value=</span><span class=\"s\">&quot;page&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;page&gt;</span>\n        <span class=\"nt\">&lt;source</span> <span class=\"na\">value=</span><span class=\"s\">&quot;guidance.html&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;title</span> <span class=\"na\">value=</span><span class=\"s\">&quot;General Guidance&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;kind</span> <span class=\"na\">value=</span><span class=\"s\">&quot;page&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/page&gt;</span>\n      <span class=\"nt\">&lt;page&gt;</span>\n        <span class=\"nt\">&lt;source</span> <span class=\"na\">value=</span><span class=\"s\">&quot;datax.html&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;title</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Data Exchange&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;kind</span> <span class=\"na\">value=</span><span class=\"s\">&quot;page&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/page&gt;</span>\n      <span class=\"nt\">&lt;page&gt;</span>\n        <span class=\"nt\">&lt;source</span> <span class=\"na\">value=</span><span class=\"s\">&quot;indv-reporting.html&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;title</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Individual Reporting&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;kind</span> <span class=\"na\">value=</span><span class=\"s\">&quot;page&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/page&gt;</span>\n      <span class=\"nt\">&lt;page&gt;</span>\n\n...\n</pre></div>\n\n\n<p>in R4 would be like </p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"c\">&lt;!-- ============ Home Page =============== --&gt;</span>\n  <span class=\"nt\">&lt;page&gt;</span>\n<span class=\"nt\">&lt;nameUrl</span> <span class=\"na\">value=</span><span class=\"s\">&quot;index.html&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;title</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Home&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;generation</span> <span class=\"na\">value=</span><span class=\"s\">&quot;markdown&quot;</span><span class=\"nt\">/&gt;</span>\n</pre></div>\n\n\n<p>so its a validating against the wrong version of ig.xml</p>",
        "id": 160920057,
        "sender_full_name": "Eric Haas",
        "timestamp": 1552690334
    },
    {
        "content": "<p>and I don't use the nameReference element either</p>",
        "id": 160920073,
        "sender_full_name": "Eric Haas",
        "timestamp": 1552690377
    },
    {
        "content": "<p>Grahame - how is the HTML page name of a generated page determined if the ImplementationGuide points to it as a contained resource rather than by URL?</p>",
        "id": 160920436,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1552690782
    },
    {
        "content": "<p>I'm wondering if we need something extra in the ImplementationGuide resource to tell us that.</p>",
        "id": 160920494,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1552690805
    },
    {
        "content": "<p>I can change the error to a warning for now, but I don't know what to spit out in the table of contents or in the file used for breadcrumbs.</p>",
        "id": 160920515,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1552690837
    },
    {
        "content": "<p>does the page get generated by Jekyll ?</p>",
        "id": 160920806,
        "sender_full_name": "Eric Haas",
        "timestamp": 1552691119
    },
    {
        "content": "<p>you could cycle through all the pages to find it.. and work backwards  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{%</span><span class=\"w\"> </span><span class=\"nt\">for</span><span class=\"w\"> </span>p<span class=\"w\"> </span>in<span class=\"w\"> </span>site.html_pages<span class=\"w\"> </span><span class=\"p\">%}</span>\n<span class=\"p\">{{</span><span class=\"nv\">p</span><span class=\"p\">}}</span>\n<span class=\"p\">{%</span><span class=\"w\"> </span><span class=\"nt\">endfor</span><span class=\"w\"> </span><span class=\"p\">%}</span>\n</pre></div>\n\n\n<p>???</p>\n<p>I like your first solution better.</p>",
        "id": 160921095,
        "sender_full_name": "Eric Haas",
        "timestamp": 1552691391
    },
    {
        "content": "<p>Jekyll can't see anything inside the ImplementationGuide instance - it needs all page content (markdown or HTML) to be a \"file\" in a folder it can manipulate.  The framework used for publishing implementation guides would have to take care of doing that.  My question is \"what should the filename be?\".  I guess we could use the convention of [Binary.id].[md/html - depending on the page type].  But I'm not super-thrilled with the id and filename needing to be the same.  <span class=\"user-mention\" data-user-id=\"191407\">@Rick Geimer</span>, what was your assumption around filenames in the published content here?</p>",
        "id": 160921308,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1552691607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191407\">@Rick Geimer</span> I think the challenge is that the IG publisher doesn't handle this approach generally, and so I have 2 questions - what do you think is going to happen generally, and why do it?</p>",
        "id": 160921365,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1552691647
    },
    {
        "content": "<p>but: this fails the definition of feature complete - we are not making structural changes at this time...</p>",
        "id": 160921387,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1552691683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> I think for now we should make this a warning as you suggested. The pages all render fine and show up in the table of contents, so I'm not sure why this is considered to be an error.  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  as for why we are using this approach, it is because it was actually the most straightforward way for <span class=\"user-mention\" data-user-id=\"191505\">@Sean McIlvenna</span> to add page support in Trifolia on FHIR, since we store everything as FHIR resources in HAPI vs. on a file system, so putting markdown content in contained Binary resources made this very easy, and it's a part of the spec...there was nothing in the spec that hinted that we shouldn't/couldn't use this approach.</p>",
        "id": 160933358,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1552709321
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> what do you mean when you say \"this fails the definition of feature complete\"? When you say \"this\" do you mean the IG Publisher, or are you saying that all the IGs we created with Trifolia on FHIR that use this approach are not feature complete even though build/render perfectly fine except for those error messages that should probably be warnings ? If the later, why?</p>",
        "id": 160933508,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1552709614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191407\">@Rick Geimer</span> - where do the filenames for the HTML come from?</p>",
        "id": 160933677,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1552709920
    },
    {
        "content": "<p>And how are you generating using Jekyll if the binaries are in the IG?</p>",
        "id": 160934144,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1552710730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191505\">@Sean McIlvenna</span> will have to reply with the details, but I believe that he creates the  file names from ImplementationGuide.page.title, swapping underscores for spaces, etc. Maybe I wasn't clear on this part, but when we export an IG Publisher package we extract the markdown into separate files in source/pages and then run the Jekyll, so the contained Binary resources are really just used for storage in HAPI.</p>",
        "id": 160934270,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1552710969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> See here for the example of what we export. It is basically using a slightly modified (and probably slightly outdated) version of Eric's framework. We plan to update the tool to support whatever the \"official\" HL7 framework will be once it is done.</p>",
        "id": 160934405,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1552711314
    },
    {
        "content": "<p><a href=\"https://github.com/HL7/davinci-ecdx\" target=\"_blank\" title=\"https://github.com/HL7/davinci-ecdx\">https://github.com/HL7/davinci-ecdx</a></p>",
        "id": 160934450,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1552711352
    },
    {
        "content": "<p>That doesn't really fly.  You've got a file that the publisher is using that the IG doesn't point to and you've got a file that the IG points to that isn't being used.  You're putting some of the publication process into the 'extract'.  If someone were to edit the content in the ImplementationGuide - which the ImplementationGuide says is where the page lives, then the publication process wouldn't work right.  The only way it could work is if they re-edited with your tool.  And the content in Git needs to be tool-independent.</p>",
        "id": 160934532,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1552711544
    },
    {
        "content": "<p>Grahame can decide whether to let that slide for this time around, but going forward, either the ImplementationGuide that's exported needs to point to the files, or the ImplementationGuide needs to contain the files and the IGPublisher 'framework' needs to handle the extraction for publication.</p>",
        "id": 160934594,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1552711642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191505\">@Sean McIlvenna</span> it would be good for you to chime in here. <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  I hope we can let it slide for this round, because all the Da Vinci IGs use this approach. We can certainly look at changing the export so that when we extract the markdown content to files we also change the ImplementationGuide resource to point to those files. I don't think that will be a huge effort, but Sean will have to respond if that's something we can reasonably do in a day.</p>",
        "id": 160934967,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1552712196
    },
    {
        "content": "<p>But if the framework will not support referenced Binary resources we should definitely consider deprecating that in ImplementationGuide, and noting that the use of that feature is not supported in the IG Publisher documentation. Right now everything published implies that it is a valid approach.</p>",
        "id": 160935041,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1552712328
    },
    {
        "content": "<p>well, if the IG publishes correctly now, then I'll let it go. but raising a structural error like this as a probem in the last week is what the feature complete thing is about - we don't do structural change in the IG publisher in the last few weeks before publication</p>",
        "id": 160935059,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1552712398
    },
    {
        "content": "<p>so you'll have to live with the errors/issues for now</p>",
        "id": 160935104,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1552712414
    },
    {
        "content": "<p>Ok, thanks Grahame, and we'll see what Sean says, we might be able to patch the ImplementationGuide export to make this issue go away now that we understand what the issue is.</p>",
        "id": 160935127,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1552712494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <br>\nSo just to clarify, where we currently have this:</p>\n<p>&lt;page&gt;<br>\n&lt;nameReference&gt;<br>\n&lt;reference value=\"#5767\"/&gt;<br>\n&lt;display value=\"Page content 5767\"/&gt;<br>\n&lt;/nameReference&gt;<br>\n&lt;title value=\"HRex Profiles\"/&gt;<br>\n&lt;generation value=\"markdown\"/&gt;<br>\n&lt;/page&gt;</p>\n<p>You are saying it needs to be this (where nameUrl contains the name of the extracted markdown file), right?</p>\n<p>&lt;page&gt;<br>\n&lt;nameUrl value=\"HRex_Profiles.md\"/&gt;<br>\n&lt;title value=\"HRex Profiles\"/&gt;<br>\n&lt;generation value=\"markdown\"/&gt;<br>\n&lt;/page&gt;</p>\n<p>Just want to make sure we get the fix correct.</p>",
        "id": 160936549,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1552715229
    },
    {
        "content": "<p>Worse case I can manually fix those ImplementationGuide resources if Sean can't get the code updated in time.</p>",
        "id": 160936605,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1552715306
    },
    {
        "content": "<p>All of mine use the equivalent of HRex_Profiles.html.  See what works...</p>",
        "id": 160936621,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1552715357
    },
    {
        "content": "<p>ok</p>",
        "id": 160936856,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1552715874
    },
    {
        "content": "<p>For the nameUrl. I use the html page too</p>",
        "id": 160958648,
        "sender_full_name": "Eric Haas",
        "timestamp": 1552755306
    },
    {
        "content": "<p>Not the markdown page.</p>",
        "id": 160958651,
        "sender_full_name": "Eric Haas",
        "timestamp": 1552755324
    },
    {
        "content": "<p>I was able to manually fix this and get a clean build, Sean is working on the code changes in Trifolia so we will be able to clear out these errors by the end of the day Sunday. </p>\n<p>However, I am now very confused about what nameUrl should contain. Should it be the file name of the HTML generated by Jekyll, or the markdown file that is used as input to Jekyll? Seems like we need both in the end if we will be relying on the ImplementationGuide resource for both generation and as a means to identify the resulting documentation. Any objections to me filing a change request against ImplementationGuide to add a source[x] field for the input data and clarifying that name[x] is for the output?</p>",
        "id": 160990477,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1552812656
    },
    {
        "content": "<p>The purpose of listing the pages is for the creation of the table of contents and determining hierarchy for breadcrumbs so what's needed is the output HTML names.  The input names don't matter if the files exist in one of the source folders so long as the framework takes care of making them .html or .md before Jekkyl runs.  However, if you're doing it by reference to source, then yes there'll need to be a name unless the convention we choose to adopt is that 'id' becomes name.</p>",
        "id": 161000470,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1552832376
    },
    {
        "content": "<p>A work-around has been made in Trifolia-on-FHIR, for now. But, nameReference should definitely be supported. Otherwise, why even have it?</p>",
        "id": 161070279,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1552924754
    },
    {
        "content": "<p>We'll support it - but there'll need to be a framework that can handle the extraction/retrieval of the references into something that Jekyll can access.  It'll have to be part of the IG publisher template work</p>",
        "id": 161089234,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1552937959
    }
]