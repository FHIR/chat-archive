[
    {
        "content": "<p>After working with <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> 's Capability Statement tools to generate CapStmts for Plan-Net, Carin-BB, and Formulary, I've gotten used to clear/complete HTML renderings of CapStmts within IGs.</p>\n<p>Could  use of the Jinja template that is used in Eric's tools to generate the text Div of the Capability statement be incorporated into the standard build IG build process so that all IGs would have clearly/completely rendered CapStmts?   (If I understood Python and Jinja better, I'd hand over a script to do this, but the best I can do is to point you to the J2 template <a href=\"https://github.com/saulakravitz/MyNotebooks/blob/saul/CapStatement/R4capabilitystatement-server.j2\">https://github.com/saulakravitz/MyNotebooks/blob/saul/CapStatement/R4capabilitystatement-server.j2</a> and a pure python version of the CapStmt script (<a href=\"https://github.com/saulakravitz/MyNotebooks/blob/saul/CapStatement/R4CapStatement_Maker.py\">https://github.com/saulakravitz/MyNotebooks/blob/saul/CapStatement/R4CapStatement_Maker.py</a> see lines 190-217 ).</p>",
        "id": 218355467,
        "sender_full_name": "Saul Kravitz",
        "timestamp": 1606775215
    },
    {
        "content": "<p>I'm not adding python dependency to the build process</p>",
        "id": 218355630,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1606775293
    },
    {
        "content": "<p>it looks like it could be a liquid template, which is currently supported</p>",
        "id": 218355716,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1606775353
    },
    {
        "content": "<p>So it is a \"simple\" matter of jinja-&gt;liquid transformation, and we'd all be reading beautiful CapStmts?</p>",
        "id": 218356534,
        "sender_full_name": "Saul Kravitz",
        "timestamp": 1606775786
    },
    {
        "content": "<p>maybe. What's the difference between what you get now and this one?</p>",
        "id": 218356592,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1606775831
    },
    {
        "content": "<p>what you get now comes from java code, which would also be improved</p>",
        "id": 218356608,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1606775843
    },
    {
        "content": "<p>Liquid template could be added to the build but there is not much value add<br>\nto this approach. The liquid templating language is pretty similar but<br>\ndoesn't support as many filters and python specific methods.  I don't know<br>\nhow the ig-publisher's narrative engine works, but assume is some type of<br>\ntemplating language based on the resource content.</p>\n<p>Eric M Haas, DVM, MS<br>\nHealth eData Inc<br>\n35 Crescent Avenue, Sausalito, CA 94965</p>",
        "id": 218360130,
        "sender_full_name": "Eric Haas",
        "timestamp": 1606778223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>   compare/contrast  ... two different IGs, but even so, the difference in readability is evident.<br>\n1) Eric's Jinja output -- <a href=\"https://build.fhir.org/ig/HL7/davinci-pdex-formulary/CapabilityStatement-usdf-server.html\">https://build.fhir.org/ig/HL7/davinci-pdex-formulary/CapabilityStatement-usdf-server.html</a><br>\n2) Publisher's IG rendering : <a href=\"http://build.fhir.org/ig/HL7/davinci-epdx/CapabilityStatement-pdex-server.html\">http://build.fhir.org/ig/HL7/davinci-epdx/CapabilityStatement-pdex-server.html</a></p>",
        "id": 218380644,
        "sender_full_name": "Saul Kravitz",
        "timestamp": 1606798209
    },
    {
        "content": "<p>this is not really a fair comparison, given the size difference between the statements. I certainly couldn't like to have to sort through 20x the same information wondering whether anything was different between them </p>\n<p>OTOH, I could certainly process the markdown...</p>",
        "id": 218381247,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1606799016
    },
    {
        "content": "<p>I'll do that. Otherwise I'm  interested in comments about this</p>",
        "id": 218381252,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1606799037
    },
    {
        "content": "<p>Agree that it is not a fair comparison.</p>",
        "id": 218423722,
        "sender_full_name": "Saul Kravitz",
        "timestamp": 1606830628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> - In general, how would you suggest that an IG improve upon the default rendering of resources for its examples?   <br>\nFood for thought can be found in the RTPBC IG -- <a href=\"https://build.fhir.org/ig/HL7/carin-rtpbc/Claim-rtpbc-claim-03.html\">https://build.fhir.org/ig/HL7/carin-rtpbc/Claim-rtpbc-claim-03.html</a> -- and the CarinBB IG -- <a href=\"http://build.fhir.org/ig/HL7/carin-bb/ExplanationOfBenefit-EOBOutpatientInstitutional1.html#notes\">http://build.fhir.org/ig/HL7/carin-bb/ExplanationOfBenefit-EOBOutpatientInstitutional1.html#notes</a></p>",
        "id": 218428225,
        "sender_full_name": "Saul Kravitz",
        "timestamp": 1606832803
    },
    {
        "content": "<p>in principle there are the following options for this:</p>\n<ul>\n<li>write your own narrative</li>\n<li>propose changes to the general rendering that the IG publisher does</li>\n<li>write your own liquid templates </li>\n<li>submit a liquid template to the core template</li>\n</ul>",
        "id": 218477741,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1606854918
    },
    {
        "content": "<p>Here is a fair bakeoff, admittedly a bit historical.   I struggled to find \"good\" capability statement examples:</p>\n<ul>\n<li>original VhDir CapStmt as rendered with default rendering.  <a href=\"https://build.fhir.org/ig/HL7/VhDir/CapabilityStatement-vhdir-server.html\">https://build.fhir.org/ig/HL7/VhDir/CapabilityStatement-vhdir-server.html</a></li>\n<li>re-rendered VhDir CapStmt as rendered with <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> tools   <a href=\"https://healthedata1.github.io/Sushi-Sandbox/CapabilityStatement-vhdir-server.html\">https://healthedata1.github.io/Sushi-Sandbox/CapabilityStatement-vhdir-server.html</a>   (Thanks Eric!)</li>\n</ul>",
        "id": 218509697,
        "sender_full_name": "Saul Kravitz",
        "timestamp": 1606877409
    },
    {
        "content": "<p>i'm interested in other people's opinions on this before I invest time in prettifying the CapabilityStatement rendering</p>",
        "id": 218615307,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1606941195
    },
    {
        "content": "<p>There are couple of other considerations:</p>\n<p>Option of using my Jupyter Binder that can be used to upload your CapStatement and provide the IG package to generate and add this narrative to your CS  -  its  a bit rough and the user interface needs work.  (This narrative is focused only on Rest and biased to search and is limited to CapStatements that don't have primitive extensions due the PYFHIR model (hope to get that fixed soon). </p>\n<p>See if Sushi wants to integrate it <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> ?</p>\n<p>The CapStatement is going to undergo radical transformation ( I don't know if there are going to be 2 to choose from or a new one) so the work now may be better spent on the new one.</p>",
        "id": 218616977,
        "sender_full_name": "Eric Haas",
        "timestamp": 1606941908
    },
    {
        "content": "<p>I'll still have to maintain publishing on the old one for years, no matter how much it changes</p>",
        "id": 218617140,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1606941989
    },
    {
        "content": "<p>I'd be for some change in default narrative generation for CapabilityStatements.  On simple ones (e.g., the one <a href=\"http://build.fhir.org/ig/HL7/fhir-subscription-backport-ig/CapabilityStatement-backport-subscription-server.html\">here</a>), the current generated narrative looks like it's wrong / incomplete.  I was considering adding the narrative by hand, but getting it to match the template isn't quick work (without a tool like Eric's) and makes it easy to get out of sync.</p>",
        "id": 218619388,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1606943040
    },
    {
        "content": "<p>In IHE we are mostly calling for each Actor within an Implementation Guide to be defined by a CapabilityStatement. Thus the dominant case is that a capabilityStatement is used to define an actor... However that is not the full story as for any transaction that is based on query parameters, these are also defined in a capabilityStatement... thus I would like to have at least two different types of rendering of a capabilityStatement.</p>",
        "id": 218620610,
        "sender_full_name": "John Moehrke",
        "timestamp": 1606943648
    },
    {
        "content": "<p>Having an easy to read and <strong>complete</strong> rendering of the CapStmt will increase the probability that the CapStmt gets proper review during the IG development process, and thus increase IG quality.   I think it is as essential as the differential views of the profiles for effective review.</p>\n<p>Based on my \"vast\" experience working on 3 IGs (Plan-net, formulary, and carin-bb) my sense is that IG reviewers only read HTML, not JSON.   I received zero comments on the v1.0.0 formulary CapStmt (which was poorly done, and has been corrected since), and no comments on the Plan-Net capability statement during ballot, not even a comment \"where the hell is your capability statement?\", since we didn't have one.   On Carin-bb Having a complete HTML rendering of the CapStmt comment enabled reviewers to comment during the reconciliation process.</p>",
        "id": 218620839,
        "sender_full_name": "Saul Kravitz",
        "timestamp": 1606943775
    },
    {
        "content": "<p>an Actor in IHE is a particular case of a CapStatement.</p>",
        "id": 218629840,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1606948373
    },
    {
        "content": "<p>(the transaction may or not be a capstatement). But there are other cases.</p>",
        "id": 218629963,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1606948443
    },
    {
        "content": "<p>Should we handle different rendering depending on CapabilityStatement.kind?</p>",
        "id": 218630579,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1606948818
    },
    {
        "content": "<p>If we're going to tackle rendering of CapStatement, it'd be good to think about a modular/plugable way of doing that that reflects the modular/plugable way we're expecting it to work long-term.  My initial impression of the revised rendering is that it seems <em>really</em> heavy on \"how does search work\" and doesn't talk about other capabilities.</p>",
        "id": 218639560,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1606954985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> -- regarding SUSHI integration of <code>CapabilityStatement</code> (or <code>CapabilityStatement2</code>), our thinking is that the parameterized rulesets (proposed for FSH STU2) will actually mitigate the need for a special FSH syntax to support <code>CapabilityStatement</code>s (and other not-yet-FSHified conformance resources).  See the <a href=\"https://fshschool.org/downloads/sept-2020-fsh-tutorial-part-3.pdf\">Wicked Fish</a> slides for an example of how parameterized rulesets can be applied to the current <code>CapabilityStatement</code> resource.  I expect (or hope) that something similar would apply to any other changes in <code>CapabilityStatement</code>.</p>",
        "id": 218644337,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1606959455
    },
    {
        "content": "<p>I was thinking of integration of Jinja2 or othe rendering templates for the completed CS to generate pretty narratives.</p>\n<p>Eric</p>\n<p>Eric M Haas, DVM, MS<br>\nHealth eData Inc<br>\n35 Crescent Avenue, Sausalito, CA 94965</p>",
        "id": 218649065,
        "sender_full_name": "Eric Haas",
        "timestamp": 1606964881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  your stylesheet was the inspiration and starting point for this template</p>",
        "id": 218649833,
        "sender_full_name": "Eric Haas",
        "timestamp": 1606965779
    },
    {
        "content": "<p>I would like there to be <em>one</em> language that we use to write renderers in.  Given that we already use liquid, my preference would be to stick with that (and perhaps add a few plugins to add extra capabilities).  What I don't want is some IGs or templates that use Liquid, some that use Jinja, some that use XSLT, some that use something else.  So lets figure out the desired feature set of what the renders need to be able to do and choose the minimal technical solution that will enable that - and then use it for everything.</p>",
        "id": 218652430,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1606969337
    },
    {
        "content": "<p>let me know what you think can't be done with liquid</p>",
        "id": 218747738,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1607026189
    },
    {
        "content": "<p>Getting the links correct would be the trickiest part for me.  I render using mapping files I derived from the package. which means the CS narrative is generated after the build is created.    So is much easier to do it outside the build....</p>",
        "id": 218750891,
        "sender_full_name": "Eric Haas",
        "timestamp": 1607027845
    },
    {
        "content": "<p>I create the CS and narrative in one go</p>",
        "id": 218751060,
        "sender_full_name": "Eric Haas",
        "timestamp": 1607027910
    },
    {
        "content": "<p>much easier to do it in the build where you can delegate the links to the publisher</p>",
        "id": 218753675,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1607029197
    },
    {
        "content": "<p>Build creates zips.  So it needs to be done as part of the build</p>",
        "id": 218771110,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1607039109
    },
    {
        "content": "<p>Current approach:   Build with everything but the capstmt, get the mapping files from the build, update capstmt, rebuild.</p>",
        "id": 219254341,
        "sender_full_name": "Saul Kravitz",
        "timestamp": 1607457587
    }
]