[
    {
        "content": "<p>hi would anyone know what has happended around use of hl7.fhir.template in IG build?  is causing errors now such as: <br>\nSee examples: <a href=\"http://build.fhir.org/ig/HL7/fhir-eyecare-ig/branches/master/failure/build.log\">http://build.fhir.org/ig/HL7/fhir-eyecare-ig/branches/master/failure/build.log</a> <a href=\"http://build.fhir.org/ig/HL7/carin-bb/branches/master/failure/build.log\">http://build.fhir.org/ig/HL7/carin-bb/branches/master/failure/build.log</a> and <a href=\"http://build.fhir.org/ig/HL7/fhir-ipa/branches/master/failure/build.log\">http://build.fhir.org/ig/HL7/fhir-ipa/branches/master/failure/build.log</a>  - failing now with <br>\nPublishing Content Failed: 'version' must be defined in ig.ini.  e.g. '2.0'   <br>\nlast two were rebuilds of IGs building okay</p>",
        "id": 248292524,
        "sender_full_name": "Brett Esler",
        "timestamp": 1628032634
    },
    {
        "content": "<p>fhir.base.template is working fine...</p>",
        "id": 248292651,
        "sender_full_name": "Brett Esler",
        "timestamp": 1628032714
    },
    {
        "content": "<p>I have no idea.  The HL7 template shows as having been rebuilt an hour ago, but there's been no commits to it since June...</p>",
        "id": 248293482,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628033445
    },
    {
        "content": "<p>Everything since the FHIR/hl7-if-template rebuild is failing.</p>",
        "id": 248294283,
        "sender_full_name": "Corey Spears",
        "timestamp": 1628034190
    },
    {
        "content": "<p>I'm working on it, but totally confused at the moment...</p>",
        "id": 248308200,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628048998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248736\">@Mark Iantorno</span> I think something is hosed with the package server.  It's serving up an ancient version of the base template as 'current' - even though I've pushed the new version a couple of times, including incrementing the package identifier once.  I have no idea what caused the problem.  (Even more bizarre is that the hl7 template was built earlier today even though there were no commits for it.  That seems to be what triggered the change.  I've pushed updates to the HL7 template, but that hasn't helped.  Not sure what to do to fix this.  (But given that ballot is opening soon, fixing is pretty urgent...)</p>",
        "id": 248309787,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628051467
    },
    {
        "content": "<p>Please try clearing your local package cache first, and seeing if that makes a difference. If not, I may have to publish another package to make it trigger as new.</p>",
        "id": 248338996,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628077564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248736\">@Mark Iantorno</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> Clearing the package cache didn't make any difference.  I'm still seeing the same <code>'version' must be defined in ig.ini.  e.g. '2.0'</code> as before.</p>",
        "id": 248340684,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1628078680
    },
    {
        "content": "<p>hrm, no good. <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> have any changes to packages been made recently? I have not touched them</p>",
        "id": 248340761,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628078736
    },
    {
        "content": "<p>This is breaking the build for the SMART Health Card IG. I removed <code>~/.fhir</code> and <code>input-cache/</code>, which didn't help.</p>",
        "id": 248350241,
        "sender_full_name": "Max Masnick",
        "timestamp": 1628084075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203235\">@Ward Weistra</span> any idea why this might be happening on the package server?</p>",
        "id": 248350931,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628084381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248736\">@Mark Iantorno</span> I don't think the template is served by the package registry. (And I'm personally happy about that, because it's really meant for FHIR packages, not a general purpose file sharing system). Only thing template related is a Swiss one: <a href=\"https://simplifier.net/packages?Text=template\">https://simplifier.net/packages?Text=template</a> / <a href=\"https://registry.fhir.org/results?query=%22template%22\">https://registry.fhir.org/results?query=%22template%22</a></p>\n<p>It doesn't seem to come from the backup packages server either: <a href=\"http://packages2.fhir.org/packages/catalog?op=find&amp;name=template\">http://packages2.fhir.org/packages/catalog?op=find&amp;name=template</a></p>\n<p>Perhaps it's somewhere in the IG Publisher's code where it gets those templates from? <a href=\"https://github.com/HL7/fhir-ig-publisher/search?q=template\">https://github.com/HL7/fhir-ig-publisher/search?q=template</a> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 248352961,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1628085413
    },
    {
        "content": "<p>The package ends up in the cache, and it depends on the notion of referencing 'current' vs. a specific version, so I don't know how it could <em>not</em> depend on the package registry.  Changes to templates are shared when they get pushed to the master branch and trigger the CI-build hook, which also says that it's leveraging the package infrastructure.</p>\n<p>The issue triggered when something caused the HL7 template to build on the CI build server.  That build was not triggered by a commit.  (The most recent commit on that template was from June and the problem didn't manifest until late yesterday.)  I've since tried a couple of commits to try to force an update to the package, but no dice so far.  I know I didn't manually trigger the build that made it fail.</p>",
        "id": 248354538,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628086118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> can you link the build to me please</p>",
        "id": 248354638,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628086169
    },
    {
        "content": "<p>the one that caused this</p>",
        "id": 248354651,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628086175
    },
    {
        "content": "<p>I don't know how to see historical builds.  The link I use to see things (<a href=\"https://fhir.github.io/auto-ig-builder/builds.html\">https://fhir.github.io/auto-ig-builder/builds.html</a>) only shows the most recent and, as best I can tell, new builds wipe old ones.</p>",
        "id": 248355178,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628086394
    },
    {
        "content": "<p>and this one \"HL7 / ig-template-hl7\" is the one that is causing this error?</p>",
        "id": 248355325,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628086444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> The registry currently also has no notion of <code>current</code> versions. That's currently something only implemented in the IG publisher to get IGs from the build server (and, it seems, templates).</p>",
        "id": 248355470,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1628086510
    },
    {
        "content": "<p>The symptom is that new builds using the HL7 template (not the base template) are inheriting an ancient version of the base template.  Because the issue triggered when the HL7 template built, I presume the problem is there, but rebuilding the HL7 template didn't fix the problem.</p>",
        "id": 248355762,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628086640
    },
    {
        "content": "<p>Let me check if it is still marked as \"current\" in the repo</p>",
        "id": 248355910,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628086695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203235\">@Ward Weistra</span> - the 'current' versions certainly show up in the package cache:<br>\n<a href=\"/user_uploads/10155/pzsSOU0pNQw0lb8lJnv9NF9j/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/pzsSOU0pNQw0lb8lJnv9NF9j/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/pzsSOU0pNQw0lb8lJnv9NF9j/image.png\"></a></div>",
        "id": 248356034,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628086765
    },
    {
        "content": "<p>Are the registry and the package server the same thing?  I thought they were different...</p>",
        "id": 248356122,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628086803
    },
    {
        "content": "<p>Okay, but this started happening when?</p>",
        "id": 248356176,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628086817
    },
    {
        "content": "<p>Like the last couple days right?</p>",
        "id": 248356189,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628086824
    },
    {
        "content": "<p>I was able to build our IG successfully this time yesterday</p>",
        "id": 248356305,
        "sender_full_name": "Max Masnick",
        "timestamp": 1628086883
    },
    {
        "content": "<p>If it just started happening, then we can rule out the IG-Publisher being the issue, because it was last published 16 days ago, by me...and that was just a versioning update to align with the code.</p>",
        "id": 248356326,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628086896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> Depends on how you name it, but <a href=\"http://registry.fhir.org\">registry.fhir.org</a> (which calls itself the FHIR Package Registry) is the UI on top of the FHIR Package API (<a href=\"http://packages.fhir.org\">packages.fhir.org</a>).<br>\nAnd indeed, the IG Publisher is storing the <code>current</code> and <code>dev</code> versions in the same package cache. But it's not getting them from <a href=\"http://packages.fhir.org\">packages.fhir.org</a>.</p>",
        "id": 248356446,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1628086933
    },
    {
        "content": "<p>So, the version is set to null for \"HL7 / ig-template-hl7\"</p>",
        "id": 248356599,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087004
    },
    {
        "content": "<p>and \"HL7 / ig-template-base\"</p>",
        "id": 248356625,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087015
    },
    {
        "content": "<p>I can see that here: <a href=\"https://fhir.github.io/auto-ig-builder/builds.html\">https://fhir.github.io/auto-ig-builder/builds.html</a></p>",
        "id": 248356645,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087026
    },
    {
        "content": "<p>by hovering my mouse over the build link</p>",
        "id": 248356666,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087036
    },
    {
        "content": "<p>This might be the source of the issue</p>",
        "id": 248356718,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087045
    },
    {
        "content": "<p>It's possible that a semi-recent change to the publisher is causing the version to not get set properly and when someone somehow triggered a rebuild of the template, the version got wiped - and subsequent builds aren't fixing it because they're using the new version of the publisher?</p>",
        "id": 248356925,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628087146
    },
    {
        "content": "<p>That's an easy test</p>",
        "id": 248357038,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087176
    },
    {
        "content": "<p>try it with an old publisher version</p>",
        "id": 248357055,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087182
    },
    {
        "content": "<p>Can you please try <a href=\"https://github.com/HL7/fhir-ig-publisher/releases/tag/1.1.76\">https://github.com/HL7/fhir-ig-publisher/releases/tag/1.1.76</a></p>",
        "id": 248357110,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087212
    },
    {
        "content": "<p>How do I trigger a CI-build using an old publisher?</p>",
        "id": 248357867,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628087503
    },
    {
        "content": "<p>You would have to do this locally</p>",
        "id": 248357939,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087524
    },
    {
        "content": "<p>Is that not possible?</p>",
        "id": 248357996,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087542
    },
    {
        "content": "<p>I tried that locally yesterday without success. I just tried with 1.1.75 and still getting the error. (Even after clearing  template folder)</p>",
        "id": 248358058,
        "sender_full_name": "Corey Spears",
        "timestamp": 1628087573
    },
    {
        "content": "<p>I don't have a problem locally, though I could try wiping my cache</p>",
        "id": 248358080,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628087581
    },
    {
        "content": "<p>Please try building locally <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> with both versions</p>",
        "id": 248358115,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191529\">@Corey Spears</span> This would be building the template, not the IG</p>",
        "id": 248358116,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628087600
    },
    {
        "content": "<p>The thing is, building locally will give me a #dev version, not a #current version</p>",
        "id": 248358170,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628087622
    },
    {
        "content": "<p>Also, templates don't really 'build'.  The CI-build process just sort of magically packages them.  I don't think that bit runs locally.</p>",
        "id": 248358390,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628087703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> You set up this CI for building the IGs, can you assist?</p>",
        "id": 248358465,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087739
    },
    {
        "content": "<p>I am getting the error when building an IG locally.</p>\n<p>Load Template from hl7.fhir.template#current                                     (00:05.0194)<br>\nPre-Process: /Users/cspears/dev/fhir/fsh/PACIO/pacio-adi/input/pagecontent = _includes | null</p>\n<p>onLoad.setup:<br>\nPublishing Content Failed: 'version' must be defined in ig.ini.  e.g. '2.0'      (00:07.0896)</p>",
        "id": 248358562,
        "sender_full_name": "Corey Spears",
        "timestamp": 1628087767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> I think the ask is to be able to pass a parameter in the hook URL that would indicate the version of the publisher to download</p>",
        "id": 248358922,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628087912
    },
    {
        "content": "<p>First I would like to know what changed.</p>",
        "id": 248358968,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087928
    },
    {
        "content": "<p>Templates are unchanged. Publisher is unchanged.</p>",
        "id": 248359027,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087950
    },
    {
        "content": "<p>Something has changed that is now causing the dependency not to resolve correctly.</p>",
        "id": 248359079,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628087970
    },
    {
        "content": "<p>I know that this affects people's current work, but we need to understand what changed to cause this before we start putting in any quick fixes to get it to work.</p>",
        "id": 248359203,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628088007
    },
    {
        "content": "<p>If we can't get this resolved by 4-5 EST, I will call Grahame.</p>",
        "id": 248359616,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628088182
    },
    {
        "content": "<p>Not sure if this is useful, but the template build (FHIR/hl7-ig-template: master rebuilt) that the trouble started happening was at 10:00pm UTC on Tuesday 2021-08-03.</p>",
        "id": 248359656,
        "sender_full_name": "Corey Spears",
        "timestamp": 1628088199
    },
    {
        "content": "<p>Which, again, is strange because that package hasn't been updated since Sept 2019.</p>",
        "id": 248359905,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628088305
    },
    {
        "content": "<p>The build log for my IG (VRDR) fails at a point marked as \"onLoad.r5-schemas:\". Is the on loading of R5 schemas a new step in the build logic? Is it a necessary step for IGs still on R4 and not pre-adopting features of R5? Please excuse me if this is unrelated. I am grasping for straws. The ballot content deadline in looming and I can't move forward until this issue is resolved. Thanks for understanding.</p>",
        "id": 248365052,
        "sender_full_name": "AbdulMalik Shakir",
        "timestamp": 1628090421
    },
    {
        "content": "<p>YOur build is trying to fetch <a href=\"https://build.fhir.org/ig/HL7/vrdr/fhir-single.xsd\">https://build.fhir.org/ig/HL7/vrdr/fhir-single.xsd</a> when it should be looking for <a href=\"https://build.fhir.org/fhir-single.xsd\">https://build.fhir.org/fhir-single.xsd</a>.  Something has been set that's overriding the location of that file.</p>",
        "id": 248365964,
        "sender_full_name": "David Pyke",
        "timestamp": 1628090835
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"192587\">@David Pyke</span> for clarifying the issue. Is there anything that I can do about it?</p>",
        "id": 248366895,
        "sender_full_name": "AbdulMalik Shakir",
        "timestamp": 1628091276
    },
    {
        "content": "<p>I'm not sure.  <span class=\"user-mention\" data-user-id=\"248736\">@Mark Iantorno</span> ?</p>",
        "id": 248367155,
        "sender_full_name": "David Pyke",
        "timestamp": 1628091415
    },
    {
        "content": "<p>No clue, but this is a different issue, so can we move the discussion to a separate thread please.</p>",
        "id": 248367262,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628091478
    },
    {
        "content": "<p>In case it helps diagnose what's going on, switching from <code>hl7.fhir.template#current</code> to <code>hl7.base.template#current</code> allows my local build to successfully complete</p>",
        "id": 248368951,
        "sender_full_name": "Max Masnick",
        "timestamp": 1628092286
    },
    {
        "content": "<p>The version of the template that it's running is ancient - which is why the locations are wrong and why it's yelling about something not being in the ig.ini that we haven't expected to be in the ig.ini for over a year.</p>",
        "id": 248370331,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628092957
    },
    {
        "content": "<blockquote>\n<p>@Josh Mandel I think the ask is to be able to pass a parameter in the hook URL that would indicate the version of the publisher to download</p>\n</blockquote>\n<p>Is there a list of allowed values? Otherwise that's totally unsafe.</p>",
        "id": 248371614,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628093592
    },
    {
        "content": "<p>Is the wrong default being chosen or is the problem that different projects need different defaults?</p>",
        "id": 248371671,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628093623
    },
    {
        "content": "<p>And just to be clear, this isn't an issue specific to the auto-build pipeline right? (I made some updates a couple of weeks ago to the terminology server URL and then reverted and I'm pretty sure that wouldn't have been able to mess anything up, but if the auto-build is having new issues, I'll review that more carefully.)</p>",
        "id": 248371911,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628093735
    },
    {
        "content": "<p>Thanks Josh</p>",
        "id": 248374684,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628095049
    },
    {
        "content": "<p>We don't actually know what's causing the issue.  The desire is to be able to pass in the version to retrieve, not allow execution of any publisher whatsoever.  So the risk should be relatively low</p>",
        "id": 248374799,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628095094
    },
    {
        "content": "<p>Passing in a version of the publisher... the publisher is a <code>.jar</code> file that the auto-build pipeline executes, right? Like <a href=\"https://github.com/FHIR/auto-ig-builder/blob/master/triggers/ig-commit-trigger/index.js#L47-L50\">https://github.com/FHIR/auto-ig-builder/blob/master/triggers/ig-commit-trigger/index.js#L47-L50</a> is how this is controlled today -- hard-coded in the auto-build trigger. The build environment then downloads and runs this file.</p>",
        "id": 248376174,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628095754
    },
    {
        "content": "<p>So you're saying we can just put the version on the end now and it'll work?</p>",
        "id": 248376328,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628095826
    },
    {
        "content": "<p>Not at all. I'm saying the current trigger has a hard-coded value that caller's can't affect.</p>",
        "id": 248376733,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628096023
    },
    {
        "content": "<p>And that's very much intentional, because <em>anyone in the world</em> can trigger a build.</p>",
        "id": 248376817,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628096046
    },
    {
        "content": "<p>If <code>https://github.com/HL7/fhir-ig-publisher/releases/latest/download/publisher.jar</code> isn't the right value to use for the publisher JAR, I can update this or I can create a small set of \"allowed\" values that the caller could choose among.</p>",
        "id": 248376870,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628096088
    },
    {
        "content": "<p>We obviously don't want to retrieve and execute any ol' jar, but the potential values will be continuing to change as more profile releases are made. Would it be possible to restrict it to a base url <code>https://github.com/HL7/fhir-ig-publisher/releases/</code>, since that is controlled? Or perhaps you could work some magic to enable the last X versions.</p>",
        "id": 248381028,
        "sender_full_name": "Corey Spears",
        "timestamp": 1628097996
    },
    {
        "content": "<p>For anyone who needs a local build to work with the correct template, the following work-around works for me:</p>\n<ol>\n<li>Download <a href=\"https://github.com/HL7/ig-template-fhir/archive/master.zip\">https://github.com/HL7/ig-template-fhir/archive/master.zip</a> and unzip</li>\n<li>Rename unzipped folder to <code>hl7.fhir.template#0.3.2</code></li>\n<li>Place in <code>~/.fhir/packages</code></li>\n<li>Change IG to use <code>\"hl7.fhir.template\": \"0.3.2\"</code> rather than <code>\"hl7.fhir.template\": \"current\"</code></li>\n</ol>",
        "id": 248384373,
        "sender_full_name": "Max Masnick",
        "timestamp": 1628099639
    },
    {
        "content": "<p>Ok, I've figured out at least part of the cause.  The <a href=\"https://build.fhir.org/ig/qas.json\">https://build.fhir.org/ig/qas.json</a> maintained by the CI-build process has <em>three</em> entries for id hl7.fhir.template:</p>\n<p>{<br>\n    \"url\": \"<a href=\"http://github.com/FHIR/hl7-ig-template\">http://github.com/FHIR/hl7-ig-template</a>\",<br>\n    \"package-id\": \"hl7.fhir.template\",<br>\n    \"ig-ver\": \"0.0.2\",<br>\n    \"date\": \"Thu, 17 Oct, 2019 01:27:56 +0000\",<br>\n    \"version\": \"4.1.0\",<br>\n    \"tool\": \"4.1.0 (3)\",<br>\n    \"repo\": \"FHIR/hl7-ig-template/branches/healthedata1-test-pr/qa.json\"<br>\n  },<br>\n{<br>\n    \"url\": \"<a href=\"http://github.com/FHIR/hl7-ig-template\">http://github.com/FHIR/hl7-ig-template</a>\",<br>\n    \"package-id\": \"hl7.fhir.template\",<br>\n    \"ig-ver\": \"0.0.2\",<br>\n    \"date\": \"Thu, 17 Oct, 2019 01:27:56 +0000\",<br>\n    \"version\": \"4.1.0\",<br>\n    \"tool\": \"4.1.0 (3)\",<br>\n    \"repo\": \"FHIR/hl7-ig-template/branches/healthedata1-test-pr/qa.json\"<br>\n  },<br>\n{<br>\n    \"url\": \"<a href=\"http://github.com/FHIR/hl7-ig-template\">http://github.com/FHIR/hl7-ig-template</a>\",<br>\n    \"package-id\": \"hl7.fhir.template\",<br>\n    \"ig-ver\": \"0.0.2\",<br>\n    \"date\": \"Tue, 03 Aug, 2021 21:59:55 +0000\",<br>\n    \"version\": \"4.6.0\",<br>\n    \"tool\": \"4.6.0 (3)\",<br>\n    \"repo\": \"FHIR/hl7-ig-template/branches/master/qa.json\"<br>\n  },</p>\n<p>It's that last one that I think triggered the problem.  I had <em>thought</em> we had code that hard-coded what repositories 'trusted' templates were allowed to be loaded from.  (We certainly need to have that.)  However, I haven't found where that code is or figured out why it didn't keep a build fired against the wrong template repository from updating our official template.</p>",
        "id": 248384491,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628099698
    },
    {
        "content": "<p>Correcting the issue should just be a matter of pushing a new update to the 'official' template, but I'm holding off on doing that in case there's any more diagnostic information we want to grab before doing so</p>",
        "id": 248384575,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628099741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248736\">@Mark Iantorno</span> ?</p>",
        "id": 248384588,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628099749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> - I think this means we don't need to change the CI build process, at least not urgently.</p>",
        "id": 248384661,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628099771
    },
    {
        "content": "<p>I can do a publish for templates...however</p>",
        "id": 248384813,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628099859
    },
    {
        "content": "<p>when was this changed? Why is it only causing an issue now</p>",
        "id": 248384830,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628099871
    },
    {
        "content": "<p>Well, the last entry was created yesterday afternoon (around 5 Eastern).  How that build got triggered, I don't know.  There was no new commit on the <a href=\"http://github.com/FHIR/hl7-ig-template\">http://github.com/FHIR/hl7-ig-template</a> project.  Last commit was actually Sept. 2019.</p>",
        "id": 248385791,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628100319
    },
    {
        "content": "<p>So, what I'm trying to figure out is if this is actually caused by the fact there are three entries for id hhl7.fhir.template? Where can I see a changelog for that file? Who/what edits it?</p>",
        "id": 248386025,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628100422
    },
    {
        "content": "<p>does <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> know? It seems to have some linkage to his fork.</p>",
        "id": 248386186,
        "sender_full_name": "John Moehrke",
        "timestamp": 1628100492
    },
    {
        "content": "<p>is there any audit on the IG dashboard? someone might have used that to kick a build?</p>",
        "id": 248387244,
        "sender_full_name": "John Moehrke",
        "timestamp": 1628100974
    },
    {
        "content": "<p>His fork was from 2 years ago.  The recent build - the one yesterday - was against the master branch of the old repo.  I don't know how it got triggered though</p>",
        "id": 248389016,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628101841
    },
    {
        "content": "<p>yup, I looked at his repo and it had not changed either. hence why I wondered about the IG build dashboard</p>",
        "id": 248389355,
        "sender_full_name": "John Moehrke",
        "timestamp": 1628101981
    },
    {
        "content": "<p>can we trigger a build from the new build?  would that \"fix\" the problem?  and then we can try and figure out how the old repo had a build triggered?</p>",
        "id": 248389396,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1628102000
    },
    {
        "content": "<blockquote>\n<p>can we trigger a build from the new build? would that \"fix\" the problem?</p>\n</blockquote>\n<p>Anyone can re-trigger a build; this is by design. If the  system can break when old content is re-built, it will be unreliable.</p>",
        "id": 248389452,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628102027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span> that seems worth poking at.</p>",
        "id": 248389483,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628102040
    },
    {
        "content": "<p>Yes, I can.  I'm holding off to see if <span class=\"user-mention\" data-user-id=\"248736\">@Mark Iantorno</span> wants to grab any further information before I do so.</p>",
        "id": 248389493,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628102043
    },
    {
        "content": "<p>I can also remove the old project so it can't be build anymore</p>",
        "id": 248389553,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628102058
    },
    {
        "content": "<p>I say go ahead <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> , if it fixes the problem, then it's fine. If not...well then we have to dive deeper</p>",
        "id": 248389639,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628102095
    },
    {
        "content": "<p>Though actually I want the publisher to ignore 'trusted' template builds from any repository other than the trusted repository</p>",
        "id": 248389671,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628102112
    },
    {
        "content": "<p>trusted but NOT!</p>",
        "id": 248389718,
        "sender_full_name": "John Moehrke",
        "timestamp": 1628102136
    },
    {
        "content": "<p>Running.  <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>, the rebuild of the old template didn't show up here: <a href=\"https://fhir.github.io/auto-ig-builder/builds.html\">https://fhir.github.io/auto-ig-builder/builds.html</a>.  Any thoughts on how a build could have been triggered that wouldn't show up there?</p>",
        "id": 248389900,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628102222
    },
    {
        "content": "<p>Let's back up a bit -- can someone point me to the docs for how auto-ig-builds (are intended to) impact the package registry?</p>",
        "id": 248390173,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628102348
    },
    {
        "content": "<p>anyone can trigger a build of any branch of any IG at any time -- but the <em>only</em> consequence of triggering a build (to <em>my</em> knowledge/expectations) should be new content (i.e., new build results or error logs) appearing at <a href=\"https://build.fhir.org/ig/:org/:repo/branches/:branch\">https://build.fhir.org/ig/:org/:repo/branches/:branch</a></p>",
        "id": 248390266,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628102394
    },
    {
        "content": "<p>If something <em>other</em> than that outcome is ever expected/desired, I'd like to be clear on when/how/why.</p>",
        "id": 248390355,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628102426
    },
    {
        "content": "<p>I really am curious as to why it stopped working, when none of the core pieces should have changed?</p>",
        "id": 248391341,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628102892
    },
    {
        "content": "<p>yup, retriggering should result in no actual difference.</p>",
        "id": 248391386,
        "sender_full_name": "John Moehrke",
        "timestamp": 1628102923
    },
    {
        "content": "<p>I suspect that those three entries for hl7.fhir.template, while not correct, have been working and stable for a while, no?</p>",
        "id": 248391865,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628103188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Your assistance is required on this when you have the opportunity. Sorry to bother you on vacation.</p>",
        "id": 248392593,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628103515
    },
    {
        "content": "<p>Re-triggering was a problem because there were two different IGs with the same package id.  When the old one was triggered, 'current' suddenly became really old.  The real risk is that anyone could create a git project, define a template containing whatever they wanted, link it to the CI build and suddenly anyone who runs their build locally or on the CI build would download that template and run those scripts.  I thought we had processes in place to keep that from happening.  So I'm going to keep the old project around so we can test and figure out why that protection isn't functioning</p>",
        "id": 248393599,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628103825
    },
    {
        "content": "<p>Who retrigged and how (and why) is also an open question.</p>",
        "id": 248393636,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628103842
    },
    {
        "content": "<p>So, did you remove the 2/3 entries in the list?</p>",
        "id": 248394082,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628104044
    },
    {
        "content": "<p>before retriggering the build?</p>",
        "id": 248394094,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1628104052
    },
    {
        "content": "<blockquote>\n<p>Ok, I've figured out at least part of the cause. The <a href=\"https://build.fhir.org/ig/qas.json\">https://build.fhir.org/ig/qas.json</a> maintained by the CI-build process has three entries for id hl7.fhir.template:</p>\n</blockquote>\n<p>WAIT. Is <a href=\"https://build.fhir.org/ig/qas.json\">https://build.fhir.org/ig/qas.json</a> used as part of any automated resolution process?</p>",
        "id": 248395631,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628104822
    },
    {
        "content": "<p>The array you pasted above, Lloyd, was just showing 3 branches of a single repo. It shoudn't have any implications outside of making branch builds appear at <a href=\"http://build.fhir.org/ig/FHIR/hl7-ig-template/branches/\">http://build.fhir.org/ig/FHIR/hl7-ig-template/branches/</a></p>",
        "id": 248395725,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628104882
    },
    {
        "content": "<p>Lloyd, are the issues with projects using <em>unpublished</em> templates? Or are there issues with projects using release versions of templates?</p>",
        "id": 248396829,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628105329
    },
    {
        "content": "<p>(Trying to see if <a href=\"#narrow/stream/215610-shorthand/topic/Dependencies/near/248396516\">https://chat.fhir.org/#narrow/stream/215610-shorthand/topic/Dependencies/near/248396516</a> could be relevant.)</p>",
        "id": 248396977,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628105397
    },
    {
        "content": "<p>I'm curious where the outdated version of the template is actually being downloaded by the IG publisher. It's not <code>packages.fhir.org</code> or <code>packages2.fhir.org</code> -- <code>hl7.fhir.template</code> doesn't exist there.</p>",
        "id": 248398898,
        "sender_full_name": "Max Masnick",
        "timestamp": 1628106371
    },
    {
        "content": "<p>Maybe this is the relevant code in the IG publisher? <a href=\"https://github.com/HL7/fhir-ig-publisher/blob/master/org.hl7.fhir.publisher.core/src/main/java/org/hl7/fhir/igtools/templates/TemplateManager.java\">https://github.com/HL7/fhir-ig-publisher/blob/master/org.hl7.fhir.publisher.core/src/main/java/org/hl7/fhir/igtools/templates/TemplateManager.java</a></p>",
        "id": 248399056,
        "sender_full_name": "Max Masnick",
        "timestamp": 1628106477
    },
    {
        "content": "<p><a href=\"https://github.com/FHIR/sushi/blob/836ab56d73c51dd6bda4a14b51363a2228db7d9f/src/fhirdefs/load.ts#L70-L75\">https://github.com/FHIR/sushi/blob/836ab56d73c51dd6bda4a14b51363a2228db7d9f/src/fhirdefs/load.ts#L70-L75</a> seems to be a potential culprit -- it's looking through any QA builds on the CI server and selecing by date, irrespctive of branch -- so I can create a branch of a template called <code>testing-dont-use</code>, and if it's the newest thing in the <code>qas.json</code> file, it'll get picked up by sushi and used (i.e., I assume: stuck into a user's cache and in turn used by the publisher?)</p>",
        "id": 248399812,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628106836
    },
    {
        "content": "<p>H/T <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span>  the same logic bug exists in the publisher at <a href=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/bb3b01fd1f3f697645e4b49219b7f7112388d156/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/npm/FilesystemPackageCacheManager.java#L650-L665\">https://github.com/hapifhir/org.hl7.fhir.core/blob/bb3b01fd1f3f697645e4b49219b7f7112388d156/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/npm/FilesystemPackageCacheManager.java#L650-L665</a></p>",
        "id": 248400542,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628107158
    },
    {
        "content": "<p>Is there a documented algorithm for resolution that sushi and org.hl7.fhir.utiltities are both following, or is this convergent evolution?</p>",
        "id": 248400613,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628107193
    },
    {
        "content": "<p>I think we want to do three things:</p>\n<ol start=\"0\">\n<li>\n<p>Document the algorithm for package resolution, including all the inputs </p>\n</li>\n<li>\n<p>Discourage anyone from referring to <code>#current</code> templates ever, and forbid anyone from referring to <code>#current</code> in a published build (if that's even possible today)</p>\n</li>\n<li>\n<p>Update resolution logic for <code>#current</code> to only consider QA builds from a \"real\" branch (e.g., \"main\" or \"master\" or whatever the default branch for a given project might be)</p>\n</li>\n</ol>",
        "id": 248401711,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628107695
    },
    {
        "content": "<p>Thanks to the Team for getting this working again. <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 248411500,
        "sender_full_name": "Corey Spears",
        "timestamp": 1628112517
    },
    {
        "content": "<p>From FMG discussion, I think the suggestions above are definitely worth pursuing, with (2) being most urgent. Specifically on this point, the important thing is to bind the resolution logic to <em>a specific branch or set of branches</em>  in a specific GH repo. So if I say \"Please resolve https://whatever#current\", the algorithm needs to:</p>\n<ul>\n<li>\n<p>2.1. Know the official GH repo + branch where this \"<a href=\"https://whatever\">https://whatever</a>\" dependency can be found. This can be known either a) directly through a content-addressing scheme, where the URL matches some specified pattern like a github URL or any precise enough convention we choose -- e.g., instead of \"<a href=\"https://whatever\">https://whatever</a>\" we might have \"<a href=\"https://packages.hl7.org/:service/:org/:repo/:branch\">https://packages.hl7.org/:service/:org/:repo/:branch</a>\", where {service: github, org: jmandel, repo: mytemplate, branch: master} would tell me what GH (or gitlab, or whatever) location is authoriative, or 2) via lookup, if some version of the \"<a href=\"https://whatever\">https://whatever</a>\" package has been previously published in a package server, by looking up something like a \"gitUrlForCurrentSources\" property in package.json</p>\n</li>\n<li>\n<p>2.2. Filter <code>qas.json</code> based on this branch + repo, so the resolution algorithm will only consider <em>valid sources</em> for this dependency -- it would be <em>invalid</em> to resolve a dependency to the wrong project or the wrong branch within a project.</p>\n</li>\n</ul>",
        "id": 248411842,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628112775
    },
    {
        "content": "<p>Templates are identified by package id, not by Git URL.  What we <em>could</em> possibly do is prevent projects from being built if they are not the same Git source as the initial build for that package.  (We'd need a formal way to allow projects to move though as templates may shift Git projects from time to time.)</p>",
        "id": 248412177,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628112981
    },
    {
        "content": "<p>We also need to ensure that our rules around \"trusted template source\" are in fact being adhered to so that untrusted templates can't run on the CI-build if they contain active content.</p>",
        "id": 248412251,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628113033
    },
    {
        "content": "<p>I'm saying: for consistent and correct \"#current\" resolution, there needs to be a deterministic mapping from package ID to git URL. I've proposed two approaches to defining this kind of mapping above (convention-based, or lookup-based -- and these can be combined). Others are possible. We just want to specify <em>something</em> and stick to it.</p>",
        "id": 248412273,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628113048
    },
    {
        "content": "<blockquote>\n<p>We also need to ensure that our rules around \"trusted template source\" are in fact being adhered to so that untrusted templates can't run on the CI-build if they contain active content.</p>\n</blockquote>\n<p>That is true but it's a separate issue, I think</p>",
        "id": 248412373,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628113096
    },
    {
        "content": "<p>I think the only way to determine 'valid' is \"first in wins\" with a manual intervention step to allow migration.</p>",
        "id": 248412387,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628113104
    },
    {
        "content": "<blockquote>\n<p>Lloyd McKenzie: I think the only way to determine 'valid' is \"first in wins\" with a manual intervention step to allow migration.</p>\n</blockquote>\n<p>I disagree completely.</p>",
        "id": 248412415,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628113122
    },
    {
        "content": "<p>Both of the suggestions I made above are alternative ways, so \"first in wins\" can't be the \"only way\".</p>",
        "id": 248412454,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628113149
    },
    {
        "content": "<p>And \"first in\" still would need to be memorialized somewhere -- <code>qas.json</code> is unsuitable for that purpose because it doesn't keep a full history of the world; an early template might happen to disappear from that file over time, or might transiently disappear from that file...  but that doesn't mean someone new should be able to \"take over\" the package ID.</p>",
        "id": 248412491,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628113181
    },
    {
        "content": "<p>In a world where there can be 100s or thousands of templates, I don't think we can reasonably rely on a manual process?  I don't know how an automated process could tie an arbitrary URL to an arbitrary package id in an automatic fashion other than \"first in wins\".</p>",
        "id": 248412593,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628113246
    },
    {
        "content": "<p>Basically, the <em>only</em> thing <code>qas.json</code> can be trusted to answer is \"what IG builds are currently hosted at <a href=\"http://build.fhir.org\">build.fhir.org</a>?\"</p>",
        "id": 248412594,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628113248
    },
    {
        "content": "<p>Wasn't suggesting that qas.json needs to be our way of tracking \"first in\".</p>",
        "id": 248412614,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628113260
    },
    {
        "content": "<blockquote>\n<p>In a world where there can be 100s or thousands of templates, I don't think we can reasonably rely on a manual process? </p>\n</blockquote>\n<p>Agreed; both of my suggestions are automated.</p>",
        "id": 248412623,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628113264
    },
    {
        "content": "<blockquote>\n<p>I don't know how an automated process could tie an arbitrary URL to an arbitrary package id</p>\n</blockquote>\n<p>\"First in wins\" for published templates is fine, I think, because a package repository can serve that role.  We'd only need a convention pre-publication, for IGs that have never been published.</p>",
        "id": 248412669,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628113301
    },
    {
        "content": "<p>I don't know that we can force a git URL convention.  There will be times when the organization that owns responsibility for the template isn't necessarily the organization  you want in the id.  It would certainly break the id convention for a number of existing templates if we did that.</p>",
        "id": 248412777,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628113359
    },
    {
        "content": "<p>Today:</p>\n<ul>\n<li>the package repository doesn't bind packages to git sources, and</li>\n<li>the <a href=\"https://build.fhir.org/ig/qas.json\">https://build.fhir.org/ig/qas.json</a> can't answer the questions \"which branches are the official sources for a given package\"</li>\n</ul>",
        "id": 248412820,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628113388
    },
    {
        "content": "<p>So I'm not a fan of #1.  I think your #2 solution <em>is</em> a first in wins solution, though we might want to leverage something other than qas.json.</p>",
        "id": 248412825,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628113391
    },
    {
        "content": "<blockquote>\n<p>There will be times when the organization that owns responsibility for the template isn't necessarily the organization you want in the id.</p>\n</blockquote>\n<p>URL conventions are only necessary if you care about referencing an unpublished template. In which case you don't really have or need a package ID.</p>",
        "id": 248412888,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628113435
    },
    {
        "content": "<blockquote>\n<p>though we might want to leverage something other than qas.json.</p>\n</blockquote>\n<p>We 100% <em>cannot</em> use qas.json for this.</p>",
        "id": 248412975,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628113476
    },
    {
        "content": "<p>The HL7 git organization currently publishes templates that don't include 'hl7' as part of their package id.</p>",
        "id": 248412978,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628113479
    },
    {
        "content": "<p>I'm not following your point re: \"hl7 as part of their package id\". So what?</p>",
        "id": 248413040,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628113514
    },
    {
        "content": "<p>#1 is saying that the structure of the Git URL drives the package id - at least that's my understanding?</p>",
        "id": 248413080,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628113544
    },
    {
        "content": "<p>I'm saying the values of the Git URL and package id should be independent, so the linkage needs to be established some other way.</p>",
        "id": 248413191,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628113594
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 248413240,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628113638
    },
    {
        "content": "<p>Other way around: I was saying that the structure of the package ID could be deterministically mapped to a git branch.</p>",
        "id": 248413978,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628114132
    },
    {
        "content": "<p>That deterministic mapping only matters when you're working on a template pre-publication.</p>",
        "id": 248413998,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628114148
    },
    {
        "content": "<p>Once you're ready to publish your work, you can rely on the the package server as a global source of truth, and name your package according to whatever rules/conventions govern your work.</p>",
        "id": 248414061,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628114170
    },
    {
        "content": "<p>A different way to skin this: just require everyone to publish templates with the package server when they start work, even before they have content ready. That's probably manageable too, if a bit clunky (work that gets abandoned before the author really \"Wanted\" to publish it would still pollute the package server, but no big deal).</p>",
        "id": 248414131,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628114228
    },
    {
        "content": "<p>I'm saying we don't want to change existing package ids (which would break existing IGs) or Git URLs (which would break what organizations can maintain stuff and would also force package id changes if you ever switched project owners).</p>",
        "id": 248414627,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628114514
    },
    {
        "content": "<p>I don't understand the pre-publication vs. post-publication process.</p>",
        "id": 248414688,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628114539
    },
    {
        "content": "<p>What do you mean by \"publish templates with the package server\"?</p>",
        "id": 248414739,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628114583
    },
    {
        "content": "<p>How are templates published today? What's the official process for resolving a (non-\"current\") template? Wherever published packages live is what I mean by package server.</p>",
        "id": 248418622,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628117304
    },
    {
        "content": "<p>Anyone who wants to create a template can do so by putting it on Github somewhere and adding a webhook to the CI-build.  Publishing (successfully) on the CIBuild causes the package.tgz file on the CI build.  I don't actually know what the process is for doing a formal package release - Grahame does some magic that involves creating releases for all dependency packages for the HL7 IGs - if you create a release of 'base', that means an update to HL7, FHIR, Da Vinci and posslibly a couple of others at this point.  As for how external folks get official packages into the package server, I don't know.</p>",
        "id": 248421236,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628119177
    },
    {
        "content": "<p>Based on what you're saying, it sounds like we don't have a clear process for community development of templates. I mean, there is no algorithm for resolving a published template unless you go through the hl7 repository as the source of truth.</p>\n<p>It seems like there is a desire to treat <a href=\"http://build.fhir.org\">build.fhir.org</a> as a kind of secondary package repository without most of the features of a package repository -- this is a mistake. A proper repository needs to provide well defined namespaces and clear permissions about who can write to each namespace.</p>",
        "id": 248421570,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628119421
    },
    {
        "content": "<p>Correct.  Anyone can create a template with the id of their choosing, and anyone can host it at the Git location of their choosing.  I'm not sure we want to change that.</p>\n<p>Our general package repository has clear controls over writing HL7 artifacts.  I don't know what the rules are for anyone else.</p>",
        "id": 248422131,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628119840
    },
    {
        "content": "<p>Out of curiosity, is there a process to prevent two IGs from claiming the same ids?</p>",
        "id": 248422617,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1628120252
    },
    {
        "content": "<p>Two templates?  No.  Which is exactly what caused the issue we just had.  Two IG projects had the same id.  One was old and was developed under the FHIR organization before we decided that, because we needed tight control over the scripts in it, that it should live in the HL7 organization.  The old project was never removed though.  So when someone, somehow, triggered the build on it, we had an issue.  Obviously that's not an acceptable situation, so the question is how we prevent multiple IGs from publishing the same package ids in the future.</p>",
        "id": 248422865,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628120453
    },
    {
        "content": "<p>Noting that I’m skipping some messages (so may have been discussed), but versioning could be handled by release tagging in GitHub as well.. it already has ‘latest’ and linking releases to commits.</p>\n<p>Would make “a new version of the template” intentional and should be straightforward to modify the resolution logic.</p>",
        "id": 248424621,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1628121994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> , no I meant two IGs. I see that we've just got through an issues where two templates have the same ids, but I was wondering what is to prevent two IGs from both claiming the same id. Can I create a new IG and call it hl7.fhir.us.core.argo? I mean, I doubt that policy would allow it, but it seems a great way to mess things up for a couple of days if I was so inclined.</p>",
        "id": 248427868,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1628125590
    },
    {
        "content": "<p>Short answer, for the 'current' IG, nothing would stop you from doing that at all - other than we could easily tell what Git repository it came from and arrange to put something nasty in your beer at the next face-to-face WGM.  For someone who doesn't drink beer, there wouldn't be much we could do <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span>.  So yes, this is an issue we need to address for more than just templates.</p>",
        "id": 248429184,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628127269
    },
    {
        "content": "<blockquote>\n<p>Two templates?  No.  Which is exactly what caused the issue we just had.  Two IG projects had the same id.  </p>\n</blockquote>\n<p>I don't think that's correct. That <em>would have been possible</em> but in fact, all entries in qas.json were different branches in the same  (official) git repository (GitHub/FHIR/hl7-ig-template).</p>",
        "id": 248432200,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628131029
    },
    {
        "content": "<p>I guess we'd better write out a list of requirements.</p>\n<p>I think everyone agrees:</p>\n<ul>\n<li>Anyone should be able to create a template for their own needs</li>\n</ul>",
        "id": 248432253,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628131086
    },
    {
        "content": "<ul>\n<li>publication tooling must be able to resolve published template IDs (anywhere the publisher runs -- whether locally, in hl7's auto build environment, or elsewhere)</li>\n</ul>",
        "id": 248432367,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628131226
    },
    {
        "content": "<ul>\n<li>? The resolution algorithm takes in a \"registry\" parameter they defaults to the official hl7 package registry, and in the auto build environment this can't be overridden (but perhaps in other environments that would be perfect)</li>\n</ul>",
        "id": 248432404,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628131290
    },
    {
        "content": "<p>Are these fair?</p>",
        "id": 248432422,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628131320
    },
    {
        "content": "<p>No, they weren't.  Some were from Github/FHIR, but the official was from Github/HL7</p>",
        "id": 248433211,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628132215
    },
    {
        "content": "<p>(I <em>don't</em> think it's a requirement for the hl7 auto build infrastructure to support arbitrary git sources for templates that have never been published in the hl7 package repository and aren't on track to be published in the hl7 package repository.)</p>",
        "id": 248433216,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628132225
    },
    {
        "content": "<p>It's a requirement that any organization that wants to use the CI build process can create templates and have them work.  I don't know what the process is to get them published in the HL7 package repository.</p>",
        "id": 248433287,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628132290
    },
    {
        "content": "<p>In your post above, all 3 of these were in the official hl7 GitHub repository, no?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Ok, I've figured out at least part of the cause.  The <a href=\"https://build.fhir.org/ig/qas.json\">https://build.fhir.org/ig/qas.json</a> maintained by the CI-build process has <em>three</em> entries for id hl7.fhir.template:</p>\n<p>{<br>\n    \"url\": \"<a href=\"http://github.com/FHIR/hl7-ig-template\">http://github.com/FHIR/hl7-ig-template</a>\",<br>\n    \"package-id\": \"hl7.fhir.template\",<br>\n    \"ig-ver\": \"0.0.2\",<br>\n    \"date\": \"Thu, 17 Oct, 2019 01:27:56 +0000\",<br>\n    \"version\": \"4.1.0\",<br>\n    \"tool\": \"4.1.0 (3)\",<br>\n    \"repo\": \"FHIR/hl7-ig-template/branches/healthedata1-test-pr/qa.json\"<br>\n  },<br>\n{<br>\n    \"url\": \"<a href=\"http://github.com/FHIR/hl7-ig-template\">http://github.com/FHIR/hl7-ig-template</a>\",<br>\n    \"package-id\": \"hl7.fhir.template\",<br>\n    \"ig-ver\": \"0.0.2\",<br>\n    \"date\": \"Thu, 17 Oct, 2019 01:27:56 +0000\",<br>\n    \"version\": \"4.1.0\",<br>\n    \"tool\": \"4.1.0 (3)\",<br>\n    \"repo\": \"FHIR/hl7-ig-template/branches/healthedata1-test-pr/qa.json\"<br>\n  },<br>\n{<br>\n    \"url\": \"<a href=\"http://github.com/FHIR/hl7-ig-template\">http://github.com/FHIR/hl7-ig-template</a>\",<br>\n    \"package-id\": \"hl7.fhir.template\",<br>\n    \"ig-ver\": \"0.0.2\",<br>\n    \"date\": \"Tue, 03 Aug, 2021 21:59:55 +0000\",<br>\n    \"version\": \"4.6.0\",<br>\n    \"tool\": \"4.6.0 (3)\",<br>\n    \"repo\": \"FHIR/hl7-ig-template/branches/master/qa.json\"<br>\n  },</p>\n<p>It's that last one that I think triggered the problem.  I had <em>thought</em> we had code that hard-coded what repositories 'trusted' templates were allowed to be loaded from.  (We certainly need to have that.)  However, I haven't found where that code is or figured out why it didn't keep a build fired against the wrong template repository from updating our official template.<br>\n``|</p>\n</div></div>",
        "id": 248433297,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628132301
    },
    {
        "content": "<blockquote>\n<p>It's a requirement that any organization that wants to use the CI build process can create templates and have them work.  I don't know what the process is to get them published in the HL7 package repository.</p>\n</blockquote>\n<p>Where is this requirement coming from, and who is responsible for implementing it safely?</p>",
        "id": 248433319,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628132348
    },
    {
        "content": "<p>Sorry, that was a paste error.  First one should have been:<br>\n{<br>\n    \"url\": \"<a href=\"http://fhir.org/templates/hl7.fhir.template\">http://fhir.org/templates/hl7.fhir.template</a>\",<br>\n    \"package-id\": \"hl7.fhir.template\",<br>\n    \"ig-ver\": \"0.3.2\",<br>\n    \"date\": \"Tue, 29 Sep, 2020 06:55:16 +0000\",<br>\n    \"version\": \"4.5.0\",<br>\n    \"tool\": \"4.5.0 (3)\",<br>\n    \"repo\": \"HL7/ig-template-fhir/branches/master/qa.json\"<br>\n  },</p>",
        "id": 248433420,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628132423
    },
    {
        "content": "<p>That one's actually the authoritative version</p>",
        "id": 248433436,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628132445
    },
    {
        "content": "<p>Does \"create templates and have them work\" refer to the \"current build\" of never-yet-published template?</p>",
        "id": 248433442,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628132454
    },
    {
        "content": "<p>Like I said, I'm not sure what the process is to get something into the registry for anything other than HL7-maintained templates.</p>",
        "id": 248433457,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628132487
    },
    {
        "content": "<p>But there are a growing number of templates for IGs that use our CI build process that aren't HL7-managed.</p>",
        "id": 248433518,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628132531
    },
    {
        "content": "<p>That's fine -- but each of these templates need to have a known authoritative source meaning (I think) they need to be registered in an official hl7 package repository, or we need a  decentralized algorithm for resolving the authoritative source for a given template package ID.</p>",
        "id": 248433596,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628132666
    },
    {
        "content": "<p>(same applies to non template packages as far as I can tell. Like someone could create a fake US Core they would mess up anyone's depending on \"uscore#current\")</p>",
        "id": 248433624,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628132742
    },
    {
        "content": "<p>Problem is, I don't think that the set of those using the CI build for their IGs is necessarily the set who want their IGs in HL7's registry.  Those two things have historically been separated.  Do you think there's a problem where we just track what IGs have been built and what repos they've come from and refuse to accept IGs with the same IG coming from a different repo unless someone's specifically come to us and said \"Hey, we've moved this\"?</p>",
        "id": 248434338,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628133772
    },
    {
        "content": "<p>That keeps the manual effort down to only handling moves, which presumably would be infrequent</p>",
        "id": 248434346,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628133797
    },
    {
        "content": "<p>We might be able to impose use of the registry for templates, given that (presumably), those managing IG templates will want to support versions other than 'current' eventually, and the only place the publisher is going to look for specific versions of templates is in our package repository.  But we can't impose that on IGs being built.</p>",
        "id": 248434516,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628133983
    },
    {
        "content": "<p>Maintaining these records properly and reliably would require a different approach  than the current auto build infrastructure. If we wanted to do this I would think about implementing a package server (\"npm registry\" or whatever) for it, so every build gets posted to a \"CI\" package server even if it's just transient stuff. Otherwise we're going to wind up recreating most of the functionality of a package server but with a slightly different API, which makes the whole resolution system more complicated.</p>",
        "id": 248434625,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628134179
    },
    {
        "content": "<p>I also realize I'm not sure for templates: is there a build step required to create the contents of a template package? Or would cloning a template's git repository gve you everything you needed to run with?</p>",
        "id": 248435681,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628135777
    },
    {
        "content": "<p>I'm open to whatever software approach you think best.  I think key requirements are:</p>\n<ul>\n<li>No need for any manual action to build an IG or template other than set up your webhook</li>\n<li>We would ignore any branches other than master or main</li>\n<li>If someone wants to move their Git repository somewhere else, it's straightforward for Joshua or someone similar to make that happen.</li>\n</ul>\n<p>To create a simple template, you can just copy someone else's, change the package info and substitute your color scheme and logo for whatever was in the original.</p>",
        "id": 248435782,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628135928
    },
    {
        "content": "<p>We're already failing on \"ignore\" and \"move\" requirements today. My key recommendation is to tie package ids to authoritative git source URLs -- whether by naming convention or centralized registry.</p>\n<p>Glibly, you can't cheat at <a href=\"https://en.m.wikipedia.org/wiki/Zooko%27s_triangle\">https://en.m.wikipedia.org/wiki/Zooko%27s_triangle</a></p>",
        "id": 248436935,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628137521
    },
    {
        "content": "<p>I'm thinking about whether I can come around to your conception of trust on first use here,  Lloyd. Will sleep on it.</p>",
        "id": 248437091,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628137728
    },
    {
        "content": "<p>I'd rather see dependencies on <code>current</code> made explicit like:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"hl7.example.template\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"type\"</span><span class=\"o\">:</span> <span class=\"s2\">\"fhir.template\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"license\"</span><span class=\"o\">:</span> <span class=\"s2\">\"CC0-1.0\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"description\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Example template\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"author\"</span><span class=\"o\">:</span> <span class=\"s2\">\"http://hl7.org/fhir\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"canonical\"</span><span class=\"o\">:</span> <span class=\"s2\">\"http://example.org/templates/hl7.fhir.template\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"base\"</span><span class=\"o\">:</span> <span class=\"s2\">\"hl7.base.template\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"dependencies\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"hl7.base.template\"</span><span class=\"o\">:</span> <span class=\"s2\">\"https://build.fhir.org/ig/HL7/ig-template-base/package.tgz\"</span>\n    <span class=\"c1\">// ^^ instead of \"current\", use a full, explicit URL. This is much more reliable.</span>\n    <span class=\"c1\">// Can even include a branch</span>\n    <span class=\"c1\">// Can even point to somebody's fork for debugging purposes</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"version\"</span><span class=\"o\">:</span> <span class=\"s2\">\"0.3.2\"</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 248437892,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628138779
    },
    {
        "content": "<p>This is consistent with how NPM dependencies work already: <a href=\"https://docs.npmjs.com/cli/v7/configuring-npm/package-json#urls-as-dependencies\">https://docs.npmjs.com/cli/v7/configuring-npm/package-json#urls-as-dependencies</a></p>",
        "id": 248438286,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628139353
    },
    {
        "content": "<p>and correctly expresses semantics we know how to enforce (i.e., \"I want use whatever's sitting at this location on the CI server right now, and treat that as my \"hl7.base.template\".)</p>",
        "id": 248438349,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628139390
    },
    {
        "content": "<p>Changing how dependencies work is going to break all the existing infrastructure - every template, every IG that uses templates.  So we should only pursue that path if we genuinely have no alternative.  Also, I'm not sure how that reference gets resolved when talking about specific versions</p>",
        "id": 248488520,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628175208
    },
    {
        "content": "<p>There's a finite list of existing implementation guides in the auto build infrastructure and we can just create a mapping file to bring them all into the future if we can define a better future that will be more stable and easy to manage.</p>\n<p>We are talking about what should be an edge case of references to material that is not published and is subject to change at any moment; most packages should not have a dependency on this kind of content.</p>",
        "id": 248493685,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628177329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> said:</p>\n<blockquote>\n<p>We would ignore any branches other than master or main</p>\n</blockquote>\n<p>Are you talking about build for IGs? I like the fact that creating a branch for our IG triggers auto-build so that we can easily let others see the updates. I am not a huge fan of that requirement? Or, am I misunderstanding your comment?</p>",
        "id": 248494543,
        "sender_full_name": "Kevin Power",
        "timestamp": 1628177719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191913\">@Kevin Power</span> You'll still be able to build branches, but branches of templates will never be treated as 'current', nor would they be considered as part of the \"first in wins\" approach to what Git URL is tied to a particular package id.</p>",
        "id": 248494942,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628177897
    },
    {
        "content": "<p>Got it, thanks <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 248495015,
        "sender_full_name": "Kevin Power",
        "timestamp": 1628177942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> The package dependency structure we're using right now is tied into an external standard - is a URL even allowed in that location?  Even if we have mappings, it's going to impose change on everyone at some point, no?  Also, being able to say #current as opposed to a version isn't really something we want to change.  It should be super easy to change from pointing to current vs. a specific version.  If you have to drop the package id and replace with a Git URL, that creates complexity for the users.</p>",
        "id": 248495306,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628178056
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"191913\">@Kevin Power</span> it means that if you have a dependency on 'current', it'll always only resolve to the 'main' or 'master' branch, never another branch.</p>",
        "id": 248495375,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628178090
    },
    {
        "content": "<blockquote>\n<p>The package dependency structure we're using right now is tied into an external standard - is a URL even allowed in that location?</p>\n</blockquote>\n<p>Do you mean NPM? Yes, NPM supports dependency resolution by tgz URL (see the <a href=\"#narrow/stream/179252-IG-creation/topic/build.20with.20hl7.2Efhir.2Etemplate/near/248437892\">link in my post above</a>)</p>",
        "id": 248500632,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628180572
    },
    {
        "content": "<p>I'd still prefer that we keep ids as they are and continue to use #current to signify \"grab from Github\" and have the resolution of the URL outside the dependency declaration.  That moves complexity from authors to infrastructure, which is where I think it should be and avoids making everyone update everything that already exists.  If we were to change approach, I'd want Grahame to ok it - which means that we're vulnerable for longer.</p>\n<p>Are there specific problems you see in a \"first in wins\" approach?</p>",
        "id": 248502125,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628181291
    },
    {
        "content": "<blockquote>\n<p>keep ids as they are and continue to use #current to signify</p>\n</blockquote>\n<p>Why not use a more explicit reference?</p>\n<blockquote>\n<p>Are there specific problems you see in a \"first in wins\" approach?</p>\n</blockquote>\n<p>Yes -- it's brittle and we don't have the tools to manage it.</p>",
        "id": 248503365,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628181948
    },
    {
        "content": "<p>Using \"#current\" also prevents many other integration scenarios (say: grabbing source from another branch for testing).</p>",
        "id": 248503488,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628181994
    },
    {
        "content": "<p>Using explicit URLs makes resolution simple (less error prone); is clear; and shouldn't pack \"surprises\".</p>",
        "id": 248503559,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628182030
    },
    {
        "content": "<p>Because when referring to officially released packages, they'll be using package ids - it's much easier for people to switch between <code>hl7.gravity.template#current</code> and <code>hl7.gravity.template#1.3.0</code> than it is to switch to and from <code>https://github.com/HL7/ig-template-gravity</code> - to me, that's <em>more</em> error prone because few people are going to understand what the correlation is.  It also means that if we ever move the gravity template, all IGs and dependent templates have to change instead of just a registry entry.</p>\n<p>Rather than saying \"we have no tools to manage it\", I think it's more accurate to say, \"the tool we're using to manage it isn't doing everything we need it to\".  </p>\n<p>I understand that tooling has an ongoing cost.  Complexity for authors also has an ongoing cost.  My take is the cost of maintaining a centralized file that maps between package id and Git URL and is auto-updated the first time a new package is seen is significantly lower than the short term cost of everyone needing to revamp how their IGs reference templates and templates reference each other, as well as the ongoing cost of complexity in switching between 'current' and 'fixed release' (which we want to be super-easy) and the complexity of managing migrations of templates and occasionally IGs</p>",
        "id": 248506887,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628183445
    },
    {
        "content": "<p>deleted, wrong thread</p>",
        "id": 248507217,
        "sender_full_name": "David Pyke",
        "timestamp": 1628183615
    },
    {
        "content": "<blockquote>\n<p>Because when referring to officially released packages, they'll be using package ids - it's much easier for people to switch between <code>hl7.gravity.template#current</code> and <code>hl7.gravity.template#1.3.0</code> than it is to switch to and from <code>https://github.com/HL7/ig-template-gravity</code> - to me, that's <em>more</em> error prone </p>\n</blockquote>\n<p>I am not suggesting changing the package ID of these. I'm only suggesting changing the <em>version</em> from the opaque string \"current\" to a transparent uri. Package ID stays the same in the dependencies list; in the example I showed above, the dependency is still called \"hl7.fhir.base\", and only the version needs to be updated</p>",
        "id": 248512527,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628186160
    },
    {
        "content": "<p>You had said <br>\n<code>\"hl7.base.template\": \"https://build.fhir.org/ig/HL7/ig-template-base/package.tgz\"</code><br>\nnot<br>\n<code>\"hl7.base.template\": \"fhir.base.template#https://build.fhir.org/ig/HL7/ig-template-base/package.tgz\"</code><br>\nBut even</p>",
        "id": 248517056,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628188331
    },
    {
        "content": "<p>But even that is far more confusing to implementers than #current.  #current is something that would be consistent across all IGs.  The URL approach requires authors to know the Git location of the template or IG they're depending on.</p>",
        "id": 248517167,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628188393
    },
    {
        "content": "<p>Also, this wouldn't just affect HL7's tooling, it would also impact Simplifier I believe because they use the same mechanisms to reference IG dependencies by package id.</p>",
        "id": 248517251,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628188443
    },
    {
        "content": "<p>I think the issue is disambiguating <code>#current</code> between 'latest release' and 'latest CI build'.</p>\n<p>Generally speaking, IGs need to use 'latest release'.  Template <em>developers</em> are the only ones that should ever be using 'latest CI build'.  If we conflate the two, then we'll keep running into problems like this (e.g., someone checks something in that, intentionally or not, breaks #allTheIGs).</p>\n<p>Part of the issue is that many of the interested parties are the same people wearing two hats.</p>",
        "id": 248520760,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1628189959
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&quot;hl7.base.template&quot;: &quot;https://build.fhir.org/ig/HL7/ig-template-base/package.tgz&quot;\n</code></pre></div>\n\n<p>^^ that's correct -- the purpose of the NPM <code>dependencies</code> object is to tell NPM how to resolve a specific package ID (on the left of the <code>:</code>, like \"hl7.base.template\") to specific versioned content. In this case, the \"version\" (the part on the right of the <code>:</code>) is the URL of a tarball. <a href=\"https://docs.npmjs.com/cli/v7/configuring-npm/package-json#urls-as-dependencies\">https://docs.npmjs.com/cli/v7/configuring-npm/package-json#urls-as-dependencies</a> provides the background and examples.</p>",
        "id": 248521649,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628190317
    },
    {
        "content": "<p>If you don't specify any version at all, you'll get the latest official release.  Based on the testing infrastructure we have, there's been a conscious choice to have most IGs running on the CI build, falling back to latest release only if they have problems.  At some point we might have test infrastructure that will make it practical to change that, but that's not the question up for discussion right now.</p>",
        "id": 248523220,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628191139
    },
    {
        "content": "<blockquote>\n<p>If you don't specify any version at all, you'll get the latest official release.</p>\n</blockquote>\n<p>Is an NPM package.json file valid if it doesn't specify a version for a dependency? How would you write this down?</p>",
        "id": 248524078,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628191552
    },
    {
        "content": "<p>I think IGs must declare versions.  Template references in the IG.ini don't have to</p>",
        "id": 248524488,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628191740
    },
    {
        "content": "<p>If you specify #current, you get latest build (which is what most people use now, and we generally want them to).  If you omit any '#', you get most recent release.  If you specify #1.2.3, you get that release.</p>",
        "id": 248524631,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628191810
    },
    {
        "content": "<p>I don't understand why the need we have to create a fixed link between the Git URL and the package id necessitates changing this convention.</p>",
        "id": 248524913,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628191935
    },
    {
        "content": "<p><code>3.2.1</code> is a version, which is one (good!) way to resolve a dependency; so is <code>^3.0</code> or <code>3.x</code> to express \"anything compatible with 3\"... but you can just as well use \"<a href=\"https://build.fhir.org/ig/HL7/ig-template-base/package.tgz\">https://build.fhir.org/ig/HL7/ig-template-base/package.tgz</a>\" as a way to say \"whatever version is present at this URL right now. That seems to fully cover the use case for the non-standard \"current\", and avoids ambiguity.</p>",
        "id": 248534279,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628196504
    },
    {
        "content": "<p>But it requires knowledge of the Git location by those making the change and makes switching between 'current build' and 'current release' hard.  Those are expensive things.  I haven't yet heard why we can't just beef up our current solution to just maintain a JSON file of Git URLs to package ID bindings, treat first in as winner, and keep everything the same for all IGs and users.  The reality is that when Grahame set up this process, he could have required people to list the Git location for the 'current' release and very consciously chose not to.  I believe he had good reasons for that decision.  Obviously relying on the file we are for doing the linkage isn't appropriate and we have some logic we need to add to the process, but I don't understand why that won't work, be robust and solve our problem while minimizing both short and long-term impact on everyone else.</p>",
        "id": 248545949,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628202845
    },
    {
        "content": "<p>We discussed this on the IG Authoring call today.  Those on the call (only 3 of us) agreed that we want to stick with #current and find a tooling solution to create a binding between the Git URL and the IG package.  I guess the question is, how do we move forward on this?  Right now, <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> is the only one who knows how to manage that code, though <span class=\"user-mention\" data-user-id=\"191380\">@Elliot Silver</span> has at least done a 'look-see'.  We need this hole closed pretty urgently because there could be far worse outcomes than just having the build go down for a day.  The proposed change is as follows:</p>\n<ul>\n<li>when the CI build runs, check to see if the invoking branch is 'master' or 'main'</li>\n<li>if so, check a shared file to see if the IG id already exists in the file</li>\n<li>if not, add a row in the file with the IG id and the Git project URL</li>\n</ul>\n<p>Once that's in place, I can update the IGPublisher to drive the 'current' build resolver to look at the new file rather than the existing file.</p>\n<p>How do we move this forward quickly?</p>",
        "id": 249053283,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628639656
    },
    {
        "content": "<p>I'm concerned about this conclusion, because I don't think it's based on things that we can safely deliver <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> .</p>",
        "id": 249056378,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628642208
    },
    {
        "content": "<p>If <code>#current</code> doesn't reference a package that the package server hosts, and doesn't directly specify a source location, then we're outside the scope of npm package management.</p>",
        "id": 249056500,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628642306
    },
    {
        "content": "<p>That's not a good place to be.</p>",
        "id": 249056519,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628642329
    },
    {
        "content": "<p>(Short term fix: create a list of known <a href=\"http://build.fhir.org/ig/\">build.fhir.org/ig/</a>... URLs for every package that exists, and have the existing tools look up the URL in that list whenever it encounters \"#current\". For obvious reasons -- lack of compliance with standard npm tooling means ongoing customization; requires a long term state management commitment --  maintaining this in the long run would be painful and costly. To limit that long-run cost: deprecate the implicit \"#current\" syntax and have authors reference a published release or a specific package URL.)</p>",
        "id": 249056656,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628642458
    },
    {
        "content": "<p>We want to be able to point to current - and we want most IGs to do that.  We also want it to be super-easy to revert back to the official release without any author needing to know the Git URL.  That's the desired long-term outcome.</p>\n<p>I don't understand how maintaining it in the long run would be painful or costly.  Once the change is made to the CI build process and the publisher, the only ongoing cost should be the occasional manual update to the file if a package migrates from one Git repository to another.  That is likely to happen only a few times a year.</p>\n<p>Where do you expect the costs to come from?  What are the safety concerns?</p>",
        "id": 249058404,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628644262
    },
    {
        "content": "<p>Sorry that I missed today. I’m not sure what <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> thinks I’ve had a look-see at, but I don’t think I’ve investigated anything relevant.</p>",
        "id": 249058531,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1628644434
    },
    {
        "content": "<p>We already have multiple independent tools that can resolve dependencies for a FHIR IG (the publisher, and sushi). Maintaining these is expensive and there will be more. Spreading the complexity of non-standard package resolution -- when npm already has a perfectly good answer to this problem -- raises the cost of writing and maintaining custom tools, not to mention contributing to security risks when tools get it wrong. We should be ruthlessly simplifying and shrinking our operational burden here.</p>\n<p>It's also really unfair to ask IG authors to cope with bleeding edge dependencies from a CI build; template authors should publish template versions every time there's a coherent set of changes tested and ready for use, and IG authors can opt in to the latest published template that's compatible with their work (e.g. by specifying a version like <code>4.*</code> or an even a tag like <code>latest</code> in their package.json).</p>",
        "id": 249061625,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628648070
    },
    {
        "content": "<p>I'm happy to talk through this on a call BTW!</p>",
        "id": 249061707,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628648182
    },
    {
        "content": "<p>For templates, IG developers will either get the bleeding edge with the 'current' release or they'll get it with the 'latest' release if problems aren't found in the period before they're migrated to an official release.  We don't have the resources to do more at the moment.  For IG dependencies, current is used regularly when multiple interrelated guides are in development together and there's no desire to lock to specific versions.</p>\n<p>I don't understand what maintenance you're envisioning.  The process of looking up the correspondence between 'current' and the Git URL is already in place and works with the existing tool suite - Publisher, SUSHI and (I believe) Firely's tools.  All we're talking about is changing which file is pointed at and the logic of pointing to it.</p>\n<p>NPM doesn't do what we need it to do.  We've shown that the workaround works, it's just that the file we were pointing at wasn't suitable for the purpose and the appropriate logic wasn't in place to make it safe.</p>\n<p>I've asked for the topic to be added to tomorrow's FMG agenda.</p>",
        "id": 249063409,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1628650434
    },
    {
        "content": "<blockquote>\n<p>NPM doesn't do what we need</p>\n</blockquote>\n<p>Let's try to unpack this on a call. Not sure we should subject FMG to it, but I'm game if we have space on the agenda.</p>",
        "id": 249068136,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1628657130
    },
    {
        "content": "<p>can someone summarise this long thread for me? What's the actual problem&gt;?</p>",
        "id": 249678496,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629175931
    },
    {
        "content": "<p>Anyone can create a fork of an IG and, if they leave the IG packageId the same and build using the CI-build, their Git project becomes the 'current' build from the perspective of package resolution.  The same is true for templates.</p>\n<p>I've just submitted a pull request for a temporary fix for this (<a href=\"https://github.com/hapifhir/org.hl7.fhir.core/pull/57\">https://github.com/hapifhir/org.hl7.fhir.core/pull/57</a>), though it's failing and I can't see the test logs to see why.  (Have pinged Mark)</p>",
        "id": 249678768,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629176321
    },
    {
        "content": "<p>My fix is temporary.  Josh would like the long-term-fix to be made by customizing the package server (if we don't ditch #current entirely).</p>",
        "id": 249678789,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629176358
    },
    {
        "content": "<p>we don't want to ditch #current, that's for sure</p>",
        "id": 249679023,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629176554
    },
    {
        "content": "<p>but what's it got to do with the package server?</p>",
        "id": 249679024,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629176571
    },
    {
        "content": "<p>TLDR (from my perspective): we don’t use the package server to resolve #current, it has custom logic to pull from GH.  This is fragile and hard to discover, and is relevant for templates and IG packages.</p>",
        "id": 249711129,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1629203591
    },
    {
        "content": "<p>And more specifically: the custom logic, never formally documented but currently implemented in the IG publisher and in sushi independently (at least!), has a serious bug that allows anyone in the world to substitute their own content for any package's \"#current\".</p>\n<p>In fmg last week we decided to hard code (in a GitHub repo) a map specifying the  location where any given package's \"#current\" can be found, and augment the current custom logic by having it consult this map rather than blindly matching an arbitrary entry in the build server.</p>\n<ul>\n<li>\n<p>I'm looking this change as a temporary measure to prevent current implementation guides from breaking while we switch over to using existing npm features that already cover this use case (package URLs can be used as versions in a packages.json dependencies map). This does <em>not</em> require package server customization.</p>\n</li>\n<li>\n<p>OTOH, Lloyd is looking at this as the first step of a longer term deeper customization, where we develop automated tooling as a kind of shadow package server to determine which GitHub repositories are responsible for which packages and an automated first come first serve database :-)</p>\n</li>\n</ul>\n<p>At least we were able to agree on a common first step to plug the immediate hole. I don't think the step has been implemented yet.</p>",
        "id": 249719676,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629207562
    },
    {
        "content": "<p>The Git project and file have been created - they're here: <a href=\"https://github.com/hl7/package-info\">https://github.com/hl7/package-info</a><br>\nI've made and tested and submitted a pull request to use that new file.  It's tripping over something Mark says Grahame's working on and Mark's also asked for some cosmetic changes which I'll make.</p>\n<p>Lloyd is totally fine if this functionality gets moved into the package server.  I'm not as fussed as Josh about having supplementary custom code, but agree that having it handled by the package server would be better.  What Lloyd is passionate about is that from an end-user perspective, #current works as it always did.  (But that there's an authoritative source for '#current' that can't be overridden by someone externally, either by accident or on purpose without oversight.)</p>",
        "id": 249737719,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629215149
    },
    {
        "content": "<p>We can update SUSHI to use this, but I would like to understand how new projects get added to the list.  <code>#current</code> is actually the only option for referring to a package that hasn't yet been balloted (aside from <code>#dev</code>) -- so I would think that it's important for new projects to know how to get themselves added to the list.  Despite the issues w/ the former approach (and I agree there are issues), one advantage was that new projects were automatically registered w/ no manual intervention needed.</p>\n<p>So... if a user specifies a <code>#current</code> dependency and SUSHI cannot find it in the new (temporary) package-info file, I would like for SUSHI to be able to provide the user a message indicating how they can get that project added to the package-info.  But before I can create that message, I need to know the process myself. ;-)</p>\n<p>Also, just as an aside, SUSHI does not attempt to download the template at all.  So the original issue (related to hl7.fhir.template) is actually based on how the IG publisher resolves templates (not how SUSHI resolves dependencies).  That said, as noted, the underlying concern obviously applies to both.</p>",
        "id": 249748510,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1629219962
    },
    {
        "content": "<p>(my perspective on this is that pointing to the very latest bleeding edge commit on git is generally not what anybody wants, even if they think they do. We should be issuing frequent releases so that functionality that has actually been tested is always available as a release right away. This dramatically alleviates the need for anyone to point to a bleeding edge commit, and of course if they do want to point to a bleeding edge commit they can do so with a url.)</p>",
        "id": 249748553,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629219970
    },
    {
        "content": "<p>Of course using URL based dependencies for this kind of thing also allows you to point to other branches, other repositories, hot fixes, and so on. It's a much more general and reliable pattern then using a magic string called current.</p>",
        "id": 249748604,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629220009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191315\">Josh Mandel</span> <a href=\"#narrow/stream/179252-IG-creation/topic/build.20with.20hl7.2Efhir.2Etemplate/near/249748553\">said</a>:</p>\n<blockquote>\n<p>(my perspective on this is that pointing to the very latest bleeding edge commit on git is generally not what anybody wants, even if they think they do. We should be issuing frequent releases so that functionality that has actually been tested is always available as a release right away. This dramatically alleviates the need for anyone to point to a bleeding edge commit, and of course if they do want to point to a bleeding edge commit they can do so with a url.)</p>\n</blockquote>\n<p>Just to be clear, SUSHI does not interpret <code>#current</code> as \"last commit on git\" -- but rather as \"last successful build on CI\".  We don't really want SUSHI to have to build dependencies from source -- we want to always use pre-built packages.</p>",
        "id": 249748912,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1629220145
    },
    {
        "content": "<p>Yes you're right, I was being imprecise there. I should have written the latest successfully completed build, rather than the latest commit. This still does not imply a build that has been tested or is working or ready for adoption.</p>",
        "id": 249749006,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629220199
    },
    {
        "content": "<p>When #current is used, it's because someone absolutely wants the last successful build.  And there is no chance of there being a release for weeks or likely months.   Releases are when you have something well tested and stable.  There's often a need to use things that aren't at that point.  That requirement isn't going away.</p>",
        "id": 249763905,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629227103
    },
    {
        "content": "<p>So how would someone specify that they want the latest stable build?</p>",
        "id": 249768939,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1629229439
    },
    {
        "content": "<p>just don't specify a version, you get the latest release</p>",
        "id": 249770684,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629230284
    },
    {
        "content": "<p>I think #current makes sense as it is, but it's being used too much</p>",
        "id": 249770716,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629230301
    },
    {
        "content": "<blockquote>\n<p>allows anyone in the world to substitute their own content for any package's \"#current\"</p>\n</blockquote>\n<p>Obviously this is a bug, but I don't see how changing the package server helps</p>",
        "id": 249770814,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629230349
    },
    {
        "content": "<p>I totally dislike the idea of maintaining this file. That's a crap solution.</p>",
        "id": 249771036,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629230440
    },
    {
        "content": "<blockquote>\n<p>I totally dislike the idea of maintaining this file. That's a crap solution.</p>\n</blockquote>\n<p>I agree it's not a file we want to maintain! It's a spot fix for a security vulnerability.</p>",
        "id": 249772184,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629230962
    },
    {
        "content": "<p>We should talk through the solution space in more detail maybe on a call.</p>",
        "id": 249772193,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629230974
    },
    {
        "content": "<blockquote>\n<p>When #current is used, it's because someone absolutely wants the last successful build. </p>\n</blockquote>\n<p>I don't think this is true. I think it is used everywhere because people copy and paste it from example documentation, which should not use this syntax.</p>",
        "id": 249772338,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629231040
    },
    {
        "content": "<p>I was also unable to find where our templates are officially published in a package server. <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> for example on what package server do releases of the official hl7 template get published?</p>",
        "id": 249772477,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629231098
    },
    {
        "content": "<p>well, it's what it's intended for. I can't help it if people use something else, though the shouldn't</p>",
        "id": 249772500,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629231104
    },
    {
        "content": "<p><a href=\"http://packages2.fhir.org/packages\">packages2.fhir.org/packages</a></p>",
        "id": 249772683,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629231174
    },
    {
        "content": "<p>Both of these return the same (empty) response:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ npm --registry https://packages2.fhir.org/packages view hl7.fhir.template\n$ npm --registry https://packages2.fhir.org/packages view does.not.exist.fhir.template\n</code></pre></div>",
        "id": 249773503,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629231553
    },
    {
        "content": "<p>(And I don't see hl7.fhir.template or fhir.base.template at <a href=\"https://packages2.fhir.org/packages/catalog\">https://packages2.fhir.org/packages/catalog</a> in the UI.)</p>",
        "id": 249773548,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629231583
    },
    {
        "content": "<p>(Packages that <em>are</em> present, like <code>hl7.fhir.us.core</code>, fail in different ways.)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Errors resolving and installing \"hl7.fhir.us.core\"</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ npm --registry https://packages2.fhir.org/packages view hl7.fhir.us.core --json <span class=\"p\">|</span> head\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"_id\"</span>: <span class=\"s2\">\"hl7.fhir.us.core\"</span>,\n  <span class=\"s2\">\"name\"</span>: <span class=\"s2\">\"hl7.fhir.us.core\"</span>,\n  <span class=\"s2\">\"dist-tags\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"latest\"</span>: <span class=\"s2\">\"4.0.0\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"versions\"</span>: <span class=\"o\">[</span>\n    <span class=\"s2\">\"0.0.0\"</span>,\n    <span class=\"s2\">\"1.0.0\"</span>,\n    <span class=\"s2\">\"1.0.1\"</span>,\n\n$ npm --registry https://packages2.fhir.org/packages view hl7.fhir.us.core\nnpm ERR! Cannot <span class=\"nb\">read</span> property <span class=\"s1\">'unpackedSize'</span> of undefined\n\n\n$ npm --registry https://packages2.fhir.org/packages install hl7.fhir.us.core\nnpm ERR! Invalid package manifest: no <span class=\"sb\">`</span>dist.tarball<span class=\"sb\">`</span> field\n</code></pre></div>\n</div></div>",
        "id": 249773936,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629231781
    },
    {
        "content": "<p><a href=\"http://packages2.fhir.org\">packages2.fhir.org</a> is not a general npm server; it only implements the part of the npm spec documented here: <a href=\"https://docs.fire.ly/projects/Simplifier/api.html#package-server-api\">https://docs.fire.ly/projects/Simplifier/api.html#package-server-api</a>.</p>",
        "id": 249775575,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629232657
    },
    {
        "content": "<p><a href=\"http://packages2.fhir.org\">packages2.fhir.org</a> is not really intended to be a long term thing, but maybe it's going to have to be; it allows me to work around various limitations in <a href=\"http://packages.fhir.org\">packages.fhir.org</a></p>",
        "id": 249775675,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629232707
    },
    {
        "content": "<p>We <em>need</em> current for two reasons:</p>\n<ol>\n<li>when you're writing two IGs in parallel and one depends on the other</li>\n<li>with templates so that people can easily experiment with what's 'current' and make sure they're happy with it.</li>\n</ol>\n<p>I understand that people don't like #2 - the idea of IG authors being part of the testing process may not be appealing, but it's reality and it's not a reality that's going to change without a huge infusion of resources (which seems unlikely).</p>",
        "id": 249776111,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629232982
    },
    {
        "content": "<p>it sounds to me like some/many/most IGs are depending on #current templates when they shouldn't be .</p>",
        "id": 249776592,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629233236
    },
    {
        "content": "<blockquote>\n<p>when you're writing two IGs in parallel and one depends on the other</p>\n</blockquote>\n<p>This can directly be addressed with URL based references</p>",
        "id": 249777012,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629233449
    },
    {
        "content": "<p>I don't see how or why that should be necessary</p>",
        "id": 249777059,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629233475
    },
    {
        "content": "<blockquote>\n<p>with templates so that people can easily experiment with what's 'current' and make sure they're happy with it.</p>\n</blockquote>\n<p>This can be addressed with URL based references, or (better!) by generally publishing to npm every time a template is in a working state</p>",
        "id": 249777064,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629233477
    },
    {
        "content": "<blockquote>\n<p>it sounds to me like some/many/most IGs are depending on #current templates when they shouldn't be .</p>\n</blockquote>\n<p>Precisely.</p>",
        "id": 249777093,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629233492
    },
    {
        "content": "<blockquote>\n<p>I understand that people don't like #2 - the idea of IG authors being part of the testing process may not be appealing, but it's reality and it's not a reality that's going to change</p>\n</blockquote>\n<p>This is a pretty hostile stance for IG authors, who are just trying to get through their day.</p>",
        "id": 249777222,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629233543
    },
    {
        "content": "<p>They <em>should</em> be using #current, because otherwise they're going to get hit with the identical changes once we put out an official release.  Once something is committed to current, it's staying that way unless someone who's not a developer complains.  If the only time anyone notices is when it's an official release, then that's what's going to happen.</p>",
        "id": 249777607,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629233765
    },
    {
        "content": "<p>We want it to be <em>easy</em> to switch between #current and latest release.  Switching to a full blown URL is too painful and makes something we want to be easy unnecessarily hard.</p>",
        "id": 249777661,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629233804
    },
    {
        "content": "<p>I still think that most IGs should be running on the latest release, not #current.</p>",
        "id": 249778932,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629234438
    },
    {
        "content": "<p>but things still need to be tested, and we don't have a budget for testing other than IG authors doing the testing, <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>, so in practice they are part of the testing process, however things work</p>",
        "id": 249779024,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629234487
    },
    {
        "content": "<blockquote>\n<p>things still need to be tested, and we don't have a budget for testing other than IG authors doing the testing</p>\n</blockquote>\n<p>It's all about time management. For example in our auto-build cluster I have some <em>old cruft</em> that I know I need to update. But I can do it on my own terms, when I'm ready to make the switch. I don't need to stop making bugfixes and feature improvements to go fight an upgrade fire.</p>",
        "id": 249782171,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629236131
    },
    {
        "content": "<p>Yes, IG authors need to test and review changes. But that shouldn't need to <em>block</em> progress on IG features.</p>",
        "id": 249782273,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629236175
    },
    {
        "content": "<p>We can run a bunch of builds in the background and tell IG authors: \"Click here to see your latest release re-built with our latest template, and let us know if anything looks off\". That's way better than \"hey, your work is blocked now.\"</p>",
        "id": 249782338,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629236224
    },
    {
        "content": "<p>obviously the work shouldn't get blocked because of template changes, but they never have. What blocked them was a bug in the build code</p>",
        "id": 249783395,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629236949
    },
    {
        "content": "<p>how about this for a bug: the current template code always use #current if you don't specify the veresion</p>",
        "id": 249783525,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629237045
    },
    {
        "content": "<p>and when I fix that, then it turns out that the template packages aren't being loaded onto the package server. I'll have to fix that...</p>",
        "id": 249783856,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629237226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> That'll be why you didn't see them</p>",
        "id": 249783870,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629237241
    },
    {
        "content": "<p>Yep. This is progress :-)</p>",
        "id": 249788848,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629240565
    },
    {
        "content": "<p>If #current doesn't work for someone, that's never a blocker.  They just strip it off to get the most recent 'official' release.  That's a super-easy thing for them to do.  #current should never contain cruft.  Nothing should ever be in the CI build 'master' branch that hasn't been tested as much as it's going to be and is believed to work.  If anyone is messing around and wants to share, they do that with a branch other than master.</p>",
        "id": 249794525,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629245551
    },
    {
        "content": "<blockquote>\n<p>They just strip it off to get the most recent 'official' release</p>\n</blockquote>\n<p>except that no one ever has because that doesn't work</p>",
        "id": 249796200,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629247381
    },
    {
        "content": "<p>it will work from the next release</p>",
        "id": 249805159,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629259329
    },
    {
        "content": "<p>now. turning to the change. The problem is that if someone clones the repo, and then gets the autobuilder to build it, their latest master overrides the last build of that id, unless they change the id?</p>",
        "id": 249809820,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629264752
    },
    {
        "content": "<p>that's a feature, not a problem, for most cases. So why has it suddenly been deemed to be a problem?</p>",
        "id": 249809832,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629264771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 249809834,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629264776
    },
    {
        "content": "<p>in this case, someone caused an old version of the template to be built and pushed to the last build.  that then broke everybody</p>",
        "id": 249809852,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1629264813
    },
    {
        "content": "<p>btw, <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>, </p>\n<blockquote>\n<p>Nothing should ever be in the CI build 'master' branch that hasn't been tested as much as it's going to be and is believed to work</p>\n</blockquote>\n<p>Good luck with that. Since you can't test dependencies across the templates without committing to master. I think it's not as simple as you think</p>",
        "id": 249809905,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629264849
    },
    {
        "content": "<p>so this is a template issue. And the templates are protected, and already listed in the code</p>",
        "id": 249809918,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629264903
    },
    {
        "content": "<p>we already have a mapping from packageId to github repo for IGs. So there's no point in recreating that.</p>",
        "id": 249810448,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629265664
    },
    {
        "content": "<p>so we can just have a simpler json file, that's way less maintenance: <a href=\"https://github.com/FHIR/ig-registry/blob/master/templates.json\">https://github.com/FHIR/ig-registry/blob/master/templates.json</a></p>",
        "id": 249811140,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629266546
    },
    {
        "content": "<p>My original proposal was a file managed by the CI build process where first-in wins, and non-master/main branches are ignored.  That would minimize maintenance.  Josh was strongly <em>not</em> in favor of making any changes to the CI build process to do that though.  A file maintained in Git was the \"mutually tolerable\" short-term solution.</p>\n<p>Having someone's custom branch override the \"current\" version of an IG is problematic.  Overriding the \"current\" version of a template which includes scripts is downright dangerous.  The code, whatever it is (I couldn't see it) that's supposed to protect against the 'wrong' Git project taking control of 'current' templates did not function as someone somehow triggered an 'old' copy of the FHIR template and suddenly overrode what everyone using #current got.  That's the problem we need to fix.</p>\n<p>My preference is that we go with a \"first in, wins\" approach where the first Git repo associated with a package id is permanently associated with that package id and, if you want to move the association to a new repo, you need to ask Joshua or someone to handle that.  Also, only commits to main or master are treated as #current, everything else is ignored.</p>",
        "id": 249846335,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629292214
    },
    {
        "content": "<p>(I'm not against automated rules -- just against implementing a new custom standalone system to manage them. These kinds of ownership rules should be pushed to a package server with API access;  this is why npm package servers exist. Things like <a href=\"https://github.com/verdaccio/verdaccio\">https://github.com/verdaccio/verdaccio</a> or Simplifier. Npm supports authentication, association of packages with accounts, automated publication of releases, and tagging releases with things like <code>latest</code> or <code>canary</code> or <code>stable</code> in addition to giving them semantic versions.)</p>",
        "id": 249852989,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629295168
    },
    {
        "content": "<p>We don't really want authentication.  We'd like the process to be managed automatically from the CI-build process.  A new author of a new IG shouldn't have to do anything than define their package id and set up a webhook.</p>",
        "id": 249872810,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629302920
    },
    {
        "content": "<p>If we can make that work with a package server, that's great.</p>",
        "id": 249872840,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629302937
    },
    {
        "content": "<blockquote>\n<p>We don't really want authentication</p>\n</blockquote>\n<p>We want to publish content in a given package only from an authentic source (i.e., ensuring the content is authentic). That's authentication.</p>",
        "id": 249874926,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629303917
    },
    {
        "content": "<blockquote>\n<p>A new author of a new IG shouldn't have to do anything than define their package id and set up a webhook.</p>\n</blockquote>\n<p>I don't think we should be <em>too</em> fixated on the specifics of a webhook workflow. There are lots of options that might have a similar ease of use (e.g., configuring a GH Action, or connecting a FHIR Builder GH App, or whatever)</p>",
        "id": 249875193,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629304026
    },
    {
        "content": "<p>it is quite easy to use that webhook on a personal github repo.</p>",
        "id": 249889842,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629310265
    },
    {
        "content": "<p>I applaud the idea that anyone should be able to be first to claim a space.. and I am not against us mostly trusting the goodness of the community. But I do think we should be doing something a bit more controlled when it comes to templates.</p>",
        "id": 249890048,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629310363
    },
    {
        "content": "<p>I think we need to separate templates from common IG.</p>",
        "id": 249890148,
        "sender_full_name": "John Moehrke",
        "timestamp": 1629310414
    },
    {
        "content": "<blockquote>\n<p>John Moehrke: it is quite easy to use that webhook on a personal github repo.</p>\n</blockquote>\n<p>For sure, any solutions we provide need to work in personal repos. (Better still, they'd work across hosting providers <em>beyond  github</em>.)</p>",
        "id": 249894024,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629312182
    },
    {
        "content": "<p>We want to establish a particular branch of a Git repository as the sole authorized source of the #current version.  We don't want anything to do with user authentication, which is what I presumed 'authentication' meant.  I don't think we should treat IGs and templates differently.  Having the wrong content show up as the CI-build for US core could be almost as detrimental as having someone get the wrong template when building.</p>",
        "id": 249896374,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629313117
    },
    {
        "content": "<p>You can't enforce something like \"establish a particular branch of a Git repository as the sole authorized source\" without some authentication strategy.</p>",
        "id": 249898856,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629314175
    },
    {
        "content": "<p>I think the assumption is that once the relationship between repo and IG id is established, you're counting on GitHub authentication to ensure only the right people can write to the repo (the \"sole authorized source\"). So there is authentication, it's just in the source system, not the build/publication system.</p>",
        "id": 249899926,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1629314755
    },
    {
        "content": "<p>US Core is a good case in point, but this happened with other repos as well: they got moved. It's a feature that you can just move them</p>",
        "id": 249901206,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629315395
    },
    {
        "content": "<p>We don't want them to be \"just moved\" without some confirmation that this is actually intentional.  If you're going to move, we're going to need human intervention.</p>",
        "id": 249901361,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629315479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> - We <em>can</em> enforce something like that.  It just might not fit into the existing repository's capabilities.  It's very easy for us to say that the first repository with a main/master branch to use the CI build is the owner.  And that's what we want.  We don't want to deal with users or credientialling - because it could be anyone in the world creating any kind of IG and we don't care about who they are or what IG they're creating.</p>",
        "id": 249901456,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629315510
    },
    {
        "content": "<blockquote>\n<p>If you're going to move, we're going to need human intervention.</p>\n</blockquote>\n<p>Why? Apparently you see having to be involved in other people's workflow as a good thing, but other people won't</p>",
        "id": 249901559,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629315574
    },
    {
        "content": "<p>Because someone cloning a repository and messing around shouldn't mess up US core.  And right now, that can happen.</p>",
        "id": 249901763,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629315675
    },
    {
        "content": "<p>As a note, if there's <em>any</em> sort of registration step (e.g., register package 'xyz'), you can easily generate tokens for them.  Adding a secret in GH that gets used in the webhook / action is not a high bar.</p>\n<p>That would let people have full control over their parts (e.g., where it is hosted), but still allow 'authorization' to prevent someone else from hijacking the package.  This is what many public services (npm, nuget, etc.) do.</p>\n<p>As long as someone via HL7 has the ability to revoke/reset a package, this also allows for things like 'person A moved on and we can't get a hold of them'.</p>\n<p>I think Josh's point is that these are all <em>solved</em> problems in package management.  If we opt out of them, we will need to rebuild all of those pieces (over time) and end up managing all of that ourselves.</p>",
        "id": 249902170,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1629315858
    },
    {
        "content": "<p>There's no safe way to be able to tell that some new repository that has the same package id is a legitimate move vs. a clone by someone who didn't bother to change the package id.  (Or even is maliciously trying to get people to see the wrong content - right now I could create a Git account under some temporary email account, clone US core, change the content completely, publish it using the CI build and that's the package everyone referencing uscore#current would get.)</p>",
        "id": 249902333,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629315958
    },
    {
        "content": "<p>I also wanted to chime in on the 'ci build' vs. 'release' discussion from earlier (re: <code>#current</code>) since I missed most of that in real time.  All of the common packaging services I'm aware of support a notion of 'prerelease' now, via standard semver tagging.  Using those services would mean consumers could opt into or out of 'stable' releases the same way they do in all their other projects.  Resolution logic likewise moves from 'custom in our tooling' to the package management client.</p>\n<p>It does add an extra step somewhere for someone on the production side.  Most likely, whomever sets up CI builds needs to push them with a prerelease tag of some sort... but I believe that will just be a small addition to the initial infrastructure (e.g., when writing a GH action).</p>\n<p>Overall, I feel like we have enough to be getting on with that we don't need to take responsibility for things that someone else has done.  Yes, it may mean some additional work in the short term (e.g., updating our workflows), but in the long term it means that we don't have to write and maintain all the moving parts.</p>",
        "id": 249903688,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1629316679
    },
    {
        "content": "<blockquote>\n<p>you're counting on GitHub authentication to ensure only the right people can write to the repo (the \"sole authorized source\"). </p>\n</blockquote>\n<p>For sure -- an authn strategy can depend on existing components, but it's important to do this properly to avoid <a href=\"https://en.wikipedia.org/wiki/Confused_deputy_problem\">https://en.wikipedia.org/wiki/Confused_deputy_problem</a>. (The current CI build infrastructure manages this by a direct mapping between github repos and IG build directories -- because we build everything from scratch every time, taking sources from a single spot and copying output to a deterministic spot. That's one simple example of how to manage this, with some benefits and costs.)</p>",
        "id": 249904113,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629316850
    },
    {
        "content": "<blockquote>\n<p>There's no safe way to be able to tell that some new repository that has the same package id is a legitimate move vs. a clone by someone who didn't bother to change the package id.</p>\n</blockquote>\n<p>Right. That's why you need to enforce invariants like \"only authenticated users with authorization can cause a new package version to be published.\"</p>",
        "id": 249904333,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629316979
    },
    {
        "content": "<p>I admit to not knowing how using a npm package server solves this problem. I can only imagine some workflow like this:</p>\n<ul>\n<li>Someone wants a new IG. They have to email someone (me?) to register it on the npm server</li>\n<li>whoever registers it, gives the person a secret</li>\n<li>They have to remember the secret somewhere. </li>\n<li>they put the secret in their github hook setup</li>\n<li>the build pushes the package to the npm server if the secret is correct</li>\n</ul>",
        "id": 249907325,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629318499
    },
    {
        "content": "<p>Yes but step one is open to anyone, I think. Unless we have reserved names/policies (analysis there isn't unique to npm publishing, it applies to any strategy)</p>",
        "id": 249907824,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629318771
    },
    {
        "content": "<p>And that means step 2 is automated.</p>",
        "id": 249907858,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629318791
    },
    {
        "content": "<p>how can it be open to anyone?</p>",
        "id": 249907899,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629318819
    },
    {
        "content": "<p>That's how the public worldwide npm registry works. It implements a first come first serve registration process for arbitrary package names, and a restricted registration process for scoped package names like ®my-gh-user/project</p>",
        "id": 249909361,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629319618
    },
    {
        "content": "<p>For nuget, <a href=\"https://docs.microsoft.com/en-us/nuget/nuget-org/publish-a-package\">this article</a> describes the workflow for publishing a package:</p>\n<ul>\n<li>create a user account</li>\n<li>generate an api key (can scope to a specific package)</li>\n<li>push packages with the api key</li>\n</ul>\n<p>npm has the same process, though the <a href=\"https://docs.npmjs.com/\">official docs</a> are bit more complicated (I don't see an 'official' short guide).</p>\n<p>As Josh said, names are first-come-first-serve for registering, but the management org has the ability to revoke packages (e.g., if I register a phishing package with a misleading name).</p>",
        "id": 249910124,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1629320033
    },
    {
        "content": "<p>sigh. I expected this would be the case. There's a mismatch here, user vs package permissions</p>",
        "id": 249911275,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1629320543
    },
    {
        "content": "<p>That's exactly right.</p>",
        "id": 249911723,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629320800
    },
    {
        "content": "<p>Yeah..  there needs to be <em>something</em> that can authorize writing a package.  AFAIK, that's a generally accepted part of a package server.  E.g., the <a href=\"https://github.com/NuGet/NuGetGallery#build-and-run-the-gallery-in-arbitrary-number-easy-steps\">NuGet Gallery Project</a>, the <a href=\"https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry\">GitHub Package Registry</a>, etc.</p>",
        "id": 249911801,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1629320849
    },
    {
        "content": "<p>At the end of the day, there's some policy specifying how to decide who can write to which packages, and some process to enforce the policy.</p>\n<ul>\n<li>Today the enforced policy is \"anyone can write any package at any time</li>\n<li>In the future we might have policies based on who asked first; based on who controls a domain, or a GitHub org; based on who HL7 blesses, etc (and in combination)</li>\n</ul>",
        "id": 249912265,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629321106
    },
    {
        "content": "<p>You can't make that complexity go away. But sometimes you can outsource a chunk of it (I.e., to existing registry software, rather than recreating it).</p>",
        "id": 249912786,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629321275
    },
    {
        "content": "<p>Anyway, I didn't mean to be so dogmatic and absolutist on this thread. I'm sorry for that.</p>\n<p>I most critically want to make sure we're considering the design space (understanding pros and cons of different solutions).  That will help us make an informed decision, whatever we pick.</p>",
        "id": 249915266,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1629322729
    },
    {
        "content": "<p>Wanted to respond to the question on testing dependencies - actually it is possible to test dependencies locally - it requires a bit of work as you have to fuss with the dependencies of your local copies, but it's doable.  Obviously, when we make changes to the base, we can't know about it breaking templates other than the ones HL7 controls though.  However, from our perspective, that's still 'tested'.  Seeing how the changes work with templates outside HL7's control is part of what releasing to #current is for.  (Note: it's possible that as we start to have more formal governance over changes to the base template and to publisher function that changes might be tested on templates other than HL7's if/when we have volunteers who commit to doing that.)</p>",
        "id": 249940888,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1629347277
    },
    {
        "content": "<p>This conversation is incredibly interesting to me, but I have not been able to dig in to the details as many on this thread, so I wish I understood more of it. For most IG authors, I assume they just use the initiation capabilities of their favorite IG authoring tool or copy over from another IG. I doubt most know anything about the templates other than making sure they have the right one for their scope as defined here: <a href=\"http://build.fhir.org/ig/FHIR/ig-guidance/index.html\">http://build.fhir.org/ig/FHIR/ig-guidance/index.html</a><br>\nIs there some guidance regarding what #current means or how to use the latest official release. My expectation is most just want the latest acceptable tested version to get their IG out there.</p>",
        "id": 250244366,
        "sender_full_name": "Corey Spears",
        "timestamp": 1629590856
    }
]