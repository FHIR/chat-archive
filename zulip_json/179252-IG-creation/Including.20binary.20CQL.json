[
    {
        "content": "<p>I recently found out that the Publisher allows storing base64-encoded CQL in seperate files (nice!). But i tried to use this functionality in I got an error:</p>\n<div class=\"codehilite\"><pre><span></span>Translating CQL source                                                           (00:27.0066)\nTranslating CQL source in folder D:\\Uni\\bbmri-fhir-ig\\input\\other                (00:27.0067)\nTranslating CQL source in file D:\\Uni\\bbmri-fhir-ig\\input\\other\\test.cql         (00:27.0075)\nTranslation failed with (1) errors; see the error log for more information.      (00:27.0706)\nPublishing Content Failed: Error doing replacements - no id defined in resource: Bundle/null (00:28.0184)\n</pre></div>\n\n\n<p>In the Library i have</p>\n<div class=\"codehilite\"><pre><span></span> &quot;content&quot;: [\n    {\n      &quot;id&quot;: &quot;ig-loader-test.cql&quot;\n    }\n  ]\n</pre></div>\n\n\n<p>So it seems to find the file, but somehow needs another id? I understood that test.cql only needs to include the base64-encoded CQL, or does it need a wrapper of some sorts?</p>",
        "id": 194941317,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1587566440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192119\">@Yan Heras</span> and I were also trying to figure out what to do here. Last week, we grabbed the sample-ig and did a build, but we don't see the CQL showing up anywhere, and I'm not sure if it's something we're doing wrong or an issue with the build process. Can anyone offer advice?</p>",
        "id": 194962737,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1587575641
    },
    {
        "content": "<p>Yes, the library resource is a skeleton for what is published in the output. It takes source CQL files included in the input/cql directory (or whatever directory is configured in that parameter in the IG), performs the translation and packages the CQL content in the publisher library in the output.</p>",
        "id": 194969555,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1587578688
    },
    {
        "content": "<p>So this example.cql for example:</p>",
        "id": 194969741,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1587578771
    },
    {
        "content": "<p><a href=\"https://github.com/FHIR/sample-ig/blob/master/input/cql/example.cql\" title=\"https://github.com/FHIR/sample-ig/blob/master/input/cql/example.cql\">https://github.com/FHIR/sample-ig/blob/master/input/cql/example.cql</a></p>",
        "id": 194969745,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1587578772
    },
    {
        "content": "<p>Is referenced by the id 'ig-loader-example.cql' from this library resource: <a href=\"https://github.com/FHIR/sample-ig/blob/master/input/examples/Library-example.json\" title=\"https://github.com/FHIR/sample-ig/blob/master/input/examples/Library-example.json\">https://github.com/FHIR/sample-ig/blob/master/input/examples/Library-example.json</a></p>",
        "id": 194969834,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1587578825
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> . We started with the sample-ig, and replicated the approach, but we must be doing something wrong since we're not seeing the CQL. Might be better to wait until we move our draft IG over to the HL7 build site, so it's easier to see what we've done. So <span class=\"user-mention\" data-user-id=\"192119\">@Yan Heras</span> , maybe we should just study this a bit more, and then revisit once we're up on HL7 build site?</p>",
        "id": 194973762,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1587580691
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>, I see the publisher has put the cql content in the output file \"Library-example.json.html\" in content with contentType \"text/cql\", however, is the publisher able to output the actual source cql (not after the translation) ? something like what's in the Opioid IG where you can see the author view of the cql file (<a href=\"http://build.fhir.org/ig/cqframework/opioid-cds/Library-omtklogic.html\" title=\"http://build.fhir.org/ig/cqframework/opioid-cds/Library-omtklogic.html\">http://build.fhir.org/ig/cqframework/opioid-cds/Library-omtklogic.html</a>).</p>",
        "id": 194977651,
        "sender_full_name": "Yan Heras",
        "timestamp": 1587582684
    },
    {
        "content": "<p>We are working to add a template for the Library that will include the CQL as part of the generated Narrative, something like this: <a href=\"http://build.fhir.org/ig/cqframework/opioid-cds/Library-opioidcds-recommendation-10.html\" title=\"http://build.fhir.org/ig/cqframework/opioid-cds/Library-opioidcds-recommendation-10.html\">http://build.fhir.org/ig/cqframework/opioid-cds/Library-opioidcds-recommendation-10.html</a></p>",
        "id": 194979007,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1587583356
    },
    {
        "content": "<p>Great, thank you! is there a time frame for this new template to be available?</p>",
        "id": 194980714,
        "sender_full_name": "Yan Heras",
        "timestamp": 1587584111
    },
    {
        "content": "<p>Should be soon, I'll be working on it tonight.</p>",
        "id": 194983202,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1587585329
    },
    {
        "content": "<p>Thanks Bryn!</p>",
        "id": 194985952,
        "sender_full_name": "Yan Heras",
        "timestamp": 1587586675
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> . Sorry if this is a naive question, since I'm still a bit new to the IG publication process.  In the draft Outcome Criteria Framework IG [http://build.fhir.org/ig/HL7/fhir-outcome-criteria-framework-ig/branches/master/index.html], I've created a FHIR Library profile that says that Library.content must reference a CQL file (rather than include it in Library.content.data), but the publishing process automatically pulls the CQL into Library.content.data. Is there a way to avoid having the publisher pull the CQL into Library.content.data, and instead point to the CQL file so that a reader can download it to view it?</p>",
        "id": 210422333,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600363671
    },
    {
        "content": "<p>Well, you could, but there's a whole bunch of extra processing that \"pulling the CQL into the Library\" does that is important for packaging the CQL library as a FHIR Library resource. Things like automatically exposing data requirements, parameters, and related artifacts. You'd have to do all of that another way if you didn't allow the publisher to do it's thing there.</p>",
        "id": 210460522,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600382698
    },
    {
        "content": "<p>why not include it in the data?</p>",
        "id": 210461081,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600383103
    },
    {
        "content": "<p>Somehow I thought content had to be either referenced or directly embedded, but it looks like I was mistaken, so pulling the CQL into the LIbrary doesn't hurt anything. Is there a way to also point to the CQL files themselves, so readers can see them in text format?</p>",
        "id": 210469342,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600390925
    },
    {
        "content": "<p>hmm I thought that happened already</p>",
        "id": 210471173,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600393138
    },
    {
        "content": "<p>The Library template includes the CQL as part of the fenerated narrative, as well as an anchor so you can point to it directly.</p>",
        "id": 210476423,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600400568
    },
    {
        "content": "<p>*generated</p>",
        "id": 210476427,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600400581
    },
    {
        "content": "<p>I prefer fenerated. or maybe fenestrated</p>",
        "id": 210476437,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600400596
    },
    {
        "content": "<p>lol</p>",
        "id": 210476493,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600400655
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> , <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I'm not following you.  You are saying that somewhere in the published output there is a way to see the CQL file itself, so that a reviewer of the IG can just click it and see the text contents?</p>",
        "id": 210523101,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600437991
    },
    {
        "content": "<p>No, I'm saying that the CQL is in the generated narrative: <a href=\"http://build.fhir.org/ig/cqframework/opioid-cds-r4/Library-library-OpioidCDSREC01.html\">http://build.fhir.org/ig/cqframework/opioid-cds-r4/Library-library-OpioidCDSREC01.html</a></p>",
        "id": 210523742,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600438272
    },
    {
        "content": "<p>Yes, that's exactly what I'm looking for, but I don't know how to get it to generate. Is there something I need to include in the Library to cause that to generate? When I upload a Library example, I include this:   \"content\": [{\"id\": \"ig-loader-DepressionOutcomes.cql\"}. The output I get is just the base64 encoded CQL showing up in the data field.</p>",
        "id": 210525464,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600438997
    },
    {
        "content": "<p>have you got an example you can point to?</p>",
        "id": 210568166,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600459004
    },
    {
        "content": "<p>It's a template that you need to include. We're working on getting it to the base template but I don't think it's there yet (or it would already be happening, right). <a href=\"https://github.com/FHIR/sample-ig/blob/master/templates/liquid/Library.liquid\">https://github.com/FHIR/sample-ig/blob/master/templates/liquid/Library.liquid</a></p>",
        "id": 210568959,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600459391
    },
    {
        "content": "<p>Put that template in that folder, and put this parameter in your IG:</p>",
        "id": 210569536,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600459685
    },
    {
        "content": "<p><a href=\"https://github.com/FHIR/sample-ig/blob/master/input/myig.xml#L129\">https://github.com/FHIR/sample-ig/blob/master/input/myig.xml#L129</a></p>",
        "id": 210569537,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600459685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> This is for the draft Outcome Criteria Framework IG [http://build.fhir.org/ig/HL7/fhir-outcome-criteria-framework-ig/index.html], where I'm trying to introduce a FHIR Library profile that requires a pointer to a CQL file, and that also publishes such that viewers can see the text of the CQL file.</p>",
        "id": 210570718,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600460336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> can you tell me what parameter code to use?</p>",
        "id": 210570743,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600460352
    },
    {
        "content": "<p>Include this parameter:</p>\n<div class=\"codehilite\"><pre><span></span><code>    &lt;parameter&gt;\n      &lt;code value=&quot;path-liquid&quot;/&gt;\n      &lt;value value=&quot;templates\\liquid&quot;/&gt;\n    &lt;/parameter&gt;\n</code></pre></div>\n\n\n<p>That parameter is a relative path to the templates folder, where the templates are loaded by resource name. There's documentation on implementation guide parameters <a href=\"https://confluence.hl7.org/display/FHIR/Implementation+Guide+Parameters\">here</a> for more information too.</p>",
        "id": 210571020,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600460503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> the template is rendering this as an example, not a canonical resource. Why?</p>",
        "id": 210571170,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600460591
    },
    {
        "content": "<p>The example layout is the default layout - I presume we don't have a layout specified for Library.  What would we want such a layout to look like?</p>",
        "id": 210572479,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600461453
    },
    {
        "content": "<p>all canonical resources should have a summary table as part of the template</p>",
        "id": 210573599,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600462117
    },
    {
        "content": "<p>other than that... nothing special</p>",
        "id": 210573612,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600462129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  I don't really understand why the publishing process adds dataRequirements and parameters to my Library example - presumably that was added to meet someone's needs, and I guess it doesn't really hurt me.  What I'm looking to do is [1] Create a profile on FHIR Library resource, that requires a reference to a CQL file - this would just render like any other profile; [2] Create a FHIR Library example, that conforms to the profile, which references a CQL file; [3] Enable the ability of a reviewer of the IG to view the text-based referenced CQL file.</p>",
        "id": 210573699,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600462192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193751\">@Bob Dolin</span> ,  where would the reference to the CQL file point?</p>",
        "id": 210573882,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600462307
    },
    {
        "content": "<p>The point of packaging a CQL library as a FHIR Library is that the Library resource actually _contains_ the CQL. Otherwise, to distribute the library, you have to _also_ distribute the CQL file.</p>",
        "id": 210573987,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600462360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> I don't really mind if the CQL is embedded in the FHIR Library, but I also want to maintain the CQL files separately. I was thinking, for the examples, just putting the CQL files into the github input/cql folder, and then putting the filenames into Library.content.url</p>",
        "id": 210574230,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600462516
    },
    {
        "content": "<p>I may be off on this <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> , but it seems as though, if you have a lot of CQL files, you can leverage the metadata afforded by the FHIR Library to find the one you want, but there will still be discoverability cases where it'll help to be able to search through the corpus of CQL text files.</p>",
        "id": 210574433,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600462630
    },
    {
        "content": "<p>The templates don't add anything to the Library.  If that's happening, it's happening inside the publisher itself...</p>",
        "id": 210574492,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600462679
    },
    {
        "content": "<p>right. I want the template to do something...</p>",
        "id": 210575176,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600463053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"193751\">@Bob Dolin</span> , yes, you still maintain the source as CQL files, but when they are packaged in the implementation guide, they are in FHIR Library resources. The generated narrative contains the CQL so that is searchable/indexable.</p>",
        "id": 210575416,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600463201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I'm referring to Bob's report of additional data elements being inserted into his library.</p>",
        "id": 210575519,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600463277
    },
    {
        "content": "<p>On the topic of template change - should the summary table appear if the resource is being used as an example, or only as an actual IG conformance resource?</p>",
        "id": 210575611,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1600463315
    },
    {
        "content": "<p>not sure.</p>",
        "id": 210575979,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600463531
    },
    {
        "content": "<p>probably yes</p>",
        "id": 210575996,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600463544
    },
    {
        "content": "<p>and setting up the library happens in the publisher loading code</p>",
        "id": 210576014,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600463561
    },
    {
        "content": "<p>So, let me ask you this - let's say I don't really need the automated packaging of CQL into the FHIR Library. What if I could just reference the CQL files direct in the IG, and then have them show up on the Table of Content and Artifact Summary pages?</p>",
        "id": 210577061,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600464217
    },
    {
        "content": "<p>we don't want you to do that, and we think you shouldn't</p>",
        "id": 210577104,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600464243
    },
    {
        "content": "<p>how come?</p>",
        "id": 210577135,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600464251
    },
    {
        "content": "<p>because it avoids all the downstream distribution mechanisms that people use</p>",
        "id": 210577168,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600464276
    },
    {
        "content": "<p>sorry, not following you. You're saying its harder to maintain the link between the FHIR Library and it's corresponding CQL file if we treat them as separate but referenced files?</p>",
        "id": 210577243,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600464344
    },
    {
        "content": "<p>very much so</p>",
        "id": 210577740,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600464661
    },
    {
        "content": "<p>I don't see why you want it not to be part of the library?</p>",
        "id": 210577767,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600464679
    },
    {
        "content": "<p>I don't mind if it's base64 encoded into the FHIR Library really if people find that convenient, but I want to have stand-alone CQL files that I can reference by the FHIR Library. This lets me manage the CQL files, keep them where I want, search them when I can't find the one I want, etc.</p>",
        "id": 210578080,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600464902
    },
    {
        "content": "<p>I can't figure out whether you're saying that as an author or a reader</p>",
        "id": 210578104,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600464930
    },
    {
        "content": "<p>Here's a scenario: I'm a CQL author sitting down to write a new rule, but I want to first see if such a rule already exists.</p>",
        "id": 210578218,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600465008
    },
    {
        "content": "<p>As for a reader of the IG, I think the current publishing solution works, although if my example FHIR Library includes a content.url, it seems to suppress the nice rendering of the CQL.  I'll test it again though...</p>",
        "id": 210578354,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600465125
    },
    {
        "content": "<p>yeah the rendering of library needs work.</p>",
        "id": 210578378,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600465146
    },
    {
        "content": "<p>But I don't understand </p>\n<blockquote>\n<p>I'm a CQL author sitting down to write a new rule, but I want to first see if such a rule already exists</p>\n</blockquote>",
        "id": 210578400,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600465174
    },
    {
        "content": "<p>I was imaging an enterprise CDS management system, containing 100s of rules - for diabetes, for depression, for all kinds of things. When the time comes to write a new rule, say, for all-cause-mortality for congestive heart failure, I'll be darned if I can remember which CQL file contains that rule, since I wrote it about a year ago. It's too granular to be discoverable with FHIR Library metadata, so I just want to do a text-based search of all by CQL files.</p>",
        "id": 210578670,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600465363
    },
    {
        "content": "<p>When I include this</p>\n<p>\"content\": [<br>\n    {<br>\n      \"id\": \"ig-loader-DepressionMeasure.cql\"<br>\n    }</p>\n<p>in my FHIR Library, I get all the bells and whistles, including packaging the CQL into the FHIR Library. Seems like this is very important to folks, and it doesn't really hurt anything, so that's fine.</p>\n<p>But when I also include contentType and url, like this: </p>\n<p>\"content\": [<br>\n    {<br>\n      \"id\": \"ig-loader-DepressionMeasure.cql\",<br>\n      \"contentType\": \"text/cql\",<br>\n      \"url\": \"DepressionMeasure.cql\"<br>\n    }</p>\n<p>all the bells and whistles are somehow suppressed. Is it possible to NOT suppress the preferred publishing process while still allowing for the inclusion of contentType and url in my examples?</p>",
        "id": 210579316,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600465889
    },
    {
        "content": "<p>So something like <code>GET [base]/Library?_text=(bone OR liver) and metastases</code>?</p>",
        "id": 210579396,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600465934
    },
    {
        "content": "<p>And actually, I think \"all-cause-mortality\" and \"congestive-heart-failure\" are exactly the kinds of concepts you'd want to tag the rule with in the <code>useContext</code> element to make searches exactly like the one you're describing easier.</p>",
        "id": 210579634,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600466134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> I hadn't considered that. You're saying that since the publishing process puts the full text into Library.text, than it's equivalent to full text searching of textual CQL files?</p>",
        "id": 210579736,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600466212
    },
    {
        "content": "<p>It's a superset of that, because the narrative does contain other things, but yes it would search the narrative text.</p>",
        "id": 210579773,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600466254
    },
    {
        "content": "<p>And as for useContext, yes, I agree that is a valuable element. But look at VSAC for instance - you can search using metadata, and generally hone in on the right value set, but imagine searching value sets via something like 'find value sets that contain code X and do not contain code Y'</p>",
        "id": 210579787,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600466275
    },
    {
        "content": "<p>I think that you're making Bryn's point. More generally, you seem to be assuming that indexing etc won't work unless the raw cql source is available, but that seems like a strange assumption to me. </p>\n<p>But I spent some time on this, so from the next release:</p>\n<ul>\n<li>Library resources will be rendered much more nicely. </li>\n<li>do not use library.liquid (<span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> - I can do things in the code that you wouldn't try in liquid)</li>\n<li>the contents of the library will be rendered (with syntax highlighting)</li>\n<li>an additional file Library-[id].cql (or whatever) will be produced as well</li>\n</ul>",
        "id": 210685740,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600636491
    },
    {
        "content": "<p>so just let the cql file be in the library as we recommend</p>",
        "id": 210685759,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600636511
    },
    {
        "content": "<p>Great, thanks Grahame!</p>",
        "id": 210687075,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600638539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> thanks very much. You all have a lot more experience with CQL than I do, so I'll follow your recommendations.</p>",
        "id": 210749032,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1600698517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> sorry to keep at this, but I still can't get rendering to work. Here is my repository: <a href=\"https://github.com/HL7/fhir-outcome-criteria-framework-ig\">https://github.com/HL7/fhir-outcome-criteria-framework-ig</a>; Here is the build log: <a href=\"http://build.fhir.org/ig/HL7/fhir-outcome-criteria-framework-ig/branches/master/build.log\">http://build.fhir.org/ig/HL7/fhir-outcome-criteria-framework-ig/branches/master/build.log</a>. When I build locally (publisher 1.1.56), I get a very nice representation of the CQL that shows up at the bottom of the Library (see picture). But that CQL doesn't show up on the build site, and the build log is giving me error messages I don't understand, such as [Internal error in location for message: 'Error @1, 1: Found / expecting a token name', loc = '/scratch/ig-build-temp-ZH5E1N/repo/input/cql/depressionIntervention.cql', err = 'CQL source was not associated with a library resource in the IG.']. Any advice? <a href=\"/user_uploads/10155/yCWb2QQawO-d5I88QclfdJAZ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/yCWb2QQawO-d5I88QclfdJAZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/yCWb2QQawO-d5I88QclfdJAZ/image.png\"></a></div>",
        "id": 221599233,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1609806026
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"193751\">@Bob Dolin</span> , apologies for the delay, I'll try to get to this today</p>",
        "id": 221806179,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1609958991
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span></p>",
        "id": 221806855,
        "sender_full_name": "Bob Dolin",
        "timestamp": 1609959304
    }
]