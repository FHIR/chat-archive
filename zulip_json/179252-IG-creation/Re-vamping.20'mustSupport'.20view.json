[
    {
        "content": "<p>Soon (hopefully this weekend), I plan to start working on revamping the 'mustSupport' view so that it actually shows what elements an implementer actually needs to worry about - which is more than just stuff flagged as mustSupport.  This change will also cause the mustSupport flag to start showing up on that view again because not all elements displayed will be mustSupport.  The proposed algorithm is here: <a href=\"https://github.com/HL7/fhir-ig-publisher/issues/147#issuecomment-829391194\">https://github.com/HL7/fhir-ig-publisher/issues/147#issuecomment-829391194</a>.  Rationale for the changes are as follows:</p>\n<ul>\n<li>If an element is mandatory (min &gt;=1), implementers have to populate it and if it's not mustSupport on receipt, should at least be familiar with what it is (it wouldn't be mandatory if it wasn't important to the semantics)</li>\n<li>if an element is a modifier element, implementers are required to confirm they understand the meaning of the element in order to process the instance.  Also, this will call attention to the existence of modifiers that IG authors might want to prohibit</li>\n<li>if an element has been constrained to not repeat or be prohibited entirely, implementers need to know that.  They also need to be aware of new invariants beyond the base spec that impact what elements they send, even if those elements aren't mustSupport.</li>\n</ul>\n<p>If you have concerns or want to suggest changes to the proposed algorithm, this is a good time to raise them.</p>",
        "id": 236705380,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1619714148
    },
    {
        "content": "<p>It sounds to me like a different view to 'must-support'. It's more like you're trying to create a view for 'must-know'. And it sounds problematic to me because everything is something you must know at some stage</p>",
        "id": 236738972,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1619727756
    },
    {
        "content": "<p>As an implementer, of an IG, you can totally ignore the non-mustSupport elements - so long as they aren't modifiers and they're not mandatory.  The point of the mustSupport view was to expose those things that an implementer needs to worry about.  It would make no sense for the templates to expose both views.  I can certainly define a distinct widget so the old one is still available if someone wants it, but the 'standard' HL7 profile wouldn't reference it.</p>",
        "id": 236741847,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1619728991
    },
    {
        "content": "<p>this is not the same thing as mustSupport... What happened to the efforts to create some flavors of similar things to MustSupport like this?</p>",
        "id": 236748524,
        "sender_full_name": "John Moehrke",
        "timestamp": 1619731079
    },
    {
        "content": "<p>I would like to have a \"noNeedToSupportButOthersMight\"</p>",
        "id": 236748644,
        "sender_full_name": "John Moehrke",
        "timestamp": 1619731104
    },
    {
        "content": "<p>I don't understand how that wouldn't simply be \"everything that isn't mustSupport\"?</p>",
        "id": 236751814,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1619732326
    },
    {
        "content": "<p>And that the full snapshot view shows you everything.</p>",
        "id": 236751835,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1619732342
    },
    {
        "content": "<p>We could go a bit farther and say we'll show an element if the definition or comments for the element have changed from the base resource.</p>",
        "id": 236751925,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1619732395
    },
    {
        "content": "<p>I agree with Lloyd it is the view of  what implementers want - and Must support is part of that, I don't care what it is called, but a pure must support view should be replace by it IMO</p>",
        "id": 236764946,
        "sender_full_name": "Eric Haas",
        "timestamp": 1619740401
    },
    {
        "content": "<p>I'd rather see IG-specific flags instead of a single \"Must Support\" flag with unspecified semantics that every IG overrides differently. For example, an IG might define and use three distinct flags, marking some elements as <code>Must-Produce</code>, some overlapping set as <code>Must-Display</code> and a special few as <code>Good-With-Mustard</code>.</p>",
        "id": 236765311,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1619740664
    },
    {
        "content": "<p>Changes to how mustSupport works should be discussed in a separate thread.  Agree there are some changes needed there.  However, it's what we have now.  The key piece of this thread is that a mustSupport only view isn't sufficient.  There are certain other elements that implementers need to be aware of and pay attention to even if they're not mustSupport - and the view needs to expose that.</p>",
        "id": 236767106,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1619741839
    },
    {
        "content": "<p>Should the algorithm include elements referenced by invariants?</p>",
        "id": 236788956,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1619761791
    },
    {
        "content": "<p>If the invariant appears on an element that falls into the above algorithm, then I guess so.  (That'll also encourage designers to make sure they get the 'constraint' references right.)</p>",
        "id": 236833006,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1619788994
    }
]