[
    {
        "content": "<p>I'm creating a profile that creates a slice on <code>Observation.derivedFrom</code> that references another profile. If the referenced profile is another Observation, I can set the discriminator type to <code>pattern</code> and the path to <code>resolve().code</code>. But if the referenced profile is something else (e.g., MolecularSequence) that doesn't have a code, how should the path be set? I tried setting it to <code>resolve().type</code> since MolecularSequence contains a <code>type</code>, but I get this error in the <code>qa.html</code>when it goes to validate an example.</p>\n<div class=\"codehilite\"><pre><span></span>Unsupported fixed pattern type for discriminator(resolve().type) for slice Observation.derivedFrom\n</pre></div>",
        "id": 193625865,
        "sender_full_name": " Bob Milius",
        "timestamp": 1586558190
    },
    {
        "content": "<p>discriminator = type + pattern</p>",
        "id": 193646743,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1586589390
    },
    {
        "content": "<p>I just tried to apply this. To me it is unclear where and how to apply the pattern of the targeted observation.coding.<br>\nIntuitively i would create a path like: <code>Observation.derivedFrom.resolve().code</code>but i'm pretty sure this is wrong. When profiling references i can only find examples on how to do it with the target type or profile.<br>\nCouldn't find an example using a pattern on data of the targeted resource.</p>",
        "id": 206395313,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1596980050
    },
    {
        "content": "<p>why are you sure this is wrong?</p>",
        "id": 206410338,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1597004815
    },
    {
        "content": "<p>Felt/thought that this isn't possible, happy to hear i was probably wrong.</p>",
        "id": 206437870,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1597047539
    },
    {
        "content": "<p>Concrete Example: I want to restrict the targets of Compositions.section.entry:</p>\n<ul>\n<li>discriminator on entry: type: $this.resolve(), pattern: $this.resolve().code</li>\n<li>in the slice (Composition.section.entry:firstSlice): targetProfile: <a href=\"http://hl7.org/fhir/StructureDefinition/Observation\">http://hl7.org/fhir/StructureDefinition/Observation</a></li>\n</ul>",
        "id": 206438685,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1597048298
    },
    {
        "content": "<p>do i now just add another ElementDefinition with id: <code>Observation.derivedFrom.resolve().code</code>and path <code>Observation.derivedFrom.resolve().code</code> including the pattern on Coding into the Composition Profile? </p>\n<p>That felt wrong to me.</p>",
        "id": 206438917,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1597048475
    },
    {
        "content": "<p>oh. I think... you have to refer to another profile and that profile has to be on the target resource and it has to profile the value to what you want it to be</p>",
        "id": 206445651,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1597054160
    },
    {
        "content": "<p>it can be a contained profile - I think the validator test cases do that</p>",
        "id": 206445659,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1597054172
    },
    {
        "content": "<p>Thats what i thought. Unfortunately the FHIR Endpoint in this project can't do slicing on profiles</p>",
        "id": 206451029,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1597059233
    },
    {
        "content": "<p>Does the end point need to?</p>",
        "id": 206451143,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1597059332
    },
    {
        "content": "<p>Yes during validation, to discriminate slices. Thanks for your clarification. As always very helpful.</p>",
        "id": 206465745,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1597069195
    }
]