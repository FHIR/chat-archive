[
    {
        "content": "<p>Hello, i have an error in some profiles: The link \"StructureDefinition-XXX-definitions.html#XXX.XXX.coding\" for \"coding\" cannot be resolved (valid targets: XXX targets).<br>\nIt's always with a slice,  the link for coding is missing the slice name in the differential view but not in the snapshot view.<br>\nExample: a profile PractitionerRole with a slice named SNOMED-CT in code;<br>\nThe differential view link:   &lt;a href=\"StructureDefinition-be-practitionerrole-definitions.html#PractitionerRole.code.coding\"&gt;  broken<br>\nThe snapshot view link: &lt;a href=\"StructureDefinition-be-practitionerrole-definitions.html#PractitionerRole.code:SNOMED-CT.coding\"&gt;  OK</p>",
        "id": 195156560,
        "sender_full_name": "Etienne Cantineau",
        "timestamp": 1587715342
    },
    {
        "content": "<p>can I reproduce this?</p>",
        "id": 195173315,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1587726441
    },
    {
        "content": "<p>I've added the PractitionerRole profile in this repo: <a href=\"https://github.com/ec-ehealth/Sushi-examples\" title=\"https://github.com/ec-ehealth/Sushi-examples\">https://github.com/ec-ehealth/Sushi-examples</a>. I run the last publisher version.</p>",
        "id": 195190191,
        "sender_full_name": "Etienne Cantineau",
        "timestamp": 1587736234
    },
    {
        "content": "<p>is there an actual IG where I can reproduce this? looking at the outcomes doesn't help</p>",
        "id": 195659043,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1588134381
    },
    {
        "content": "<p>Yes, here is my temp one: <a href=\"https://github.com/ec-ehealth/Build-source\" title=\"https://github.com/ec-ehealth/Build-source\">https://github.com/ec-ehealth/Build-source</a>,<br>\nwith outcome: <a href=\"https://ec-ehealth.github.io/ehealthplatformstandards/\" title=\"https://ec-ehealth.github.io/ehealthplatformstandards/\">https://ec-ehealth.github.io/ehealthplatformstandards/</a></p>",
        "id": 195669702,
        "sender_full_name": "Etienne Cantineau",
        "timestamp": 1588144975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  Hello, any news about these broken links?<br>\nHere is the QA from IG build: <a href=\"https://build.fhir.org/ig/ec-ehealth/Build-source/qa.html\">https://build.fhir.org/ig/ec-ehealth/Build-source/qa.html</a></p>",
        "id": 197897087,
        "sender_full_name": "Etienne Cantineau",
        "timestamp": 1589785829
    },
    {
        "content": "<p>I just checked this and I have  a question: Does the publisher need all the elements in the path to be defined in the differential, like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Claim.supportingInfo:Annex&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Claim.supportingInfo&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;sliceName&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Annex&quot;</span>\n      <span class=\"p\">}</span><span class=\"err\">,</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Claim.supportingInfo:Annex.category&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Claim.supportingInfo.category&quot;</span>\n      <span class=\"p\">}</span><span class=\"err\">,</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Claim.supportingInfo:Annex.category.coding&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Claim.supportingInfo.category.coding&quot;</span>\n      <span class=\"p\">}</span><span class=\"err\">,</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Claim.supportingInfo:Annex.category.coding.system&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Claim.supportingInfo.category.coding.system&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;patternUri&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://terminology.hl7.org/CodeSystem/claiminformationcategory&quot;</span>\n      <span class=\"p\">}</span><span class=\"err\">,</span>\n</code></pre></div>\n\n\n<p>or we can just define the sub-elements that matter?</p>\n<div class=\"codehilite\"><pre><span></span><code>      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Claim.supportingInfo:Annex&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Claim.supportingInfo&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;sliceName&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Annex&quot;</span>\n      <span class=\"p\">}</span><span class=\"err\">,</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Claim.supportingInfo:Annex.category.coding.system&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Claim.supportingInfo.category.coding.system&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;patternUri&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://terminology.hl7.org/CodeSystem/claiminformationcategory&quot;</span>\n      <span class=\"p\">}</span><span class=\"err\">,</span>\n</code></pre></div>\n\n\n<p>I don't know if this is generic behaviour or for a slice.</p>",
        "id": 197904445,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1589790698
    },
    {
        "content": "<p>(if I put all the paths, the errors are gone)</p>",
        "id": 197905573,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1589791481
    },
    {
        "content": "<p>It's always been the case that the \"full\" (not \"sparse\") differential is needed, either in the profile generally or in a slice.  I don't think that has changed (and your experience corroborates that).  It can be a pain sometimes, if you include all of it, as you noted, then it should work.</p>",
        "id": 197932248,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1589807694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> is this already considered sushi?</p>",
        "id": 197933829,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1589808395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243697\">@Etienne Cantineau</span> please confirm - were these profiles generated in sushi?</p>",
        "id": 197933876,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1589808422
    },
    {
        "content": "<p>Yes they were</p>",
        "id": 197934892,
        "sender_full_name": "Etienne Cantineau",
        "timestamp": 1589808831
    },
    {
        "content": "<p>My understanding is that while the publisher used to require all differential paths to be completely represented, it now supports sparse differentials... BUT sparse differentials are <em>not</em> allowed for paths with slices.  I <em>thought</em> that SUSHI always filled in all the elements when slices are involved, so if that's not happening, it's a bug.</p>",
        "id": 197935035,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1589808903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243697\">@Etienne Cantineau</span> -- are you using the most recent version of SUSHI (0.12.6)?</p>",
        "id": 197935132,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1589808954
    },
    {
        "content": "<p>(You can find out via <code>sushi -v</code>)</p>",
        "id": 197935229,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1589808981
    },
    {
        "content": "<p>Actually, I take that back.  I was thinking about the requirement that the element that declares the <code>sliceName</code> must be in the differential (even if it is from the parent profile and not actually changed).  If the path under that is not allowed to be sparse, I think that may be news to us.</p>",
        "id": 197935540,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1589809134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> -- are we not allowed to have sparse differentials in paths under a slice?  Or is that something the publisher <em>should</em> be handling?</p>",
        "id": 197935732,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1589809226
    },
    {
        "content": "<p>I know that this has been discussed on multiple occasions, but I don't have any clear recollection that it has actually changed.  I would be happy to be proven wrong, though. :)</p>",
        "id": 197936034,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1589809365
    },
    {
        "content": "<p>It was 0.12.5 but got the same with the newest version</p>",
        "id": 197936109,
        "sender_full_name": "Etienne Cantineau",
        "timestamp": 1589809400
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"243697\">@Etienne Cantineau</span>.  We'll be working on some bug fixes over the next few days.  If Grahame confirms that sparse differentials are not allowed under slices, we can probably fit in a fix this week.</p>",
        "id": 197936397,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1589809508
    },
    {
        "content": "<p>I will have to investigate</p>",
        "id": 197981731,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1589828689
    },
    {
        "content": "<p>OK.  I just found another case where the publisher is failing on sparse differentials.  It's a bit of an edge case, but the following differential crashes the publisher:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"s2\">&quot;differential&quot;</span><span class=\"err\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;element&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.value[x].extension&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation.value[x].extension&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;short&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;An extension to apply to all choices&quot;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>Stacktrace:</p>\n<div class=\"codehilite\"><pre><span></span><code>java.lang.Exception: Error generating snapshot for SampleObservation(sample-observation): Unable to generate snapshot for http://hl7.org/fhir/sushi-test/StructureDefinition/sample-observation in /Users/cmoesel/dev/fhir/sushi/build/input/profiles/structuredefinition-sample-observation\n    at org.hl7.fhir.igtools.publisher.Publisher.generateSnapshots(Publisher.java:4181)\n    at org.hl7.fhir.igtools.publisher.Publisher.loadConformance(Publisher.java:3563)\n    at org.hl7.fhir.igtools.publisher.Publisher.createIg(Publisher.java:826)\n    at org.hl7.fhir.igtools.publisher.Publisher.execute(Publisher.java:688)\n    at org.hl7.fhir.igtools.publisher.Publisher.main(Publisher.java:7310)\nCaused by: org.hl7.fhir.exceptions.FHIRException: Unable to generate snapshot for http://hl7.org/fhir/sushi-test/StructureDefinition/sample-observation in /Users/cmoesel/dev/fhir/sushi/build/input/profiles/structuredefinition-sample-observation\n    at org.hl7.fhir.igtools.publisher.Publisher.generateSnapshot(Publisher.java:4234)\n    at org.hl7.fhir.igtools.publisher.Publisher.generateSnapshots(Publisher.java:4179)\n    ... 4 more\nCaused by: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n    at java.util.ArrayList.rangeCheck(ArrayList.java:657)\n    at java.util.ArrayList.get(ArrayList.java:433)\n    at org.hl7.fhir.r5.conformance.ProfileUtilities.processPaths(ProfileUtilities.java:878)\n    at org.hl7.fhir.r5.conformance.ProfileUtilities.generateSnapshot(ProfileUtilities.java:540)\n    at org.hl7.fhir.igtools.publisher.Publisher.generateSnapshot(Publisher.java:4232)\n    ... 5 more\n</code></pre></div>",
        "id": 197990414,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1589833258
    },
    {
        "content": "<p>If I add empty <code>Observation</code> and <code>Observation.value[x]</code> elements to the differential, then the publisher is happy.</p>\n<p>Perhaps SUSHI should just play it safe and always avoid creating sparse differentials.  While it does create some more \"noise\" in the profile, it's not technically incorrect and seems to be more publisher-friendly.</p>",
        "id": 197990600,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1589833349
    },
    {
        "content": "<p>I think that's what is needed now, and is always safe.</p>",
        "id": 197992719,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1589834399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/179252-IG-creation/topic/The.20link.20.22XXX.22.20for.20.22coding.22.20cannot.20be.20resolved/near/197990600\">said</a>:</p>\n<blockquote>\n<p>Perhaps SUSHI should just play it safe and always avoid creating sparse differentials.  While it does create some more \"noise\" in the profile, it's not technically incorrect and seems to be more publisher-friendly.</p>\n</blockquote>\n<p>Agree, sounds better.</p>",
        "id": 197996333,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1589836394
    },
    {
        "content": "<p>IIRC, the first versions of SUSHI actually did this.  We took it out when we found that the publisher seemed to be supporting sparse differentials just fine.  Oh well!</p>",
        "id": 197996498,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1589836503
    },
    {
        "content": "<p>I  think this will be few lines of code and a few lines  in the resulting json, but much less lines of questions and complaints in Zulip</p>",
        "id": 197996831,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1589836688
    },
    {
        "content": "<p>ok. I fixed that. Wasn't really anything to do with sparse per se. In the next release</p>",
        "id": 198031459,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1589874456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243697\">@Etienne Cantineau</span> I don't think this is related to your problem. It's still on my list</p>",
        "id": 198031549,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1589874504
    },
    {
        "content": "<p>Ok thank you</p>",
        "id": 198035866,
        "sender_full_name": "Etienne Cantineau",
        "timestamp": 1589877245
    },
    {
        "content": "<p>fixed next release</p>",
        "id": 198155455,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1589951449
    },
    {
        "content": "<p>Based on the conversation and recommendations in this thread, the most recent version of SUSHI added intermediate differential elements to avoid \"sparse differentials\".  We were under the impression that doing such a thing was harmless, but it seems that may not be the case -- as <span class=\"user-mention\" data-user-id=\"215604\">@Saul Kravitz</span> has found a case where the <em>not-sparse</em> differential causes an IG Publisher error (but if you change it to a sparse differential, the error goes away).  See: <a href=\"#narrow/stream/179252-IG-creation/topic/Error.20in.20snapshot.20generation\">https://chat.fhir.org/#narrow/stream/179252-IG-creation/topic/Error.20in.20snapshot.20generation</a></p>",
        "id": 198929470,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1590602803
    },
    {
        "content": "<p>if Grahame says this is not related to the sparse differentials, do you want to try and reverse this?</p>",
        "id": 198929729,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1590602904
    },
    {
        "content": "<p>Maybe?  But as far as I know, having non-sparse differentials should be completely valid too; so we shouldn't <em>need</em> to back it out.  I guess I'd defer to <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> regarding whether SUSHI should actively <em>avoid</em> producing sparse differentials, or intentionally allow them (by only including elements that truly changed or introduce slices).</p>",
        "id": 198930393,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1590603177
    },
    {
        "content": "<p>(or we figure out why the other error is happening which would be safer)</p>",
        "id": 198931383,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1590603641
    },
    {
        "content": "<p>I think that in general, sushi should avoid trying to be smart here - it should insert or remove anything it doesn't get told to do. As much as I can tell, sparse or not is ok; in this case, there was a bug that sparse triggered, but it was going to trigger eventually. I'll have to debug the other case to figure out what the problem is</p>",
        "id": 198946105,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1590610164
    },
    {
        "content": "<blockquote>\n<p>I think that in general, sushi should avoid trying to be smart here - it should insert or remove anything it doesn't get told to do.</p>\n</blockquote>\n<p>OK.  So I think I need to interpret that as \"don't try to make differentials unsparse\" -- keep them sparse if that's the way authors define the profile.  This assumes that IG Publisher _should_ always handle sparse differentials fine.  And if it doesn't, that's a bug.  Yes?</p>",
        "id": 198951635,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1590612737
    },
    {
        "content": "<p>Or that the authors shouldn't/can't make the differentials sparse?  It would be good to know which way it is supposed to be.</p>",
        "id": 198952164,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1590612966
    },
    {
        "content": "<p>Right now, FSH doesn't provide a way that an author could say \"put this element in the differential even though it actually has no differences in it\".</p>",
        "id": 198952565,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1590613181
    },
    {
        "content": "<p>it's a bug if a sparse differential doesn't work</p>",
        "id": 198970238,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1590625301
    }
]