[
    {
        "content": "<p>This topic is a continuation of the thread around participation heirarchy: <a href=\"#narrow/stream/179166-implementers/topic/Pattern.20Development\" title=\"#narrow/stream/179166-implementers/topic/Pattern.20Development\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Pattern.20Development</a></p>\n<p>There are still implementers out there who think that we need / should have a deeper heirarchy for the participation resources. Where as right now they all have the same common ancestor DomainResource. </p>\n<p>The relevant resources are  CareTeam, Device, Group, HealthcareService, Location, Organization, Patient, Practitioner, PractitionerRole, RelatedPerson</p>\n<p>And see the participation pattern at <a href=\"http://build.fhir.org/participant.html\" target=\"_blank\" title=\"http://build.fhir.org/participant.html\">http://build.fhir.org/participant.html</a>.</p>",
        "id": 179380867,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572387617
    },
    {
        "content": "<p>Have those implementers submitted change requests providing their rationale?  I've heard this proposed by modelers, but can't recall having heard it from implementers</p>",
        "id": 179396823,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572401725
    },
    {
        "content": "<p>it's kind of hard to submit something so sweeping as this as a change proposal. The consequences of it would be</p>",
        "id": 179399168,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572405447
    },
    {
        "content": "<p>For reference, this is the example proposal I was referring to in the Atlanta meeting: <a href=\"https://wolandscat.net/2019/09/11/fixes-for-fhir-the-admin-resources/\" target=\"_blank\" title=\"https://wolandscat.net/2019/09/11/fixes-for-fhir-the-admin-resources/\">https://wolandscat.net/2019/09/11/fixes-for-fhir-the-admin-resources/</a></p>",
        "id": 180414424,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573470670
    },
    {
        "content": "<p>Can you make a smaller proposal? I look at that one, and it's hard to process because so much is different, including underlying requirements. So it's not really applicable...</p>",
        "id": 180416730,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573473356
    },
    {
        "content": "<p>Well it's a systemic fix, so it all goes together. There are smaller things you could do though to initially clean things up a bit:</p>\n<ul>\n<li>get Device sorted out; the kind of 'Device' being referred to where parties are needed is something like 'AutonomousAgent' or whatever you want to call it; it doesn't include bandages, test tubes, or even PET machines.</li>\n<li>get rid of PractionerRole. Move all the employment-related attributes to a sub-resource called Employement or similar, and then add something like posts: Employment[*] to Practitioner.</li>\n<li>figure out what Substance, Location and Medication (I think) are doing in type lists that should be limited to some kind of Party or Participation. E.g. Contract.term.action.performer.</li>\n<li>figure out what FHIR really means by Group.</li>\n</ul>\n<p>Fix that and numerous Resource choice type lists will reduce and the entries on the patterns page will reduce somewhat.</p>\n<p>After that, I would start looking at setting up Party, Actor, Role and PartyRelationship, with Actor and Role being descendants of Party, and these three having roughly the definitions I have provided.</p>",
        "id": 180460438,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573506864
    },
    {
        "content": "<p>I don't think there are any differences in underlying requirements; I just refactored the existing DSTU4 to an orthodox model of Parties that would simplify and clarify a lot of things elsewhere in the model, as well as in downstream implem contexts.</p>",
        "id": 180461476,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573507625
    },
    {
        "content": "<p>Do you know why we have both PractitionerRole and Practitioner?</p>",
        "id": 180464468,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573510144
    },
    {
        "content": "<p>I can only infer what I read in the documentation. It is either (or both of): a practitioner in an employment (post) and/or the definition of such a post (i..e something fillable by a real person). It is not clear. In my analysis, I assumed the first. If it is the second, I will change the model proposal a bit.</p>",
        "id": 180467016,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573512591
    },
    {
        "content": "<p>PractitionerRole is to capture someone acting professionally on behalf of an organization.  This is <em>typically</em> due to an employment relationship, but not necessarily.  Also, the role indicates their functional role, not their employment relationship.  The former indicates professional responsibilities/capabilities.  The latter typically indicates things like pay-band.  (We don't do a great job of tracking employment-type information at the moment - for patients or Practitioners because FHIR isn't generally used for HR purposes and the most common use-cases for tracking patient employment are covered by Coverage (i.e. insurance).</p>",
        "id": 180474465,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573522713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> <span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span> Alerting you to this conversation</p>",
        "id": 180475525,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573524350
    },
    {
        "content": "<p>my take on it is that we need to able to refer to people playing roles at multiple levels of specificity</p>\n<ul>\n<li>this action was/must be done by a [particular class] of person (by qualification)</li>\n<li>this action was/must be done by a person who is playing a particular role for some organization (e.g. Admitting officer)</li>\n<li>this action was/must be done by a person playing a particular role for a particular organization</li>\n<li>this action was/must be done by a particular person playing a particular role for a particular organization</li>\n<li>this action was/must be done by a particular person (but we say nothing about the organization, even if the concept is actually applicable)</li>\n</ul>",
        "id": 180475661,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573524542
    },
    {
        "content": "<p>is that the case?</p>",
        "id": 180475664,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573524546
    },
    {
        "content": "<p>Right.  All of those are currently covered by PractitionerRole with the exception of the last, which can just be Practitioner.  (As well we have RelatedPerson which deals with activity by someone based on their personal relationship with the Patient rather than their profession.)</p>\n<p>Also note that Practitioner covers <em>all</em> people acting in their professional capacity - so not just clinicians but also contracted cab drivers, receptionists, etc.</p>",
        "id": 180477184,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573527124
    },
    {
        "content": "<p>In response to <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , although I don't doubt that all of those needs will apply in some place, some context, some time, building in such tight constraints at the level of the base resources is not likely to be a good idea. The world is far more unpredictable, especially in HR, and what appeared to be specifiable as an org role today will be specifiable only via a certified capability next month, and something else later on.</p>\n<p>If the Resource model is viewed as a wide _possibility space_, not a narrow constraint space, things are likely to be easier to manage. Use the profiles to get use-case specific constraining.</p>\n<p>Anyway, in terms of a substantive modelling approach to solve this problem more generally, the Party/Actor/Role pattern would take care of it, and any similar kind of situation. This allows a given kind of professional who has his/her own certifications/qualifications (independent of job) to be an Actor, and then to serve in as many Roles as you like. The roles may be specified in terms of certification needs or any other requirement. Trying to do Grahame's list without this just looks painful to me (and the patterns page shows that it is).</p>\n<p>On the question of whether a 'Practitioner' can be a cab driver, that will come as news to pretty much everyone in healthcare. I think trying to be over-general like this confounds the natural assumption that any 'Practitioner' specified in a FHIR resource will be a professional competent for that part of the healthcare provision. Cab drivers and receptionists don't really come into it. Where a model category breaks a universal or near-universal understanding of what is contained in the category of that name, trouble is likely to follow...</p>",
        "id": 180505029,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573557076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191388\">@Thomas Beale</span> It turns out that the places where models need to be able to point to healthcare practitioners, they also need to be able to point to cab drivers &amp; receptionists.  They too can be authors, performers, witnesses, etc.  They are acting on behalf of specified organizations.  They can have training/certifications.  They can have contact information.  And they tend to be managed in the same back-end systems.  If the systems don't disambiguate, the data elements are essentially the same, and the need to reference the resources occurs in the same place, it doesn't make sense to try to draw a dividing line that splits the concept into distinct resources.  Systems can (and do) put limitations on what actions are allowed to be taken based on qualifications.  A taxi driver can't generally perform an appendectomy, but a chief of surgery can't generally drive a patient from one hospital to another either.  A receptionist may well have training as a nurse, but their functional role (and the permissions that stem from it) remains receptionist.  Healthcare workers can be seen on a continuum that ranges from extremely healthcare-specific (physician/pharmacist  to more ancillary (psychologist/social worker) to administrative (receptionist/taxi driver).  There are no clear dividing lines.  (Social workers and taxi drivers are both licensed, and neither are licensed by 'healthcare' governing bodies.)</p>\n<p>One of the challenges with the Party/Actor/Role paradigm (similar to the RIM's Entity/Participation/Role model, I think?) is that it's more abstract than existing systems work.  We need to represent the data at a granularity that is straight-forward to both expose and capture for existing systems.  We <em>can't</em> expect the internal persistence layers, maintenance screens, etc. of existing systems to change much, if at all, as part of the adoption of FHIR.  As such, the boundaries of our resources need to align relatively well with how data is stored and exposed by most systems.  (Obviously there will always be exceptions that do things differently and that may find FHIR adoption more of a struggle.)  </p>\n<p>Note that I'm not arguing against refactoring - I'm not thrilled with the Practitioner/PractitionerRole split.  I'm just highlighting some of the things we need to think about as part of the refactoring.</p>",
        "id": 180520480,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573568433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> I'm not really arguing against anything in your first para. I'm just saying that if you name a category 'Practitioner', you set an expectation for the definition of that category; but if you then include in its extension people who are clearly not 'practitioners' in any normal healthcare sense, it will lead to confusion. Not saying you don't need to represent the work / engagements / whatever of receptionists/ drivers etc, just that you need to have a better name for that overall category. In the model I proposed, Practitioner is a subtype of PersonRole, which is a subtype of Role, as follows:<br>\n<a href=\"user_uploads/10155/0ZdmXw-pMu9W13qGCXus-Xwh/pasted_image.png\" target=\"_blank\" title=\"user_uploads/10155/0ZdmXw-pMu9W13qGCXus-Xwh/pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/10155/0ZdmXw-pMu9W13qGCXus-Xwh/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"user_uploads/10155/0ZdmXw-pMu9W13qGCXus-Xwh/pasted_image.png\"></a></div><p>We could make this a bit more precise, with a ProfessionalRole subtype of PersonRole, and then Practitioner and (let's just say for now) AlliedProfessional will provide a better categorical distinction.</p>",
        "id": 180523347,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573570179
    },
    {
        "content": "<p>I'm not opposed to ProfessionalRole (whether we introduce PersonRole or not).  It's not clear that \"Practitioner\" or \"AlliedProfessional\" would have a lot of value.  It's not clear they have distinct elements from ProfessionalRole.</p>",
        "id": 180524671,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573570908
    },
    {
        "content": "<p>On  your second point... that such models are more abstract than existing systems work. Generally speaking, this is likely to be true. But there are two points to consider. Firstly, existing source system data models, however terrible or great, are generally used in a way to try to convey what happened in the real world. In the real world, it is not hard to justify an ontological view that distinguishes 'roles' from 'actors' and so on - indeed, the FHIR documentation is full of just such language, it's just not reflected in the models.</p>\n<p>The second point is the existential one I mentioned in Atlanta - is FHIR trying to be about directly reflecting the 'dirty data' of real systems, or about presenting a unified / standardised view of such data to data consumers? If it is the first, it's not going to help, if I am just going to get a copy of the 10 different versions of patient data from 10 different systems. So, it's not really just presenting dirty data, it is normalising it. The real question is: how much? I am arguing that if I, on the receiver side can't even run a query to obtain all 'roles', or to distinguish actors from roles, or to do some basic processing on all parties, then it's not helping much.</p>\n<p>Nevertheless, your next statements are obviously correct. So, what is really needed is two layers in the FHIR Resources:</p>\n<ul>\n<li>layer 1 does reflect existing systems' data sort of faithfully, i.e. provides no semantic normalisation, but does impose the FHIR standard URIs, REST model, terminology referencing, identifiers, base data types and so on; this layer could well have client applications wanting to access the 'real data' in their environments, just in a technical standardised manner;</li>\n<li>layer two performs a semantic normalisation from layer 1, and can therefore introduce generalisations such as I propose in the Admin types, as well as (say) an abstract notion of Request as a parent of the *Request Resources. Clients of this layer don't care that much about the horrors that lie behind, they want to get a normalised picture across systems in their environment.</li>\n</ul>\n<p>You can't really satisfy both needs with one layer of Resources. This is a major source of confusion in FHIR (I don't make that statement casually, or to denigrate anyone - this problem is an existential confusion for everyone in e-health, all the time).</p>\n<p>Incidentally, the approach above is not much different from what I proposed 4 years ago in this post - <a href=\"https://wolandscat.net/2015/12/20/making-fhir-work-for-everybody/\" target=\"_blank\" title=\"https://wolandscat.net/2015/12/20/making-fhir-work-for-everybody/\">https://wolandscat.net/2015/12/20/making-fhir-work-for-everybody/</a></p>\n<p>I would argue that making this distinction explicit in FHIR would greatly clarify and improve FHIR resource development.</p>",
        "id": 180525602,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573571353
    },
    {
        "content": "<p>FHIR is about providing a standardized representation of healthcare data that requires a \"minimal lift\" from the dirty data of existing systems.  If we require a massive refactoring of how systems currently store and process data in order to use FHIR, they simply won't use FHIR.  Doing things like \"querying all roles for an actor\" will only function if systems have that capability in their databases and how they capture data.  If the system has no clue that Dr. Smith and Patient Smith are the same individual, separating the 'Smith' from the 'Dr.' and 'Patient' role won't make any difference - the underlying systems will still have separate records for the two and maintain distinct demographics for the two.  The purpose of introducing the standard isn't to cause systems to support new types of queries from what they've historically been able to do, it's to let them expose the data they do have in a standard way and allow it to be queried in a standard way.  Once we've got that, systems may (and hopefully will) expand their capabilities in incremental ways based on the needs of their stakeholders.</p>\n<p>We introduced the Person resource to provide a linking mechanism for the relatively small proportion of systems that have that capability today - i.e. that maintain shared demographics across roles.  However, even then, there can be demographics that are role-specific (phone numbers used only in the \"Dr.\" role, addresses used only in the \"Patient\" role).  It's even possible (though not common) for administrative genders to be distinct.  So it turns out that having  almost the full set of 'Person' information on Patient and Practitioner is useful.</p>\n<p>I'm not totally clear on the purpose of the second layer you propose.  We do map all resource elements to the HL7 reference model (at least where they fall within the scope of that reference model - some such as CodeSystem, StructureDefinition, etc. do not).  We also define patterns which could theoretically be used to expose the 'technical' resources in more abstract ways for those who happen to need/want that.  (So far we haven't done much in this space because not a lot of implementers have been asking for it - the strongest demand has typically been coming from the clinical decision support space, but there's a trade-off between more abstract vs. more representative of what data is likely to exist.  As an example, an abstract model could expose a start date and an end date for an immunization, but the reality is that they'll always be the same.</p>",
        "id": 180529235,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573573351
    },
    {
        "content": "<blockquote>\n<p>All of those are currently covered by PractitionerRole with the exception of the last</p>\n</blockquote>\n<p>So I don't see the value of Practitioner if that's the case. Why split one use case out? What's different to having just a PractitionerRole without a scoping organization?</p>",
        "id": 180557300,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573590222
    },
    {
        "content": "<p>The split of Practitioner from PractitionerRole is driven by the registry use-cases.  We used to just have one resource.  But the registries apparently handle \"individual with training\" separately from \"individual working for hospital X in role Y\".  <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span>, can you flesh out my generalizations with some reality? :)</p>",
        "id": 180561809,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573592754
    },
    {
        "content": "<p>that would very much be the tail wagging the dog when we could also handle that with an element</p>",
        "id": 180561924,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573592826
    },
    {
        "content": "<p>Registries have been the major driver of the resources within PA, not their re-use in the systems that reference them.  It's more of a two-headed dog and different people want to pet different ends...</p>",
        "id": 180562115,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573592955
    },
    {
        "content": "<p>Which registries? They are different in every country I have worked in. Also, an 'individual working at X in role Y' will clearly have (the possibility of) training; the work roles are contingent facts, i.e. 0..*. So I would draw the same conclusion as <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  in this case.</p>",
        "id": 180562126,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573592966
    },
    {
        "content": "<p>(that was a rather awkward analogy... sorry :&gt;)</p>",
        "id": 180562151,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573592985
    },
    {
        "content": "<p>The original model from dstu1 had a single role on the practitioner, so would have required multiple practitioner resources to represent the multiple things they do. Then dstu2 did cater for the multiple roles via a 0..* cardinality, but then when referenced by other things which role actually applied. Then PracRole was included.<br>\nThis isn't just a registry thing, it's just something that is handled poorly.<br>\nI'm sure none of us deny that it's the reality of the real world that people do different things at different places. Some areas do this more than others, many specialists work at multiple offices routinely on specific days of the week, and in the regional areas often do travel between centres to provide care, but not each of the sites have the same facilities, so their ability to do things changes, or it's just not required at each place.<br>\nThe model as it is now reflects both usages, and in the clinical space has the option of role/prac to cover both types of systems.</p>",
        "id": 180564045,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1573594103
    },
    {
        "content": "<p>Registries are just a space where the problem gets moved to and uncovered  more quickly/obviously.</p>",
        "id": 180564112,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1573594159
    },
    {
        "content": "<p>I am going to assume that there just might be a solution that crunches Practitioner and PractionerRole together, with a concomitant slight simplification of various choice type lists.</p>\n<p>How about passive Device v autonomous Device? I.e. where Device appears in active participation locations, it should be the latter. There are some other inclusions such as Substance, Location etc are doing in places typed as some kind of participation. If it is meant to be resource usage, I would strongly recommend separating out resource usage from active participation wherever that occurs.</p>",
        "id": 180564117,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573594160
    },
    {
        "content": "<p>Yes, many older systems don't differentiate the roles when associating with an activity, they just assumed it.</p>",
        "id": 180564285,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1573594244
    },
    {
        "content": "<p>I didn't follow the notes on device.</p>",
        "id": 180564453,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1573594339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> well I go back to my previous recommendation, distinguishing Role from Actor, as sub-types of Party. Then you can have as many ProfessionalRoles of a Person (who happens to be a qualified GP or whatever) as you like, and whichever applies at some location, that's the one(s) that are referenced in the relevant Resource.</p>",
        "id": 180564524,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573594389
    },
    {
        "content": "<p>Which is the distinction we have with Prac and PracRole. And but also have the capacity to skip PracRole where not used by a system.</p>",
        "id": 180564900,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1573594676
    },
    {
        "content": "<p>We don't want a generic \"Person\" - the provider registry systems that capture things in a 'role-independent' way still care about the individual only in their capacity as someone who <em>can</em> work for an organization to deliver healthcare services.  They would not capture information about patients or family relatives, friends, etc.  Person is something else entirely.  It gets used for those (very sophisticated and somewhat small in number) systems that manage linkages of individuals across roles.  What's really happening here is that some systems track providers in terms of their relationships with a single organization and single capacity.  Others track a provider and all of (or at least some of) the organizations they work for and the different hats they can wear.  When we reference practitioners from other models, we typically need to know both the organization and the hat - though sometimes we don't care and the bare practitioner is fine.</p>",
        "id": 180564903,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573594678
    },
    {
        "content": "<p>You may want more than one flavour of Person in different situations, but at the Resource level, on the Actor side (not the Role side) you probably do want a fairly generic Person. How it gets profiled for specific uses like registries or anything else is another issue. Treat Resource types as defining a 'possibility space' and Profiles as constraining for specific use cases. That methodology will take things a long way.</p>",
        "id": 180565863,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573595359
    },
    {
        "content": "<p>We can only want a generic person if systems actually track/capture a generic person - and few systems do.</p>",
        "id": 180570401,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573598691
    },
    {
        "content": "<p>MnM propose that we hold a BoF discussion at DevDays on Wed evening about this. It won't be open - if you're interested in this, please let me or Lloyd know</p>",
        "id": 180571685,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573599796
    },
    {
        "content": "<p>I think we are talking about two different things. I am talking about Person as a kind of Actor subtype Resource that aggregates data items that may apply to natural persons in whatever form they may appear in real systems - whether Patients, Professionals, or someone else. It's not trying to say that  any system in which a profiled version of Person appears (usually, along with various Role subtypes) is trying to represent 'generic persons'. This is just modelling.</p>",
        "id": 180571758,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573599862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> please join us Wed evening</p>",
        "id": 180571792,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573599897
    },
    {
        "content": "<p>We don't want to split apart the attributes of Person if systems don't naturally store them separately.  The granularity boundaries of what we expose as resources needs to reflect the granularity boundaries of what systems capture as distinct business objects with independent statuses.  If systems typically don't store the demo.  As an example, systems that manage patients don't generally store the names, addresses, etc. associated with the patient separately from medical record numbers and other patient elements.  We can't introduce separate objects for these things in the interface if they don't have separate existences and statuses in the real systems.</p>",
        "id": 180577779,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573605651
    },
    {
        "content": "<p>I'm not going to DevDays Amsterdam <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 180580143,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1573607762
    },
    {
        "content": "<p>oh. we thought you were</p>",
        "id": 180580231,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573607860
    },
    {
        "content": "<p>When would be a good time - and what would be a good forum - to have this discussion?</p>",
        "id": 180584538,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573612568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> well there are  EMR systems that have a Patient table that conflates person data with the data of the person-as-patient in a relationship with just that institution. There are others that separate out identifying patient data into org / regional (e.g. state gov) MPI  or national registry, and useless meaningless identifiers for the EHR/EMR, and a separate {EMRid, Patient id} table to connect the two. In much of Europe, storing identifying data in the EHR is not legal. Either way, in the overall health system, the general case is that a patient can have multiple 'patient' records and/or one or more 'person' records (here 'person' means something like citizen, or health consumer, depending on who owns the national registry).</p>\n<p>While I get the point you are making, this is just about clarity in modelling and software. If people are going to build coherent software dealing with FHIR data, the models need to be somewhat structured and normalised. The model structure I have proposed just separates out person-related data items into a dedicated Resource and reuses that in places like Patient, Practitioner etc. It is not hard to separate Person into something like PublicPerson and PrivatePerson or similar if that were needed to reduce the 'person' data items used by things like Practitioner, RelatedPerson etc.</p>",
        "id": 180616873,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573645534
    },
    {
        "content": "<p>In our case, 'health consumer' would still be a 'Patient' registry a the purpose is being a potential consumer of healthcare.  Person really only comes into play if you're linking to demographics that span Patient/Practitioner/RelatedPerson.</p>\n<p>Separating out the demographics into a separate resource for modeling purity imposes costs on implementers and doesn't provide any benefit that we've identified.  When a system wants to expose a patient, they want to expose the demographics at the same time as the medical record number, link to the patients primary care provider, etc.  All of that information is generally maintained in a single table/set of tables.  The demographics for practitioners are maintained somewhere completely different (and often with slightly different rules.  E.g. most systems that deal with patients track deceased date, while most systems that deal with practitioners don't.)</p>\n<p>We've seen occasional questions about consistency across the demographics exposed by Patient, Patient.contact, Practitioner, RelatedPerson and Person, but very few have had an interest in separating the maintenance of the demographics from the elements of the role - and for those who do have that interest, Person as a linking resource seems to meet the need.</p>\n<p>One of the key things with a RESTful interface is that when you query a resource, it needs to be useful on its own.  A patient resource that doesn't expose name, gender, date of birth and contact information can't really be useful on its own.</p>",
        "id": 180623037,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573650252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> did you agree with my 5 point list:</p>\n<p>we need to able to refer to people playing roles at multiple levels of specificity</p>\n<ul>\n<li>this action was/must be done by a [particular class] of person (by qualification)</li>\n<li>this action was/must be done by a person who is playing a particular role for some organization (e.g. Admitting officer)</li>\n<li>this action was/must be done by a person playing a particular role for a particular organization</li>\n<li>this action was/must be done by a particular person playing a particular role for a particular organization</li>\n<li>this action was/must be done by a particular person (but we say nothing about the organization, even if the concept is actually applicable)</li>\n</ul>\n<p>And Lloyd's response:</p>\n<blockquote>\n<p>All of those are currently covered by PractitionerRole with the exception of the last, which can just be Practitioner</p>\n</blockquote>\n<p>?</p>",
        "id": 180679573,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573683748
    },
    {
        "content": "<blockquote>\n<p>Separating out the demographics into a separate resource for modeling purity imposes costs on implementers and doesn't provide any benefit that we've identified</p>\n</blockquote>\n<p>Actually, we did identify benefits, and we did have that arrangement at some stage. It was no net benefit, though not everyone was happy.</p>",
        "id": 180679648,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573683799
    },
    {
        "content": "<blockquote>\n<p>A patient resource that doesn't expose name, gender, date of birth</p>\n</blockquote>\n<p>It's structurally possible to define a IdentifyingPersonResource that is an abstract ancestor for Patient, RelatedPerson, Practitioner, and Person. We could discuss the merits of that idea as part of this.</p>",
        "id": 180679848,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573683936
    },
    {
        "content": "<p>\"It's structurally possible to define a IdentifyingPersonResource that is an abstract ancestor for Patient, RelatedPerson, Practitioner, and Person. We could discuss the merits of that idea as part of this.\"</p>\n<p>I'd this \"abstract ancestor\" the same as a logical model?</p>",
        "id": 180681091,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1573684666
    },
    {
        "content": "<p>no, though the difference between abstract ancestor resources like DomainResource and Logical Models is a little theoretical</p>",
        "id": 180682784,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573685988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191388\">@Thomas Beale</span> </p>\n<blockquote>\n<p>get Device sorted out; the kind of 'Device' being referred to where parties are needed is something like 'AutonomousAgent' or whatever you want to call it; it doesn't include bandages, test tubes, or even PET machines</p>\n</blockquote>\n<p>Can you explore this a little more?</p>",
        "id": 180684403,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573687398
    },
    {
        "content": "<blockquote>\n<p>figure out what Substance, Location and Medication (I think) are doing in type lists that should be limited to some kind of Party or Participation</p>\n</blockquote>\n<p>Substance:</p>\n<ul>\n<li>CatalogEntry.referencedItem - I don't think that's a participation. So out of scope, though I think that list is too short. </li>\n<li>Contract.term.action.performer - I don't see how a substance can perform (or not ) the action</li>\n<li>Specimen.subject: I can understand this when substance refers to a particular package. I think it's appropriate... </li>\n<li>Group.member.entity: I think this should be removed (though CDS wants the list extended not shrunk; this is an ongoing discussion with CDS/MnM)</li>\n</ul>\n<p>Medication:</p>\n<ul>\n<li>Group.member.entity: I think this should be removed (though CDS wants the list extended not shrunk; this is an ongoing discussion with CDS/MnM)</li>\n<li>Flag.subject: I've never seen any discussion about Flag on a Medication. This list of things a flag can be about is a weird mix.. <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> I guess this comes from you?</li>\n</ul>\n<p>Location:</p>\n<ul>\n<li>CatalogEntry.referencedItem - I don't think that's a participation. So out of scope, though I think that list is too short. </li>\n<li>Communication.recipient - I think that makes sense</li>\n<li>Contract.term.action.performer - I don't see how a location can perform (or not ) the action</li>\n<li>(Many).subject - that absolutely makes sense to me</li>\n<li>(Appointment | AppointmentResponse | Schedule).actor - is that valid? <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> it doesn't seem natural to call the 'location' and actor in an appointment. can you have more than one location? Why not have a separate field for location like iCal?</li>\n<li>several other uses that make sense to me</li>\n</ul>",
        "id": 180685246,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573688180
    },
    {
        "content": "<blockquote>\n<p>we need to able to refer to people playing roles at multiple levels of specificity</p>\n<ul>\n<li>this action was/must be done by a [particular class] of person (by qualification)</li>\n<li>this action was/must be done by a person who is playing a particular role for some organization (e.g. Admitting officer)</li>\n<li>this action was/must be done by a person playing a particular role for a particular organization</li>\n<li>this action was/must be done by a particular person playing a particular role for a particular organization</li>\n<li>this action was/must be done by a particular person (but we say nothing about the organization, even if the concept is actually applicable)<br>\nAnd Lloyd's response:<blockquote>\n<p>All of those are currently covered by PractitionerRole with the exception of the last, which can just be Practitioner</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<p>Not sure I follow the difference between 2 and 3.<br>\nTo me its just 3:\n* something to be done by a type/class/role of person (org optional)\n* something to be done by a specific person in the role (org optional)\n* something to be done by a specific person (with no other context indicated)<br>\nThe type/class/role/qualification are all variations that differing systems differentiate in different ways, or don't.<br>\nAnd qualification is actually the least important thing from a data perspective, we care about the role that they have within the system. <br>\nThe Organization definitely cares, that the practitioner has the qualification, and they'd check that before they allocate them to a specific role, but that may never be recorded.</p>",
        "id": 180685901,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1573688770
    },
    {
        "content": "<ul>\n<li>something to be done by a type/class/role of person (org optional) </li>\n<li>something to be done by a specific person in the role (org optional) </li>\n<li>something to be done by a specific person (with no other context indicated)</li>\n</ul>\n<p>so PR for 1 and 2 and P for 3?</p>",
        "id": 180686092,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573688938
    },
    {
        "content": "<p>Specimen.subject is documented as \"Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance or a device\". This means literally any kind of location or thing. It has no specificity at all. Why is this called 'subject', which is usually assumed to mean 'subject of care'? If the specimen is something environmental, e.g. pollen, pesticide etc, then it  has no subject in any normal sense.</p>\n<p>What is the meaning of Location as a type of X.subject ?</p>",
        "id": 180687917,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573690750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I'd also be interested in places where people really want the org to be optional when using it.<br>\nIn places like CareTeam, there is a separate property that captures that use case, and even when you don't know the person too.</p>",
        "id": 180688252,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1573691086
    },
    {
        "content": "<p>can you expand on that last sentence?</p>",
        "id": 180688337,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573691171
    },
    {
        "content": "<p>Adding Medication, Procedure and PlanDefinition to Flag wasn't me.  Rationale is here: <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=10083\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=10083\">GF#10083</a>.  Not sure I'm thrilled with it.<br>\nI think, based on recent discussions w/ Claude et al that CatalogEntry will be going away<br>\nMultiple locations can be involved in an appointment if some participants will be remote (think telesurgery, video con-calls, etc.</p>\n<p>Specimen.subject is who/what the specimen was taken from.  Is there a different word that would better cover the fact that a specimen could come from a door knob or pond or the floor of a cage containing multiple animals as well as from a human patient?  (some of those were location examples)</p>",
        "id": 180690097,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573693149
    },
    {
        "content": "<p>well that brings us back to subject/focus again</p>",
        "id": 180690109,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573693191
    },
    {
        "content": "<p>Organization would most commonly be optional for definitional and sometimes request resources.  I.e. This needs to be done by a cardiologist, don't care where or who.  Though some resources call that out as a distinct element.  PractitionerRole would be most needed when you want to specify not only the role but one or more qualifications.</p>",
        "id": 180690171,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573693237
    },
    {
        "content": "<p>Specimen can also have a focus.  Subject might be Jane Smith.  Focus might be fetus#2 or tumor #5.  Alternatively, subject might be Room 1152 in hospital XYZ, focus could be door knob or bed-rail.</p>",
        "id": 180690229,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573693322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> that exact situation is something I brought up in openEHR for clinical workflow, the question there being what is the 'subject' of a Task in a Plan? One answer is subject (of Plan) = &lt;subject of care&gt;; 'focal subject' or 'concrete subject' (of this Task) = sample 1234.  I actually think that idea is potentially worth pursuing in FHIR. Generally, commonly named elements like 'subject' should follow the principle of least surprise.</p>",
        "id": 180718197,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573727820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  re my point: get Device sorted out; the kind of 'Device' being referred to where parties are needed is something like 'AutonomousAgent' or whatever you want to call it; it doesn't include bandages, test tubes, or even PET machines<br>\nCan you explore this a little more?</p>\n<p>When I read through all the places where I see 'Device' in a list of participant Resource Types, I think: well, if the Device is a robot or other autonomous (= capable of making decisions, including whether or not to participate; aka having 'agency') agent, probably reasonable, but for all the other Devices, including consumables, imaging machines, most prostheses etc... no. They may be <em>used</em>, they do no participate as authors, carers, orderers or anything else. For this reason, I suggest that:</p>\n<ul>\n<li>a new type AutonomousDevice or AutonomousAgent is defined, with Device documented as being for non-agent devices; this new type would be a subtype of Agent in the Party/Agent/Role type structure;</li>\n<li>in containing Resources where you want to record what people often casually call 'resource usage', meaning people, places and things, that this be modelled with participation(s) separated out from real resource <em>usage</em>, i.e. consumption or use of non-agent materials, devices, places etc.</li>\n</ul>",
        "id": 180722177,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573731153
    },
    {
        "content": "<p>One of the big reasons for why I and others are proposing (some) type hierarchy in the Admin resources is as follows. WGs building resources are currently in the situation of defining Elements in a Resource, i.e. defining name, type, cardinality etc. The Resources are a typed system. Now, in places where Reference() is used, typing is being subverted; they are no longer stating a necessary type, they are trying to think of all possible use cases, and stating a corresponding list of types of instances in those use cases.</p>\n<p>So the first problem here is that the way typing normally works is that for the type of any attribute in a class/module, you state the <em>minimum</em> (= most abstract) type that is needed for the rest of the class to function. What this means is that as long as the attributes defined in that abstract type are present in the instance at run-time (guaranteed in instances of all concrete sub-types), then we are happy. At modelling time, <em>this type choice is the effective meaning of the attribute</em>.  In any model system using 'choice' (in FHIR, Reference() or choice[x]), this is not happening. Instead, no-one really knows what the attribute means, they just start creating a type restriction list. As more meetings are held, this list grows, shrinks, changes. No-one can ever say formally if any of the types in the list is correct, because there is no stated list of minimal characteristics, as there would be in a model system using abstract types. The result is brittle models, data and software - because making constant changes to those lists breaks things downstream.</p>",
        "id": 180722879,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573731922
    },
    {
        "content": "<p>A simple example. Specimen.collector is typed as 'Reference(Practitioner | PractitionerRole)'. What data are <em>required</em> about a collector, really? I suspect, probably just some identity info. Apparently discussions have been had where the group thought that only Practitioners (with or without org responsibilities attached) do this in real life. Firstly, that's not correct (most urine and stool samples are collected by the patient at home); secondly, even if we now modified it to 'Reference(Practitioner | PractitionerRole | Patient | RelatedPerson)' (allows for a parent to collect a child's sample), we still don't know if a) we got all the possibilities, or b) what minimal data items are required here? In other words, what general category of entity do we want here? The most obvious answer is 'party', i.e. an accountable entity with agency, and some minimal (at least potentially) identity, contact info etc. So the type should just be Party, if such a type existed. </p>\n<p>Now, in specific local use for an in-house hospital lab, patient collection is out of the question, and you might profile this Specimen resource with a constraint to say </p>\n<p>collector matches {Practitioner | PractitionerRole}</p>\n<p>I'm using pseudo-archetype notation here to make it clearer that this is now a <em>constraint on the original type-space</em>. Which is what Profiles should be used for (among other kinds of constraining).</p>",
        "id": 180723314,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573732384
    },
    {
        "content": "<p>Here's a messier example:</p>\n<p>Communication.sender[0..1]: Reference(Device | Organization | Patient | Practitioner | PractitionerRole | RelatedPerson | HealthcareService | Endpoint)</p>\n<p>well, I can more or less guess the sense in which most of these types could send some communication (although, I will always forget that 'Practitioner' could be a paid driver, who is very unlikely to be sending any clinical communication). But in what sense is EndPoint a 'sender'? Clearly anything sent electronically is likely to come from a WS EndPoint, but this is just the mechanical act of sending, not the intentional act.</p>\n<p>And then why not Group? Or following the logic of Specifmen.subject, why not Location? And following many other 'subject' definitions, why not Device? And now let's think about a Practitioner as sender; most likely his/her HealthcareService is also the sender, in an organisational sense. And why not the EMR system EndPoint as well? Which one do we want? As we can see, this kind of thinking can go on forever, but we never answer the basic question: what minimal data items are necessary for Communication.sender to make sense? Role is probably good enough (= any Actor in a role of responsibility under which such communications are sent).</p>",
        "id": 180724147,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573733178
    },
    {
        "content": "<p>I'll come back to device after sleeping. We have agreed that we're going to work on to focus/subject thing in several resources. I added Specimen to that list after this discussion.</p>",
        "id": 180724418,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573733509
    },
    {
        "content": "<p>The same argument now applies here: defined the base Resource with something like <code>Communication.sender[0..1]: Role</code> (or <code>Reference&lt;Role&gt;</code> to keep the notion of 'reference') and then profile in different situations just the specific types you want to allow. Generic receivers know it will always be a Party, and receivers that have been developed with some specific agreement with the sender system developers may be able to assume a shared profile, not just the base resource.</p>\n<p>Taking this approach would vastly simplify the endless discussions on what goes in the parentheses of every <code>Reference()</code> expression in a Resource definition. The discussion just becomes, ok, what is the minimal sensible thing here. A Party? A Role? Maybe it is just a Thing. It also means people building software to consume specific Resources can now make some meaningful assumptions about the type of these Reference() typed elements.</p>\n<p>Another thing it solves is that in the current way of doing things, the list of types is the super-position of a whole lot of use cases, it doesn't (generally) correspond to any <em>particular</em> use case. So there is not even any sense in building software, queries or anything else that assumes the whole list as stated in the Reference() definition, because <em>that list will never eventuate in any particular use context</em>.</p>",
        "id": 180724521,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573733604
    },
    {
        "content": "<p>In summary, my general recommendation is:</p>\n<ul>\n<li>treat Resources as a <em>possibility space</em>, defined by open types that state the minimal requirements of any Element in a Resource; doing so requires the insertion of some abstract type Resources (e.g. Party, etc as mentioned above);</li>\n<li>perform all type-constraint in Profiles, specific to the types that really can occur in the use case(s) the Profile is built for. In this sense, Profiles are a <em>constraint space</em>.</li>\n</ul>\n<p>The above arguments apply also for the use of <code>choice[x]</code>, which is widespread, as shown by this page: <a href=\"http://hl7.org/fhir/R4/choice-elements.json\" target=\"_blank\" title=\"http://hl7.org/fhir/R4/choice-elements.json\">http://hl7.org/fhir/R4/choice-elements.json</a></p>",
        "id": 180725162,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573734141
    },
    {
        "content": "<p>I understand the concern around \"rule of least surprise\" and the term \"subject\".  We would need a term that encompasses both patients and locations though - anything you might take a sample of for testing because the use-cases for Specimen encompass agricultural, public health and hospital safety testing.  We would also need to retain the ability to have a finer-grained 'focus' which for humans is typically a fetus, tumor or lesion but for locations could be other things.  Do you have thoughts on what a less surprising name might be?</p>\n<p>I agree that references sometimes get out of control - poor definition of the attribute results in eventual slipping to include more and more resources.  I'm not completely convinced that the issue is \"what elements must be present on the reference target?\"  I think it's more about the capacity of the target.  When we say that proposals can be 'authored' by  a patient, practitioner or device, I don't think that assertion is driven by a shared set of elements held by those resources, it's that the entities represented by each of those resources has the capacity of authoring and we have existing systems where all of those types of individuals/things <em>do</em> author proposals/recommendations.</p>\n<p>REST also plays a role.  For something like 'collector' we're not concerned with \"what are the elements we need to capture about the collector\".  Instead, we care about \"what are the stateful entities that will exist in a registry somewhere we can point to by reference to indicate who/what performed the action?\"  That essentially changes the \"what is the required data?\" to \"whatever's needed to point to the entity that has the relevant capacity\".  Fully agree that Patient and RelatedPerson should be part of that list - they have the capacity and commonly perform the action in the real-world.  Though we'd need to check with the relevant work group to see if they'd been excluded for good reason (perhaps existing systems don't track collectors who aren't Practitioners?)</p>\n<p>From a UML perspective, we can treat relationships as a relationship to a single abstract type or we can treat it as a choice of associations (essentially multiple associations with the same semantic and an invariant that enforces only one can be present - at least for those situations where cardinality is limited to 1).  Thus far, we've leaned towards the 'choice' approach for three reasons:<br>\n- resources often have multiple 'capacities' and different capacities would logically be part of multiple hierarchies.  Multiple inheritance tends to be hard in systems and even harder in serializations, so we've tried to steer clear of that<br>\n- we want to ensure that the list of what's allowed to be the target of a reference actually makes sense for a given resource and reflects what existing systems do.  (Recognize that what's <em>actually</em> happened has sometimes strayed from that methodology point.)  If we rely on inheritance relationships to reflect \"what's allowed\", then it's much harder to control what can be a somewhat arbitrary set of targets and/or the inheritance hierarchy can start to be convoluted to retain the desired level of control.<br>\n- whatever we do needs to support profiling, which can be even more arbitrary. It needs to reflect business rules and design constraints.  Inheritance hierarchies will struggle to manage the variability that would be required here.<br>\nThat's not saying we can't make a change here, just explaining the reason for the existing design and identifying some of the factors we'll need to allow for if we make a shift.</p>\n<p>In terms of introducing the notion of AutonomousAgent, you are correct that there is a distinction between devices that have decision-making capability and those that don't, though the boundary can be somewhat fuzzy (and is getting fuzzier).  However, devices also have the capacity for being purchased and inventoried and ordered and dispensed (including devices that have decision-making capability).  So do we represent the same physical instance with two different resources for each capacity?  We could certainly make an entity/role distinction here.  Do you think there are elements that are relevant for the 'agent' role that aren't relevant for the typical device role?  Would the 'agent' aspect of the device have a distinct state from the 'manufactured item' aspect?  Would existing systems manage/track/store that information separately?</p>",
        "id": 180727841,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573736459
    },
    {
        "content": "<p>regarding device... we can make the definitions explicit about the different roles and expectations without necessarily separating the resource out .</p>",
        "id": 180728012,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573736587
    },
    {
        "content": "<p>generally, I think that Tom is missing something that we aren't generating defining as part of the definitions more than the actual resources</p>",
        "id": 180728047,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573736629
    },
    {
        "content": "<p>Agree with that.  Our definitions are more lax than they should be.  In the communication example, if the sender is \"who has 'responsibility' for the data shared, then EndPoint doesn't make sense as it can't take on responsibility.  (That's the same reason 'Group' is isn't in the list - a Group - as defined in FHIR - can't take on collective action or responsibility.  If you've got a collection of individuals that <em>can</em> take collective action/have responsibility, then you're talking about an Organization.)</p>",
        "id": 180728316,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573736838
    },
    {
        "content": "<p>I very much agree with your idea <span class=\"user-mention\" data-user-id=\"191388\">@Thomas Beale</span> of defining relationship targets as a <em>possibility space</em>.  But I think the possibilities need to be driven by the capacities of the real-world objects represented by the entities, not necessarily by the data elements present on those entities.  If we were to start requiring that all 'Reference' elements made clear what capacities must be held by the targets and what capacities certain target resources can have, that would drive more consistency while still allowing for refinement to reflect what real-world systems do.  What are your thoughts on that?  Do you think it would help?</p>",
        "id": 180728675,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573737079
    },
    {
        "content": "<p>that seems to be heading in some kind of ontology direction</p>",
        "id": 180728872,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573737219
    },
    {
        "content": "<p>If we were going to have a specific set of 'capacities' that could be asserted for resources and 'allowed' for References, then yes we'd need an ontology of some sort.  I'd hope that it wouldn't have to be super complex.  (Hopefully in the range of 10-20 total concepts)</p>",
        "id": 180729145,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573737367
    },
    {
        "content": "<p>well, I'd build it into the tooling</p>",
        "id": 180729947,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573737978
    },
    {
        "content": "<p>I'll leave further replies on the general methodology question for later (maybe some others might want to comment), but re: <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> \"We could certainly make an entity/role distinction here. Do you think there are elements that are relevant for the 'agent' role that aren't relevant for the typical device role? Would the 'agent' aspect of the device have a distinct state from the 'manufactured item' aspect? Would existing systems manage/track/store that information separately?\"</p>\n<p>Yes, I did start think about that. It's a good question, but people more in the FHIR space might have better answers than me. I am inclined to always ask the question: well, what is the intention of supplying information X in field Y (say, subject)? Is it to be able to contact the subject, just know the name, or figure out (say) legal status? So, if we put an AutonomousAgent as a possible type for a sender, author or anything like that, the question is what do I want to do if I received that particular kind of instance? My first guess is: know the identity, and possibly trace the chain of responsibility to some senior human or org, just like I might want to do with a junior doc. Do I need to know 28 device manufacture details? I doubt it, but I might want to know that it was a Nexus 6 or a Nexus 8, which is probably like knowing it's an intern v resident v consultant. I am 90% sure the other 27 device manufacture attributes would be junk 99% of the time. So I'd certainly at least be doing AutonomousDevice.manufacture [0..1]: Reference(Device). (choose better names...)</p>",
        "id": 180730753,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573738617
    },
    {
        "content": "<p>Type and identifier (= UDI) and maybe photo are the things that come up for me</p>",
        "id": 180730831,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573738682
    },
    {
        "content": "<p>General point: BFO2 and bioTopLite are useful places to look for very general categories.</p>",
        "id": 180730904,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573738741
    },
    {
        "content": "<p>are they? I haven't found it to be so, but I'm happy if you can show us how</p>",
        "id": 180730929,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573738759
    },
    {
        "content": "<p>Well, if you want a category whose extension includes people, locations, organisations... it's probably just BFO2::Continuant. You might name it something else in the FHIR space, but that's the kind of thing you are talking about. But one has to be very careful to distinguish between types that represent real entities in the world, or data entities that stand in the 'is-about' relation to similarly-named real world entities. Big difference...</p>",
        "id": 180731127,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573738911
    },
    {
        "content": "<p>what other relevant things does BFO have?</p>",
        "id": 180731203,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573738939
    },
    {
        "content": "<p>does it have anything about subject/record target / focus?</p>",
        "id": 180731313,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573739010
    },
    {
        "content": "<p>There are two other ontologies IAO and OBI which have potentially useful things. I'll go have a look at latest versions and see what I can find.</p>",
        "id": 180731443,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573739113
    },
    {
        "content": "<p>Part of the tricky part about designing references (and resources themselves) is that they're supposed to be context-independent.  We don't have a specific use-case about what data is needed because the relationship can be navigated by different systems for different purposes.  If you're looking at the autonomous agent, you might care about the manufacturer, you might care about the software version, you might care about the responsible organization, you might care about the identity, you might care about all of the above.  Obviously if you're looking at a practitioner, some of the concepts would still apply (identity, responsible organization), but others (manufacturer and software version) not so much.  On the other hand with a practitioner, you might be interested in qualifications or email address.</p>",
        "id": 180731447,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573739125
    },
    {
        "content": "<p>Well that's the general situation - we're talking about ad hoc querying after all. So what data are returned is really up to what the client side asks for. As long as the client has the means to navigate references, and make subsequent queries for various bits and pieces, things will be fine. Naturally the modelling choices will never be a direct match for every query from any client. They need to be based on some sweet point between the multitudinous diversity of current systems and a normalised client view, possibly informed by some ontological considerations (i.e what is a Patient, etc)</p>",
        "id": 180742237,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573746073
    },
    {
        "content": "<p>That's somewhat true.  Typically when you have a reference to a Device, Patient or Practitioner you'll get back the whole thing.  It might be filtered by your user permissions (you'll only get back what you have permission to see) but generally the client doesn't ask for only a set of data elements.  There is a query capability that allows you to constrain what elements you get back, but it's not widely supported/used.</p>\n<p>If you're comfortable with the 'capacity' approach to defining what types of capacities a resource has (or a reference should have), then lets pursue that.  Would you be willing to define some of your hierarchical levels in terms of what 'capacity(ies)' they represent?</p>",
        "id": 180743763,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573746981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> </p>\n<blockquote>\n<p>I understand the concern around \"rule of least surprise\" and the term \"subject\".  We would need a term that encompasses both patients and locations though - anything you might take a sample of for testing because the use-cases for Specimen encompass agricultural, public health and hospital safety testing.  We would also need to retain the ability to have a finer-grained 'focus' which for humans is typically a fetus, tumor or lesion but for locations could be other things.  Do you have thoughts on what a less surprising name might be?</p>\n</blockquote>\n<p>Here we can start looking for very general terms other than subject, e.g. 'source', 'material source' or whatever and then try to think what kinds of type(s) it could be. I would be inclined to consider a) thinking up a new name like 'materialOrigin' and b) just coding it, i.e. the meaning is <em>type of material origin</em>. The reason for this is that if a data element is so general that literally any entity/thing can go there, I probably have no expectations at all, not even to get proper ids etc, other than, tell me the type of thing. So that would imply just coding it.</p>",
        "id": 180751130,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573751307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> </p>\n<blockquote>\n<p>If you're comfortable with the 'capacity' approach to defining what types of capacities a resource has (or a reference should have), then lets pursue that.  Would you be willing to define some of your hierarchical levels in terms of what 'capacity(ies)' they represent?</p>\n</blockquote>\n<p>I don't know what you mean by 'capacity' yet, in terms of something formally representable. Either it's in the data - that's what you will compute with, or maybe it's in an ontology / taxonomy of types, but still I only care about that to the extent that I can get hold of computable things (usually data) that characterise individuals of those ontology categories. (However, 'capacity' could be quite a good term for this concept, if we can define something workable).</p>",
        "id": 180751623,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573751639
    },
    {
        "content": "<p>With specimen, we're capturing two aspects - where did the material come from and what record is it attached to.  I could live with 'source' as a name.</p>\n<p>The data for the things that fit the categories will vary depending on what you're pointing to.  What really mattes is what those things are able to do.  (softwareVersion matters for Device, email matters for Practitioner, but what matters is that they're both resources that can take responsibility for performing actions.  \"ability to take responsibility for perform actions\" doesn't come from having a common set of attributes, but more from what the object 'is' - i.e. it's definition/scope and the real-world ramifications of that.</p>",
        "id": 180754755,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573753556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  I am unclear in what sense 'resources can take responsibilities for performing actions'.</p>",
        "id": 180782467,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573770473
    },
    {
        "content": "<p>The entities represented by the resources can take responsibility - i.e. Patients, Practitioners, PractitionerRoles, HealthCareServices, Organizations and Devices (at least some of them) can have responsibility for an action, though in some cases (PractitionerRole, Device) that responsibility propagates up to the Organization that manages them.  On the other hand, the entities represented by Group, Specimen, Location and most other resources <em>cannot</em> take responsibility for an action.</p>",
        "id": 180786712,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573773465
    },
    {
        "content": "<p>Well that distinction is more or less the concept of Party, i.e. an entity capable of actions (agency) and having accountability. This is usually extended in the Role concept. Specimens, Locations and most Devices are not Parties. Group requires its own analysis (but somewhere up there you said that only a responsible individual within a Group could be accountable, which I agree with).</p>\n<p>However... these are general concepts. Trying to guarantee that a specific informational entity (representing some kind of party) attached to some other information representing an act (prescription or whatever) has some particular / ultimate / legal / other level of responsibility I think is not achievable in the base models. You can only achieve this with a known organisational structure and known legal environment. The latter might be possible within some well-defined jurisdiction like 'Norway', or maybe a US state or CA province but knowing how organisational chains of responsibility really work is guesswork.</p>\n<p>The other point is: probably the majority of ad hoc requests into systems done via FHIR don't care about ultimate responsibility for an act, they just want to find out the proximate actor to answer the routine question 'who is taking care of this patient right now?' Such requests could be looking for anything - financial data, clinical history, who knows what.</p>\n<p>I think that the best that can be done is to do sufficient 'modelling' that commonly agreed categories of things (including abstract categories) are represented in unsurprising ways. Why? Because at the end of the day, data passed through some interop layer to requesting applications is ultimately there to serve some human cognitive need to do with a healthcare process that is underway. So how the professional healthcare sector thinks about entities is one driver. Secondly, in order to achieve software reuse and data processability we need to use generalisation in the models of those things. </p>\n<p>With FHIR, we are working with information artefacts and their <em>definitions</em>, i.e. some kind of <em>model</em>. The semantics of the outside world as far as they are internalised in FHIR are just whatever the model says (including derivative models, various implem guides and other concrete artefacts). To come back to your point about 'capacities', I would say that idea can only be realised in terms of concrete Resource definitions in FHIR. So if we ask the question: what kind of thing can be Communication.sender be, we can only answer in the general ontological sense: 'accountable agents', or whatever we think it is. And what FHIR thinks that is is just whatever a Party resource (if it existed) says it is. The model can't make promises that the kind of agent is just the one that truly has legal responsibility for that kind of act in Ontario or Bavaria, or wherever. All it can do is deliver some data that make sense, and let the requesting application make the next move.</p>",
        "id": 180821078,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573815439
    },
    {
        "content": "<p>I totally agree that there's no way to guarantee that a particular type will/can have accountability in a given circumstance.  However, some resource types have the <em>capacity</em> to have accountability and some don't.  If a particular relationship requires accountability as part of its semantics, then that should act as a filter on what resources are valid as targets of the relationship.  The specific set might still be further filtered based on real-world behavior.  For example, the \"performer\" relationship is generally restricted to resources that can be accountable (so \"party\" in your terminology).  In the current design, that would include Patient, RelatedPersion, PractitionerRole, Practitioner, Organization, HealthcareService, CareTeam, and some types of Device.  Business rules would come into play indicating that certain instances of those (say infant Patients, Practitioners that are deceased, disbanded Organizations, Devices like a non-automated bandage, etc.) can't take on responsibility.  Further business rules, legal considerations and general reality might place further limitations about what kinds of things a given entity can perform.  However, those rules fall into the space of context-specific implementation profiles where you can agree on what data elements will be supported by the relevant systems, what coded values will be present, etc. that might let you restrict to appropriate subsets of the respective resources.</p>\n<p>However, we can still do better than say that \"all performer relationships can/must allow all 'party' resources as targets\".  For example, when we are in the specific context of Immunization and looking at what real systems do, Patient, RelatedPerson and Device might fall off the list because we don't have (and don't envision) situations where those resources would ever be captured as the entity that performed an immunization.  We can, however, be confident that referencing Specimen or Location as a performer would invariably be wrong because neither of those things can ever have the responsibility for performing anything - let alone performing an immunization.</p>\n<p>Does that make sense?</p>",
        "id": 180827047,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573820833
    },
    {
        "content": "<p>I think you are making excellent arguments for introducing some abstract Resource types such as Party, Role, Practioner and so on! Your statement \"We can, however, be confident that referencing Specimen or Location as a performer would invariably be wrong because neither of those things can ever have the responsibility for performing anything - let alone performing an immunization.\" is exactly the missing capability that I think is needed in working groups  that I am advocating for: knowing that an accountable entity is needed here, that a 'request' entity is needed there and so on. With abstract resources that contain just the elements common to these general categories, Resource specifiers can match the data picture to the real world picture, at least in a reasonable approximation, rather than pursuing an interminable guessing game to construct a list of concrete types for many attributes.</p>\n<p>Now, as I have pointed out previously, I don't think all the needs can be solved 100% cleanly in this manner. In some cases, you are stuck with specifying a wide type like Party or Role in a base Resource, and then having to create a normative profile that everyone should use, that does some restriction that everyone agrees really is true. We do this in openEHR, but we never do it in the info model layer, only in the archetypes layer (= FHIR profiles layer).</p>\n<p>In the ideal case I think FHIR would be greatly improved by getting rid of these choice mechanisms altogether from the Resources (thus obviating the need for many of the compensatory patterns, which are going to be real work to maintain). Instead, use wider single types in the Resources, and in cases where some universal restriction is needed, make a normative profile. I don't know whether people are up for doing such a change, but I guarantee it will bring many benefits.</p>",
        "id": 180866934,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573848378
    },
    {
        "content": "<blockquote>\n<p>I guarantee it will bring many benefits.</p>\n</blockquote>\n<p>I don't yet see any benefits except for much confusion. Resources are normative profiles, why change that? How would it help anyone reading the standard to see the Observation.value allows any Type specialization, when it turns out that it actually doesn't, but you have to find that out somewhere else? </p>\n<p>I can't see that being a good outcome. Otherwise, Observation.value is Type, as shown in the UML</p>",
        "id": 180869332,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573850201
    },
    {
        "content": "<blockquote>\n<p>introducing some abstract Resource types such as Party, Role, Practioner and so on</p>\n</blockquote>\n<p>There are other ways to solve that problem as well. We should consider them</p>",
        "id": 180869372,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573850246
    },
    {
        "content": "<blockquote>\n<p>I don't yet see any benefits except for much confusion. Resources are normative profiles, why change that? How would it help anyone reading the standard to see the Observation.value allows any Type specialization, when it turns out that it actually doesn't, but you have to find that out somewhere else? <br>\nI can't see that being a good outcome. Otherwise, Observation.value is Type, as shown in the UML</p>\n</blockquote>\n<p>Observation.value should just be of type DataValue or some similar parent type of the various data value types. Typing it as 'Type' doesn't help anyone, indeed.<br>\nResources are not really normative profiles, they are a typed model, but containing subversions of their own type system, i.e. the 'choice[x]' and 'Reference()' constructs. This already is an endless confusion. Mixing constraints in with a a typed model doesn't work, which is why XSD is the lone formalism that does it (the designers had no idea of information modelling), and why no-one uses XSD to do real modelling as such.</p>",
        "id": 180908633,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573903696
    },
    {
        "content": "<p>Making it the parent type would imply that all of the children are allowed - and they're not.  Only a restricted list is permitted.  The same problem applies if we were to use \"Party\" as the performer for an Immunization - not all of the specializations of party are permitted.  Declaring an abstract type and then saying elsewhere that some of the specializations don't apply doesn't buy anything because implementers can't rely on the abstract type to be true.</p>",
        "id": 180911316,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573909118
    },
    {
        "content": "<p>so you keep banging away on this XSD point, which indicates that you still don't follow what's going on.</p>",
        "id": 180916326,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573918197
    },
    {
        "content": "<p>we're not aware of any benefit of renaming \"Type\" to \"DataValue\" other than making you happy</p>",
        "id": 180916369,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573918221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> in many cases, the abstract type will be true. It's just a question of which use cases have exceptions. The point about the abstract type is that it represents the minimum capabilities of any attached object. If a concrete type like Practitioner applies in all cases, then you just put that of course.</p>\n<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> what don't I follow? FHIR  is clearly based on XSD thinking, unless you have re-invented the same thing as XSD without intending to. But it's not a formalism anyone uses to do model representation with typing. It's only (slightly) useful for describing XML document content. There's a reason all formalisms used in IT don't include 'choice' - because it breaks typing. But anyway, I can see you are dedicated to this approach in FHIR, so I won't go on about it.</p>",
        "id": 180923298,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573929470
    },
    {
        "content": "<p>In most of our cases, there are at least some exceptions.  And the choice of what resources are available is driven by semantics - not what the data elements are.</p>\n<p>Rather than argue about the modelling theory, let's focus on the use cases.  Do you understand the need to be clear about what types or resources are (and aren't) allowed in a particular element?</p>",
        "id": 180925612,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573933593
    },
    {
        "content": "<p>Sure. It's what we've been successfully doing for 15 years in openEHR. The question is <em>how</em> to do it so that the management of the specification (Resource definitions and other normative artefacts), along with software production and data management are all economic and sustainable in the long run. Using technical things like 'choice' works against this, as has been recognised for a long time in industry (it's the reason 'exceptions' to typing in models are almost always modelled as 'business rules' or other kinds of constraints, in another layer of representation). I'm simply arguing for expressing the constraints you want in a technical way that a) doesn't break the base type system and b) is far more forgiving of requirements that subsequently change.</p>\n<p>Anyway, you are not going to agree on that, and I didn't really expect you would. Why not consider the lesser question of introducing some abstract types as discussed earlier, and at least simplify the typing equation? That will certainly provide some value.</p>",
        "id": 180951466,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573985397
    },
    {
        "content": "<p>I haven't seen any space in the data types where more abstract types will help, thought the only solid one you've proposed is DataValue.</p>",
        "id": 180952901,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573988095
    },
    {
        "content": "<p>back to Resources... we're discussing doing something in the Participations. Can we talk about name and see whether there's something I haven't figured out?</p>",
        "id": 180952916,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573988149
    },
    {
        "content": "<p>some of the participations, where appropriate, use name : HumanName. Other participations use name: String - which is close to the same as HumanName.text. So it's logically consistent, and consistent enough to say that they use the same pattern, but it's not something that works for specialization</p>",
        "id": 180952975,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573988230
    },
    {
        "content": "<p>so we could:</p>\n<ul>\n<li>Split name out as as a sibling to HumanName and remove .text</li>\n<li>introduce some abstract ancestor for HumanName and push the direct name:String down a level</li>\n<li>... something else? </li>\n</ul>\n<p>None of those options have seemed like a value proposition to the community (and the first is procedurally impossible now)</p>",
        "id": 180953033,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573988347
    },
    {
        "content": "<p>I believe that we agreed (loosely) to look at an ontology of participations, and that <span class=\"user-mention\" data-user-id=\"191388\">@Thomas Beale</span> was going to look at BFO etc again to see what was there. There's also HL7's classification(s) from the RIM to look at. I don't want this (sort of) action item to get lost...</p>",
        "id": 180953308,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573988843
    },
    {
        "content": "<p>I think the ontology comes before redesigning the resources, btw.</p>",
        "id": 180953313,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573988869
    },
    {
        "content": "<p>Well, for example iao::author-role is-a bfo::role is-a bfo::realizable-entity is-a specifically-dependent-continuant is-a continuant is-a entity. I would not replicate all of this in an information model, but just note that 'author' is understood as a kind of role. NB: BFO is fully axiomatised; these are not informal relationships. The class specifically-dependent-continuant (SDC) is one important one; it is for continuants that rely for their existence on an independent continuant (like a person or org). Independent continuants are pretty close to what I call Actor - a continuant entity-in-itself. SDCs are an ontological correspondent of what I have called Role, i.e. something that is dependent on its bearer (some Actor).<br>\n<a href=\"/user_uploads/10155/vAVGYDvGe5SNBF-3UxhkRVT_/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/vAVGYDvGe5SNBF-3UxhkRVT_/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/vAVGYDvGe5SNBF-3UxhkRVT_/pasted_image.png\"></a></div>",
        "id": 180954922,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573991906
    },
    {
        "content": "<p>Dispositions and functions are also Roles in BFO.</p>",
        "id": 180955226,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573992548
    },
    {
        "content": "<p>Regarding the 'name' problem, the orthodox approach is to define an abstract type Name that has various subtypes that has various subtypes like PersonName, OrgName etc. It can also provide at the Name level an interface level of representation like asString: String etc.</p>",
        "id": 180955279,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573992667
    },
    {
        "content": "<p>If you want a model that allows either a String form OR a parts-form name to be populated, and always provides a way to turn the latter into the former, then you could do:</p>\n<div class=\"codehilite\"><pre><span></span>class Name {\n    properties\n        asString: String;                     // represented as a String\n        parts: Hash&lt;String, String&gt;;         // for example\n        abstract parts2string(aParts: Hash&lt;String, String&gt;): String;  // implemented in descendants\n    invariants\n        asString /= Void or parts /= Void\n}\n</pre></div>",
        "id": 180955281,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1573992696
    },
    {
        "content": "<p>We need to be able to convey the name as a single string, as a collection of parts, or both.  We can't count on the receiver serializing a name string from the parts in the same way the sender does - because serialization order varies by context.  Thus we need to be able to convey both forms.</p>",
        "id": 180958524,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1573998762
    },
    {
        "content": "<p>Right - that's what the above does.</p>",
        "id": 180962498,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1574006655
    },
    {
        "content": "<p>What I'm saying is that parts2string isn't something that could be defined on the interface.</p>",
        "id": 180963745,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1574009043
    },
    {
        "content": "<p>I see we fell back to interfaces very quickly. That's what we're currently proposing anyway</p>",
        "id": 180996210,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574065944
    },
    {
        "content": "<p>with regard to the bfo roles... that little snippet you posted there is confusing, since it appears to be a single heirarchy but the descriptions imply multi-axial behaviour. E..g entity..continuent.. .. physical object quantity.. morphology</p>\n<p>I don't understand that. But does BFO have enough granularity in there to be generally useful for us? <br>\n... and I would not consider replicating it in the information model, but I could consider making a BFO code mandatory as a metadata item on references and resources, say, and making it an error in the build if they are not consistent. but my taake on BFO is that it doesn't say the things we'd want to say.</p>",
        "id": 180996407,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574066215
    },
    {
        "content": "<p>actually, on the subject of name... here's one place where choices are actually useful - the abstract could be a choice of HumanName | string, but that's not something we'd presently actually do. Maybe we should make that allowed in an abstract type... ?</p>",
        "id": 180996495,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574066315
    },
    {
        "content": "<p>Because you can have HumanName with just text, that would then give two ways to send the identical thing.  I expect we'd actually want to prohibit that in the same way we prohibit a choice of CodeableConcept|string.  (We need 'text' on HumanName because it's often use to convey both the discrete parts and the rendered name.</p>",
        "id": 181005873,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1574075103
    },
    {
        "content": "<p>only a choice in the abstract ancestor</p>",
        "id": 181005914,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574075149
    },
    {
        "content": "<p>If there was value in having an abstract ancestor?  I admit I don't yet understand the use-case for that.</p>",
        "id": 181005989,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1574075195
    },
    {
        "content": "<p>yes if there was value.</p>",
        "id": 181006029,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574075225
    },
    {
        "content": "<p>I think there is...</p>",
        "id": 181006034,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574075230
    },
    {
        "content": "<p>I'll make the case after DevDays</p>",
        "id": 181006054,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574075251
    },
    {
        "content": "<p>I'll get back on the BFO etc question tomorrow. I'll provide a bit more background on these ontologies which might help see how/if they are useful here.</p>",
        "id": 181044869,
        "sender_full_name": "Thomas Beale",
        "timestamp": 1574103537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191388\">@Thomas Beale</span> ping on this</p>",
        "id": 181989574,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574830165
    }
]