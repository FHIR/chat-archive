[
    {
        "content": "<p>Presently, when committees decide that an element is polymorphic, they simply list the types that can be used. </p>\n<p>In the heirarchical table, and the XML and Json templates, we do the same thing: simply list the set of types that can be used</p>",
        "id": 178670347,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571674104
    },
    {
        "content": "<p>But in the UML we do something different: we declare the element to be of type \"Type\" and list the choices as a set of constraints in a stereotype</p>",
        "id": 178670433,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571674172
    },
    {
        "content": "<p>but our decision during the development of R4 that some of the Types can have modifierExtensions complicates that a lot....</p>",
        "id": 178670537,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571674218
    },
    {
        "content": "<p>And Type is not a declared element.</p>",
        "id": 178670561,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571674232
    },
    {
        "content": "<p>generating code to get this right is actually pretty tricky</p>",
        "id": 178670590,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571674246
    },
    {
        "content": "<p>because of the modifier extensions.</p>",
        "id": 178670605,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571674258
    },
    {
        "content": "<blockquote>\n<p>because of the modifier extensions.</p>\n</blockquote>\n<p>Solution is to not allow modifier extensions... I think I have said that before</p>",
        "id": 178673537,
        "sender_full_name": "John Moehrke",
        "timestamp": 1571676042
    },
    {
        "content": "<p>I lost on that motion</p>",
        "id": 178673602,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571676099
    },
    {
        "content": "<p>They are allowed on some types</p>",
        "id": 178673618,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571676122
    },
    {
        "content": "<p>The problem is that Dosage is declared as a specialization of BackboneElement, but this is not a Type</p>",
        "id": 178673756,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571676220
    },
    {
        "content": "<p>That is, if Type is declared as an abstract specialization of Element and generalises the common re-usable data types. Which is the notional but undocumented intent of Type</p>",
        "id": 178673829,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571676280
    },
    {
        "content": "<p>So let's start with the abstract types. This is an classic OO model for what's going on with the abstract types, which is not explicit in the specification:</p>",
        "id": 178804735,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571783150
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/NJWgs0Wf_bFN0lKYN0FqIg9R/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/NJWgs0Wf_bFN0lKYN0FqIg9R/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/NJWgs0Wf_bFN0lKYN0FqIg9R/pasted_image.png\"></a></div>",
        "id": 178804737,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571783153
    },
    {
        "content": "<p>I'd like to make that model explicit</p>",
        "id": 178804785,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571783164
    },
    {
        "content": "<p>Do you see all of the non-primative types as being descendants of BackboneType, or only some, such as Dose?such as Dose?</p>",
        "id": 178807820,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1571786047
    },
    {
        "content": "<p>only some. Currently labelled as descending from BackboneElement, but they actually can't unless you allow for polyheirarchy, which I think we should avoid</p>",
        "id": 178808099,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571786347
    },
    {
        "content": "<p>Follow up on this: MnM agreed today to make this change - to include the UML diagram in the specification, and to change the structure definitions to support it, and to then consult implementers to see if anyone is concerned about this as a breaking change </p>\n<p>Note that the only sense I know that this is a breaking change is that it will impact on the code generators for the reference implementations etc</p>",
        "id": 179381735,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572388158
    }
]