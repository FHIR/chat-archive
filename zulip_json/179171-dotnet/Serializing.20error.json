[
    {
        "content": "<p>When creating a Person resource, I can do the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>        Period period = new Period()\n        {\n            Start = DateTime.MinValue.ToString(),\n            End = DateTime.MaxValue.ToString()\n        };\n        var address = new Address()\n        {\n            . . . ,\n            Period = period\n        };\n</code></pre></div>\n\n<p>to set the Person address.  If I then use FHIRserialize to serialize the resource and then use a  FhirJsonParser to recreate the patient,  I get an<br>\nerror thrown indicating it can't deserialize the period I set.  What's wrong with the period?</p>",
        "id": 272632118,
        "sender_full_name": "Dennis Brox",
        "timestamp": 1645409078
    },
    {
        "content": "<p>Forget this.  Got it working by just forcing the date format to the FHIR standard.  It was confusing when an error  doesn't get thrown on the serialize - - not nice to be able to create garbage and not know about it until you try to read it back.</p>",
        "id": 272650379,
        "sender_full_name": "Dennis Brox",
        "timestamp": 1645428348
    },
    {
        "content": "<p>There's an extension method .ToFhirDate() that you can use for those conversions.</p>",
        "id": 272652379,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1645429893
    },
    {
        "content": "<p>Maybe this is the same type of problem but more severe.  Using code:</p>\n<div class=\"codehilite\"><pre><span></span><code>            var serializer = new FhirJsonSerializer();\n            var jo = serializer.SerializeToString(o);\n\n            var parser = new FhirJsonParser();\n            o =  parser.Parse&lt;Observation&gt;(jo);\n</code></pre></div>\n\n<p>You can see what gets serialized:<br>\njo<br>\n\"{\\\"resourceType\\\":\\\"Observation\\\",\\\"id\\\":\\\"f6174e82-f7f5-4ee0-ae61-1c37882bb27d\\\",\\\"text\\\":{\\\"div\\\":\\\"&lt;xml&gt;&lt;value&gt;blood pressure&lt;/value&gt;&lt;/xml&gt;\\\"},\\\"subject\\\":{\\\"reference\\\":\\\"52095\\\"},\\\"effectiveDateTime\\\":\\\"2022-01-16T11:28:16+00:00\\\",\\\"component\\\":[{\\\"code\\\":{\\\"text\\\":\\\"Systolic blood pressure\\\"},\\\"valueDecimal\\\":130},{\\\"code\\\":{\\\"text\\\":\\\"Diastolic blood pressure\\\"},\\\"valueDecimal\\\":80}]}\"</p>\n<p>And I get the following error i.e. it won't deserialize, whereas of course it works fine where there are no FHIR types.</p>\n<p>Hl7.Fhir.ElementModel.StructuralTypeException<br>\n  HResult=0x80131537<br>\n  Message=Type checking the data: Choice element 'valueDecimal' is suffixed with unexpected type 'decimal' (at Observation.component[0].valueDecimal[0])<br>\n  Source=Hl7.Fhir.Support</p>",
        "id": 272740424,
        "sender_full_name": "Dennis Brox",
        "timestamp": 1645482187
    },
    {
        "content": "<p>Yes, decimal is not a valid type for component.value, and the serializer does not check those things, it serializes whatever type it finds in the class (...and there is no easy C# way to prevent the assignment in the first place, that would be the 'right' solution)</p>",
        "id": 272741948,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1645483612
    },
    {
        "content": "<p>Yup, in Observation you're meant to use Quantity for numeric data (so that you apply the appropriate units too)</p>",
        "id": 272742333,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1645483969
    },
    {
        "content": "<p>But the problem is  that in component.value it is  valueQuantity that must be used and it is a Quantity.  In Quantity, value is decimal and nothing else can be entered except FHIRDecimal ?</p>",
        "id": 272751740,
        "sender_full_name": "Dennis Brox",
        "timestamp": 1645494317
    },
    {
        "content": "<p>That's correct.</p>",
        "id": 272757180,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1645501444
    },
    {
        "content": "<p>Your example above just had decimal in the component.value, not in component.valueQuantity.valueDecimal</p>",
        "id": 272757333,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1645501653
    }
]