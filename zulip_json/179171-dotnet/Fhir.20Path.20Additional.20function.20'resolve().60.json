[
    {
        "content": "<p>Hi Guys, I seem to find that the FHIR Path function named <code>resolve()</code> does not work or is not supported with the .NET FHIR Path implementation (STU3 or the develop-r4). <br>\nIf I do use a path with it I get an exception and the following message <code>Unknown symbol 'resolve'</code>. In FHIR R4 there is a search parameter for the AuditEvent Resource that now uses this resolve() method, like this: <code>AuditEvent.agent.who.where(resolve() is Patient)</code>.<br>\nOnly looking to bring this to peoples attention and wondering should I add it as a GitHub issue?<br>\nOn a side note, I really don't understand how resolve() should work. It appears that when used the FHIR path implementation is somehow intended to retrieve the target, no idea how they can happen?</p>",
        "id": 153997900,
        "sender_full_name": "Angus Millar",
        "timestamp": 1537321736
    },
    {
        "content": "<p>This is going to be fun.</p>",
        "id": 153997931,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1537324528
    },
    {
        "content": "<p>Yes, resolve is expected to reach out and load that resource into the scope of the navigator.</p>",
        "id": 153997932,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1537324588
    },
    {
        "content": "<p>Oh yes Angus, you can implement the resolve function yourself and add it to the fhirpath symbol table.<br>\nJust like I've done for other custom functions in the fhirpath tester.<br>\n(and hope that you've registered the fhir extended functions already)<br>\n<a href=\"https://github.com/brianpos/FhirPathTester/blob/master/UWP/CustomFluentPathFunctions.cs#L30\" target=\"_blank\" title=\"https://github.com/brianpos/FhirPathTester/blob/master/UWP/CustomFluentPathFunctions.cs#L30\">https://github.com/brianpos/FhirPathTester/blob/master/UWP/CustomFluentPathFunctions.cs#L30</a></p>",
        "id": 153997933,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1537325532
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191391\">@Angus Millar</span>, the Hl7.Fhir.Core library provides implementations for some custom FhirPath functions, including \"resolve\":<br>\n<a href=\"https://github.com/ewoutkramer/fhir-net-api/blob/develop/src/Hl7.Fhir.Core/FhirPath/ElementNavFhirExtensions.cs#L100\" target=\"_blank\" title=\"https://github.com/ewoutkramer/fhir-net-api/blob/develop/src/Hl7.Fhir.Core/FhirPath/ElementNavFhirExtensions.cs#L100\">https://github.com/ewoutkramer/fhir-net-api/blob/develop/src/Hl7.Fhir.Core/FhirPath/ElementNavFhirExtensions.cs#L100</a><br>\nCall the static method to initialize FhirPath engine with custom functions:</p>\n<div class=\"codehilite\"><pre><span></span>Hl7.FhirPath.FhirPathCompiler.DefaultSymbolTable.AddFhirExtensions();\n</pre></div>",
        "id": 153998024,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1537346240
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> this was the gem I needed. It still took a bit of investigation to work out what to do but I feel I now have it working. For others that might be stuck here, I will share what I found.</p>\n<div class=\"codehilite\"><pre><span></span>            //Add in the extended FhirPath functions from the fhir.net API as pointed out by Michel in the link above, in the namespace: Hl7.Fhir.FhirPath\n            //Below adds this extended support, it supports some FHIR Path functions (hasValue, resolve, htmlchecks), of which resolve is what I needed.\n            Hl7.FhirPath.FhirPathCompiler.DefaultSymbolTable.AddFhirExtensions();\n            var oFhirEvaluationContext = new Hl7.Fhir.FhirPath.FhirEvaluationContext(Navigator);\n            //The resolve() function then also needs to be provided an external resolver delegate that performs the resolve\n            //that delegate can be set as below. Here I am providing my own implementation &#39;IPyroFhirPathResolve.Resolver&#39;\n            oFhirEvaluationContext.Resolver = IPyroFhirPathResolve.Resolver;\n            IEnumerable&lt;IElementNavigator&gt; ResultList = Navigator.Select(Expression, oFhirEvaluationContext);\n            foreach (IElementNavigator oElement in ResultList)\n            {\n              //process what is found by that FHIR path Expression, if any\n            }\n</pre></div>\n\n\n<p>My 'Resolver' implementation is simpler than what the full fhir path resolve() requires as I only need to source resource reference urls when the target is a specified resource type, for example, this type of FHIRPath expression <code>AuditEvent.entity.what.where(resolve() is Patient)</code>, which are now found all though R4 search parameter definitions. To do this I have a 'PyroRequestUri' implementation that parses FHIR references and takes into account, among other things,  the server known base URL. So that implementation can work out the target Resource type in any reference, such as <code>https://stu3.test.pyrohealth.net/fhir/Patient/12345</code> or <code>Patient/12345</code> or even <code>http://someserver.com/over/here/Patient/12345</code> where the target in these examples is Patient.<br>\nSo my Resolver does this and then returns a <code>Hl7.Fhir.ElementModel.IElementNavigator</code> of which I have a concrete implementation called <code>PyroElementNavigator</code>. The important property to set is the <code>Type</code> property to the found Resource name \"Patient\" in the examples.<br>\nThis now seems to be working as required for collecting search indexes from resources based on the resolve() function. And I do not take the hit of needing to actually lookup and resolve the reference to an actual resource at an endpoint. Of course in other use cases of resolve() in FHIR path this would not do, another implementation would be required, yet for server resource indexing it seems fine.</p>\n<p>Hope this might help someone. Please point out any issues you might see with it.</p>\n<div class=\"codehilite\"><pre><span></span>public Hl7.Fhir.ElementModel.IElementNavigator Resolver(string url)\n    {\n      PyroElementNavigator PyroElementNavigator = new PyroElementNavigator();\n      var PyroRequestUri = IPyroRequestUriFactory.CreateFhirRequestUri();\n      if (PyroRequestUri.FhirRequestUri.Parse(url))\n      {\n        PyroElementNavigator.Name = PyroRequestUri.FhirRequestUri.ResourseName;\n        //This type property is the key property to set for resolve() as it needs to match the comparison\n        //for example &#39;AuditEvent.agent.who.where(resolve() is Patient)&#39; Patient is Patient\n        PyroElementNavigator.Type = PyroRequestUri.FhirRequestUri.ResourseName;\n        PyroElementNavigator.Value = PyroRequestUri.FhirRequestUri.ResourseName;\n        PyroElementNavigator.Location = url;\n        return PyroElementNavigator;\n      }\n      else\n      {\n        return null;\n      }\n    }\n</pre></div>",
        "id": 154000926,
        "sender_full_name": "Angus Millar",
        "timestamp": 1538109823
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191391\">@Angus Millar</span>, thank you for sharing your code! Solid demonstration of how to inject custom functionality into the FhirPath engine, and why we need this.</p>",
        "id": 154001459,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1538229245
    }
]