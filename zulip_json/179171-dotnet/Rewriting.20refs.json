[
    {
        "content": "<p>I'm interested in walking a resource and rewriting references throughout; is there example code that would help with this kind of \"dynamic\" task (walking the tree of elements, re-mapping based on type)?</p>",
        "id": 153971257,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1529691298
    },
    {
        "content": "<p>you could use the fhirpath engine, that's what <span class=\"user-mention\" data-user-id=\"191391\">@Angus Millar</span> did (which gets all the extensions and contained resources) I just did the modelinfo approach, which misses those extras, but is quick with the core props</p>",
        "id": 153971266,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1529692031
    },
    {
        "content": "<p>Happy to share code for either/both (just not now)</p>",
        "id": 153971267,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1529692046
    },
    {
        "content": "<p>Thanks -- <code>ModelInfo</code> looks like a great lead.</p>",
        "id": 153971269,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1529692207
    },
    {
        "content": "<p>I think <a href=\"https://github.com/ewoutkramer/fhir-net-api/blob/9c5f262cbab8200f0e82fffe3f0949a6e7120bc8/src/Hl7.Fhir.Support/ElementModel/ElementNode.cs#L23\" target=\"_blank\" title=\"https://github.com/ewoutkramer/fhir-net-api/blob/9c5f262cbab8200f0e82fffe3f0949a6e7120bc8/src/Hl7.Fhir.Support/ElementModel/ElementNode.cs#L23\">https://github.com/ewoutkramer/fhir-net-api/blob/9c5f262cbab8200f0e82fffe3f0949a6e7120bc8/src/Hl7.Fhir.Support/ElementModel/ElementNode.cs#L23</a> may also be what I need (this is my first time looking at the library; the tests are super helpful as documentation!)</p>",
        "id": 153971270,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1529692598
    },
    {
        "content": "<p>Okay, so digging into <code>IElementNavigator</code>, I'm having trouble figuring out:</p>\n<p>1) How to determine whether a given child is an array or single element<br>\n2) How to serialize a given node and its descendants</p>\n<p>Should I not have these kinds of expectations?</p>",
        "id": 153971306,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1529700126
    },
    {
        "content": "<blockquote>\n<p>you could use the fhirpath engine, that's what <span class=\"user-mention\" data-user-id=\"191391\">@Angus Millar</span> did (which gets all the extensions and contained resources) I just did the modelinfo approach, which misses those extras, but is quick with the core props</p>\n</blockquote>\n<p>Here is a link to that code: <a href=\"https://github.com/angusmillar/Pyro/blob/master/Pyro.Common/Extentions/ResourceExtentions.cs\" target=\"_blank\" title=\"https://github.com/angusmillar/Pyro/blob/master/Pyro.Common/Extentions/ResourceExtentions.cs\">https://github.com/angusmillar/Pyro/blob/master/Pyro.Common/Extentions/ResourceExtentions.cs</a></p>",
        "id": 153971344,
        "sender_full_name": "Angus Millar",
        "timestamp": 1529731036
    },
    {
        "content": "<blockquote>\n<p>Okay, so digging into <code>IElementNavigator</code>, I'm having trouble figuring out:</p>\n<p>1) How to determine whether a given child is an array or single element<br>\n2) How to serialize a given node and its descendants</p>\n<p>Should I not have these kinds of expectations?</p>\n</blockquote>\n<p>Hi Josh - you're getting into .NET I see ;-)</p>\n<p>This <code>IElementNavigator</code> is absolutely the way to do it - it allows you to do this dynamic behaviour without having to deal with POCOs and thus saving the time of parsing data into POCO's - which is quite some cycles.</p>\n<p>The IElementNavigator in the current version does not have a lot of type information (like whether something repeats, whether it's a cointained resource, etc), so that's also why serialization functionality is limited.  I am working on a greatly expanded set of implementations of this interface that do carry this information, including serializers that would do exactly what you need.  See here for where the action is happening:  <a href=\"https://github.com/ewoutkramer/fhir-net-api/tree/feature/nav-based-serialization\" target=\"_blank\" title=\"https://github.com/ewoutkramer/fhir-net-api/tree/feature/nav-based-serialization\">https://github.com/ewoutkramer/fhir-net-api/tree/feature/nav-based-serialization</a>.</p>\n<p>I hope to pull this into the main branch this month - but I am happy to discuss it with you in more detail if you need.</p>",
        "id": 153972825,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1530532147
    }
]