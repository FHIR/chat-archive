[
    {
        "content": "<p>Hey i got the problem, that Observations can have different values, which the Frontend cant parse.<br>\nIm using the <strong>.Net SDK from firely</strong> and they provide this implementation:<br>\n<a href=\"/user_uploads/10155/QHbQtmb0gt0MjzKZUV3lGs--/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/QHbQtmb0gt0MjzKZUV3lGs--/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/QHbQtmb0gt0MjzKZUV3lGs--/image.png\"></a></div><p>When i get my Resources from the hl7 server this is my output before sending it to the frontend<br>\n<a href=\"/user_uploads/10155/erI2xWWqfdLwKV8DCdkmKON9/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/erI2xWWqfdLwKV8DCdkmKON9/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/erI2xWWqfdLwKV8DCdkmKON9/image.png\"></a></div><p>So far so good, but as we can see, there is just a Property called Value, but the Frontend npm package <strong>@types/fhir</strong> provides different property names for the different values that could appear.<br>\n<a href=\"/user_uploads/10155/WHaArXwRQAIl02uCDgMXhKbw/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/WHaArXwRQAIl02uCDgMXhKbw/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/WHaArXwRQAIl02uCDgMXhKbw/image.png\"></a></div><p>Is there a way to map these properties correctly, before the information is lost? Or is there another npm package, that covers this automaticaly?<br>\nThis is my incoming Object at the Frontend:<br>\n<a href=\"/user_uploads/10155/zqFWwxUymCQtJbL3IDBEaBjJ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/zqFWwxUymCQtJbL3IDBEaBjJ/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/zqFWwxUymCQtJbL3IDBEaBjJ/image.png\"></a></div><p>I thought about sending to the frontend as Object, since i have the \"typeName\" of the value i could parse it to the corresponding Object, but that looks unusual to me.</p>\n<p>Im happy for any advice ;-)<br>\nGreetings Lars</p>",
        "id": 269717571,
        "sender_full_name": "Lars Ewert",
        "timestamp": 1643367240
    },
    {
        "content": "<p>Hi Lars, oddly enough, both are correct.</p>\n<p>When serializing choice elements, the type is appended to the element name.  A good example is the <code>deceased[x]</code> element on the <a href=\"https://www.hl7.org/fhir/patient.html\">Patient</a> resource.  The element itself is actually defined as <code>Patient.deceased</code>, with a choice of boolean or date-time data types.  When processed, the tooling appends the <code>[x]</code> to signify it is a choice type, and in serialization you may have either <code>Patient.deceasedBoolean</code> or <code>Patient.deceasedDateTime</code> present.  What is important to note is that these are two different data types in the <em>same element</em>.  So, it not allowed to have both of them present.</p>\n<p>In your case, the C# SDK is providing convenience access by representing <code>Value</code> as a single property which may have multiple types.  In the TypeScript types it is showing the raw models that match the JSON serialization format*.</p>\n<p>*There are a few of us that are looking into making a TS/JS 'SDK' that uses classes and has a cleaner interface... it is a lot of work with a long-term commitment though, so it may be a while yet.</p>",
        "id": 269765967,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1643388955
    },
    {
        "content": "<p>Hi Gino,</p>\n<p>thank you for the Answer. Well since it is also in my interest, to make use of an compatible SDK, i would like to help you too. But only,  if you're searching more Developers for that.</p>\n<p>In the meantime, i will go around that problem and parse these values separatly.</p>",
        "id": 269774412,
        "sender_full_name": "Lars Ewert",
        "timestamp": 1643392161
    },
    {
        "content": "<p>No problem!  The <a class=\"stream\" data-stream-id=\"179169\" href=\"/#narrow/stream/179169-javascript\">#javascript</a> stream is where all the TS-related conversations happen, feel free to jump in at any time.</p>",
        "id": 269782577,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1643395243
    },
    {
        "content": "<p>Note that the C# library there serialises with the valueString or whichever route you have in the object model. That's how they are both compatible with each other, and the fhir spec.</p>",
        "id": 269792064,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643399373
    },
    {
        "content": "<p>Is there an example of an SDK blood pressure observation somewhere.  I assume the 2 values go into a codeableconcept but the data types are driving me crazy.  Thanks.</p>",
        "id": 269892841,
        "sender_full_name": "Dennis Brox",
        "timestamp": 1643495180
    },
    {
        "content": "<p>I figured out how to create blood pressure observations but, moving on, I use getproperties() to find all the properties in a class.  Working on a fhir class like Person though, I get a lot of things that SDK  adds by itself or are inherited.  Is there a way to select from the properties list only those declared in the fhir documentation for that resource?</p>",
        "id": 269964806,
        "sender_full_name": "Dennis Brox",
        "timestamp": 1643585540
    },
    {
        "content": "<p>When you are working with Pocos, which you do I think, you can enumerate through all elements of a resource with the property <code>NamedChildren</code> or the property <code>Children</code>. See here an example:</p>\n<div class=\"codehilite\"><pre><span></span><code>            var resource = new Patient();\n            foreach (var child in resource.NamedChildren)\n            {\n                Console.WriteLine($&quot;property: { child.ElementName} with value {child.Value}&quot;);\n            }\n</code></pre></div>\n<p>The property <code>Children</code> of a resource gives you the values of all child elements of a resource.</p>",
        "id": 269994910,
        "sender_full_name": "Marco Visser",
        "timestamp": 1643617828
    },
    {
        "content": "<p>What are you trying to do with enumerating the properties?</p>",
        "id": 270017691,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643629206
    },
    {
        "content": "<p>In the user interface I want to bring up the properties in the resource that they can change and, based on their type, allow editing them in a C# form.</p>",
        "id": 271676870,
        "sender_full_name": "Dennis Brox",
        "timestamp": 1644653487
    },
    {
        "content": "<p>Check the Firely docs for the classmapping and property mapping classes, they would let you do that quite generically.</p>",
        "id": 271680346,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1644658845
    }
]