[
    {
        "content": "<p>I can confirm that yes we will be releasing a dev version of the dotnet client for that connectathon yes. </p>",
        "id": 153815376,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1457953854
    },
    {
        "content": "<p>Michael, not sure what you want it to do with rdf/turtle.</p>",
        "id": 153815377,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1457953881
    },
    {
        "content": "<p>Any chance that the summary parameter that's passed to the FhirSerializer.SerializeResourceTo... methods might be re-factored to accept all of the _summary  parameter values in the spec (true, text, data, count &amp; false)?</p>",
        "id": 153819230,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1459373980
    },
    {
        "content": "<p>I am pretty sure <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> has done work on that, but I don't think it has made it into the NuGet packages yet. If we've fixed it, it will be part of our Montreal release of the .NET API.</p>",
        "id": 153819355,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1459426685
    },
    {
        "content": "<p>Yes, this has definitely been done, and there are unit tests that verify it too.</p>",
        "id": 153819495,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1459461245
    },
    {
        "content": "<p>Thought it was in the last version of the NuGet package. (The functionality is in the sqlonfhir server) Maybe its in the code committed after the last deploy. (is a breaking change as need to change from bool to the enum type)<br>\nAnyway, it is in the May package as ran the unit tests on it overnight.</p>",
        "id": 153819496,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1459461333
    },
    {
        "content": "<p>Yes, you added it to dev right after the nuget package build, I remember, because you wanted to test it with your server first....</p>",
        "id": 153819854,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1459756439
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"193026\">@Stephen Lloyd</span>, see the definition of datatype code:<br>\n<a href=\"http://hl7.org/fhir/datatypes.html#code\" target=\"_blank\" title=\"http://hl7.org/fhir/datatypes.html#code\">http://hl7.org/fhir/datatypes.html#code</a><br>\n\"Technically, a code is restricted to a string which has at least one character and no leading or trailing whitespace, and where there is no whitespace other than single spaces in the contents\"<br>\nSo codes could contain characters that are not allowed for identifiers in a programming language.</p>",
        "id": 153953577,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1524478084
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191336\">@Michel Rutten</span> , thanks for the response however the question was more targeted at the dotnet implementation approach. I'm actually interested in how people have addressed this issue when using the .net Fhir API so far (from an implementation point of view). As the specification says \"almost anything\" as you've highlighted, what is the safest way of mapping these to the existing enumeration values? For the example I highlighted I can just replace all instances of hyphen with an empty string and \"entered-in-error\" becomes \"enteredinerror\" I can then do an Enum.Parse(~) to determine the correct enum value at runtime. This approach however may not catch all exceptions to the programming requirements of an enum for code names.</p>",
        "id": 153953583,
        "sender_full_name": "Stephen Lloyd",
        "timestamp": 1524484504
    },
    {
        "content": "<p>This is the code we using to generate the C# enums:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">string</span> <span class=\"nf\">ConvertEnumValue</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">StartsWith</span><span class=\"p\">(</span><span class=\"s\">&quot;_&quot;</span><span class=\"p\">))</span>\n            <span class=\"n\">name</span> <span class=\"p\">=</span> <span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">Substring</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"p\">==</span> <span class=\"s\">&quot;=&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"s\">&quot;Equal&quot;</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"p\">==</span> <span class=\"s\">&quot;&lt;&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"s\">&quot;LessThan&quot;</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"p\">==</span> <span class=\"s\">&quot;&lt;=&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"s\">&quot;LessOrEqual&quot;</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"p\">==</span> <span class=\"s\">&quot;&gt;=&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"s\">&quot;GreaterOrEqual&quot;</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"p\">==</span> <span class=\"s\">&quot;&gt;&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"s\">&quot;GreaterThan&quot;</span><span class=\"p\">;</span>\n        <span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">bits</span> <span class=\"p\">=</span> <span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">Split</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"kt\">char</span><span class=\"p\">[]</span> <span class=\"p\">{</span><span class=\"sc\">&#39; &#39;</span><span class=\"p\">,</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"p\">});</span>\n        <span class=\"kt\">string</span> <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"k\">null</span><span class=\"p\">;</span>\n        <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">bit</span> <span class=\"k\">in</span> <span class=\"n\">bits</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">result</span> <span class=\"p\">+=</span> <span class=\"n\">bit</span><span class=\"p\">.</span><span class=\"n\">Substring</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">).</span><span class=\"n\">ToUpper</span><span class=\"p\">();</span>\n            <span class=\"n\">result</span> <span class=\"p\">+=</span> <span class=\"n\">bit</span><span class=\"p\">.</span><span class=\"n\">Substring</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">IsIntegerValue</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">.</span><span class=\"n\">TryParse</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"k\">out</span> <span class=\"n\">IsIntegerValue</span><span class=\"p\">))</span>\n            <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"s\">&quot;N&quot;</span> <span class=\"p\">+</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 153956383,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1525697559
    },
    {
        "content": "<p>We already followed up on this one with the more reliable way using the function that does this in the project</p>\n<div class=\"codehilite\"><pre><span></span>Hl7.Fhir.Model.AdministrativeGender? gender = EnumUtility.ParseLiteral&lt;Hl7.Fhir.Model.AdministrativeGender&gt;(&quot;male&quot;);\n</pre></div>",
        "id": 153956386,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1525697811
    },
    {
        "content": "<p>The same as you added patient. Add composition as a resource entry to bundle</p>\n<div class=\"codehilite\"><pre><span></span>myBundle.AddResourceEntry(composition, url)\n</pre></div>",
        "id": 154011409,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1540305426
    }
]