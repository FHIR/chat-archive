[
    {
        "content": "<p>Hello everyone,<br>\nOne of the business cases of my clients is delivering patient's  \"race\". I was thinking to tell him to use the US Core patient profile because it has the \"us-core-race\" extension. This data will be transmitted as FHIR JSON to our side.<br>\nWe use the <a href=\"http://dot.net\">dot.net</a> library to parse this JSON (which is not aimed to support specific profiles), thus I have a doubt if this library can parse the  \"us-core-race\" extension. will I be able to parse it with the dotnet library? if not, what are my options?</p>",
        "id": 247377765,
        "sender_full_name": "Erez Shalom",
        "timestamp": 1627413219
    },
    {
        "content": "<p>Yes, the standard .net library will handle that extension just fine</p>",
        "id": 247383065,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1627415958
    },
    {
        "content": "<p>Hi Erez, I assume you are referring to the <a href=\"https://github.com/FirelyTeam/firely-net-sdk\">Firely Net SDK</a> (e.g., NuGet package Hl7.Fhir.R4)?  If so, you can use the <a href=\"https://hl7.org/fhir/us/core/StructureDefinition-us-core-race.html\">US Core Race</a> extension with the library.</p>\n<p>There is a documentation page on <a href=\"https://docs.fire.ly/projects/Firely-NET-SDK/model/extensions.html\">extensions</a> that has the basic syntax you will need.  For that particular extension (by coincidence), I have some example code as well.  <a href=\"https://github.com/GinoCanessa/FHIR-CS-Profiling-Basic/blob/main/src/UsCore/UsCoreRace.cs\">UsCoreRace.cs</a> has an extension class for <code>Patient</code>, which allows for code like:</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"n\">Patient</span> <span class=\"n\">patient</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Patient</span><span class=\"p\">();</span>\n<span class=\"n\">patient</span><span class=\"p\">.</span><span class=\"n\">UsCoreRaceSet</span><span class=\"p\">(</span>\n    <span class=\"s\">\"Race default text\"</span><span class=\"p\">,</span>\n    <span class=\"k\">new</span> <span class=\"n\">UsCoreRace</span><span class=\"p\">.</span><span class=\"n\">UsCoreOmbRaceCategoryValues</span><span class=\"p\">[]</span> <span class=\"p\">{</span> <span class=\"n\">UsCoreRace</span><span class=\"p\">.</span><span class=\"n\">UsCoreOmbRaceCategoryValues</span><span class=\"p\">.</span><span class=\"n\">Unknown</span> <span class=\"p\">});</span>\n\n<span class=\"n\">patient</span><span class=\"p\">.</span><span class=\"n\">UsCoreRaceTextSet</span><span class=\"p\">(</span><span class=\"s\">\"Updated text\"</span><span class=\"p\">);</span>\n\n<span class=\"n\">patient</span><span class=\"p\">.</span><span class=\"n\">UsCoreRaceOmbCategoryAdd</span><span class=\"p\">(</span><span class=\"n\">UsCoreRace</span><span class=\"p\">.</span><span class=\"n\">UsCoreOmbRaceCategoryValues</span><span class=\"p\">.</span><span class=\"n\">AmericanIndianOrAlaskaNative</span><span class=\"p\">);</span>\n<span class=\"n\">patient</span><span class=\"p\">.</span><span class=\"n\">UsCoreRaceOmbCategoryAdd</span><span class=\"p\">(</span><span class=\"n\">UsCoreRace</span><span class=\"p\">.</span><span class=\"n\">UsCoreOmbRaceCategoryValues</span><span class=\"p\">.</span><span class=\"n\">AmericanIndianOrAlaskaNative</span><span class=\"p\">);</span>\n<span class=\"n\">patient</span><span class=\"p\">.</span><span class=\"n\">UsCoreRaceOmbCategoryAdd</span><span class=\"p\">(</span><span class=\"n\">UsCoreRace</span><span class=\"p\">.</span><span class=\"n\">UsCoreOmbRaceCategoryValues</span><span class=\"p\">.</span><span class=\"n\">Asian</span><span class=\"p\">);</span>\n<span class=\"n\">patient</span><span class=\"p\">.</span><span class=\"n\">UsCoreRaceOmbCategoryAdd</span><span class=\"p\">(</span><span class=\"n\">UsCoreRace</span><span class=\"p\">.</span><span class=\"n\">UsCoreOmbRaceCategoryValues</span><span class=\"p\">.</span><span class=\"n\">Unknown</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>That <a href=\"https://github.com/GinoCanessa/FHIR-CS-Profiling-Basic\">repo</a> has links to some videos walking through how that code was written. (edit: which can serve as a more detailed walkthrough of using extensions with C# code)</p>",
        "id": 247383090,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1627415971
    },
    {
        "content": "<p>This is what I used to parse US Core Race. Any one see any issues with this?</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"kt\">var</span> <span class=\"n\">raceValues</span> <span class=\"p\">=</span> <span class=\"n\">castResource</span><span class=\"p\">.</span><span class=\"n\">Extension</span>\n    <span class=\"p\">.</span><span class=\"n\">Where</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">=&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">Url</span> <span class=\"p\">==</span> <span class=\"s\">\"http://hl7.org/fhir/us/core/StructureDefinition/us-core-race\"</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"n\">SelectMany</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">=&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">Extension</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"n\">Where</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">=&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">Value</span> <span class=\"k\">is</span> <span class=\"n\">Coding</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"n\">Select</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">=&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">Value</span> <span class=\"k\">as</span> <span class=\"n\">Coding</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 247722745,
        "sender_full_name": "Matthew Dugal",
        "timestamp": 1627658702
    },
    {
        "content": "<p>Looks ok.  It doesn't work for you?  Debugging Linq is not too easy, but you can take the full statement apart in single Where/Select/ etc and then debug....</p>",
        "id": 247724731,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1627659709
    },
    {
        "content": "<p>No it works fine. Just wanted a second set of eyes before making it a suggestion to Erez for parsing. Thank you BTW.</p>",
        "id": 247726880,
        "sender_full_name": "Matthew Dugal",
        "timestamp": 1627660667
    },
    {
        "content": "<p>.OfType&lt;Coding&gt;()</p>",
        "id": 247750728,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1627672865
    },
    {
        "content": "<p>Thanks everyone for your useful answers!</p>",
        "id": 248476642,
        "sender_full_name": "Erez Shalom",
        "timestamp": 1628170202
    }
]