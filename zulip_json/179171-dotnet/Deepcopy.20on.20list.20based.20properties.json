[
    {
        "content": "<p>I was trying to use Resource.CopyTo to merge few resources, but stumbled on copying null or empty properties</p>\n<p>If a resource has a uninitialized property which is a list , say Identifier, the identifier on target resource is replaced with a new empty list.<br>\nThis is surprising given that , if it some other kind of property, say Code, the code on target is replaced only if code is not null.<br>\nUpon digging deeper, I found that list property is always initialized to an empty list if null.<br>\n - Either, we should check null on underlying backing field before copying<br>\n - Or, we should check for null or empty on property which are of type list</p>\n<p>Thoughts?</p>",
        "id": 154016695,
        "sender_full_name": "Jeffy Mathew Jose",
        "timestamp": 1541689338
    },
    {
        "content": "<p>Currently, copying literally means overwriting what is in the target, but I can see the usefulness of doing more like a merge.  For lists however, you'll always have the problem of deciding whether you want to replace or append, and depending on your use case you'll want one or the other.  We could enable the other behaviour by introducing a MergeInto() or somesuch.  That operation will almost surely need be controlled by Annotations on the elements to have finegrained control over what to do with lists.</p>",
        "id": 154016891,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1541711127
    },
    {
        "content": "<p>If Copyto meant overwriting, why do the properties have a null check before copying? <br>\nDifferent behavior  for list and non-list properties is what stumbled me.<br>\nList properties will never be null and the check for null during CopyTo is misleading</p>\n<p>Btb, I think \"merge\" was a strong word. I was trying something simpler(kind of overwriting).<br>\nI had a template instance with some desired properties(say X) which I copy to a target instance which had other properties(say Y) set. Now If Y was of type list, the CopyTo operation will clear Y.</p>",
        "id": 154017055,
        "sender_full_name": "Jeffy Mathew Jose",
        "timestamp": 1541747520
    },
    {
        "content": "<p>Hmm, interesting observation. Current implementations of <code>CopyTo</code> only copy non-empty values to the target, i.e. remaining any target property values remain untouched. This seems more of a \"merge\" operation, whereas copy implies to me that the final target will be exactly equal to source - which isn't the case right now. Maybe we should remove the null checks alltogether and ensure that <code>target.IsExactly(source)</code> after a <code>CopyTo</code> operation?</p>",
        "id": 154017096,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1541757670
    },
    {
        "content": "<p>It is, provided it was empty to start ;)</p>",
        "id": 154017419,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541893527
    },
    {
        "content": "<p>...which is true only when used by DeepCopy. Was the \"CopyTo\" operation meant to be private/internal helper function?</p>",
        "id": 154017591,
        "sender_full_name": "Jeffy Mathew Jose",
        "timestamp": 1542021265
    },
    {
        "content": "<p>I guess.  I created it, but that's years ago when I was still a virgin API developer ;-)   Now, what do we do with it?  [Obsolete] it and think about stuff we'd really want it to do?</p>",
        "id": 154019589,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1542642061
    }
]