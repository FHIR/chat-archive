[
    {
        "content": "<p>There is a WebApi project in the fhir-net-api repository. Is this supposed to be used as a template for my own  server WebApi? Or is this some classes that I can use?<br>\nAlso this project is on STU3. Is there plan to upgrade to R4?</p>",
        "id": 154016772,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1541697375
    },
    {
        "content": "<p>At some point yes. I'm likely to. I've this to another repo too.</p>",
        "id": 154016862,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541708092
    },
    {
        "content": "<p>There is a filesystem server project as an example to demo it.</p>",
        "id": 154016863,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541708128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> Which repo has that demo project?</p>",
        "id": 154016872,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1541709766
    },
    {
        "content": "<p><a href=\"https://github.com/ewoutkramer/fhir-net-api/tree/develop-stu3/src/Hl7.DemoFileSystemFhirServer\" target=\"_blank\" title=\"https://github.com/ewoutkramer/fhir-net-api/tree/develop-stu3/src/Hl7.DemoFileSystemFhirServer\">https://github.com/ewoutkramer/fhir-net-api/tree/develop-stu3/src/Hl7.DemoFileSystemFhirServer</a></p>",
        "id": 154016878,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1541710176
    },
    {
        "content": "<p>Those that were looking at using this project, it's now moved repo's and will be deleted from the core repo soon-ish.<br>\n<a href=\"https://github.com/brianpos/fhir-net-web-api\" target=\"_blank\" title=\"https://github.com/brianpos/fhir-net-web-api\">https://github.com/brianpos/fhir-net-web-api</a></p>\n<p>There is support for Owin(net 4.7+) and also AspNetCore with essentially the same model you can use between them - to make porting between the facade's easier in the future.</p>",
        "id": 161110286,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1552956319
    },
    {
        "content": "<p>Yes this is just STU3 for now, but getting the structures right, then planning to update to R4.</p>",
        "id": 161110293,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1552956346
    },
    {
        "content": "<p>While making headers available to the model for processing behind the fa√ßade, does anyone have opinions if ALL headers in the request should come through, or should some be filtered?<br>\n<span class=\"user-mention\" data-user-id=\"195936\">@Xander H.</span> <span class=\"user-mention\" data-user-id=\"192710\">@Kenneth Myhra</span><br>\n(currently all will come through)</p>",
        "id": 161118098,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1552967070
    },
    {
        "content": "<p>Also, should we remove the x_api_key and x_correlationId from the modelBaseInputs class as they are in the headers collection already (included to leave in there, but maybe filter from the headers collection?)</p>",
        "id": 161118651,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1552967790
    },
    {
        "content": "<p>Not seeing any obvious reasons except maybe (local) security reasons to filter out HTTP headers, so I would have let all go through.</p>\n<p>I would vote for removing them if they already are in the Headers collection, they seem implementation specific and not something you would want to expose in a framework.</p>",
        "id": 161126532,
        "sender_full_name": "Kenneth Myhra",
        "timestamp": 1552979651
    },
    {
        "content": "<p>I think you're right about the xapikey, but the correlation header, it does do some specific extra work.</p>",
        "id": 161126642,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1552979838
    },
    {
        "content": "<p>Yep, could maybe be nice to have it easily accessible. Btw this led me down a rabbit hole and I ended up here: <a href=\"http://build.fhir.org/http.html#custom\" target=\"_blank\" title=\"http://build.fhir.org/http.html#custom\">http://build.fhir.org/http.html#custom</a>. Server could set X-Request-Id on response and if the client assigned an X-Request-Id on the request this should be echoed back in X-Correlation-Id.</p>",
        "id": 161130033,
        "sender_full_name": "Kenneth Myhra",
        "timestamp": 1552983746
    },
    {
        "content": "<p>That's the stuff. Note that the x requestId isn't the correlation Id, and a good idea to allocate another x-request on the way out. I'll do that too.</p>",
        "id": 161132580,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1552986567
    },
    {
        "content": "<p>I've also pushed a develop-r4 branch in there too (only updated assemblies, haven't updated anything beyond that)<br>\nAnd there is 1 unit test failing - not sure if this is the webapi.aspnetcore project, or the notcore FHIR client<br>\n<span class=\"user-mention\" data-user-id=\"191757\">@Christiaan Knaap</span> have you tried to call any system level custom operations with the R4 1.2 notcore fhir client? (against your netcore server)</p>",
        "id": 161137320,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1552991023
    },
    {
        "content": "<p>No I haven't</p>",
        "id": 161165094,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1553012321
    }
]