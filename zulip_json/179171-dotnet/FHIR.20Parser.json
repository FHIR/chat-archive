[
    {
        "content": "<p>I recently ran into an issue with the .NET parser which I thought I would mention as I think it may be an issue.</p>\n<p>Recently I was using the  .NET API to access an API  as a means of testing it. The API has a JSON interface which contained the following snippet<br>\n<a href=\"/user_uploads/10155/uxG4F0WVV6jukcoHl9aoJmcO/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/uxG4F0WVV6jukcoHl9aoJmcO/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/uxG4F0WVV6jukcoHl9aoJmcO/pasted_image.png\"></a></div><p>This is wrong as it should have been <br>\n<a href=\"/user_uploads/10155/uZK-8WadB1MZJLSUFVlyjvcd/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/uZK-8WadB1MZJLSUFVlyjvcd/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/uZK-8WadB1MZJLSUFVlyjvcd/pasted_image.png\"></a></div><p>The .NET parser did not throw any errors and compensated for the missing \"[\",\"]\". I am assuming this is unintentional behaviour as technically the JSON is incorrect.</p>\n<p>So two questions -<br>\n1) The JSON in the first snippet is incorrect?<br>\n2) Should the parser silently mask the issue?</p>",
        "id": 154022918,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1543957790
    },
    {
        "content": "<p>Hi RIchard - it's indeed the case that the .NET parser ignores a missing array, treating it as an array with a single element. The new non-POCO parsers in 1.0 will catch it, but the POCO-parser still has the problem. The upcoming 1.1 release will have this fixed. It's related to this issue: <a href=\"https://github.com/ewoutkramer/fhir-net-api/issues/756\" target=\"_blank\" title=\"https://github.com/ewoutkramer/fhir-net-api/issues/756\">https://github.com/ewoutkramer/fhir-net-api/issues/756</a>.</p>",
        "id": 154022922,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1543958027
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span>  for confirming this. Good to hear it is been looked at for a future release. For now, we have a bit of an issue in that some of our testing was based on .NET and we did not catch the issue. People using non .NET parsers are now facing issues. Looks like we'll need to switch parts of our toolset to Java for now.</p>",
        "id": 154022925,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1543958233
    },
    {
        "content": "<p>Richard - the release will actually be before christmas - don't know if that helps. We could look at a hotfix if that solves your problem.</p>",
        "id": 154022927,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1543958322
    },
    {
        "content": "<p>Once again thanks <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> If it's that close then we can probably wait for the release. The changes in the API are having a few issues in other places which I am also working with (note the previous FHIRPath question). The issue is with me to fix the code but I'm struggling in places. Guess I'll be busy over Christmas :-)</p>",
        "id": 154022933,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1543959093
    },
    {
        "content": "<p>Could also throw in json validation on export as well, no?</p>",
        "id": 154022952,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1543960457
    },
    {
        "content": "<p>Yes, you could. In fact - you could invoke all structural (non-profile) validation logic by parsing xml/json through the typed parses, and then reading all of it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">var</span> <span class=\"n\">tpJson</span> <span class=\"p\">=</span> <span class=\"n\">File</span><span class=\"p\">.</span><span class=\"n\">ReadAllText</span><span class=\"p\">(</span><span class=\"s\">@&quot;testdata.json&quot;</span><span class=\"p\">);</span>\n<span class=\"kt\">var</span> <span class=\"n\">tree</span> <span class=\"p\">=</span> <span class=\"n\">FhirJsonNode</span><span class=\"p\">.</span><span class=\"n\">Parse</span><span class=\"p\">(</span><span class=\"n\">tpJson</span><span class=\"p\">).</span><span class=\"n\">ToTypedElement</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">PocoStructureDefinitionSummaryProvider</span><span class=\"p\">());</span>\n<span class=\"kt\">var</span> <span class=\"n\">errors</span> <span class=\"p\">=</span> <span class=\"n\">tree</span><span class=\"p\">.</span><span class=\"n\">VisitAndCatch</span><span class=\"p\">();</span>\n</pre></div>",
        "id": 154022957,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1543960876
    },
    {
        "content": "<p><a href=\"http://docs.simplifier.net/fhirnetapi/parsing.html\" target=\"_blank\" title=\"http://docs.simplifier.net/fhirnetapi/parsing.html\">http://docs.simplifier.net/fhirnetapi/parsing.html</a> has more details on what's happening here. This is basically the lower-level functionality that the POCO parsers call.</p>",
        "id": 154022961,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1543960986
    },
    {
        "content": "<p>So, on export, you could run this bit on your generated json.  Luckily the POCO serializers will generate correct json ;-)</p>",
        "id": 154022962,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1543961056
    }
]