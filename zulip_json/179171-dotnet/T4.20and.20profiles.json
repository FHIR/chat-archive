[
    {
        "content": "<p>Hey all :) <br>\nWe're trying to mentally bridge the gap between pocos(models) and structure definitions.</p>\n<p>As such we are using Forge to create/edit profiles and then using the .net r4 codebase and the T4 template in there to generate pocos.<br>\nI'd like to think that there would be some way to transform the differentials created by forge to a format that is somewhat like what the .net build pulls from <a href=\"http://build.fhir.org\" target=\"_blank\" title=\"http://build.fhir.org\">build.fhir.org</a>.</p>\n<p>If anyone has any insight into that process, it'd be awesome to have a talk :)</p>\n<p>Oh, btw, we are implementing the Norwegian profiles as they are modified and created.</p>",
        "id": 166807438,
        "sender_full_name": "Kim Ruben Vatnehagen",
        "timestamp": 1559131129
    },
    {
        "content": "<p>Don't generate different classes for the profile, the standard classes support any profile (and they are those that clients are already using)</p>",
        "id": 166810473,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1559133778
    },
    {
        "content": "<p>As Michele says, you would use the POCOs as they are in the .net API. If you haven't already done so take a look at the docs for the .net API on simplifier: <a href=\"http://docs.simplifier.net/fhirnetapi/index.html\" target=\"_blank\" title=\"http://docs.simplifier.net/fhirnetapi/index.html\">http://docs.simplifier.net/fhirnetapi/index.html</a></p>\n<p>If you want validation you will do that based on the StructureDefinitions. Take a look at the validation tests in the library: <a href=\"https://github.com/FirelyTeam/fhir-net-api/tree/develop-stu3/src/Hl7.Fhir.Specification.Tests/Validation\" target=\"_blank\" title=\"https://github.com/FirelyTeam/fhir-net-api/tree/develop-stu3/src/Hl7.Fhir.Specification.Tests/Validation\">https://github.com/FirelyTeam/fhir-net-api/tree/develop-stu3/src/Hl7.Fhir.Specification.Tests/Validation</a>.</p>",
        "id": 166810831,
        "sender_full_name": "Kenneth Myhra",
        "timestamp": 1559134108
    },
    {
        "content": "<p>One thing I've considered was to do something like this to create wrapper classes, or extension methods to provide convenient access to the POCOs that already support the profiled content.<br>\nTo then get compiler warnings etc.</p>",
        "id": 166855972,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1559163187
    },
    {
        "content": "<p>The reason not wanting to change the base type is that a single resource could conform to multiple profiles, and never really know which you want to work with ahead of time when you're parsing the content into a POCO.</p>",
        "id": 166856022,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1559163231
    }
]