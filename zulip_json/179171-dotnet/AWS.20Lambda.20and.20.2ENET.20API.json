[
    {
        "content": "<p>Currently, AWS only allows for a maximum NETStandard.Library of 1.6.0. The NuGet has this built using version 1.6.1 which means you can not use the .NET libraries on AWS.</p>\n<p>Does anyone know whether the .NET API actually needs to target that version of NETStandard.Library?</p>",
        "id": 153930423,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1516750343
    },
    {
        "content": "<p>I don't know the answer to that one. Does amazon have any timelines on newer support?</p>",
        "id": 153930429,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1516752787
    },
    {
        "content": "<p>(You could also build locally with that config and try the unit tests to see if its still cooking)</p>",
        "id": 153930430,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1516752809
    },
    {
        "content": "<p>Does this offer any answers?   <a href=\"https://awsinsider.net/articles/2018/01/17/lambda-net-core.aspx\" target=\"_blank\" title=\"https://awsinsider.net/articles/2018/01/17/lambda-net-core.aspx\">https://awsinsider.net/articles/2018/01/17/lambda-net-core.aspx</a></p>",
        "id": 153930437,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1516763737
    },
    {
        "content": "<p>Thank <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span>  and <span class=\"user-mention\" data-user-id=\"191364\">@Peter Jordan</span>  - I think I will need to try and do a build myself at some point. It does look like AWS now supports  .NET Core 2 but it does not look like the NuGet does (yet).</p>",
        "id": 153930537,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1516831025
    },
    {
        "content": "<p>It should do, you need to create your project that uses it as netcore 2 first though. Haven't tried myself. Maybe we can take a look sat morn in New Orleans</p>",
        "id": 153930724,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1516907345
    },
    {
        "content": "<p>I had a look - it's beyond my  .NET skills</p>",
        "id": 153930818,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1516975520
    },
    {
        "content": "<p>Hi Richard, I actually build the .NET API against .NET Standard 1.0 and .NET Standard 1.3 - as far as I can see I have no dependency on anything higher than that - could this be caused by another external dependency?</p>",
        "id": 153932210,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1517170256
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> thanks for responding. The issue seems to be that AWS Lambda only supports up to V1.6.0 of the NETStandardLibrary but the build required V1.6.1 or above. AWS jumps to v2 of .NETStandard after v1.6.0 - as far as I can see the .NET API is not available (as  a NuGet) at v2 yet.</p>",
        "id": 153932745,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1517215529
    },
    {
        "content": "<p>OK tried again and all seems fine now, as per <span class=\"user-mention\" data-user-id=\"191364\">@Peter Jordan</span>  comment - AWS now support  .NET Core 2.0 for their Lambda service. So now have Alexa skills using FHIR courtesy of the  .NET API.</p>",
        "id": 153938340,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1518889056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191362\">@Richard Kavanagh</span>  hi are you single instance of fhir client for every request in your application. actually I am facing memory issue with document of 70 MB.</p>",
        "id": 153952448,
        "sender_full_name": "Somnath",
        "timestamp": 1523867650
    },
    {
        "content": "<p>Is that just trying to process a single resource that is 70MB in size?<br>\nrepeatedly?<br>\nDo you have a URL that we can test/profile against?<br>\nThere are performance differences in using the streaming serializers vs the string read/write.</p>",
        "id": 153952769,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1524004043
    }
]