[
    {
        "content": "<p>How to get all the resources where one resource is referred, using FHIR Net Api? let's say get all the resources where Patient resource exist as the subject for example Observation and Condition?</p>\n<p>Is there anything in FHIR Net Api to address this? like we have all the search parameters in modelinfo</p>\n<p>if not, then anyone has done any workaround to achieve this kindly share then.</p>",
        "id": 161835282,
        "sender_full_name": "Muhammad Abubakar Ikram",
        "timestamp": 1553671650
    },
    {
        "content": "<p>You have to search each resource: .eg ../Observation?patient=xxx gives you all the observation referencing that patient and so on</p>",
        "id": 161855540,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1553691064
    },
    {
        "content": "<p>In the specific case of patients there is the $everything operation that does that in one go</p>",
        "id": 161855583,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1553691109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span> No no, I am asking in the context of C# code, the FHIR Net API. Not in the context of FHIR search.</p>",
        "id": 161929942,
        "sender_full_name": "Muhammad Abubakar Ikram",
        "timestamp": 1553758365
    },
    {
        "content": "<blockquote>\n<p>How to get all the resources where one resource is referred, using FHIR Net Api? let's say get all the resources where Patient resource exist as the subject for example Observation and Condition?</p>\n<p>Is there anything in FHIR Net Api to address this? like we have all the search parameters in modelinfo</p>\n<p>if not, then anyone has done any workaround to achieve this kindly share then.</p>\n</blockquote>\n<p>Easiest is to load the structuredefinition of the standard, that contain all the data about the models.   Then go over all the elements in the StructureDefinitions and filter where the typeref.code is \"Reference\".   All structuredefinitions are shipped with the .NET   Hl7.Fhir.Specification library, so you could load them from there:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"na\">  [TestMethod]</span>\n        <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">bla</span><span class=\"p\">()</span>\n        <span class=\"p\">{</span>\n            <span class=\"c1\">// src gives access to all definitions in the specification.zip</span>\n            <span class=\"kt\">var</span> <span class=\"n\">src</span> <span class=\"p\">=</span> <span class=\"n\">ZipSource</span><span class=\"p\">.</span><span class=\"n\">CreateValidationSource</span><span class=\"p\">();</span>\n\n            <span class=\"c1\">// Retrieve all canonical ids for the structure definitions</span>\n            <span class=\"kt\">var</span> <span class=\"n\">allCanonicals</span> <span class=\"p\">=</span> <span class=\"n\">src</span><span class=\"p\">.</span><span class=\"n\">ListResourceUris</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">.</span><span class=\"n\">ResourceType</span><span class=\"p\">.</span><span class=\"n\">StructureDefinition</span><span class=\"p\">);</span>\n\n            <span class=\"kt\">var</span> <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">ElementDefinition</span><span class=\"p\">&gt;();</span>\n            <span class=\"c1\">// For each structuredefinition, find the relevant elements</span>\n            <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">canonical</span> <span class=\"k\">in</span> <span class=\"n\">allCanonicals</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"kt\">var</span> <span class=\"n\">sd</span> <span class=\"p\">=</span> <span class=\"p\">(</span><span class=\"n\">StructureDefinition</span><span class=\"p\">)</span><span class=\"n\">src</span><span class=\"p\">.</span><span class=\"n\">ResolveByUri</span><span class=\"p\">(</span><span class=\"n\">canonical</span><span class=\"p\">);</span>\n                <span class=\"k\">if</span> <span class=\"p\">(!</span><span class=\"n\">sd</span><span class=\"p\">.</span><span class=\"n\">HasSnapshot</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">NotSupportedException</span><span class=\"p\">(</span><span class=\"s\">&quot;Oops, really need snapshots&quot;</span><span class=\"p\">);</span>\n\n                <span class=\"kt\">var</span> <span class=\"n\">elems</span> <span class=\"p\">=</span> <span class=\"n\">sd</span><span class=\"p\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">.</span><span class=\"n\">Element</span><span class=\"p\">.</span><span class=\"n\">Where</span><span class=\"p\">(</span><span class=\"n\">e</span> <span class=\"p\">=&gt;</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">Type</span><span class=\"p\">.</span><span class=\"n\">Any</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">=&gt;</span> <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">Code</span> <span class=\"p\">==</span> <span class=\"s\">&quot;Reference&quot;</span><span class=\"p\">));</span>\n                <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">AddRange</span><span class=\"p\">(</span><span class=\"n\">elems</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">el</span> <span class=\"k\">in</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n                <span class=\"n\">Debug</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"s\">&quot;{el.Path}&quot;</span><span class=\"p\">);</span>\n\n        <span class=\"p\">}</span>\n</pre></div>",
        "id": 162233224,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1554121485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> Thank you so much. I'll surely look into this.</p>",
        "id": 164072645,
        "sender_full_name": "Muhammad Abubakar Ikram",
        "timestamp": 1556105734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span>  Can I also get the maturity level of a resource from the specification file?</p>",
        "id": 181297491,
        "sender_full_name": "Muhammad Abubakar Ikram",
        "timestamp": 1574337662
    },
    {
        "content": "<p>There is an extension in the SD, don't recall if we strip it out.</p>",
        "id": 181591818,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1574375890
    },
    {
        "content": "<p>It is not stripped out, and it is in the root extension element, the extension with url '<a href=\"http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm\" target=\"_blank\" title=\"http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm\">http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm</a>'.</p>",
        "id": 181911407,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1574767069
    }
]