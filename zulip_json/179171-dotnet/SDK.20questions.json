[
    {
        "content": "<p>10:08 AM</p>\n<p>I'm populating SDK classes in C# seemingly the way I expect - - I can see what I am putting into Atlas, but there are some questions. I can't set the humanname.nameuse value to a string so I can test what it is. How do you do that i.e. I have a string that I want to check a nameuse value against? I set value properties but .net puts those in and adds objectvalues. Is there a way to disable that? I put Identifier values in a list but the document result in Mongodb doesn't have them. Is that a .net problem or a Mongo problem because I can see them in the C# class? Sorry to ask such simple questions but search didn't locate anything.</p>",
        "id": 269156422,
        "sender_full_name": "Dennis Brox",
        "timestamp": 1643052013
    },
    {
        "content": "<p>Hi Dennis,</p>\n<p>The SDK uses enums for values that are bound strictly to a set.  This is a convenience when populating to ensure that the value is from the allowed set (e.g., <code>HumanName.Use</code> is bound strictly to <code>HumanName.NameUse</code>).</p>\n<p>If you are converting to or from an enum, the class <code>Hl7.Fhir.Utility.EnumUtility</code> has functions to translate.  For example: <code>Hl7.Fhir.Utility.EnumUtility.ParseLiteral&lt;HumanName.NameUse&gt;(\"usual\")</code> will return the enum value<code>HumanName.NameUse.Usual</code>.  Make sure to trap errors if you are using unvalidated values.</p>\n<p>If you are just checking a value, you can also validate the string of the <code>UseElement</code>.  For example:</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">Name</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">].</span><span class=\"n\">Use</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Hl7</span><span class=\"p\">.</span><span class=\"n\">Fhir</span><span class=\"p\">.</span><span class=\"n\">Utility</span><span class=\"p\">.</span><span class=\"n\">EnumUtility</span><span class=\"p\">.</span><span class=\"n\">ParseLiteral</span><span class=\"p\">&lt;</span><span class=\"n\">HumanName</span><span class=\"p\">.</span><span class=\"n\">NameUse</span><span class=\"p\">&gt;(</span><span class=\"s\">\"usual\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">Name</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">].</span><span class=\"n\">UseElement</span><span class=\"p\">.</span><span class=\"n\">ToString</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">==</span><span class=\"w\"> </span><span class=\"s\">\"usual\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">\"Name UseElement is usual\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>works fine.</p>\n<p>It is probably 'better' to use the enum conversion utility to check, but I have not done any performance testing, etc.</p>\n<p>If you are trying to use the objects directly (e.g., via an ORM), I am guessing there is some custom work to do.  Right now, the internal models have a lot of utility that prevents direct usage in a lot of contexts (e.g., you cannot just serialize/parse them generically).  There is work underway which <em>should</em> help this, and I'll make a note to figure out if it <em>actually</em> does.</p>",
        "id": 269162328,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1643053522
    },
    {
        "content": "<p>There is also a .GetLiteral() extension method that you should use in place of ToString as there are a few cases where the code isn't a valid dotnet literal and it thus encoded. Subtle, but easy to trip over.</p>",
        "id": 269183149,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1643064122
    }
]