[
    {
        "content": "<p>Using the existing libraries is it possible to serialise any POCO (that uses FHIR datatypes) or just the supplier resource POCOs?</p>\n<p>We are looking at some use cases where we might want to have some internal structures derived from the FHIR resources and may want to convert them to/from JSON. </p>\n<p>Externally we'd still use the full-blown FHIR Resources</p>",
        "id": 179938954,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1572965405
    },
    {
        "content": "<p>As long as your classes are built (nested, named, and annotated), any JSON serializer will work.  For Newtonsoft, you'll want to use a <code>CamelCasePropertyNamesContractResolver</code> and set <code>NullValueHandling</code> to <code>NullValueHandling.Ignore</code>.  The largest problem I ran into is that you can't mix the two (things done in Firely need to be serialized in Firely, things not in Firely cannot be serialized in Firely).</p>\n<p>I ended up writing a basic <a href=\"https://github.com/microsoft-healthcare-madison/generate-fhir-prototype-bindings\" target=\"_blank\" title=\"https://github.com/microsoft-healthcare-madison/generate-fhir-prototype-bindings\">prototyping language generator</a> to spit out what I needed.  One of the projects using it is <a href=\"https://github.com/microsoft-healthcare-madison/argonaut-subscription-server-proxy\" target=\"_blank\" title=\"https://github.com/microsoft-healthcare-madison/argonaut-subscription-server-proxy\">here</a> - it's a server proxy for R5 subscriptions which uses the Firely API for all the R4 work and generated classes for the rest.</p>\n<p>Note that the classes it generates are basic - they don't have all the nice validation and quality of life things the standard library have.  I meant it for use primarily in prototyping and as a base for things like you are talking about.</p>",
        "id": 179941482,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1572967068
    },
    {
        "content": "<p>It might work if you add all the attributes needed for serialization as they are present on normal POCO's.<br>\nAnd then you may need to add your classes to ModelInfo.FhirTypeToCsType and maybe other lists / mappings in ModelInfo.<br>\nBut to be sure you'd have to try. You may also run into internal classes or properties that prevent this.</p>",
        "id": 180017134,
        "sender_full_name": "Christiaan Knaap",
        "timestamp": 1573034559
    }
]