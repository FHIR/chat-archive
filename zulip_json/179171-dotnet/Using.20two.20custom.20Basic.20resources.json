[
    {
        "content": "<p>We have two custom resources that both inherits from the Basic resource. But how do we call these resources using the dotnet client? I tried to set up our server (Hapi) with two resource providers listening on /MyResource1 and /MyResource2, which works good.<br>\nThe dotnet client app has a custom class inheriting from Basic that I intended to use. But that did not work since the parser in the dotnet library could not find a correct ClassMapper.<br>\nHas anyone had this problem and can share some tips?</p>",
        "id": 216892482,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1605543037
    },
    {
        "content": "<p>Basic is not a derivation for customization, it's always that class and you add extensions to it.<br>\n<a href=\"https://brianpos.com/2018/05/03/code-generation-fhir-custom-resources/\">https://brianpos.com/2018/05/03/code-generation-fhir-custom-resources/</a><br>\n/MyResource1 and /MyResource2 are not fhir standard resources,  however /Basic is a standard FHIR resource, and the code property is how you split between multiple different \"types\" of basic resource, but they are all at the same .Basic endpoint</p>",
        "id": 216895051,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1605544006
    },
    {
        "content": "<p>Ah, didn't know that 'code' is what you should use for that.  Great :).<br>\n Thanks Brian!</p>",
        "id": 216972049,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1605597063
    },
    {
        "content": "<p>Hmmm... a question... how do you do a read on those particular resourses then? /Basic/&lt;id&gt; could be either  MyResource1 or MyResource2.</p>",
        "id": 216973662,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1605598999
    },
    {
        "content": "<p>'code' is a search parameter, so that's one option if you're not sure about the &lt;id&gt;. If you already have the &lt;id&gt; then a GET /Basic/&lt;id&gt; will return your resource, regardless of the value of its code data element</p>",
        "id": 216975285,
        "sender_full_name": "Ren√© Spronk",
        "timestamp": 1605600602
    },
    {
        "content": "<p>If the server receives an &lt;Id&gt; in this case, then it wont know if it's the &lt;Id&gt; of the underlying resources 'MyResource1' or 'MyResource2'. <br>\nWhat is best practise in this scenario? To use a custom request header specifying what resource intended? Or using the endpoint as this: /Basic/&lt;Id&gt;/MyResource1.</p>",
        "id": 216976450,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1605601568
    },
    {
        "content": "<p>The fhir seriizer can always handle the Basic resource, as all the extras are there through the standard extensibility.</p>",
        "id": 216983284,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1605606661
    },
    {
        "content": "<p>No need for a special handler.</p>",
        "id": 216983317,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1605606684
    },
    {
        "content": "<p>But if you have a Read operation, and a number of different resources encapsulated in  Basic (different profiles/underlying resources), is there any mechanism to tell which profile to read?</p>",
        "id": 216985401,
        "sender_full_name": "Stefan Lindstrom",
        "timestamp": 1605608126
    },
    {
        "content": "<p>If you do a Read of a Basic resource, after getting the response your code path can split on the Basic.code field.</p>",
        "id": 216987799,
        "sender_full_name": "Mirjam Baltus",
        "timestamp": 1605609874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191347\">Mirjam Baltus</span> <a href=\"#narrow/stream/179171-dotnet/topic/Using.20two.20custom.20Basic.20resou/near/216987799\">said</a>:</p>\n<blockquote>\n<p>If you do a Read of a Basic resource, after getting the response your code path can split on the Basic.code field.</p>\n</blockquote>\n<p>Hi Mirjam</p>\n<p>Thanks for your response. </p>\n<p>My problem is that the project I am working on is not a pure FHIR-project, rather it is to add a FHIR layer as external access technology for an old, existing system. And that system  makes it difficult to read the different underlying resources . I nstead we must  know what to read and map so to speak. </p>\n<p>There's  some ideas how to get around that problem that does not involve creating new endpoints, but I thought to explore if there was some existing support for this. So I guess a custom solution that does not violates the standard is what we'll have tp implement. :)</p>",
        "id": 216988625,
        "sender_full_name": "Stefan Lindstrom",
        "timestamp": 1605610451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"241617\">@Stefan Lindstrom</span> Thanks for the explanation. I was thinking client side, not server side. :) In order to stay FHIR compliant, you could perhaps choose not to support Read interactions on Basic, but only searches that search on code field/id combination. Or you could keep a list of id/profile server side, so you can use that to reach out to the correct part of the existing system.</p>",
        "id": 216989285,
        "sender_full_name": "Mirjam Baltus",
        "timestamp": 1605610986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191347\">Mirjam Baltus</span> <a href=\"#narrow/stream/179171-dotnet/topic/Using.20two.20custom.20Basic.20resou/near/216989285\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"241617\">Stefan Lindstrom</span> Thanks for the explanation. I was thinking client side, not server side. :) In order to stay FHIR compliant, you could perhaps choose not to support Read interactions on Basic, but only searches that search on code field/id combination. Or you could keep a list of id/profile server side, so you can use that to reach out to the correct part of the existing system.</p>\n</blockquote>\n<p>Yes, it's something along those lines we've been thinking (and some others). Thanks for the replies and ideas.</p>",
        "id": 216989739,
        "sender_full_name": "Stefan Lindstrom",
        "timestamp": 1605611317
    },
    {
        "content": "<p>I think we might reach out to the hapi stream, to see if anyone has any tips on this scenario, since the question might be more server-related than client related. For info, we did try calling our custom /MyResource endpoint with the hapi client and that actually worked. But it didn't work using the .net library unfortunately.</p>",
        "id": 216994976,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1605615243
    },
    {
        "content": "<p>You might also choose to have your id's (since they sound like they will be facaded too) have a prefix in them, eg id=\"R1-1234\" and \"R2-1234\" and the ID contains the non fhir resource type.<br>\nBut you'd still need to do what Mirjam suggests in terms of  search, requiring the code to be there too.<br>\nDo note that you only have limitted char count (64) available in the id property.</p>",
        "id": 216995991,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1605616064
    },
    {
        "content": "<p>Unfortunately the Id's are UUID's and not facaded. So we have no power over them.<br>\nOne solution, even though it might be a little bit special, would be to disallow READ and use SEARCH on the /Basic endpoint instead. In that case the server can receive an Id _and_ a code (or type).  The client must then be made aware of this, and expect a Bundle as output.</p>",
        "id": 217001604,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1605619644
    },
    {
        "content": "<blockquote>\n<p>Unfortunately the Id's are UUID's and not facaded.</p>\n</blockquote>\n<p>This sound strange to me, they are resources you implemented, surely you should be able to control how their ids are generated and used (?)</p>",
        "id": 217007549,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1605622761
    },
    {
        "content": "<p>Sorry to say that we don't. Our layer (the fhir server layer) is just one of many consumers of the  internal services (new and old).</p>",
        "id": 217018155,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1605627261
    },
    {
        "content": "<p>So the FHIR server layer receives <code>GET [base]/Basic/R1-[guid]</code>, sees the R1 prefix, strips it and go get the data for the <code>[guid]</code> resource 1 from the internal services, and when creating the FHIR resource appends the <code>R1-</code> prefix to the internal GUID to create the FHIR id  ?</p>",
        "id": 217028064,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1605631184
    },
    {
        "content": "<p>This is exactly what I've done on 2 projects.<br>\nOne of them was splitting Observations types from different sql tables.</p>",
        "id": 217032452,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1605633057
    },
    {
        "content": "<p>It could be a valid solution.... Hmmm...<br>\nWe have other consumers (for example a web app), besides our fhir server, that are using the underlying resources and their Id's. If the Id's get exposed to the end client from the other consumers, we would then be in a position where we would expose the same resource but with different Id's depending on which application you are using.</p>",
        "id": 217122012,
        "sender_full_name": "Johan Nicklasson",
        "timestamp": 1605698430
    }
]