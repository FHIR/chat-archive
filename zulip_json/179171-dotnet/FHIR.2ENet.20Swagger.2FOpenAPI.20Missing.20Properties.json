[
    {
        "content": "<p>Hey guys,</p>\n<p>im using Swagger for my endpoint tests and figured out, that some objects from the Fhir Models lost some properties.<br>\n<a href=\"/user_uploads/10155/BCDEaEJ0aSRHg5323_X-Ac_4/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/BCDEaEJ0aSRHg5323_X-Ac_4/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/BCDEaEJ0aSRHg5323_X-Ac_4/image.png\"></a></div><p>inside the Fhir.Model in my Backend i can clearly see the family (string) and given (string array) property<br>\nis it intended to be hidden from the OpenApi Definition?</p>",
        "id": 259197846,
        "sender_full_name": "Lars Ewert",
        "timestamp": 1635316205
    },
    {
        "content": "<p>I don't think that swagger would be able to interpret the fhir object models from the c# classes. As there are some subtle differences between the json and xml formats.<br>\nOr do you mean that you're using the fhir swagger definition from the spec ?</p>",
        "id": 259308063,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1635369505
    },
    {
        "content": "<p>The json schema generated by swashbuckle/MS OpenApi library for the FHIR C# types are not valid FHIR json. You would need to write code to build the OpenApiSchema based on those types. The default OpenApiSchema generator builds it based on the public properties of the type, which in the C# library contains the backing Element properties.</p>",
        "id": 259344922,
        "sender_full_name": "Donn Relacion",
        "timestamp": 1635402050
    },
    {
        "content": "<p>The core fhir spec also has a pre generated open api definition, but many tools can't handle its scale and self referencing objects.</p>",
        "id": 259360270,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1635412399
    },
    {
        "content": "<p>Well in general Swagger can interpret the Fhir models. But heres exactly what i mean:<br>\n<a href=\"/user_uploads/10155/FTZ_8M9qCvoEHhrcFqM40wX-/image.png\">image.png</a><br>\ninside the Fhir.Model HumanName exists a \"public string Family\" aswell as the \"public FhirString FamilyElement\" but inside Swagger (the screenshot from 1st post) i can only see the \"FamilyElement\" of type FhirString with its Properties inside. As you can see a simple string is not covered here.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/FTZ_8M9qCvoEHhrcFqM40wX-/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/FTZ_8M9qCvoEHhrcFqM40wX-/image.png\"></a></div><p>I hope its more exactly what the my problem is.</p>",
        "id": 259442478,
        "sender_full_name": "Lars Ewert",
        "timestamp": 1635450582
    },
    {
        "content": "<p>I'm able to generate the swagger below by adding a custom swashbuckle IDocumentFilter that modifies the generated schemas. If the property type inherits from Hl7.Fhir.Mode.PrimitiveType, I rewrite the property to use the matching json type instead of the Fhir model type (e.g. FhirString is updated to string, Integer to integer, etc.). I also remove any properties that do not contain a FhirElementAttribute, and I use the name in this attribute.</p>\n<p>I don't think it's a fool-proof solution, but it was good enough for our use case. I think using the pregenerated openapi definition should be the way to go, but then you'd have to embed these, and it wont work for custom resources.</p>\n<p><a href=\"/user_uploads/10155/zHLuf5Gs1d4u5Yem4rYT2Lgo/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/zHLuf5Gs1d4u5Yem4rYT2Lgo/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/zHLuf5Gs1d4u5Yem4rYT2Lgo/image.png\"></a></div>",
        "id": 259477917,
        "sender_full_name": "Donn Relacion",
        "timestamp": 1635476807
    },
    {
        "content": "<p>I'm also curious what benefit you're getting for these?<br>\nYou're not going to be generating code from them, the documentation isn't that great, and the objects are really too complicated to be doing much more than simple gets, and for that of you put a HTML formatter in the pipeline, you can do that direct.</p>",
        "id": 259696953,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1635550538
    },
    {
        "content": "<p>Fully understand for custom, as that's not fhir anyway. And no open tools/packages work with them.</p>",
        "id": 259697014,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1635550567
    },
    {
        "content": "<p>Looking at that schema you have there, makes the extensibility harder to see (can't see it at all here) and most uses of fhir use that quite a bit.<br>\nJust looking at patient, us core has many on there, as do most countries for their local properties.</p>",
        "id": 259697165,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1635550733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> i am generating Code from that documentation. I am using NSwag to generate my Frontend services with the respective Models. So if the generated models are wrong. My Frontend doesnt have the information and i have to manualy update these Models.</p>\n<p>Meanwhile i am using the npm package @types/fhir which have more complete models to use. </p>\n<p>But for fhir-extension i have to extend these models in my Frontend for sure.</p>",
        "id": 259723234,
        "sender_full_name": "Lars Ewert",
        "timestamp": 1635589757
    },
    {
        "content": "<p>Yup, the @types/fhir is the good stuff all right. That gives you all the models.<br>\nThere aren't any good generators for the extensions at present for typescript. <span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> is that something you know of some work?</p>",
        "id": 259724699,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1635591831
    },
    {
        "content": "<p>Those typescript classes are generated from the same source that generates the fhir net api models.<br>\nIf you're buding a server I've done a facade layer if you wanted a kick start.</p>",
        "id": 259724854,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1635592000
    },
    {
        "content": "<p>If you want the 'serializable' definitions for C#, the <code>CSharpBasic_R*.cs</code> files should work from <a href=\"https://github.com/microsoft/fhir-codegen/tree/main/generated\">https://github.com/microsoft/fhir-codegen/tree/main/generated</a> .  It looks like I haven't generated all the 'newer' versions (as in the <a href=\"https://github.com/microsoft/fhir-codegen/tree/main/generated/CSBasic2_R4\">CSBasic2_R4</a> folder), but the R4 ones are there in that style.</p>\n<p>The actual project in that repo can also output experimental OpenAPI definitions, but I haven't had much bandwidth to work on them recently.  They should work for documentation, but I do not like the OpenAPI -&gt; Code/Classes story at all.  My biggest issue is that since OpenAPI doesn't know about the SDKs, the generated code that can't be used with them and thus isn't very useful.</p>",
        "id": 259877920,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1635780509
    }
]