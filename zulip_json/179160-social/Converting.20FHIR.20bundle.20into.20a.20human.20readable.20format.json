[
    {
        "content": "<p>How do I convert the huge FHIR data that is in JSON format to a more human readable format like say Excel or csv file? Is there a solution available for this? Please help me out here.</p>",
        "id": 179169597,
        "sender_full_name": "Jay Chitalia",
        "timestamp": 1572180335
    },
    {
        "content": "<p>Excel and CSV aren't significantly more human-readable than JSON.  However, the biggest challenge is that Excel &amp; CSV don't support complex nested structures.  Instead, you have to work to flatten the data somehow - and how you go about doing that depends on the nature of the data and how you want to view it.   For example, Patient addresses can repeat and have complex parts.  Do you want to handle that by adding a separate row for each address part within each address in the \"patient\" tab or do you want to have a separate tab for patient addresses?  How would you want the Patient.contact.address .line rendered?  (where contact, address and line can all repeat)</p>",
        "id": 179172387,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572185011
    },
    {
        "content": "<p>Because the answer depends on \"what am I going to do with it after\" (which is typically to do mapping, in turn driven by what you're mapping to), there isn't a one-size-fits-all algorithm and thus no standard way of doing this in the core spec.  Implementation guides do have an ability to generate both Excels and CSVs, but the standard framework doesn't yet turn this one.  That's for displaying the data models though, not instances.</p>",
        "id": 179172451,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572185117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> Thank you for the reply. I understand that converting it into a Excel or CSV  with flattening the data is dumb. So how would you go about converting it into a human readable format from JSON. What is the best way a human can read the FHIR bundled data?</p>",
        "id": 179205318,
        "sender_full_name": "Jay Chitalia",
        "timestamp": 1572243833
    },
    {
        "content": "<p>Hi. JSON format is actually pretty human-readable. At least more than CSV IMO. <br>\nKnowing what you are trying to dowould help - what is your goal? WHo needs the data in a more human readable format? You mention a huge FHIR data - but is it to show to a physician (why?) or to have a technical person understand better (why not JSON) or is it the large amount of data that is scary...?<br>\nWho is the human that needs more friendly data?<br>\nFHIR is a transport standard, end users typically don't need to see it.</p>",
        "id": 179205617,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1572244351
    },
    {
        "content": "<p>We had something similar to this with FHIR Documents</p>",
        "id": 179226638,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1572266511
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/1es3Eq4fjwwKh2DMI0nyKFSi/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> <br>\nWhat we did was build an app that converted the structured content into a format a non technical user would be familiar with (see the Allergy Intolerance in the image)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/1es3Eq4fjwwKh2DMI0nyKFSi/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/1es3Eq4fjwwKh2DMI0nyKFSi/pasted_image.png\"></a></div>",
        "id": 179226721,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1572266579
    },
    {
        "content": "<p>In theory that would work with any bundle (as long as we had a component to render the resource)</p>",
        "id": 179226740,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1572266611
    },
    {
        "content": "<p>Most, if not all, resources should include a narrative which is intended to be the \"human readable\" view of the human-relevant information in the resource.  The simplest thing to do is to use that.  If you're not receiving narratives for some reason, you can generate your own.  FHIR currently has a fairly 'simple' (i.e. not too elegant or pretty) narrative generator that we use in the specification you could leverage, but it's aimed more at people debugging examples than it is at clinicians.  In theory, IGs will soon start to have Liquid templates that support narrative generation that is tuned to the expectations of those templates, however don't know how far that is in practice.  In any event, converting the resources to XHTML is probably the most appropriate solution - you can use that as narrative if you don't already have one, it handles nested structures better, and it gives you more control over what content looks like.  In deciding what that HTML should look like, you'll need to consult your users.  Different people will have different ideas about what data is 'important' enough to include, as well as what order things should appear in, what the data should look like, etc.</p>",
        "id": 179228377,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572268045
    },
    {
        "content": "<p>I'd have no qualms at all in generating my own XHTML even if there always was text, especially if that original text was 'generated'. The FHIR standard is relatively silent on this (AFAIK), but my requirements for text may be rather different from those of the originator of the resource. If the existing text is 'additional' then we have a problem: should I risk a potential loss of semantics, even though that means that the XHTML snippet won't have the formatting which is desirable for my own context ? Choosing XHTML rather than some intermediate format has advantages, but also clear disadvantages.</p>",
        "id": 179232039,
        "sender_full_name": "Ren√© Spronk",
        "timestamp": 1572270532
    },
    {
        "content": "<p>The only thing to be cautious about is if the original instance includes extensions that you don't recognize.  You're free to display your own HTML, but you should make the original narrative available too</p>",
        "id": 179233663,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572271487
    },
    {
        "content": "<p>If you're interested in formatting the JSON, with indentation to increase readability, etc., you could use jq.<br>\n<a href=\"https://stedolan.github.io/jq/\" target=\"_blank\" title=\"https://stedolan.github.io/jq/\">https://stedolan.github.io/jq/</a></p>",
        "id": 179253417,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1572283054
    },
    {
        "content": "<p>JSON is human-readable for a developer, but not realistically for a clinician or other business user (no matter how prettily you print it)</p>",
        "id": 179254465,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572283724
    },
    {
        "content": "<p>jq is also able to extract specific data elements from the JSON, or act like a JSON query language, or even convert some slice of the JSON data to CSV ... if it makes sense to do those things.</p>",
        "id": 179257920,
        "sender_full_name": "Joel Schneider",
        "timestamp": 1572285758
    },
    {
        "content": "<p>my general feeling is that if you want to present all the data to a human, YAML (which is algorithmically generatable from the json) is the least worst option. But: it's still only good for data centric people and they might as well just look at the json or xml forms.</p>\n<p>Otherwise: the essence of the task is decide what this particular type of human needs to see, and why, and which detail to put in narrative directly and which to hide in mouse overs/more buttons. </p>\n<p>So it's real work to inject value. And then you need some language in which to express that. There's 100s to choose from....</p>",
        "id": 179282549,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572301794
    }
]