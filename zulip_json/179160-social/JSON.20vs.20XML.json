[
    {
        "content": "<p>Is there statistics on the percentage of FHIR data transferred using JSON vs XML?</p>",
        "id": 240374043,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1622055716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> ?</p>",
        "id": 240402183,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1622069777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191506\">@Yunwei Wang</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> interesting question.</p>\n<p>It's hard to really get a fair answer, since HAPI's server answers in JSON by default unless the client expresses that it only wants a specific encoding.</p>\n<p>So with that out of the way, I just did a quick grep of the request/response logs. It's actually kinda crazy just how skewed to JSON it is. Over the length of the most recent non-archived log file:</p>\n<ul>\n<li>Client didn't specify a preference and got JSON: 71307 requests</li>\n<li>Client requested JSON: 18435 requests</li>\n<li>Client requested XML: 95 requests</li>\n<li>Client requested Turtle: 64 requests</li>\n</ul>",
        "id": 240549076,
        "sender_full_name": "James Agnew",
        "timestamp": 1622162093
    },
    {
        "content": "<p>Really, a more fair way to do this would be to only count POST/PUT, since the client is forced to make a choice in that case for what payload type to send. Sadly I don't log the content type there.. I think I'll add that. :)</p>",
        "id": 240549179,
        "sender_full_name": "James Agnew",
        "timestamp": 1622162168
    },
    {
        "content": "<p>those stats make XML look like an accident. I am not surprised.</p>",
        "id": 240586963,
        "sender_full_name": "John Moehrke",
        "timestamp": 1622197913
    },
    {
        "content": "<p>that is surprising.</p>",
        "id": 240587043,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1622197953
    },
    {
        "content": "<p>I wonder if Fire.Ly has skewed the other way?</p>",
        "id": 240587139,
        "sender_full_name": "John Moehrke",
        "timestamp": 1622198040
    },
    {
        "content": "<p>i do not track on my server. maybe I'll start</p>",
        "id": 240587218,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1622198078
    },
    {
        "content": "<p>I am surprised that XML is at the same level as RDF. It would be interesting to see what the format client specifically sent to server.</p>",
        "id": 240597457,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1622205320
    },
    {
        "content": "<p>I've added that logging as of this morning. Will keep everyone posted. I'm pretty curious too :)</p>",
        "id": 240597997,
        "sender_full_name": "James Agnew",
        "timestamp": 1622205615
    },
    {
        "content": "<p>XML is an accident</p>",
        "id": 240600369,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1622206887
    },
    {
        "content": "<p>Historically though XML came before JSON --- and had a lot of traction in the early days of SOAP (WSDL, etc.) and distributed computing models, before the RESTful paradigm started to gain a footing.</p>\n<p>(To me JSON is 'just' another 'wire representation', maybe with fewer characters, but still ...  JSON Schema is a copycat attempt at XML Schema and I believe, it still hasn't caught up to its functionality.   Is there an equivalent to Schematron in JSON?)</p>",
        "id": 240610892,
        "sender_full_name": "John Silva",
        "timestamp": 1622211772
    },
    {
        "content": "<p>yes but it's not widely adopted</p>",
        "id": 240612003,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1622212261
    },
    {
        "content": "<p><a href=\"https://schematron.com/2018/11/schematron-validation-of-json-data/\">https://schematron.com/2018/11/schematron-validation-of-json-data/</a></p>",
        "id": 240612078,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1622212295
    },
    {
        "content": "<p>Good to know it exists.   I guess the question becomes, is anyone using this for FHIR validation yet or do most use the reference Java validator (what to do if your FHIR server isn't Java?).    I remember using JSONschma (from Newtonsoft) for trying to do some FHIR JSON validation and it was 'relatively fragile' if I remember right and, of course can only do syntactic validation. </p>\n<p>[OK, a little off-topic from JSON vs XML but there's a whole ecosystem that had been developed in the XML world; not sure if the JSON world has 'caught up' yet.]</p>",
        "id": 240616852,
        "sender_full_name": "John Silva",
        "timestamp": 1622214262
    },
    {
        "content": "<p>The plot thickens.... Here's the payload type counts for creates/updates since I added the logging about 3 hours ago:</p>",
        "id": 240618175,
        "sender_full_name": "James Agnew",
        "timestamp": 1622214820
    },
    {
        "content": "<p>XML: 37</p>",
        "id": 240618195,
        "sender_full_name": "James Agnew",
        "timestamp": 1622214832
    },
    {
        "content": "<p>JSON: 23<br>\nRDF: 0</p>",
        "id": 240618245,
        "sender_full_name": "James Agnew",
        "timestamp": 1622214843
    },
    {
        "content": "<p>And here's the read/search count where an explicit type was requested:<br>\nXML: 103<br>\nJSON: 568<br>\nRDF: 0</p>",
        "id": 240618401,
        "sender_full_name": "James Agnew",
        "timestamp": 1622214908
    },
    {
        "content": "<p>This is fun, I can't wait to get more data... :)</p>",
        "id": 240618489,
        "sender_full_name": "James Agnew",
        "timestamp": 1622214950
    },
    {
        "content": "<p>Who's out there artificially inflating XML?  ;-)</p>",
        "id": 240618592,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1622214988
    },
    {
        "content": "<p>One thing I just realized, my original counts did not account for people who requested XML explicitly via an <code>Accept</code> header (as opposed to a URL parameter). The new numbers do though.</p>",
        "id": 240618995,
        "sender_full_name": "James Agnew",
        "timestamp": 1622215178
    },
    {
        "content": "<p>Can you also distinguish between Postman-type \"trying things out\" queries vs. other (presumably programmatically created) requests?</p>",
        "id": 240619341,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1622215313
    },
    {
        "content": "<p>We do have some FHIR specs here in Germany that only allow for XML...</p>",
        "id": 240621754,
        "sender_full_name": "Frank Oemig",
        "timestamp": 1622216268
    },
    {
        "content": "<blockquote>\n<p>is anyone using this for FHIR validation yet or do most use the reference Java validator (what to do if your FHIR server isn't Java?)</p>\n</blockquote>\n<p>Most people use the either the java validator or the DotNet validator. The DotNet validator isn't as comprehensively reliable as the Java validator, but it's coming along quickly. You can run the java validator as a local web service if you won't want inline java, but you can also load it through a JVM interface.</p>",
        "id": 240622515,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1622216606
    },
    {
        "content": "<p>Make sense (options to run validators).  My related question, what is the 'CPU overhead' of running the Java or DotNet validator vs running something like JSON Schema (or XMLSchema)?   (I realize Schema and even Schamtron don't give as much coverage at the Java validator but at what expense?)</p>",
        "id": 240626883,
        "sender_full_name": "John Silva",
        "timestamp": 1622218545
    },
    {
        "content": "<p>The Java or .NET validators will consume considerably more memory - because they do full checking of terminology, while neither of the schema validators have that capability beyond codes for 'code' elements (and thus no need to load terminologies into memory).</p>",
        "id": 240637244,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1622223556
    },
    {
        "content": "<p>Also, recursively resolving references and checking validity against target profiles definitely takes more time/processing.  Again something that the schema validators can't really do.</p>",
        "id": 240637341,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1622223599
    },
    {
        "content": "<p>I am not sure of schema validation could validate things such as slicing and invariant.</p>",
        "id": 240637586,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1622223708
    },
    {
        "content": "<p>Carequality's FHIR directory only half supports JSON for the FHIR Organization calls, so everyone uses XML there. I imagine other servers might be similar.</p>",
        "id": 240649192,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1622229568
    },
    {
        "content": "<p>I think JSON schema can do some slicing.  Schematron can do invariants expressed as XPath.  But for full validation, you need more than what any of the 'schema' languages can provide.</p>",
        "id": 240649493,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1622229727
    },
    {
        "content": "<p>I kid about XML. Simple XMLs can be great and the tooling is undoubtedly better right now.</p>\n<p>I just have a bad association from IHE and Nictiz specs that have a bunch of wrapped XML (MTOM encoded CDA in a XCA with SAML, for example). XML documentation also generally was PDF distributed or all that WSDL stuff. </p>\n<p>Open HTML docs, OpenAPI specs, etc are all associated with the JSON era, even if they're usable with XML</p>",
        "id": 240649649,
        "sender_full_name": "Brendan Keeler",
        "timestamp": 1622229831
    },
    {
        "content": "<p>Any update on this <span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> ?<br>\n(Note that the dotnet fhir client defaults XML into the Accept header my memory serves me right - so that could skew things that side, but any web clients are more likely just doing json)</p>",
        "id": 241718693,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1623026837
    },
    {
        "content": "<p>I'll see if we measure this on the Firely servers...</p>",
        "id": 242586368,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1623672355
    },
    {
        "content": "<p>That will be interesting, as the dotnet fhir client is xml by default</p>",
        "id": 242601303,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1623679428
    }
]