[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> I ran this... <a href=\"http://ontoserver.csiro.au/stu3/CodeSystem/$lookup?system=http://snomed.info/sct&amp;code=404684003&amp;property=parent&amp;property=child\" target=\"_blank\" title=\"http://ontoserver.csiro.au/stu3/CodeSystem/$lookup?system=http://snomed.info/sct&amp;code=404684003&amp;property=parent&amp;property=child\">http://ontoserver.csiro.au/stu3/CodeSystem/$lookup?system=http://snomed.info/sct&amp;code=404684003&amp;property=parent&amp;property=child</a>  and then this...<br>\n<a href=\"http://ontoserver.csiro.au/stu3/CodeSystem/$lookup?system=http://snomed.info/sct&amp;code=404684003&amp;properties=parent,child\" target=\"_blank\" title=\"http://ontoserver.csiro.au/stu3/CodeSystem/$lookup?system=http://snomed.info/sct&amp;code=404684003&amp;properties=parent,child\">http://ontoserver.csiro.au/stu3/CodeSystem/$lookup?system=http://snomed.info/sct&amp;code=404684003&amp;properties=parent,child</a><br>\nOnly the second query returned the parent and child codes.</p>",
        "id": 153836141,
        "sender_full_name": "Peter Jordan",
        "timestamp": 1467424152
    },
    {
        "content": "<p>that looks like a bug - in the second case it's ignoring the properties parameter and just performing default behaviour.  For the first one, it should be looking at the property parameter</p>",
        "id": 153836142,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1467426985
    },
    {
        "content": "<p>Question - should the property filters apply to the non-property parameters?  ie \"display\", \"version\", \"name\", and \"designation\"?</p>",
        "id": 153836150,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1467436398
    },
    {
        "content": "<p>ummm, no? but perhaps you should be more specific? which property, which operator, which value?</p>",
        "id": 153836156,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467456032
    },
    {
        "content": "<p>and which code system?</p>",
        "id": 153836157,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467456043
    },
    {
        "content": "<p>\"filter\" was the wrong word to use - I was referring to the \"property\" parameter to the $lookup operation.</p>",
        "id": 153836163,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1467469121
    },
    {
        "content": "<p>Wow, that's an extensive rewrite. Looking forward to receiving my copy. </p>",
        "id": 153836174,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1467483418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> that's 1.6 HAPI? Does that mean we'd be able to take SNOMED flat files and import them into HAPI. </p>",
        "id": 153836175,
        "sender_full_name": "Kevin Mayfield",
        "timestamp": 1467483634
    },
    {
        "content": "<p>ok then the answer is yes - and we could define this - \"name\" \"display\", and \"version\" are implemented on my system, but not designation or property</p>",
        "id": 153836180,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1467494761
    },
    {
        "content": "<p>Yup. The 1.6 release will have support for loading SNOMED CT and LOINC distribution ZIP files into a HAPI JPA server (or into the CLI server)</p>",
        "id": 153836319,
        "sender_full_name": "James Agnew",
        "timestamp": 1467670962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191319\">@James Agnew</span> are you embedding part of ontoserver implementation libraries into HAPI, to include same funtionality describe by Michael L?  This is in the ontoserver topic thread.  I thouht that ontoserer was closed source.  I would be very happy to see these expanded terminology services in HAPI, and level-setting common behavior between Grahame's server, ontoserver, and HAPI (and others).</p>",
        "id": 153836471,
        "sender_full_name": "Dave Carlson",
        "timestamp": 1467740816
    },
    {
        "content": "<p>Nope, these are separate code bases. Ontoserver is built using HAPI, but has it's own actual terminology service implementation (which is presumably far more full-featured than HAPI's given that it is purpose built). HAPI does support the basic stuff though and hopefully over time we'll add more.</p>",
        "id": 153836493,
        "sender_full_name": "James Agnew",
        "timestamp": 1467747811
    },
    {
        "content": "<p>Thanks James, I'll look forward to testing HAPI terminology services.  One aspect I am especially interested in is lookup of SCT parent and/or child properties for a concept.  And, ideally, relationshp attributes for a concept.</p>",
        "id": 153836599,
        "sender_full_name": "Dave Carlson",
        "timestamp": 1467819375
    },
    {
        "content": "<p>Yes, Ontoserver includes special-purpose ranking algorithms for $expand + filter, for example, and pretty deep support for SNOMED CT, multiple versions (including cross-jursdiction versions - so called Editions). etc</p>",
        "id": 153836863,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1467932360
    }
]