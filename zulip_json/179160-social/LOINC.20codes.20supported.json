[
    {
        "content": "<p>I have an app A that can give blood pressure. I want to integrate this with another app B.</p>",
        "id": 176568811,
        "sender_full_name": "Apra",
        "timestamp": 1569421070
    },
    {
        "content": "<p>Now, when the app A is first installed on the device, I want A to register with app B and tell it what LOINC codes it can give. In this case, blood pressure</p>",
        "id": 176568935,
        "sender_full_name": "Apra",
        "timestamp": 1569421126
    },
    {
        "content": "<p>what resourceType should be sent from app A to B?</p>",
        "id": 176569010,
        "sender_full_name": "Apra",
        "timestamp": 1569421159
    },
    {
        "content": "<p>And once app B knows the LOINC codes it can get from app A, it needs to tell app A what type of request it will send. (in this case, a serviceRequest) How can app B inform A about this during initial setup?</p>",
        "id": 176570066,
        "sender_full_name": "Apra",
        "timestamp": 1569421833
    },
    {
        "content": "<p>This is a bit outside my area, but from browsing around I would guess that the <a href=\"http://hl7.org/fhir/device.html\" target=\"_blank\" title=\"http://hl7.org/fhir/device.html\">Device</a> and/or <a href=\"http://hl7.org/fhir/devicedefinition.html\" target=\"_blank\" title=\"http://hl7.org/fhir/devicedefinition.html\">DeviceDefinition</a> would suit for describing the capability of App A to App B.</p>\n<p>That said, what is the registration you are referring to?  If it is an out-of-band registration process, I would assume that the registration process needs to know about the capabilities.  At minimum, App B would need to know how the capabilities are defined, since just posting a resource wouldn't link anything between the two, and there is no guarantee that an arbitrary App B even supports a given resource.</p>\n<p>For your second question, the <a href=\"https://hl7.org/fhir/capabilitystatement.html\" target=\"_blank\" title=\"https://hl7.org/fhir/capabilitystatement.html\">CapabilityStatement</a> includes resources and which ones are supported, though it's not the same workflow you are describing.  An endpoint (e.g., App A) has a CapabilityStatement and App B can check to see if the operation it <em>wants</em> to use is supported.  This makes sense, because if App A does not support <code>serviceRequest</code>, there is no negotiation which will add that during registration.</p>\n<p>If you are developing both apps (A and B), then I think those resources should work.  If you are asking about a generic procedure, I don't believe there is one (yet).</p>",
        "id": 176571073,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1569422559
    },
    {
        "content": "<p>It would be best to move this discussion to the implementers stream!</p>",
        "id": 176582871,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1569429503
    },
    {
        "content": "<p>lol, I didn't even notice which stream it was on (default view is 'all' for me =).  Guess I should watch for that.  Is there a process for moving topics, or is is just a matter of starting one on the new stream?</p>",
        "id": 176583699,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1569430075
    },
    {
        "content": "<p>The key resource here is ValueSet which actually specifies the list of codes. The others are glue to establish context for the value set</p>",
        "id": 176597586,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569439554
    },
    {
        "content": "<blockquote>\n<p>The key resource here is ValueSet which actually specifies the list of codes. The others are glue to establish context for the value set</p>\n</blockquote>\n<p>Thanks Graham. This does look useful. I see we can send supported LOINC codes here. However, in addition, we also need to tell additional stuff to app B - ex: app B has to send an intent call with the right intent name. So, app A also has to inform app B of the intent name. Ex: com.test.appA</p>",
        "id": 176637232,
        "sender_full_name": "Apra",
        "timestamp": 1569485472
    },
    {
        "content": "<p>It does not look like ValueSet can help with this. or can it?</p>",
        "id": 176637240,
        "sender_full_name": "Apra",
        "timestamp": 1569485494
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>The key resource here is ValueSet which actually specifies the list of codes. The others are glue to establish context for the value set</p>\n</blockquote>\n<p>Thanks Graham. This does look useful. I see we can send supported LOINC codes here. However, in addition, we also need to tell additional stuff to app B - ex: app B has to send an intent call with the right intent name. So, app A also has to inform app B of the intent name. Ex: com.test.appA</p>\n</blockquote>\n<p>Maybe we could use useContext-&gt;valueQuantity and code to indicate intent name and its value. I see an example in the FHIR doc page where they include age here</p>",
        "id": 176637683,
        "sender_full_name": "Apra",
        "timestamp": 1569485968
    },
    {
        "content": "<p>In addition, I want app B to tell app A the format in which it will send a FHIR message</p>",
        "id": 176642514,
        "sender_full_name": "Apra",
        "timestamp": 1569490977
    },
    {
        "content": "<p>I guess StructureDefinition should help here?</p>",
        "id": 176642531,
        "sender_full_name": "Apra",
        "timestamp": 1569490993
    },
    {
        "content": "<p>Well, StructureDefinition or operationdefinition sets the context for the value set. But itâ€™s not clear to me what you mean by your context</p>",
        "id": 176648840,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569496841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> : I use something called Android intent to have app B communicate to app A. For this, app B has to know the name of the intent. It has to send this while sending a request to A.</p>",
        "id": 176650039,
        "sender_full_name": "Apra",
        "timestamp": 1569498011
    },
    {
        "content": "<p>So, app B basically needs to know the following: the intent name (for reasons I just mentioned above) and the LOINC codes supported.</p>",
        "id": 176650085,
        "sender_full_name": "Apra",
        "timestamp": 1569498073
    },
    {
        "content": "<p>I thought using useContext-&gt;valueQuantity and code may help here. I could send valueQuantity as the intent name.</p>",
        "id": 176650153,
        "sender_full_name": "Apra",
        "timestamp": 1569498145
    },
    {
        "content": "<p>If that is not the case, pl let me know.</p>",
        "id": 176650165,
        "sender_full_name": "Apra",
        "timestamp": 1569498158
    },
    {
        "content": "<p>The description for useContext also says: \"The context that the content is intended to support\"</p>",
        "id": 176650264,
        "sender_full_name": "Apra",
        "timestamp": 1569498252
    },
    {
        "content": "<p>hmm. we haven't really talked about how to use FHIR content in places like Android intents. I've never done any actual mobile development, but iOS has something similar, right? Is there enough interest to do standardization work in this space?</p>",
        "id": 176704002,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1569538481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , I think iOS also has something similar to Android intent, but not too sure. Never done iOS app development before.</p>",
        "id": 176724433,
        "sender_full_name": "Apra",
        "timestamp": 1569569337
    },
    {
        "content": "<p>To begin with, I'm a little new to FHIR. When I went over the description of the various fields in ValueSet, I thought using \"useContext\" would help us send the intent name.</p>",
        "id": 176724553,
        "sender_full_name": "Apra",
        "timestamp": 1569569457
    },
    {
        "content": "<p>If you think the above cannot be used for the use case I am targeting, then how do we proceed? Do we need to introduce new fields or do something so that this use case is addressed</p>",
        "id": 176724637,
        "sender_full_name": "Apra",
        "timestamp": 1569569549
    },
    {
        "content": "<p>Pls suggest</p>",
        "id": 176724638,
        "sender_full_name": "Apra",
        "timestamp": 1569569552
    },
    {
        "content": "<p>I'm confused about the requirements here. Why does app B need to tell app A ahead of time what kinds of requests it will send in the future? Why not establish the details of what app B needs inline, when app B is actually making a request to app A? In other words, you could have B start A with something like <a href=\"https://developer.android.com/reference/android/app/Activity.html#startActivityForResult(android.content.Intent,%20int)\" target=\"_blank\" title=\"https://developer.android.com/reference/android/app/Activity.html#startActivityForResult(android.content.Intent,%20int)\">startActivityForResult</a>, and define a generic intent like \"Request FHIR Data\" with an Bundle (er, <a href=\"https://developer.android.com/reference/android/os/Bundle\" target=\"_blank\" title=\"https://developer.android.com/reference/android/os/Bundle\">Android Bundle</a>, not <a href=\"http://build.fhir.org/bundle\" target=\"_blank\" title=\"http://build.fhir.org/bundle\">FHIR Bundle</a>) that conveys the details. You might even model this after the FHIR REST API, where the intent bundle has data like:</p>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;query&quot;: &quot;Observation?category=vital-signs&amp;code=8480-6&quot;\n}\n</pre></div>",
        "id": 176749584,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1569593675
    },
    {
        "content": "<p>(Apparently I too am failing to take this away from <a class=\"stream\" data-stream-id=\"179160\" href=\"/#narrow/stream/179160-social\">#social</a>.).</p>",
        "id": 176749681,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1569593749
    },
    {
        "content": "<p>(to me social is like announcements: a must read - so please take this topic to implementers. No talking shop on this channel, please)</p>",
        "id": 176763025,
        "sender_full_name": "RenÃ© Spronk",
        "timestamp": 1569602815
    },
    {
        "content": "<p>To check on expectations: I think the Social channel is definitely <em>not</em> designed to be must-read (but I agree this topic belongs on <a class=\"stream\" data-stream-id=\"179166\" href=\"/#narrow/stream/179166-implementers\">#implementers</a> ;-))</p>",
        "id": 176771790,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1569608446
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"191372\">@RenÃ© Spronk</span> is just really <a class=\"stream\" data-stream-id=\"179160\" href=\"/#narrow/stream/179160-social\">#social</a> ;)</p>",
        "id": 176801967,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1569635941
    }
]