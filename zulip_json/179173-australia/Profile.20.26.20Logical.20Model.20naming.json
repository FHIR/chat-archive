[
    {
        "content": "<p>I assume that we have to create profiles and logical models with unique names, i.e. we can't have a logical model named AllergyIntolerance even though it's <code>kind</code> would have a different value.</p>",
        "id": 153834298,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1466665908
    },
    {
        "content": "<p>Given that, is there a naming scheme that is recommended, e.g. &lt;OrgName&gt;-&lt;ResouceName&gt;-&lt;Qualifier&gt;?  (I presume we'd need qualifiers of some sort to distinguish between to profiles on the same resource.)</p>",
        "id": 153834299,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1466665991
    },
    {
        "content": "<p>names are not required to be unique, though it's more useful if you scope your name so that it's likely to be </p>",
        "id": 153834304,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466667476
    },
    {
        "content": "<p>you might make uniqueness rules for your own use of names.</p>",
        "id": 153834305,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1466667502
    },
    {
        "content": "<p>So I just realised that I used poor terminology in my question and the response does not actually answer my question (probably).  When I said \"name\", what I meant was the value of the <code>id</code> element of a StructureDefintion.</p>",
        "id": 153840150,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469070499
    },
    {
        "content": "<p>yes your id should be unique </p>",
        "id": 153840158,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469075765
    },
    {
        "content": "<p>So I cannot create a StructureDefinition with <code>&lt;id value=\"AllergyIntolerance\" /&gt;</code> even if it's a logical model because such a StructureDefinition already exists.</p>",
        "id": 153840218,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469080817
    },
    {
        "content": "<p>To what degree does it need to be unique?  Can I, for example infer that \"AllergyIntolerence\" is unique because it's definition resides at a different URL, say <a href=\"http://electronichealth.net.au/fhir/StructureDefinition/AllergyIntolerence\" target=\"_blank\" title=\"http://electronichealth.net.au/fhir/StructureDefinition/AllergyIntolerence\">http://electronichealth.net.au/fhir/StructureDefinition/AllergyIntolerence</a>?  And I assume that this means that I cannot have a logical model and a resource profile that both have the same id, say \"AdverseReaction\"?</p>",
        "id": 153840219,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469081033
    },
    {
        "content": "<p>the logical id does only need to be unique for the local server. The canonical url needs to be globally unique </p>",
        "id": 153840220,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469082674
    },
    {
        "content": "<p>Yeah, but I'm guessing, when it comes to StructureDefinitions at least, it doesn't really make sense to have anything other than a 1:1 relationship between values of <code>id</code> and <code>url</code>?</p>",
        "id": 153840232,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469083581
    },
    {
        "content": "<p>the implementation guide publisher enforces that</p>",
        "id": 153840239,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469083721
    },
    {
        "content": "<p>Right, so I do need an \"ID naming\" system to allow me to distinguish between our logical models, profiles of resources and the foundation resources. :(</p>",
        "id": 153840244,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469083925
    },
    {
        "content": "<p>yes. you should do that</p>",
        "id": 153840247,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469084178
    },
    {
        "content": "<p>you aren't in the same namespace as the foundation resources, so you don't need to worry about them (you can't define things in <a href=\"http://hl7.org/fhir\" target=\"_blank\" title=\"http://hl7.org/fhir\">http://hl7.org/fhir</a>)</p>",
        "id": 153840248,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469084220
    },
    {
        "content": "<p>Also, is there any guidance on ReST URLs?  I was thinking to distinguish between logical StructureDefinitions and resources StructureDefinitions (profiles) in the URL like <code>.../fhir/lm/StructureDefinition/&lt;Structure Definition ID&gt;</code> and <code>.../fhir/rs/StructureDefinition/&lt;Structure Definition ID&gt;</code>, or <code>.../fhir/StructureDefinition/lm/&lt;StructureDefinition ID&gt;</code> and <code>.../fhir/StructureDefinition/rs/&lt;Structure Definition ID&gt;</code>.  The latter makes life a bit easier from an ID naming system, but are URLs like this frowned upon?  Should I really be looking at just <code>.../fhir/StructureDefinition/&lt;Structure Definition ID&gt;</code>?</p>",
        "id": 153840251,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469084368
    },
    {
        "content": "<p>well, not so much 'frowned on' - they're legal, but they want be able to hosted in a FHIR RESTful API server if you use URLs like that, and we think that will prove problematic</p>",
        "id": 153840253,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469084472
    },
    {
        "content": "<p>Right, so the \"lm\" bit needs to be included in the ID? <img alt=\":disappointed:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/disappointed.png\" title=\":disappointed:\"> </p>",
        "id": 153840255,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469084553
    },
    {
        "content": "<p>yes</p>",
        "id": 153840256,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469084583
    },
    {
        "content": "<p>That is <code>.../fhir/StructureDefinition/lm-&lt;Rest of Structure Definition ID&gt;</code>?</p>",
        "id": 153840257,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469084596
    },
    {
        "content": "<p>you have '-' and '.' as separator characters - they're no less effective than '/'</p>",
        "id": 153840260,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469084608
    },
    {
        "content": "<p>That makes for _ugly_ IDs!</p>",
        "id": 153840261,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469084612
    },
    {
        "content": "<p>Yeah, but with our eXist database, I can use \"/lm\" to point to a different part of the database more easily.</p>",
        "id": 153840263,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469084670
    },
    {
        "content": "<p>well, ugly is in the eye of the implementer</p>",
        "id": 153840266,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1469084725
    },
    {
        "content": "<p>Indeed.  I would have liked the value of the <code>id</code> element to have been scoped by the value of the <code>kind</code> element I suppose, but it doesn't really matter.</p>",
        "id": 153840267,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1469084799
    },
    {
        "content": "<p>Another question on this: would you expect the value of <code>StructureDefinition.name</code> (and <code>DataElement.name</code>) to contain spaces?</p>",
        "id": 153845540,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1472519550
    },
    {
        "content": "<p>yes</p>",
        "id": 153845542,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1472519575
    },
    {
        "content": "<p>Also, how hard and fast should the practice of <code>StructureDefinition.url</code> = <code>&lt;FHIR Server&gt;/StructureDefinition/[StructureDefinition.id]</code> be?</p>",
        "id": 153845544,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1472519644
    },
    {
        "content": "<p>I ask because part of me would like to use our OIDs as <code>StructureDefinition.id</code>, but that would make for <strong>really</strong> obscure URLs. <img alt=\":disappointed:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/disappointed.png\" title=\":disappointed:\"> </p>",
        "id": 153845545,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1472519805
    },
    {
        "content": "<p>well, that depends. What are you going to make the url? </p>",
        "id": 153845546,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1472519850
    },
    {
        "content": "<p>you should put your oid in StructureDefinition.identifier</p>",
        "id": 153845547,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1472519859
    },
    {
        "content": "<p>That's what I've started doing, and using values like \"lm-AdverseReaction\" for <code>StructureDefinition.id</code>.  But names like that suck as IDs. <img alt=\":confused:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/confused.png\" title=\":confused:\"> </p>",
        "id": 153845548,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1472520116
    },
    {
        "content": "<p>Also, ideally, I'd like to lose the \"lm-\" prefix in the URL.</p>",
        "id": 153845552,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1472520301
    },
    {
        "content": "<p>Also, for <code>StructureDefinition.id</code>, I can coalesce the OID into a single number because the leading part is infered by StructureDefinition and the trailing part is versioning.  So the Adverse Reaction StructureDefinition could have an id of just \"9\", for example.  But a URL of \"<a href=\"http://digitalhealth.gov.au/fhir/StructureDefinition/9\" target=\"_blank\" title=\"http://digitalhealth.gov.au/fhir/StructureDefinition/9\">http://digitalhealth.gov.au/fhir/StructureDefinition/9</a>\" is probably not that helpful.  Mind you, that's what you'd get for Patient, so maybe it's not all bad?</p>",
        "id": 153845554,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1472520448
    },
    {
        "content": "<p>why do you have lm-?</p>",
        "id": 153845562,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1472521178
    },
    {
        "content": "<p>Because, in theory, there may be another model whose name is also \"AdverseReaction\".  For instance, what might we call the resource profile derived from the AdverseReaction logical model?  Likely, it will be something like \"dh-AllergyIntolerance\", but we may end up wanting to use our name instead of FHIR's.</p>",
        "id": 153845563,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1472521417
    },
    {
        "content": "<p>...whose <strong>id</strong> is also \"AdverseReaction\"...</p>",
        "id": 153845564,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1472521460
    },
    {
        "content": "<p>I'm trying hard here to get <code>StructureDefinition.id</code>, <code>StructureDefinition.name</code> and <code>StructureDefinition.url</code> to all line up no matter what the value of <code>StructureDefinition.kind</code>, but it doesn't seem possible.</p>",
        "id": 153845565,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1472521593
    },
    {
        "content": "<p>And the fact that we want to hand over custodianship of the ultimate resource profiles to HL7 Australia complicates matters enormously. <img alt=\":scream:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/scream.png\" title=\":scream:\"> </p>",
        "id": 153845566,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1472521811
    },
    {
        "content": "<p>I think that you're going to have a cascade of related kinds of models. </p>",
        "id": 153845567,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1472522713
    },
    {
        "content": "<p>Yes, we will.  We'll have full-blown models that probably contain more than anyone will want for some time which are then constrained at many levels, right down to some idea of core or minimum.  And all of then will need to share the same name somehow.  I assume, we'll therefore need a system of prefices and suffices to give some idea of shared DNA of the models.</p>",
        "id": 153845571,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1472524604
    },
    {
        "content": "<p>So I've started with a prefix of \"lm-\" for logical model.  The set of logical models is likely to be a lot smaller, although that will depend on whether we set up SCSs as an aggregation and constraint of logical models (to enforce consistency) as we currently do or as independent models which share no relationship to each other except as maintained in the head(s) of the modeller(s).</p>",
        "id": 153845572,
        "sender_full_name": "Stephen Royce",
        "timestamp": 1472524751
    }
]