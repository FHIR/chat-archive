[
    {
        "content": "<p>Hi Guys,</p>\n<p>When a FHIR Server returns a bundle from a Search, The link section returns the paging links.<br>\nIt seems that paging is server specific (ie how many rows are returned in one go)<br>\nSo if Page size is 20, and there are 101 record, then there are 6 pages.<br>\nIs there anywhere that specifies what the paging size is used by the server?<br>\nShould it be returned in the bundle?<br>\nShould the capability statement specify this?</p>",
        "id": 153955312,
        "sender_full_name": "Philip Wilford",
        "timestamp": 1525221813
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"195713\">@Philip Wilford</span>  <a href=\"http://hl7.org/fhir/search.html#count\" target=\"_blank\" title=\"http://hl7.org/fhir/search.html#count\">http://hl7.org/fhir/search.html#count</a> - it is really up to the server to define - _count on search is a request by the client and can't be exceeded by the server</p>",
        "id": 153955316,
        "sender_full_name": "Brett Esler",
        "timestamp": 1525222988
    },
    {
        "content": "<p>capability statement is interesting - maybe it should...</p>",
        "id": 153955317,
        "sender_full_name": "Brett Esler",
        "timestamp": 1525223023
    },
    {
        "content": "<p>also server could have variable paging size I guess - might be based on how many results in a period of time (i.e. max response time)</p>",
        "id": 153955318,
        "sender_full_name": "Brett Esler",
        "timestamp": 1525223097
    },
    {
        "content": "<p>i.e. search engine like..</p>",
        "id": 153955319,
        "sender_full_name": "Brett Esler",
        "timestamp": 1525223130
    },
    {
        "content": "<p>Its a good point Phill, I'm not aware of anywhere the page size is reported by the server. I have these command in my server config for the server admin to configure page size. But as said, if your not the admin I don't know how you woudl find out. Extention in the  capability statement  maybe, not great!<br>\n&lt;!-- ===================================================================================================== <br>\n       Command: NumberOfRecordsPerPageDefault<br>\n       Value: integer<br>\n       Default: 50<br>\n       Description: This setting is to set the default number of Resource returned in a bundle, for example,<br>\n       in a FHIR search call. The default can be over-ridden per API call using the _count search parameter<br>\n       in the call. --&gt;<br>\n  &lt;add key=\"NumberOfRecordsPerPageDefault\" value=\"50\" /&gt;</p>\n<p>&lt;!-- ===================================================================================================== <br>\n       Command: MaxNumberOfRecordsPerPage<br>\n       Value: integer       <br>\n       Default: 500<br>\n       Description: This setting is to set the absolute maximum number of Resource that can be requested <br>\n       when using the _count search parameter. For example, if an API caller sets the parameter _count=500 <br>\n       and this command 'MaxNumberOfRecordsPerPage' is set to 200 then the _count search parameter value <br>\n       will be ignored and only 200 will be returned. This is to prevent users asking for a _count value <br>\n       that is too large, resulting in poor performance of the service. Also, beware that the service has <br>\n       an internal setting called 'SystemDefaultMaxNumberOfRecordsPerPage' that can not be changed by <br>\n       configuration. This command 'MaxNumberOfRecordsPerPage' cannot exceed the <br>\n       'SystemDefaultMaxNumberOfRecordsPerPage' command which is currently set at 5000 and the command <br>\n       here will default to the 'SystemDefaultMaxNumberOfRecordsPerPage' value if set higher.--&gt;<br>\n  &lt;add key=\"MaxNumberOfRecordsPerPage\" value=\"200\" /&gt;</p>",
        "id": 153955330,
        "sender_full_name": "Angus Millar",
        "timestamp": 1525229365
    },
    {
        "content": "<p>we've kept away from making rules about this because internal engines vary so widely</p>",
        "id": 153955359,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1525248749
    },
    {
        "content": "<p>another factor could be that the server counts the byte size of the bundle as its preparing it, and cut of the pages so they don't exceed 2MB (mine doesn't but it could be possible).<br>\nAll that really matters is that you can follow the next link to get to the next page of data</p>",
        "id": 153955540,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1525303046
    },
    {
        "content": "<p>And just a reminder Phil, resources brought in through the _include option to count towards the bundle.total property.</p>",
        "id": 153955541,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1525303085
    },
    {
        "content": "<blockquote>\n<p>And just a reminder Phil, resources brought in through the _include option to count towards the bundle.total property.</p>\n</blockquote>\n<p>Hey Brian,<br>\nThat bundle.total count .. that adds a bit of a curve ball there to peoples UIs.<br>\nExample: query for Organisations with a certain Filter, and you _include the Location.<br>\nIf your UI is handling paging, it will want to know how many organisations are returned.<br>\nThe bundle.total therefore becomes a bit confusing ... as that wont be the number of organisations<br>\nfor the UI paging to use.<br>\nDoesnt there need to be an additional counter to indicate Organisations found ??</p>",
        "id": 153955544,
        "sender_full_name": "Philip Wilford",
        "timestamp": 1525303959
    },
    {
        "content": "<p>That was my point, it IS the number of organizations.<br>\nBut won't be the count of resource.entry results</p>",
        "id": 153955547,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1525304137
    },
    {
        "content": "<p>Ok - so thats good then :)<br>\nbundle.total = organisations <br>\nand then the _includes are extra .. yes?</p>",
        "id": 153955548,
        "sender_full_name": "Philip Wilford",
        "timestamp": 1525304232
    },
    {
        "content": "<p>yes.<br>\n_count = 10 might result in bundle.entry.count() = 15 (with 5 included resources) and bundle.total = 13</p>",
        "id": 153955550,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1525304281
    },
    {
        "content": "<p>So we would return 10 organisations and the included resources ? in the response to the request for _count=10 ?</p>",
        "id": 153955556,
        "sender_full_name": "Philip Wilford",
        "timestamp": 1525305926
    },
    {
        "content": "<p>[base]/Location?_count=10&amp;_include=location.organization<br>\nresulting bundle has 10 locations, 5 organizations, and total = 13<br>\nPage 2 might contain 3 locations, 2 orgs and total = 13</p>",
        "id": 153955560,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1525306428
    },
    {
        "content": "<p>And then for _count there is this gotcha that I have not implemented but found a few days ago: Quote Spec: <em>\"if _count has the value 0, this shall be treated the same as _summary=count: the server returns a bundle that reports the total number of resources that match in Bundle.total, but with no entries, and no prev/next/last links. Note that the Bundle.total only include the total number of matching resources. It does not count extra resources such as OperationOutcome or included resources that may also be returned.\"</em></p>",
        "id": 153955562,
        "sender_full_name": "Angus Millar",
        "timestamp": 1525307009
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[base]/[resourcename]?_count=0\n</pre></div>\n\n\n<p>This is what you're referring to as being handled as a shorthand? for _summary=count</p>",
        "id": 153955567,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1525316418
    }
]