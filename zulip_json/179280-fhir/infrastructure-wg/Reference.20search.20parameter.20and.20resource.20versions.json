[
    {
        "content": "<p>In a discussion in <a class=\"stream\" data-stream-id=\"179166\" href=\"/#narrow/stream/179166-implementers\">#implementers</a> , we got to a use case where there is a reference that is likely to point to a specific version of a resource (in the particular  case <a href=\"http://Provenance.target\">Provenance.target</a>). If I want to find all instances of a resource that references <strong>any</strong> version of the referenced resource, how do we search for it?</p>\n<p>It seems that the following is the most straight-forward (assuming that <code>target</code> is the reference parameter):</p>\n<ol>\n<li>Obtain the un-versioned referenced resource. The latest version is available in the ETag.</li>\n<li>Use a parameter search: GET [base]/MainResource?target:below=[base]/ReferencedResource/[id]/_history/[latest version]</li>\n</ol>\n<p>The problem is that the :below modifier is <a href=\"http://build.fhir.org/search.html#versions\">explicitly described</a> working with versions for canonical references. Would it apply to regular references?</p>\n<p>Alternatively, what is the result if a search is using a non-versioned reference - is it supposed to match versioned and un-versioned  references, or only un-versioned ones?</p>\n<p><span class=\"user-mention\" data-user-id=\"197072\">@Paul Church</span> <span class=\"user-mention\" data-user-id=\"191380\">@Elliot Silver</span>  (who were part of the previous discussion) <span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> (because this seems to be something <a href=\"http://Provenance.target\">Provenance.target</a> really needs).</p>",
        "id": 242379758,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1623433635
    },
    {
        "content": "<p>Aah, canonical... you had to throw that extra wrench in there -- do you want to search against the business version or the resource history version? Perhaps overloading :below for both isn't the best approach.</p>",
        "id": 242380914,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1623434225
    },
    {
        "content": "<p>Our interpretation was that an un-versioned search only matches un-versioned references, and :below doesn't apply here.</p>\n<p>This does sound like a useful search, especially for <a href=\"http://Provenance.target\">Provenance.target</a> (find all provenances applying to any version of the resource). I can't think of any way to construct that search using my current interpretations.</p>\n<p>I think there's some ambiguity if we made un-versioned search match versioned references....the un-versioned name of a resource is the identity of the current version, so matching references to past versions might not be what the client wants.</p>\n<p>Adding :below is a possibility but with it already applying to canonical and URI, will there be cases that don't make sense?</p>",
        "id": 242382255,
        "sender_full_name": "Paul Church",
        "timestamp": 1623434790
    },
    {
        "content": "<p>I don't know.  I think I heard that if you requested a historic version, you would be given the current, unless you did something special to force retriavl of that specific historic version....</p>",
        "id": 242638340,
        "sender_full_name": "John Moehrke",
        "timestamp": 1623694385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ?  <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> ?</p>",
        "id": 242638350,
        "sender_full_name": "John Moehrke",
        "timestamp": 1623694387
    },
    {
        "content": "<p>I don't knbow</p>",
        "id": 242638798,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1623694589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197072\">Paul Church</span> <a href=\"#narrow/stream/179280-fhir.2Finfrastructure-wg/topic/Reference.20search.20parameter.20and.20resource.20versions/near/242382255\">said</a>:</p>\n<blockquote>\n<p>Our interpretation was that an un-versioned search only matches un-versioned references, and :below doesn't apply here. [...]</p>\n</blockquote>\n<p>Is this the interpretation that most other implementations follow? Our server behaves exactly like this. We just received a customer request questioning that behaviour, exactly for the same use case outlined above.</p>",
        "id": 277873811,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649163490
    },
    {
        "content": "<p>Would there be sufficient support from others to clarify that unversioned references should only match unversioned references in the instance?</p>",
        "id": 277916074,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649180178
    },
    {
        "content": "<p>Not sure what you mean.  References match instances, not other references...</p>",
        "id": 277938525,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649190243
    },
    {
        "content": "<p>I meant that itâ€™s clarified that if you have a unversioned reference as the search parameter value, this search only matches if there is an unversioned reference in the instance. If the instance has a versioned reference in it, there should be no match.</p>",
        "id": 277978507,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649224718
    },
    {
        "content": "<p>maybe you need to provide an example. I am confused on what you are describing as \"unversioned reference as the search parameter value\". I am not confused by each word, but by the string of words you use. -- a search on an unversioned reference will get you the latest, indeed it is hard to get anything but the latest, as the default for a versioned reference is to give you the latest.</p>",
        "id": 278018173,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649249390
    },
    {
        "content": "<p>Say you have a Provenance instance with a versioned reference as the target:</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  &quot;resourceType&quot;: &quot;Provenance&quot;,\n  &quot;target&quot;: [{\n     &quot;reference&quot;: &quot;Patient/example/_history/1234&quot;\n   }]\n}\n</code></pre></div>\n<p>Now you are executing a search on that target: </p>\n<div class=\"codehilite\"><pre><span></span><code>[base]/Provenance?target=Patient/example\n</code></pre></div>\n<p>Should this match the instance or not?</p>",
        "id": 278019387,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649250000
    },
    {
        "content": "<p>In the thread above it was indicated that it should not match. However, as far as I can see, the spec is silent about it.</p>",
        "id": 278019553,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649250044
    },
    {
        "content": "<p>Your example</p>\n<blockquote>\n<p>[base]/Provenance?target=Patient/example<br>\nis just a normal search. You  should get the latest instance of that Patient resource... regardless of how many versions are available.</p>\n</blockquote>\n<p>Note your search example has nothing to do with the Provenance instance you give. Or, I am not understanding the relationship you are seeing.</p>\n<p>Where do you see in the FHIR specification statements different than that?</p>",
        "id": 278021117,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649250839
    },
    {
        "content": "<p>This was the first question raised by <span class=\"user-mention silent\" data-user-id=\"192685\">Vassil Peytchev</span> <a href=\"#narrow/stream/179280-fhir.2Finfrastructure-wg/topic/Reference.20search.20parameter.20and.20resource.20versions/near/242379758\">said</a>:</p>\n<blockquote>\n<p>Alternatively, what is the result if a search is using a non-versioned reference - is it supposed to match versioned and un-versioned  references, or only un-versioned ones?</p>\n</blockquote>",
        "id": 278022535,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649251496
    },
    {
        "content": "<p>My question was if everyone follows the interpretation of <span class=\"user-mention silent\" data-user-id=\"197072\">Paul Church</span> <a href=\"#narrow/stream/179280-fhir.2Finfrastructure-wg/topic/Reference.20search.20parameter.20and.20resource.20versions/near/242382255\">said</a>:</p>\n<blockquote>\n<p>Our interpretation was that an un-versioned search only matches un-versioned references, and :below doesn't apply here.</p>\n</blockquote>",
        "id": 278022685,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649251568
    },
    {
        "content": "<p>There is nothing in the spec indicate if it should match or not</p>",
        "id": 278022820,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649251633
    },
    {
        "content": "<p>I would expect that the Provenance instance is returned if I search using</p>\n<div class=\"codehilite\"><pre><span></span><code>[base]/Provenance?target=Patient/example/_history/1234\n</code></pre></div>\n<p>Should the instance also be returned if I use the latest / unversioned reference</p>",
        "id": 278024077,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649252181
    },
    {
        "content": "<p>Also note that the first paragraph of section <a href=\"https://www.hl7.org/fhir/search.html#reference\">\"3.1.1.4.12 reference\"</a> does not say that you are allowed to have history part in the search parameter value.</p>",
        "id": 278024693,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649252477
    },
    {
        "content": "<p>Does this clarify the question or am I missing something essential here?</p>",
        "id": 278025352,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649252728
    },
    {
        "content": "<p>I think the question is clear.  I'll say from a client perspective, if I'm trying to find all (current) Observations referencing Patient 123, it'd be confusing (and beyond my control) if some Observations weren't returned simply because they were referencing Patient 123 in a more specific way. (Note of course that even a version specific reference to Patient 123 might currently be pointing to the <em>latest version</em>, which surely every client searching by reference would want to find).</p>",
        "id": 278028455,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1649254029
    },
    {
        "content": "<p>I guess that is why i was confused on the question... because I agree with <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> that there is no possible way for this to be anyother way.</p>",
        "id": 278028739,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649254135
    },
    {
        "content": "<p>A quick test against different test servers result in different behaviour here. So I think it would be good to clarify this.</p>",
        "id": 278045878,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649260777
    },
    {
        "content": "<p><a href=\"https://jira.hl7.org/browse/FHIR-36716\">https://jira.hl7.org/browse/FHIR-36716</a></p>",
        "id": 278045880,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649260778
    },
    {
        "content": "<p><a href=\"https://jira.hl7.org/browse/FHIR-36715\">https://jira.hl7.org/browse/FHIR-36715</a></p>",
        "id": 278045898,
        "sender_full_name": "Alexander Zautke",
        "timestamp": 1649260787
    },
    {
        "content": "<p>I feel like there is a pitfall here, but I am not quite sure how to express it... apologies and thanks as I work through this in stream  =).</p>\n<p>I guess I am trying to figure out why/when resources are pinned to a specific version, and if it is safe to assume version resolution.</p>\n<p>For example, if you are resolving the target of an AuditEvent, it is likely <em>important</em> that it resolves only the exact version referenced (returning the current version would be wrong and could cause legal trouble).  So if I want to know exactly who accessed <code>Patient/example/_history/1234</code>, I do not want the records for version <code>1233</code>, nor do I want logs for version <code>1235</code>.</p>\n<p>In Josh's example, <em>why</em> would someone pin an Observation to a specific version of a patient?  If a system/app/user does that, is it safe for us to assume any other version is okay?</p>",
        "id": 278049132,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1649262006
    },
    {
        "content": "<p>This is not a question about when a version specific reference is a query parameter, I understood it as a question when a non-version specific reference is a query parameter, which is also different than a GET of a URL that is version or non-version specific (not search, read/vread).</p>",
        "id": 278050225,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649262521
    },
    {
        "content": "<p>if a version specific reference is in a query parameter, surely one should just return resources with that version specific reference (like the Provenance example). right?</p>",
        "id": 278050388,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649262598
    },
    {
        "content": "<p>If you search for prescriptions for Patient 123, you should get all MedicationRequests with a subject of Patient 123 - regardless of whether the references are version-specific or not.</p>",
        "id": 278050496,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649262624
    },
    {
        "content": "<p>agree</p>",
        "id": 278050536,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649262642
    },
    {
        "content": "<p>and I think that is the first example Alex provides.</p>",
        "id": 278050620,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649262691
    },
    {
        "content": "<p>the second perspective, that Gino is focused on, is where  search parameter includes a version specific value... that seems should only return for THAT version matching, not all. so what you specify in the search matters.</p>",
        "id": 278050778,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649262742
    },
    {
        "content": "<p>so</p>\n<blockquote>\n<p>[base]/Provenance?target=Patient/example/_history/1234</p>\n</blockquote>\n<p>should return only Provenance instances where .target has specifically version 1234 in it... not others.</p>\n<p>but</p>\n<blockquote>\n<p>[base]/Provenance?target=Patient/example</p>\n</blockquote>\n<p>should return ALL Provenance with any version of Patient/example</p>",
        "id": 278051094,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649262874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"193430\">Alexander Zautke</span> <a href=\"#narrow/stream/179280-fhir.2Finfrastructure-wg/topic/Reference.20search.20parameter.20and.20resource.20versions/near/278022685\">said</a>:</p>\n<blockquote>\n<p>My question was if everyone follows the interpretation of <span class=\"user-mention silent\" data-user-id=\"197072\">Paul Church</span> <a href=\"#narrow/stream/179280-fhir.2Finfrastructure-wg/topic/Reference.20search.20parameter.20and.20resource.20versions/near/242382255\">said</a>:</p>\n<blockquote>\n<p>Our interpretation was that an un-versioned search only matches un-versioned references, and :below doesn't apply here.<br>\n</p>\n</blockquote>\n</blockquote>\n<p>so this seems wrong</p>",
        "id": 278051210,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649262929
    },
    {
        "content": "<p>Thanks!</p>\n<p>Regarding the <code>below</code> modifier, we just 'audited' the modifier &lt;-&gt; type mappings (<a href=\"http://jira.hl7.org/browse/FHIR-36684\">FHIR-36684</a>), and <code>reference</code> does not have a definition for them.  Note that it doesn't mean it is not implementable (e.g., server-specific behavior), just that behavior is undefined according to the spec.</p>\n<p>I think the behavior of version searching needs to be clarified before the modifiers can be discussed though.  For example, if <code>target=Patient/example</code> implicitly includes references of <code>Patient/example/_history/x</code>, then the type already includes behavior equivalent to the <code>uri</code> definition of <code>below</code>.</p>",
        "id": 278053855,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1649264105
    },
    {
        "content": "<p>Re: uri search behavior vs reference search behalf... While canonical resources have an explicit notion of resource.version, this is different than resource.meta.versionId -- I'm not sure we want to conflate these</p>",
        "id": 278061472,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1649267589
    },
    {
        "content": "<p>Yes, I was referring to how <code>above</code> and <code>below</code> are already defined on <a href=\"http://build.fhir.org/search.html#uri\">uri</a>.  Namely that  <code>[Resource]/[id]</code> is hierarchically defined to exist above <code>[Resource]/[id]/_history/[version]</code> per a pathing mechanic on the uri.</p>",
        "id": 278064746,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1649268971
    },
    {
        "content": "<p>It does <em>not</em> do anything about actual version references (e.g., you cannot ask for versions above/below '3')</p>",
        "id": 278064953,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1649269015
    },
    {
        "content": "<p>is that needed? I understand an academic argument that it is possible, but struggle with real use-case.</p>",
        "id": 278066726,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649269802
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>  No idea on need/use, just noting that it is there and normative.</p>",
        "id": 278068047,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1649270439
    }
]