[
    {
        "content": "<p>Topic for next call: <a href=\"https://wiki.hl7.org/FHIR_NPM_Package_Spec\" target=\"_blank\" title=\"https://wiki.hl7.org/FHIR_NPM_Package_Spec\">https://wiki.hl7.org/FHIR_NPM_Package_Spec</a> describes a tooling specification that the toolsmiths need to be stable. At Atlanta firely and I discussed this and said we'd make a round of edits on the page, and then ask FHIR-I to formally take control of the spec, so that any further changes must be approved through committee. </p>\n<p>That time has now come.</p>",
        "id": 177187742,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570047138
    },
    {
        "content": "<p>Motion: that we leave this spec on the wiki, but add a note that any further non-trivial changes need to be approved by FHIR-I</p>\n<p>Alternative motion is to move it into the main spec, but it's very oblique to the spec. Orsome spec somewhere else. I don't feel strongly about this</p>",
        "id": 177189247,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570048137
    },
    {
        "content": "<p>I won't be on the call (travelling)</p>",
        "id": 177189264,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1570048151
    },
    {
        "content": "<p>I think it's time that this page moved to formal FHIR-I mgmt, and to some sort of 'tooling standard' point. (not sure what it's formal HL7 standard should be). But anyway, no changes without FHIR-I agreement now on:</p>\n<p><a href=\"https://wiki.hl7.org/FHIR_NPM_Package_Spec\" target=\"_blank\" title=\"https://wiki.hl7.org/FHIR_NPM_Package_Spec\">https://wiki.hl7.org/FHIR_NPM_Package_Spec</a></p>\n<p>(see  <a href=\"#narrow/stream/179166-implementers/topic/FHIR.20NPM.20packages\" title=\"#narrow/stream/179166-implementers/topic/FHIR.20NPM.20packages\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/FHIR.20NPM.20packages</a>)</p>\n<p>Also <a href=\"https://wiki.hl7.org/FHIR_Package_Cache\" target=\"_blank\" title=\"https://wiki.hl7.org/FHIR_Package_Cache\">https://wiki.hl7.org/FHIR_Package_Cache</a> and <a href=\"https://wiki.hl7.org/FHIR_IG_PackageList_doco\" target=\"_blank\" title=\"https://wiki.hl7.org/FHIR_IG_PackageList_doco\">https://wiki.hl7.org/FHIR_IG_PackageList_doco</a> too (<span class=\"user-mention\" data-user-id=\"191335\">@Martijn Harthoorn</span> )</p>",
        "id": 178440343,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571369104
    },
    {
        "content": "<p>Sounds right.</p>",
        "id": 178458996,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1571392012
    },
    {
        "content": "<p>Under package content there is a line \"All resources have a filename of [Type]-[id].json\". I remember we choose to write that as a SHOULD, because it's good as a best practice, but we should refrain from making it mandatory - since it would lead to tooling having it as expectation - and that will lead to future inflexibility.</p>",
        "id": 178952859,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1571924808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 178952889,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1571924828
    },
    {
        "content": "<p>no it must be a SHALL</p>",
        "id": 178975644,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571937887
    },
    {
        "content": "<p>there's no reason for flexibility on this in a package, and a reason for not: it makes it much much quicker to load a package - something you are are usually very concerned with</p>",
        "id": 178975719,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1571937922
    },
    {
        "content": "<p>My thoughts on this:<br>\n-  In our tools we use .index.json to load a package<br>\n<a href=\"#narrow/stream/179177-conformance/topic/Package.20rework/near/168938409\" title=\"#narrow/stream/179177-conformance/topic/Package.20rework/near/168938409\">https://chat.fhir.org/#narrow/stream/179177-conformance/topic/Package.20rework/near/168938409</a><br>\n- Id is scoped and can be re-assigned per server. A package trancends that scope.<br>\n- Id has a cardinality of 0..1 and It is very common for draft conformance resources to not (yet) have an Id.</p>",
        "id": 179030619,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1571991563
    },
    {
        "content": "<p>Requiring both a mandatory index file and mandatory file name patterns seems redundant? I'd prefer to require an index file and not restrict file names.</p>",
        "id": 179032219,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1571993268
    },
    {
        "content": "<p>Does Forge set an id on a StructureDefinition?</p>",
        "id": 179034703,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1571995582
    },
    {
        "content": "<p>Forge allows authors to specify a Resource Id. However when uploading to a FHIR server, the server may reject the specified ID and assign another one. After publishing a profile to a FHIR server/Simplifier, Forge updates the <code>Resource.id</code> and publishing date values. If the server assigned a (new/other) id, then Forge will mark the Resource as \"dirty\" (i.e. having unsaved changes), to ensure that users save back the updated resource with the newly assigned id to local disk.</p>",
        "id": 179036848,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1571997822
    },
    {
        "content": "<p>Before we lock it, it should be moved to Confluence.</p>",
        "id": 179047677,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572009091
    },
    {
        "content": "<p>using .index.json is not a substitute for an organised naming strategy. The key thing - absolutely critical - is that you don't have to read every resource in the package to find out what kind of resource it is. You just scan the directory for the resource types you are looking for. What is proposed for .index.json doesn't substitute for that.</p>",
        "id": 179085194,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572034561
    },
    {
        "content": "<p>This is mandatory for me</p>",
        "id": 179085241,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572034566
    },
    {
        "content": "<p>I don't understand either of these points:</p>\n<blockquote>\n<p>- Id is scoped and can be re-assigned per server. A package trancends that scope.</p>\n</blockquote>\n<p>uh what? I don't see how that matters. the id is fixed in the package itself</p>\n<blockquote>\n<p>- Id has a cardinality of 0..1 and It is very common for draft conformance resources to not (yet) have an Id.</p>\n</blockquote>\n<p>then they can't be part of a package since it means they are not stored anywhere</p>",
        "id": 179085322,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572034652
    },
    {
        "content": "<p>I don't understand why it's an issue either. Humans don't read the packages</p>",
        "id": 179085456,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572034735
    },
    {
        "content": "<p>I see that I overlooked adding anything about .index.json to the package spec btw</p>",
        "id": 179085683,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572034907
    },
    {
        "content": "<p>I understand the performance requirements.</p>\n<p>Indexing based on mandatory file name patterns is indeed the fastest and easiest solution, at the cost of being inflexible and brittle. Package authors lose the original resource file names, depending on their internal workflow. And the proposed file name pattern provide only resource type &amp; id, whereas clients need to index other metadata as well.</p>\n<p>The metadata harvesting logic in the open source .NET API is much more flexible and sufficiently fast for us not to have to rely on file name patterns. The Forge project explorer depends on it. As this demonstrates that the perceived performance problems can be addressed, I'd much rather see a recommendation for a file name pattern instead of a hard requirement.</p>",
        "id": 179130609,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1572104459
    },
    {
        "content": "<blockquote>\n<p>The metadata harvesting logic in the open source .NET API is much more flexible and sufficiently fast for us not to have to rely on file name patterns</p>\n</blockquote>\n<p>this is in .index.json? All that is in there at the moment is canonical URLs. If we can add to that, then that would be basis for going forwards</p>",
        "id": 179147318,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572135498
    },
    {
        "content": "<p>for instance, if we had this:</p>",
        "id": 179147483,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572135945
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;index-version&quot;</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;canonicals&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;[url]&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;[filename]&quot;</span><span class=\"p\">,</span>\n    <span class=\"err\">etc..</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">&quot;types&quot;</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;[type}&quot;</span> <span class=\"err\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;filename&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;filename&quot;</span><span class=\"p\">],</span>\n    <span class=\"err\">etc..</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">&quot;date&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;[date]&quot;</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 179147523,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572135974
    },
    {
        "content": "<p>index-version = 1 fixed value. if you see anything different, rebuild the .index.json<br>\ncanonicals = a list of canonical URLs in the package<br>\ntypes = a list of resources by type<br>\ndate = date the file was added to the cache it is in (purely for display purposes)</p>",
        "id": 179147530,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572136068
    },
    {
        "content": "<p>if we had that, I wouldn't care what the files are called</p>",
        "id": 179147536,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572136077
    },
    {
        "content": "<p>also, the canonicals should have a version using the |[ver] format</p>",
        "id": 179147701,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572136439
    },
    {
        "content": "<p>so example of what I'm talking about - I populated all the packages here <a href=\"https://github.com/FHIR/packages\" target=\"_blank\" title=\"https://github.com/FHIR/packages\">https://github.com/FHIR/packages</a></p>",
        "id": 179153184,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572147995
    },
    {
        "content": "<p>they all have a .index.json now</p>",
        "id": 179153519,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572148751
    },
    {
        "content": "<p>emerging issue: should examples have it's own .index.json?</p>",
        "id": 179157707,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572158033
    },
    {
        "content": "<p>Sounds good.</p>\n<p>Maybe it's more convenient to restructure the index as a list of complex file info nodes? Each node would represent a single file and contain a set of metadata properties (filename, canonical url, resource type, ...). This would also allow for additional polymorphic metadata, e.g. depending on the resource type. Clients can easily generate lookup tables from the index file, e.g. profiles by url, examples by profile etc. The format is also easily extensible by adding new metadata properties.</p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;index-version&quot;</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;date&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;[date]&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;files&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;filename&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;nl-core-patient.json&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;nl-core-patient&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;resourcetype&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;StructureDefinition&quot;</span>\n      <span class=\"s2\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://fhir.nl/fhir/StructureDefinition/nl-core-patient&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;kind&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Resource&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Patient&quot;</span><span class=\"p\">,</span>\n      <span class=\"err\">etc..</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;filename&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;nl-core-address-official.json&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;nl-core-address-official&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;resourcetype&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;StructureDefinition&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://fhir.nl/fhir/StructureDefinition/nl-core-address-official&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;kind&quot;</span><span class=\"p\">:</span><span class=\"s2\">&quot;complex-type&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Extension&quot;</span><span class=\"p\">,</span>\n      <span class=\"err\">etc..</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;filename&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;nl-core-patient-example-1.json&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;nl-core-patient-example-1&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;resourcetype&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Patient&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;profile&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://fhir.nl/fhir/StructureDefinition/nl-core-patient&quot;</span><span class=\"p\">,</span>\n      <span class=\"err\">etc...</span>\n    <span class=\"p\">},</span>\n    <span class=\"err\">etc..</span>\n  <span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"191335\">@Martijn Harthoorn</span> ?</p>",
        "id": 179178359,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1572195633
    },
    {
        "content": "<p>I don't mind this, though I worry about complexity and size</p>",
        "id": 179188022,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572212020
    },
    {
        "content": "<p>I regenerated the base packages - about twice the size. committed them, so you can look at them</p>",
        "id": 179189387,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572214370
    },
    {
        "content": "<p>Grahame, <br>\nAssuming you can live without a mandatory type-id.json format<br>\nTechnically I think the package spec and the package cache spec are good to go. <br>\nThere are some textual improvements (without technical implications) still possible (like removing some duplications).</p>",
        "id": 179246155,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1572279001
    },
    {
        "content": "<p>Yes I no longer care about the name of the file</p>",
        "id": 179274298,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572295832
    },
    {
        "content": "<p>ok I update the wiki page, consistent with what I think the decision was.</p>",
        "id": 179296735,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572318823
    },
    {
        "content": "<p>We'll pretend that happened before the FHIR-I WG locked the page.  Any further changes require a vote.</p>",
        "id": 179296996,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1572319193
    },
    {
        "content": "<p>ok we can pretend that</p>",
        "id": 179297074,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572319320
    },
    {
        "content": "<p>so...... immediately after agreeing that the package specification was under FHIR-I control, I've had to make emergency changes to the spec in order to get the technical corrections published.</p>",
        "id": 179501759,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572497932
    },
    {
        "content": "<p>- I added a 'fhir-version-list' property to the npm package.json file, an array of string</p>\n<p>This is added so that a tool an always tell what fhir-versions the package is for. This was necessary because in the past, the package would simply refer to the core dependency, even if the package it was referring to didn't- and would never - exist. Now, they can't refer to packages that don't exist. So package references can no longer tell you what FHIR version except for the major releases. And many of our balloted IGs don't depend on a major release. This won't be possible in the future anyway, so there'll be no more new IGs like this</p>\n<p>- I added \"sub-packages\" - array of string - to package-list.json</p>\n<p>This was because we now publish the main spec as a set of packages, and I had to know about them somewhere - it's only a message to the publishing tool that builds the package RSS feed</p>",
        "id": 179501772,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572497967
    },
    {
        "content": "<p>FHIR-I please approve these on Monday's call. (and sorry, but I'm cleaning up an old mess and adding functionality we already agreed to, but I hadn't seen the ramifications of)</p>",
        "id": 179501822,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572498009
    },
    {
        "content": "<p>I already updated the documentation</p>",
        "id": 179501844,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572498067
    },
    {
        "content": "<p>It's not problematic to add custom properties to the package.json, as long as they can safely be ignored by other tools and don't overlap with existing properties.</p>",
        "id": 179517256,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1572516891
    },
    {
        "content": "<p>And with the fhir-version-list i agree.</p>",
        "id": 179517275,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1572516907
    },
    {
        "content": "<p>Would it be more inline with other properties to just call the property fhirVersions?</p>",
        "id": 179517403,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1572516987
    },
    {
        "content": "<p>there was no camel case elements, so I wasn't sure. It's kind of hard to change it now</p>",
        "id": 179517564,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572517111
    },
    {
        "content": "<p>devDependencies</p>",
        "id": 179517699,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1572517202
    },
    {
        "content": "<p>?</p>",
        "id": 179517741,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572517220
    },
    {
        "content": "<p>is an example of a camel case property in package.json</p>",
        "id": 179517805,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1572517279
    },
    {
        "content": "<p>I'm not familiar with it?</p>",
        "id": 179517817,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572517293
    },
    {
        "content": "<p>Neither am I. We don't use it for the fhir package spec. But it shows the pattern.</p>",
        "id": 179517897,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1572517331
    },
    {
        "content": "<p>oh, I only looked at what we used. If I'm going to change it, I have to change it now...</p>",
        "id": 179517991,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572517404
    },
    {
        "content": "<p>It will ease your concsiousness ;)</p>",
        "id": 179518008,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1572517421
    },
    {
        "content": "<p>hah. it will cost me time...</p>",
        "id": 179518013,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572517431
    },
    {
        "content": "<p>but done anyway</p>",
        "id": 179519525,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572518738
    },
    {
        "content": "<p>I will add it to our (new) packages too.</p>",
        "id": 179522426,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1572521417
    },
    {
        "content": "<p>What will the format of the fhir version be? \"3.0.1\" or \"r3\" or just 3?</p>",
        "id": 179535810,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1572531858
    },
    {
        "content": "<p>whihc bit are you asking aout?</p>",
        "id": 179554896,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572542865
    },
    {
        "content": "<p>The bit in package.json - fhirVersions property.</p>",
        "id": 179618330,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1572608368
    },
    {
        "content": "<p>3.0.1 - full 3 parts</p>",
        "id": 179621972,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572611945
    },
    {
        "content": "<p>for me, r2 | r2b | r3 | r4 | r5 are codes for a 3 letter version e.g. 1.0, 1.4, 3.0, 4.0, and 4.1. These are independent of patch. But version references in packages are always version referenced. (at the moment)</p>",
        "id": 179622058,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1572612034
    },
    {
        "content": "<p>at DevDays, <span class=\"user-mention\" data-user-id=\"192833\">@Hans Buurman</span> (I think) claimed to me that the NPM Spec is invalid because it allows siblings directories to \\packages, and we have made extensive use of them</p>",
        "id": 181766179,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574611253
    },
    {
        "content": "<p>And indeed, from <a href=\"http://wiki.commonjs.org/wiki/Packages/1.0#Package_File_Format\" target=\"_blank\" title=\"http://wiki.commonjs.org/wiki/Packages/1.0#Package_File_Format\">http://wiki.commonjs.org/wiki/Packages/1.0#Package_File_Format</a>: </p>\n<blockquote>\n<p>The archive must have a single top level directory.</p>\n</blockquote>",
        "id": 181766512,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574611787
    },
    {
        "content": "<p>So what I propose:</p>\n<ul>\n<li>update the FHIR NPM Package spec to also say this, and say that sub-folders of the package spec are not described (instead of siblings)</li>\n<li>regenerate all the packages on <a href=\"http://hl7.org/fhir.org\" target=\"_blank\" title=\"http://hl7.org/fhir.org\">hl7.org/fhir.org</a> to use subfolders instead of sibling folders</li>\n<li>reload on <a href=\"http://packages.fhir.org\" target=\"_blank\" title=\"http://packages.fhir.org\">packages.fhir.org</a></li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"191335\">@Martijn Harthoorn</span> - thoughts?</p>",
        "id": 181766941,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574612352
    },
    {
        "content": "<p>we should also clarify that the name of the filename in .index.json is local to the same directory as the .index.json file, and that there is one .index.json file per directory (and that it is not mandatory for directories)</p>",
        "id": 181774220,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574624249
    },
    {
        "content": "<p>(inside the package)</p>",
        "id": 181774223,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574624256
    },
    {
        "content": "<p>also, reviewing the packages (again) - some old SDC versions didn't use semver. I think I should retrospectively update them - both package, resources, and html files - to use semver. <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> </p>\n<p>1.6 -&gt; 1.6.0<br>\n2 -&gt; 2.0<br>\n1.6 -&gt; 1.6.0<br>\n2 - 2.0.0</p>",
        "id": 181775442,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574626000
    },
    {
        "content": "<p>Ok</p>",
        "id": 181775699,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1574626363
    },
    {
        "content": "<p>Does the change to npm impact the way folders need to be organized in IG templates?</p>",
        "id": 181775719,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1574626409
    },
    {
        "content": "<p>no</p>",
        "id": 181778224,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574630047
    },
    {
        "content": "<p>it's all generated</p>",
        "id": 181778227,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574630055
    },
    {
        "content": "<p>This was <span class=\"user-mention\" data-user-id=\"218569\">@Hans van Amstel</span>'s comment <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> Would be great to add his voice  to this conversation, as well that of the guys from Black Pear who had an opinion on this (<span class=\"user-mention\" data-user-id=\"191325\">@Dunmail</span>?)</p>",
        "id": 181807347,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1574676562
    },
    {
        "content": "<p>It was me! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 181808460,
        "sender_full_name": "Dunmail",
        "timestamp": 1574677662
    },
    {
        "content": "<p>As JS developer, making FHIR profiles available in packages that can be natively used in JS will be a massive leap forward because we have definitive source artefacts to use as the basis for tooling etc.</p>\n<p>We understand the decision to provide the packages via a different repository. This is OK. </p>\n<p>We have confirmed that we can use npm to pull a root package from the FHIR repo. However, the dependencies don't come down <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<p>I wonder if we could do something clever with a post-install script - any intention to use these for FHIR packages?</p>",
        "id": 181810075,
        "sender_full_name": "Dunmail",
        "timestamp": 1574678982
    },
    {
        "content": "<p>It was that Hans yes</p>",
        "id": 181818103,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574685516
    },
    {
        "content": "<p>We’ve said that we will prohibit scripts - security nightmare</p>",
        "id": 181818184,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574685577
    },
    {
        "content": "<blockquote>\n<p>We’ve said that we will prohibit scripts - security nightmare</p>\n</blockquote>\n<p>Fair enough. Will keep thinking!</p>",
        "id": 181819963,
        "sender_full_name": "Dunmail",
        "timestamp": 1574686974
    },
    {
        "content": "<blockquote>\n<p>We’ve said that we will prohibit scripts - security nightmare</p>\n</blockquote>\n<p>Next line of attack!</p>\n<p>If the publisher adds a <code>package-lock.json</code>, the dependencies should resolve correctly using npm.<br>\n<code>package.json</code>:</p>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;name&quot;: &quot;fhir-package&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;dependencies&quot;: {\n    &quot;hl7.fhir.r3.profiles&quot;: &quot;^3.0.1-preview2&quot;\n  }\n}\n</pre></div>\n\n\n<p><code>package-lock.json</code>:</p>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;name&quot;: &quot;fhir-package&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;lockfileVersion&quot;: 1,\n  &quot;requires&quot;: true,\n  &quot;dependencies&quot;: {\n    &quot;hl7.fhir.r3.profiles&quot;: {\n      &quot;version&quot;: &quot;3.0.1-preview2&quot;,\n      &quot;resolved&quot;: &quot;https://packages.simplifier.net//hl7.fhir.r3.profiles/-/hl7.fhir.r3.profiles-3.0.1-preview2.tgz&quot;,\n      &quot;integrity&quot;: &quot;sha512-zPU5H8lWyM1D/6cWWYG6TXBHJGEPEwVi8GsOkkrh5bbjYSMdVM0ZABOC0Xbdxtxoln3RChZekdFx9Cz1eDL5gQ==&quot;,\n      &quot;requires&quot;: {\n        &quot;hl7.fhir.r3.profiles.extensions&quot;: &quot;3.0.1-preview1&quot;,\n        &quot;hl7.fhir.r3.profiles.others&quot;: &quot;3.0.1-preview1&quot;,\n        &quot;hl7.fhir.r3.profiles.resources&quot;: &quot;3.0.1-preview1&quot;,\n        &quot;hl7.fhir.r3.profiles.types&quot;: &quot;3.0.1-preview1&quot;\n      }\n    },\n    &quot;hl7.fhir.r3.profiles.extensions&quot;: {\n      &quot;version&quot;: &quot;3.0.1-preview1&quot;,\n      &quot;resolved&quot;: &quot;https://packages.simplifier.net//hl7.fhir.r3.profiles.extensions/-/hl7.fhir.r3.profiles.extensions-3.0.1-preview1.tgz&quot;,\n      &quot;integrity&quot;: &quot;sha512-uzc1Zn6/RF3UBTSJ2m+/Auxd3Ma+PIJGIJksniSWUJtuJ1pN8COwn1IbuMWkTcHDzDkg5HXUvVUlbNz4nWl5sg==&quot;\n    },\n    &quot;hl7.fhir.r3.profiles.others&quot;: {\n      &quot;version&quot;: &quot;3.0.1-preview1&quot;,\n      &quot;resolved&quot;: &quot;https://packages.simplifier.net//hl7.fhir.r3.profiles.others/-/hl7.fhir.r3.profiles.others-3.0.1-preview1.tgz&quot;,\n      &quot;integrity&quot;: &quot;sha512-GlscITM9wBAL92e4JI2GSnHO0sM6cYIIjMur+gXKeoyh8WE0aahupCq+jNeJ6Buglrq2EYc7v2I05HHzMiA7Uw==&quot;\n    },\n    &quot;hl7.fhir.r3.profiles.resources&quot;: {\n      &quot;version&quot;: &quot;3.0.1-preview1&quot;,\n      &quot;resolved&quot;: &quot;https://packages.simplifier.net//hl7.fhir.r3.profiles.resources/-/hl7.fhir.r3.profiles.resources-3.0.1-preview1.tgz&quot;,\n      &quot;integrity&quot;: &quot;sha512-HRRUd3T/AdR4B4JJc9YPOxcqFGf8CxwtwEojpBPVnafg4+0KizF3DINmYgNtnYdaJq/JUhrhd9NKqL6jeMBpPQ==&quot;\n    },\n    &quot;hl7.fhir.r3.profiles.types&quot;: {\n      &quot;version&quot;: &quot;3.0.1-preview1&quot;,\n      &quot;resolved&quot;: &quot;https://packages.simplifier.net//hl7.fhir.r3.profiles.types/-/hl7.fhir.r3.profiles.types-3.0.1-preview1.tgz&quot;,\n      &quot;integrity&quot;: &quot;sha512-Si02FU/olOVGONL6n0Ac2acmaR3Uwlq/ewYf0FjPBzzsbcK4+4OqN8y2bprB8qDG63UGBgrw+ykbpTUE4itZyA==&quot;\n    }\n  }\n}\n</pre></div>",
        "id": 181820806,
        "sender_full_name": "Dunmail",
        "timestamp": 1574687684
    },
    {
        "content": "<p>The problem I have with the current format is that it does not allow me to use the default NPM tooling like: <code>nmp publish</code> and <code>npm pack</code>. Also having the package.json in the same folder as the resources is not really desirable as it contains different content as the other json files. </p>\n<p>Which tools, commands did you use for creating the hl7 packages?</p>\n<p>I agree it is not clearly written in the documentation. A package is created from a directory that contains a package.json file and the content. When creating a package of a directory that contains a package.json file a package directory is created by the npm tools that contains all the files and directories including the package.json file. This package directory is then the main entry point of the npm package, as shown below.  The directory name is used as the package name. <br>\nThis is described in: <a href=\"https://docs.npmjs.com/cli/publish\" target=\"_blank\" title=\"https://docs.npmjs.com/cli/publish\">https://docs.npmjs.com/cli/publish</a>, <a href=\"https://docs.npmjs.com/creating-a-package-json-file\" target=\"_blank\" title=\"https://docs.npmjs.com/creating-a-package-json-file\">https://docs.npmjs.com/creating-a-package-json-file</a> and <a href=\"https://docs.npmjs.com/misc/developers\" target=\"_blank\" title=\"https://docs.npmjs.com/misc/developers\">https://docs.npmjs.com/misc/developers</a></p>\n<p>I would like to propose the following package structure:<br>\n<strong>&lt;package-name&gt;</strong><br>\n-   <strong>package</strong><br>\n- -<strong>json</strong> Mandatory (json snapshots)<br>\n- - <strong>xml</strong> optional (xml snapshots)<br>\n- -<strong>customSubdir</strong> optional (n times)<br>\n- -<strong>package.json</strong> mandatory</p>\n<p>The in between package folder is added by the tools. I used <code>npm install</code> and <code>npm pack</code> on the following directory structure to create the above package:</p>\n<p><strong>&lt;package-name&gt;</strong><br>\n-   <strong>json</strong> Mandatory (json snapshots)<br>\n-   <strong>xml</strong> optional (xml snapshots)<br>\n-   <strong>customSubdir</strong> optional (n times)<br>\n-   <strong>package.json</strong></p>",
        "id": 181820814,
        "sender_full_name": "Hans van Amstel",
        "timestamp": 1574687694
    },
    {
        "content": "<blockquote>\n<p>The problem I have with the current format is that it does not allow me to use the default NPM tooling like: <code>nmp publish</code> and <code>npm pack</code>. </p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 181822299,
        "sender_full_name": "Dunmail",
        "timestamp": 1574688871
    },
    {
        "content": "<blockquote>\n<p>The problem I have with the current format is that it does not allow me to use the default NPM tooling like: nmp publish and npm pack</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"218569\">@Hans van Amstel</span> <span class=\"user-mention\" data-user-id=\"191325\">@Dunmail</span> do the changes I proposed above resolve this?</p>",
        "id": 181835933,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574697854
    },
    {
        "content": "<p>I don't understand the bit about package-lock.json. Why is package.json not sufficient?</p>",
        "id": 181835983,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574697896
    },
    {
        "content": "<blockquote>\n<p>I don't understand the bit about package-lock.json. Why is package.json not sufficient?</p>\n</blockquote>\n<p>npm is configured with a default package repository.<br>\nnpm can install a package from an alternate repository (e.g. <a href=\"http://simplifier.net\" target=\"_blank\" title=\"http://simplifier.net\">simplifier.net</a>) but will try to resolve any dependencies in package.json from the default package repository (typically <a href=\"http://npmjs.com\" target=\"_blank\" title=\"http://npmjs.com\">npmjs.com</a>).<br>\nIn this case, npm fails to install dependencies.</p>\n<p>package-lock.json has supplementary info including the location from which the dependency was resolved. <br>\nnpm will use this information to resolve the dependencies from the the location described in package-lock.json (e.g. <a href=\"http://simplifier.net\" target=\"_blank\" title=\"http://simplifier.net\">simplifier.net</a>)<br>\nIn this case, npm installs the dependencies.</p>\n<p>I think it would be relatively easy to add package-lock.json as a step in the <a href=\"http://simplifier.net\" target=\"_blank\" title=\"http://simplifier.net\">simplifier.net</a> publish service.</p>\n<p>Happy to put a pair of demo packages onto <a href=\"http://npmjs.com\" target=\"_blank\" title=\"http://npmjs.com\">npmjs.com</a> if that helps!</p>",
        "id": 181841072,
        "sender_full_name": "Dunmail",
        "timestamp": 1574700923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  Where can I see these proposed changes?</p>",
        "id": 181896621,
        "sender_full_name": "Hans van Amstel",
        "timestamp": 1574753981
    },
    {
        "content": "<blockquote>\n<p>What I propose:<br>\n1. update the FHIR NPM Package spec to also say this, and say that sub-folders of the package spec are not described (instead of siblings)<br>\n2. regenerate all the packages on <a href=\"http://hl7.org/fhir.org\" target=\"_blank\" title=\"http://hl7.org/fhir.org\">hl7.org/fhir.org</a> to use subfolders instead of sibling folders<br>\n3. reload on <a href=\"http://packages.fhir.org\" target=\"_blank\" title=\"http://packages.fhir.org\">packages.fhir.org</a></p>\n</blockquote>",
        "id": 181896764,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574754235
    },
    {
        "content": "<p>turns out that i accidentally uploaded the revised packages overnight - so you can check say <a href=\"http://hl7.org/fhir/us/core/package.tgz\" target=\"_blank\" title=\"http://hl7.org/fhir/us/core/package.tgz\">http://hl7.org/fhir/us/core/package.tgz</a> to see the change in practice</p>",
        "id": 181896815,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574754276
    },
    {
        "content": "<p>The structure that is used in <a href=\"http://hl7.org/fhir/us/core/package.tgz\" target=\"_blank\" title=\"http://hl7.org/fhir/us/core/package.tgz\">http://hl7.org/fhir/us/core/package.tgz</a>, to have the content under the package folder instead of siblings, works well with <code>npm pack</code> and <code>npm install</code>. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <br>\nWhat is the reason to not have a json sub folder as now the the package.json file is somewhere in the list of json fhir resources. For the tooling it does not matter but tools using the resources must now filter out the package.json file. I have no real preferences other than that it looks a bit cleaner. </p>\n<p><span class=\"user-mention\" data-user-id=\"191325\">@Dunmail</span>  Why is a <code>package-lock.json</code> in the package needed.  According to the documentation it is recommended not to publish this. If the problem is that the dependencies are not pulled for the fhir repo you can try <code>npm config set registry &lt;FHIRrepoURL&gt; </code> before installing. This will make <code>npm install</code> try to pull all the dependencies from the registry at &lt;FHIRrepoURL&gt;. One of the big drawbacks when using <code>package-lock.json</code> is is that it only works for the top package. This means that when I have a package that depends on a package which contains a <code>package-lock.json</code> this <code>package-lock.json</code> from the dependency is ignored and the original problem remains.</p>",
        "id": 181908743,
        "sender_full_name": "Hans van Amstel",
        "timestamp": 1574764710
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"191325\">Dunmail</span>  Why is a <code>package-lock.json</code> in the package needed.  According to the documentation it is recommended not to publish this. If the problem is that the dependencies are not pulled for the fhir repo you can try <code>npm config set registry &lt;FHIRrepoURL&gt; </code> before installing. This will make <code>npm install</code> try to pull all the dependencies from the registry at &lt;FHIRrepoURL&gt;. One of the big drawbacks when using <code>package-lock.json</code> is is that it only works for the top package. This means that when I have a package that depends on a package which contains a <code>package-lock.json</code> this <code>package-lock.json</code> from the dependency is ignored and the original problem remains.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"218569\">@Hans van Amstel</span><br>\nWe'd like to create a service that includes a mix of FHIR packages and standard packages so resetting the npm registry isn't a practical option.</p>\n<p>It's possible that a <code>package-lock.json</code> isn't the solution!</p>",
        "id": 181909428,
        "sender_full_name": "Dunmail",
        "timestamp": 1574765289
    },
    {
        "content": "<p>I am <br>\n- fine with moving the folders to be subfolders of /package/<br>\n- careful to negative about moving resources to /package/json, because it would break all packages that have already been produced.<br>\n- \"regenerate all the packages on <a href=\"http://hl7.org/fhir.org\" target=\"_blank\" title=\"http://hl7.org/fhir.org\">hl7.org/fhir.org</a>\" is not really a thing in the world of packes. People depend on it. With some effort, we can make it work once, but I strongly hope this is not going to be a regular practice.</p>",
        "id": 181915924,
        "sender_full_name": "Martijn Harthoorn",
        "timestamp": 1574771200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191335\">@Martijn Harthoorn</span> I agree that this should not be regular practice. But the structure as defined was in proposal, as I understood from the DevDays2019 talk. <br>\nAbout moving the resources to /package/json I do not have a real preference but as the packages needs to be regenerated it can be done in one go. </p>\n<p><span class=\"user-mention\" data-user-id=\"191325\">@Dunmail</span> I get the need for this we actually have the same need and use for this a setup with a virtual registry that contains a local registry and a remote one. This has the added advantage that it also functions as a caching proxy and therefore are less depended on packages to not change just before doing a release for example. But I think this is beyond the discussion of the package format.</p>",
        "id": 181921886,
        "sender_full_name": "Hans van Amstel",
        "timestamp": 1574775898
    },
    {
        "content": "<blockquote>\n<p>Regenerate all the packages </p>\n</blockquote>\n<p>I agree that this is not something we should do regularly. And in fact, I only propose this because I don’t care whether it gets distributed or not. But it would be good to get them into <a href=\"http://packages.fhir.org\" target=\"_blank\" title=\"http://packages.fhir.org\">packages.fhir.org</a></p>",
        "id": 181928023,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574779899
    },
    {
        "content": "<blockquote>\n<p>careful to negative about moving resources to /package/json, because it would break all packages that have already been produced.</p>\n</blockquote>\n<p>I basically agree with this. Sure, we could do it, but it's not hard to separate out package.json and .index.json (and .index.json will still exist)</p>",
        "id": 181957109,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1574797865
    }
]