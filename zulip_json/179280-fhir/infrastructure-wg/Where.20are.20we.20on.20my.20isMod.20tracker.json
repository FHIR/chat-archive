[
    {
        "content": "<p>From our last discussion the only person who seems to have a grasp of isMod is Lloyd.  So I think:</p>\n<p>a) We let Lloyd be the isMod authority which I don't think is scalable. </p>\n<p>b)  We scrap it as undefinable - because most people can't come up with isMod reason outside a tautological rehash of the current isMod definition (' 'cause it shouldn't be ignored! ') I don't see how we can apply it with any consistency and thus seriously undermining its utility.</p>\n<p>c)  Ask the community whether they pay attention to it in the real world and whether they need something beyond required and must support.   maybe an 'ATTENTION' extension flag to indicate need to pay special attention to element.</p>",
        "id": 153971615,
        "sender_full_name": "Eric Haas",
        "timestamp": 1529944295
    },
    {
        "content": "<p>when would you not set ATTENTION! ?</p>",
        "id": 153971632,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1529955125
    },
    {
        "content": "<p>This has nothing to do with \"attention\".  It has to do with whether an element is safe to ignore.  Most elements are.  You can easily ignore patient name, gender, date of birth, etc.  They don't change the meaning of the other data.   Safety to ignore is critical to get agreement on because if we don't have that, then it won't be clear when to use modifierExtension vs. not.  And if that's not true. then you can't safely ignore any extensions.  And if that happens, FHIR is in deep trouble because it suddenly means you have to build a custom interface for every system you talk to and coordinate updates with all of your communication partners.</p>",
        "id": 153971638,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1529956919
    },
    {
        "content": "<p>when would you not set ATTENTION == when would you not set isMod</p>\n<p>To me the bigger issue is the difficulty in <em>consistently</em> applying this flag undermines its utility.  Its too contextual to determine what and what can't be ignored.</p>",
        "id": 153971686,
        "sender_full_name": "Eric Haas",
        "timestamp": 1529971989
    },
    {
        "content": "<p>The idea that if there is no flag you can say \"whew' that is not going to affect some safety issue\" is itself a safety issue.   What is meant by 'safe' anyways?</p>",
        "id": 153971687,
        "sender_full_name": "Eric Haas",
        "timestamp": 1529972125
    },
    {
        "content": "<p>so you're just moving the deck chairs around.</p>",
        "id": 153971695,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1529983058
    },
    {
        "content": "<p>take Patient Gender: anyone can construct a workflow example where it's critical that you don't ignore it.</p>",
        "id": 153971696,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1529983079
    },
    {
        "content": "<p>that doesn't make it a modifier: every element in FHIR is present because it's critical for some reason or other, and we fully expect every element to be impossible to ignore in some workflow</p>",
        "id": 153971697,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1529983122
    },
    {
        "content": "<p>what makes an element a modifier is that it modifies the interpretation of the parent element or a sibling element by changing it's meaning - either negating it, or qualifying it significantly.</p>",
        "id": 153971698,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1529983185
    },
    {
        "content": "<p>e.g. entered in error</p>",
        "id": 153971699,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1529983205
    },
    {
        "content": "<p>The key here is \" it modifies the interpretation of the parent element or a sibling element by changing it's meaning\"  <strong>interpreted by Whom?</strong>  </p>\n<p>Still a concern that if is not applied consistently then is unreliable.</p>",
        "id": 153971707,
        "sender_full_name": "Eric Haas",
        "timestamp": 1529984748
    },
    {
        "content": "<p>we're still waiting for Lloyd to do doco on this, no?</p>",
        "id": 153971709,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1529985263
    },
    {
        "content": "<p>I'll see what I can do during my meetings today</p>",
        "id": 153971724,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1529993447
    },
    {
        "content": "<p>The bottom line is that despite Lloyd's dulcet prose, IsMod will always be subjective and thus unevenly applied.  Like mustSupport, its usefulness is closer to the implementation level, but I don't think it is appropriate in the base.</p>",
        "id": 153971804,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530022974
    },
    {
        "content": "<p>If isMod is subjective, we're in deep trouble.  There may be situations where the meaning of the resource itself is subjective, and the setting of isMod will need to take that into account.  But the meaning of isMod should never be subjective.</p>",
        "id": 153971889,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530037247
    },
    {
        "content": "<p>It needs to be in the base for two reasons:<br>\n1. To give examples to implementers to help them decide whether new extensions need to be modifier extensions or not<br>\n2. To identify places where future values are also allowed to be modifier values.  For example, where \"status\" is a modifier element, then we could introduce future codes that are themselves modifiers.  But we wouldn't be able to do that for gender, for example.</p>",
        "id": 153971891,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530037363
    },
    {
        "content": "<p>What I meant is the interpretation whether an element is an IsMod will always be subjective.</p>",
        "id": 153971904,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530040992
    },
    {
        "content": "<p>If the rules are clear, the interpretation shouldn't be subjective.</p>",
        "id": 153971917,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530041860
    },
    {
        "content": "<p>...</p>",
        "id": 153971928,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530042792
    },
    {
        "content": "<p>(I'm working on it :))</p>",
        "id": 153971934,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530043088
    },
    {
        "content": "<p>Seems you are re-inventing the mustUnderstand property found in SOAP. I think that concept is far more clear than isModifier.    ..    <a href=\"https://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383500\" target=\"_blank\" title=\"https://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383500\">https://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383500</a></p>",
        "id": 153971965,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530047539
    },
    {
        "content": "<p>Must-understand implies that systems can't ignore the element - which is untrue.  If I don't care if a Patient is actually still a patient, I can ignore the deceased[x] and active elements.  I just have to understand what impact those elements could have on the resource in making my decision to ignore.</p>",
        "id": 153971972,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530047802
    },
    {
        "content": "<p>I am very confused by this... How will an app have any idea that an isModifier is ignorable if it doesn't understand it? It seems to me that isModifier is a must understand concept. One can ignore it, but you must understand it. Yes in SOAP they say that you must process it, but they never defined what process..... All of these fail in the same way... what does \"Modifier\" mean? what does \"Support\" mean? what does \"Process\" mean?</p>",
        "id": 153971986,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530055730
    },
    {
        "content": "<p>The application doesn't need to understand it.  The developer/designer making the decision to ignore the element needs to understand it.  The difficulty is that if we label it \"must understand\", readers will assume that applies to the system, not to a designer.</p>",
        "id": 153972032,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530077289
    },
    {
        "content": "<p>From a system perspective, the extension could just be on a list that says \"safe for this system to ignore\"</p>",
        "id": 153972033,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530077322
    },
    {
        "content": "<p>a developer writes an app today... two years from now a resource comes in with an extension marked with isModifier... How is the developer involved?</p>",
        "id": 153972071,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530104233
    },
    {
        "content": "<p>The developer is involved in deciding how to process \"recognized\" extensions.  They'll also write code for how to handle unrecognized extensions.  The explanation of how the extension can make understanding untrue only matters for the first case.</p>",
        "id": 153972124,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530123502
    },
    {
        "content": "<p>(Though it also matters for the developer who introduced the new extension and had to figure out whether it was a modifier or not)</p>",
        "id": 153972125,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530123528
    },
    {
        "content": "<p>I have a routine called 'checkNoModifiers' that I call on every class I touch...</p>",
        "id": 153972207,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530129796
    },
    {
        "content": "<p>@GG ? is that a comment in support  or against Lloyd's position</p>",
        "id": 153972215,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530131231
    },
    {
        "content": "<p>seems it is a comment in support of my assertion that isModifier is the same as mustSupport...</p>",
        "id": 153972221,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530131794
    },
    {
        "content": "<p>It is so much fun re-inventing SOAP...   :-)</p>",
        "id": 153972222,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530131836
    },
    {
        "content": "<p>I think you meant  <code>mustUnderstand </code>?</p>\n<p>no matter I find the same underlying issue with that too.  How did and does <code>mustUnderstand </code> fly in the real world?</p>",
        "id": 153972229,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530132179
    },
    {
        "content": "<p>as an object lesson... (no pun intended)</p>",
        "id": 153972230,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530132212
    },
    {
        "content": "<p>yup. mustUnderstand.... How it flys in the SOAP world is that an recipient must fail a communication that includes mustUnderstand that it does not... so the whole world comes to a halt.</p>",
        "id": 153972234,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530133504
    },
    {
        "content": "<p>We're not that strict.  You don't have to halt, but you need to take care in your processing.  For example, you might just display narrative, you might warn the user that data returned includes content with unrecognized isModifier elements.  You might strip the element containing the isModifier if you don't care about that element (e.g. a Patient.contact with a modifier element saying \"do not contact\")</p>",
        "id": 153972239,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530135477
    },
    {
        "content": "<p>My Question was really how it was applied , is it ignored ( don't actually halt ) , who is the decider and is it generally useful</p>",
        "id": 153972248,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530136486
    },
    {
        "content": "<p>The decider is the receiving application.  The decision is driven by the types of action the system does.  \"Display the narrative\" isn't a useful option to a clinical decision support engine.  However \"ignore the element containing the modifier\" might be if that element isn't needed to deliver the decision support.  Knowing that you may have a false interpretation of the data if you ignore the element is \"generally useful\" in my book...</p>",
        "id": 153972250,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530136715
    },
    {
        "content": "<p>(I've passed draft language to Grahame for review.  I'll share it as soon as he agrees it's complete and in alignment with his understanding of isModifier.</p>",
        "id": 153972252,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530136751
    },
    {
        "content": "<p>I think it's ok</p>",
        "id": 153972288,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530158911
    },
    {
        "content": "<p><a href=\"https://docs.google.com/document/d/1z7FqdA9ZNkOaIrY0BFVSoSVTK4EIqVn_zUND7MHHc0w\" target=\"_blank\" title=\"https://docs.google.com/document/d/1z7FqdA9ZNkOaIrY0BFVSoSVTK4EIqVn_zUND7MHHc0w\">https://docs.google.com/document/d/1z7FqdA9ZNkOaIrY0BFVSoSVTK4EIqVn_zUND7MHHc0w</a> - additional feedback welcome.</p>",
        "id": 153972295,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530167105
    },
    {
        "content": "<p>I worry most about your statement to those creating extensions to mark it as an isMod if they are uncertain... This will result in many false uses, and thus water down the usefulness.</p>",
        "id": 153972370,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530191261
    },
    {
        "content": "<p>That's why the first instruction was to consult the community.  If there's still uncertainty, then I'd rather they err on the side of declaring isModifier than not</p>",
        "id": 153972429,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530211357
    },
    {
        "content": "<p>I read through it and would like more concrete objective guidelines - I but don't think you can put three people in a room and have agreement on what is an what isn't an isMod for everybody else.    maybe IsMod Reason should replace the flag thus raising the bar way higher.</p>",
        "id": 153972445,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530215507
    },
    {
        "content": "<p>What would \"more concrete\" look like?  You believe there'd be disagreement over whether ignoring an element could lead to a false interpretation?</p>\n<p>If the flag is yes, I believe the reason is required, so it's sort of behaving that way already.</p>",
        "id": 153972452,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530216962
    },
    {
        "content": "<ul>\n<li>who is the target - machines that process or people?</li>\n<li>what percentage of the target audience needs to know this  ( who it could potentially affect ) before the flag is set  1% , 50% or %100?</li>\n<li>what  would change - the resource or the neighborig element?</li>\n<li>what it the meaning of modify? meaning?, interpretation?</li>\n</ul>",
        "id": 153972456,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530220118
    },
    {
        "content": "<p>Flag are easy to set and  a crutch to make up some hokey reason why... But I'm not really sure it changes anything anyway.  It makes it easier for me to reject trackers  and send back to the author though :-)</p>",
        "id": 153972458,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530220433
    },
    {
        "content": "<p>1. Target is machines - the machine needs to know if the data is safe to process if it ignores the extension<br>\n2. 100% of machines need to know whether the containing element is safe to process if it doesn't recognize the modifier element<br>\n3. The containing element or any of its descendants<br>\n4. The meaning of modify is described in the document - an interpretation made when ignoring the element could be made untrue by paying attention to the element.</p>\n<p>I'll add 1-3 into the document.</p>",
        "id": 153972488,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530251430
    },
    {
        "content": "<p>Actually just 1 &amp; 3</p>",
        "id": 153972489,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530251441
    },
    {
        "content": "<p>See if the added documentation helps</p>",
        "id": 153972490,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530251802
    },
    {
        "content": "<blockquote>\n<p>\"Because the resource definition does not make clear what the interpretation is, the element must be marked as a modifier because it is known that a reasonable interpretation of the resource practiced by a not-insignificant number of systems could be negated by the value of the element.\"</p>\n</blockquote>\n<p>This might be the heart of the issue: \"because it is known\", \"reasonable interpretation\",  \"not-insignificant number\". Workgroups will try to find answers to these subjective (I think) qualities - often by determining whether something is isMod for a specific usecase.</p>\n<p>Lloyd argues that we must look at the interpretation of elements \"across all usecases\" (unless documented otherwise), and then determine \"the reasonable interpretation\", this is very hard -I think- and also the source for subjective (and ultimately inconsistent) use of the isMod element.</p>\n<p>To make the pain felt, take a look at the extreme example \"Basic\".  It's very generic, it's really hard to argue across all usecases, so really hard to prove (or disprove) that there is not a \"significant number of systems\" that would interpret the elements of Basic incorrectly, hence all elements could be argued to be isMod.</p>\n<p>Now, obviously, there are clear cases (entered-in-error), and Basic is at the other end of the spectrum, but a lost of cases will be something in between - and thus a cause for inconsistent application of isMod.</p>",
        "id": 153972828,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1530533493
    },
    {
        "content": "<p>Well, with 'basic', you've got Basic.type which qualifies the context.  And most extensions on Basic would only be allowed for a particular basic.type, so the use-case space would still be relatively constrained.  \"reasonable interpretation\" and \"not-insignificant\" are necessary because some implementations wilfully misinterpret the meaning of an element, and we can't try to allow for that.</p>",
        "id": 153972831,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530534181
    },
    {
        "content": "<p>Otherwise put: there is always a way for an element to be reasoned to be non-modifier.  We can see that clearly when Lloyd writes:</p>\n<blockquote>\n<p>\"Even something as critical as Observation.code is not a modifier element.  While the Observation would have little utility without the code, the understanding when ignoring the element that “some” Observation had been made on the specified subject at the specified date and time would still be true when the element was reintroduced.\"</p>\n</blockquote>\n<p>I think I could reformulate this like so:</p>\n<blockquote>\n<p>\"Even something as critical as Patient.deceased is not a modifier element.  While we would no longer know whether the patient is alive, the understanding when ignoring the element that “some” Patient exists or existed, and that some Observations have been made on the specified subject would still be true when the element was reintroduced.\"</p>\n</blockquote>\n<p>Still, Patient.deceased is isMod, while Observation.code is not.</p>",
        "id": 153972832,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1530534254
    },
    {
        "content": "<p>The point remains that if we don't have isModifier, FHIR is in deep trouble.  If you can't safely ignore regular extensions, we're back in the world of 1:1 interfaces with coordinated roll-out of enhancements.</p>",
        "id": 153972833,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530534255
    },
    {
        "content": "<p>If someone is deceased, they no longer meet the definition of Patient - they're no longer receiving healthcare services.  If the definition made clear that it includes past-recipients, then I'd agree that isModifier is unnecessary.</p>",
        "id": 153972834,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530534386
    },
    {
        "content": "<p>Lloyd, you are ignoring the solution I have presented. That non-core extensions are forbidden from being a modifier. If someone needs to do this, then they clearly have a use-case that is NOT in the definition of that Resource. This does not forbid us from having core elements that are modifiers, or even core extensions that are modifiers. It just says that once someone understands the NORMATIVE content, they can be assured that no extension can invalidate that understanding.</p>",
        "id": 153972837,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530534781
    },
    {
        "content": "<p>Clearly Basic is unique given that its only reason for being is to handle these unusual cases.</p>",
        "id": 153972838,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530534862
    },
    {
        "content": "<p>\"If someone is deceased, they no longer meet the definition of Patient\" - this is unsure and sounds like a pretty ad-hoc argument, made up as part of thinking about \"isMod\".   </p>\n<p>Still, we're getting to the root cause, since this is in line with what happens when thinking about isModifier with a workgroup.  The questions about \"what thing in reality is this Resource representing? (alive patients? dead patients?)\" keeps popping up -- often without clear answers - and so it becomes hard to reason about isModifier.   It's interesting that the way to clear this up, is to step back and look at the definition - and maybe change or clarify it.</p>\n<p>Johns comments made me think: workgroups can do that - but not third parties.  Actually, when John says \"If someone needs to do this, then they clearly have a use-case that is NOT in the definition of that Resource\" might be very true. I have to think about that for a bit.</p>",
        "id": 153972839,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1530534967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> That doesn't work in the real world.  Implementers will need to introduce modifiers.  They always have.  And they've always done so - conformant or not.  As a result, implementations tend to be cautious about allowing instances that contain unrecognized extensions</p>",
        "id": 153972840,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530535086
    },
    {
        "content": "<p>Yes, my solution forbids bad behavior.  Your counter argument is non substantive and non persuasive.     Discussions about what a modifier is in the context of the normative elements and core extensions is showing that there is not a good understanding of what a modifier is... given this, it is very hard to accept that we should allow this on any random extension.</p>",
        "id": 153972842,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530535412
    },
    {
        "content": "<p>Yes, if you need a degree in philosophy, ontology or semantics to make this work, we're putting up a high barrier.</p>\n<p>Maybe, though, in practice the situation is not that bad.  It might be done inconsistently (outside of the core materials), and probably be over-used. But if it's used in a certain context of exchange, people within that context will probably agree it's a really important bit of data to exchange, so no one will complain.  If it becomes apparent later on that isModifier is too restrictive (since other usecases are found in that context of exchange), turning an extension back into non-modifier will not break anything.</p>",
        "id": 153972843,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1530535525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> It's not \"bad\" behavior.  It's meeting an implementation requirement.  If a system needs to communicate something, it <em>will</em> communicate it.  Our job is to find a safe way for that to occur.</p>",
        "id": 153972844,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530535727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span>, I agree that the failure mode seems to be that implementers will over-use isModifier rather than under-use it, which is the \"fail safe\" scenario.</p>",
        "id": 153972845,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530535785
    },
    {
        "content": "<p>And I agree too that changing something to no longer be a modifier if it was marked so incorrectly originally is also a safe thing to do.</p>",
        "id": 153972846,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530535822
    },
    {
        "content": "<p>Yes, and we should be able to find a way to make its use consistent within the FHIR spec (although I am still afraid we might open a pandora's box while doing so ;-)</p>",
        "id": 153972847,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1530535889
    },
    {
        "content": "<p>I don't agree that over-use is more safe. It is from the interpretation of that element, but it is NOT from the interpretation of everything else.  The perspective I am focused on is the recipient, where you seem to be focused on the sender.   Bad behaviour by a sender, does negatively impact a recipient.</p>",
        "id": 153972848,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530535906
    },
    {
        "content": "<p>Consistent definition of what a modifier is and when it is appropriate is clearly needed before we can proceed on if it should be allowed in random extensions.</p>",
        "id": 153972849,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530535962
    },
    {
        "content": "<p>I am not against them, if they are well defined... but as defined today, means any random extension that got marked as a modifier will cause a denial-of-service attack... because I can't ignore it, but can't process it because I don't know what it is...</p>",
        "id": 153972850,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530536034
    },
    {
        "content": "<p>If someone sends you data you can't process, you can reject it.  isModifier doesn't make a more effective denial of service attack than sending malformed XML or any other instance that triggers a rejection</p>",
        "id": 153972851,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530536096
    },
    {
        "content": "<p>Sending instances that contain modifier extensions always carries the risk of the instance being rejected, filtered, not processed or otherwise not fully processed.  That's the price the sender agrees to incur by including them in the instance.  The sender is the one who wants the data processed.  It's no skin off the receiver's nose if it can't process something the sender wants it to because of something the sender has done.</p>",
        "id": 153972852,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530536204
    },
    {
        "content": "<p>If I can reject a resource because of an unknown isModifier, then this is just like SOAP mustUnderstand... Yet, you argued strongly that it is NOT...   If we can clarify that isModifier is a must understand; then I can get back on the positive side.</p>",
        "id": 153972854,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530536642
    },
    {
        "content": "<p>You <em>can</em> reject.  But you don't have to</p>",
        "id": 153972857,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530537666
    },
    {
        "content": "<p>the clarification I am making is that if I don't understand the extension (that is marked as a modifier) then I must reject. I can understand and choose to ignore, that is logical. But I must first understand the extension. Where as non-modifier extensions can be safely ignored if they are not understood.</p>",
        "id": 153972872,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530540258
    },
    {
        "content": "<p>You don't have to reject.  You can strip the element containing the modifier.  You can choose to only process the narrative.  You can highlight to the user that a modifier is present and get them to figure out what to do.  You can kick it off to manual processing.</p>",
        "id": 153972877,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530540474
    },
    {
        "content": "<p>What you <em>can't</em> do is process it as normal if you see an element with a modifier extension you don't recognize.</p>",
        "id": 153972879,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530540501
    },
    {
        "content": "<p>Then what is the meaning of true? It sounds like your definition of meaning is that \"the sender thinks this is an important element.\"...</p>",
        "id": 153972883,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530540647
    },
    {
        "content": "<p>It has nothing to do with importance.  It has to do with whether it can falsify the interpretation of the containing element or its descendants.</p>",
        "id": 153972884,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530540723
    },
    {
        "content": "<p>If I send a \"do not contact\" flag on Patient.contact, that might not be super important to the sender and might not matter at all to the receiver (because they'd never contact anyone).  But it certainly falsifies the interpretation of Patient.contact when you ignore the extension.</p>",
        "id": 153972885,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530540812
    },
    {
        "content": "<p>On the other hand, \"name\" might be of critical importance to both sender and receiver.  But ignoring it doesn't lead to a false interpretation of the rest of the instance.</p>",
        "id": 153972886,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530540866
    },
    {
        "content": "<p>I might declare that name is minOccurs=1 and mustSupport.  But it's not a modifier.</p>",
        "id": 153972887,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530540912
    },
    {
        "content": "<p>so I must understand the \"do not contact\" before I can chose to ignore it as it doesn't affect me.... Thus I am stressing that I must understand.</p>",
        "id": 153972900,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530544063
    },
    {
        "content": "<p>All of the solutions I described can be performed without knowing anything other than \"there's some unrecognized modifier extension appearing on one of the Patient.contact elements\"</p>",
        "id": 153972921,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530547705
    },
    {
        "content": "<p>If you recognize it, then you can choose to process the instance as normal if you determine that the impact of the extension doesn't interfere with your \"normal\" processing.</p>",
        "id": 153972922,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530547755
    },
    {
        "content": "<p>see this chat for a test case why is so frustatingly impossible to apply? :</p>\n<p><a href=\"#narrow/stream/103-Orders-and.20Observation.20WG/subject/Remaining.20Observation.20tracker.20to.20be.20Block.20Voted\" title=\"#narrow/stream/103-Orders-and.20Observation.20WG/subject/Remaining.20Observation.20tracker.20to.20be.20Block.20Voted\">https://chat.fhir.org/#narrow/stream/103-Orders-and.20Observation.20WG/subject/Remaining.20Observation.20tracker.20to.20be.20Block.20Voted</a></p>",
        "id": 153973277,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530661217
    },
    {
        "content": "<p>Although I understand the intent,  its impossible IMO to nail this down - it boils down to the subjective nature of what interpretation is and the application of isMod becomes arbitrary.</p>\n<p>can't we just have a blanket statement that implementers must consider the ramifications of ignoring any element and extension and leave it at that?  </p>\n<p>I'll ask again, does this work in the real world for SOAP.   Or have they run into the same issues?</p>",
        "id": 153973346,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530718572
    },
    {
        "content": "<p>Can we at least  agree it is highly subjective and arbritary?</p>",
        "id": 153973350,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530718910
    },
    {
        "content": "<p>I don't see how this is subjective or arbitrary.  It's a very simple test.  It's possible that the interpretation of the resource itself might be unclear, but that's an issue with the resource definition, not with what isModifier means</p>",
        "id": 153973356,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530719396
    },
    {
        "content": "<p>When you look at Observation.focus and see what it can do to the meaning of the Observation, I don't see how there's any subjectivity in evaluating that \"yes, if you ignore this element, you could come to a false interpretation of the Observation instance\".</p>",
        "id": 153973357,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530719508
    },
    {
        "content": "<p>I have some sympathy for Eric here. It all depends on the definition of .subject. If you say 'this observation is made on this subject' then focus is a modifier. If you say 'this observation is made about this subject' then focus is not a modifier</p>",
        "id": 153973430,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530734229
    },
    {
        "content": "<p>given the definition of .subject at the moment, focus is clearly not a modifier</p>",
        "id": 153973431,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530734269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> if you're going to maintain that things can become modifiers because people wrongly interpret the definitions of elements, then we are in trouble indeed</p>",
        "id": 153973432,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530734315
    },
    {
        "content": "<p>If you have an Observation that says \"code=blood type\", \"value=B+\", \"subject=Jane Smith\", you <em>will</em> interpret that to mean that Jane Smith's blood type is B+.  And if .focus gets added that says \"fetus\", then it becomes clear that the previous interpretation was wrong.  There's no \"wrong\" interpretation of the definitions of elements involved.</p>",
        "id": 153973467,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530739688
    },
    {
        "content": "<blockquote>\n<p>you will interpret that to mean that Jane Smith's blood type is B+</p>\n</blockquote>",
        "id": 153973468,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530739718
    },
    {
        "content": "<p>have you read the definition of Observation.subject?</p>",
        "id": 153973469,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530739729
    },
    {
        "content": "<p>Yes.  Are you saying that if I just have code, value and subject, that I <em>cannot</em> infer that the blood type is the blood type of the patient?  That focus must be present before I can be sure whose blood type it is?  Because that's the only other possibility here.</p>",
        "id": 153973473,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530739968
    },
    {
        "content": "<p>I'm saying that following the definition of subject, you cannot infer that meaning without first checking focus. That doesn't make focus a modifier, because the fact that focus matters is explicit in the definition of subject.</p>",
        "id": 153973474,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530740180
    },
    {
        "content": "<p>So we can make all modifier elements non-modifier by just noting their relevance in the definition of the resource or other elements?  I don't think that makes sense.</p>",
        "id": 153973475,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530740495
    },
    {
        "content": "<p>The fact the definition of an element acknowledges \"my meaning may be transformed by element X\" doesn't mean that element isn't a modifier.  It should still be flagged.  It just means we're calling attention to that fact from more than one place.</p>",
        "id": 153973476,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530740555
    },
    {
        "content": "<p>that's very clear by our definitions. If we defined Observation as \"Measurements and simple assertions made about a patient, device or other subject, or records of denial of making an Observation\", then status = entered in error wouldn't be a modifier</p>",
        "id": 153973477,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530740569
    },
    {
        "content": "<p>and I think we're at the heart of Eric's issue here. You're just making stuff up if you want to define ismodifier differently from what the definitions say</p>",
        "id": 153973478,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530740605
    },
    {
        "content": "<blockquote>\n<p>my meaning may be transformed by element X</p>\n</blockquote>\n<p>Still a modifier...</p>",
        "id": 153973479,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530740637
    },
    {
        "content": "<p>my meaning is this or this or this... then the elements that modulate this... not a modifier</p>",
        "id": 153973480,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530740652
    },
    {
        "content": "<p>So what you're saying is that if focus is not present, and I have \"Jane smith, blood type, A+\", I <em>can't</em> know who/what the blood type applies to.  Correct?</p>",
        "id": 153973481,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530740724
    },
    {
        "content": "<p>\"Can I safely ignore the Observation.focus element knowing that doing so won't cause me to misinterpret the meaning of the remaining Observation information?\"  I can't see how that can be answered \"yes\".</p>",
        "id": 153973482,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530740938
    },
    {
        "content": "<blockquote>\n<p>So what you're saying is that if focus is not present, and I have \"Jane smith, blood type, A+\", I can't know who/what the blood type applies to. </p>\n</blockquote>\n<p>no, I'm saying that under the current definitions, you can't know that without looking to see if focus is present.</p>",
        "id": 153973483,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530741208
    },
    {
        "content": "<blockquote>\n<p>\"Can I safely ignore the Observation.focus element knowing that doing so won't cause me to misinterpret the meaning of the remaining Observation information?\"</p>\n</blockquote>\n<p>no, you can't ignore it. But that's not the definition. It is \"An element is labeled \"Is-Modifier = true\" if the value it contains may change the interpretation of the element that contains it\" - and I don't see how any rational interpretation of that doesn't depend on the definitions of the relevant elements. </p>\n<p>if you're trying to clarify what is obviously a contentious subject, from a methodology prespective, you can't have your cake and eat it too; that will just cause confusion... and here we are.</p>",
        "id": 153973484,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530741318
    },
    {
        "content": "<p>modifierExtension vs. regular extension is all about \"can this be safely ignored, or might ignoring it result in misinterpreatation of the instance\".  That's why we have the boundary.  You can <em>always</em> throw away regular extensions and have no risk of misinterpreting what remains.  (Though you might lose 'important' information.)  But you can't do that with modifier extensions because the modifier extension might change the interpretation of other information such that if you ignore the modifier extension, you'll misinterpret the information that remains.  If you know the meaning of the modifier extension, you can decide that the change in interpretation doesn't matter for your purposes, but it's still a modifier.</p>\n<p>If we were to have \"focus\" as an extension, I can't see how it could possibly be a regular extension that you can strip off and forward the instance and not worry about misinterpretation.</p>",
        "id": 153973485,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530741614
    },
    {
        "content": "<p>if we had focus as an extension, then the definition of subject and observation would have to be different, and it would indeed be an extension.</p>",
        "id": 153973486,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530741673
    },
    {
        "content": "<p>you're still providing 2 different definitions of ismodifier, and that's why you're creating confusion</p>",
        "id": 153973487,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530741710
    },
    {
        "content": "<p>\"it would indeed be a modifierExtension\"?</p>",
        "id": 153973488,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530741712
    },
    {
        "content": "<p>oh yes</p>",
        "id": 153973489,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530741719
    },
    {
        "content": "<p>I think the rules for whether something is a modifier core element vs. a modifier extension need to be identical</p>",
        "id": 153973490,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530741751
    },
    {
        "content": "<p>Otherwise we're going to cause tremendous confusion</p>",
        "id": 153973491,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530741761
    },
    {
        "content": "<p>I think I'm providing only one definition.  What do you think are my two definitions?</p>",
        "id": 153973492,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530741781
    },
    {
        "content": "<p>definition one: can this be safely ignored<br>\ndefinition two:  might change the interpretation of other information such that you'll misinterpret the information that remains.</p>",
        "id": 153973493,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530741848
    },
    {
        "content": "<p>these are overlapping sets - but not the same thing.</p>",
        "id": 153973494,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530741875
    },
    {
        "content": "<p>and until you actually deal with that.... confusion will result</p>",
        "id": 153973495,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530741892
    },
    {
        "content": "<p>My definition is actually: \"An element is a modifier if it cannot safely be ignored because ignoring it may result in misinterpretting the information that remains\"</p>",
        "id": 153973496,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530742101
    },
    {
        "content": "<p>The criteria is \"ignoring it may result in misinterpretting the information that remains\"</p>",
        "id": 153973497,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530742165
    },
    {
        "content": "<p>ok. please clarify which of these 3 is closest to your meaning:</p>\n<p>1. An element is a modifier if it cannot safely be ignored because ignoring it may result in misinterpreting the information that remains, based on the definitions of the relevant elements<br>\n2. An element is a modifier if it cannot safely be ignored because ignoring it may result in misinterpreting the information that remains, based on the Lloyd's belief about the meaning of the relevant elements<br>\n3. An element is a modifier if it cannot safely be ignored because ignoring it may result in misinterpreting the information that remains, based on our worst case assesment of the dumbest user of the resource</p>",
        "id": 153973498,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530742322
    },
    {
        "content": "<p>now, to be serious, what we need is an objective criteria. So your definition is not yet satisfactory</p>",
        "id": 153973499,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530742356
    },
    {
        "content": "<p>We can't take into account the definition of the element being ignored - because the presumption is for a modifier extension, it may not be known.</p>",
        "id": 153973500,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530742381
    },
    {
        "content": "<p>\"An element is a modifier if it cannot safely be ignored because information in it may mean that the meaning no longer conforms to the stated definitions\"</p>",
        "id": 153973501,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530742409
    },
    {
        "content": "<p>I hope that the context is that modifierExtension is on an element for which we already have a known definition. We've already agreed to ignore modifiers on tnigs we don't understand</p>",
        "id": 153973502,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530742453
    },
    {
        "content": "<p>Yes, we can presume we know the meaning of the element the modifier appears on.  But I struggle with the notion that the definition of the thing the modifier appears can acknowledge the potential existence of the modifier element and make it no longer a modifier.</p>",
        "id": 153973503,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530742534
    },
    {
        "content": "<p>Super simple case - negationInd.  Lets say that Procedure had a definition \"Documents a procedure that occurred or did not occur\".  And we have an extension that flags that the procedure did not occur.</p>",
        "id": 153973504,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530742638
    },
    {
        "content": "<p>so we need to differentiate between what the definition is, and the definition mentioning things that modify it</p>",
        "id": 153973505,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530742640
    },
    {
        "content": "<p>then it's not a modifier, since the definition very clearly is 'did or did not occur'</p>",
        "id": 153973506,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530742662
    },
    {
        "content": "<p>but I don't see how we could a definition like that, and have 'did not occur' as an extension. that would be clealry wrong</p>",
        "id": 153973507,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530742699
    },
    {
        "content": "<p>Whether it's an extension or not can't matter</p>",
        "id": 153973508,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530742742
    },
    {
        "content": "<p>It's a modifier in either case or it's not a modifier in either case.</p>",
        "id": 153973509,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530742754
    },
    {
        "content": "<p>If, in the base resource, there was no presumption that the procedure had happened, then adding an element that flags \"this happened/this didn't happen\" would not be a modifier.  However, it would have to be explicit either way.  If element=true, then didn't happen; if element = false, then did happen; if element absent, then don't know if happened or not.</p>",
        "id": 153973511,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530742955
    },
    {
        "content": "<p>negationInd is a simple case? - fortunately we don't have it in FHIR :)</p>",
        "id": 153973512,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1530742984
    },
    {
        "content": "<p>But if you're setting a default \"if absent, then happened\", then the meaning of the resource when ignoring the element is changed when we pay attention to it.  And that makes it a modifier.</p>",
        "id": 153973513,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530743013
    },
    {
        "content": "<p>I proposed this:</p>\n<blockquote>\n<p>\"An element is a modifier if it cannot safely be ignored because information in it may mean that the meaning no longer conforms to the stated definitions\"</p>\n</blockquote>",
        "id": 153973514,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743014
    },
    {
        "content": "<p>can we agree to that?</p>",
        "id": 153973515,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743023
    },
    {
        "content": "<p>I don't think so.  Because in my example, we're not talking about a variance from stated definitions.</p>",
        "id": 153973516,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530743050
    },
    {
        "content": "<p>which example?</p>",
        "id": 153973517,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743091
    },
    {
        "content": "<p>procedure? No, if the definition of the thing is 'did or didn't happen' then an element that tells you whether it did or didn't happen is not a modifier since it clearly doesn't modify the meaning</p>",
        "id": 153973518,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743132
    },
    {
        "content": "<p>\"the meaning\" would need to be much clearer - at the least it would have to be \"the meaning of the resource\"</p>",
        "id": 153973519,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1530743132
    },
    {
        "content": "<p>And I'm saying that that's only true if the element doesn't have a default</p>",
        "id": 153973520,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530743163
    },
    {
        "content": "<p>If it has a default, then it must still be a modifier</p>",
        "id": 153973521,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530743182
    },
    {
        "content": "<p>well, it won't have a default - we've been clear about that.</p>",
        "id": 153973522,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743199
    },
    {
        "content": "<p>.focus does have a default</p>",
        "id": 153973523,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530743211
    },
    {
        "content": "<p>If it's not present, the focus is the subject.</p>",
        "id": 153973524,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530743224
    },
    {
        "content": "<p>\"An element is a modifier if it cannot safely be ignored because information in it may mean that the meaning of the instance of the resource no longer conforms to the stated definitions of the elements in the resource\"</p>",
        "id": 153973525,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743227
    },
    {
        "content": "<p>that's not a default, that's a meaning if missing. <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> I mean to say that before: focus clearly must have a meaning if missing.</p>",
        "id": 153973526,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743257
    },
    {
        "content": "<p>much clearer</p>",
        "id": 153973527,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1530743262
    },
    {
        "content": "<p>meaning if missing has the same effect</p>",
        "id": 153973528,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530743271
    },
    {
        "content": "<p>still, we have to be clear about this: if the definition is 'happened or didn't happen' then elements that pertain to did or didn't happen are not modifier elements, whether present or not or having meaning if missing or not.</p>",
        "id": 153973529,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743328
    },
    {
        "content": "<p>if you're going to propose a second criteria around something being a modifier because of having meaning if missing, I'm all ears</p>",
        "id": 153973531,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743357
    },
    {
        "content": "<p>Ok, then lets try that:<br>\n\"An element is a modifier if it cannot be safely ignored because:<br>\na) its value may cause the intepretation of the containing element or one of its descendants to no longer conform to its stated definition<br>\nb) the 'meaning if missing' for the means that ignoring the element may result in a misinterpretation of the containing element or one of its descendants\"</p>",
        "id": 153973534,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530743579
    },
    {
        "content": "<p>so we seem to have some convergence around (a) which is good</p>",
        "id": 153973536,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743697
    },
    {
        "content": "<p>but 'b' isn't so clear</p>",
        "id": 153973537,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1530743709
    },
    {
        "content": "<p>(b) is interesting. it seems as the element modifies itself</p>",
        "id": 153973538,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743711
    },
    {
        "content": "<p>Meaning if missing by definition means \"meaning of the containing element if missing\"</p>",
        "id": 153973540,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530743796
    },
    {
        "content": "<p>umm? really?</p>",
        "id": 153973545,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743847
    },
    {
        "content": "<p>\"e Implicit meaning that is to be understood when this element is missing\"</p>",
        "id": 153973547,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743868
    },
    {
        "content": "<p>it appears to relate to itself</p>",
        "id": 153973548,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530743888
    },
    {
        "content": "<p>It has to be the meaning of something that exists - the element itself isn't there.</p>",
        "id": 153973550,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530743897
    },
    {
        "content": "<p>still, I'm far from convinced about (b). What makes meaning if missing special?</p>",
        "id": 153973554,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530744068
    },
    {
        "content": "<p>Let's make .focus an extension.  Are we confident that the instance isn't going to be misinterpretted if the extension gets thrown away?</p>",
        "id": 153973559,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530744298
    },
    {
        "content": "<p>don't know. what changes to do we make to the definitions when we make it an extension. I can't answer without that knowledge</p>",
        "id": 153973560,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530744340
    },
    {
        "content": "<p>Throwing an element away means that the difference between the meaning of the element value and the meaning if missing doesn't matter to the interpretation of the rest of the resource.</p>",
        "id": 153973561,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530744357
    },
    {
        "content": "<p>where does 'throwing an element away' come into this?</p>",
        "id": 153973562,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530744389
    },
    {
        "content": "<p>That's what ignoring it does</p>",
        "id": 153973563,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530744401
    },
    {
        "content": "<p>You treat the instance as if the element doesn't exist.  (And in many cases, if you spit out the data to a subsequent consumer, the element won't be there anymore.)</p>",
        "id": 153973564,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530744460
    },
    {
        "content": "<p>If that just loses data but doesn't make the interpretation of the remaining information inaccurate, it's not a modifier.</p>",
        "id": 153973565,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530744515
    },
    {
        "content": "<p>let's just stick to one definition:</p>\n<blockquote>\n<p>An element is a modifier if it cannot be safely ignored because: its value may cause the intepretation of the containing element or one of its descendants to no longer conform to its stated definition</p>\n</blockquote>",
        "id": 153973566,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530744529
    },
    {
        "content": "<p>so, if meaning if missing or one of the possible values meets this criteria, it's a modifier.</p>",
        "id": 153973567,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530744566
    },
    {
        "content": "<p>so, then this:</p>",
        "id": 153973568,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530744571
    },
    {
        "content": "<p>\"its value or absense\"</p>",
        "id": 153973569,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530744592
    },
    {
        "content": "<blockquote>\n<p>An element is a modifier if it cannot be safely ignored because its value, or it's meaning if missing, may cause the intepretation of the containing element or one of its descendants to no longer conform to its stated definition</p>\n</blockquote>",
        "id": 153973570,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530744593
    },
    {
        "content": "<p>I'm struggling because you feel that it's possible to define Observation in such a way that Observation.focus is not a modifier.  I don't think that is (or at least should) be possible.</p>",
        "id": 153973571,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530744764
    },
    {
        "content": "<p>I believe that's because you don't like the definitions as they are. But as they are ,it's not a modifier. We can talk about the definitions, because they definitely need improving. Now, the can't ignore is in the scope, so for me, 2 things are required for the Observation definitions:</p>\n<p>1. a very clear statement in the scope that Observations are linked to individuals, but not necessarily actually made on them, with some examples of where it's not safe to assume this (mother/fetus, conselling, organ donation)</p>\n<p>2. a meaning if missing on focus.</p>",
        "id": 153973572,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530744949
    },
    {
        "content": "<p>there's other ways to resolve this, but we definitely have a problem right now, in that the impact of a few words in the definition of subject is pretty significant, and it doesn't get the attention it deserves</p>",
        "id": 153973573,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530745003
    },
    {
        "content": "<p>It has nothing to do with not liking the definitions.  I don't think it should matter what the definitions are.  If you strip off .focus, you risk misinterpretting the meaning of the resource.  Because the meaning of the resource is that the subject is the focus.  That's the \"meaning if missing\"</p>",
        "id": 153973574,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530745053
    },
    {
        "content": "<blockquote>\n<p>I don't think it should matter what the definitions are</p>\n</blockquote>\n<p>It very clearly must. You can't just make stuff up, and as a methodology co-chair you should never say that</p>",
        "id": 153973575,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530745108
    },
    {
        "content": "<p>you need to find some soap...</p>",
        "id": 153973576,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530745115
    },
    {
        "content": "<p>:D</p>",
        "id": 153973577,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530745121
    },
    {
        "content": "<p>if you ignore the definitions of Observation, you risk mis-interpreting the observations. duh. maybe we should label the entire spec as 'must-understand'....</p>",
        "id": 153973578,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530745166
    },
    {
        "content": "<p>but now, if the definition of Observation is 'pertinent to the patient' and you assume that it is 'on the patient' then you are wrong because you ignored the spec. But if you understand it as 'pertinent to the patient' then that's still true if you drop focus</p>",
        "id": 153973579,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530745247
    },
    {
        "content": "<p>so, as the current definitions stand it is no a modifier, but we still have a problem because the current definitions are not what a casual user will expect. Making focus a modifier isn't actually a solution to that bigger problem</p>",
        "id": 153973580,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530745310
    },
    {
        "content": "<p>I think I can accept that.  But then I have a different issue :)</p>",
        "id": 153973581,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530745352
    },
    {
        "content": "<p>There's two different ways to approach Observation.  Have a definition that indicates that subject only indicates who the Observation is \"pertinent to\" and have focus be a non-modifier; or have a definition that indicates that subject indicates who the Observation was performed on, and have focus be a modifier.</p>",
        "id": 153973582,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530745423
    },
    {
        "content": "<p>The same can be true for status, didNotOccur and various other elements.</p>",
        "id": 153973583,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530745444
    },
    {
        "content": "<p>sure. go have that debate with OO</p>",
        "id": 153973584,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530745444
    },
    {
        "content": "<p>I have opinions about that, but only in the sense that I am a domain user of Observation.</p>",
        "id": 153973585,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530745495
    },
    {
        "content": "<p>We can always have a definition that allows for the elimination of isModifier.  Or we can have definitions that require it.  What is our guidance on when to do what?</p>",
        "id": 153973586,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530745509
    },
    {
        "content": "<p>My premise is that it should be what's least surprising to implementers.  I'm not sure that's what's happened here.</p>",
        "id": 153973587,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530745571
    },
    {
        "content": "<p>from a methodology view point: there are places in the definitions where real life means that the definitions cannot be least surprising to users. When this is true, the committee should be very clear about how and why such surprises have been defined, and expect and cater for community debate about such cases. isModifier is one of the array of definitional tools by which a committee can advise implementers about safe implementations - but only one approach. Other methods the committees should keep in mind:<br>\n- make clear statement about this in scope<br>\n- provide good examples that illustrate the problem<br>\n- consider adding a note to the clinical safety checks in safety.html<br>\n- seek comment on this in ballot</p>",
        "id": 153973588,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530745720
    },
    {
        "content": "<p>I'm not sure which way you're suggesting that your opinions lie on this, Grahame - what do you think is the OO take on it?</p>",
        "id": 153973589,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1530745748
    },
    {
        "content": "<p>as product manger: OO need to be clearer about this. <br>\nas a domain user: I think I'm ok with the definitions as they are</p>",
        "id": 153973590,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530745781
    },
    {
        "content": "<p>the surprise is the real world fact that observations are sometimes made on other individuals. Any casual user won't think of that, and it will be a surprise. It's not a surprise that OO invented either. So this is clearly a case where we can't have a least surprising outcome, since the surprise is a real world problem</p>",
        "id": 153973591,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530745857
    },
    {
        "content": "<p>The question is whether the flag that alerts readers to that potential surprise should be an isModifier flag or carefully crafted definitions and examples.  My opinion is that the former doesn't preclude the latter, but the former is the most visible.</p>",
        "id": 153973592,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530745967
    },
    {
        "content": "<p>agree that we should be clearer</p>",
        "id": 153973593,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1530745985
    },
    {
        "content": "<p>the other issue we clearly have - which is a little related - is around link/unlink patient records, and mother/child identifications</p>",
        "id": 153973594,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530745993
    },
    {
        "content": "<p>that's a PA issue</p>",
        "id": 153973595,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530746000
    },
    {
        "content": "<p>actually, I think that a good documentation the observation scope is much better than a isModifier flag. And good wording in the focus definition</p>",
        "id": 153973596,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530746038
    },
    {
        "content": "<p>agree</p>",
        "id": 153973597,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1530746067
    },
    {
        "content": "<p>I'm not arguing against good documentation in the observation scope.  I'm suggesting that belt + suspenders is wise here.</p>",
        "id": 153973602,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530746306
    },
    {
        "content": "<p>perhaps, but you can't just have 'ismodifier = true' because Lloyd wants it to be so</p>",
        "id": 153973603,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530746358
    },
    {
        "content": "<p>I'm not advocating on the basis of \"Lloyd wants it\".  I'm advocating on the basis of \"what I think is going to be safest\".  I've presented my position on why I think isModifier for something like this is safer.</p>",
        "id": 153973611,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530747122
    },
    {
        "content": "<p>but to be clear: your position is based on desired outcome, not methodology</p>",
        "id": 153973612,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530747170
    },
    {
        "content": "<p>Right.  There is no established methodology here.  If we were to develop methodology, it would presumably be driven by desired outcome.</p>",
        "id": 153973613,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530747381
    },
    {
        "content": "<p>yes but it actually needs to be methodological. can you update the google document now that we've had this disucssion, along with that definition at the start?</p>",
        "id": 153973614,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530747540
    },
    {
        "content": "<p>I've taken my first stab at the changes</p>",
        "id": 153973630,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530754503
    },
    {
        "content": "<p>That was better than the Independence Day Fireworks....    Im with Grahame on this, as I have clearly stated before. I think we need to think differently about core and core extensions; vs any other extension. This is becoming more clear with the current definition. To have a random extension declaring that it's existence has invalidated the core Resource definition or even just some element definition in the core Resource; is BAD modeling. This should be forbidden. If they really have a totally new definition, then they have a totally new Resource.</p>",
        "id": 153973693,
        "sender_full_name": "John Moehrke",
        "timestamp": 1530798137
    },
    {
        "content": "<p>It has nothing to do with bad modeling - it has to do with meeting real world requirements.  If we forget to add the equivalent of \"doNotPerform\" to a resource and an implementer needs it, we <em>must</em> provide a mechanism of safely meeting that requirement that lets the implementer move forward in a matter of days, not months or years.</p>",
        "id": 153973694,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530798260
    },
    {
        "content": "<p>of course we don't like this. But it's the world we live in</p>",
        "id": 153973845,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530817302
    },
    {
        "content": "<p>I am sorry I am late to this discussion, but after reading this, I think (putting my developer hat on) I would prefer a section of narrative for each resource that the describes the \"tricky\"/\"ismodifier\" elements - and why I need to pay special attention to them, or why disregarding them might be dangerous etc, rather than an abstract flag.  The advantage is that many more will actually take action on, and we will also get more feedback on it.  </p>\n<p>By the way, this (for me) is separate from modifierExtension - where if I don't understand the url I should take action.</p>",
        "id": 153977283,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1532347033
    },
    {
        "content": "<p>that's a good idea, but I don't know if we'll have time to pull that off for R4</p>",
        "id": 153977284,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532347207
    },
    {
        "content": "<p>Is there a way for an Implementation Guide / StructureDefinition to declare that it allows Extensions that do not have the isMod, but forbids any extensions are isMod? --- (asking for a friend....)   :-)</p>",
        "id": 153977386,
        "sender_full_name": "John Moehrke",
        "timestamp": 1532381521
    },
    {
        "content": "<p>using an isMod extension of course!</p>",
        "id": 153977390,
        "sender_full_name": "Eric Haas",
        "timestamp": 1532384240
    },
    {
        "content": "<p>the long way is to ban modifierExtensions on every element you profile. That's both exhausting and only deals with what you do profile.</p>",
        "id": 153977394,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532384700
    },
    {
        "content": "<p>or you can state it in narrative....</p>",
        "id": 153977395,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532384710
    },
    {
        "content": "<p>we can dsicuss better ways</p>",
        "id": 153977396,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532384716
    },
    {
        "content": "<p>Can't it be done with an invariant?  You should be able to assert that the count of descendant modifier extensions (or descendant modifier extensions with URLs other than a specified set) is 0</p>",
        "id": 153977453,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1532397809
    },
    {
        "content": "<p>yes on every profile</p>",
        "id": 153977468,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532406971
    },
    {
        "content": "<p>If we are going to continue down this path of allowing any random extension to be an isMod.... Then we need a way for an IG to declare that it forbids them. The point of an IG is to define a narrow solution to a given problem. If a random extension with isMod can come along and invalidate the definition of a Resource or an element in a resource... THEN I need a way to say that is forbidden. I need to be able to say this about any random extension with isMod=tru, while allowing any random isMod=false extension. These things are evil to Interop!</p>",
        "id": 153977546,
        "sender_full_name": "John Moehrke",
        "timestamp": 1532433826
    },
    {
        "content": "<p>I will reiterate... We should not allow non-core extensions to be isMod. That is my original solution, it continues to be the solution I think we should go with.</p>",
        "id": 153977547,
        "sender_full_name": "John Moehrke",
        "timestamp": 1532433980
    },
    {
        "content": "<p>unfortunately we can't make that rule because projects come up with weird requirements.</p>",
        "id": 153977550,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532434823
    },
    {
        "content": "<p>but we can and should make it easy to ban modifier extensinos</p>",
        "id": 153977551,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532434835
    },
    {
        "content": "<p>I am not persuaded that it can't be forbidden. Any project that wants to break the core specification should not be catered to..  but if it is necessary, then please make it easy for a IG profile to forbid them.</p>",
        "id": 153977554,
        "sender_full_name": "John Moehrke",
        "timestamp": 1532435789
    },
    {
        "content": "<p>no one has in this whole stream expressed even ONE valid use-case... just a bunch of \"projects will want to do it\", or \"projects will ignore our rules and do it anyway\", or \"look at this use-case in the core spec where isMod is used\". No evidence that 'any random extension' needs the power to invalidate the specification by adding an extension with isMod=true set.</p>",
        "id": 153977555,
        "sender_full_name": "John Moehrke",
        "timestamp": 1532435943
    },
    {
        "content": "<p>umm, it's kind of difficult because we've all worked on projects where we did exactly this for v2 or cda, but for me they've mostly been commercial in confidence</p>",
        "id": 153977556,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532436088
    },
    {
        "content": "<p>I liked Ewout suggestion for isMods  ( non extensions )</p>",
        "id": 153977628,
        "sender_full_name": "Eric Haas",
        "timestamp": 1532443006
    },
    {
        "content": "<p>I'm not sure why they should be prohibited by projects.  I can think of several like in QI-Core - throwing Bryn under the bus -  where they redefine the Subscription.criteria as an event instead of a search string.  That seemed pretty necessary IMO.</p>",
        "id": 153977629,
        "sender_full_name": "Eric Haas",
        "timestamp": 1532443137
    },
    {
        "content": "<p>also I added a line to the safety page for Observation.focus  (last one)  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  is that what you meant?</p>",
        "id": 153977630,
        "sender_full_name": "Eric Haas",
        "timestamp": 1532443229
    },
    {
        "content": "<p>This is was I think Ewout was suggesting should be on each resource.</p>",
        "id": 153977631,
        "sender_full_name": "Eric Haas",
        "timestamp": 1532443255
    },
    {
        "content": "<p>could you restate what Ewout's suggestion is?</p>",
        "id": 153977655,
        "sender_full_name": "John Moehrke",
        "timestamp": 1532445152
    },
    {
        "content": "<blockquote>\n<p>Ewout Kramer: I am sorry I am late to this discussion, but after reading this, I think (putting my developer hat on) I would prefer a section of narrative for each resource that the describes the \"tricky\"/\"ismodifier\" elements - and why I need to pay special attention to them, or why disregarding them might be dangerous etc, rather than an abstract flag. The advantage is that many more will actually take action on, and we will also get more feedback on it.</p>\n<p>By the way, this (for me) is separate from modifierExtension - where if I don't understand the url I should take action.</p>\n<p>Grahame Grieve: that's a good idea, but I don't know if we'll have time to pull that off for R4</p>\n</blockquote>",
        "id": 153977662,
        "sender_full_name": "Eric Haas",
        "timestamp": 1532447283
    },
    {
        "content": "<p>okay, I remember that and agree with it, but i doesn't address the issue I am struggling with. He addresses that the core spec needs to be more clear about each modifier it contains. I agree with that. What I am concerned with is that we are allowing any random extension to be placed into a resource at any random time and with the abstract isMod flag indicate that it has somehow invalidated the meaning of the Resource or some element(s) in the Resource.</p>",
        "id": 153977665,
        "sender_full_name": "John Moehrke",
        "timestamp": 1532447488
    },
    {
        "content": "<p>Im happy to solve one problem at a time.. I am very happy to require that any core or core-extension or hl7-extension that has an modifier element must clearly define that modifier element. This seems to be very clear to me.  I don't have an opinion on if these cases should have a isModifier decoration.    These publications (core, core-extensions, and hl7-extensions) are easy to find and build into code. My issue is with any random extension from any random publisher with completely unknown governance being able to declare that their extension is an isModifier.   And if we insist on giving them this power, I want the ability to forbid that kind of extension in my IG/SD.</p>",
        "id": 153977667,
        "sender_full_name": "John Moehrke",
        "timestamp": 1532447907
    },
    {
        "content": "<p>you've said that several times know, and we've agreed that's a good idea. So you probably don't need to keep saying it - maybe it's time to create a task</p>",
        "id": 153977702,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532462589
    },
    {
        "content": "<p>I don't think isMod should generally be prohibited in projects, but in some cases, it's reasonable to say \"this is a modifierExtension free zone\" because that's a base expectation for interoperability in that environment.  E.g. MHD could say you can't have modifiers on DocumentReference if you want to be MHD-conformant.</p>",
        "id": 153977723,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1532464769
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=17549\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=17549\">GF#17549</a></p>",
        "id": 153977734,
        "sender_full_name": "John Moehrke",
        "timestamp": 1532466451
    }
]