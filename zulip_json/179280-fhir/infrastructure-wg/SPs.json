[
    {
        "content": "<p>To FHIR-I folks I have alway pushed to just create SPs for all elements,  I don't see the harm in just stating  and listing a FHIR SP for every @#$ element in the spec?  They can be autogenerated far as I can tell.  Then the composites or special ones can be hashed out by the work groups and can black llist the ones they don't want ( although I don't see why you would do that - just don't implement  them)   this would eliminate WG overhead and maintenance in managing SP requests.</p>",
        "id": 163775124,
        "sender_full_name": "Eric Haas",
        "timestamp": 1555717933
    },
    {
        "content": "<p>That + getting rid of RIM mappings and Xpath2 and I'll be happy   ;-)</p>",
        "id": 163775153,
        "sender_full_name": "Eric Haas",
        "timestamp": 1555718011
    },
    {
        "content": "<p>Search parameters should, in principle, reflect the 80%.  The ones we define provide an indication to server implementers what they should seriously consider supporting and give an indication to clients what types of SPs are most likely to exist in the servers they encounter.  Algorithmically generating them for everything wouldn't help the implementation community.  And it's their lives we're trying to make easier, not ours.  In addition, when designing search parameters, there's often cognative effort required to figure out when SPs should be compositional, what type to use, whether anything special needs to be done in the path expression, whether one parameter should search multiple paths, etc.</p>",
        "id": 163775241,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1555718161
    },
    {
        "content": "<p>XPath2 will go away soon.  And you can sell me on removing RIM much more easily than auto-generating search parameters.</p>",
        "id": 163775295,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1555718202
    },
    {
        "content": "<p>I seriously doubt there is much consideration in making up sps.   i make a wild ass guess based on what seems reasonable or just list all the elements or all the pattern and then wait for trackers to come trickling in.  It really seems easier the other way let the server decide the 80% for themselves.</p>",
        "id": 163834025,
        "sender_full_name": "Eric Haas",
        "timestamp": 1555820574
    },
    {
        "content": "<p>trackers trickling on SPs is becoming annoying and considering takes up to 18 months and a new version not very efficient.</p>",
        "id": 163834094,
        "sender_full_name": "Eric Haas",
        "timestamp": 1555820652
    },
    {
        "content": "<p>It's not really any different than new data elements.  I agree that search parameters don't get enough attention (both in terms of which shouldn't be there as well as which should), but that isn't a reason to make the situation worse.  Again, our focus needs to be on what will make the spec most useful to implementers, not what's less fuss for us.  (And defining new SPs isn't really any more work than defining new extensions - and we do as many or more of those.)</p>",
        "id": 163838168,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1555828134
    },
    {
        "content": "<p>I'm sympathetic to both sides here. If generating even some/most search params was a rote operation (i.e., names and types could be automatically determined from the path), we'd avoid the situation where the <em>lack</em> of a search param led to different servers creating their own with slight differences.</p>",
        "id": 164120350,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556140283
    },
    {
        "content": "<p>I think that's less of a problem than implementers having no guidance about what's reasonable to support.</p>",
        "id": 164120594,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1556140511
    },
    {
        "content": "<p>And the latter can always be rectified in the next version.</p>",
        "id": 164120603,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1556140521
    },
    {
        "content": "<p>And search parameters are easy to pre-adopt.</p>",
        "id": 164121294,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1556141137
    },
    {
        "content": "<p>The truth is though that the complete set of search parameters we define today is <em>big</em>, and different ones are important in different contexts. Mostly I've seen servers treat them entirely generically (like HAPI) or very selectively (like, say, servers following guidance in the US Core IG).</p>",
        "id": 164127209,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556146634
    },
    {
        "content": "<p>It's not clear that our selectivity is providing value for either group. But I'm open to arguments otherwise...</p>",
        "id": 164127224,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556146668
    },
    {
        "content": "<p>more search parameters = more strorage + more commit time</p>",
        "id": 164131762,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556151347
    },
    {
        "content": "<p>How many cases have you folks heard of where a client wanted to use a search parameter that one or more EHRs don't support? I worry that the more search parameters we have the higher the odds of clients needing ones that aren't there.  </p>\n<p>I think Lloyd's point about focus is a good one.</p>",
        "id": 164284715,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556302215
    },
    {
        "content": "<p>(I'm all for focus; I'm just not sure it's helpful in the core spec here. I wish defining most search parameters didn't require deciding on things like what to call them.)</p>",
        "id": 164296314,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556311394
    },
    {
        "content": "<p>Well, technically servers are free to call them different things, but doing that would confuse people.  We need to come up with names for data elements too - not sure why coming up with ids and recommended codes for search parameters would be any different.</p>",
        "id": 164297538,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1556312513
    },
    {
        "content": "<p>Just because we already <em>must</em> come up with standardized names for the elements; that's the core structure of our resource definitions.</p>",
        "id": 164301670,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556316241
    },
    {
        "content": "<p>And then we come with names for <em>some</em> search parameters.</p>",
        "id": 164301727,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556316259
    },
    {
        "content": "<p>I don't feel super strongly about this, but I get <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span>'s frustration.</p>",
        "id": 164301737,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556316281
    },
    {
        "content": "<p>We come up with names for <em>some</em> elements too - the 80% rule guides that and is supposed to guide our definition of search parameters too.  Others are free to define additional search parameters just as they're free to define extensions.</p>",
        "id": 164449738,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1556542957
    },
    {
        "content": "<p>Is <a href=\"http://wiki.hl7.org/index.php?title=FHIR_Guide_to_Designing_Resources#What_search_parameters_should_be_included_in_a_resource.3F\" target=\"_blank\" title=\"http://wiki.hl7.org/index.php?title=FHIR_Guide_to_Designing_Resources#What_search_parameters_should_be_included_in_a_resource.3F\">http://wiki.hl7.org/index.php?title=FHIR_Guide_to_Designing_Resources#What_search_parameters_should_be_included_in_a_resource.3F</a> the places where this methodology is (supposed to be) documented, or is this page orphaned?</p>",
        "id": 164592467,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556675007
    },
    {
        "content": "<p>(We don't say much about <em>when</em> to define a search param there; if that's the official guidance, I'll at least put in a tracker on this topic.)</p>",
        "id": 164592471,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556675040
    },
    {
        "content": "<p>That's what we have - hasn't been touched in 3+ years.</p>",
        "id": 164594229,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1556677384
    },
    {
        "content": "<p>So my thinking is that every element ( and extensions) gets and out of the box base SP that can be derivedFrom.    Maybe I'm going down a rathole but I think is useful for conformance and testing to pinpoint what you must support at this level of detail of the sp and deriving sp from the standard promotes a heck of lot more interoperability than everybody creating custom sp on there own.   This is less about usage and more about when is used they all look the same and have consistent names</p>",
        "id": 164637373,
        "sender_full_name": "Eric Haas",
        "timestamp": 1556729239
    },
    {
        "content": "<p>I don't think we should define anything we don't think most systems will support.  It's easy enough for implementers to define their own if they need them.  Defining them in bulk to save 20 minutes of development time isn't a good tradeoff.</p>",
        "id": 164637654,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1556729480
    },
    {
        "content": "<p>So </p>\n<ul>\n<li>I define sp -x  as  \"foo\" </li>\n<li>you define the same as \"bar\" </li>\n</ul>\n<p>and they are defined similary but not the same and they do they same thing.  I don't think that scenario is good</p>",
        "id": 164638619,
        "sender_full_name": "Eric Haas",
        "timestamp": 1556730303
    },
    {
        "content": "<p>naming and renaming things is a pain and I think it would be useful</p>",
        "id": 164638722,
        "sender_full_name": "Eric Haas",
        "timestamp": 1556730365
    },
    {
        "content": "<p>to have a catalog of sp's built into the resource</p>",
        "id": 164638744,
        "sender_full_name": "Eric Haas",
        "timestamp": 1556730392
    },
    {
        "content": "<p>Really, we need a differentiation between 'core' and 'extension' search parameters.  However, even the extension ones shouldn't be auto-generated.  Someone needs to think about what paths make sense, whether it should be compositional or not, what the appropriate type is, etc.  And there are some things that just don't make sense to search.</p>",
        "id": 164639956,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1556731538
    },
    {
        "content": "<p>(E.g. Patient.contact.gender)</p>",
        "id": 164639964,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1556731553
    }
]