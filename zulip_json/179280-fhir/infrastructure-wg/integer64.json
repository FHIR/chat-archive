[
    {
        "content": "<p>I'm going through adding the integer64 type. I'm going to use it for Attachment.size....</p>",
        "id": 182723160,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575597659
    },
    {
        "content": "<p>Well that's future proof :)</p>",
        "id": 182725862,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1575601449
    },
    {
        "content": "<p>Yeah, didn't realize we effectively had a 2Gb limit</p>",
        "id": 182726804,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1575602615
    },
    {
        "content": "<p>Is that something that can be done without breaking our backward compatibility rules?</p>",
        "id": 182728517,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1575605053
    },
    {
        "content": "<p>Bundle.total for use in searchset? I guess that one is already normative though.</p>",
        "id": 182728998,
        "sender_full_name": "Paul Church",
        "timestamp": 1575605728
    },
    {
        "content": "<p>Bundle.total &gt; 2billion? really?</p>",
        "id": 182729136,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575605939
    },
    {
        "content": "<blockquote>\n<p>Is that something that can be done without breaking our backward compatibility rules?</p>\n</blockquote>\n<p>how would it break them?</p>",
        "id": 182729147,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575605951
    },
    {
        "content": "<p>New systems could send values that would blow up old systems</p>",
        "id": 182731173,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1575609221
    },
    {
        "content": "<p>yep. If we're going to make a rule that that's not an allowed change, we can shut up shop once we go normative</p>",
        "id": 182731476,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575609679
    },
    {
        "content": "<p>In fact every value from the new system would be a string in JSON, which would break every old system... This seems like something pretty highly undesirable for a normative resource.</p>",
        "id": 182733049,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1575612250
    },
    {
        "content": "<p>There wouldn't be a bundle with 2^31 entries (I hope), but you could have a search matching over 2^31 resources. Large numbers have come up in cases where a client wanted to do a search with _summary=count to get some broad statistics.</p>",
        "id": 182733062,
        "sender_full_name": "Paul Church",
        "timestamp": 1575612293
    },
    {
        "content": "<p>carumba. that's still a very big number.</p>",
        "id": 182734366,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1575614508
    },
    {
        "content": "<p>The normative spec needs to be stable for a long time though - 10 years from now it might not sound so large.</p>",
        "id": 182778156,
        "sender_full_name": "Paul Church",
        "timestamp": 1575650138
    },
    {
        "content": "<p>Just add a BigInteger. Which in java is equivalent to -2^Integer.MAX_VALUE to 2^Integer.MAX_VALUE.... which is very very big.</p>",
        "id": 183008098,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1575931424
    },
    {
        "content": "<p>I see in the json examples (examples-json.zip) that the integer64 values are serialized as strings. For example the <code>size</code> attribute of <code>contentAttachment</code> in the file <code>communication-example-fm-attachment.json</code>:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"s2\">&quot;payload&quot;</span><span class=\"err\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;contentAttachment&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;contentType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;application/pdf&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;data&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;SGVsbG8\\u003d&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;accident notes 20100201.pdf&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;creation&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2010-02-01T11:50:23-05:00&quot;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;contentAttachment&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;contentType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;application/pdf&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://example.org/docs/AB12345&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;size&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;104274&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;hash&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;SGVsbG8gdGhlcmU\\u003d&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;creation&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2010-02-01T10:57:34+01:00&quot;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n</pre></div>\n\n\n<p>Should that not be like this:</p>\n<div class=\"codehilite\"><pre><span></span>        &quot;size&quot;: 104274,\n</pre></div>\n\n\n<p>?</p>",
        "id": 185819699,
        "sender_full_name": "Marco Visser",
        "timestamp": 1579185459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 185822682,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1579187275
    },
    {
        "content": "<p>If you don't serialize as strings in JSON, the JavaScript parser stores as <code>number</code> and you lose precision.  The 64-bit libs for JavaScript serialize to/from string to get around it.<br>\nWe had a discussion when we were proposing adding the type.</p>",
        "id": 185832403,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1579192559
    },
    {
        "content": "<p>And it is documented on the json page in the spec too that in json it is serializer as a string.</p>",
        "id": 185867418,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1579212762
    },
    {
        "content": "<p>(I had to go look when I saw it)</p>",
        "id": 185867435,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1579212774
    },
    {
        "content": "<p>yep. we hate JSON numbers ;-)</p>",
        "id": 185876425,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1579220449
    },
    {
        "content": "<p>Haha ok. then I hate them too. I will serialize them as strings then. Thanks for the feedback!</p>",
        "id": 186084985,
        "sender_full_name": "Marco Visser",
        "timestamp": 1579512153
    }
]