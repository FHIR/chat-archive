[
    {
        "content": "<p>In last conference call, we discussed <a href=\"http://jira.hl7.org/browse/FHIR-30631\">FHIR-30631</a>. The resolution states that: </p>\n<blockquote>\n<p>If the 'base' SearchParameter defined by HL7 or an implementation guide is referenced, then all listed modifiers, comparators, etc. are expected to be supported.  If an implementation wishes to restrict which modifiers they support, they must define their own SearchParameter instance based on the 'official' SearchParameter.</p>\n</blockquote>\n<p>How do I say that my implementation does NOT support any modifiers? For example, for string search, my implementation does not support <code>:contains</code> nor <code>:exact</code><br>\n<span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 232029805,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1616791850
    },
    {
        "content": "<p>You have to define a custom search parameter based on the 'official' search parameter that constrains out the modifiers you don't support.</p>",
        "id": 232029878,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1616791898
    },
    {
        "content": "<p>So I would say something like</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;modifier&quot;: []\n</code></pre></div>",
        "id": 232029987,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1616791942
    },
    {
        "content": "<p>I don't think that's legal.  I think you'd omit \"modifier\" entirely.</p>",
        "id": 232031732,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1616792824
    },
    {
        "content": "<p>But if you leave it off, won't it inherit from the parent?</p>",
        "id": 232283173,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1617030324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span></p>",
        "id": 232283399,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1617030418
    },
    {
        "content": "<p>I think that akin to conformance-expectation extension on each for a  <em>requirements CapStatement</em> , would need some modifier extension like is-supported boolean for each comparator/modifier for an <em>instance CapStatement</em>.  yucky and heavy but computable.  More reason to test out CapStatement2.</p>",
        "id": 232352695,
        "sender_full_name": "Eric Haas",
        "timestamp": 1617061556
    }
]