[
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15883\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=15883\">GF#15883</a> creates a problem - if the Questionniare.item.definition type is canonical(ElementDefinition) then the search parameter is a reference, and the target type of that is... not a resource....</p>",
        "id": 153977137,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532297815
    },
    {
        "content": "<p>Yeah, I thought that's why we left item.definition as a uri, because it could potentially point to an ElementDefinition. Could we have a two delements: definition: canonical(StructureDefinition) and element: String?</p>",
        "id": 153977139,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1532299125
    },
    {
        "content": "<p>well, we discussed the consequences of making the change, to canonical(ElementDefinition) and we made them all of them... except this one</p>",
        "id": 153977142,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532303970
    },
    {
        "content": "<p>We'd talked about it a little, but you're right that we never landed it.  The question was how you declare that you want to allow to point to sub-elements within a resource rather than just the resource alone.  Could we say canonical(StructureDefinition,StructureDefinition#) as the convention for saying you can point to either the full structure definition or an element within it?</p>",
        "id": 153977162,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1532316123
    },
    {
        "content": "<p>that's not necessary nor does it deal with the problem, I think</p>",
        "id": 153977163,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532317544
    },
    {
        "content": "<p>You'd probably want two search parameters - one of type Reference that matched on structure defintiion (regardless of element) and one of type uri that matched on a specific element</p>",
        "id": 153977175,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1532325560
    },
    {
        "content": "<p>better to leave it as just uri then</p>",
        "id": 153977176,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532325741
    },
    {
        "content": "<p>so where have we landed with this one? nowhere yet... but we need to. For the moment, I have rolled it back to uri...</p>",
        "id": 153977825,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532493331
    },
    {
        "content": "<p>Can we have a URI that uses the conventions of a canonical with a target element?</p>",
        "id": 153977874,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1532522258
    },
    {
        "content": "<p>well, we can; we defined it. what isn't clear is the definition of the search parmaeter</p>",
        "id": 153977876,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532522678
    },
    {
        "content": "<p>The desired search parameter behavior would ideally be to allow exact match, to allow match on URL only, URL + version, or url + element without version.  It's that last one I don't think we can do right now with a \"standard\" search parameter and available qualifiers.</p>",
        "id": 153977881,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1532523076
    },
    {
        "content": "<p>Though perhaps you could with both an \"above\" and a \"below\"</p>",
        "id": 153977882,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1532523096
    }
]