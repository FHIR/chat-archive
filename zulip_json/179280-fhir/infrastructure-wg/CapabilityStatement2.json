[
    {
        "content": "<p>Will CapabilityStatement2 keep the same name (with \"2\") in R5 or will it replace current CapabilityStatement(1)?</p>",
        "id": 218303659,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1606751018
    },
    {
        "content": "<p>Last I heard, it is meant to replace the current CapabilityStatement.</p>",
        "id": 218456373,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1606844452
    },
    {
        "content": "<p>Correct.  When we publish R5, there will be only one.</p>",
        "id": 218488056,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1606859975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> A question I forgot to ask in time yesterday, would it make sense for Capability Statement in the future to specify which FHIR Packages are loaded to the server? I think we can get to the specific loaded package version based on the referenced Implementation Guide, but the other way around is possible too. And it feels like it would make sense with the package ecosystem being easier for clients to retrieve the referenced item.</p>",
        "id": 224074033,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1611682413
    },
    {
        "content": "<p>I'm not sure what it would mean for a package to be 'loaded' by a server.</p>",
        "id": 224076615,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1611683428
    },
    {
        "content": "<p>I understand \"loaded\" in that context to mean that all the resources that are included in the package are available in the FHIR server.</p>",
        "id": 224083952,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1611686594
    },
    {
        "content": "<p>We specifically want that capability to distribute content IGs.</p>",
        "id": 224083984,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1611686611
    },
    {
        "content": "<p>All the profiles, value sets, questionnaires, libraries, etc.</p>",
        "id": 224084100,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1611686649
    },
    {
        "content": "<p>Specifically definitional resources? Not, say, examples I assume?</p>",
        "id": 224084334,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1611686764
    },
    {
        "content": "<p>(And \"loaded\" doesn't imply support for operations, profiles, etc?)</p>",
        "id": 224084371,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1611686777
    },
    {
        "content": "<p>So 'loaded' means \"you can query these resources from this registry\", not \"the instances on this server comply with these profiles\" or \"the behavior of this server complies with these IGs\"</p>",
        "id": 224085028,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1611687030
    },
    {
        "content": "<p>Loaded is well defined for general purpose fhir servers with configurable profile support - we'll enforce any profile that has its definitional resources in the store and is specified in the store configuration for enforcement. So it means you can query those definitional resources and all instances on the server comply with them.</p>",
        "id": 224085316,
        "sender_full_name": "Paul Church",
        "timestamp": 1611687136
    },
    {
        "content": "<blockquote>\n<p>we'll enforce any profile </p>\n</blockquote>\n<p>meaning ... if a resource applies an explicit profile tag? Or you'll make sure that every resource matches at least 1 profile in the absence of explicit tags?</p>",
        "id": 224085474,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1611687210
    },
    {
        "content": "<p>the latter</p>",
        "id": 224085633,
        "sender_full_name": "Paul Church",
        "timestamp": 1611687275
    },
    {
        "content": "<p>OK -- so in a server with <em>lots</em> of profiles loaded, you'll speculatively validate each new resources against all of them until you find a hit?</p>",
        "id": 224085695,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1611687304
    },
    {
        "content": "<p>Only the ones configured, but yes if you configured 100 possible profiles it would be rather slow. Just loading definitional resources doesn't cause this to happen.</p>",
        "id": 224085815,
        "sender_full_name": "Paul Church",
        "timestamp": 1611687356
    },
    {
        "content": "<p>OK -- so for a client, discovery of which IGs are \"loaded\" doesn't tell the whole story; server-specific config is where the rules are set.</p>",
        "id": 224085933,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1611687402
    },
    {
        "content": "<p>That config could be reflected in the cap statement though, so the client doesn't have to understand proprietary configuration.</p>",
        "id": 224086213,
        "sender_full_name": "Paul Church",
        "timestamp": 1611687530
    },
    {
        "content": "<p>Cool -- so this is good, <del>but</del> and highlights that \"loaded\" IGs is one thing clients can discover; \"profiles configured for validation\" is a distinct thing.</p>",
        "id": 224086669,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1611687720
    },
    {
        "content": "<p>We are considering a separate mechanism for configuring/describing profiles that would be validated if a resource arrives tagged with them, but are not on the strict enforcement list. But so far the main use case seems to be \"I want everything in this store to conform to USCDI/CARIN/etc.\"</p>",
        "id": 224087111,
        "sender_full_name": "Paul Church",
        "timestamp": 1611687895
    }
]