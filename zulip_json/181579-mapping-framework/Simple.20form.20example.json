[
    {
        "content": "<p>I am trying to wrap my head around <a href=\"https://www.hl7.org/fhir/mapping-language.html#simple\" target=\"_blank\" title=\"https://www.hl7.org/fhir/mapping-language.html#simple\">https://www.hl7.org/fhir/mapping-language.html#simple</a> and the long form equivalent and could use some help...</p>\n<p>In the long example, I see that the <code>create</code> transform takes a <code>type</code> parameter, which is a string of a type that is known (somehow). This example uses the string 'type'. Then the dependent invocation of the rule is spelled <code>defaultMappingGroup</code>. Is this a special kind of invocation? Most of the examples I've seen the spelling of the invocation corresponds to the spelling of the type parameter in the transform of the rule target. Or refer to some other group.</p>",
        "id": 172677251,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1565184357
    },
    {
        "content": "<p>Let's say that src.element is of type CodeableConcept and tgt.element is of type v3CE.  Further, let's assume you've defined a group called mapCodeableConceptTov3CE that maps CodeableConcept to v3CE and is declared with (types) which means that its the default mapping for those two types.  Then the short form becomes equivalent to:<br>\nsrc.element as vvs -&gt; tgt.element = create('v3CE') as vvt then mapCodeableConceptTov3CE(vvs, vvt)</p>",
        "id": 172677713,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1565184627
    },
    {
        "content": "<p>Okay. So this example assumes a group called <code>defaultMappingGroup</code> to exist? I guess I am trying to understand how we go from the shorthand to the long form here...</p>",
        "id": 172679514,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1565185888
    },
    {
        "content": "<p>No, it does not need to be called \"defaultMappingGroup\".  That part is just saying that what ever group has been defined as the default mapping group for the src.element and the tgt.element types will be called.  That is what it states that right after the long form:<br>\nWhere the name of the type given as a parameter to 'create' and the group invoked by the 'then' are determined by the context of src.element and tgt.element and the selected default mapping group, as documented in the next section.</p>",
        "id": 172679684,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1565186019
    },
    {
        "content": "<p>As I said earlier, if this group was present in your set of mappings: <br>\ngroup mapCodeableConceptToV3CE(source src:CodeableConcept, target tgt:v3CE) &lt;&lt;types&gt;&gt; { mapping stuff goes here}</p>\n<p>then the long form equivalent becomes:<br>\nsrc.element as vvs -&gt; tgt.element = create('v3CE') as vvt then mapCodeableConceptTov3CE(vvs, vvt)</p>",
        "id": 172679900,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1565186166
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span> for bearing with me -- just so I am clear, what would the long form of the first rule of the R3-&gt;R4 of the  Basic resource (<a href=\"https://www.hl7.org/fhir/basic-version-maps.html#2.34.13.1\" target=\"_blank\" title=\"https://www.hl7.org/fhir/basic-version-maps.html#2.34.13.1\">https://www.hl7.org/fhir/basic-version-maps.html#2.34.13.1</a>) be, e.g.<code>src.identifier -&gt; tgt.identifier</code>?</p>",
        "id": 172680531,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1565186606
    },
    {
        "content": "<p>src.identifier as vvs -&gt; tgt.identifier = create('Identifier' as vvt then whateverTheNameOfTheDefaultIdentifierToIdentiferMappingIs(vvs, vvt);</p>",
        "id": 172680640,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1565186681
    },
    {
        "content": "<p>src.identifier as vvs -&gt; tgt.identifier = create('Identifier') as vvt then Identifier(vvs, vvt);   (I looked and saw that was the name of the default mapping of IdentifierR3 to Identifier)  (<a href=\"https://www.hl7.org/fhir/datatypes-version-maps.html#identifier\" target=\"_blank\" title=\"https://www.hl7.org/fhir/datatypes-version-maps.html#identifier\">https://www.hl7.org/fhir/datatypes-version-maps.html#identifier</a>)</p>",
        "id": 172680786,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1565186815
    },
    {
        "content": "<p>And as I dig deeper, I am trying to understand the implication of <code>&lt;&lt;types&gt;&gt;</code> vs <code>&lt;&lt;type+&gt;&gt;</code> for default groups.</p>\n<p>Why was it decided that <code>group string2id</code> should have <code>&lt;&lt;types&gt;&gt;</code> while <code>group id2string</code> a group type of <code>&lt;&lt;type+&gt;&gt;</code> (see <a href=\"https://github.com/HL7/fhir/blob/master/implementations/r3maps/R4toR3/primitives.map\" target=\"_blank\" title=\"https://github.com/HL7/fhir/blob/master/implementations/r3maps/R4toR3/primitives.map\">https://github.com/HL7/fhir/blob/master/implementations/r3maps/R4toR3/primitives.map</a>)?</p>",
        "id": 173849360,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1566443817
    },
    {
        "content": "<p>The section on default mappings talks about the difference:  <a href=\"http://hl7.org/implement/standards/fhir/mapping-language.html#7.7.0.9\" target=\"_blank\" title=\"http://hl7.org/implement/standards/fhir/mapping-language.html#7.7.0.9\">http://hl7.org/implement/standards/fhir/mapping-language.html#7.7.0.9</a></p>\n<p>&lt;&lt;types&gt;&gt; is used when you want the source and the target to match exactly.<br>\n&lt;&lt;type+&gt;&gt; is used when you only need the source to match and the target will just get cast/converted to the target type.</p>\n<p>So string2id is marked as &lt;&lt;types&gt;&gt; because we only want this transform to be called when the source is a string and the target is an idR3.  It won't get called in any situtation.</p>\n<p>OTOH id2string is marked as &lt;&lt;type+&gt;&gt; because it is sort of the fallback for when the source is an id and the target isn't something more specific (id2oid for instance) and the target can be converted to a string.  so it will handle id2code, id2markdown, and id2string.  NOTE: it won't handle id2id even though id is a type of string, because we have a group that matches id, id already specified.</p>",
        "id": 173852610,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566449224
    }
]