[
    {
        "content": "<p>Hi all, I'm new to the chat but just getting started with CQL and could use a little help. I'm working with a <a href=\"https://build.fhir.org/ig/jamlung-ri/PEPFAR-WHO-Simple-HIV/branches/main/index.html\">basic custom FHIR IG</a> that I generated for this work. I am wondering how I can incorporate the <a href=\"https://build.fhir.org/ig/jamlung-ri/PEPFAR-WHO-Simple-HIV/branches/main/artifacts.html#2\">Extension Definitions</a> that I made into the <a href=\"https://github.com/jamlung-ri/PEPFAR-WHO-Simple-HIV/blob/main/cql/HIV_Indicator_AV3.cql\">CQL language</a> that I started. How can I point my CQL to pull from a particular Structure Definition (e.g. estimatedAge in the linked CQL above)?</p>",
        "id": 233303740,
        "sender_full_name": "Joe Amlung",
        "timestamp": 1617709231
    },
    {
        "content": "<p>There is in-progress tooling <a href=\"https://github.com/cqframework/cqf-tooling/blob/master/src/main/java/org/opencds/cqf/tooling/modelinfo/StructureDefinitionToModelInfo.java#L42\">here</a> to generate ModelInfo from structure definitions. Once the ModelInfo is generated, it can be referenced from your CQL with a <code>using</code> declaration. The ModelInfo will have first-class elements for extensions and slices defined in the profiles.</p>",
        "id": 233320598,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1617716590
    },
    {
        "content": "<p>In lieu of that, you can access extensions directly in the CQL using functions like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>/*\n@description: Returns any US Core extensions defined on the given resource with the specified id.\n@comment: NOTE: Extensions are not the preferred approach, but are used as a way to access\ncontent that is defined by extensions but not yet surfaced in the CQL model info.\n*/\ndefine function USExtensions(domainResource DomainResource, id String):\n  domainResource.extension E\n      where E.url = (&#39;http://hl7.org/fhir/us/core/StructureDefinition/&#39; + id)\n        return E\n\n/*\n@description: Returns the single US Core extension (if present) on the given resource with the specified id.\n@comment: This function uses singleton from to ensure that a run-time exception is thrown if there\nis more than one extension on the given resource with the specified url.\n*/\ndefine function USExtension(domainResource DomainResource, id String):\n  singleton from USExtensions(domainResource, id)\n</code></pre></div>",
        "id": 233321383,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1617716914
    },
    {
        "content": "<p>You could also follow that same pattern and write functions to expose specific extensions.</p>",
        "id": 233321495,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1617716951
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> ! Are there any CQL examples that use these functions in the code you pasted? I think this method should work, but an example should help me get the syntax right.</p>",
        "id": 233531199,
        "sender_full_name": "Joe Amlung",
        "timestamp": 1617817042
    },
    {
        "content": "<p>Actually, <span class=\"user-mention\" data-user-id=\"194192\">@Richard Stanley</span> pointed me to a CQF Exercise that helped me: <a href=\"https://github.com/cqframework/cqf-exercises/blob/master/input/cql/Exercises09Key.cql\">https://github.com/cqframework/cqf-exercises/blob/master/input/cql/Exercises09Key.cql</a></p>",
        "id": 233541759,
        "sender_full_name": "Joe Amlung",
        "timestamp": 1617821287
    }
]