[
    {
        "content": "<p>In the .g4 grammar for CQL,  the library statement's identifier is required to be a qualified identifier production and the ANTLR parser built from this grammar  seems to accept a qualified identifier of the form X.Y.Z.libraryName. However, there are no examples in the CQL spec where the library name is shown to be anything other than a simple identifier and when I try to use a qualified identifier in language processors presumably built on this syntax, a syntax error is thrown when one tries to use a qualified identifier in this context. Why is a qualified identifier production specified instead of a library identifier or a simple identifier production in the grammar, if the end result is an error message anyway?</p>",
        "id": 215949947,
        "sender_full_name": "Frank Adrian",
        "timestamp": 1604747124
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"336710\">@Frank Adrian</span>, qualified library identifiers were introduced in CQL 1.3 to support namespacing, but the environment that's translating the CQL has to provide the namespace information (because you can't declare it in a CQL library, it's necessarily outside the CQL. It shouldn't give you an error though, can you give some more details on what error you are seeing?</p>",
        "id": 216295861,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1605056372
    },
    {
        "content": "<p>What I'm seeing is an inconsistency in the documentation and the .g4<br>\ngrammar.<br>\nThe ANTLR grammar defines the libraryDefinition as:<br>\nlibraryDefinition<br>\n    : 'library' qualifiedIdentifier ('version' versionSpecifier)?<br>\n    ;<br>\nHowever, if you actually use a qualifiedIdentifier like<br>\nAQualifier.MyLibName in this context, the compiler throws an error<br>\n(Something about a syntax error at the \".\" which makes sense as there is no<br>\nvalid semantic meaning for a library name that is qualified as the main<br>\nlibrary name in the library declaration proper). This check seems to be<br>\ndone somewhere in the semantic checking for the CQL compiler. My question<br>\nis whether or not this is the proper type of identifier production to be<br>\nused in this context in the grammar. The unqualified libraryIdentifier<br>\nproduction would work as well in this particular context and be clearer as<br>\nto what is accepted legally in the language. I might be missing some<br>\nsemantic meaning of a library statement like \"library AQualifier.MyLibrary<br>\nversion '2'\", but I don't think so as there are no examples like this in<br>\nthe CQL standard and it's prohibited by something in the compiler anyway.<br>\nSo what was the rationale behind using a qualifiedIdentifier in this<br>\ncontext rather than an unqualified libraryIdentifier? The code seems to go<br>\nthrough more work to limit the identifier in this context and,<br>\ngrammar-wise, it's misleading at best.</p>",
        "id": 216298038,
        "sender_full_name": "Frank Adrian",
        "timestamp": 1605058394
    }
]