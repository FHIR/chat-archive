[
    {
        "content": "<p>Has anyone written a CQL pattern for generating a FHIR bundle that you can share?</p>",
        "id": 190569738,
        "sender_full_name": "Matt Pfeffer",
        "timestamp": 1584145380
    },
    {
        "content": "<p>So, since the FHIR 4.0.0 model info was generated from the XSD FHIR schema, it actually uses the \"ResourceContainer\" type whereever a \"Resource\" appears inline in the spec. So that means you need to process each type independently, and it ends up being a bit... verbose:</p>\n<div class=\"codehilite\"><pre><span></span>define function Bundle(Resources List&lt;Resource&gt;):\n  Bundle {\n    entry:\n      Resources R\n        return FHIR.Bundle.Entry {\n          resource: ResourceContainer(R)\n        }\n  }\n\ndefine function ResourceContainer(Resource Resource):\n  ResourceContainer {\n    AdverseEvent: Resource as AdverseEvent,\n    AllergyIntolerance: Resource as AllergyIntolerance,\n    Appointment: Resource as Appointment,\n    ...\n  }\n</pre></div>\n\n\n<p>In the soon to be published 4.0.1 modelinfo, you can actually just say:</p>\n<div class=\"codehilite\"><pre><span></span>define function Bundle(Resources List&lt;Resource&gt;):\n  Bundle {\n    entry:\n      Resources R\n        return FHIR.Bundle.Entry {\n          resource: R\n        }\n  }\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>, this turns out to be at least one concrete difference between the 4.0.0 and 4.0.1 model infos, directly resulting from the different toolchains used to create them.</p>",
        "id": 190792516,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1584401170
    },
    {
        "content": "<p>Thanks for the heads up, <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>.  Now we know that the CQL FHIR 4.0.0 model is <em>not</em> compatible w/ the CQL FHIR 4.0.1 model -- so runtimes will need to support them independently (i.e., you can't use a FHIR 4.0.0 model provider w/ a FHIR 4.0.1 CQL library).  That's definitely a good thing to know!  And... it looks like the difference is an <em>improvement</em>, so that's good to see!</p>",
        "id": 190839269,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1584447783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> Thank you!</p>",
        "id": 191024214,
        "sender_full_name": "Matt Pfeffer",
        "timestamp": 1584556784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> Thanks for explaining!</p>",
        "id": 191065604,
        "sender_full_name": "Mohammad Afaq Khan",
        "timestamp": 1584583941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> Is there any way to do this in FHIR 3, as well?</p>",
        "id": 191204284,
        "sender_full_name": "Matt Pfeffer",
        "timestamp": 1584682429
    },
    {
        "content": "<p>Yes, the same pattern should work, FHIR '3.0.0' has a ResourceContainer, but FHIR '3.0.1' does not.</p>",
        "id": 191297273,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1584735688
    },
    {
        "content": "<p>We've been using the CQF-Tooling to generate FHIR bundles from CQL files (PlanDefinition, Library, ValueSets), but we were wondering where in the CQF-Tooling code we could find the function that generates the PlanDefinition. It seems like one is generated when we run the refresh script in an IG, but we want to try to do this outside of an IG. Can someone point us at the right file or set of files in the CQF-Tooling? <a href=\"https://github.com/cqframework/cqf-tooling\">https://github.com/cqframework/cqf-tooling</a> <span class=\"user-mention\" data-user-id=\"416084\">@Paul Puscas</span></p>",
        "id": 245441850,
        "sender_full_name": "Alex Goel",
        "timestamp": 1625836735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192545\">@Alex Goel</span>   </p>\n<p>Each resource type that gets refreshed has a FHIR specific Refresh Operation that defaults to the location of the respective resources in an IG, like this: <a href=\"https://github.com/cqframework/cqf-tooling/blob/a45090374b140e01cbf96143a92279da48b7cc72/src/main/java/org/opencds/cqf/tooling/measure/r4/RefreshR4MeasureOperation.java#L26\">https://github.com/cqframework/cqf-tooling/blob/a45090374b140e01cbf96143a92279da48b7cc72/src/main/java/org/opencds/cqf/tooling/measure/r4/RefreshR4MeasureOperation.java#L26</a>.</p>\n<p>But I believe for each Resource you can override the default path with a command line argument, like this: <a href=\"https://github.com/cqframework/cqf-tooling/blob/a45090374b140e01cbf96143a92279da48b7cc72/src/main/java/org/opencds/cqf/tooling/operation/RefreshGeneratedContentOperation.java#L48\">https://github.com/cqframework/cqf-tooling/blob/a45090374b140e01cbf96143a92279da48b7cc72/src/main/java/org/opencds/cqf/tooling/operation/RefreshGeneratedContentOperation.java#L48</a>.</p>\n<p>So I think you just need to use the arguments for your respective Resources.</p>",
        "id": 245610448,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1626014912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217210\">@Rob Reynolds</span> Thanks Rob! I see the Measure and Library functions, but not the PlanDefinition functions, but the refresh does both Measures and PlanDefinitions? We think it's this: <a href=\"https://github.com/cqframework/cqf-tooling/blob/a45090374b140e01cbf96143a92279da48b7cc72/src/main/java/org/opencds/cqf/tooling/operation/RefreshIGOperation.java\">https://github.com/cqframework/cqf-tooling/blob/a45090374b140e01cbf96143a92279da48b7cc72/src/main/java/org/opencds/cqf/tooling/operation/RefreshIGOperation.java</a></p>",
        "id": 245690618,
        "sender_full_name": "Alex Goel",
        "timestamp": 1626098829
    },
    {
        "content": "<p>And this: <a href=\"https://github.com/cqframework/cqf-tooling/blob/a45090374b140e01cbf96143a92279da48b7cc72/src/main/java/org/opencds/cqf/tooling/processor/PlanDefinitionProcessor.java\">https://github.com/cqframework/cqf-tooling/blob/a45090374b140e01cbf96143a92279da48b7cc72/src/main/java/org/opencds/cqf/tooling/processor/PlanDefinitionProcessor.java</a></p>",
        "id": 245690835,
        "sender_full_name": "Alex Goel",
        "timestamp": 1626098962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217210\">@Rob Reynolds</span> I spoke too soon! These seem to refresh the PlanDefinitions, but is there a way to automatically build them from the CQL, like the Measures? We were expecting to find a file structure similar to Measures in the CQF-Tooling</p>",
        "id": 245836664,
        "sender_full_name": "Alex Goel",
        "timestamp": 1626188084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192545\">@Alex Goel</span> - <code>PlanDefinition</code> is a bit more open-ended than <code>Measure</code> in that it can represent a wider variety of clinical logic such as arbitrary treatment workflows, cds services, etc. So whereas it's relatively straightforward to generate some types of <code>Measure</code> resources from CQL it's not possible to do that for <code>PlanDefinition</code> in a general way. When the cqf-tooling \"refreshes\" a <code>PlanDefinition</code> resource it merely fills out some meta-data based on whatever <code>Library</code> or CQL is referenced.</p>",
        "id": 245873322,
        "sender_full_name": "JP",
        "timestamp": 1626203681
    },
    {
        "content": "<p>IOW, it's expected that the <code>PlanDefinition</code> skeleton and logic would be authored \"some other way\" and then the tooling takes it from there to ease manual maintenance of things like relatedArtifacts.</p>",
        "id": 245873504,
        "sender_full_name": "JP",
        "timestamp": 1626203778
    },
    {
        "content": "<p>Got it! Thanks <span class=\"user-mention\" data-user-id=\"194178\">@JP</span></p>",
        "id": 245874587,
        "sender_full_name": "Alex Goel",
        "timestamp": 1626204257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192545\">@Alex Goel</span>  What <span class=\"user-mention\" data-user-id=\"194178\">@JP</span> said.  <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 245988216,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1626281938
    }
]