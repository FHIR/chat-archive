[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> , <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> , et al.<br>\nHello - I'm trying to determine how to validate a medication code within a MedicationRequest FHIR resource.</p>\n<p>I'm getting the following error in CQL-runner tool (<a href=\"http://cql-runner.dataphoria.org/\" target=\"_blank\" title=\"http://cql-runner.dataphoria.org/\">http://cql-runner.dataphoria.org/</a>)<br>\n<code>Member medicationCodeableConcept not found for type FHIR.MedicationRequest.</code></p>\n<p>I have a patient , MedicationRequest, and value set resource created in Hapi-FHIR (<a href=\"http://hapi.fhir.org/\" target=\"_blank\" title=\"http://hapi.fhir.org/\">http://hapi.fhir.org/</a>) - links pasted below.<br>\nThese resources were designed so that the code in the MedicationRequest will match the code in the value set.</p>\n<p><a href=\"http://hapi.fhir.org/baseDstu3/Patient/1232869/_history/1\" target=\"_blank\" title=\"http://hapi.fhir.org/baseDstu3/Patient/1232869/_history/1\">http://hapi.fhir.org/baseDstu3/Patient/1232869/_history/1</a><br>\n<a href=\"http://hapi.fhir.org/baseDstu3/MedicationRequest/1232872/_history/1\" target=\"_blank\" title=\"http://hapi.fhir.org/baseDstu3/MedicationRequest/1232872/_history/1\">http://hapi.fhir.org/baseDstu3/MedicationRequest/1232872/_history/1</a><br>\n<a href=\"http://hapi.fhir.org/baseDstu3/ValueSet/1232871/_history/2\" target=\"_blank\" title=\"http://hapi.fhir.org/baseDstu3/ValueSet/1232871/_history/2\">http://hapi.fhir.org/baseDstu3/ValueSet/1232871/_history/2</a></p>\n<p>This is the CQL I'm trying to run:</p>\n<div class=\"codehilite\"><pre><span></span>/*\nSetup:\n1. CQL Engine: http://cql-runner.dataphoria.org/\n2. Config: Set &#39;Source Data&#39; to &#39;http://hapi.fhir.org/baseDstu3&#39;\n3. Config: Set &#39;Terminology Service to &#39;http://hapi.fhir.org/baseDstu3&#39;\n3. Config: Set &#39;Patient Id to &#39;1232869&#39;\n4. Run the library\n*/\n\nlibrary CQLDemo version &#39;1.0&#39;\n\nusing FHIR version &#39;3.0.0&#39;\n\ninclude FHIRHelpers version &#39;3.0.0&#39; called FHIRHelpers\n\ncodesystem &quot;RxNorm&quot;: &#39;http://www.nlm.nih.gov/research/umls/rxnorm&#39;\n\nvalueset &quot;Medications&quot;: &#39;http://www.valuesettesting.com/vs/mr-sm&#39;\n\ncontext Patient\n\ndefine &quot;Medications Requested&quot;:\n  [MedicationRequest] Meds\n    where Meds.medicationCodeableConcept.coding[0] in &quot;Medications&quot;\n\n\ndefine &quot;No Medications Requested&quot;:\n   not exists(&quot;Medications Requested&quot;)\n</pre></div>\n\n\n<p>Any help or guidance for how to properly write the \"Medications Requested\" retrieve so that I can avoid the error and validate the code would be greatly appreciated.</p>",
        "id": 156727535,
        "sender_full_name": "Adam Rodriguez",
        "timestamp": 1548279580
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"197243\">@Adam Rodriguez</span>.  I only have a few minutes before I need to board a plane, but I think the issue is that in the STU3 model definition, MedicationRequest's medication property is reflected as a choice type with name <code>medication</code> -- so you can't access it a <code>Meds.medicationCodeableConcept</code> -- you must access it as <code>Meds.medication</code> and cast as necessary.</p>\n<p>So in your example, I think you may be able to use one of these approaches (but I can't test them right now):</p>\n<div class=\"codehilite\"><pre><span></span>define &quot;Medications Requested&quot;:\n  [MedicationRequest] Meds\n    where (Meds.medication as CodeableConcept).coding[0] in &quot;Medications&quot;\n\ndefine &quot;Medications Requested Alternate&quot;:\n  [MedicationRequest: medication in &quot;Medications&quot;]\n</pre></div>",
        "id": 156742886,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1548295910
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> , thank you for the quick response!</p>\n<p>Though I don't fully understand the issue (I've got some studying to do) I went ahead tried both suggestions - here's what I got:</p>\n<p>For the first solution, I get a new error message that seems to have an issue with the RxNorm code system:</p>\n<div class=\"codehilite\"><pre><span></span>&gt;&gt; Error [23:1]: HTTP 400 Bad Request: unable to find code system http://www.nlm.nih.gov/research/umls/rxnorm\n&gt;&gt; Error [31:1]: HTTP 400 Bad Request: unable to find code system http://www.nlm.nih.gov/research/umls/rxnorm\n</pre></div>\n\n\n<p>For the second solution, it is error free, but the result is not as expected.  I thought that I should be getting the MedicationRequest record to display as well as get a 'false' for the \"No Medications Requested\" existence check.</p>\n<div class=\"codehilite\"><pre><span></span>&gt;&gt; Medications Requested [28:1] []\n&gt;&gt; No Medications Requested [31:1] true\n</pre></div>\n\n\n<p>Hope you had (or having) a safe flight and look forward to thoughts on where to go from here.</p>\n<p>Very much appreciated.</p>",
        "id": 156749562,
        "sender_full_name": "Adam Rodriguez",
        "timestamp": 1548306799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197243\">@Adam Rodriguez</span> - Well, I <em>think</em> different errors might be a sign of progress?  At least we can hope so!</p>\n<p>Regarding the issue with RxNorm, it <em>sounds</em> like maybe the HAPI server you're using as the terminology server doesn't support RxNorm.  This query comes up empty: <a href=\"http://hapi.fhir.org/baseDstu3/CodeSystem?url=http://www.nlm.nih.gov/research/umls/rxnorm\" target=\"_blank\" title=\"http://hapi.fhir.org/baseDstu3/CodeSystem?url=http://www.nlm.nih.gov/research/umls/rxnorm\">http://hapi.fhir.org/baseDstu3/CodeSystem?url=http://www.nlm.nih.gov/research/umls/rxnorm</a></p>\n<p>That said, I'm not familiar enough with how cql-runner works to know why it's querying for the code system at all and what it's doing with it.  I think you're going to have to check with <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> on the details of cql-runner.</p>\n<p>Regarding the fact that you're getting nothing back with the second approach -- I actually wasn't sure if that one would work or not.  The CQL grammar doesn't give us a way to cast the <code>medication</code> property when we use it inside a retrieve, so I wasn't sure how the cql-runner engine would handle it.  In theory, the context of how the property is used in the retrieve should be enough to hint that it's a code -- but I haven't confirmed that it works in practice.  Again, that's getting more to the details of the cql-runner and Java engine, so you may need to ask <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> about that.</p>",
        "id": 156750189,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1548307895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197243\">@Adam Rodriguez</span> , @Chris Moesel is correct, it's trying to $expand the \"Medications\" value set, which HAPI reports can't be done without the RxNorm code system. Looking at the value sets currently on that server, there are actually 3 with that url: <a href=\"http://hapi.fhir.org/baseDstu3/ValueSet?url=http%3A%2F%2Fwww.valuesettesting.com%2Fvs%2Fmr-sm\" target=\"_blank\" title=\"http://hapi.fhir.org/baseDstu3/ValueSet?url=http%3A%2F%2Fwww.valuesettesting.com%2Fvs%2Fmr-sm\">http://hapi.fhir.org/baseDstu3/ValueSet?url=http%3A%2F%2Fwww.valuesettesting.com%2Fvs%2Fmr-sm</a>, so it's not clear in that case what the underlying HAPI server will do with the request. Note that for choices, the translator will automatically cast when the appropriate type can be inferred by the use. For example:</p>",
        "id": 156854596,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1548425279
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>define &quot;Medications Requested&quot;:\n  [MedicationRequest] Meds where Meds.medication in &quot;Medications&quot;\n</pre></div>\n\n\n<p>This is valid CQL, the choice is resolved as a concept, which has a membership testing operator for value sets. My guess though is that depending on how HAPI is resolving that value set URL, you get one of the 3 value sets.</p>",
        "id": 156854833,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1548425482
    },
    {
        "content": "<p>Just want to let you know that the following structure did in fact work for another experimental case.  </p>\n<p>Thank you <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>  and <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>  again for all your help!</p>\n<p>define \"Medications Requested\":<br>\n  [MedicationRequest] Meds<br>\n    where (Meds.medication as CodeableConcept).coding[0] in \"Medications\"</p>",
        "id": 159556906,
        "sender_full_name": "Adam Rodriguez",
        "timestamp": 1551305019
    },
    {
        "content": "<p>Hello again <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> , <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> ,</p>\n<p>I'm very appreciative of the assistance I've received on this topic.  I'm revisiting this type of query and wondering if either of you could point me in the right direction to reference a literature source as to where this query structure is explained - specifically the last line of the following segment where you can indicate \"...as CodeableConcept).coding[0]...\":</p>\n<p><code>define \"Medications Requested\":\n[MedicationRequest] Meds\nwhere (Meds.medication as CodeableConcept).coding[0] in \"Medications\"</code></p>\n<p>I'm not sure if I would have ever figured this out on my own without your support.</p>",
        "id": 163017416,
        "sender_full_name": "Adam Rodriguez",
        "timestamp": 1554911622
    },
    {
        "content": "<p>It's <em>kind of</em> mentioned here: <a href=\"https://cql.hl7.org/03-developersguide.html#choice-types\" target=\"_blank\" title=\"https://cql.hl7.org/03-developersguide.html#choice-types\">https://cql.hl7.org/03-developersguide.html#choice-types</a> -- although that implies that perhaps the cast actually was not necessary?</p>\n<p>Documentation on casting in general is here:<a href=\"https://cql.hl7.org/03-developersguide.html#casting\" target=\"_blank\" title=\"https://cql.hl7.org/03-developersguide.html#casting\">https://cql.hl7.org/03-developersguide.html#casting</a> and here: <a href=\"https://cql.hl7.org/09-b-cqlreference.html#as\" target=\"_blank\" title=\"https://cql.hl7.org/09-b-cqlreference.html#as\">https://cql.hl7.org/09-b-cqlreference.html#as</a>.</p>\n<p>Neither of those talk about it specifically in regard to the <code>where</code> clause, but a cast can pretty much be used where ever it might be needed.</p>\n<p>If you're looking for more documentation on queries, they're introduced here: <a href=\"https://cql.hl7.org/02-authorsguide.html#queries\" target=\"_blank\" title=\"https://cql.hl7.org/02-authorsguide.html#queries\">https://cql.hl7.org/02-authorsguide.html#queries</a></p>\n<p>More advanced topics regarding queries start here: <a href=\"https://cql.hl7.org/03-developersguide.html#introducing-context-in-queries\" target=\"_blank\" title=\"https://cql.hl7.org/03-developersguide.html#introducing-context-in-queries\">https://cql.hl7.org/03-developersguide.html#introducing-context-in-queries</a></p>\n<p>And the query evaluation section can also be helpful for understand how queries ought to work: <a href=\"https://cql.hl7.org/05-languagesemantics.html#query-evaluation\" target=\"_blank\" title=\"https://cql.hl7.org/05-languagesemantics.html#query-evaluation\">https://cql.hl7.org/05-languagesemantics.html#query-evaluation</a></p>",
        "id": 163018279,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1554912206
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"197243\">@Adam Rodriguez</span> , the specification discusses casting <a href=\"https://cql.hl7.org/03-developersguide.html#casting\" target=\"_blank\" title=\"https://cql.hl7.org/03-developersguide.html#casting\">here</a> and the indexer <a href=\"https://cql.hl7.org/02-authorsguide.html#operating-on-lists\" target=\"_blank\" title=\"https://cql.hl7.org/02-authorsguide.html#operating-on-lists\">here</a>, but the fact that that's how those are represented in the FHIR model info is documentation that we are still working on.</p>",
        "id": 163026013,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1554917475
    },
    {
        "content": "<p>Whoops, I didn't see Chris' response before I posted this, his is much better, thank you Chris!</p>",
        "id": 163026054,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1554917506
    },
    {
        "content": "<p>Actually, I made a mistake copy/pasting links in my original post, but I fixed it now.</p>",
        "id": 163036072,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1554923570
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> , <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> </p>\n<p>Thank you for all the posted resources.  I don't know why I never noticed before, but at the bottom of the FHIR STU3 Medication Request resource page there exists a 'Search Parameters' section - example: <a href=\"https://www.hl7.org/fhir/STU3/medicationrequest.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/STU3/medicationrequest.html\">https://www.hl7.org/fhir/STU3/medicationrequest.html</a></p>\n<p>For the 'code' parameter in the MedicationRequest FHIR STU3 resource, it specifies 'MedicationRequest.medication.as(CodeableConcept)' as its search expression.</p>\n<p>Can this expression be directly used for a CQL retrieve?  As in:</p>\n<p><code>define \"Medications Requested\":\n[MedicationRequest] Meds\nwhere Meds.medication.as(CodeableConcept) in \"Medications\"</code></p>\n<p>In comparison, the following retrieve had worked for me previously:</p>\n<p><code>define \"Medications Requested\":\n[MedicationRequest] Meds\nwhere (Meds.medication as CodeableConcept).coding[0] in \"Medications\"</code></p>\n<p>For a beginner, it's difficult for me to determine whether or not these are equivalent expressions or whether both should be valid.</p>\n<p>So, maybe another way to frame my new inquiry is: </p>\n<p>If I am using FHIR version 3.0.0 for a given CQL library artifact, are the search expressions provided in a given FHIR resource directly applicable for a CQL retrieve/query?</p>",
        "id": 166932927,
        "sender_full_name": "Adam Rodriguez",
        "timestamp": 1559240406
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"197243\">@Adam Rodriguez</span>!</p>\n<blockquote>\n<p>If I am using FHIR version 3.0.0 for a given CQL library artifact, are the search expressions provided in a given FHIR resource directly applicable for a CQL retrieve/query?</p>\n</blockquote>\n<p>The expressions you see in the search parameter documentation (such as <code>MedicationRequest.medication.as(CodeableConcept)</code>) are expressed using FHIRPath.  The FHIRPath specification actually has a section on using FHIRPath in CQL: <a href=\"http://hl7.org/fhirpath/#use-of-fhirpath-in-clinical-quality-language-cql\" target=\"_blank\" title=\"http://hl7.org/fhirpath/#use-of-fhirpath-in-clinical-quality-language-cql\">http://hl7.org/fhirpath/#use-of-fhirpath-in-clinical-quality-language-cql</a></p>\n<p>So... at a basic level, CQL does support using FHIRPath expressions as described in that section -- which means that the expressions you see in the search parameter documentation should be valid.  That said, some organizations/programs/style-guides may prohibit or discourage CQL authors from using some of these FHIRPath features in clinical logic, and the CQL-to-ELM translator can be configured to disallow them.  In addition, CQL code may look inconsistent if it contains a mixture of \"traditional\" CQL operators and \"method-style invocation\" -- so authors should also keep that in mind.</p>\n<blockquote>\n<p>For a beginner, it's difficult for me to determine whether or not these are equivalent expressions or whether both should be valid.</p>\n</blockquote>\n<p>The CQL specification has an appendix that actually shows FHIRPath functions and their equivalent \"traditional\" CQL representations: <a href=\"https://cql.hl7.org/16-i-fhirpathtranslation.html\" target=\"_blank\" title=\"https://cql.hl7.org/16-i-fhirpathtranslation.html\">https://cql.hl7.org/16-i-fhirpathtranslation.html</a></p>",
        "id": 166941004,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1559246411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>   Thank you so much for the quick response!</p>\n<p>Ok, here's where I'm at now...</p>\n<p>In the first link you recently provided (<a href=\"http://hl7.org/fhirpath/#use-of-fhirpath-in-clinical-quality-language-cql\" target=\"_blank\" title=\"http://hl7.org/fhirpath/#use-of-fhirpath-in-clinical-quality-language-cql\">http://hl7.org/fhirpath/#use-of-fhirpath-in-clinical-quality-language-cql</a>) I think I understand in general why  <code>Patient.telecom.use</code> can equate to <code>Patient.telecom X where X.use is not null return X.use</code>.</p>\n<p>However, I think I failed to understand how that can be used to understand how the FHIR Path <code>MedicationRequest.medication.as(CodeableConcept)</code> equates to <code>MedicationRequest.medication as CodeableConcept).coding[0]</code> when trying to follow the <code>Patient.telecom.use</code> example.  I think the part that is throwing me off is how the portion <code>.as(CodeableConcept)</code> gets to <code>as CodeableConcept).coding[0]</code>.</p>\n<p>Additionally, after browsing through the second link (<a href=\"https://cql.hl7.org/16-i-fhirpathtranslation.html\" target=\"_blank\" title=\"https://cql.hl7.org/16-i-fhirpathtranslation.html\">https://cql.hl7.org/16-i-fhirpathtranslation.html</a>) my immediate reaction was to search for <code>.as()</code>, which I didn't see.  So I think I'm missing the point here too.  Again, my failure.</p>\n<p>For what it's worth, in that same first link, I reviewed polymorphism in FHIR (<a href=\"http://hl7.org/fhirpath/#polymorphism-in-fhir\" target=\"_blank\" title=\"http://hl7.org/fhirpath/#polymorphism-in-fhir\">http://hl7.org/fhirpath/#polymorphism-in-fhir</a>) and choice types (which you directed me to before) and I think something clicked.   I think after seeing the example of  <code>(Observation.value as Quantity).unit</code> and reviewing the <code>Observation</code> resource structure I can now see why  <code>MedicationRequest.medication as CodeableConcept).coding[0]</code> works.</p>\n<p>A few more follow up questions if that's ok:</p>\n<p>1. I think the last portion of  <code>MedicationRequest.medication as CodeableConcept).coding[0]</code> that I am trying to understand is the addition of the <code>[0]</code> appending to <code>.coding</code>.  Is this necessary for 'strict' CQL evaluation?<br>\n2. Based on what I shared above about the FHIR path translations, I'm not too confident that I would be able to directly translate a FHIR path without referencing the resource structure (especially for my example FHIR path: <code>MedicationRequest.medication.as(CodeableConcept)</code>).   So with that, can I reliably use what I think I now understand about writing retrieves based on the structure itself (not the FHIR path)  in all cases that assume a CQL-to-ELM translator is not configured to disallow for some reason?<br>\n3. Are either of the following retrieves valid?<br>\n<code>define \"Medications Requested\":\n[MedicationRequest.medication as CodeableConcept).coding[0] : \"Medications\"] MedicationsRequested</code></p>\n<p>Or</p>\n<p><code>define \"Medications Requested\":\n[MedicationRequest.medication.as(CodeableConcept).coding[0]: \"Medications\"] MedicationsRequested</code></p>\n<p>Of course, if you think there's another way that might help me get FHIR translations through my thick skull that'd be appreciated as well.  It'd be nice to have the confidence that I can take a FHIR path alone and convert that to a retrieve/query.</p>\n<p>I very much appreciate your continued help and patience!</p>",
        "id": 166961115,
        "sender_full_name": "Adam Rodriguez",
        "timestamp": 1559267072
    },
    {
        "content": "<p>In regard to your question about how the <code>Patient.telecom.use</code> example leads to <code>MedicationRequest.medication.as(CodeableConcept)</code> -- it doesn't!  Path traversal is not the same as method-style invocation, so you're not missing something here -- you're right.  I was directing you to the whole section, but the part that addresses the <code>.as()</code> (in broad terms) is  the subsection \"C.4. Method-style Invocation\" -- which basically says that you <em>can</em> use these method-style invocations in CQL (although it doesn't enumerate all the possibilities).</p>\n<blockquote>\n<p>Additionally, after browsing through the second link (<a href=\"https://cql.hl7.org/16-i-fhirpathtranslation.html\" target=\"_blank\" title=\"https://cql.hl7.org/16-i-fhirpathtranslation.html\">https://cql.hl7.org/16-i-fhirpathtranslation.html</a>) my immediate reaction was to search for .as(), which I didn't see. So I think I'm missing the point here too. Again, my failure.</p>\n</blockquote>\n<p>You're not missing the point.  It appears that <code>.as()</code> may have been omitted from the FHIRPath translations documentation by mistake.  As it turns out, <code>as()</code> <em>is</em> listed in the most recently balloted version of the spec, available here: <a href=\"https://cql.hl7.org/2019May/16-i-fhirpathtranslation.html#as\" target=\"_blank\" title=\"https://cql.hl7.org/2019May/16-i-fhirpathtranslation.html#as\">https://cql.hl7.org/2019May/16-i-fhirpathtranslation.html#as</a></p>\n<p>To answer your follow-up questions:</p>\n<blockquote>\n<p>1. I think the last portion of  MedicationRequest.medication as CodeableConcept).coding[0] that I am trying to understand is the addition of the [0] appending to .coding. Is this necessary for 'strict' CQL evaluation?</p>\n</blockquote>\n<p>The <code>.coding[0]</code> indicates that you only want to check the <em>first</em> coding in the CodeableConcept.  It's not strictly necessary and is, in fact, not the usual approach.  You actually had <code>.coding[0]</code> in your very first example when you started this thread, so I may have assumed it was intentional and you <em>wanted</em> to only check the first coding.  If that's not the case, you can drop <code>.coding[0]</code> altogether, so you're left with something that looks a lot more like that search expression you found -- and when you check for membership in a value set, it will look for a match on <em>any</em> of the codings in the CodeableConcept.</p>\n<blockquote>\n<p>2. ... So with that, can I reliably use what I think I now understand about writing retrieves based on the structure itself (not the FHIR path) in all cases that assume a CQL-to-ELM translator is not configured to disallow for some reason?</p>\n</blockquote>\n<p>I'm not sure I understand the question, but perhaps the answer to #1 above helps with this?  In short, however, the FHIRPath does still rely on (and relate to) the structure of the thing the path is on -- but it works a little different due to path traversal (e.g., it's less strict about singular vs. plural types).  As for choices, what you see as <code>medication[x]</code> in the FHIR spec (or serialized to <code>medicationCodeableConcept</code> or <code>medicationReference</code> in JSON instances) is represented in CQL as a choice, with the root name (e.g., <code>medication</code> for <code>medication[x]</code>, <code>value</code> for <code>value[x]</code>) as the property name (at least in FHIR 3+; FHIR DSTU2 is different).  If you really want to see the exact data model the CQL is operating against, you should take a look at the modelinfo XMLs here: <a href=\"https://github.com/cqframework/clinical_quality_language/tree/master/Src/java/quick/src/main/resources/org/hl7/fhir\" target=\"_blank\" title=\"https://github.com/cqframework/clinical_quality_language/tree/master/Src/java/quick/src/main/resources/org/hl7/fhir\">https://github.com/cqframework/clinical_quality_language/tree/master/Src/java/quick/src/main/resources/org/hl7/fhir</a></p>\n<blockquote>\n<p>3. 3. Are either of the following retrieves valid? ...</p>\n</blockquote>\n<p>No.  The part on the left-hand side of the <code>:</code> must refer only to a type -- the type you want to retrieve.  It cannot contain a path.  The part on the right-hand side of the <code>:</code> can be a value set (which is most common) or code (somewhat common), but also may <em>optionally</em> include a path indicating what property of the type should be checked against the value set / code.  That said, there are rules about what is and is not supported in that path -- and based on CQL 1.3, <code>.as()</code> would <em>not</em> be allowed within the retrieve.  In 1.4 we are more formally defining that path as a strict subset of FHIRPath -- but I'm still not sure <code>.as()</code> will be allowed in that context.  <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>?</p>\n<p>For completeness sake, I'll also mention that the right-hand side of <code>:</code> can also contain date-based filters, but that's not really relevant to this specific use case.  Still, for a better explanation of retrieves, check out this section in the spec:<br>\n<a href=\"https://cql.hl7.org/02-authorsguide.html#retrieve\" target=\"_blank\" title=\"https://cql.hl7.org/02-authorsguide.html#retrieve\">https://cql.hl7.org/02-authorsguide.html#retrieve</a></p>\n<p>I hope that helps!</p>",
        "id": 166965276,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1559273003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>  This is indeed very helpful as always.  </p>\n<p>In the effort to bring all this together, I'll try to design a new set of questions.</p>\n<p>Context: I'm interested in writing CQL to investigate data structured in FHIR (as opposed to QDM).</p>\n<p>Specifically in this case, validating a code in a MedicationRequest resource using a value set (I have other questions outside of this particular resource and I'll start a new topic on that).</p>\n<p>I think I now learned that the left side of a retrieve expression must refer to a type, not a path.  </p>\n<p>1. Are these the same 'types' that are found in this logical table? (<a href=\"https://www.hl7.org/fhir/STU3/formats.html#table\" target=\"_blank\" title=\"https://www.hl7.org/fhir/STU3/formats.html#table\">https://www.hl7.org/fhir/STU3/formats.html#table</a>).  Or, maybe these data types? (<a href=\"https://www.hl7.org/fhir/STU3/datatypes.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/STU3/datatypes.html\">https://www.hl7.org/fhir/STU3/datatypes.html</a>)<br>\nI realize that my second inquiry in my last response could be way clearer - my apologies.  What I'm ultimately trying to establish here is a standard way of writing retrieves before considering whether a CQL-to-ELM translator is configured to disable any particular style.  Though, I can see why that may not be a best practice.</p>\n<p>So, back to my given context and case, it seems that one way I can validate a code in a MedicationRequest resource is by looking down the medicationCodeableConcept path.  The FHIR path expression for this is <code>MedicationRequest.medication.as(CodeableConcept)</code>.</p>\n<p>Using the FHIR path translator guide (<a href=\"https://cql.hl7.org/2019May/16-i-fhirpathtranslation.html#as\" target=\"_blank\" title=\"https://cql.hl7.org/2019May/16-i-fhirpathtranslation.html#as\">https://cql.hl7.org/2019May/16-i-fhirpathtranslation.html#as</a>), where it indicates that for <code>.as()</code>, <code>X.as(T) === X as T</code>,  then  <code>MedicationRequest.medication.as(CodeableConcept)</code> should translate to <code>(MedicationRequest.medication as CodeableConcept)</code>.</p>\n<p>2. Would it be safe if I assumed that using the FHIR path can be my starting point for writing any retrieve in general, and can the following retrieve become my \"go-to\" standard in this case when using the FHIR path expression?<br>\n<code>define \"Medications Requested\":\n[MedicationRequest] Meds\nwhere (Meds.medication as CodeableConcept) in \"Medications\"</code></p>\n<p>Note in the above retrieve I've now also omitted the <code>.coding[0]</code> since I was not intentionally only checking the first coding as you pointed out (thank you for catching that!). </p>\n<p>I am still intrigued by some of the retrieve examples that look like they are based on the QDM data model.  For example:</p>\n<p><code>[Condition: severity in \"Acute Severity\"]</code></p>\n<p>and</p>\n<p><code>[Condition: \"Acute Pharyngitis\"] C where C.onsetDateTime during MeasurementPeriod</code></p>\n<p>3. Is this simplicity achieved because the QDM data model seems to have some sort of primary, or default, code attribute for which the value set is compared against?<br>\n4. If, in my case, the context is using FHIR, as opposed to QDM, does the FHIR structure have an analogous primary or default \"attribute\" such that a retrieve can be written like those examples.  For example, if I wrote the FHIR retrieve at the <code>medicationRequest</code> level would it default to looking for codes with a path of type <code>CodeableConcept</code>?<br>\nIn contrast, notice how my question above about establishing a \"go-to\" retrieve format incorporates a value set in the <code>where</code> clause.  </p>\n<p>Again, I am very appreciative of your continued time and guidance.</p>",
        "id": 167254087,
        "sender_full_name": "Adam Rodriguez",
        "timestamp": 1559620565
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"197243\">@Adam Rodriguez</span>:</p>\n<p>1. No, the model that CQL uses for FHIR selects the Resources as the retrievable types. See the <a href=\"https://github.com/cqframework/clinical_quality_language/blob/master/Src/java/quick/src/main/resources/org/hl7/fhir/fhir-modelinfo-3.0.0.xml\" target=\"_blank\" title=\"https://github.com/cqframework/clinical_quality_language/blob/master/Src/java/quick/src/main/resources/org/hl7/fhir/fhir-modelinfo-3.0.0.xml\">FHIR Model Info</a> for the detailed description, but basically, any Resource type can appear as the focus of a retrieve. So <code>[Encounter]</code> or <code>[Condition]</code>, but not <code>[string]</code> or <code>[HumanName]</code>.<br>\n2. Not really, since FHIRPath doesn't have retrieves or queries, only path traversal and manipulation operators. We've recently written a <a href=\"https://github.com/esacinc/CQL-Formatting-and-Usage-Wiki/wiki/Developers-Introduction-to-CQL\" target=\"_blank\" title=\"https://github.com/esacinc/CQL-Formatting-and-Usage-Wiki/wiki/Developers-Introduction-to-CQL\">Developer's Introduction to CQL</a> and would love any input/feedback you might have. Hopefully it is helpful.<br>\n3. Yes, exactly, each type specified in the Model Info specifies a \"primary code path\" that determines which element to use for terminology filtering if no code path is specified in the retrieve. For QDM, this is trivial because all the types have a <code>code</code> element.<br>\n4. In FHIR, we have selected a reasonable default (which you can see in the primaryCodePath attribute in the FHIR model info above), but not all the resources have a reasonable default. When there is no primaryCodePath specified in the model info, the translator will require that the retrieve specify a code path.</p>",
        "id": 167256600,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1559624197
    },
    {
        "content": "<p>And based on the context of your question, I would recommend that you have a look at the examples in the <a href=\"http://build.fhir.org/ig/HL7/cqf-measures/\" target=\"_blank\" title=\"http://build.fhir.org/ig/HL7/cqf-measures/\">FHIR Quality Measure IG</a>, there are several fully worked examples of QDM-based measures that have been expressed in FHIR-based CQL. And of course, we would love any feedback you have on the IG and the examples.</p>",
        "id": 167256682,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1559624323
    },
    {
        "content": "<p>And to answer your question from earlier <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> , no, the simple subset will only allow identifiers, qualifiers, and indexers with literal arguments. I don't think we would ever need an <code>as</code> within the path anyway, because the terminology expression is already required to evaluate to a terminology data type (code, concept, or list of code or concept), and so the data access layer would need to select the code-valued option of a choice element anyway.</p>",
        "id": 167256935,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1559624705
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> ,</p>\n<p>I took a look at the FHIR model (which is a deep dive for someone like me) and wondering if line 5128 is what I should be referring to when thinking about types and primarycodepaths:<br>\n<code>&lt;ns4:typeInfo xsi:type=\"ns4:ClassInfo\" name=\"MedicationRequest\" retrievable=\"true\" primaryCodePath=\"medication\" baseType=\"FHIR.DomainResource\"&gt;</code></p>\n<p>Taking a stab at this, is the implication here that the below retrieve is valid for the medicationRequest resource and utilizes the primary code path?</p>\n<p><code>Define \"Medication Requested\":\n[MedicationRequest: \"medicationValueSet\"]</code></p>\n<p>Or possibly:</p>\n<p><code>Define \"Medication Requested\":\n[MedicationRequest: medicationCodeableConcept in \"medicationValueSet\"]</code></p>\n<p>Or, did I just take two steps back here because <code>medication</code> is a choice type?</p>\n<p>Similarly, looking at line 7453:<br>\n<code>&lt;ns4:typeInfo xsi:type=\"ns4:ClassInfo\" name=\"Condition\" retrievable=\"true\" primaryCodePath=\"code\" baseType=\"FHIR.DomainResource\"&gt;</code></p>\n<p>With <code>code</code> noted above as being the primary code path for the <code>condition</code> resource, would the below be a valid retrieve?</p>\n<p><code>Define \"Patient Condition\":\n[Condition: \"conditionValueSet\"]</code></p>\n<p>Or, possibly:</p>\n<p><code>Define \"Patient Condition\":\n[Condition:  code in \"conditionValueSet\"]</code></p>\n<p>Again, what I'm really trying to figure out is establishing a baseline standard for writing retrieves in FHIR - initially my guess was that it would be either first looking at the FHIR path, or the FHIR resource structure itself and just explicitly choosing a path to a CodeableConcept.</p>\n<p>Since it sounds like the starting point is not to refer to the FHIR path for this purpose, I'll start digging into the Developer's Introduction to CQL link you provided.  But now this begs the question for me, which is: If the FHIR path is not ideal for drafting CQL retrieves, what is the primary benefit of the FHIR path as a search parameter being referenced for in each FHIR resource section?</p>\n<p>Hopefully I'm making some progress here.</p>",
        "id": 167264668,
        "sender_full_name": "Adam Rodriguez",
        "timestamp": 1559632576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>  By the way, I just ran into the following example from:<br>\n<a href=\"http://cql-runner.dataphoria.org/\" target=\"_blank\" title=\"http://cql-runner.dataphoria.org/\">http://cql-runner.dataphoria.org/</a></p>\n<p><code>define \"Active Ambulatory Opioid Rx\":\n  [MedicationRequest: \"Ambulatory Abuse Potential Opioids\"] Rx\n    where Rx.status.value = 'active'\n      and Rx.category.coding[0] ~ \"Outpatient\"</code></p>\n<p>So, hopefully that means one of my examples is valid?</p>\n<p>that is...</p>\n<p><code>Define \"Medication Requested\":\n[MedicationRequest: \"medicationValueSet\"]</code></p>\n<p>Having your confirmation on this would put me at ease.</p>",
        "id": 167269361,
        "sender_full_name": "Adam Rodriguez",
        "timestamp": 1559636592
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"197243\">@Adam Rodriguez</span> ,</p>\n<p>I apologize for the delay in responding.  It's been quite the week!  I expect Bryn would say the same -- except <em>every</em> week is probably like that for him!</p>\n<p>I'm just going to start from your oldest message and go down from there...</p>\n<p><strong>First up: translating the QDM logic for a diagnosis (condition) overlapping an encounter.</strong></p>\n<p>Your \"Patient Encounter\" expression works, but would be more succinct (and potentially more efficient) if you used this form:</p>\n<div class=\"codehilite\"><pre><span></span>define &quot;Patient Encounter&quot;:\n  [Encounter: class in &quot;encounterValueSet&quot;]\n</pre></div>\n\n\n<p>The reason it would be potentially be more efficient is because this form puts the code filter into the retrieve statement -- allowing the data layer to potentially make a more efficient query.  Otherwise, depending on implementation, it might query for <em>all</em> encounters and <em>then</em> apply the filter in memory.</p>\n<p>Similarly, your \"Patient Diagnosis\" expression should work as-is, but would be better as:</p>\n<div class=\"codehilite\"><pre><span></span>define “Patient Diagnosis”:\n  [Condition: &quot;conditionValueSet&quot;]\n</pre></div>\n\n\n<p>In this case, since <code>code</code> is identified as the <code>primaryCodePath</code> in the modelinfo file <a href=\"https://github.com/cqframework/clinical_quality_language/blob/master/Src/java/quick/src/main/resources/org/hl7/fhir/fhir-modelinfo-3.0.0.xml#L7453\" target=\"_blank\" title=\"https://github.com/cqframework/clinical_quality_language/blob/master/Src/java/quick/src/main/resources/org/hl7/fhir/fhir-modelinfo-3.0.0.xml#L7453\">here</a>, we don't even need to specify the property name <code>code</code> in the retrieve.</p>\n<p>As for \"Encounter with Diagnosis\", I don't think that what you suggested is valid CQL.  In particular, I don't think that <code>overlaps between</code> is a valid combination of keywords.  In addition, since I <em>think</em> you're using FHIR STU3, you can't use <code>onsetDateTime</code> and <code>abatementDateTime</code>; you need to use <code>(onset as DateTime)</code> and <code>(abatement as DateTime)</code>.</p>\n<p>Unfortunately, what you're trying to do actually gets a little tricky because of a few issues at play:</p>\n<p>1. In FHIR, the <code>onset</code> and <code>abatement</code> <em>might</em> be stored as dateTime, but they also could be stored as a date range, an age, and age range, or a simple string.  On top of that, <code>abatement</code> has the added possibility of being stored as a boolean to indicate abatement without a specific date or age.<br>\n2. In CQL, <code>(onset as DateTime)</code> and <code>(abatement as DateTime)</code> will return <code>null</code> if the data is stored in a non-DateTime format.  So it may look like there is no onset or no abatement when there really is; it's just not stored as a DateTime.<br>\n3. Ideally you could convert these separate properties to an Interval in order to check the overlap (e.g., <code>Interval[onset as DateTime, abatement as DateTime]</code>) -- but that has it's own problems due to #2 above, and the fact that CQL interprets a closed null boundary as <em>ongoing</em>.  So if <code>abatement</code> was stored as a boolean <code>true</code>, trying to construct an interval using <code>abatement as DateTime</code> would result in a closed null boundary and be interpreted as ongoing -- which is exactly the opposite of what we want.<br>\nA full solution would try to convert the <code>onset</code> and <code>abatement</code> into an interval in a meaningful and robust way; which would include:</p>\n<ul>\n<li>converting ages and age ranges to DateTimes (based on the Patient.birthDate)</li>\n<li>interpreting strings as an <em>open null boundary</em> (which essentially means \"I don't know the date\")</li>\n<li>interpreting true <code>abatementBoolean</code> as an <em>open null boundary</em> (again, meaning, \"I don't know the date\")</li>\n<li>interpreting false <code>abatement as Boolean</code> as a <em>closed null boundary</em> (meaning it hasn't abated, so <em>ongoing</em>)</li>\n<li>deciding how to deal with <code>onset</code> or <code>abatement</code> when they are <code>null</code></li>\n</ul>\n<p>That's fairly complex, so I'll leave that as an exercise to the reader (or <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> if he feels so inclined)!  That said, if you know your environment, and you know that <code>onset</code> and <code>abatement</code> will <em>always</em> be DateTimes and never any of the other types, then it's quite a bit easier.  If you want me to work out <em>that</em> example for you, let me know.</p>",
        "id": 167525590,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1559857414
    },
    {
        "content": "<p><strong>Next up: the modelinfo and primaryCodePath</strong></p>\n<p>Yes, you found the relevant line (for <code>MedicationRequest</code>) in the modelinfo XML file, and your interpretation is correct.  The expression below is essentially filtering <code>MedicationRequest</code>s down to only those for which the <code>medication</code> value (as a <code>CodeableConcet</code>) is in the <code>\"medicationValueSet\"</code>.</p>\n<div class=\"codehilite\"><pre><span></span>define &quot;Medication Requested&quot;:\n  [MedicationRequest: &quot;medicationValueSet&quot;]\n</pre></div>\n\n\n<p>Specifying <code>[MedicationRequest: medicationCodeableConcept in \"medicationValueSet\"]</code>, however, would not be valid.  As you noted, <code>medication</code> is a choice type; you still refer to it as only <code>medication</code>.  You don't have to do <code>medication as CodeableConcept</code> here because the CQL spec indicates that only concepts are valid in this context, so the CQL-to-ELM translator figures it out.  In fact, based on the grammar, you couldn't use <code>medication as CodeableConcept</code> here even if you wanted to!</p>\n<p>On to your next example: yes, <code>[Condition: \"conditionValueSet\"]</code> is the preferred way to filter <code>Condition</code>s on the <code>code</code> property.  While <code>[Condition:  code in \"conditionValueSet\"]</code> is valid, and equivalent, it's unnecessary -- unless you just really like the explicitness of it (which I can understand).</p>\n<blockquote>\n<p>Again, what I'm really trying to figure out is establishing a baseline standard for writing retrieves in FHIR</p>\n</blockquote>\n<p>I usually (a) determine the correct resource for what I want to query, (b) determine the path to the code I want to filter on, usually by looking at the resource definition in FHIR, and (c) check the modelinfo to see if it is the <code>primaryCodePath</code> or not.  In step (b) you have to remember that if the FHIR property name ends in <code>[x]</code>, it is a choice, and you drop the <code>[x]</code> to get the property name in CQL.</p>\n<blockquote>\n<p>If the FHIR path is not ideal for drafting CQL retrieves, what is the primary benefit of the FHIR path as a search parameter being referenced for in each FHIR resource section?</p>\n</blockquote>\n<p>The FHIR specification uses FHIRPath to be explicit about what the search parameter matches against in the resource.  It's there for FHIR Server implementors to know how to implement the search parameter and for FHIR consumers to better understand what the search parameter means.  It's not really intended to be useful to CQL at all -- it's about defining the actual HTTP search functionality on a FHIR server.</p>",
        "id": 167526783,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1559858312
    },
    {
        "content": "<p><strong>And last</strong>:</p>\n<blockquote>\n<p>So, hopefully that means one of my examples is valid?<br>\nthat is...<br>\nDefine \"Medication Requested\":<br>\n[MedicationRequest: \"medicationValueSet\"]<br>\nHaving your confirmation on this would put me at ease.</p>\n</blockquote>\n<p>Yep, it's valid!  (Well, aside from <code>Define</code> vs. <code>define</code>).</p>",
        "id": 167526952,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1559858461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>  Thank you for the thorough and thoughtful guidance!  No apologies necessary at all!  I know you're an incredibly valuable resource and I'm grateful for your time.</p>\n<p>Regarding the dates, I'll try to better understand the environment at hand and see how that affects the CQL design.</p>\n<p>Regarding the retrieves, I think things are starting to really click over here.  And to (hopefully) verify that, I'd just like to also confirm whether or not the following retrieve is also valid in my attempt to incorporate what I think I now understand about making an efficient query (by putting the code filter in the retrieve statement) and handling choice types (by simply dropping the <code>[x]</code>).</p>\n<p><code>define \"Medication Requested\":\n[MedicationRequest: medication in \"medicationValueSet\"]</code></p>\n<p>If the above is all good, then I think I'll feel more confident and can move on to more advanced topics.</p>",
        "id": 167881382,
        "sender_full_name": "Adam Rodriguez",
        "timestamp": 1560280565
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"197243\">@Adam Rodriguez</span>.  Yes, your query above is absolutely valid.  That said, since <code>medication</code> is defined as the <code>primaryCodePath</code> for <code>MedicationRequest</code> in the modelinfo (<a href=\"https://github.com/cqframework/clinical_quality_language/blob/master/Src/java/quick/src/main/resources/org/hl7/fhir/fhir-modelinfo-3.0.0.xml#L5128\" target=\"_blank\" title=\"https://github.com/cqframework/clinical_quality_language/blob/master/Src/java/quick/src/main/resources/org/hl7/fhir/fhir-modelinfo-3.0.0.xml#L5128\">here</a>), your query <em>can</em> be shortened to:</p>\n<div class=\"codehilite\"><pre><span></span>define &quot;Medication Requested&quot;:\n  [MedicationRequest: &quot;medicationValueSet&quot;]\n</pre></div>\n\n\n<p>That said, the shortened form is completely optional and 100% equivalent to the longer form you typed above.</p>",
        "id": 167882387,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1560281203
    }
]