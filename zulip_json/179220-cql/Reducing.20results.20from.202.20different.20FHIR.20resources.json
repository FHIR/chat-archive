[
    {
        "content": "<p>I'm trying to build a cql definition in a patient context using the FHIR library that </p>\n<ul>\n<li>Retreives a set of immunization resources</li>\n<li>Retrieves a set of procedure resources</li>\n<li>Finds the most recent index from both sets</li>\n</ul>\n<p>The problem is that since I'm comparing to , I need to either merge the lists together then find the most recent of the immunizations AND procedures, or I could instead find the most recent procedure and immunization, extract the datetime from each and then find the most recent from that list.</p>\n<p>I'm trying to define my indexes as such:</p>\n<div class=\"codehilite\"><pre><span></span><code>context Patient\ndefine &quot;CovidImmunization&quot;: [Immunization: &quot;Covid Vaccine Drug Exposure&quot;]\n\ndefine &quot;CovidProcedure&quot;: [Procedure: &quot;Covid Vaccine Drug Exposure&quot;]\n\ndefine &quot;LastCovidInstanceDT&quot;:\n  Patient P\n  let IDT: MostRecentImmunizationDT(&quot;CovidImmunization&quot;),\n      PDT: MostRecentProcedureDT(&quot;CovidProcedure&quot;)\n  if IDT after PDT\n  then\n    IDT\n  else\n    PDT\n</code></pre></div>\n<p>With the retrievals referencing appropriate concept sets or valuesets, ofc.<br>\nAnd my functions for retrieving the most recent occurrences are</p>\n<div class=\"codehilite\"><pre><span></span><code>define function MostRecentImmunizationDT(ImmunizationList List&lt;FHIR.Immunization&gt;):\n  from ImmunizationList I\n  let result: Last(ImmunizationList I sort by (occurrence as FHIR.dateTime).value)\n    return result.occurrence.value\n\ndefine function MostRecentProcedureDT(ProcedureList List&lt;FHIR.Procedure&gt;):\n  from ProcedureList P\n  let result:Last(ProcedureList P sort by (performed as FHIR.dateTime).value)\n    return result.performed.value\n</code></pre></div>\n<p>I'm having 3 problems here.<br>\n1) As you can see, I'm trying to use the let statement for inscope definitions to prevent having to call the defined functions more than once, but I'm having a hard time getting the syntax of let to play nicely with the if conditional in the main definition should I forgo the let statement and make my main definition a top-level conditional?<br>\n2), In my return statements, I can't seem to reuse the cast as statement within my return clauses, so the return statement is confused on the typing of the function return. Should I define another variable that merely captures the datetime I need and return that variable?<br>\n3) This really only handles the case where the type is a FHIR.dateTime, sometimes they are also FHIR.Periods which we would transform into Intervals.</p>\n<p>If there's anyway to reduce the query to a single list, that would be an interesting problem as well.</p>",
        "id": 233683786,
        "sender_full_name": "Michael Riley",
        "timestamp": 1617899093
    }
]