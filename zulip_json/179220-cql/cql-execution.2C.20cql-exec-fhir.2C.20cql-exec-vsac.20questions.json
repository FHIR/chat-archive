[
    {
        "content": "<p>Hi guys! Can you please help me with cql-exec-vsac? I have got an UMLS account from <a href=\"https://uts.nlm.nih.gov/license.html\">here</a>: my username and API key. I am reading the <a href=\"https://github.com/cqframework/cql-exec-examples\">cql-exec-examples</a> and it says that I need to provide a UMLS_USER_NAME and UMLS_PASSWORD. The question is: does it support API key?</p>",
        "id": 227471078,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614101843
    },
    {
        "content": "<p>Sorry, I have found this <a href=\"https://github.com/cqframework/cql-exec-vsac#using-umls-credentials\">https://github.com/cqframework/cql-exec-vsac#using-umls-credentials</a></p>",
        "id": 227471460,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614101988
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"376706\">@Vasyl Herman</span> -- it looks like you found what you need, but let us know if you run into any trouble with it.</p>",
        "id": 227472373,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614102311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> Can you please take a look at this example: <a href=\"https://github.com/PrettySolution/cql-exec-fhir-example/blob/master/testArtifact.js\">testArtifact</a> I am trying to use ensureValueSetsWithAPIKey method.</p>\n<p>I don't know what is wrong, I am getting an error:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>D:<span class=\"se\">\\g</span>it-cql-fhir<span class=\"se\">\\c</span>ql-exec-fhir-example&gt;node testArtifact.js\nD:<span class=\"se\">\\g</span>it-cql-fhir<span class=\"se\">\\c</span>ql-exec-fhir-example<span class=\"se\">\\n</span>ode_modules<span class=\"se\">\\c</span>ql-exec-vsac<span class=\"se\">\\l</span>ib<span class=\"se\">\\C</span>odeService.js:102\n    const <span class=\"nv\">filteredVSList</span> <span class=\"o\">=</span> valueSetList.filter<span class=\"o\">(</span><span class=\"nv\">vs</span> <span class=\"o\">=</span>&gt; <span class=\"o\">{</span>\n                                        ^\n\nTypeError: valueSetList.filter is not a <span class=\"k\">function</span>\n    at CodeService.ensureValueSetsWithAPIKey <span class=\"o\">(</span>D:<span class=\"se\">\\g</span>it-cql-fhir<span class=\"se\">\\c</span>ql-exec-fhir-example<span class=\"se\">\\n</span>ode_modules<span class=\"se\">\\c</span>ql-exec-vsac<span class=\"se\">\\l</span>ib<span class=\"se\">\\C</span>odeService.js:102:41<span class=\"o\">)</span>\n    at Object.&lt;anonymous&gt; <span class=\"o\">(</span>D:<span class=\"se\">\\g</span>it-cql-fhir<span class=\"se\">\\c</span>ql-exec-fhir-example<span class=\"se\">\\t</span>estArtifact.js:27:13<span class=\"o\">)</span>\n    at Module._compile <span class=\"o\">(</span>internal/modules/cjs/loader.js:1063:30<span class=\"o\">)</span>\n    at Object.Module._extensions..js <span class=\"o\">(</span>internal/modules/cjs/loader.js:1092:10<span class=\"o\">)</span>\n    at Module.load <span class=\"o\">(</span>internal/modules/cjs/loader.js:928:32<span class=\"o\">)</span>\n    at Function.Module._load <span class=\"o\">(</span>internal/modules/cjs/loader.js:769:14<span class=\"o\">)</span>\n    at Function.executeUserEntryPoint <span class=\"o\">[</span>as runMain<span class=\"o\">]</span> <span class=\"o\">(</span>internal/modules/run_main.js:72:12<span class=\"o\">)</span>\n    at internal/main/run_main_module.js:17:47\n</code></pre></div>\n<p>to reproduce it:</p>\n<ol>\n<li>clone</li>\n<li>npm i</li>\n<li>gradlew.bat cql2elm</li>\n<li>node testArtifact.js<br>\nI have committed credential as well :) need to change later ...</li>\n</ol>",
        "id": 227489334,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614108605
    },
    {
        "content": "<p>it may happen because I don't have valueset defined in the .cql file :)</p>",
        "id": 227491057,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614109295
    },
    {
        "content": "<p>no, the same issue ... with <code>valueset \"Clinical Oral Evaluation\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.125.12.1003'</code></p>",
        "id": 227491298,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614109375
    },
    {
        "content": "<p>ohhh... I should use <code>ensureValueSetsInLibraryWithAPIKey</code> I am sorry about that</p>",
        "id": 227492061,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614109684
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"376706\">@Vasyl Herman</span> -- I don't have time to try running this right now, but looking at the code, I think it is because you are not allowing the code service to fully load the value sets before running the execution.  The <code>ensureValueSetsWithAPIKey</code> function returns a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> -- which means that function is not necessarily _done_ when it returns.  In order to ensure that the execution does not happen until the value sets are loaded, you need to invoke the execution only when the promise is <em>resolved</em> (in the <code>then</code> callback).  As it is now, you try to execute as soon as the <code>ensureValueSetsWithAPIKey</code> function returns -- which at that point is an <em>unfulfilled</em> promise, so it isn't going to work since the value sets are not yet fully downloaded (although it might work if your cache is fully loaded and complete).</p>\n<p>See <a href=\"https://github.com/cqframework/cql-exec-examples/blob/master/diabetic-foot-exam/runner.js#L72-L93\">this block of code</a> from <code>cql-exec-examples</code> -- where we don't actually attempt to execute the CQL until after the code service as ensured the value sets.  (Although note that we need to update the examples to use the new API key based function instead).</p>",
        "id": 227492858,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614110031
    },
    {
        "content": "<p>Works perfect. I should have been like this:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"nx\">codeService</span><span class=\"p\">.</span><span class=\"nx\">ensureValueSetsInLibraryWithAPIKey</span><span class=\"p\">(</span><span class=\"nx\">library</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"s1\">'f52a90ad-4d3b-4955-ba5c-635264536b53'</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Value Sets are downloaded'</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Error downloading value sets'</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 227492960,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614110052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> Thanks!</p>",
        "id": 227493175,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614110156
    },
    {
        "content": "<p>I think my suggestion above still stands (regarding the Promise).  My guess is that if you delete your value set cache files, it will fail again (at least the first time you run it).  To avoid this, you need to properly wait for that promise to be fulfilled.</p>",
        "id": 227493191,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614110162
    },
    {
        "content": "<p>Right, I agree. I will fix it later</p>",
        "id": 227493305,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614110205
    },
    {
        "content": "<p>BTW, <code>ensureValueSetsInLibraryWithAPIKey</code> seems not to be described <a href=\"https://github.com/cqframework/cql-exec-vsac#using-umls-credentials\">here: cql-exec-vsac</a>. Let me ask you, what is the difference <code>ensureValueSetsWithAPIKey</code> and <code>ensureValueSetsInLibraryWithAPIKey</code><br>\nI am reading this but it's not clear to me. <br>\n<a href=\"/user_uploads/10155/6HQ3f7ZONaPXXiBK8rjiavw_/image.png\">image.png</a><br>\nI am promising to contribute into the <code>README.md</code> to clarify this aspect :)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/6HQ3f7ZONaPXXiBK8rjiavw_/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/6HQ3f7ZONaPXXiBK8rjiavw_/image.png\"></a></div>",
        "id": 227495500,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614111025
    },
    {
        "content": "<p>Hello, <br>\nCould you please help with the libraries:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kr\">const</span> <span class=\"nx\">elmFile</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span>\n    <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'r4'</span><span class=\"p\">,</span> <span class=\"s1\">'cql'</span><span class=\"p\">,</span> <span class=\"s1\">'exm74'</span><span class=\"p\">,</span> <span class=\"s1\">'EXM74-10.2.000.json'</span><span class=\"p\">),</span><span class=\"s1\">'utf8'</span><span class=\"p\">));</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">libraries</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">FHIRHelpers</span><span class=\"o\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'r4'</span><span class=\"p\">,</span> <span class=\"s1\">'cql'</span><span class=\"p\">,</span> <span class=\"s1\">'exm74'</span><span class=\"p\">,</span> <span class=\"s1\">'FHIRHelpers-4.0.1.json'</span><span class=\"p\">),</span> <span class=\"s1\">'utf8'</span><span class=\"p\">)),</span>\n    <span class=\"nx\">Global</span><span class=\"o\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'r4'</span><span class=\"p\">,</span> <span class=\"s1\">'cql'</span><span class=\"p\">,</span> <span class=\"s1\">'exm74'</span><span class=\"p\">,</span> <span class=\"s1\">'MATGlobalCommonFunctions-5.0.000.json'</span><span class=\"p\">),</span> <span class=\"s1\">'utf8'</span><span class=\"p\">)),</span>\n    <span class=\"nx\">Hospice</span><span class=\"o\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'r4'</span><span class=\"p\">,</span> <span class=\"s1\">'cql'</span><span class=\"p\">,</span> <span class=\"s1\">'exm74'</span><span class=\"p\">,</span> <span class=\"s1\">'Hospice-2.0.000.json'</span><span class=\"p\">),</span> <span class=\"s1\">'utf8'</span><span class=\"p\">)),</span>\n    <span class=\"nx\">SDE</span><span class=\"o\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'r4'</span><span class=\"p\">,</span> <span class=\"s1\">'cql'</span><span class=\"p\">,</span> <span class=\"s1\">'exm74'</span><span class=\"p\">,</span> <span class=\"s1\">'SupplementalDataElements-2.0.0.json'</span><span class=\"p\">),</span> <span class=\"s1\">'utf8'</span><span class=\"p\">)),</span>\n<span class=\"p\">};</span>\n<span class=\"kr\">const</span> <span class=\"nx\">library</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">cql</span><span class=\"p\">.</span><span class=\"nx\">Library</span><span class=\"p\">(</span><span class=\"nx\">elmFile</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">cql</span><span class=\"p\">.</span><span class=\"nx\">Repository</span><span class=\"p\">(</span><span class=\"nx\">libraries</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>Is it necessary to manually define all the libraries that <code>EXM74-10.2.000.json</code> includes? How can I manage this in more elegant way? </p>\n<ul>\n<li>VH</li>\n</ul>",
        "id": 227645630,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614190372
    },
    {
        "content": "<p>I suppose there are a couple of things you could try to avoid having to build up that JSON libraries object.  One would be to write some code that reads a folder, enumerates its files, detects which ones are valid ELM JSON files, and creates the JSON object containing all those libraries programatically.  Then you can point it at any folder of CQL and say \"go\" (although you might need to exclude the main library from that object).</p>\n<p>Another is that you could write your own implementation of the <code>cql.Repository</code> that gets passed into the <code>cql.Library</code> constructor.  I think that any instance that has a <code>resolve(library, version)</code> function which returns an instance of a <code>Library</code> should work.  So you could write your own implementation that resolves libraries from a file system, a server, etc.</p>\n<p>Of course, both those solutions require more up front work to write the code that does that stuff -- but once you've done it, then loading arbitrary libraries and their dependencies would be easier.</p>",
        "id": 227650744,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614192318
    },
    {
        "content": "<p>Hello, </p>\n<p>We have got a CQL library that uses NCQA  HEDIS value sets:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"nx\">Value</span> <span class=\"nx\">sets</span> <span class=\"k\">in</span> <span class=\"k\">this</span> <span class=\"nx\">library</span> <span class=\"nx\">included</span> <span class=\"nx\">per</span> <span class=\"nx\">NCQA</span> <span class=\"nx\">HEDIS</span> <span class=\"nx\">Specifications</span> <span class=\"nx\">MY</span> <span class=\"mf\">2020</span> <span class=\"nx\">Volume</span> <span class=\"mf\">2</span> <span class=\"nx\">Value</span> <span class=\"nx\">Set</span> <span class=\"nx\">Directory</span> <span class=\"mf\">2020</span><span class=\"o\">-</span><span class=\"mf\">11</span><span class=\"o\">-</span><span class=\"mf\">13</span>\n<span class=\"nx\">Value</span> <span class=\"nx\">sets</span> <span class=\"k\">in</span> <span class=\"k\">this</span> <span class=\"nx\">library</span> <span class=\"nx\">have</span> <span class=\"nx\">not</span> <span class=\"nx\">been</span> <span class=\"nx\">added</span> <span class=\"nx\">to</span> <span class=\"nx\">VSAC</span>\n</code></pre></div>\n<p>I was wondering whether the cql-execution is able to parse Value Set Directory (VSD - an Excel file) as they  currently only provide the value sets in Excel. <br>\nWe have to parse the Excel file into value set objects some how.</p>\n<p>Please, we would appreciate any help on this question.</p>",
        "id": 229984672,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1615531682
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"376706\">@Vasyl Herman</span>.  We don't currently have any support for VSD files.</p>\n<p>The <code>cql-execution</code> library includes a very simple <a href=\"https://github.com/cqframework/cql-execution/blob/master/src/cql-code-service.js\">CodeService</a> that accepts a JSON-formatted map of value sets (by OID and then version).  You can see an example of the JSON it accepts in the <a href=\"https://github.com/cqframework/cql-execution/blob/master/test/cql-code-service-test.js\">CodeService tests</a>.  One approach to supporting VSD files would be to write a script that can parse them into the JSON format that the <code>CodeService</code> expects.</p>\n<p>Another approach would be to write your own CodeService implementation (like <a href=\"https://github.com/cqframework/cql-exec-vsac\">cql-exec-vsac</a>) that knows how to read VSD files.  This approach might be more efficient (depending on implementation) but is likely more work.</p>",
        "id": 230028067,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615555761
    },
    {
        "content": "<p>There's tooling here that might be able to help here, takes ValueSet resources and turns them into a ValueSet-db.json file that works with the JavaScript CQL engine: <a href=\"https://github.com/cqframework/cqf-tooling/blob/master/src/main/java/org/opencds/cqf/tooling/terminology/ToJsonValueSetDbOperation.java\">https://github.com/cqframework/cqf-tooling/blob/master/src/main/java/org/opencds/cqf/tooling/terminology/ToJsonValueSetDbOperation.java</a></p>",
        "id": 230074975,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1615573151
    },
    {
        "content": "<p>There's also tooling there to process spreadsheets in various formats to produce ValueSet resources.</p>",
        "id": 230075006,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1615573169
    },
    {
        "content": "<p>So you could put together a process chain that works out of the components there.</p>",
        "id": 230075032,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1615573182
    },
    {
        "content": "<p>Hello, Thank you for valuable information!!! <br>\nI was wondering if it's possible to build a <code>gradle</code> script with <code>VsacXlsxToValueSet</code> task like <a href=\"https://github.com/PrettySolution/cql-exec-fhir-example/blob/master/build.gradle\">cql2elm task</a><br>\nThanks!</p>",
        "id": 230310333,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1615797588
    },
    {
        "content": "<p>It should be yes, though I've never built a gradle task to execute a command-line. We typically use bash or command scripts when putting things like that together.</p>",
        "id": 230344289,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1615815226
    },
    {
        "content": "<p>I'm not familiar enough w/ the tools Bryn noted to put together a gradle script for them, but the overall approach to calling a Java CLI in gradle is fairly straight-forward.  Here is a script I use in my artifact development repositories:</p>\n<div class=\"codehilite\"><pre><span></span><code>plugins {\n  id &#39;java&#39;\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  runtimeOnly &#39;info.cqframework:cql-to-elm:1.5.1&#39;\n}\n\ntask cql2elm(type: JavaExec) {\n  classpath = sourceSets.main.runtimeClasspath\n  main = &#39;org.cqframework.cql.cql2elm.CqlTranslator&#39;\n  args &#39;--input&#39;, &#39;./src/cql&#39;, &#39;--format&#39;, &#39;JSON&#39;\n}\n</code></pre></div>\n<p>The nice thing about this approach is that you can easily switch to a different version of cql-to-elm by just modifying the dependency version.  You can also override the dependency with a local version by putting this in your <code>settings.gradle</code> file:</p>\n<div class=\"codehilite\"><pre><span></span><code>includeBuild &quot;/your/path/to/cqframework/clinical_quality_language/Src/java&quot;\n</code></pre></div>",
        "id": 230345620,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615815765
    },
    {
        "content": "<p>Oh.  Whoops.  I just noticed that this is the same basic script <span class=\"user-mention\" data-user-id=\"376706\">@Basil German</span> already linked to above.  Oh well.  I guess it saves people a click.</p>",
        "id": 230345771,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615815828
    },
    {
        "content": "<p>And here are some example scripts for this type of processing chain we've done:</p>\n<div class=\"codehilite\"><pre><span></span><code>java -jar CQFTooling.jar -VsacXlsxToValueSetBatch -ptsd=&quot;Src\\YourProject\\input\\vocabulary\\valueset\\spreadsheets&quot; -burl=&quot;http://cts.nlm.nih.gov/fhir/ValueSet/&quot;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>java -jar CQFTooling.jar -EnsureExecutableValueSet -path=&quot;Src\\YourProject\\input\\vocabulary\\valueset&quot;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>java -jar CQFTooling.jar -ToJsonValueSetDb -path=&quot;Src\\YourProject\\output&quot;\n</code></pre></div>",
        "id": 230356587,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1615819729
    },
    {
        "content": "<p>Thanks, Bryn!<br>\nThanks, Chris!<br>\nI will try it. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 230376211,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1615825305
    },
    {
        "content": "<p>Could you please help me with that? <br>\nI am trying to build a gradle task to to convert <code>HEDIS VSD</code> to valusets. I am not sure if <code>VsacXlsxToValueSetBatch</code> is able to convert <code>VSD</code> as it might be different from <code>VSAC</code> xlsx file. <br>\nWhat about if I compare <code>VSAC</code> and <code>VSD</code> files and bring <code>VSD</code> file to the structure as <code>VSAC</code> xlsx file is?<br>\nDoes it make sense to do? </p>\n<p>HEDIS Value Set Directory (<code>VSD</code>) is included in this <a href=\"https://github.com/PrettySolution/cql-exec-fhir-example/blob/master/build.gradle\">repo</a></p>\n<p>The task I am trying to build:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>plugins <span class=\"o\">{</span>\n  id <span class=\"s1\">'java'</span>\n<span class=\"o\">}</span>\n\nrepositories <span class=\"o\">{</span>\n  mavenCentral<span class=\"o\">()</span>\n<span class=\"o\">}</span>\n\ndependencies <span class=\"o\">{</span>\n  runtimeOnly <span class=\"s1\">'org.opencds.cqf:tooling:1.3.0'</span>\n<span class=\"o\">}</span>\n\ntask xlsxToValueSet<span class=\"o\">(</span>type: JavaExec<span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"nv\">classpath</span> <span class=\"o\">=</span> sourceSets.main.runtimeClasspath\n  <span class=\"nv\">main</span> <span class=\"o\">=</span> <span class=\"s1\">'org.opencds.cqf.tooling.Main'</span>\n  args <span class=\"s1\">'-VsacXlsxToValueSet'</span>, <span class=\"s1\">'-pts=./HEDIS-MY-2020-Volume-2-Value-Set-Directory-2020-11-13.xlsx'</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 230391350,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1615831058
    },
    {
        "content": "<p>Also I have found that there is <code>-XlsxToValueSet</code> option in <a href=\"https://github.com/cqframework/cqf-tooling/blob/master/src/main/java/org/opencds/cqf/tooling/Main.java\">Main class</a><br>\nBut it doesn't gives any examples:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>        - Generic Excel spreadsheet to FHIR ValueSet resource conversion\n            - command: mvn exec:java -Dexec.args<span class=\"o\">=</span><span class=\"s2\">\"[-XlsxToValueSet] [-pathtospreadsheet | -pts] (-outputpath | -op) (-encoding | -e)\"</span>\n            - Example: TODO\n            - This tooling converts an Excel spreadsheet <span class=\"o\">(</span>.xlsx extension<span class=\"o\">)</span> to a FHIR ValueSet resource\n            - This is highly configurable\n                - TODO\n</code></pre></div>\n<p>So, I am trying <code> java -jar tooling-1.3.0-jar-with-dependencies.jar -XlsxToValueSet -pts=\"HEDIS-MY-2020-Volume-2-Value-Set-Directory-2020-11-13.xlsx\"</code> with an error:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Exception <span class=\"k\">in</span> thread <span class=\"s2\">\"main\"</span> java.lang.IllegalArgumentException: -code flag must be specified\n        at org.opencds.cqf.tooling.terminology.GenericValueSetGenerator.execute<span class=\"o\">(</span>GenericValueSetGenerator.java:253<span class=\"o\">)</span>\n        at org.opencds.cqf.tooling.Main.main<span class=\"o\">(</span>Main.java:159<span class=\"o\">)</span>\n</code></pre></div>\n<p>I appreciate any help!</p>",
        "id": 230394656,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1615832413
    },
    {
        "content": "<p>Link to HEDIS VSD on <a href=\"https://docs.google.com/spreadsheets/d/1qCH-TndD2lFhsyISE_WrzLHmnS0QQfs2tAliTOCneDo/edit?usp=sharing\">Google Drive</a></p>",
        "id": 230394843,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1615832475
    },
    {
        "content": "<p>Hello,  all!<br>\nSo, I have script and seems like it's working:</p>\n<div class=\"codehilite\" data-code-language=\"Groovy\"><pre><span></span><code><span class=\"n\">plugins</span> <span class=\"o\">{</span>\n  <span class=\"n\">id</span> <span class=\"s1\">'java'</span>\n<span class=\"o\">}</span>\n<span class=\"n\">repositories</span> <span class=\"o\">{</span>\n  <span class=\"n\">mavenCentral</span><span class=\"o\">()</span>\n<span class=\"o\">}</span>\n<span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n  <span class=\"n\">runtimeOnly</span> <span class=\"s1\">'org.opencds.cqf:tooling:1.3.0'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">task</span> <span class=\"nf\">hedisXlsxToValueSet</span><span class=\"o\">(</span><span class=\"nl\">type:</span> <span class=\"n\">JavaExec</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">classpath</span> <span class=\"o\">=</span> <span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">.</span><span class=\"na\">runtimeClasspath</span>\n  <span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"s1\">'org.opencds.cqf.tooling.Main'</span>\n  <span class=\"n\">args</span> <span class=\"s1\">'-HedisXlsxToValueSet'</span><span class=\"o\">,</span> <span class=\"s1\">'-pts=./HEDIS-MY-2020-Volume-2-Value-Set-Directory-2020-11-13.xlsx'</span><span class=\"o\">,</span> <span class=\"s1\">'-op=./vsd'</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>It generates a bunch of JSONs in <code>vsd</code> directory.</p>\n<p>like so:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">\"resourceType\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ValueSet\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2.16.840.1.113883.3.464.1004.1509\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://ncqa.org/fhir/hedis/ValueSet/2.16.840.1.113883.3.464.1004.1509\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"identifier\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"system\"</span><span class=\"p\">:</span> <span class=\"s2\">\"urn:ietf:rfc:3986\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2.16.840.1.113883.3.464.1004.1509\"</span>\n  <span class=\"p\">}</span> <span class=\"p\">],</span>\n  <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2020-10-01\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"37WeeksGestation\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"37 Weeks Gestation\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"active\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"publisher\"</span><span class=\"p\">:</span> <span class=\"s2\">\"National Committee for Quality Assurance (NCQA)\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"compose\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"include\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"system\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://hl7.org/fhir/sid/icd-10-cm\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2021.1.20AA\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"concept\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Z3A.37\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"display\"</span><span class=\"p\">:</span> <span class=\"s2\">\"[Z3A.37] 37 weeks gestation of pregnancy\"</span>\n      <span class=\"p\">}</span> <span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"system\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://snomed.info/sct\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2020.03.19AB\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"concept\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"43697006\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"display\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Gestation period, 37 weeks (finding)\"</span>\n      <span class=\"p\">}</span> <span class=\"p\">]</span>\n    <span class=\"p\">}</span> <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 230497951,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1615895075
    },
    {
        "content": "<p>Could anyone, please, give me an idea how to  <span aria-label=\"cookie\" class=\"emoji emoji-1f36a\" role=\"img\" title=\"cookie\">:cookie:</span>  feed up <code>cql-execution</code> library  by Value Set objects like that one above</p>",
        "id": 230529510,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1615907488
    },
    {
        "content": "<p>Once you have those ValueSets, those are \"computable\" (i.e. defined with a compose and need to be \"expanded\" before they can be used). So there is tooling to do that, the \"EnsureExecutableValueSet\" operation:</p>\n<div class=\"codehilite\"><pre><span></span><code>java -jar CQFTooling.jar -EnsureExecutableValueSet -path=&quot;Src\\YourProject\\input\\vocabulary\\valueset&quot;\n</code></pre></div>\n<p>Once you have those \"executable\" value sets, you can then use the \"ToJsonValueSetDb\" to produce the valueset-db.json file that the JavaScript engine expects:</p>\n<div class=\"codehilite\"><pre><span></span><code>java -jar CQFTooling.jar -ToJsonValueSetDb -path=&quot;Src\\YourProject\\output&quot;\n</code></pre></div>\n<p>Put the output of that in the cql path for the JavaScript engine, and that should do it.</p>",
        "id": 230530974,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1615907882
    },
    {
        "content": "<p>Thanks! <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> <br>\nSeems like I'm looking in a wrong place. There is no operation like <code>EnsureExecutableValueSet</code> or <code>ToJsonValueSetDb</code> in <a href=\"https://github.com/cqframework/cqf-tooling/blob/master/src/main/java/org/opencds/cqf/tooling/Main.java\">Main</a><br>\nthe command: </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>java -jar tooling-1.3.0-jar-with-dependencies.jar -EnsureExecutableValueSet -path<span class=\"o\">=</span><span class=\"s2\">\"vsd\"</span>\n</code></pre></div>\n<p>as weel <code>ToJsonValueSetDb </code> as gives me </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>D:<span class=\"se\">\\g</span>it-cql-fhir<span class=\"se\">\\c</span>ql-exec-fhir-example&gt;java -jar tooling-1.3.0-jar-with-dependencies.jar -EnsureExecutableValueSet -path<span class=\"o\">=</span><span class=\"s2\">\"vsd\"</span>\nException <span class=\"k\">in</span> thread <span class=\"s2\">\"main\"</span> java.lang.IllegalArgumentException: Invalid operation: EnsureExecutableValueSet\n        at org.opencds.cqf.tooling.OperationFactory.createOperation<span class=\"o\">(</span>OperationFactory.java:84<span class=\"o\">)</span>\n        at org.opencds.cqf.tooling.Main.main<span class=\"o\">(</span>Main.java:159<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230533539,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1615908695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"376706\">@Vasil Herman</span> These commands work for me in a similar use case, but I am using tool-1.3.1-jar.  Try updating your build of the tooling.</p>",
        "id": 230534751,
        "sender_full_name": "Dave Carlson",
        "timestamp": 1615909087
    },
    {
        "content": "<p>Ah yes, use the 1.3.1-SNAPSHOT version...</p>",
        "id": 230535022,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1615909188
    },
    {
        "content": "<p>amazing finally I found <a href=\"https://oss.sonatype.org/service/local/repositories/snapshots/content/org/opencds/cqf/tooling/1.3.1-SNAPSHOT/tooling-1.3.1-20210315.213437-253.jar\">1.3.1</a><br>\nThanks!</p>",
        "id": 230538117,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1615910261
    },
    {
        "content": "<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Groovy\"><pre><span></span><code><span class=\"n\">plugins</span> <span class=\"o\">{</span>\n  <span class=\"n\">id</span> <span class=\"s1\">'java'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">repositories</span> <span class=\"o\">{</span>\n  <span class=\"n\">maven</span> <span class=\"o\">{</span><span class=\"n\">url</span> <span class=\"s1\">'https://oss.sonatype.org/content/repositories/snapshots'</span><span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n  <span class=\"n\">runtimeOnly</span> <span class=\"s1\">'org.opencds.cqf:tooling:1.3.1-SNAPSHOT'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">task</span> <span class=\"nf\">hedisXlsxToValueSet</span><span class=\"o\">(</span><span class=\"nl\">type:</span> <span class=\"n\">JavaExec</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">classpath</span> <span class=\"o\">=</span> <span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">.</span><span class=\"na\">runtimeClasspath</span>\n  <span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"s1\">'org.opencds.cqf.tooling.Main'</span>\n  <span class=\"n\">args</span> <span class=\"s1\">'-HedisXlsxToValueSet'</span><span class=\"o\">,</span> <span class=\"s1\">'-pts=./HEDIS-MY-2020-Volume-2-Value-Set-Directory-2020-11-13.xlsx'</span><span class=\"o\">,</span> <span class=\"s1\">'-op=./vsd'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">task</span> <span class=\"nf\">ensureExecutableValueSet</span><span class=\"o\">(</span><span class=\"nl\">type:</span> <span class=\"n\">JavaExec</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">classpath</span> <span class=\"o\">=</span> <span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">.</span><span class=\"na\">runtimeClasspath</span>\n  <span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"s1\">'org.opencds.cqf.tooling.Main'</span>\n  <span class=\"n\">args</span> <span class=\"s1\">'-EnsureExecutableValueSet'</span><span class=\"o\">,</span> <span class=\"s1\">'-path=./vsd'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">task</span> <span class=\"nf\">toJsonValueSetDb</span><span class=\"o\">(</span><span class=\"nl\">type:</span> <span class=\"n\">JavaExec</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">classpath</span> <span class=\"o\">=</span> <span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">.</span><span class=\"na\">runtimeClasspath</span>\n  <span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"s1\">'org.opencds.cqf.tooling.Main'</span>\n  <span class=\"n\">args</span> <span class=\"s1\">'-ToJsonValueSetDb'</span><span class=\"o\">,</span> <span class=\"s1\">'-valuesetpath=./vsd'</span><span class=\"o\">,</span> <span class=\"s1\">'-outputpath=./vsd-db'</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>It may save someone time</p>",
        "id": 230567360,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1615919613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> <br>\nHello, is there an example using multiple <code>CodeService</code>s<br>\nMy cql Library uses multiple Value Sets from HedisXlsxToValueSet and VSAC. I am having two  <code>CodeService</code> Objects: they looks fine but I don't know how to put things togather:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code>        <span class=\"c1\">// preparing Hedis VS if exists</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">hedisVSets</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">hedisVSets</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">measurePath</span><span class=\"p\">,</span> <span class=\"s1\">'hedis_cache'</span><span class=\"p\">,</span> <span class=\"s1\">'valueset-db.json'</span><span class=\"p\">),</span> <span class=\"s1\">'utf8'</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">hedisCodeService</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">cql</span><span class=\"p\">.</span><span class=\"nx\">CodeService</span><span class=\"p\">(</span><span class=\"nx\">hedisVSets</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// preparing NLM VS if exists</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">vsacCodeService</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">cqlvsac</span><span class=\"p\">.</span><span class=\"nx\">CodeService</span><span class=\"p\">(</span>\n            <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">measurePath</span><span class=\"p\">,</span> <span class=\"s1\">'vsac_cache'</span><span class=\"p\">),</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n        <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span><span class=\"p\">(</span><span class=\"nx\">vsacCodeService</span><span class=\"p\">.</span><span class=\"nx\">valueSets</span><span class=\"p\">,</span> <span class=\"nx\">hedisCodeService</span><span class=\"p\">.</span><span class=\"nx\">valueSets</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"k\">await</span> <span class=\"nx\">vsacCodeService</span><span class=\"p\">.</span><span class=\"nx\">ensureValueSetsInLibraryWithAPIKey</span><span class=\"p\">(</span><span class=\"nx\">library</span><span class=\"p\">,</span> <span class=\"kc\">true</span> <span class=\"p\">,</span> <span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">){</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`can't download`</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 230721543,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1615998157
    },
    {
        "content": "<p>I think the best approach would be to create a new class that can contain the other two CodeService instances.  That new class needs to provide the same basic interface (w/ functions for <code>findValueSetsByOID(oid)</code> and <code>findValueSet(oid, version)</code>) -- and its implementation could invoke each contained service, returning the results of whichever one is able to actually resolve the VS.</p>",
        "id": 230756031,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1616010948
    },
    {
        "content": "<p>Sounds reasonable!<br>\nBut what about <code>vsacCodeService.ensureValueSetsInLibraryWithAPIKey</code>? I still would like to download VSs from VSAC and I see attempts to download VSs form NCQA as well even though it already present in <code>vsacCodeService.valueSets</code><br>\n<a href=\"/user_uploads/10155/WuMe-pv51v-HgZTHyGASXHGz/image.png\">image.png</a><br>\n<a href=\"user_uploads/10155/Bgdvx2t-U_KKHfczfGzSYTkk/image.png\">image.png</a><br>\n<a href=\"/user_uploads/10155/b3JHWeZb6WxsWoYtlzAGJNNX/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/WuMe-pv51v-HgZTHyGASXHGz/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/WuMe-pv51v-HgZTHyGASXHGz/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"user_uploads/10155/Bgdvx2t-U_KKHfczfGzSYTkk/image.png\" title=\"image.png\"><img src=\"user_uploads/10155/Bgdvx2t-U_KKHfczfGzSYTkk/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/10155/b3JHWeZb6WxsWoYtlzAGJNNX/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/b3JHWeZb6WxsWoYtlzAGJNNX/image.png\"></a></div><p>I suppose that only VS that are absent in a <code>CodeService.valueSets</code> instance should be downloaded, right? Or it tries to download the latest version? Or it has to be present in <code>library.valueSets</code>.<br>\nI am not sure. Please, let me know.</p>",
        "id": 230820443,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1616050468
    },
    {
        "content": "<p>The question is how can I cheat on the <code>vsac</code> library so it downloads missing VSs only.<br>\nWhat Object is responsible for storing present VSs?</p>",
        "id": 230823735,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1616053378
    },
    {
        "content": "<p>Never mind, sorry guys! I have found a typo. the code above works fine!</p>",
        "id": 230849302,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1616068031
    },
    {
        "content": "<p>Chris Moesel, it's not necessary to create a new class, I feel like Object.assign() is a good fit here. will see...</p>",
        "id": 230850187,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1616068561
    },
    {
        "content": "<p>Hi, <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> !<br>\nI was wondering if there is a way to set default Measurement Period \"on the fly\" at execution time?<br>\nI mean if someone doesn't want to set <code>default Interval</code> in cql file like:</p>\n<div class=\"codehilite\"><pre><span></span><code>parameter &quot;Measurement Period&quot; Interval&lt;DateTime&gt;\n    default Interval[@2010-01-01T00:00:00.0, @2020-01-01T00:00:00.0) // here\n</code></pre></div>\n<p>instead it would be (set up dynamically depending on current year) in index.js like:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"nx\">library</span><span class=\"p\">.</span><span class=\"nx\">parameters</span><span class=\"p\">.</span><span class=\"nx\">magicMethotToSetDefInterval</span><span class=\"p\">(</span><span class=\"mf\">2019</span><span class=\"o\">-</span><span class=\"mo\">01</span><span class=\"o\">-</span><span class=\"mo\">01</span><span class=\"nx\">T00</span><span class=\"o\">:</span><span class=\"mo\">00</span><span class=\"o\">:</span><span class=\"mo\">00</span><span class=\"mf\">.0</span><span class=\"p\">,</span> <span class=\"mf\">2020</span><span class=\"o\">-</span><span class=\"mo\">01</span><span class=\"o\">-</span><span class=\"mo\">01</span><span class=\"nx\">T00</span><span class=\"o\">:</span><span class=\"mo\">00</span><span class=\"o\">:</span><span class=\"mo\">00</span><span class=\"mf\">.0</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Something like that...<br>\nThanks!</p>",
        "id": 234379018,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1618339181
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"376706\">@Vasil Herman</span>!  The spec doesn't define anything like that.  If you wanted to do something like that, I think you'd need to implement something to get that \"on the fly\" value from wherever you want to get it and then pass it in as a parameter value to the engine when you invoke it.</p>",
        "id": 234380623,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1618339860
    }
]