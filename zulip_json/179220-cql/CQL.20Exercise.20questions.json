[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> We have a few questions about the CQL Exercises: <a href=\"https://github.com/cqframework/cqf-exercises\">https://github.com/cqframework/cqf-exercises</a></p>\n<p>When would we use expand? Can you give an example? <br>\n Exercise 8, how does it create the tuples from 2 lists that seem like they would be the same? <br>\n    â—‹ Would this not return 0s? <br>\nExercise 10: What does context do? Why is the context Patient? The context for Patient does not seem to matter for this group of Observations. Is this how the CQL kind of views the data e.g. from a Patient-centric perspective?</p>",
        "id": 234396598,
        "sender_full_name": "Alex Goel",
        "timestamp": 1618346323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>  kind of struggling with the same questions from the exercise. Any help or guidance is appreciated please and thanks</p>",
        "id": 234858533,
        "sender_full_name": "Joel Francis",
        "timestamp": 1618581893
    },
    {
        "content": "<p>One of the most useful examples for expand (the use case it was introduced to support specifically) is as part of determining average daily dose. Part of that calculation involves calculating the days in an interval:</p>\n<div class=\"codehilite\"><pre><span></span><code>expand { Interval[@2010-01-01, @2010-01-31] } per day\n</code></pre></div>\n<p>This returns a list of intervals, one for each day in the input period, which we then use to aggregate the daily dose for medications with an active prescription on that day.</p>",
        "id": 234873833,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1618586912
    },
    {
        "content": "<p>In Exercise 8, looking at the result of just the multi-source query with no restrictions might help:</p>\n<div class=\"codehilite\"><pre><span></span><code>define &quot;Quantitative Laboratory Result Pairs&quot;:\n  from\n    &quot;Quantitative Laboratory Results&quot; O1,\n    &quot;Quantitative Laboratory Results&quot; O2\n</code></pre></div>",
        "id": 234874611,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1618587189
    },
    {
        "content": "<p>This returns all pairs of Quantitative Laboratory Results:</p>\n<div class=\"codehilite\"><pre><span></span><code>Quantitative Laboratory Result Pairs=[Tuple {\n    &quot;O1&quot;: org.hl7.fhir.r4.model.Observation@e4871af7\n    &quot;O2&quot;: org.hl7.fhir.r4.model.Observation@e4871af7\n}, Tuple {\n    &quot;O1&quot;: org.hl7.fhir.r4.model.Observation@e4871af7\n    &quot;O2&quot;: org.hl7.fhir.r4.model.Observation@251765e9\n}, Tuple {\n    &quot;O1&quot;: org.hl7.fhir.r4.model.Observation@e4871af7\n    &quot;O2&quot;: org.hl7.fhir.r4.model.Observation@de86d67e\n}, Tuple {\n    &quot;O1&quot;: org.hl7.fhir.r4.model.Observation@e4871af7\n    &quot;O2&quot;: org.hl7.fhir.r4.model.Observation@66ce16b1\n}, Tuple {\n... &lt;snipped for brevity&gt;\n</code></pre></div>",
        "id": 234874834,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1618587255
    },
    {
        "content": "<p>Perhaps a clearer example:</p>\n<div class=\"codehilite\"><pre><span></span><code>define &quot;Input List&quot;: { &#39;A&#39;, &#39;B&#39;, &#39;C&#39; }\ndefine &quot;Input List Pairs&quot;:\n  from &quot;Input List&quot; X, &quot;Input List&quot; Y\n</code></pre></div>",
        "id": 234875083,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1618587340
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Input List=[A, B, C]\nInput List Pairs=[Tuple {\n    &quot;X&quot;: A\n    &quot;Y&quot;: A\n}, Tuple {\n    &quot;X&quot;: A\n    &quot;Y&quot;: B\n}, Tuple {\n    &quot;X&quot;: A\n    &quot;Y&quot;: C\n}, Tuple {\n    &quot;X&quot;: B\n    &quot;Y&quot;: A\n}, Tuple {\n    &quot;X&quot;: B\n    &quot;Y&quot;: B\n}, Tuple {\n    &quot;X&quot;: B\n    &quot;Y&quot;: C\n}, Tuple {\n    &quot;X&quot;: C\n    &quot;Y&quot;: A\n}, Tuple {\n    &quot;X&quot;: C\n    &quot;Y&quot;: B\n}, Tuple {\n    &quot;X&quot;: C\n    &quot;Y&quot;: C\n}]\n</code></pre></div>",
        "id": 234875133,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1618587357
    },
    {
        "content": "<p>On the question of context, CQL allows the model to specify a context, which you can think of as a \"default filter\" with respect to a particular context. Patient is the most common context, but models can define any number of them. In FHIR specifically, this corresponds roughly to the notion of a \"compartment\", and the FHIR model info includes context definitions for each compartment definition in the FHIR specification.</p>",
        "id": 234875931,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1618587655
    },
    {
        "content": "<p>There's an explanation of the impact of context in the <a href=\"http://build.fhir.org/ig/HL7/cql/02-authorsguide.html#retrieve-context\">Retrieve Context</a> topic of the Author's Guide.</p>",
        "id": 234876699,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1618587958
    },
    {
        "content": "<p>Does that help?</p>",
        "id": 234876770,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1618587975
    },
    {
        "content": "<p>(And apologies for the delays in getting back to this) <span class=\"user-mention\" data-user-id=\"193795\">@Joel Francis</span> <span class=\"user-mention\" data-user-id=\"192545\">@Alex Goel</span></p>",
        "id": 234876840,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1618588001
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>define &quot;Quantitative Laboratory Result Pairs&quot;:\n  from\n    &quot;Quantitative Laboratory Results&quot; O1,\n    &quot;Quantitative Laboratory Results&quot; O2\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> No worries on the delay! I'm not clear on why this returns what the lists. In reading these functions it seems like these would be the same list and you're subtracting 1 from 1. How does the CQL know that it should iterate through these lists to produce the pairs?</p>",
        "id": 234879582,
        "sender_full_name": "Alex Goel",
        "timestamp": 1618588960
    },
    {
        "content": "<p>The \"from\" clause is setting up the sources for a query. The <code>Quantitative Laboratory Results</code> expression returns a list of lab results, so this is saying, \"from Quantitative Laboratory Results with the name O1 and Quantitative Laboratory Results as the name O2, perform the following query\". The definition of a multi-source query starts with the set of all possible combinations of the input sources (also known as cartesian product of sets).</p>",
        "id": 234881669,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1618589697
    },
    {
        "content": "<p>If you're familiar with SQL, it's the same as saying:</p>\n<div class=\"codehilite\"><pre><span></span><code>select *\n  from &quot;Quantitative Laboratory Results&quot; O1, &quot;Quantitative Laboratory Results&quot; O2\n</code></pre></div>\n<p>Or in join syntax:</p>\n<div class=\"codehilite\"><pre><span></span><code>select *\n  from &quot;Quantitative Laboratory Results&quot; O1 cross join &quot;Quantitative Laboratory Results&quot; O2\n</code></pre></div>",
        "id": 234881989,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1618589811
    },
    {
        "content": "<p>The <a href=\"http://build.fhir.org/ig/HL7/cql/03-developersguide.html#multi-source-queries\">Multi-source queries</a> topic has more discussion as well.</p>",
        "id": 234882219,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1618589907
    }
]