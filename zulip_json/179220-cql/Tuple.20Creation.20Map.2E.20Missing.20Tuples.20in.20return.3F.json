[
    {
        "content": "<p>I am crafting a FHIR-CQL script to not only capture source FHIR resources, but also specifically derived elements as tuples with extra metadata within the tuple to help with downstream processing. The script is a little big so rather than show the entire script, I'm going to describe the workflow and provide a few snippets here. The basic flow of my script is:</p>\n<ul>\n<li>Capture a set of conditions</li>\n<li>Capture a set medicationstatements occurring 2-4 weeks after the conditions</li>\n<li>For each medication, create 3 tuples</li>\n<li>A 'Code' Tuple which captures the actual code captured from the medicationstatement</li>\n<li>A 'Dosage' Tuple which captures the dosage component from the medicationstatement</li>\n<li>A 'Onset' Tuple which captures  the starting datetime of the medicationstatement</li>\n</ul>\n<p>In my testing FHIR server I loaded a Patient with 2 matching conditions, and then assigned a medicationstatement within the timeframe for each condition.</p>\n<p>From my script output I was able to see</p>\n<ul>\n<li>2 source conditions (good)</li>\n<li>2 source medicationstatements (good)</li>\n<li>1 'Code' Tuple (bad)</li>\n<li>2 'Dosage' Tuple (good)</li>\n<li>2 'Onset' Tuple (good)</li>\n</ul>\n<p>Which surprised me, as 2 of the tuple sets we're 1-to-1 on the Dosage and Onset components, but the 'Code' Tuple was missing a tuple. I'm trying to figure out why that might be.</p>\n<p>I wrote my code tuple definition as:</p>\n<div class=\"codehilite\"><pre><span></span><code>define &quot;Penicillin_MSTuple&quot;: from Penicillin_MS target //FhirBundleCursor\n    return Tuple {\n        questionConcept: &#39;20000005&#39;,\n        sourceValue: target.medication.coding[0].code+&#39;^&#39;+target.medication.coding[0].system,\n        answerValue: &#39;http://www.nlm.nih.gov/research/umls/rxnorm^7980^penicillin G&#39;,\n        resultType: &#39;Drug&#39;\n    }\n</code></pre></div>\n<p>and my dosage tuple as:</p>\n<div class=\"codehilite\"><pre><span></span><code>define &quot;Penicillin_MS_DosageTuple&quot;: from Penicillin_MS target //FhirBundleCursor\n    return Tuple {\n        fhirResourceId: target.id,\n        questionConcept: &#39;20000005&#39;,\n        sourceValue: ToString(FHIRHelpers.ToQuantity((&quot;target&quot;.dosage[0].dose as FHIR.Quantity))),\n        answerValue: &#39;target.dosage[0].dose&#39;,\n        resultType: &#39;Drug&#39;,\n        field: &#39;target.dosage[0].dose&#39;\n    }\n</code></pre></div>\n<p>and my onset/effective tuple as</p>\n<div class=\"codehilite\"><pre><span></span><code>define &quot;Penicillin_MS_Date_Medication_StartedTuple&quot;: from Penicillin_MS target //FhirBundleCursor\n    return Tuple {\n        fhirResourceId: target.id,\n        questionConcept: &#39;20000005&#39;,\n        sourceValue: target.effective as FHIR.dateTime,\n        answerValue: &#39;target.effective as FHIR.dateTime&#39;,\n        resultType: &#39;Drug&#39;,\n        field: &#39;target.effective&#39;\n    }\n</code></pre></div>\n<p>All defines returned as the \"List\" type, with the list of Tuples, but the Code one only contained one. I replicated the issue with another set of medicationstatements too, so I know it's not the source data itself, it's the cql definition causing an issue here. Is there something about tuple rendering that could cause issues?<br>\nI can share test data too if that would be helpful</p>",
        "id": 250976396,
        "sender_full_name": "Michael Riley",
        "timestamp": 1630089736
    },
    {
        "content": "<p>I'm just guessing here, but the default for _projection_ in a CQL query is <code>distinct</code>, so if all the tuples in the <code>code</code> query are the same, only one will be returned. You can use the <code>all</code> keyword (<code>return all</code>) to preserve duplicates in the result.</p>",
        "id": 250979695,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1630091089
    },
    {
        "content": "<p>That is what's happening Byrn, thank you! The interesting thing is that we have the same dosage information for each MedicationStatement, but in the backend the dosage component is a different pointer in memory, so they appear distinct. If keeping distinctness in tuples is important to the language, it might be good if the fhir data provider could provide some hashcode or id based on the fields in the component itself.</p>",
        "id": 251240751,
        "sender_full_name": "Michael Riley",
        "timestamp": 1630334922
    }
]