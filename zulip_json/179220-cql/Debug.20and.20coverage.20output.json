[
    {
        "content": "<p><a href=\"http://jira.hl7.org/browse/FHIR-27474\">J#27474</a> suggests that we consider defining debug and coverage output annotations for CQL. Debug output has been added to the Java reference implementation here: <a href=\"https://github.com/DBCG/cql_engine/tree/master/engine/src/main/java/org/opencds/cqf/cql/engine/debug\">https://github.com/DBCG/cql_engine/tree/master/engine/src/main/java/org/opencds/cqf/cql/engine/debug</a>, and I know that there is something similar in the JavaScript engine to support the coverage feature in Bonnie. Should we consider something along these lines as the starting point here? <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> <span class=\"user-mention\" data-user-id=\"197045\">@Sam Sayer</span></p>",
        "id": 203229591,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1594181514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> can you share a sample of the coverage from the Java engine?</p>",
        "id": 203260844,
        "sender_full_name": "Sam Sayer",
        "timestamp": 1594211158
    },
    {
        "content": "<p>I didn't work closely with this part of the JS engine, but I think the general approach is that the JS engine stores values of each expression, using the expression's localId.  When a run is completed, you know which expressions were executed and which ones weren't (because the ones that weren't don't have an entry in the localId map of results).  Bonnie also wanted to keep track of the individual results which added some complication for queries since query logic loops on each item in the source.  I don't remember exactly how that was resolved...</p>",
        "id": 203261199,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1594211417
    },
    {
        "content": "<p>I don't have a serialization of the results yet, just the structures as defined at that link, but conceptually, it sounds like it's doing the same thing that Chris described, saving the value for each node that is visited (well, values, in the case that the node is visited multiple times).</p>",
        "id": 203331563,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1594247333
    },
    {
        "content": "<p>I think the JS engine doesn't currently hold multiple values, it can only say whether or not the node was hit. I believe that was one of the improvements we wanted to make with the move to FHIR. <span class=\"user-mention\" data-user-id=\"254422\">@Chris Hossenlopp</span> has the most JS engine experience so he can confirm/deny what I said.</p>",
        "id": 203385285,
        "sender_full_name": "Sam Sayer",
        "timestamp": 1594301557
    },
    {
        "content": "<p>The JS engine results currently have the first \"truthy\" value or last \"falsey\" for each localId. \"truthy\" meaning non-empty list, not null, or true.</p>",
        "id": 203386448,
        "sender_full_name": "Chris Hossenlopp",
        "timestamp": 1594302259
    }
]