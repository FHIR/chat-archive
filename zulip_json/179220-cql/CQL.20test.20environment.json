[
    {
        "content": "<p>Is there somewhere an openly available CQL execution engine with a web user interface and an attached FHIR repository with a bit of play examples as content. This would make experimenting with CQL easier as one could just see to what self created queries evaluate to.</p>",
        "id": 181686069,
        "sender_full_name": "Georg Fette",
        "timestamp": 1574464106
    },
    {
        "content": "<p>Yes, we host a CQL Runner here: <a href=\"http://cql-runner.dataphoria.org\" target=\"_blank\" title=\"http://cql-runner.dataphoria.org\">http://cql-runner.dataphoria.org</a></p>",
        "id": 181686449,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1574464557
    },
    {
        "content": "<p>You can configure the test server you want to run it against, but by default we have a simple sandbox up that it uses.</p>",
        "id": 181686516,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1574464580
    },
    {
        "content": "<p>No guarantees on availability there, but we try to keep it up and running and functional.</p>",
        "id": 181686534,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1574464608
    },
    {
        "content": "<p>ah, cool, thanks</p>",
        "id": 181703851,
        "sender_full_name": "Georg Fette",
        "timestamp": 1574492922
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"196537\">@Georg Fette</span>. In the meantime, I have written a FHIR Server with integrated CQL engine which is called <a href=\"https://github.com/life-research/blaze\" target=\"_blank\" title=\"https://github.com/life-research/blaze\">Blaze</a>. Since this week, I have also a web UI called <a href=\"https://github.com/samply/blaze-quality-reporting-ui\" target=\"_blank\" title=\"https://github.com/samply/blaze-quality-reporting-ui\">Blaze Quality Reporting</a> with a Public Demo at <a href=\"https://blaze.life.uni-leipzig.de/quality-reporting\" target=\"_blank\" title=\"https://blaze.life.uni-leipzig.de/quality-reporting\">https://blaze.life.uni-leipzig.de/quality-reporting</a>.</p>",
        "id": 182101066,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1574940440
    },
    {
        "content": "<p>ah, nice</p>",
        "id": 182101465,
        "sender_full_name": "Georg Fette",
        "timestamp": 1574940859
    },
    {
        "content": "<p>what interface does a working CQL engine have to expose, so that in one of those test environments the engine could be replaced by another engine, to compare their results and performances ?</p>",
        "id": 182101603,
        "sender_full_name": "Georg Fette",
        "timestamp": 1574941006
    },
    {
        "content": "<p>I implement <a href=\"https://www.hl7.org/fhir/clinicalreasoning-quality-reporting.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/clinicalreasoning-quality-reporting.html\">https://www.hl7.org/fhir/clinicalreasoning-quality-reporting.html</a> and especially <a href=\"https://www.hl7.org/fhir/operation-measure-evaluate-measure.html\" target=\"_blank\" title=\"https://www.hl7.org/fhir/operation-measure-evaluate-measure.html\">https://www.hl7.org/fhir/operation-measure-evaluate-measure.html</a>. There might be other ways to execute CQL over FHIR, but that's what I found.</p>",
        "id": 182101810,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1574941241
    },
    {
        "content": "<p>is the Blaze CQL engine hardwired with its FHIR server or can its FHIR server be exchanged ?</p>",
        "id": 182102202,
        "sender_full_name": "Georg Fette",
        "timestamp": 1574941626
    },
    {
        "content": "<p>It's not totally hardwired. I have different modules in the develop Branch. It's written in Clojure, so it is possible to use it from Java. One had to provide clear interfaces for retrieve and provide an object graph which can be navigated like I do it currently.</p>",
        "id": 182102583,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1574942063
    },
    {
        "content": "<p>The Java-based CQL engine defines interfaces for an engine DataProvider, though that's more about how the engine gets to the data, rather than how the environment would call CQL.</p>",
        "id": 182491534,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1575404816
    },
    {
        "content": "<p>The CQF Ruler defines a proposed $cql operation, but we don't have enough implementation experience with that yet to put it in a balloted spec. If there's interest in seeing that, we could add it to something like CPG-on-FHIR.</p>",
        "id": 182491606,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1575404867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> Can you please point to the $cql operation?</p>",
        "id": 182494677,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1575406810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197470\">@Alexander Kiel</span> You can find the operation here: <a href=\"https://github.com/DBCG/cqf-ruler/blob/master/dstu3/src/main/java/org/opencds/cqf/dstu3/providers/CqlExecutionProvider.java#L216\" target=\"_blank\" title=\"https://github.com/DBCG/cqf-ruler/blob/master/dstu3/src/main/java/org/opencds/cqf/dstu3/providers/CqlExecutionProvider.java#L216\">https://github.com/DBCG/cqf-ruler/blob/master/dstu3/src/main/java/org/opencds/cqf/dstu3/providers/CqlExecutionProvider.java#L216</a></p>\n<p>I don't believe that we any docs around the operation... You can call it using a POST request:<br>\nPOST {baseUrl}/$cql (e.g. <a href=\"http://localhost:8080/cqf-ruler-dstu3/fhir/$cql\" target=\"_blank\" title=\"http://localhost:8080/cqf-ruler-dstu3/fhir/$cql\">http://localhost:8080/cqf-ruler-dstu3/fhir/$cql</a>)<br>\nBody:<br>\n{<br>\n    \"resourceType\": \"Parameters\",<br>\n    \"parameter\": [<br>\n        {<br>\n            \"name\": \"code\",<br>\n            \"valueString\": \"your cql code\"<br>\n        },<br>\n        {<br>\n            \"name\": \"patientId\",<br>\n            \"valueString\": \"the patient your evaluating the cql against\"<br>\n        },<br>\n        {<br>\n            \"name\": \"periodStart\",<br>\n            \"valueString\": \"if evaluating measure logic, this is the start of the measurement period\"<br>\n        },<br>\n        {<br>\n            \"name\": \"periodEnd\",<br>\n            \"valueString\": \"if evaluating measure logic, this is the end of the measurement period\"<br>\n        },<br>\n        {<br>\n            \"name\": \"context\",<br>\n            \"valueString\": \"the context of the library (i.e. Patient, Population, etc...\"<br>\n        }<br>\n    ]<br>\n}</p>\n<p>That should get you going. We also enable more advanced settings like defining parameters and pointing to a specific terminology endpoint. I can expand on those if you're interested.</p>",
        "id": 182511965,
        "sender_full_name": "Christopher Schuler",
        "timestamp": 1575418037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191897\">@Christopher Schuler</span> I see. That is similar of what <a href=\"http://cql-runner.dataphoria.org\" target=\"_blank\" title=\"http://cql-runner.dataphoria.org\">http://cql-runner.dataphoria.org</a> expected of an API. It returns a Bundle with an entry for each expression definition as a Parameter s resource with name, location and result. With that you can basically execute what you want and get the results. I went away from <a href=\"http://cql-runner.dataphoria.org\" target=\"_blank\" title=\"http://cql-runner.dataphoria.org\">http://cql-runner.dataphoria.org</a>  because the API it uses was not defined. Now if $cql is planned, I would be happy to discuss use cases.</p>\n<p>In the meantime, we use $evaluate-measure. It fits you main use case, counting populations, well. But it has quite an overhead for our ad hoc queries, because we create a Library and Measure resource for each query.</p>\n<p>On the other hand, we have use cases were $evaluate-measure is a better fit, because we have stable measures, which are called regularly. On top of that we need stratifiers which to my knowledge aren't possible to calculate with CQL only because it has no group by.</p>",
        "id": 182535066,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1575448176
    },
    {
        "content": "<p>It's true that CQL has no group by, but it does have aggregate functions, and with those, group by is just a shorthand. For example:</p>\n<div class=\"codehilite\"><pre><span></span>define GroupBy:\n  ([Medication] M return M.code) MCode\n    return { MCode, Count([Medication] M where M.code = MCode) }\n</pre></div>",
        "id": 182714778,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1575587688
    },
    {
        "content": "<p>This is an interesting way of expressing a group by. Although it seems a bit hard to read when a construct like this is integrated in a larger statement. Can defines be called with parameters ? Then such definitions could be extracted from complicated statements where group bys are needed to make the code more readable.</p>",
        "id": 182739937,
        "sender_full_name": "Georg Fette",
        "timestamp": 1575622067
    },
    {
        "content": "<blockquote>\n<p>Can defines be called with parameters ?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"196537\">@Georg Fette</span> You can define functions.</p>",
        "id": 182741740,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1575623809
    },
    {
        "content": "<p>ah, nice, didn't know that yet</p>",
        "id": 182742060,
        "sender_full_name": "Georg Fette",
        "timestamp": 1575624085
    }
]