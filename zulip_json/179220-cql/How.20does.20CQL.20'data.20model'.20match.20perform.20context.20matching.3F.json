[
    {
        "content": "<p>I've run into problems trying to execute a CQL rule in Atom with cql-language plugin.  One case in particular is for Coverage; here's this simple rule but in the plugin it is always returning 'null'.    I have this specific problem but this brings up the more general question, how does a CQL rule developer know how a particular resource does context matching?     If the CQL is in the Patient context Coverage has 2 possible ways to match patient, the beneficiary reference property (most likely/sensible) and the subscriber reference property.     I imagine there are other resources too that have multiple possible context matching properties, e.g. for Practitioner context many FHIR resources have multiple references to Practitioners.</p>",
        "id": 237405528,
        "sender_full_name": "John Silva",
        "timestamp": 1620164717
    },
    {
        "content": "<p>I'm not the developer, but the cql-fhir-engine defines a \"context\" (Patient context) and a \"contextPath\", which is where to find the patient. It then transforms that contextPath into a fhirpath definition using a crawl of hapi-fhir's built in models of the fhir resources. This all happens in some pretty gnarly hapi fhir reflection-like code in \"getContextPath\" here. <a href=\"https://github.com/DBCG/cql_engine/blob/48c95b816724f2558ef7516cd6fb6494787e7aa6/engine.fhir/src/main/java/org/opencds/cqf/cql/engine/fhir/model/FhirModelResolver.java#L72\">https://github.com/DBCG/cql_engine/blob/48c95b816724f2558ef7516cd6fb6494787e7aa6/engine.fhir/src/main/java/org/opencds/cqf/cql/engine/fhir/model/FhirModelResolver.java#L72</a><br>\nSo in the case of multiple hits, where multiple search parameters can forfill the \"Patient\" search parameter type, I believe it's just down to which reference is resolved first (undefined behavior essentially). You can override the behavior to force a specific path for the Coverage resource to use if you have access to source, you can update the child class's getContextPath similar to what the STU3 version did here. at line 270 <a href=\"https://github.com/DBCG/cql_engine/blob/48c95b816724f2558ef7516cd6fb6494787e7aa6/engine.fhir/src/main/java/org/opencds/cqf/cql/engine/fhir/model/Dstu3FhirModelResolver.java\">https://github.com/DBCG/cql_engine/blob/48c95b816724f2558ef7516cd6fb6494787e7aa6/engine.fhir/src/main/java/org/opencds/cqf/cql/engine/fhir/model/Dstu3FhirModelResolver.java</a></p>",
        "id": 237529114,
        "sender_full_name": "Michael Riley",
        "timestamp": 1620233654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194612\">@Michael Riley</span>  - thanks for the info -- but this seems to be unreliable and fragile.   It seems like this should be defined in CQL language.    Also for CQL rule authors, they don't have the 'luxury' of changing source code in the CQL execution engine.   Maybe I'm missing something in the CQL language (I'm new to it) but it seems like there should be a declarative way to define this context relationship.</p>",
        "id": 237542484,
        "sender_full_name": "John Silva",
        "timestamp": 1620238876
    },
    {
        "content": "<p>Michael has accurately portrayed the current state of things, but that's not the intended future state. CQL is not FHIR-specific meaning that it can be used with other clinical data models such as QDM. The CQL translator uses something called a \"modelinfo\" to understand the properties of the data model. At the time that code was written the \"modelinfo\" did not include information about context relationships. The latest versions of the FHIR modelinfo have the specific properties used for context relationships.</p>\n<p><a href=\"https://raw.githubusercontent.com/cqframework/clinical_quality_language/68e6861b38603e6d87d822b938cc1a5ed354d7a7/Src/java/quick/src/main/resources/org/hl7/fhir/fhir-modelinfo-4.0.1.xml\">https://raw.githubusercontent.com/cqframework/clinical_quality_language/68e6861b38603e6d87d822b938cc1a5ed354d7a7/Src/java/quick/src/main/resources/org/hl7/fhir/fhir-modelinfo-4.0.1.xml</a></p>",
        "id": 237547747,
        "sender_full_name": "JP",
        "timestamp": 1620241043
    },
    {
        "content": "<p>In the future the expectation is that the CQL engine would use the properties listed in the modelinfo.</p>",
        "id": 237547892,
        "sender_full_name": "JP",
        "timestamp": 1620241096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194178\">@JP</span>  Thanks again!   OK, CQL is not FHIR specific but for its use with FHIR is the data model specified (or balloted)?   It seems like it would be hard to know (as a CQL author) if this model isn't explicit.   </p>\n<p>I did query the modelinfo and found Coverage has 4 reference prop's -- is the order of matching these specified or does it return all where the referenced value matched the context value, e.g. Patient?</p>\n<p><code>      &lt;contextRelationship context=\"Patient\" relatedKeyElement=\"policyHolder\"/&gt;\n      &lt;contextRelationship context=\"Patient\" relatedKeyElement=\"subscriber\"/&gt;\n      &lt;contextRelationship context=\"Patient\" relatedKeyElement=\"beneficiary\"/&gt;\n      &lt;contextRelationship context=\"Patient\" relatedKeyElement=\"payor\"/&gt;\n</code></p>",
        "id": 237559524,
        "sender_full_name": "John Silva",
        "timestamp": 1620246271
    },
    {
        "content": "<p>The modelinfo is currently explicitly NOT part of the normative spec:<br>\n<a href=\"https://cql.hl7.org/elm.html\">https://cql.hl7.org/elm.html</a></p>\n<p>That said, the tooling that is used to generate modelinfos for FHIR is open-source:<br>\n<a href=\"https://github.com/cqframework/cqf-tooling/blob/master/src/main/java/org/opencds/cqf/tooling/modelinfo/StructureDefinitionToModelInfo.java\">https://github.com/cqframework/cqf-tooling/blob/master/src/main/java/org/opencds/cqf/tooling/modelinfo/StructureDefinitionToModelInfo.java</a></p>\n<p>I recognize none of that answers the question \"how does a CQL author look up the context relationship\" and that's because there's no answer for that right now. Most of the Resource types that are patient compartment only relate to patient one way, so it's been something of an edge case thus far to handle things like Coverage. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>As far as how the multiple context relationships will be handled: It's not specified and there's no existing implementation so that's a TBD. Eventually it'll show up when you Right Click -&gt; CQL -&gt; View ELM in Atom. That shows you the Retrieve that's being generated for some given CQL.</p>",
        "id": 237567451,
        "sender_full_name": "JP",
        "timestamp": 1620249036
    },
    {
        "content": "<p>Thanks for all this good info.   I suspected it wasn't part of any normative spec -- is there an intention for it to be part of some informative spec to at least help guide CQL authors.  (informative of course means that a CQL tool implementer doesn't have to implement it but it leads to at least some consistency in implementation I would hope.)</p>\n<p>True, most of the simple Patient context ones are 'mostly obvious' and typically only one relationship.   However, I believe the Practitioner compartment might have resources with many reference relationships.    Also, the CQL spec pages only seem to have these 'simple examples' so it's hard to figure out these more non-obvious situations.    (BTW, the use case for patient's Coverage is that for things like DaVinci CRD/DTR/PAS you'd need to know the relationship to get the rules to figure out the patient's coverage for prior authorization and more.    I guess the Connectathon next week might uncover some of this ...)</p>",
        "id": 237582596,
        "sender_full_name": "John Silva",
        "timestamp": 1620256986
    },
    {
        "content": "<p>Well, there are a several areas of activity related to that question. One is the hope that the tooling I referenced will allow the use of profiles that are more constrained (or extended) than the current base FHIR spec. Meaning you could eventually do:</p>\n<div class=\"codehilite\"><pre><span></span><code>library Demo\nusing QICore version &#39;3.0.2&#39;\n</code></pre></div>\n<p>That machinery was built to support QICore and USCore in a first-class way in CQL, but it could in theory support any arbitrary FHIR profile. Then'd it'd be up to the profile maintainers to decide those relationships.</p>\n<p>Another is the CQL language server (which powers the Atom plugin). It uses the VSCode language server API and has stubs in place to allow for tips, snippets, warnings, auto-completion, etc. that may help out the author. IOW, once the modelinfo is wired up to the language server correctly, that type of information would be available to the CQL author inline in the authoring environment for any given model.</p>\n<p>Another is the \"Cooking with CQL\" training series which has quite a bit of info about the practical use of CQL:<br>\n<a href=\"https://github.com/cqframework/CQL-Formatting-and-Usage-Wiki/wiki/Cooking-with-CQL-Examples\">https://github.com/cqframework/CQL-Formatting-and-Usage-Wiki/wiki/Cooking-with-CQL-Examples</a></p>\n<p>I don't know that we've had an explicit conversation about making the FHIR model to CQL modelinfo mapping (and in particular the context relationships) part of the spec in any fashion but happy to raise that with <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>  and see where it goes. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 237693590,
        "sender_full_name": "JP",
        "timestamp": 1620320483
    },
    {
        "content": "<p>This is more great info; thank you.<br>\nOn the context question again; yes, it is based on the specific model \"in play\" but doesn't it seem like the CQL language should expose a mechanism to allow an author to make these decisions declaratively.   In the SQL db world the data model is up to the schema developer but the SQL language allows a query writer to 'peek into' a specific schema in order to create well-formed and executable queries.   (I guess is just feels kind of 'unnatural' to be left to the variances of the model as to how context elements are matched.)</p>",
        "id": 237752831,
        "sender_full_name": "John Silva",
        "timestamp": 1620349227
    },
    {
        "content": "<p>That's true for SQL, but SQL doesn't have the quite same concept of data models that CQL does. The model as far as SQL is concerned is the schema you've defined for your database and most relationships are represented by foreign keys, and you generally have to be explicit about the relationship between two tables (i.e. X join Y on <a href=\"http://X.id\">X.id</a> = Y.x_id). There's no higher-level representation of something like \"Patient\" or \"Encounter\" context. CQL is purposefully trying to make it so that the author doesn't need to worry about those concerns. It's targeted towards clinicians who may not even understand the concept of a join rather than database administrators .</p>",
        "id": 237862927,
        "sender_full_name": "JP",
        "timestamp": 1620409392
    },
    {
        "content": "<p>That said, it's not the case that we're trying to hide how things relate either. You should be able to see how those things relate while authoring CQL. It's just an area that hasn't been fully developed yet. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 237863551,
        "sender_full_name": "JP",
        "timestamp": 1620409641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194178\">@JP</span>   OK, makes sense.   I was thinking of some kind of operator where the author can explicitly say:<br>\n     [Coverage: Patient -&gt; beneficiary]</p>\n<p>For example, if I'm only looking for linking to the actual patient not the subscriber (e.g. the parent)</p>",
        "id": 237885807,
        "sender_full_name": "John Silva",
        "timestamp": 1620419453
    },
    {
        "content": "<p>You do have that in:</p>\n<div class=\"codehilite\"><pre><span></span><code>//context Patient\n[Coverage]  C\n   with [Patient] P\n      such that P.id ~ C.beneficiary\n</code></pre></div>",
        "id": 238210400,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1620680107
    },
    {
        "content": "<p>context Patient is syntactic sugar.  If it's not doing what you want, don't use it and be explicit about what you want.  <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> </p>\n<p>You can even then add context Patient afterward and go back to the sugar.</p>\n<p>Personally, I don't think the exceptional case warrants a new operator.  Others might disagree.</p>",
        "id": 238212483,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1620680970
    },
    {
        "content": "<p>It would definitely be nice if the tooling provided insight into the magic of the sugar.  But that's an editor/tooling issue, not CQL.</p>",
        "id": 238215640,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1620682380
    },
    {
        "content": "<p>Ah, that's the answer I was looking for -- an explicit way to define this reference linkage.   Yes, syntactic sugar can be problematic when it hides what's really going on.</p>\n<p>Can I still use that even if within the Patient content or do I need to be in the Unfiltered context or is the syntax you show the Unfiltered context?</p>",
        "id": 238219621,
        "sender_full_name": "John Silva",
        "timestamp": 1620684588
    },
    {
        "content": "<p>I just got around to trying this syntax in Atom with cql-language plugin and it doesn't like it:<br>\n<a href=\"/user_uploads/10155/e7ES11UFvUV3swIXGrWkhBbs/Screen-Shot-2021-05-11-at-10.56.46-AM.png\">Screen-Shot-2021-05-11-at-10.56.46-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/e7ES11UFvUV3swIXGrWkhBbs/Screen-Shot-2021-05-11-at-10.56.46-AM.png\" title=\"Screen-Shot-2021-05-11-at-10.56.46-AM.png\"><img src=\"/user_uploads/10155/e7ES11UFvUV3swIXGrWkhBbs/Screen-Shot-2021-05-11-at-10.56.46-AM.png\"></a></div>",
        "id": 238321745,
        "sender_full_name": "John Silva",
        "timestamp": 1620745041
    },
    {
        "content": "<p>It needs to be in unfiltered context, which is just not having context patient set, which is why I commented that line in my example.</p>",
        "id": 238331434,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1620748106
    },
    {
        "content": "<p>OK, can I mixed Unfiltered directive within a CQL rule file that also has Patient context directive?</p>",
        "id": 238332990,
        "sender_full_name": "John Silva",
        "timestamp": 1620748633
    },
    {
        "content": "<p>Sorry, I kinda pseudo coded that based on the [Coverage: Patient -&gt; beneficiary].  I should have looked at the types more closely.</p>\n<p>You need some kind of helper to compare a reference to an id.</p>\n<p>I've seen things like this used:</p>\n<div class=\"codehilite\"><pre><span></span><code>define function GetId(uri String):\n   Last(Split(uri, &#39;/&#39;))\n</code></pre></div>\n<p>And then the example becomes:</p>\n<div class=\"codehilite\"><pre><span></span><code>//context Patient\n[Coverage]  C\n   with [Patient] P\n      such that P.id ~ GetId(C.beneficiary.reference.value)\n</code></pre></div>",
        "id": 238333595,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1620748838
    },
    {
        "content": "<p>You can put things you don't want in patient context above the context Patient statement and then things you want in patient context below it.</p>\n<div class=\"codehilite\"><pre><span></span><code>define PatientCoverage ...\n\ncontext Patient\n\ndefine MedicationsInLastSixMonths...\n</code></pre></div>",
        "id": 238334032,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1620748977
    },
    {
        "content": "<p>To add to this, around contexts and context-related joins, this test case illustrates where we are headed:</p>\n<div class=\"codehilite\"><pre><span></span><code>define TestMedicationRequest1C:\n  [MedicationRequest] MR\n    let M: singleton from ([MR.medication -&gt; Medication])\n    where M.code ~ &quot;aspirin 325 MG / oxycodone hydrochloride 4.84 MG Oral Tablet&quot;\n</code></pre></div>",
        "id": 238347601,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1620752731
    },
    {
        "content": "<p>Not there yet, but the idea is that the context relationships declared in the model can be used to enable reference following.</p>",
        "id": 238347750,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1620752783
    },
    {
        "content": "<p>Well, I guess Bryn disagreed re the \"warrants a new operator\".  <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> </p>\n<p>And the syntax is shockingly close to what John suggested.  :)</p>",
        "id": 238348056,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1620752897
    },
    {
        "content": "<p>And a significant step towards that has just been added to the 1.5.4-SNAPSHOT, the ability to detect and optimize joins as includes, like this, for example:</p>\n<div class=\"codehilite\"><pre><span></span><code>define MedicationRequestWithAspirinInFrom:\n  from\n      [MedicationRequest] R,\n      [Medication] M\n    where M.id = Last(Split(R.medication.reference, &#39;/&#39;))\n      and M.code in &quot;Aspirin&quot;\n</code></pre></div>",
        "id": 238348065,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1620752904
    },
    {
        "content": "<p>Yeah, the syntax is related-context retrieves, a language feature that's still trial-use because we're still working out support for it in the engines.</p>",
        "id": 238348281,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1620752989
    },
    {
        "content": "<p>By \"includes\" there you're referring to the parameters of the from?  <br>\nLike:<br>\nfrom <br>\n   include, <br>\n   include, <br>\n   ...</p>\n<p>?</p>",
        "id": 238350367,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1620753858
    },
    {
        "content": "<p>And it's always been valid CQL, right?  But with 1.5.4-SNAPSHOT it recognizes it as a join and optimizes accordingly?</p>",
        "id": 238350893,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1620754079
    },
    {
        "content": "<p>So that particular example would result in a FHIR query like: <code>[base]/MedicationRequest?patient=123&amp;_include=MedicationRequest:medication</code></p>",
        "id": 238351483,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1620754246
    },
    {
        "content": "<p>And yes, that's always been valid CQL, there's just an additional optimization step available now that detects that pattern and optimizes it as an include.</p>",
        "id": 238351545,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1620754269
    },
    {
        "content": "<p>It's not part of the core translator, it's an additional step, since optimization strategies will vary based on target environment.</p>",
        "id": 238351639,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1620754302
    },
    {
        "content": "<p>There's a new elm-fhir package in the 1.5.4-SNAPSHOT that does it, and we're incorporating that capability into the engine and evaluator now.</p>",
        "id": 238351775,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1620754346
    },
    {
        "content": "<p>Oh <em>that</em> include.  Gotcha.</p>\n<p>Very cool.</p>",
        "id": 238351805,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1620754356
    },
    {
        "content": "<p>Hmm, it starts to look like SQL ;-)</p>",
        "id": 238356471,
        "sender_full_name": "John Silva",
        "timestamp": 1620756237
    },
    {
        "content": "<p>Yes, quite a lot - which probably isn't a bad thing. :)</p>",
        "id": 238365024,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1620759792
    },
    {
        "content": "<p>It's not an accident either :)</p>",
        "id": 238374046,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1620763644
    },
    {
        "content": "<p>Bryn, how new is the includes definition? This would be very helpful for me.</p>",
        "id": 238824793,
        "sender_full_name": "Michael Riley",
        "timestamp": 1621024043
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"194612\">@Michael Riley</span> , the capability was added as part of the 1.5 ballot, I've just pushed a branch that supports adding applying include optimizations to a compiled ELM tree (<a href=\"https://github.com/cqframework/clinical_quality_language/tree/feature-requirements-visitor\">https://github.com/cqframework/clinical_quality_language/tree/feature-requirements-visitor</a>) and I'm currently working on incorporating that functionality in to the engine, targeting the next week or so to have support for that in the engine and evaluator components.</p>",
        "id": 239098476,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1621261634
    },
    {
        "content": "<p>Just found this thread. So to be clear using <code>AllergyIntolerance</code> example, I see this in the modelinfo for R4.0.1:</p>\n<div class=\"codehilite\"><pre><span></span><code>      &lt;contextRelationship context=&quot;Patient&quot; relatedKeyElement=&quot;patient&quot;/&gt;\n      &lt;contextRelationship context=&quot;Patient&quot; relatedKeyElement=&quot;recorder&quot;/&gt;\n      &lt;contextRelationship context=&quot;Patient&quot; relatedKeyElement=&quot;asserter&quot;/&gt;\n</code></pre></div>\n<p>Given</p>\n<div class=\"codehilite\"><pre><span></span><code>context Patient\n\ndefine Allergies: [AllergyIntolerance]\n</code></pre></div>\n<p>How does it know to use the \"patient\" relationship (and not \"recorder\" or \"asserter\")?</p>",
        "id": 266281378,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1640716691
    },
    {
        "content": "<p>Currently the attribute for the context relationship is not specified in the ELM for the Retrieve generated by the CQL translator. IOW, that specific bit of the ModelInfo is not used. It's left up the runtime. The Java cql-engine works it out by looking at the properties of AllgeryIntolerance and using a simple (but currently undocumented) heuristic to figure out which key element it should use.</p>",
        "id": 266283616,
        "sender_full_name": "JP",
        "timestamp": 1640718423
    },
    {
        "content": "<p>Thanks @JP - would it make sense to propose an attribute added to contextRelationship (e.g. primary=boolean) to identify which relationship ought to be used in the implied case?</p>",
        "id": 266292906,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1640725908
    },
    {
        "content": "<p>(And <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>  - how does the cql-execution behave?)</p>",
        "id": 266293126,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1640726080
    },
    {
        "content": "<p>As I recall, something along those lines is on Bryn's todo list. <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> ?</p>",
        "id": 266294820,
        "sender_full_name": "JP",
        "timestamp": 1640727631
    },
    {
        "content": "<p>Given that the intent of the retrieve is to provide all the resources associated with the context, the default behavior would be to return all AllergyIntolerance resources that have any relationship to the Patient (i.e. the union of the results here). The current engine doesn't behave that way (as JP noted), but in thinking through this, I think it probably should, because there's no way to know ahead of time which one is the \"primary\" one, without knowing the intent of the CQL. Related-context retrieves would allow authors to be more specific if they wanted to.</p>",
        "id": 266715310,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1641232033
    },
    {
        "content": "<p>I feel like this thread has gone in a few different directions.  So I'll just throw out some different statements / thoughts:</p>\n<ul>\n<li><span class=\"user-mention\" data-user-id=\"191782\">@Brian Kaney</span> - If the question is \"how does cql-execution know which property to use to scope a query to the patient in context?\" then the answer is: <em>it doesn't</em>.  In fact, as currently designed, the engine isn't responsible for that at all, because it does not execute FHIR queries.  Instead, the person invoking the engine passes in a FHIR <code>Bundle</code> containing all of the patient's data (<em>already</em> scoped to only the patient's information).  So the FHIR queries and patient scoping happens prior to cql-execution doing anything. (And to be clear, it's actually the <code>PatientSource</code> implementation in cql-exec-fhir that takes in the bundles since cql-execution is completely unaware of specific data models like FHIR).</li>\n<li>BUT... in the open source CQL Services framework and the Pain Management Summary SMART app (both of which use cql-execution), we <em>hard-coded</em> a map containing the properties to use for scoping queries to a specific patient.  That way those apps can perform the right queries to build the bundle that gets passed along to cql-exection.</li>\n<li>There was also some talk of the <a href=\"https://cql.hl7.org/03-developersguide.html#related-context-retrieves\">related context retrieves</a> feature of CQL.  Just to be clear, cql-execution (the javascript engine) does not support that at all.  We'd be glad to take a PR though. ;-)</li>\n<li><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> -- I feel like using all of the contextRelationships to do a query could be problematic because it is not what authors would expect.  If you are in <code>Patient</code> context, then that seems to me like enough expressed intent in the CQL to justify using whatever property represents the patient.  We already support a <code>primaryCodePath</code> in ELM to indicate the default property to use for code/VS matching in a retrieve; so it seems to me that introducing a <code>primaryPatientPath</code> (or something like it) would be consistent with that. Or am I misunderstanding something in this conversation?</li>\n</ul>",
        "id": 266719344,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1641233973
    },
    {
        "content": "<p>The CQL spec says that Models may define their own contexts. Is there any existing guidance that ties the available contexts in FHIR to the compartment definitions?  If so, it does seem like we should be retrieving all the resources in the compartment. The ModelInfo code-generation works that way:</p>\n<p><a href=\"https://github.com/cqframework/cqf-tooling/blob/beccb1e5069fd812ad2d6fc272b0197a2ff8e8ad/src/main/java/org/opencds/cqf/tooling/modelinfo/ContextInfoBuilder.java#L35\">https://github.com/cqframework/cqf-tooling/blob/beccb1e5069fd812ad2d6fc272b0197a2ff8e8ad/src/main/java/org/opencds/cqf/tooling/modelinfo/ContextInfoBuilder.java#L35</a></p>",
        "id": 266722223,
        "sender_full_name": "JP",
        "timestamp": 1641235684
    },
    {
        "content": "<p>I think it's smart to use the <a href=\"http://hl7.org/fhir/R4/compartmentdefinition-patient.html\">Patient compartment</a> from FHIR, but I guess I don't fully understand <em>why</em> the patient compartment indicates additional properties like <code>recorder</code>, <code>asserter</code>, and <code>performer</code>.</p>\n<p>The description says:</p>\n<blockquote>\n<p>The patient compartment includes any resources where the subject of the resource is the patient, and some other resources that are directly linked to resources in the patient compartment</p>\n</blockquote>\n<p>But if we look at something like <code>AllergyIntolerance</code>, it says <code>patient or recorder or asserter</code>.  If we are truly interested in \"resources where the <em>subject</em> of the resource is the patient\", then <code>patient</code> is the right answer.  At first I thought maybe <code>recorder</code> and <code>asserter</code> were there as fallbacks if <code>patient</code> is blank, but <code>patient</code> is 1..1, so... I am stumped.  Why would anyone want a <em>different</em> patient's AllergyIntolerance in the compartment just because the primary patient asserted the allergy?  It means that clients need to verify that the resulting records actually reference the primary patient in the <code>patient</code> field -- which I doubt most clients do.</p>\n<p>I know this is not the fault of anyone working on CQL, but... I'm not sure that we should just embrace it as-is.  To me, it still makes sense to have a more specific qualifier to say \"this is the field that really means the patient is the <em>subject</em>.\"  And that field may need to be maintained by hand, just like <code>primaryCodePath</code>.</p>",
        "id": 266724876,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1641236994
    },
    {
        "content": "<p>There are also some inconsistencies  to consider -- for example in the Patient compartment, why is <code>recorder</code> missing from Condition?  Also, I wonder if the compartment is too restrictive -- e.g. Patient compartment explicitly restricts  practitioner. (But <a href=\"https://www.hl7.org/fhir/patient-operation-everything.html\">patient $everything</a> operation explicitly mentions linked records, including practitioners). I've thus far been leaning toward $everything operation as a way to build the patient bundle for context.</p>",
        "id": 266728164,
        "sender_full_name": "Brian Kaney",
        "timestamp": 1641238669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> , we could definitely take that approach, and it would make sense, I was basing my answer on the intended alignment of a \"context\" in CQL with the concept of a \"compartment\" in FHIR, though even that notion is still under some development in FHIR. The Retrieve in 1.5 has <code>context</code>, <code>contextProperty</code> and <code>contextSearch</code>, so we could definitely implement a <code>primaryContextPath</code> in the ModelInfo to support this. I'll add a feature request for it.</p>",
        "id": 266730062,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1641239860
    },
    {
        "content": "<p>I hope folks don't mind a slight detour to earlier messages, but I'm stepping through this thread and I see an error (inline) with the above example. Is this correct? Edit: Here's the pastebin of the full error: <a href=\"https://pastebin.com/SvBMGu2G\">https://pastebin.com/SvBMGu2G</a></p>\n<div class=\"codehilite\"><pre><span></span><code>library Unfiltered version &#39;0.1.0&#39;\n\nusing FHIR version &#39;4.0.1&#39;\n\ninclude FHIRHelpers version &#39;4.0.1&#39;\ninclude FHIRCommon version &#39;4.0.1&#39; called FC\n\ncontext Unfiltered\n\n// per fhir chat: this helper is for converting a reference to an id\ndefine function &quot;GetId&quot;(uri String):\n    Last(Split(uri, &#39;/&#39;))\n\n// this expression results in org.opencds.cqf.cql.engine.fhir.exception.UnknownType: Could not resolve type Unfiltered.\ndefine &quot;some test&quot;:\n[Coverage] C\n    with [Patient] P\n        such that P.id ~ GetId(C.beneficiary.reference.value)\n\ncontext Patient\n\ndefine &quot;Meow&quot;: &quot;some test&quot;\n</code></pre></div>",
        "id": 266730653,
        "sender_full_name": "Richard Stanley",
        "timestamp": 1641240168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194192\">@Richard Stanley</span> , that looks like a bug in the <code>Unfiltered</code> context, which the Java engine currently doesn't have great support for. Would you mind submitting that repro as an issue to the engine?</p>",
        "id": 266731077,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1641240430
    },
    {
        "content": "<p>Yep, thanks!</p>",
        "id": 266731116,
        "sender_full_name": "Richard Stanley",
        "timestamp": 1641240454
    },
    {
        "content": "<p>Here's the issue to add <code>primaryContextPath</code> and <code>context</code> details explicitly to the translator: <a href=\"https://github.com/cqframework/clinical_quality_language/issues/710\">https://github.com/cqframework/clinical_quality_language/issues/710</a></p>",
        "id": 266731224,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1641240491
    },
    {
        "content": "<p>Yeah, cool.  I totally dig that, <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>.</p>",
        "id": 266731276,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1641240532
    },
    {
        "content": "<blockquote>\n<p>that looks like a bug in the <code>Unfiltered</code> context</p>\n</blockquote>\n<p>This is due to the fact that CQL engine expects the <code>context</code> attribute in the ELM to be absent, rather than explicitly be set to <code>Unfiltered</code>. Translator bug or it should handle that case?</p>",
        "id": 266731973,
        "sender_full_name": "JP",
        "timestamp": 1641240957
    },
    {
        "content": "<p>It is optional in the spec (<a href=\"https://cql.hl7.org/04-logicalspecification.html#expressiondef\">https://cql.hl7.org/04-logicalspecification.html#expressiondef</a>) so the engines (I would think) should be prepared to deal with it either way.</p>",
        "id": 266733404,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1641241893
    },
    {
        "content": "<p>Related issue for ModelInfo code gen:<br>\n<a href=\"https://github.com/cqframework/cqf-tooling/issues/335\">https://github.com/cqframework/cqf-tooling/issues/335</a></p>",
        "id": 266962914,
        "sender_full_name": "JP",
        "timestamp": 1641402945
    }
]