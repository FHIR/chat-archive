[
    {
        "content": "<p>I've been writing a script to capture an index date of a covid immunization with the FHIR library on cql. But I'm having an issue with typing of returns from functions. I'm working from this initial script definition</p>\n<div class=\"codehilite\"><pre><span></span><code>library &quot;TestExampleOfFunction&quot; version &#39;0.0.1&#39;\nusing FHIR version &#39;4.0.0&#39;\ninclude &quot;FHIRHelpers&quot; version &#39;4.0.0&#39; called FHIRHelpers\ncodesystem &quot;ICD-10-CM&quot;: &#39;http://hl7.org/fhir/sid/icd-10-cm&#39;\ncodesystem &quot;CVX&quot;: &#39;http://hl7.org/fhir/sid/cvx&#39;\ncodesystem &quot;RxNorm&quot;: &#39;http://www.nlm.nih.gov/research/umls/rxnorm&#39;\ncodesystem &quot;NDC&quot;: &#39;http://hl7.org/fhir/sid/ndc&#39;\ncodesystem &quot;CPT&quot;: &#39;http://www.ama-assn.org/go/cpt&#39;\n\n*Covid Vaccine Drug Exposure definition ommited for space*\n\ncontext Patient\n\ndefine &quot;CovidImmunization&quot;: [Immunization: &quot;Covid Vaccine Drug Exposure&quot;.codes]\n\ndefine &quot;MostRecentCovidI&quot;: MostRecentImmunizationDT(&quot;CovidImmunization&quot;)\n\ndefine function MostRecentImmunizationDT(ImmunizationList List&lt;FHIR.Immunization&gt;):\n  from ImmunizationList I\n  let result: Last(ImmunizationList I sort by (occurrence as FHIR.dateTime).value asc)\n    return (result.occurrence as FHIR.dateTime).value\n\ndefine &quot;testRange&quot;:\n  Interval[ &quot;MostRecentCovidI&quot; + 1 day, &quot;MostRecentCovidI&quot; + 42 days]\n</code></pre></div>\n<p>Now when I run this definition, I get a weird typing on \"MostRecentCovidI\" on the testRange definition</p>\n<div class=\"codehilite\"><pre><span></span><code>Error [53:13] Could not resolve call to operator Add with signature (list&lt;System.DateTime&gt;,System.Quantity).\n</code></pre></div>\n<p>So it seems like the 'result' variable comes back as a tuple of a list with a quantity, which seems very odd, I was expecting a FHIR.dateTime.value which would be a system.DateTime in cql.</p>\n<p>So I try and reduce the result scope variable in the function definition itself and add another Last clause in the definition like so.</p>\n<div class=\"codehilite\"><pre><span></span><code>define function MostRecentImmunizationDT(ImmunizationList List&lt;FHIR.Immunization&gt;):\n  from ImmunizationList I\n  let result: Last(ImmunizationList I sort by (occurrence as FHIR.dateTime).value asc)\n    return Last((result.occurrence as FHIR.dateTime).value)\n</code></pre></div>\n<p>This generates an error saying that the return value is already a System.DateTime, and the Last function cannot work on it.</p>\n<div class=\"codehilite\"><pre><span></span><code>Error [50:12] Could not resolve call to operator Last with signature (System.DateTime).\n</code></pre></div>\n<p>So the return is already defined as a System.DateTime, but the only way I'm able to move forward on my script is to change my top level definition to </p>\n<div class=\"codehilite\"><pre><span></span><code>define &quot;MostRecentCovidI&quot;: Last(MostRecentImmunizationDT(&quot;CovidImmunization&quot;))\n</code></pre></div>\n<p>Which makes no sense, the return type should have been a System.DateTime not a list. What's going on here? Is the return clause not firing correctly? Is this a poor way to craft functions? And what's a better way to check runtime types of defines?</p>",
        "id": 241431040,
        "sender_full_name": "Michael Riley",
        "timestamp": 1622744120
    },
    {
        "content": "<p>This code is a bit redundant in the sense that you're effectively generating the cross-product of ImmunizationList with itself</p>\n<div class=\"codehilite\" data-code-language=\"cql\"><pre><span></span><code>define function MostRecentImmunizationDT(ImmunizationList List&lt;FHIR.Immunization&gt;):\n  from ImmunizationList I\n  let result: Last(ImmunizationList I sort by (occurrence as FHIR.dateTime).value asc)\n    return (result.occurrence as FHIR.dateTime).value\n</code></pre></div>\n<p>I think what you're looking for is:</p>\n<div class=\"codehilite\" data-code-language=\"cql\"><pre><span></span><code>define function MostRecentImmunizationDT(ImmunizationList List&lt;FHIR.Immunization&gt;):\nLast(ImmunizationList I\n  return (I.occurrence as FHIR.dateTime).value\n  sort asc)\n</code></pre></div>\n<p>That creates a List of dateTime ordered earliest to latest, then gets the last one.</p>",
        "id": 241440976,
        "sender_full_name": "JP",
        "timestamp": 1622748745
    },
    {
        "content": "<p>As far as this error is concerned, the latter parameter that's showing as a Quantity is due to first parameter being a List and causing some type inference to blow up. There might be a way to improve the messaging in the future in the translator.</p>\n<blockquote>\n<p>Error [53:13] Could not resolve call to operator Add with signature (list&lt;System.DateTime&gt;,System.Quantity).</p>\n</blockquote>",
        "id": 241441190,
        "sender_full_name": "JP",
        "timestamp": 1622748847
    },
    {
        "content": "<p>Thank you for the help here. I will be more careful with the from clause, I thought I still needed the multi-query from clause to define the retrieval, as i wanted my return clause to be very clear in the function. but clearly you can just run the filters, and access down the List via an INTERNAL return clause.</p>",
        "id": 241547789,
        "sender_full_name": "Michael Riley",
        "timestamp": 1622818667
    }
]