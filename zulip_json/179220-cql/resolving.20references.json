[
    {
        "content": "<p>Hi, when I would like to access fields of a referenced resource, e.g.:</p>\n<p>[Observation] a where a.encounter.status = something</p>\n<p>How do I express that in CQL ?<br>\nThe above statement raises the error \"Member status not found for type FHIR.Reference.\"</p>",
        "id": 186871172,
        "sender_full_name": "Georg Fette",
        "timestamp": 1580292540
    },
    {
        "content": "<p>You can't traverse references this way in CQL. A FHIR reference in CQL is just that, the reference data type with its fields. I also assumed and even implemented reference traversal in my engine at the beginning. What you can do, is to use relationships in query:</p>\n<div class=\"codehilite\"><pre><span></span>[Observation] a\n  with [Encounter] b\n  such that b.status = something and EndsWith(a.encounter. reference, b.id)\n</pre></div>\n\n\n<p>I don't like the approach to use <code>EndsWith</code> on <code>Reference.reference</code> but that's the only thing I came up with. In all examples, I known of, they don't need such things like joining by id. Maybe we miss something here.</p>",
        "id": 186895475,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1580311591
    },
    {
        "content": "<p>We are pursuing several different approaches right now, the first is to join like <span class=\"user-mention\" data-user-id=\"197470\">@Alexander Kiel</span> suggested, though we often use functions to support that (an example <a href=\"https://github.com/DBCG/connectathon/blob/master/fhir4/cql/MATGlobalCommonFunctions_FHIR4-4.0.000.cql#L243\" target=\"_blank\" title=\"https://github.com/DBCG/connectathon/blob/master/fhir4/cql/MATGlobalCommonFunctions_FHIR4-4.0.000.cql#L243\">here</a>). Second is using a <a href=\"https://cql.hl7.org/03-developersguide.html#related-context-retrieves\" target=\"_blank\" title=\"https://cql.hl7.org/03-developersguide.html#related-context-retrieves\">related context retrieve</a>, though the FHIR model included with the current translator doesn't have enough information to work that out yet, and the Third is to enable the natural traversal in the original question (<code>a.encounter.status = something</code>), but that requires some additional tooling that is still in development in both the translator and the engine.</p>",
        "id": 186896289,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1580312049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> Is there a specification for the natural traversal? I thought one important point in CQL was, that one is able to calculate the data needed for a query and that the Retrieve expression was specially designed for that reason. With such a natural traversal, additional data might be required which is not visible through Retrieve.</p>",
        "id": 186896776,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1580312362
    },
    {
        "content": "<p>Well, the working idea of the natural traversal is that it would be an aspect of representation in the CQL, but the underlying ELM would still be expressed in terms of the actual retrieves.</p>",
        "id": 186900471,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1580314440
    },
    {
        "content": "<p>I would highly apprecitate such natural traversals. I would as well accept a workaround like in FHIRPath with a \"resolve()\" call. The solution with a join would be highly inefficient when it is needed to make a full iteration over another profile just to find the one that is referenced. The solution with the function obfuscating this full iteration would make the code more readable but still stays inefficient. As FHIR is a very graph like system it is necessary to be able to traverse all relations as transparent as possible to make it easily usable by everyone.</p>",
        "id": 187892799,
        "sender_full_name": "Georg Fette",
        "timestamp": 1581410803
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"196537\">@Georg Fette</span> , this is on the short list for items to be addressed in the upcoming CQL ballot.</p>",
        "id": 187919035,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1581433054
    },
    {
        "content": "<p>Someone (<span class=\"user-mention\" data-user-id=\"215604\">@Saul Kravitz</span>) recently asked me about traversing references... do we have any good examples of this now?  I know CQL 1.5 introduces <code>resolve</code>, but we're looking for the old school approach w/ sub-queries since that currently has better support.  The example <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> linked to above is broken, but I reckon there must be other examples out there.  If not, I can craft one, but I'm hoping for a battle-tested solution. ;-)</p>",
        "id": 231697874,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1616615449
    },
    {
        "content": "<p>Here's an updated link to that example:</p>",
        "id": 231708519,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1616620029
    },
    {
        "content": "<p><a href=\"https://github.com/cqframework/ecqm-content-r4/blob/master/input/cql/MATGlobalCommonFunctionsFHIR4.cql#L205\">https://github.com/cqframework/ecqm-content-r4/blob/master/input/cql/MATGlobalCommonFunctionsFHIR4.cql#L205</a></p>",
        "id": 231708521,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1616620029
    },
    {
        "content": "<p>And an example of usage just a few lines below that:</p>",
        "id": 231708557,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1616620046
    },
    {
        "content": "<p><a href=\"https://github.com/cqframework/ecqm-content-r4/blob/master/input/cql/MATGlobalCommonFunctionsFHIR4.cql#L210\">https://github.com/cqframework/ecqm-content-r4/blob/master/input/cql/MATGlobalCommonFunctionsFHIR4.cql#L210</a></p>",
        "id": 231708559,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1616620046
    },
    {
        "content": "<p>It's a limited use solution in that it assumes single-server evaluation and referencing.</p>",
        "id": 231708689,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1616620088
    },
    {
        "content": "<p>But it is functional and we have used that approach in both quality measure and decision support logic.</p>",
        "id": 231708740,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1616620109
    },
    {
        "content": "<p>And here's another example, slightly more complex \"plural\" reference, in answer to this same question from <span class=\"user-mention\" data-user-id=\"195129\">@Aziz Boxwala</span> :</p>\n<div class=\"codehilite\"><pre><span></span><code>library EncountersForDiabetesExample\n\nusing FHIR version &#39;4.0.1&#39;\n\ninclude FHIRHelpers version &#39;4.0.1&#39;\n\nvalueset Diabetes: &#39;TBD&#39;\n\ncontext Patient\n\ndefine EncountersForDiabetes:\n  [Encounter] E\n    with [Condition: &quot;Diabetes&quot;] C such that C.id in E.reasonReference R return Last(Split(R.reference, &#39;/&#39;))\n</code></pre></div>",
        "id": 231709021,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1616620234
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>.  Since you passed that challenge w/ flying colors... I don't suppose you have any examples where the reference is a choice, do you?  E.g., <code>Condition.stage.assessment</code> is a <code>Reference(ClinicalImpression|DiagnosticReport|Observation)</code>.  It's a little more tricky when you effectively have to issue different queries depending on the reference.  If you don't have an example, don't worry about it -- it's not rocket science and I can figure something out; but it's always nice to look for existing stuff first.</p>",
        "id": 231710001,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1616620580
    },
    {
        "content": "<p>I can't think of an example of that specifically, but I have a similar one, where the reference is choice of CodeableConcept or Reference:</p>\n<div class=\"codehilite\"><pre><span></span><code>define &quot;Active Ambulatory Naloxone Rx&quot;:\n(\n  (&quot;Get Active Ambulatory Medication Requests&quot;([MedicationRequest])) MR\n    where date from MR.authoredOn 2 years or less on or before Today()\n      and MR.medication is Reference or MR.medication in &quot;Naloxone medications&quot;\n) Rx\n  let Med: if Rx.medication is Reference then singleton from ([Medication: id in (Last(Split((Rx.medication as FHIR.Reference).reference, &#39;/&#39;)))]) else null\n  where not(Rx.medication is Reference) or Med.code in &quot;Naloxone medications&quot;\n    return\n      MedicationRequest {\n        id: Rx.id,\n        status: Rx.status,\n        intent: Rx.intent,\n        category: Rx.category,\n        medication: if Rx.medication is Reference then Med.code else Rx.medication as CodeableConcept,\n        subject: Rx.subject,\n        recorder: Rx.recorder,\n        dosageInstruction: Rx.dosageInstruction,\n        dispenseRequest: Rx.dispenseRequest\n      }\n</code></pre></div>",
        "id": 231710914,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1616621007
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> .</p>",
        "id": 231711055,
        "sender_full_name": "Aziz Boxwala",
        "timestamp": 1616621072
    },
    {
        "content": "<p>That medication example is functional against servers that use MedicationRequest with a reference to a Medication, as well as servers that use MedicationRequest with a CodeableConcept.</p>",
        "id": 231711127,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1616621110
    },
    {
        "content": "<p>And we're currently working on some planning code that will turn the related retrieve into an include so that it only hits the server once.</p>",
        "id": 231711237,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1616621159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"195129\">@Aziz Boxwala</span> , on that example of \"Encouters for Diabetes\", do you also want to consider Encounters that have a \"diagnosis\" element referencing a diabetes condition?</p>",
        "id": 231711517,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1616621276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> Should there be something in FHIRHelpers to handle references better so we hide away  this ugly code:  <code>Last(Split(R.reference, '/'))</code> or even <code> C.id in E.reasonReference R return Last(Split(R.reference, '/'))</code></p>",
        "id": 231711800,
        "sender_full_name": "Aziz Boxwala",
        "timestamp": 1616621392
    },
    {
        "content": "<p>Yes, and the latest translator release (1.5.2) does support the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>// If a reference is resolved in the scope of a query, that resolve can be rewritten as an include in the retrieve for that source\n// MedicationRequest\ndefine TestMedicationRequest1:\n  [MedicationRequest] MR\n    where MR.medication.reference.resolve().as(Medication).code ~ &quot;aspirin 325 MG / oxycodone hydrochloride 4.84 MG Oral Tablet&quot;\n\n// Expected FHIR URL for the retrieve\n// [base]/MedicationRequest?patient=123&amp;_include=MedicationRequest:medication\n\ndefine TestMedicationRequest1A:\n  [MedicationRequest] MR\n    with [Medication] M such that MR.medication = M.reference() and M.code ~ &quot;aspirin 325 MG / oxycodone hydrochloride 4.84 MG Oral Tablet&quot;\n\n//X.&lt;reference&gt;.references(Y) &lt;=&gt; X.&lt;reference&gt; = Y.reference()\n\ndefine TestMedicationRequest1B:\n  [MedicationRequest] MR\n    with [MR.medication -&gt; Medication] M such that M.code ~ &quot;aspirin 325 MG / oxycodone hydrochloride 4.84 MG Oral Tablet&quot;\n\ndefine TestMedicationRequest1C:\n  [MedicationRequest] MR\n    let M: singleton from ([MR.medication -&gt; Medication])\n    where M.code ~ &quot;aspirin 325 MG / oxycodone hydrochloride 4.84 MG Oral Tablet&quot;\n</code></pre></div>",
        "id": 231713630,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1616622070
    },
    {
        "content": "<p>But the engines don't support those capabilities (.resolve() and .reference() as well as the use of related-context retrieves in that way) (yet).</p>",
        "id": 231713775,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1616622127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191359\">Bryn Rhodes</span> <a href=\"#narrow/stream/179220-cql/topic/resolving.20references/near/231711517\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"195129\">Aziz Boxwala</span> , on that example of \"Encouters for Diabetes\", do you also want to consider Encounters that have a \"diagnosis\" element referencing a diabetes condition?</p>\n</blockquote>\n<p>Not needed <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> . Thanks though.</p>",
        "id": 231718057,
        "sender_full_name": "Aziz Boxwala",
        "timestamp": 1616624040
    }
]