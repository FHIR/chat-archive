[
    {
        "content": "<p>Hello, I was wondering if the basic CQL libraries come with functions for creating lists and appending elements into them? The use case here is to be able to assign multiple possible diagnoses to a patient into a list in which subsequently filter out excluded diagnoses ?</p>",
        "id": 244908468,
        "sender_full_name": "Adrien Prost",
        "timestamp": 1625474159
    },
    {
        "content": "<p>An important point to add, is that I am also asking whether or not we can define variables in CQL, so that we can modify lists in a function for example</p>",
        "id": 244913954,
        "sender_full_name": "Adrien Prost",
        "timestamp": 1625477670
    },
    {
        "content": "<p>Like some other declarative languages there are no facilities in CQL for mutating existing Lists or other definitions. Instead you use queries, definitions, and other operators to create NEW Lists.</p>\n<div class=\"codehilite\" data-code-language=\"cql\"><pre><span></span><code>  define \"Diagnosis 1\":\n      { 'alive and kicking' }\n\n  define \"Diagnosis 2\":\n       { 'doing ok' }\n\n  define \"Diagnosis 3\":\n       { 'not doing great' }\n\n  define \"All Possible Diagnoses\":\n      \"Diagnosis 1\" union \"Diagnosis 2\" union \"Diagnosis 3\"\n\n  define function FilterExcludedDiagnosis(diagnoses List&lt;System.String&gt;):\n      diagnoses D where D != 'doing ok'\n\n  define \"Filtered Diagnoses\":\n    FilterExcludedDiagnosis(\"All Possible Diagnoses\")\n\n  define \"Filtered Inline Instead\":\n     \"All Possible Diagnoses\" D where D != 'alive and kicking'\n\n  define \"Or Use Set Operators\":\n    \"All Possible Diagnoses\" except \"Diagnosis 3\"\n</code></pre></div>\n<p>I find it easiest to conceptualize the paradigm as \"pipes and filters\":</p>\n<p>input data -&gt; (transform) -&gt; intermediate data -&gt; (filter) -&gt;  output data </p>\n<p>data set 1 -&gt; (union) -&gt; output data<br>\ndata set 2 -------^</p>",
        "id": 245256754,
        "sender_full_name": "JP",
        "timestamp": 1625701745
    },
    {
        "content": "<p>Okay, thanks. I my case our diagnoses are results of decision trees where node outputs can have multiple outgoing edges, what I did is represent nodes as functions which all return a list of possible diagnoses, the function uses conditional statements to compute the correct output and then returns either the function of the  descendent node from the single outgoing edge or the union of all the descendant nodes.</p>",
        "id": 245288617,
        "sender_full_name": "Adrien Prost",
        "timestamp": 1625735163
    },
    {
        "content": "<p>The problem is that I am not sure that this method will be very efficient in practice with complex decision trees</p>",
        "id": 245288775,
        "sender_full_name": "Adrien Prost",
        "timestamp": 1625735284
    }
]