[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> shouldn't there be a way to associate a namespace with a CQL library?</p>",
        "id": 153897752,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500670159
    },
    {
        "content": "<p>another more simple question: I'm having trouble with parsing this:</p>",
        "id": 153897764,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500707965
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[Condition: severity in &quot;Acute Severity&quot;\n</pre></div>",
        "id": 153897765,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500707975
    },
    {
        "content": "<p>for which the Antlr grammar is :</p>",
        "id": 153897766,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500708117
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&#39;[&#39; namedTypeSpecifier (&#39;:&#39; (codePath &#39;in&#39;)? terminology)? &#39;]&#39;\n</pre></div>",
        "id": 153897767,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500708122
    },
    {
        "content": "<p>why is it 'codepath' if it can't be a code path? What are you supposed to do if it is a code path?</p>",
        "id": 153897768,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500708143
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&quot;AllergyIntolerance&quot; : reaction.substance in &quot;x&quot;]\n</pre></div>",
        "id": 153897769,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500708193
    },
    {
        "content": "<p>the other thing I don't like about it - and this seems often true of cql - is that you have to parse ahead to know what the thing is.</p>",
        "id": 153897770,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500708261
    },
    {
        "content": "<p>like how far you have to parse into a statement before you find out whether you parsing a retrieve or a query. That's just nuts....</p>",
        "id": 153897771,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500719757
    },
    {
        "content": "<p>in fact, as far as I can tell, the only way to know, once you get to the ] of a retrieve, whether what follows is the alias is to read over it and look for 'where' or something. That's pretty unfriendly.</p>",
        "id": 153897772,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500719945
    },
    {
        "content": "<p>as for this:</p>",
        "id": 153897773,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500730451
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    not exists (Common.&quot;Results Present For Chlamydia Screening&quot; S where S.&quot;issued&quot; during Interval[Today() - 1 years, Today()])\n</pre></div>",
        "id": 153897774,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500730454
    },
    {
        "content": "<p>so far as I can figure, the only way to know that \"S\" is an alias is because it's not an operation or a reserved word</p>",
        "id": 153897775,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500730477
    },
    {
        "content": "<p>I really miss a keyword like 'alias' to stabilise the syntax here</p>",
        "id": 153897776,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500730504
    },
    {
        "content": "<p>there's a typo in one of the example CQL files...</p>",
        "id": 153897781,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500763153
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>parameter MeasurementPeriod default Interval[DateTime(2013, 1, 1, 0, 0, 0, 0), DateTime(2014, 1, 1, 0, 0, 0, 0))\n</pre></div>",
        "id": 153897782,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500763169
    },
    {
        "content": "<p>should be</p>",
        "id": 153897783,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500763174
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>parameter MeasurementPeriod default Interval[DateTime(2013, 1, 1, 0, 0, 0, 0), DateTime(2014, 1, 1, 0, 0, 0, 0)]\n</pre></div>",
        "id": 153897784,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500763180
    },
    {
        "content": "<p>ChlamydiaScreening_CQM.cql</p>",
        "id": 153897785,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500763199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"grahame@healthintersections.com.au\" data-user-id=\"10\">@Grahame Grieve</span>, on the namespace question, the name of the library is the namespace, in general, but you can also alias a referenced library using the <code>called</code> clause of the <code>include</code> declaration.</p>",
        "id": 153897877,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1500881725
    },
    {
        "content": "<p>I suspect global namespaces will be called for</p>",
        "id": 153897878,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500881926
    },
    {
        "content": "<p>that typo appears in about 2/3 of the example CQL files packaged with the spec - closing an interval declaration with a ) instead of ]</p>",
        "id": 153897879,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500881999
    },
    {
        "content": "<p>On the typo, that's not a typo, Interval syntax in CQL indicates open/closed boundaries with <code>(</code> for open and <code>[</code> for closed.</p>",
        "id": 153897880,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1500882061
    },
    {
        "content": "<p>So those are DateTime intervals beginning on the first day of the year and ending immediately before the first day of the next year.</p>",
        "id": 153897881,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1500882105
    },
    {
        "content": "<p>hm I missed that in the grammar</p>",
        "id": 153897883,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500882214
    },
    {
        "content": "<p>On the codePath question, yes, that should be a path in general, but we left it as an identifier for simplicity at this point. You can specify a codePath with full path syntax in the model info for the default codePath, but allowing it in the retrieve would be a good enhancement.</p>",
        "id": 153897884,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1500882249
    },
    {
        "content": "<p>Submit a comment?</p>",
        "id": 153897885,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1500882322
    },
    {
        "content": "<p>well, it might connect as is with the split between parameter and path in FHIR.</p>",
        "id": 153897886,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500882380
    },
    {
        "content": "<p>where would I submit a comment for CQL?</p>",
        "id": 153897887,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500882449
    },
    {
        "content": "<p><a href=\"http://www.hl7.org/dstucomments/showdetail.cfm?dstuid=211\" target=\"_blank\" title=\"http://www.hl7.org/dstucomments/showdetail.cfm?dstuid=211\">http://www.hl7.org/dstucomments/showdetail.cfm?dstuid=211</a></p>",
        "id": 153897888,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1500882509
    },
    {
        "content": "<p>On the missing an \"alias\" keyword, we purposely omitted a query-start token (except for multi-source queries, which start with <code>from</code>) because it cluttered the simplest case. We've received mixed feedback on that feature though, and I'd be happy to see a comment on that as well.</p>",
        "id": 153897890,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1500882646
    },
    {
        "content": "<p>this I think is a typo:</p>",
        "id": 153897925,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500899543
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>with &quot;InpatientEncounters&quot; E such that ED.&quot;period&quot; ends 1 hour or less before start of E.&quot;period&quot;\n</pre></div>",
        "id": 153897926,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500899543
    },
    {
        "content": "<p>should be</p>",
        "id": 153897927,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500899548
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>with &quot;InpatientEncounters&quot; E such that ED.&quot;period&quot; ends 1 hours or less before start of E.&quot;period&quot;\n</pre></div>",
        "id": 153897928,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500899553
    },
    {
        "content": "<p>No, the language allows both plural and singular time durations.</p>",
        "id": 153897940,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1500905490
    },
    {
        "content": "<p>really? i just cannot find that in the antlr grammar</p>",
        "id": 153897947,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500910541
    },
    {
        "content": "<p>do you have to get that right with the value? 1 hour or 2 hours? or is 1 hours or 2 hour acceptable?</p>",
        "id": 153897948,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1500910867
    },
    {
        "content": "<p>It's in the quantity rule, which is in the imported fhirpath.g4. unit can be a dateTimePrecision, or a pluralDateTimePrecision, or a UCUM string.</p>",
        "id": 153897952,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1500917450
    },
    {
        "content": "<p>And no, it doesn't have to match with the value, <code>1 hours</code> and <code>2 hour</code> are both acceptable. It's a flexibility to enable authors to write the most natural phrasing, but doesn't have any impact on the semantics.</p>",
        "id": 153897954,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1500917493
    },
    {
        "content": "<p>Is there a way to check if a given RxNORM is part of a Value Set in CQL?  Basically, I would like to define a function that takes an RxNORM as a parameter and check if this RxNORM code is part of a value set (e.g. \"Opioid Medications\")?  Thanks very much for your help.</p>",
        "id": 250017329,
        "sender_full_name": "Tien Thai",
        "timestamp": 1629393574
    },
    {
        "content": "<p>Why do you want to do this in CQL? You  could use a terminology server like the Value Set Authority Center (VSAC) <a href=\"https://vsac.nlm.nih.gov/\">https://vsac.nlm.nih.gov/</a> which has an api to expand  valuesets into collections of  codes.</p>",
        "id": 250026787,
        "sender_full_name": "Michael Riley",
        "timestamp": 1629397465
    },
    {
        "content": "<p>Michael,<br>\nThank you very much for your response.  Can you please point me to such API as I could not find any API in the VSAC site? <br>\n The reason for this check is that we want to be able to tell if the given RxNORM is part of our specific value set and if it is return the name of the medication back to caller.</p>",
        "id": 250030256,
        "sender_full_name": "Tien Thai",
        "timestamp": 1629399010
    },
    {
        "content": "<p>CQL has terminology declarations to allow you to do this in CQL, but engage a terminology server to perform the actual check when the CQL is evaluated. See the <a href=\"https://cql.hl7.org/02-authorsguide.html#terminology\">Terminology</a> section of the author's guide for examples and discussion.</p>",
        "id": 250031131,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1629399389
    },
    {
        "content": "<p>Tien, sorry that front page link isn't very helpful is it? This is a more in depth documentation on how to use the FHIR Terminology Service that VSAC hosts. You have to sign up and get an api key, but you can expand valuesets there with an HTTP request, no CQL required. <a href=\"https://www.nlm.nih.gov/vsac/support/usingvsac/vsacfhirapi.html\">https://www.nlm.nih.gov/vsac/support/usingvsac/vsacfhirapi.html</a>. You can even use the $validate-code operation they provide to check if a specific code is in the valueset on a request, instead of parsing yourself.</p>",
        "id": 250148551,
        "sender_full_name": "Michael Riley",
        "timestamp": 1629480890
    }
]