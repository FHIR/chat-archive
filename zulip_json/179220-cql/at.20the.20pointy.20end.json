[
    {
        "content": "<div class=\"codehilite\"><pre> 22 //  system.interface.Retrieve({                                 \n 23 //    type: &quot;Observation&quot;,                                      \n 24 //    typeUri: &quot;http://hl7.org/fhir&quot;,                           \n 25 //    codeProperty: &#39;code&#39;,                                     \n 26 //    codes: priv[&#39;Systolic blood pressure&#39;](),                 \n 27 //    dateProperty: &#39;effectiveDateTime.value&#39;,                  \n 28 //    dateRange: ,                                              \n 29 //    patient: context.patient.id                               \n 30 //  })                                                          \n 31                                                                 \n 32   fhir.retrieve = function(params) {                            \n 33     var patients = params.patient_id                            \n 34       ? [params.patient_id] // wrap provided individual in []   \n 35       : all_test_patients // no patient provided so grab all    \n 36     // get array of resources                                   \n 37     return multiPatientResourceByType(patients, params.type)    \n 38     // apply the filter                                         \n 39     .then(function (resources) {                                \n 40       debug(&#39;resources&#39;, resources)                             \n 41       return _.filter(resources, function(r) {                  \n 42         return true // all for now                              \n 43       })                                                        \n 44     })                                                          \n 45   }                                                             \n</pre></div>",
        "id": 153834956,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1466911118
    },
    {
        "content": "<p>lines 22 are what a call from the compiled CQL will look like</p>",
        "id": 153834957,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1466911232
    },
    {
        "content": "<p>all I need to do now is apply the criteria given in lines 25-28 in a Boolean expression (to drop into line 42)</p>",
        "id": 153834958,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1466911360
    },
    {
        "content": "<p>mmmm actually looking at the testdata that gives me the format i should follow...</p>",
        "id": 153834960,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1466912028
    },
    {
        "content": "<div class=\"codehilite\"><pre> &quot;code&quot;:{                                         \n     &quot;coding&quot;:[{                                  \n             &quot;system&quot;:&quot;http://loinc.org&quot;,         \n             &quot;code&quot;:&quot;8310-5&quot;                      \n         }],                                      \n     &quot;text&quot;:&quot;Body Temperature&quot;                    \n },                                               \n &quot;subject&quot;:{&quot;reference&quot;:&quot;Patient/105738&quot;},        \n &quot;effectiveDateTime&quot;:&quot;2016-06-24T20:44:01+10:00&quot;,\n</pre></div>",
        "id": 153834961,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1466912040
    },
    {
        "content": "<p>mmm I guess I just look for an intersection between the code lists</p>",
        "id": 153834962,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1466918138
    },
    {
        "content": "<p>the range thing is more complex due to uncertainty and funky range specs within cql...</p>",
        "id": 153834963,
        "sender_full_name": "Erich Schulz",
        "timestamp": 1466918207
    }
]