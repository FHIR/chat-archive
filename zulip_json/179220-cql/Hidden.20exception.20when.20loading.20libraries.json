[
    {
        "content": "<p>So, I encountered a bit of an issue today... We're working on defining a new measure. Tried testing it against HAPI with cql_enabled. HAPI failed to load the library with the following stack trace:</p>\n<div class=\"codehilite\"><pre><span></span><code>ca.uhn.fhir.rest.server.exceptions.InternalErrorException: Failed to call access method: java.lang.IllegalArgumentException: Could not resolve primary library for Measure/NHSNBaseMeasure.\n    at ca.uhn.fhir.rest.server.method.BaseMethodBinding.invokeServerMethod(BaseMethodBinding.java:258)\n    at ca.uhn.fhir.rest.server.method.OperationMethodBinding.invokeServer(OperationMethodBinding.java:329)\n    at ca.uhn.fhir.rest.server.method.BaseResourceReturningMethodBinding.doInvokeServer(BaseResourceReturningMethodBinding.java:272)\n    at ca.uhn.fhir.rest.server.method.BaseResourceReturningMethodBinding.invokeServer(BaseResourceReturningMethodBinding.java:380)\n    at ca.uhn.fhir.rest.server.method.OperationMethodBinding.invokeServer(OperationMethodBinding.java:304)\n    at ca.uhn.fhir.rest.server.RestfulServer.handleRequest(RestfulServer.java:1084)\n    at ca.uhn.fhir.rest.server.RestfulServer.doGet(RestfulServer.java:380)\n    at ca.uhn.fhir.rest.server.RestfulServer.service(RestfulServer.java:1794)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:750)\n    at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)\n    at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)\n    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n    at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)\n    at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)\n    at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)\n    at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n    at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)\n    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)\n    at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)\n    at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)\n    at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)\n    at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)\n    at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)\n    at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)\n    at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)\n    at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)\n    at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)\n    at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)\n    at org.eclipse.jetty.server.Server.handle(Server.java:516)\n    at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)\n    at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)\n    at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)\n    at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:279)\n    at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)\n    at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)\n    at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)\n    at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:882)\n    at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1036)\n    at java.base/java.lang.Thread.run(Thread.java:830)\nCaused by: java.lang.reflect.InvocationTargetException: null\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.base/java.lang.reflect.Method.invoke(Method.java:567)\n    at ca.uhn.fhir.rest.server.method.BaseMethodBinding.invokeServerMethod(BaseMethodBinding.java:250)\n    ... 40 common frames omitted\nCaused by: java.lang.IllegalArgumentException: Could not resolve primary library for Measure/NHSNBaseMeasure.\n    at ca.uhn.fhir.cql.r4.helper.LibraryHelper.resolvePrimaryLibrary(LibraryHelper.java:216)\n    at ca.uhn.fhir.cql.r4.evaluation.MeasureEvaluationSeed.setup(MeasureEvaluationSeed.java:83)\n    at ca.uhn.fhir.cql.r4.provider.MeasureOperationsProvider.evaluateMeasure(MeasureOperationsProvider.java:95)\n    ... 45 common frames omitted\n2021-05-17 18:55:48.440 [qtp2016067912-73] INFO  fhirtest.access [LoggingInterceptor.java:160] ERROR - GET http://localhost:8080/fhir/Measure/NHSNBaseMeasure/$evaluate-measure\n</code></pre></div>\n<p>I couldn't find anything wrong with it. I thought it was made an issue with the Library.url or the <a href=\"http://Library.id\">Library.id</a>... But it wasn't. <br>\nAs it turned out, there were some issues with references to definitions in the CQL. I had to debug HAPI in order to figure it out:</p>\n<div class=\"codehilite\"><pre><span></span><code>NHSNBaseMeasure-0.0.001 [21:4, 21:58] Could not resolve identifier COVID_19 (Tests for SARS_CoV_2 Antigen) in the current library.\nNHSNBaseMeasure-0.0.001 [26:8, 26:27] Could not validate reference to expression COVID 19 CoV Tests because its definition contains errors.\nNHSNBaseMeasure-0.0.001 [38:3, 38:36] Could not validate reference to expression Encounter with COVID19 CoV Tests because its definition contains errors.\n</code></pre></div>\n<p>I uncovered this exception by stepping through the logic until I hit <code>PrivateCachingLibraryLoaderDecorator.load()</code>, where it catches an exception and simply returns <code>null</code> without writing out any logs about the exception.<br>\nAre there plans to improve this so that loading libraries with CQL provides more guidance as-to what the issues are when loading?</p>",
        "id": 239186841,
        "sender_full_name": "Sean McIlvenna",
        "timestamp": 1621303183
    },
    {
        "content": "<p>Hmm... Took a look at this and I'll have to think how to address it in a way that makes sense. The current logic assumes that some other component may be able to load the library from a different source (for example, an embedded FHIRHelpers vs one posted on the server) so that's why it ignores the error.</p>",
        "id": 239452828,
        "sender_full_name": "JP",
        "timestamp": 1621440616
    },
    {
        "content": "<p>But clearly if you get to the end of the chain and still weren't able to get a Library it'd be nice to see any errors along the way.</p>",
        "id": 239452900,
        "sender_full_name": "JP",
        "timestamp": 1621440648
    }
]