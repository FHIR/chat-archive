[
    {
        "content": "<p>Does CQL execute similar to SAS and SQL where it will go down records and execute code against every record? If I have a exists([retrieve] query) will the CQL run the exists for every record from the retrieve &amp; query and only return records that meet the query's criteria or will it just return one Boolean value?</p>",
        "id": 178540884,
        "sender_full_name": "Mohammad Afaq Khan",
        "timestamp": 1571482869
    },
    {
        "content": "<p>The result of <code>exists([retrieve] query)</code> will be a single boolean value, but it the exists will evaluate all the results of the retrieve. A pipelined execution could stop an exists as soon as it saw one record, but that would be an optimization of the engine.</p>",
        "id": 178541239,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1571483415
    },
    {
        "content": "<p>Ok thank you for the explanation. I know in some languages each record is evaluated against the code but thats not the case in CQL.</p>",
        "id": 178543297,
        "sender_full_name": "Mohammad Afaq Khan",
        "timestamp": 1571486781
    },
    {
        "content": "<p>Right.  If you see something like <code>exists</code> that takes a <code>List</code> as its argument, the general expectation is that the function operates on the entire list.  How it does so is up to the implementor, however. I think the only place where you're definitely evaluating records one at a time is in the body of the query itself (i.e., <code>such that...</code>, <code>where...</code>, <code>return ...</code>, etc).</p>",
        "id": 178651276,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1571662081
    },
    {
        "content": "<p>If you use the exists() on a List it will still just return true or false, correct? It will operate on the entire List but if it finds any elements it returns true. Let's say the first object in the list is there exists() will return true?</p>",
        "id": 178664097,
        "sender_full_name": "Mohammad Afaq Khan",
        "timestamp": 1571670404
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 178664655,
        "sender_full_name": "Mohammad Afaq Khan",
        "timestamp": 1571670717
    },
    {
        "content": "<p>The author documentation describes it as the opposite of an empty, so if the collection contains an object or record it should return true</p>",
        "id": 178665002,
        "sender_full_name": "Mohammad Afaq Khan",
        "timestamp": 1571670876
    },
    {
        "content": "<p>I think I finally understand even if it contains a null it returns true as long as it isn't empty?</p>",
        "id": 178666013,
        "sender_full_name": "Mohammad Afaq Khan",
        "timestamp": 1571671552
    },
    {
        "content": "<p>I think you've got it mostly right except that last bit.  According to <a href=\"https://cql.hl7.org/09-b-cqlreference.html#exists\" target=\"_blank\" title=\"https://cql.hl7.org/09-b-cqlreference.html#exists\">https://cql.hl7.org/09-b-cqlreference.html#exists</a>,</p>\n<blockquote>\n<p>The exists operator returns true if the list contains any non-null elements.</p>\n</blockquote>\n<p>So if you had a list with <em>only</em> <code>null</code>, then exists would return <code>false</code>.  IIRC, this wasn't always the case, but recent versions of CQL clarified it to be so.</p>",
        "id": 178669163,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1571673396
    },
    {
        "content": "<blockquote>\n<p>I think you've got it mostly right except that last bit.  According to <a href=\"https://cql.hl7.org/09-b-cqlreference.html#exists\" target=\"_blank\" title=\"https://cql.hl7.org/09-b-cqlreference.html#exists\">https://cql.hl7.org/09-b-cqlreference.html#exists</a>,</p>\n<blockquote>\n<p>The exists operator returns true if the list contains any non-null elements.</p>\n</blockquote>\n<p>So if you had a list with <em>only</em> <code>null</code>, then exists would return <code>false</code>.  IIRC, this wasn't always the case, but recent versions of CQL clarified it to be so.</p>\n</blockquote>\n<p>Oh really <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> . Please have a look at <a href=\"http://www.hl7.org/dstucomments/showdetail_comment.cfm?commentid=1875\" target=\"_blank\" title=\"http://www.hl7.org/dstucomments/showdetail_comment.cfm?commentid=1875\">http://www.hl7.org/dstucomments/showdetail_comment.cfm?commentid=1875</a> and <a href=\"https://github.com/HL7/cql/issues/52\" target=\"_blank\" title=\"https://github.com/HL7/cql/issues/52\">https://github.com/HL7/cql/issues/52</a>.</p>",
        "id": 178674498,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1571676828
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"197470\">@Alexander Kiel</span> -- TBH, I had to look it up myself because I couldn't remember which way it went.  But... it does appear that what I said above is true.  Looking at CQL version history, this was changed in CQL 1.3.0 in response to this comment: <a href=\"http://www.hl7.org/dstucomments/showdetail_comment.cfm?commentid=1435\" target=\"_blank\" title=\"http://www.hl7.org/dstucomments/showdetail_comment.cfm?commentid=1435\">http://www.hl7.org/dstucomments/showdetail_comment.cfm?commentid=1435</a></p>",
        "id": 178678195,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1571679226
    },
    {
        "content": "<p>Is there any provision in CQL for associating a library with a canonical URL for that library? I</p>",
        "id": 178693119,
        "sender_full_name": "Jerry Goodnough",
        "timestamp": 1571688499
    },
    {
        "content": "<p>The <a href=\"https://cql.hl7.org/examples/Example.RelatedContextRetrieve-0.1.0.xml\" target=\"_blank\" title=\"https://cql.hl7.org/examples/Example.RelatedContextRetrieve-0.1.0.xml\">Mother Infant Measure</a> example shows how to do this</p>",
        "id": 178697415,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1571691110
    },
    {
        "content": "<p>Basically, we use the \"system\" element of the versioned identifier of the library.</p>",
        "id": 178697482,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1571691144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> Thanks for the clarification.</p>",
        "id": 178752296,
        "sender_full_name": "Alexander Kiel",
        "timestamp": 1571748885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> Thanks... I see it in the elm.xml, but there does not appear to be an equivalent in the CQL representation. Am I blind and missing something?</p>",
        "id": 178776941,
        "sender_full_name": "Jerry Goodnough",
        "timestamp": 1571765402
    },
    {
        "content": "<p>You're right Jerry, it's not in the CQL, since it's actually defined outside the context of any particular library. The use in ELM is only a reference and needs to be provided external to the CQL library. The plan is to have it be a parameter to the translator, but that feature isn't yet part of the translator.</p>",
        "id": 178778059,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1571766084
    },
    {
        "content": "<p>So does it make sense to  extend the syntax of the definition to include and optional custodian clause that is followed by a URL?</p>",
        "id": 178807297,
        "sender_full_name": "Jerry Goodnough",
        "timestamp": 1571785584
    },
    {
        "content": "<p>Well, the reason we didn't is because it's not defined per library, it's above the libraries, so we didn't want the possibility of the same namespace having different URLs in different libraries.</p>",
        "id": 178821123,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1571804007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>  Thanks - Is there a clear place besides here that I should note inconsistencies in the 1.4.1 spec?</p>",
        "id": 178866717,
        "sender_full_name": "Jerry Goodnough",
        "timestamp": 1571845350
    },
    {
        "content": "<p>Yes, you can submit STU comments to the specification here: <a href=\"http://www.hl7.org/dstucomments/showdetail.cfm?dstuid=264\" target=\"_blank\" title=\"http://www.hl7.org/dstucomments/showdetail.cfm?dstuid=264\">http://www.hl7.org/dstucomments/showdetail.cfm?dstuid=264</a></p>",
        "id": 178866811,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1571845428
    },
    {
        "content": "<p>(Which is linked through the \"Propose a change\" link in the footer of the spec, but not directly, you have to click through the View STU).</p>",
        "id": 178866934,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1571845469
    },
    {
        "content": "<p>Hi ,<br>\ni want to test cqf-ruler-0.1.13-SNAPSHOT.jar with hapi-fhir-3.8 , to test $evaluate-measure<br>\nbut it's not working with example given by hspc in there documentation<br>\nanybody know about where i will get example related to $evaluate-measure, $apply, cds-hooks etc...<br>\nThank you in advance.</p>",
        "id": 178942327,
        "sender_full_name": "Saoji Adhe",
        "timestamp": 1571916512
    },
    {
        "content": "<p>How can someone access the same patient for a procedure in QDM? I know FHIR has procedure.subject but what about QDM?</p>",
        "id": 179353806,
        "sender_full_name": "Mohammad Afaq Khan",
        "timestamp": 1572370759
    },
    {
        "content": "<p>In the <code>Patient</code> context, all the data accessed is related to the current patient in context.</p>",
        "id": 179354229,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1572371005
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span></p>",
        "id": 179424955,
        "sender_full_name": "Mohammad Afaq Khan",
        "timestamp": 1572437536
    },
    {
        "content": "<p>So in FHIR the procedure.subject helps to further reference/access the Patient Identifier?</p>",
        "id": 179425053,
        "sender_full_name": "Mohammad Afaq Khan",
        "timestamp": 1572437629
    },
    {
        "content": "<p>In the patient context, the procedure.subject would be expected to match the current patient context, yes.</p>",
        "id": 179631805,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1572619499
    }
]