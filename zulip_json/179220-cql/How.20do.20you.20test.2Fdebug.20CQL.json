[
    {
        "content": "<p>How do you test CQL rules and debug them when they might not work as expected?</p>\n<p>I'm trying to use Atom with the cqf-language (2.9.2) plugin and when it doesn't work as expected there doesn't seem to be much information to help troubleshoot the (CQL rule) problem.   Also, it appears to use a different version of the cql execution engine from that used by cqf-ruler (from the <a href=\"https://github.com/cqframework/clinical_quality_language\">https://github.com/cqframework/clinical_quality_language</a> package)?   For example, a FHIRpath syntax of Patient.name.given[0] works with cqf ruler but not with Atom and the cqf-language plugin.  (it returns 'string' with the plugin).   How can the version of the cql execution engine used by cqf-language plugin be determined?</p>\n<p>Thanks</p>",
        "id": 236919897,
        "sender_full_name": "John Silva",
        "timestamp": 1619827968
    },
    {
        "content": "<p>Hello John.</p>\n<p>There is documentation for part of your question: <a href=\"https://atom.io/packages/language-cql\">https://atom.io/packages/language-cql</a>.  Specifically, in the  \"Using the CQL support in Atom\" section, where it describes the folder structure requirements for testing.</p>\n<p>Yes, the documentation could use some love... :)  And as you go through this process, you are welcome (even encouraged) to update it!</p>\n<p>Basically, the process for creating/running tests is:</p>\n<ul>\n<li>create test data as FHIR Resource files (as described in the section above)</li>\n<li>execute the CQL file</li>\n<li>check the resulting output for expected results/errors</li>\n</ul>\n<p>More sophisticated debugging features are in the works, but, for now, the debugging process is entirely manual.  I.e., write CQL that isolates the thing you're trying to test and do the above to check it (or more specifically, comment things until you figure out what's broken).</p>\n<p>As far as the versions of the cql execution engine go, I know there is work underway to better keep those in lock-step.  I'm not sure of the ETA on that though.  <span class=\"user-mention\" data-user-id=\"194178\">@JP</span> ?</p>",
        "id": 236968516,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1619877225
    },
    {
        "content": "<p>Also, there are working examples of functioning test implementations, if that helps.  If you clone these repos you should be able to open the root folder in Atom, open a CQL file, Execute the CQL, and run the tests.</p>\n<ul>\n<li><a href=\"https://github.com/cqframework/ecqm-content-r4\">https://github.com/cqframework/ecqm-content-r4</a> (looks like only CervicalCancerScreening has tests... and they both seem to be returning false for InitialPopulation atm so I'm guessing it's a work in progress, but it still demonstrates the idea)</li>\n<li><a href=\"https://github.com/DBCG/connectathon\">https://github.com/DBCG/connectathon</a> <br>\n     - open Atom at the fhir401 folder level, since this repo actually contains multiple IGs (by FHIR version)<br>\n     - I specifically tried EXM125-7.3.000.cql  and it returns expected results, but I think they all should (or at least most of them should).</li>\n</ul>",
        "id": 236969265,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1619877899
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"217210\">@Rob Reynolds</span> <br>\n Yes, I've already followed the setup steps (even wrote a script to copy our test FHIR resources into the directory structure it expects).  The problem is that when things fail there's not really much help as to why the CQL logic failed.    For example, in one case we use a FHIRpath (like?) expression for Patient.name.given(0) -- which works with cqf-ruler (from cqfframework Github package) but doesn't with cql-language plugin in Atom.   It' doesn't give an error but returns 'string' instead of the actual value.  (was able to get this to work by adding ...given(0).value).  It's problematic (at least for me) trying to figure out how to access properties of a selected resource(s); typically the cql-language just errors out with Java NullException errors!  It's also not clear which version of the cql execution engine cql-language plugin is using -- maybe it's a version difference between what is used in the cqframework package but I can't tell.)</p>\n<p>(yes, right now I've been using the code-test-change code-test again method.  It's somewhat tedious and not very deterministic.   Also, the FHIR CQL pages do not seem to have (m)any examples of data access when a rule evaluates to true; it seems like most of the examples are of rules that evaluate to true/false as the only 'return value'.)</p>",
        "id": 237153048,
        "sender_full_name": "John Silva",
        "timestamp": 1620044905
    },
    {
        "content": "<p>Hi John!</p>\n<p>The versions of the CQL tooling being used by the Atom plugin are usually recorded in the change log when a new version is released. The cqf-ruler currently doesn't expose that information anywhere so it's difficult to compare, and it is indeed out of date.</p>\n<p>As far as using <code>Patient.name.given[0]</code>, what was the context of the use in the cqf-ruler? The type of <code>Patient.name.given[0]</code> is actually a FHIR String (as opposed to CQL String) which is a complex type which may have an id, extensions, and so on. The <code>.value</code> gets the simple string value contained within that more complex type. So the \"string\" return value you're seeing with just <code>Patient.name.given[0]</code> is correct in the sense that the element of that object isn't specified.</p>\n<p>Because it's a pain to use <code>.value</code> everywhere, it's common to include the FHIRHelpers library which includes a few functions that automatically convert the FHIR types. It doesn't work in every context, but it does work in many of them. Here's a link that describes a bit more about what it does and why you need <code>.value</code> in some places:</p>\n<p><a href=\"http://build.fhir.org/ig/cqframework/cqf/#fhir-helpers\">http://build.fhir.org/ig/cqframework/cqf/#fhir-helpers</a></p>",
        "id": 237187825,
        "sender_full_name": "JP",
        "timestamp": 1620058842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194178\">@JP</span>  Thanks!   That makes sense -- didn't know there's a difference between CQL String and FHIR String (new to this CQL as you can tell).<br>\nUsing the .value should be what we want and that seems to work in both cqf-framework plugin and the version of cqf-ruler that we're using.</p>\n<p>Yes, it's hard to determine (or specify) which version of the 'cql execution engine' (if there's such a thing) is being used in either of these packages and so these version differences 'bite you in the tails' ;-)</p>\n<p>We do already include the FHIRHelpers in our CQL.</p>",
        "id": 237209711,
        "sender_full_name": "John Silva",
        "timestamp": 1620067641
    },
    {
        "content": "<p>If you're including FHIRHelpers in both, I'm confused why you're seeing a difference in the need to use .value between the lanaguage-cql plugin and CQFRuler.  I wouldn't expect that.</p>\n<p><span class=\"user-mention\" data-user-id=\"194178\">@JP</span>  probably has a good reason though.  :)</p>",
        "id": 237329076,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1620136768
    },
    {
        "content": "<p>Yeh, I don't know why but the data doesn't show the same in the plugin and cqf-ruler unless I add the .value (almost) everywhere!    I'm guessing it has to do with the different versions of the CQL execution engine used by these.</p>",
        "id": 237370843,
        "sender_full_name": "John Silva",
        "timestamp": 1620151007
    },
    {
        "content": "<p>Hi John,</p>\n<p>I actually need more detail about what you're doing to give any more insight about the difference. It's not the case that the cqf-ruler just runs the CQL in the same way the Atom plugin does. There's an additional layer of processing depending on the specific operation of the cqf-ruler you're using. So it's entirely possible for both of those tools to use the same version of the cql-engine, give different answers, and for that to be correct in both cases. For example, Measure processing is more complex than simply executing the <code>Denominator</code> or <code>Numerator</code> definitions in some CQL.</p>",
        "id": 237378846,
        "sender_full_name": "JP",
        "timestamp": 1620154118
    },
    {
        "content": "<p>IOW, it <em>may</em> be the case that the difference is due to different versions of the cql-engine. It <em>may</em> be the case that the difference is simply due to the specified behavior of the operations. It also <em>may</em> be the case that there's a bug in one or both of the tools. It's <em>not</em> the case that Atom and cqf-ruler will always return exactly the same thing for every definition in the CQL. For example, the Library $evaluate operation automatically casts CQL types to FHIR types (and that's required by the spec for Library $evaluate).</p>",
        "id": 237379491,
        "sender_full_name": "JP",
        "timestamp": 1620154395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194178\">@JP</span>  - Thanks for the follow-up.   Yes, I don't know what is running 'under the covers' but there are definitely differences in behavior from cqf-ruler and the cql-language plugin.   I think what you just pointed out is one of the differences -- Library $evaluate casting CQL types to FHIR types so all the places I have to add .value to get the textual values to show up in the plugin \"just work\" in cqf-ruler probably because of this casting!</p>\n<p>Here's another interesting one but I'll open a separate topic about it.   What/how does CQL match the Patient context for Coverage?</p>",
        "id": 237404847,
        "sender_full_name": "John Silva",
        "timestamp": 1620164414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298707\">@John Silva</span> - Sorry, I've not been clear. I'm looking for the specific operations you're invoking on the ruler so I can help determine what might be happening. Are you using the <code>$cql</code> operation? The Library <code>$evaluate</code> operation? The Measure <code>$evaluate-measure</code> operation? Those are all specified differently so I can't help make the determination if there's an issue with the results unless I know which you are using. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 237406241,
        "sender_full_name": "JP",
        "timestamp": 1620165102
    },
    {
        "content": "<p>We're only using $evaluate with the ruler:</p>\n<p><code>${HOST}/Library/${i.resource.id}/$evaluate</code></p>\n<p>We use the latest cqf-ruler from contentgroup/cqf-ruler.  (latest as of about 3 weeks ago)</p>",
        "id": 237427653,
        "sender_full_name": "John Silva",
        "timestamp": 1620178267
    }
]