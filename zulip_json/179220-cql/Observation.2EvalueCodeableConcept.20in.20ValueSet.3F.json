[
    {
        "content": "<p>Trying to do the following:</p>\n<p><code>define \"matchingObservations\":\n  exists ([Observation: \"MyValueSet1\"] Obs\n    where Obs.valueCodeableConcept in MyValueSet2\n  )\n</code><br>\nThe idea is that first need to filter possible Observations that have Observation.code in the MyValueSet1 and then filter by only those that have the Observation.valueCodeableConcept in MyValueSet2.    This syntax doesn't seem to be allowed (using Atom CQL plugin).   If I use this syntax it is allowed but doesn't work (with CQL Framework)</p>\n<p><code>define \"matchingObservations\":\n  exists ([Observation: \"MyValueSet1\"] Obs\n    where Obs.value in MyValueSet2\n  )\n</code><br>\nAny pointers?   I saw a Github thread about this (<a href=\"https://github.com/cqframework/clinical_quality_language/issues/564\">https://github.com/cqframework/clinical_quality_language/issues/564</a> ); does this just not work in CQL Framework yet?</p>\n<p>Update: I was able to get it to work by adding 'as CodeableConcept'</p>\n<p><code>define \"matchingObservations\":\n  exists ([Observation: \"MyValueSet1\"] Obs\n    where Obs.value as CodeableConcept in MyValueSet2\n  )\n</code></p>\n<p>Now I'm onto the next step -- retrieving a value (string) from this Observation.   Not sure how to do this:</p>\n<p><code>define \"myBodySite\":\n  exists ([Observation: \"MyValueSet1\"] Obs\n    where Obs.value as CodeableConcept in MyValueSet2\n    return Obs.bodySite.text\n  )\n</code></p>",
        "id": 236524237,
        "sender_full_name": "John Silva",
        "timestamp": 1619622560
    },
    {
        "content": "<p>exists returns a boolean.</p>\n<div class=\"codehilite\"><pre><span></span><code>define &quot;myBodySite&quot;:\n  [Observation: &quot;MyValueSet1&quot;] Obs\n    where Obs.value as CodeableConcept in MyValueSet2\n    return Obs.bodySite.text\n</code></pre></div>",
        "id": 236756399,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1619734929
    },
    {
        "content": "<p>But, that returns a list of strings.  Not sure if that's what you want.</p>\n<div class=\"codehilite\"><pre><span></span><code>define &quot;myBodySite&quot;:\n  Last(\n    [Observation: &quot;MyValueSet1&quot;] Obs\n      where Obs.value as CodeableConcept in &quot;MyValueSet2&quot;\n      sort by effective\n  ).bodySite.text\n</code></pre></div>\n<p>?</p>",
        "id": 236757293,
        "sender_full_name": "Rob Reynolds",
        "timestamp": 1619735486
    }
]