[
    {
        "content": "<p>Hello guys. I would appreciate any help to understand how cql works in Atom. </p>\n<ol>\n<li>I have downloaded Atom and installed the language-cql package, Java 1.8 as required <a href=\"https://github.com/cqframework/atom_cql_support\">here</a></li>\n<li>Next, the documentation <a href=\"https://github.com/cqframework/atom_cql_support#using-the-cql-support-in-atom\">says</a> that I need to open any .cql file and have  the following directories:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>input/cql\ninput/tests\ninput/tests/&lt;cql-library-name&gt;\ninput/tests/&lt;cql-library-name&gt;/&lt;patient-id&gt;\ninput/tests/&lt;cql-library-name&gt;/&lt;patient-id&gt;/&lt;resource-type-name&gt;/&lt;resource files&gt;\ninput/vocabulary/codesystem\ninput/vocabulary/valueset\n</code></pre></div>\n<p>I am trying to understand how it works but I don't know where I can take the files from? resource files, codesystem, valueset and the .cql itself. </p>\n<p>I am guessing I can get resource files form a <a href=\"http://hapi.fhir.org/\">HAPI FHIR server</a>, but I need help on how to...</p>\n<ol>\n<li>Using [base]/Patient/[id]/$everything request ? but what if I have a 1 000 000 000 Patients ?</li>\n<li>Or using <a href=\"https://github.com/smart-on-fhir/sample-apps-stu3/tree/master/fhir-downloader\">fhir-downloader</a></li>\n</ol>\n<p>Is there a git repo starter or something to help?</p>",
        "id": 223876323,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1611569266
    },
    {
        "content": "<p>The Connectathon repository is the most up-to-date I think. Open the fhir401 folder as the root folder. You should then be able to execute an open CQL file with F5. There a sample resources that are already in the appropriate directory structure as well.</p>\n<p><a href=\"https://github.com/DBCG/connectathon/tree/master/fhir401\">https://github.com/DBCG/connectathon/tree/master/fhir401</a></p>",
        "id": 223949670,
        "sender_full_name": "JP",
        "timestamp": 1611603876
    },
    {
        "content": "<p>Hi folks. May I as what is the flexibility around the folder structure required for the Atom CQL runner? I see different examples of folder/file structures (I prefer the IG approach):</p>\n<ul>\n<li>/tests in cqframework/atom_cql_support: /tests/cql/&lt;FHIR Version&gt;</li>\n<li>DBCG/connectathon: nests cql folder under page <code>/input/pagecontent</code> while resources are ../</li>\n<li>framework/content-ig-walkthrough: as specified by the runner except that resource type folders are not used.</li>\n<li>cqframework/CQL-Formatting-and-Usage-Wiki (Cooking with FHIR examples): Every resource in one folder.</li>\n</ul>",
        "id": 224518395,
        "sender_full_name": "Richard Stanley",
        "timestamp": 1611946918
    },
    {
        "content": "<p>I still can't figure out how it works.</p>",
        "id": 224572526,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1611994454
    },
    {
        "content": "<p>The Atom plugin supports a variety of folder setups because we have evolved the best-practice over time but tried to maintain backwards compatibility to avoid forcing changes on existing IGs. The current best-practice is consistent with the IG layout and is described in the Atom Plugin Repository readme here: <a href=\"https://github.com/cqframework/atom_cql_support/blob/master/README.md#using-the-cql-support-in-atom\">https://github.com/cqframework/atom_cql_support/blob/master/README.md#using-the-cql-support-in-atom</a></p>",
        "id": 224594127,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1612025675
    },
    {
        "content": "<p>Specifically, the resources in each test case can be organized into folders for each resource type, or they can all be included in the same folder. We've also added support for providing the resources as bundles (including nested bundles). Basically, when evaluating, for each test case, the evaluator will attempt to load every .xml or .json file in the test case folder and any sub-folders, recursively. If the resource is a Bundle, the resources in the bundle are loaded, recursively.</p>",
        "id": 224594214,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1612025842
    },
    {
        "content": "<p>Hopefully that helps?</p>",
        "id": 224594215,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1612025845
    },
    {
        "content": "<p>Perfect, thanks. That helps a lot.</p>",
        "id": 224600136,
        "sender_full_name": "Richard Stanley",
        "timestamp": 1612033897
    },
    {
        "content": "<p>How would you generate the JSON files that go under the input/vocabulary/codesystem and input/vocabulary/valueset folders?  Thank you.<br>\nTT</p>",
        "id": 225711883,
        "sender_full_name": "Tien Thai",
        "timestamp": 1612886567
    },
    {
        "content": "<p>Hi Tien,</p>\n<p>The files that are under the <code>input/vocabulary</code> folders are standard FHIR ValueSet and CodeSystem resources and they can be XML or JSON. Depending on the source of your terminology you have several options for creating those files. Using a FHIR terminology server like Apelon you can simply download the FHIR resources from the server after you've authored them. If you're using ValueSets from VSAC the cqf-tooling has a operation that will convert the spreadsheets into ValueSets:</p>\n<p><a href=\"https://github.com/cqframework/cqf-tooling/blob/master/src/main/java/org/opencds/cqf/tooling/Main.java#L32\">https://github.com/cqframework/cqf-tooling/blob/master/src/main/java/org/opencds/cqf/tooling/Main.java#L32</a></p>\n<p>If you're creating some simple terminology for test cases it's easiest to just hand-code the resources.  I've also had success using FSH and SUSHI. There are some examples you can use as a pattern to start with here:</p>\n<p><a href=\"https://www.hl7.org/fhir/valueset-example.json.html\">https://www.hl7.org/fhir/valueset-example.json.html</a></p>\n<p>As well as more complete \"real world\" examples in the opioid-cds and connectathon IGs:</p>\n<p><a href=\"https://github.com/cqframework/opioid-cds-r4/tree/master/input/vocabulary/valueset\">https://github.com/cqframework/opioid-cds-r4/tree/master/input/vocabulary/valueset</a></p>\n<p><a href=\"https://github.com/DBCG/connectathon/tree/master/fhir401/input/vocabulary/valueset\">https://github.com/DBCG/connectathon/tree/master/fhir401/input/vocabulary/valueset</a></p>",
        "id": 225726376,
        "sender_full_name": "JP",
        "timestamp": 1612891955
    },
    {
        "content": "<p>@JP, thanks so much for your helpful info.<br>\nTT</p>",
        "id": 225737864,
        "sender_full_name": "Tien Thai",
        "timestamp": 1612896455
    },
    {
        "content": "<p>hi JP,<br>\nAre you familiar with the following error?  Thank you.</p>\n<hr>\n<p>Unknown lifecycle phase \".args=-VsacXlsxToValueSet -pts=ep_ec_eh_unique_vs_20190510.xlsx\". You must specify a valid lifecycle phase or a goal in the format &lt;plugin-prefix&gt;:&lt;goal&gt; or &lt;plugin-group-id&gt;:&lt;plugin-artifact-id&gt;[:&lt;plugin-version&gt;]:&lt;goal&gt;. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clean, pre-site, site, post-site, site-deploy.</p>",
        "id": 225753566,
        "sender_full_name": "Tien Thai",
        "timestamp": 1612903055
    },
    {
        "content": "<p>Easiest thing to do is <code>mvn package</code>. You then have a jar you can execute:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>java -jar ./target/tooling-1.3.1-SNAPSHOT-jar-with-dependencies.jar -VsacXlsxToValueSet -pts<span class=\"o\">=</span> ep_ec_eh_unique_vs_20190510.xlsx -op<span class=\"o\">=</span>./valuesets -e<span class=\"o\">=</span>json\n</code></pre></div>",
        "id": 225765996,
        "sender_full_name": "JP",
        "timestamp": 1612908887
    },
    {
        "content": "<p>There's also a batch mode:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>java -jar ./target/tooling-1.3.1-SNAPSHOT-jar-with-dependencies.jar -VsacXlsxToValueSetBatch -ptsd<span class=\"o\">=</span>./spreadsheets -burl<span class=\"o\">=</span><span class=\"s2\">\"http://cts.nlm.nih.gov/fhir/ValueSet/\"</span> -setname<span class=\"o\">=</span><span class=\"nb\">true</span>\n</code></pre></div>",
        "id": 225766251,
        "sender_full_name": "JP",
        "timestamp": 1612908976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"194178\">JP</span> <a href=\"#narrow/stream/179220-cql/topic/cql.20in.20atom.20for.20beginners/near/223949670\">said</a>:</p>\n<blockquote>\n<p>The Connectathon repository is the most up-to-date I think. Open the fhir401 folder as the root folder. You should then be able to execute an open CQL file with F5. There a sample resources that are already in the appropriate directory structure as well.</p>\n<p><a href=\"https://github.com/DBCG/connectathon/tree/master/fhir401\">https://github.com/DBCG/connectathon/tree/master/fhir401</a></p>\n</blockquote>\n<p>Thanks! Finally I got it up and running. I just have executed  <code>fhir401/input/pagecontent/cql/EXM74-10.2.000.cql</code> file. <br>\nCan I ask you if it possible to translate <code>EXM74-10.2.000.cql</code> to ELM within Atom and the cql package or any other ways?<br>\nI have tried <a href=\"https://github.com/cqframework/cql-translation-service\">cql-translation-service</a> but it gives me an error:<br>\n<code>\"Could not load source for library MATGlobalCommonFunctions, version 5.0.000.\"</code><br>\n<a href=\"/user_uploads/10155/WuZrjdGQCRhLTYfzexQkWz8V/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/WuZrjdGQCRhLTYfzexQkWz8V/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/WuZrjdGQCRhLTYfzexQkWz8V/image.png\"></a></div>",
        "id": 227091928,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1613827888
    },
    {
        "content": "<p>I am trying to repeat the experiment (EXM74-10.2.000.cql) with <code>cql-exec-fhir</code> and <code>cql-exec-vsac</code> libraries, at this point I got stuck on translating cql to elm.</p>",
        "id": 227092134,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1613828112
    },
    {
        "content": "<blockquote>\n<p>Can I ask you if it possible to translate EXM74-10.2.000.cql to ELM within Atom and the cql package or any other ways?</p>\n</blockquote>\n<p>Yes, do can do a \"default\" (i.e. you can't set any special translator options) by right-clicking in an open CQL file and selecting CQL -&gt; View ELM. It's not meant for embedding into a Library resource or anything but it's a quick way to see what ELM would be generated.</p>\n<p>The IG Publisher and the cqf-tooling both provide ways to embed ELM into a FHIR Library resource as part of an IG if that's your end goal.</p>\n<p>I believe the cql-translation-service supports translating that file, but you have to do a \"multi-part\" request to upload all the required libraries from the <code>cql</code> directory:</p>\n<p><a href=\"https://github.com/cqframework/cql-translation-service#multipart-request\">https://github.com/cqframework/cql-translation-service#multipart-request</a></p>\n<p>If you just looking to translate a bunch of CQL in a directory to ELM, you can use the cql-to-elm translator command line. That's here:</p>\n<p><a href=\"https://github.com/cqframework/clinical_quality_language/tree/master/Src/java#generate-an-elm-representation-of-cql-logic\">https://github.com/cqframework/clinical_quality_language/tree/master/Src/java#generate-an-elm-representation-of-cql-logic</a></p>\n<p>FWIW, the next to-be-released version of the Atom plugin has some basic support for the some of the cqf-tooling operations to make this sort of thing easier.</p>",
        "id": 227104148,
        "sender_full_name": "JP",
        "timestamp": 1613840669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194178\">@JP</span> Thanks! I am going to try cql-to-elm cli!</p>",
        "id": 227237297,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1613985012
    },
    {
        "content": "<p>New to the board... hello everyone. Are there some troubleshooting steps to get the atom plugin working? I've installed it on two different machines, one MacOS11 and one Windows10. Both show it is installed, and I have the correct java versions installed. I get syntax highlighting but no option to Run the CQL. I suspect some dependency is not being met but I can't tell which one(s).</p>",
        "id": 227445763,
        "sender_full_name": "David Yak",
        "timestamp": 1614093111
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"390680\">@David Yak</span> the CQL file must be open and have focus, then right-click and down at about the very bottom should be a menu item for CQL.</p>",
        "id": 227450959,
        "sender_full_name": "Richard Stanley",
        "timestamp": 1614095108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"390680\">@David Yak</span> </p>\n<ol>\n<li>clone this repo <a href=\"https://github.com/DBCG/connectathon\">https://github.com/DBCG/connectathon</a></li>\n<li>open <code>fhir401</code> folder in Atom</li>\n<li>then open <code>input\\pagecontent\\cql\\EXM74-10.2.000.cql</code> file and finally press on F5</li>\n</ol>",
        "id": 227453770,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614096027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"390680\">@David Yak</span> <br>\nAlso make sure <a href=\"https://github.com/cqframework/atom_cql_support\">language-cql</a> library is installed in Atom <br>\nHope it helps<br>\n<a href=\"https://github.com/cqframework/CQL-Formatting-and-Usage-Wiki/wiki/Developers-Introduction-to-CQL\">https://github.com/cqframework/CQL-Formatting-and-Usage-Wiki/wiki/Developers-Introduction-to-CQL</a></p>",
        "id": 227454658,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614096187
    },
    {
        "content": "<p>I appreciate the responses. Vasyl when I open that particular cql file I do now see the CQL choice at the bottom of my right-click menu. However View ELM is the only choice. F5 does nothing. Screen shot attached. Yak</p>\n<p><a href=\"/user_uploads/10155/6qttksTlaWJGhTbkhOZ1Ak9R/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/6qttksTlaWJGhTbkhOZ1Ak9R/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/6qttksTlaWJGhTbkhOZ1Ak9R/image.png\"></a></div>",
        "id": 227462344,
        "sender_full_name": "David Yak",
        "timestamp": 1614098652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"390680\">@David Yak</span> Can you please also make sure that <code>language-cql</code> is installed? <br>\n<a href=\"/user_uploads/10155/k8KsesZ6XIFnu2L9O7v_Yilp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/k8KsesZ6XIFnu2L9O7v_Yilp/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/k8KsesZ6XIFnu2L9O7v_Yilp/image.png\"></a></div>",
        "id": 227468922,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614101071
    },
    {
        "content": "<p>Sorry if it doesn't help. I don't remember how I did. I was fighting with Atom for a few days before it started working.</p>",
        "id": 227469357,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614101236
    },
    {
        "content": "<p>Probably - Atom, Java, language-cql, that's whole the recipe</p>",
        "id": 227469490,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614101286
    },
    {
        "content": "<p>I think I've got the right stuff.  Screen shot plus java version:</p>\n<p>% java --version<br>\nopenjdk 15.0.1 2020-10-20<br>\nOpenJDK Runtime Environment (build 15.0.1+9)<br>\nOpenJDK 64-Bit Server VM (build 15.0.1+9, mixed mode, sharing)</p>\n<p><a href=\"/user_uploads/10155/q-2TmrNcDb8L9OtxwMJEu3Lz/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/q-2TmrNcDb8L9OtxwMJEu3Lz/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/q-2TmrNcDb8L9OtxwMJEu3Lz/image.png\"></a></div>",
        "id": 227475978,
        "sender_full_name": "David Yak",
        "timestamp": 1614103615
    },
    {
        "content": "<p>On Windows 10<br>\n<a href=\"/user_uploads/10155/UXtb6ciEU1pFbr3ZhFEbNuux/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/UXtb6ciEU1pFbr3ZhFEbNuux/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/UXtb6ciEU1pFbr3ZhFEbNuux/image.png\"></a></div>",
        "id": 227487979,
        "sender_full_name": "Vasyl Herman",
        "timestamp": 1614108030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"390680\">@David Yak</span> -- I don't think the Java components of the plugin have been developed or tested against Java 15.  I thought JDK 11 (LTS) was required, but it looks like <span class=\"user-mention\" data-user-id=\"376706\">@Vasyl Herman</span> has it working w/ JDK 8 -- so probably try one of those.</p>",
        "id": 227488683,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614108327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"390680\">@David Yak</span> is the JAR file (which should be automagically downloaded by the plugin) in place? On *nix, <code>ls ~/.atom/packages/language-cql/server</code> and it should be there</p>",
        "id": 227490585,
        "sender_full_name": "Richard Stanley",
        "timestamp": 1614109084
    },
    {
        "content": "<p>I am starting to think this is a java version issue. I'm going to load jenv so I can manage which java is in effect. Answer to above question is yes:</p>\n<p>% pwd<br>\n/Users/david.yakimischak/.atom/packages/language-cql</p>\n<p>% ls -al server<br>\ntotal 93224<br>\ndrwxr-xr-x   3 david.yakimischak  staff        96 Feb 23 11:41 .<br>\ndrwxr-xr-x  18 david.yakimischak  staff       576 Feb 23 11:41 ..<br>\n-rw-r--r--   1 david.yakimischak  staff  46827333 Feb 23 11:41 ls-1.5.0-SNAPSHOT-shaded.jar</p>",
        "id": 227496417,
        "sender_full_name": "David Yak",
        "timestamp": 1614111381
    },
    {
        "content": "<p>The java control panel thinks I have the correct version installed. The command line thinks something else.</p>\n<p><a href=\"/user_uploads/10155/nRM1Nmh25K6S36l_VQBfBAIr/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/nRM1Nmh25K6S36l_VQBfBAIr/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/nRM1Nmh25K6S36l_VQBfBAIr/image.png\"></a></div>",
        "id": 227497643,
        "sender_full_name": "David Yak",
        "timestamp": 1614111884
    },
    {
        "content": "<p>Does anyone have any troubleshooting steps or things I can try? I have added the Java 1.8 jdk and it is in my $JAVA_HOME and now the CQL choice has disappeared from the bottom of my context menu again. I am trying to read through the plugin source but I can't figure out what it is doing. There are a lot of dependencies in the code in package.json - if some of those were not there or right I would have thought I could see an error log somewhere or get a message telling me what is not right. (Maybe I am defining a project for myself!). Right now I just want to get it running.</p>",
        "id": 227506532,
        "sender_full_name": "David Yak",
        "timestamp": 1614115770
    },
    {
        "content": "<p>Hi David. I took a look at this and it seems that a dependency is missing from Maven. I'm prepping a fix in the Atom plugin and should have it deployed later today.</p>",
        "id": 227524881,
        "sender_full_name": "JP",
        "timestamp": 1614123982
    },
    {
        "content": "<p>Atom plugin version 2.8.3 is released which includes a fix for the CQL menu not showing up (due to a missing dependency), and fix for that dependency, and some better status / error messages as it's initializing. You should see the option to upgrade in the packages section of Atom's preferences</p>",
        "id": 227529561,
        "sender_full_name": "JP",
        "timestamp": 1614126733
    },
    {
        "content": "<p>100% worked immediately. Thanks so much JP. All good now. Yak</p>",
        "id": 227590447,
        "sender_full_name": "David Yak",
        "timestamp": 1614169840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194192\">@Richard Stanley</span> that directory does not exist in the language-cql folder. I did get this working by following <span class=\"user-mention\" data-user-id=\"376706\">@Vasyl Herman</span>  instructions, so thank you very much and sorry it took so long for me to get back and close this off. Once things started working I just plowed ahead and did not look back!</p>",
        "id": 242112752,
        "sender_full_name": "David Yak",
        "timestamp": 1623264852
    }
]