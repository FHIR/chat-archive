[
    {
        "content": "<p>Should our capabilityStatements be <br>\na) one for each profile<br>\nb) one for each actor<br>\nc) one for each transaction<br>\n?</p>",
        "id": 153918870,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510329484
    },
    {
        "content": "<p>i am leaning to b) one for each actor</p>",
        "id": 153918871,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510329503
    },
    {
        "content": "<p>should not be per transaction unless there is one server per transaction</p>",
        "id": 153918928,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1510349211
    },
    {
        "content": "<p>+1 for b)</p>",
        "id": 153918937,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1510349587
    },
    {
        "content": "<p>Although I lean towards b), we do have actors and transactions with optional behavior. There may be a need for multiple statements per actor or a statement per actor/transaction. My preference is probably a base capability statement for each actor, and additional capability statements that can be layered on top for the options.</p>",
        "id": 153918943,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1510351577
    },
    {
        "content": "<p>So, one for each actor and one per each option for that actor?</p>",
        "id": 153918973,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510389497
    },
    {
        "content": "<p>I'd start with that approach and see how far that gets you.</p>",
        "id": 153919100,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1510465260
    },
    {
        "content": "<p>Yes, at least a CapabilityStatement for each Actor.. but you might also need one for each interaction, and options might also affect it. Hence why CapabilityStatement does not equate to Actor.</p>",
        "id": 153919132,
        "sender_full_name": "John Moehrke",
        "timestamp": 1510504458
    },
    {
        "content": "<p>I don't see why you need one for each interaction</p>",
        "id": 153919138,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1510517176
    },
    {
        "content": "<p>If the Actor is a client I don't see the need for a CapabilityStatement. It is mainly something for a server, right?</p>",
        "id": 153919140,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1510518337
    },
    {
        "content": "<p>I think the client should also declare its conformance.</p>",
        "id": 153919167,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510557500
    },
    {
        "content": "<p>so, what I am thinking so far:</p>",
        "id": 153919168,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510557508
    },
    {
        "content": "<p>1 CapabilityStatement per profile per actor per option.</p>",
        "id": 153919169,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510557536
    },
    {
        "content": "<p>1 ExampleScenario per profile per transaction</p>",
        "id": 153919170,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510557585
    },
    {
        "content": "<p>and one of these - not sure yet:<br>\n1 CapabilityStatement per profile per transaction<br>\n1 CapabilityStatement per profile per actor per transaction<br>\n1 StructureDefinition per profile per actor per transaction</p>",
        "id": 153919171,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510557651
    },
    {
        "content": "<p>bonus - and one GlossaryEntry per definition in the document  - if GlossaryEntry ever exists :)</p>",
        "id": 153919172,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510557717
    },
    {
        "content": "<p>It all depends on the number of endpoints one will require. One per actor would probably be the most akin to the IHE way of doing things. The CapabilityStatement includes all of the transactions, as well as any options those actors may support. If a software application supports 2 actors one could use 1 single endpoint, but given that the actor could be played by a different application at some future point in time I'd personally still use 2 endpoints.</p>",
        "id": 153919193,
        "sender_full_name": "René Spronk",
        "timestamp": 1510561150
    },
    {
        "content": "<p>How does CapabilityStatement support options?</p>",
        "id": 153919207,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510564577
    },
    {
        "content": "<p>or how would it?</p>",
        "id": 153919208,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510564589
    },
    {
        "content": "<p>can we have a capabilityStatement refer to other capabilityStatements?</p>",
        "id": 153919209,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510564653
    },
    {
        "content": "<p>(and would that be a good idea?)</p>",
        "id": 153919210,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510564720
    },
    {
        "content": "<p>About the client CapabilityStatement.. How would a client serve this? I think there is as yet no example were the client also has a server. Or do you imagine a handshake were the client sends his CapabilityStatements to a server?</p>",
        "id": 153919211,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1510565357
    },
    {
        "content": "<p>I'm not sure for REST. I am thinking of a capabilityStatement about an actor, which does not mean it has to be inside the actor</p>",
        "id": 153919214,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510566074
    },
    {
        "content": "<p>but for \"automated assessment\", I like the idea of sending capabilityStatement to server.</p>",
        "id": 153919215,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510566316
    },
    {
        "content": "<p>actually it takes me back to ieee and usb which do something like that - when you are plugged in, the first thing you do is say what you can do.</p>",
        "id": 153919216,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510566425
    },
    {
        "content": "<p>A CapabilityStatement describes what a server supports. So if its supports an IHE-actor-option the CapabilityStatement should include that functionality. If it doesn't support it, then it doesn't describe the corresponding functionality.</p>",
        "id": 153919217,
        "sender_full_name": "René Spronk",
        "timestamp": 1510569492
    },
    {
        "content": "<p>the CapabilityStatement can represent a capability or a transaction, right? that is how i read the description (if i am not mistaken)</p>",
        "id": 153919219,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510570519
    },
    {
        "content": "<p>hence my question - if capabilityStatements can be nested/linked, the answer would be simple</p>",
        "id": 153919220,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510570677
    },
    {
        "content": "<p>Jose, I don;t think there is a hard-and-fast rule on linkage between number of Actors to number of CapabilityStatements. Some options that we create in IHE have nothing to do with the things that would be expressed in a CapabilityStatement.   I think the nesting of CapabilityStatements is interesting, but is optimizing the job of the author, and not necessarily optimizing the implementors job.  Ultimately we really want a operational server to publish ONE CapabilityStatement... having realtime systems need to navigate through nested CapabilityStatements is not friendly.</p>",
        "id": 153919242,
        "sender_full_name": "John Moehrke",
        "timestamp": 1510583046
    },
    {
        "content": "<p>I am thinking on automated capability recognition, inheritance of conformanceStatements.</p>",
        "id": 153919243,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510583129
    },
    {
        "content": "<p>I agree, we would want one capabilityStatement per server.<br>\nSo if the server is supporting many IHE profiles, and many options, the granularity we have to define is at that level, no?</p>",
        "id": 153919244,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510583177
    },
    {
        "content": "<p>I think this is the same as <span class=\"user-mention\" data-user-id=\"191450\">@Simone Heckmann</span> 's comment in conformance about validating against multiple profiles</p>",
        "id": 153919245,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510583220
    },
    {
        "content": "<p>Yes we need to create the right level of documentation to enable success.  Sometimes that is few, sometimes that is many... That is why I say there is no hard-and-fast rule.</p>",
        "id": 153919247,
        "sender_full_name": "John Moehrke",
        "timestamp": 1510583266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191421\">@Michael van der Zel</span> how would you see it for non-REST ? messaging, documents...</p>",
        "id": 153919248,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510583442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> I agree there is no hard rule, just looking at a framework - what is the level of granularity. I do not think the capabilityStatements should be per actor or per profile (unless they support nesting). If IHE wants to publish reusable capabilityStatements, then we must have those per actor (and perhaps per option), right?</p>",
        "id": 153919250,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510584235
    },
    {
        "content": "<p>the capailityStatements that IHE publishes are a \"Desired Solution\" <a href=\"http://build.fhir.org/capabilitystatement.html#5.2.1.3\" target=\"_blank\" title=\"http://build.fhir.org/capabilitystatement.html#5.2.1.3\">http://build.fhir.org/capabilitystatement.html#5.2.1.3</a>  . So it is expected that they are fragments of what one would develop into a \"Software Solution\", or deploy in an \"Actual Implementation\".</p>",
        "id": 153919251,
        "sender_full_name": "John Moehrke",
        "timestamp": 1510584542
    },
    {
        "content": "<p>I was seeing it differently, actually. We should be describing software capabilities.</p>",
        "id": 153919252,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510584636
    },
    {
        "content": "<p>but i may have it wrong</p>",
        "id": 153919253,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510584657
    },
    {
        "content": "<p>but i think i have it right.</p>",
        "id": 153919254,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510584696
    },
    {
        "content": "<p>2 questions i am asking yself: how does IHE say \"this profile requires this and that AND requires compliance with profile X\"</p>",
        "id": 153919255,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510584750
    },
    {
        "content": "<p>nope. IHE is defining Actors, not Software.</p>",
        "id": 153919256,
        "sender_full_name": "John Moehrke",
        "timestamp": 1510584767
    },
    {
        "content": "<p>and how does a vendor / Buyer say \"this software complies with IHE Pharm XXX, and IHE ITI YYY\"</p>",
        "id": 153919257,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510584835
    },
    {
        "content": "<p>i can imagine this being done with bundling or nesting.</p>",
        "id": 153919258,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510584924
    },
    {
        "content": "<p>ok i read the definitions differently. I will request clarification or examples in the page.</p>",
        "id": 153919259,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510584988
    },
    {
        "content": "<p>so IHE has an IntegrationStatement that is used for that purpose, but I suspect you are asking at the technical level.. And for that, yes the curret CapabilityStatement is missing the ability to declare conformance to CapabilityStatements, like it has for declaring StructureDefinitions.</p>",
        "id": 153919260,
        "sender_full_name": "John Moehrke",
        "timestamp": 1510584999
    },
    {
        "content": "<p>\"It can also be used as the basis for conformance testing of software solutions independent of a particular installation.\" - I think this is what we want</p>",
        "id": 153919261,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510585008
    },
    {
        "content": "<p>So we go back to nesting. <br>\nAnd if nesting is there, then the problem to me is resolved thus: our capabilityStatements are at the level of Actor(-Option), and the vendors can declare conformity to any grouping of these.</p>",
        "id": 153919262,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510585139
    },
    {
        "content": "<p>i hope the context is clear - in my question, the goal is \"what we should have in a later future\"?</p>",
        "id": 153919264,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510585197
    },
    {
        "content": "<p>i don't want to rock the boat on the short-term implementation. I am looking at what is our target use of IGs, Statements, etc.</p>",
        "id": 153919265,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510585239
    },
    {
        "content": "<p>I would still want the ONE CapabilityStatement published by a server or client to be the flat capabilities supported. Yes, it would be good for those capabilities should be able to be declared at the 'standard CapabilityStatement identifier', but I would still want only ONE, and for all the combined  REST capabilities to be declared as a flat list.</p>",
        "id": 153919266,
        "sender_full_name": "John Moehrke",
        "timestamp": 1510585288
    },
    {
        "content": "<p>as an application developer, sure.</p>",
        "id": 153919267,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510585328
    },
    {
        "content": "<p>you just pick up the IHE conformance statements and instead of a tree, you make a flat list.</p>",
        "id": 153919268,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510585358
    },
    {
        "content": "<p>i think that is a good point - the conformance statement of a vendor should not have to bother with how IHE is structured</p>",
        "id": 153919269,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510585411
    },
    {
        "content": "<p>but ihe does not need to work on a flat list.</p>",
        "id": 153919270,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510585460
    },
    {
        "content": "<p>the current model seems to focus more on the fact that a server as deployed would have some set of REST capabilites.   Expecting that a client would look for the query parameters it wants to use. Rather than a client looking for an \"Actor\" declaration.... So it is focused on low level grandularity, rather than an abstract higher grandularity like IHE has in Actor.</p>",
        "id": 153919271,
        "sender_full_name": "John Moehrke",
        "timestamp": 1510585497
    },
    {
        "content": "<p>so, as stated before, i am going on with \"one statemetn per actor per option\". The \"per option\" bit is optional - in some cases it is not needed.</p>",
        "id": 153919272,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510585620
    },
    {
        "content": "<p>as an output the user needs a flat list - sure, that can be done.</p>",
        "id": 153919273,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510585631
    },
    {
        "content": "<p>is there any reason why our conformance statement should not be written in the above granularity?</p>",
        "id": 153919274,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510585663
    },
    {
        "content": "<p>yes, One per actor... possibly per option...</p>",
        "id": 153919275,
        "sender_full_name": "John Moehrke",
        "timestamp": 1510585665
    },
    {
        "content": "<p>I had already given the advice to publish one CapabilityStatement per Actor... so I did just add a statement about Options.   <a href=\"http://wiki.ihe.net/index.php/Guidance_on_writing_Profiles_of_FHIR#CapabilityStatement-_content_recommendation\" target=\"_blank\" title=\"http://wiki.ihe.net/index.php/Guidance_on_writing_Profiles_of_FHIR#CapabilityStatement-_content_recommendation\">http://wiki.ihe.net/index.php/Guidance_on_writing_Profiles_of_FHIR#CapabilityStatement-_content_recommendation</a></p>",
        "id": 153919276,
        "sender_full_name": "John Moehrke",
        "timestamp": 1510586152
    },
    {
        "content": "<p>Perfect. Should we start a wiki page on the \"future state\" ?</p>",
        "id": 153919289,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510586731
    },
    {
        "content": "<blockquote>\n<p>the capailityStatements that IHE publishes are a \"Desired Solution\" <a href=\"http://build.fhir.org/capabilitystatement.html#5.2.1.3\" target=\"_blank\" title=\"http://build.fhir.org/capabilitystatement.html#5.2.1.3\">http://build.fhir.org/capabilitystatement.html#5.2.1.3</a>  . So it is expected that they are fragments of what one would develop into a \"Software Solution\", or deploy in an \"Actual Implementation\".</p>\n</blockquote>\n<p>I don't think it are fragments. The IHE Implementable Artifacts contain THE CapabilityStatements of the associated IHE Profile!</p>",
        "id": 153919363,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1510603527
    },
    {
        "content": "<p>an IHE profile is usually not meant for one single system - it typically declares at least two.</p>",
        "id": 153919367,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510606423
    },
    {
        "content": "<p>so, without nesting, do you mean we have one statement for one profile?</p>",
        "id": 153919368,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510606444
    },
    {
        "content": "<p>I say a fragment, which I mean the same thing as \"Desired Solution\". I say this because it is very likely that even if I implemented a micro-service intending to implement exactly one IHE defined Actor, I would need to add more elements to the CapabilityStatement.   The relationship to the IHE published CapabilityStatement is that what I publish must be at MINIMUM that which is found in the IHE CapabilityStatement.</p>",
        "id": 153919369,
        "sender_full_name": "John Moehrke",
        "timestamp": 1510606654
    },
    {
        "content": "<p>There are (at least) two uses for CapabilityStatement here. One is a statement of what an actual implementation can do. I think this should be a \"flat\" CS, no nesting. </p>\n<p>The other use is for an IHE profile to specify minimum capabilities that an implementation must have.  Generally, I think there should be one of these per actor, and with additional ones for each option the actor supports.</p>\n<p>This should cover most of our situations. The exceptions would be when multiple systems implement a single actor, or one actor implements different transactions on different endpoints. To deal with this we would need per actor per transaction CapabilityStatements, and I doubt the extra complexity would be worth it in the general case.</p>",
        "id": 153919397,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1510638014
    },
    {
        "content": "<p>i am moving on with that in mind</p>",
        "id": 153919398,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510639296
    },
    {
        "content": "<p>as for the flat/nesting, if we need some inheritance or bundling, i think the best is to come up with a scenario and check the Conformance folks</p>",
        "id": 153919399,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1510639354
    },
    {
        "content": "<p>Ok. So a server will return 1 CapabilityStatement as per <a href=\"http://hl7.org/fhir/http.html#capabilities\" target=\"_blank\" title=\"http://hl7.org/fhir/http.html#capabilities\">http://hl7.org/fhir/http.html#capabilities</a>. Mind that: \"A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.\" This means that yes, the capabilitystatment of each IHE profile is a fragment of a servers complete capabilitystatement. I see it now.</p>",
        "id": 153919408,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1510645879
    }
]