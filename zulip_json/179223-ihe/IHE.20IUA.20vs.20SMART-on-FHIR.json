[
    {
        "content": "<p>Is SMART-on-FHIR compatible with IHE IUA or the other way around? In other words are the authentication steps of SMART-on-FHIR compatible with IHE:IUA ITI-72 and IHE:IUA ITI-71? And is their use of JWT the same?</p>",
        "id": 219997093,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1608047191
    },
    {
        "content": "<p>There is some discussion on that in the current version of IUA (in public comment): <a href=\"https://profiles.ihe.net/ITI/IUA/\">https://profiles.ihe.net/ITI/IUA/</a><br>\nIf it is not clear enough, or if you think there are better approaches, please comment on it.</p>",
        "id": 220003233,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1608049351
    },
    {
        "content": "<p>Thanks for the link -- I hadn't seen this! Re: JWTs, SMART doesn't make any requirements about access token format (though of course we use JWTs for <code>id_token</code>s, because that's how OpenID Conenct works).</p>",
        "id": 220004147,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1608049666
    },
    {
        "content": "<p>Thanks.<br>\nFor example I created an SMART-on-FHIR app that runs with oauth etc in the smarthealthit sandbox and in the Epic AppOrchard. What do I need to do to claim that it is conform IHE:IUA? Is there a checklist of some kind?</p>",
        "id": 220091985,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1608109910
    },
    {
        "content": "<p>Ow. Sorry. I see now there is a chapter in the link from Vassil. Thanks!</p>",
        "id": 220092064,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1608109956
    },
    {
        "content": "<p>Question. IUA Issue 13 says that SMART-on-FHIR specifies OAuth 2.1, but on <a href=\"http://www.hl7.org/fhir/smart-app-launch/\">http://www.hl7.org/fhir/smart-app-launch/</a> it talks about OAith 2.0?</p>",
        "id": 220243217,
        "sender_full_name": "Michael van der Zel",
        "timestamp": 1608212021
    },
    {
        "content": "<p>Are some of the IUA authors present here?</p>",
        "id": 220247752,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1608214455
    },
    {
        "content": "<p>yes. myself, <span class=\"user-mention\" data-user-id=\"191478\">@Oliver Egger</span> <span class=\"user-mention\" data-user-id=\"191906\">@Massimiliano Masi</span>  -- but you might be best to address your concerns to the github repo, issues.</p>",
        "id": 220248077,
        "sender_full_name": "John Moehrke",
        "timestamp": 1608214659
    },
    {
        "content": "<p><a href=\"https://github.com/IHE/ITI.IUA\">https://github.com/IHE/ITI.IUA</a></p>",
        "id": 220248106,
        "sender_full_name": "John Moehrke",
        "timestamp": 1608214681
    },
    {
        "content": "<p>Issue 13 states that IUA directly references OAuth 2.1. Presumably, part of the issue is that SMART references OAuth 2.0</p>",
        "id": 220248183,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1608214713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239813\">@Joost Reuzel</span></p>",
        "id": 220248254,
        "sender_full_name": "John Moehrke",
        "timestamp": 1608214754
    },
    {
        "content": "<p>and input from <span class=\"user-mention\" data-user-id=\"191864\">@Isaac Vetter</span> <span class=\"user-mention\" data-user-id=\"195299\">@Luis Maas</span> <span class=\"user-mention\" data-user-id=\"194684\">@Gregorio Canal</span> <span class=\"user-mention\" data-user-id=\"273609\">@Martin Rosner</span></p>",
        "id": 220248650,
        "sender_full_name": "John Moehrke",
        "timestamp": 1608214953
    },
    {
        "content": "<p>Long answer:</p>\n<p>Indeed, IUA references OAuth2.1, where SMART (still) references OAuth2.0. However, this was not the biggest concerns around adopting SMART. OAuth2.1 basically is OAuth2.0, but integrated with all best practices like PKCE, the use of code flow over implicit flow, etc. </p>\n<p>Summarizing there were three main concerns around SMART, which prevented it to be adopted into IUA from the start:</p>\n<ol>\n<li>The current SMART specification assumes a tight relation between the authorization server and the resource server, sometimes not even distinguishing the two. For example, does the discovery document belong to the authorization server or resource server?. How would the resource server translate the access token into a set of claims? No mechanism is specified, which implies this is a specific dependency between the two. And how does the authorization server know about the launch contexts? There is no API to announce those in a generic way. </li>\n<li>The SMART-scopes are bound to the default FHIR REST operations. In the various IHE profiles other base protocols are (or will be) used as well. Moreover, the SMART-scopes don't include FHIR messaging or support for the operations like the $apply on ActivityDefinition which are used in IHE profiles as well.</li>\n<li>The SMART-scopes include an authorization context (user/patient/system). The user or patient identifier is resolvable at the resource server. Again a dependency between resource and authorization server. It would have been easier if the context was separated from the scopes into a separate set of claims (which is already partly so as the patient or user id are separate claims). This would allow the IHE transactions based on FHIR to refer to the resources and operations only. The contextual filters based on patient, system or user context would then be tackled in a generic separate way. For example, IUA includes a way of describing the user in its organizational context, which can be used in authorization decisions by the resource server. Something similar can be added for a patient context.</li>\n</ol>\n<p>SMART works great for the EMR-launch use-cases, like the Epic AppOrchard. However, we found it somewhat limiting for other use-cases. To extend the applicability of SMART I would recommend the following three:</p>\n<ul>\n<li>Introduce token introspection endpoint to allow the resource server to obtain the claims associated with the access token. Optionally the access token can be formatted as JWT to optimize the number of network calls. I noticed that work is ongoing on this topic, which is great in my view.</li>\n<li>Add an API to register (launch) sessions at an authorization server. This would further decouple resource servers from the authorization servers.</li>\n<li>Update the SMART Scopes: Remove the context from the scopes and place that into separate token claims. Add support for FHIR operations and FHIR messaging to the claims. Enhance the context claims (user/patient/system) to include more contextual information like organization identifiers, roles, etc.</li>\n</ul>\n<p>Having said all this, suggestions on how the bridge the gap between the two specifications are quite welcome!</p>\n<p>Hope this helps,<br>\nJoost</p>",
        "id": 220673720,
        "sender_full_name": "Joost Reuzel",
        "timestamp": 1608630348
    },
    {
        "content": "<p>Thanks! A couple of these suggestions are things we are adding in SMART v2 -- specifically, place, token introspection, and support for more FHIR interactions in the scope language.</p>\n<p>(I'm not sure I follow the suggestion about removing \"context\" from scopes; SMART key use cases require the ability to differentiate a request for user level versus patient level access. I might be missing something about the suggestion though.)</p>",
        "id": 221536841,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1609774169
    }
]