[
    {
        "content": "<p>If I understand it correctly, MHD currently only allows for POST-Interactions on DocumentReference and Binaries. Deletion and Update are our of scope, right?<br>\nSo an new Document can be provided with a \"replaces\"-Relation to an existing one, but the status of the existing document could never be changed to \"superseded\"? Nor could a DocRef be changed to the \"entered-in-error\"-state.<br>\nWouldn't this imply that all DocumentReference in the MHD scope must be, and always will be \"current\"?</p>",
        "id": 264173520,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1638978082
    },
    {
        "content": "<p>if you have MHD with the <a href=\"https://profiles.ihe.net/ITI/MHD/1332_actor_options.html#13322-xds-on-fhir-option\">XDS on FHIR Option</a> you can have afterwards a DocumentReference in superseded state as per <a href=\"https://profiles.ihe.net/ITI/TF/Volume3/ch-4.2.html#4.2.2.2.3\">https://profiles.ihe.net/ITI/TF/Volume3/ch-4.2.html#4.2.2.2.3</a>. I don't see this behaviour specified in MHD directly.</p>",
        "id": 264176810,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1638979304
    },
    {
        "content": "<p>MHD does support replacing documents, just like XDS did. That is to say these are NOT an \"Update\" action. They are a \"Create\" of a new DocumentReference for the new instance of a Binary document; with a .relatesTo that deprecated the previous DocumentReference/Binary.<br>\n<a href=\"https://profiles.ihe.net/ITI/MHD/ITI-65.html#23654123-replace-transform-signs-and-append-associations\">https://profiles.ihe.net/ITI/MHD/ITI-65.html#23654123-replace-transform-signs-and-append-associations</a></p>",
        "id": 264178032,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638979797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> where is this behaviour stated in <a href=\"https://profiles.ihe.net/ITI/MHD/ITI-65.html#23654123-replace-transform-signs-and-append-associations\">https://profiles.ihe.net/ITI/MHD/ITI-65.html#23654123-replace-transform-signs-and-append-associations</a>? Also from the semantics of the Bundle transaction I would have assumed the same behaviour as <span class=\"user-mention\" data-user-id=\"191450\">@Simone Heckmann</span> described it, a new DocumentReference would be added with a relatesTo link to the other DocumentReference.</p>",
        "id": 264183316,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1638981968
    },
    {
        "content": "<p>that is what that section (intends) to say</p>",
        "id": 264183543,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638982075
    },
    {
        "content": "<p>In early versions of MHD we didn't cover this well, because replace was not a high priority use-case. But the current should be covering it. Welcome improvement recommendations.</p>",
        "id": 264183949,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638982230
    },
    {
        "content": "<p>MHD is just the interface, so it is just there to convey the intent. There is further explaination of replace in XDS, and also in MHDS</p>",
        "id": 264184316,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638982364
    },
    {
        "content": "<p>MHDS work in progress to move to html -- <a href=\"https://github.com/IHE/ITI.MHDS/blob/master/index.md\">https://github.com/IHE/ITI.MHDS/blob/master/index.md</a></p>",
        "id": 264184384,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638982392
    },
    {
        "content": "<p>But if MHD is just the interface and it uses a transaction Bundle then I think it should include the to be updated relateTo DocumentReference or alternatively an operation should be defined. I offer to write a CP.</p>",
        "id": 264208680,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1638992296
    },
    {
        "content": "<p>as indicated, I thought the section I pointed to did say that. It just didn't have an example. right?</p>",
        "id": 264208781,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638992352
    },
    {
        "content": "<blockquote>\n<p>The Document Recipient shall process the bundle atomically, analogous to both the Provide and Register Document Set-b [ITI-41] transaction and FHIR “transaction” as specified in <a href=\"http://hl7.org/fhir/R4/http.html#transaction\">http://hl7.org/fhir/R4/http.html#transaction</a>.</p>\n</blockquote>\n<p>You cannot expect to be compliant to [ITI-41] and to the FHIR \"transaction\" for the replaceTo behaviour. Either the replaceTo behaviour is excluded, the transaction needs to add the updated DocumentReference or an operation is defined.</p>",
        "id": 264210046,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1638992914
    },
    {
        "content": "<p>I don't understand why you say that</p>",
        "id": 264210604,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638993128
    },
    {
        "content": "<p>are you meaning in the context of MHDS that there is a problem? There is not really a problem in the case of XDS, as that is already the behaviour of the XDS Provide and Register Document Set</p>",
        "id": 264210702,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638993178
    },
    {
        "content": "<p>in the context of MHD without the XDS on FHIR option selected</p>",
        "id": 264211533,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1638993510
    },
    {
        "content": "<p>okay, so in MHDS</p>",
        "id": 264213546,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638994391
    },
    {
        "content": "<p>I have had comments to public-comment about moving ITI-65 as an operation. It feels very much like it is an operation more than a transaction. It is what it is because of history, and lack of comments to the contrary. I am happy to have Trial-Implementation improve it.</p>",
        "id": 264213769,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638994517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191478\">@Oliver Egger</span> you can just put in github issues. You don't need to write formal CP.</p>",
        "id": 264214538,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638994860
    },
    {
        "content": "<p>added <a href=\"https://github.com/IHE/ITI.MHD/issues/100\">issue 100</a> with a proposition for clarification of the text.</p>",
        "id": 264723780,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1639409878
    },
    {
        "content": "<p>I can't really wrap my head around how a Document's status could be changed to \"entered in error\" using ITI-65. Can it even?</p>",
        "id": 264844643,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1639482169
    },
    {
        "content": "<p>not really, there is no functionality called for in the use-cases to do that. Even the case where we have had a need for a Delete, we did that with a replace with an empty document. We don't have a use for the status entered in error.</p>",
        "id": 264853591,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639486926
    },
    {
        "content": "<p>that is not to say that it couldn't ever be set, just no use-case means for setting it using ITI-65.</p>",
        "id": 264853644,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639486961
    },
    {
        "content": "<p>After giving this some additional thought, I absolutely agree with the idea, that MHD should move to operations instead of transactions. I often tell my customers that the difference between the two is the location of the business logic. With transactions it's on the client side (client decides whether to PUT or POST, what's the appropriate matching criteria for conditional create/update etc). Operations however have all of that happening on the server side, and the client simply provides the necessary input.</p>\n<p>With MHD it feels like it should be the latter rather than the former.</p>\n<p>I am currently working on a national spec for Germany where we want to describe simplified intra-organisational document exchange but align with MHD as much as possible to enable communications with the XDS based PHR withount much of an additional effort. </p>\n<p>I'd be very much interested in preadopting the operations approach. Maybe we can start the discussion right here...?</p>",
        "id": 265268991,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1639731487
    },
    {
        "content": "<p>is there a downside to changing to an operation? (it is not an operation purely because this is an old enough spec that there was no operation support when MHD was first written).</p>",
        "id": 265291212,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639745433
    },
    {
        "content": "<p>IHE process would run this change to an operation as a \"Change Proposal\". This would at-best be balloted in January, and thus be at-best final in February.<br>\nThe CP needs to explain why, and exact textual changes.  (The github issue with a pull-request would be fantastic)</p>",
        "id": 265291419,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639745576
    },
    {
        "content": "<p>I would suggest to introduce the operation only as an addition for covering the replace document if the client cannot handle himself the replace logic. Why introduce an operation for all Usecases when those are semantically very nice handled with the transaction? Not every client needs to replace documents and would be perfectly fine to just use the transaction bundle as defined now. Not to forget that MHD has been tested during multiple connectathons with the transactions semantics and the NIST tooling built for it. Defining operations sounds for me like rewriting WSDL's ...</p>",
        "id": 265342044,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1639766912
    },
    {
        "content": "<p>that would keep from breaking things... but it also replicates alot of functionality, as all the functionality the current transaction is needed in the operation. as it is very possible to submit a replacement with a signature, ammendment, folder change, etc...</p>",
        "id": 265342311,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639767026
    },
    {
        "content": "<p>other, relatively non-breaking, is to just require Document Source to include the old DocumentReference with the changes. Not that much of a bigger burden, just not something an XDS Document Source needs to do.</p>",
        "id": 265343480,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639767593
    },
    {
        "content": "<p>so, we have three alternatives for discussion</p>",
        "id": 265343554,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639767605
    },
    {
        "content": "<p>i would prefer additions then alternatives <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 265343813,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1639767706
    },
    {
        "content": "<p>I meant alternatives for how we solve the problem. not options to be written into the profile.</p>",
        "id": 265344087,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639767809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/179223-ihe/topic/MHD.20update.20and.20status/near/265291212\">said</a>:</p>\n<blockquote>\n<p>is there a downside to changing to an operation? (it is not an operation purely because this is an old enough spec that there was no operation support when MHD was first written).</p>\n</blockquote>\n<p>One downside is that currently, you can support MHD in a standard FHIR server, so if it's an operation, that would need to be written for any default FHIR server that wants to support it.  I'm not saying this is necessarily a good enough reason, but it would affect implementations.</p>",
        "id": 265344723,
        "sender_full_name": "Luke Duncan",
        "timestamp": 1639768082
    },
    {
        "content": "<p>right, but replacing a document is a normal lifecycle action, so that FHIR server would certainly need to support the replace functionality. <br>\nThis point about a normal FHIR server, would tend to require pushing the responsibility to the Document Source. But even this alternative would require the FHIR server to not allow a replace without the old DocumentReference.</p>",
        "id": 265353573,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639771552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"193299\">Luke Duncan</span> <a href=\"#narrow/stream/179223-ihe/topic/MHD.20update.20and.20status/near/265344723\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/179223-ihe/topic/MHD.20update.20and.20status/near/265291212\">said</a>:</p>\n<blockquote>\n<p>is there a downside to changing to an operation? (it is not an operation purely because this is an old enough spec that there was no operation support when MHD was first written).</p>\n</blockquote>\n<p>One downside is that currently, you can support MHD in a standard FHIR server, so if it's an operation, that would need to be written for any default FHIR server that wants to support it.  I'm not saying this is necessarily a good enough reason, but it would affect implementations.</p>\n</blockquote>\n<p>But would a default server's behaviour be correct according to the spec? If a Client sends an updated Document via transaction to an out-of-the-box FHIR Server, there would be duplicate documents with the same master identifier and both status \"current\". That can't be right...</p>",
        "id": 268287387,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1642434594
    },
    {
        "content": "<p>well, master identifier is expected to change on version changes too... see this in CDA and FHIR-Document.</p>",
        "id": 268287664,
        "sender_full_name": "John Moehrke",
        "timestamp": 1642434732
    },
    {
        "content": "<p>Guess I meant identifier, then...?</p>",
        "id": 268288223,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1642434990
    },
    {
        "content": "<p>so, yes there could be problems.. agreed.</p>",
        "id": 268288321,
        "sender_full_name": "John Moehrke",
        "timestamp": 1642435052
    },
    {
        "content": "<p>Note there is a \"new work item\" proposed to be picked up in February... if there is enough interest...</p>",
        "id": 268290309,
        "sender_full_name": "John Moehrke",
        "timestamp": 1642436081
    },
    {
        "content": "<p><a href=\"https://github.com/IHE/IT-Infrastructure/issues/175#issuecomment-1002122712\">https://github.com/IHE/IT-Infrastructure/issues/175#issuecomment-1002122712</a></p>",
        "id": 268290312,
        "sender_full_name": "John Moehrke",
        "timestamp": 1642436083
    },
    {
        "content": "<p>I think the current specification contradicts the description of a transaction. We expect our POSTs to have consequence beyond the creation of the new resource (update status of old version) which is not what transactions do.</p>\n<p>I see three options here:</p>\n<ol>\n<li>Keep the transaction as it is and accept that MHD in this form does not support updates</li>\n<li>Keep the transaction but in case of an Update, the Transaction must include a PATCH or PUT on the old DocumentReference to set the status to 'superseded'</li>\n<li>Drop the transaction and introduce an Operation and leave it to the server to deprecate the old version if a new one is added.</li>\n</ol>\n<p>What I am uncertain about is if the prospective Operation should differ between Create and Update. Is it up to the Server to figure out if a Document with the same identifier already exists or not and behave accordingly or is it up to the client? Does a client always know or care if an older version of the document already exists on the server?</p>",
        "id": 268290761,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1642436364
    },
    {
        "content": "<p>Regardless of whether Transaction or Operation, I think I would like to have a little more information on the expected server side behaviour in case of an update, specifically potential error scenarios:</p>\n<ul>\n<li>What triggers the specific update logic on the server?<ul>\n<li>Is it the fact, that a document is submitted with an identifier that already exists on the server? </li>\n<li>Is it the existence of the relatesTo-element? (and what if the relatesTo.code is anything other than \"replaces\")?</li>\n</ul>\n</li>\n<li>Is the server expected to treat a submission as an update if only one of the conditions above are met or both?</li>\n<li>what if the identifier of the DocumentReference behind the relatesTo-Link differs from the submitted DocumentReference.identifier?</li>\n<li>what if the relatesTo.reference points to a DocumentReference that doesn't exist on the server? Should it treat the interaction as a (successful) create or error on the update?</li>\n</ul>\n<p>We just had a meeting with the stakeholders for the German ISiK specification and we are uncertain on how to continue... Keep the Transaction and clarify the expected behaviour in our IG? Create our own Operation and aim for future alignment with MHD or wait for IHE to decide on how to move forward? We are scheduled to publish in June, so it might be a close call...</p>\n<p>I'm open for suggestions...</p>",
        "id": 268853452,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1642777087
    },
    {
        "content": "<p>These are excellent comments/questions. Thankyou.</p>",
        "id": 268854301,
        "sender_full_name": "John Moehrke",
        "timestamp": 1642777435
    },
    {
        "content": "<p>One clarification, are you speaking of the MHDS environment, or MHD as an API to XDS?</p>",
        "id": 268854407,
        "sender_full_name": "John Moehrke",
        "timestamp": 1642777473
    },
    {
        "content": "<p>I am not sure where IHE might go relative to changing to an Operation. BUT, your experience would be fantastic influence. so your overall question about if you should wait for IHE, I really don't think you should wait; but I do think engaging (like you are now) with discussion is fantastic.</p>",
        "id": 268854743,
        "sender_full_name": "John Moehrke",
        "timestamp": 1642777629
    },
    {
        "content": "<p>There are three forums where stakeholders might be. This one, Github repo, and the mhd implmementers mailing list.</p>",
        "id": 268854845,
        "sender_full_name": "John Moehrke",
        "timestamp": 1642777676
    },
    {
        "content": "<p>Agree that some transactions call for server side (replacement) logic, and therefore FHIR operations. MHD covers the bulk of the workflows, but just like with XDS the more complex stuff (ITI-41, ITI-86, ITI-62) will take longer to flesh out. Right now you should probably go for whatever seems most practical and in the spirit of FHIR &amp; REST, MHD(S) can still be changed at this point in time. </p>\n<p>IMHO one can't, and shouldn't, define nor assume any particular server side logic to happen on a simple POST or PUT, besides simply updating its back end store.</p>",
        "id": 268856853,
        "sender_full_name": "René Spronk",
        "timestamp": 1642778561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/179223-ihe/topic/MHD.20update.20and.20status/near/268854407\">said</a>:</p>\n<blockquote>\n<p>One clarification, are you speaking of the MHDS environment, or MHD as an API to XDS?</p>\n</blockquote>\n<p>That's a difficult one...<br>\nWe're currently aiming for a simplified spec where only single documents are exchanged within a single organiziation, but we are trying to align as much as possible with MHD, so the documents exchanged between systems using our spec can easily be forwarded to  MHD/XDS environments (e.g. our DocumetReferences already have appropriate metadata, but we don't use SubmissionSets).<br>\nWe might as well have gone and said we just do simple RESTful updates because it terms of compatibility it doesn't matter what the document's prior history  looks like * before* it's been forwarded to MHD/XDS. <br>\nHowever, today's meeting has shown that the vendors prefer to use XDS logic for updates (creating a new DocumentReference and linking to the old one) even for the simplified exchange.<br>\n Also, everyone agreed, that the decision of how to correctly perform an update should be up to the server, not the client (this cuts out transaction).<br>\n...so we're basically at the point where we need to fix the same problem as IHE.</p>\n<p>I'm cautiously leaning towards something like a $submit-document operation, with a DocumentReference and a Binary input parameter plus some verbiage around how Clients can express the intent for update (e.g. through the relatesTo property) but eventually leaving it to the server  whether to treat it as regular RESTful update of the submitted DocumentReference on the relatesTo-target or to update \"XDS-style\" and whether to error on invalid relatesTo references or default to a create interaction... <br>\nEither way, the expected result of the operation is that for each Document, there is eventually only one version with the status \"current\" on the server.</p>\n<p>...but these are just initial thoughts that need a lot more thinking about...</p>",
        "id": 268896369,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1642795431
    },
    {
        "content": "<p>thanks for the thinking. I suspect IHE should move to an operation for many of these reasons.</p>",
        "id": 268902952,
        "sender_full_name": "John Moehrke",
        "timestamp": 1642799044
    },
    {
        "content": "<p>would your group be completely against one more List resource that is marked as a SubmissionSet? That tells the server WHY the operation is being done.</p>",
        "id": 268903038,
        "sender_full_name": "John Moehrke",
        "timestamp": 1642799091
    },
    {
        "content": "<p>is your primary use-case more of a PUSH, rather than a publish?</p>",
        "id": 268903081,
        "sender_full_name": "John Moehrke",
        "timestamp": 1642799114
    },
    {
        "content": "<p>More like a publish. We want to support full metadata as well as search.</p>",
        "id": 270374311,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1643804228
    },
    {
        "content": "<p>I tentatively drafted a $submit-document operation: <a href=\"https://simplifier.net/isik-dokumentenaustausch/submit-document\">https://simplifier.net/isik-dokumentenaustausch/submit-document</a><br>\nPoints I'm still unclear about: </p>\n<ul>\n<li>Are we going to need more modes than just create/update, and if so, will this approach scale well?</li>\n<li>What should the out parameter(s) be other than an OperationOutcome?</li>\n<li>Can this be easily scaled up to an XDS compatible Operation by adding the SubmissionSet-List as an additional Parameter?</li>\n<li>Would it be better to define distinct operations for update and create rather than putting the mode switch into parameters?</li>\n<li>Are the expectations on Client/Server behaviour plausible?</li>\n</ul>\n<p>Please let me hear your thoughts!</p>",
        "id": 270394692,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1643813186
    },
    {
        "content": "<p>I think minimally create (mostly) is all that we need. Lesson learned from XDS days. yes there are XDS ways to soft-delete, and hard-delete. Folders can be updated, but DocumentReference and SubmissionSet are create only (they do get updated by the Registry triggered by things like Replace, soft-delete, and hard-delete); but those actions are independent of the publish flow.</p>",
        "id": 270396619,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643813885
    },
    {
        "content": "<p>I think OperationOutcome is all that is needed, right? Good question.</p>",
        "id": 270396685,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643813910
    },
    {
        "content": "<p>yes, SubmissionSet is needed. I understand your use-case doesn't understand the need, but the degenerate form of publishing one document is automatable to a minimal SubmissionSet. The SubmissionSet is useful for provenance, and traceability.</p>",
        "id": 270396959,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643814004
    },
    {
        "content": "<p>The closest equivalent to this operation is a PUT/POST of a bundle, so you could consider having a bundle as the OUT parameter. This exposes the client to whatever (filtered/modified/limited) version of the resources as supported/stored by the FHIR server, who may not wish/be able to support all things contained in the IN bundle. The resources in the IN bundle could be richer than that which is required by IHE, or may contain extensions, all of which may or may not be supported by the server.</p>",
        "id": 270448849,
        "sender_full_name": "René Spronk",
        "timestamp": 1643832215
    },
    {
        "content": "<p>and that is what this operation is replacing... the current transaction bundle.</p>",
        "id": 270461512,
        "sender_full_name": "John Moehrke",
        "timestamp": 1643837663
    },
    {
        "content": "<p>I was thinking that returning the DocumentReference (and the SubmissionSet, if present) with the id would be useful, so the client can cache the URL for easier user access (list of last documents, also, the client needs these urls for update/replace). My operation doesn't make assumptions about whether the server replaces or updates the Document (I wanted to leave this decision to the server and make the Operation usable in both scenarios). So the returned DocumentReference with either a new id or a new version is the only way, the client can tell, how the server processed the update.<br>\nWhat I wouldn't wat to have as part of the return parameters is the Binary. I think that would just make things bulky and slow for no good reason.</p>",
        "id": 270518190,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1643879268
    },
    {
        "content": "<p>The OD I created is already tied to our current use case (ISiK Profiles). But I was hoping that maybe we could infer a common base operation which could be constrained for both our purpose and MHD without deviating too far from the base definition.</p>",
        "id": 270518691,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1643879577
    },
    {
        "content": "<p>Indeed, Binary should not be returned..</p>",
        "id": 270525645,
        "sender_full_name": "René Spronk",
        "timestamp": 1643883182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191372\">René Spronk</span> <a href=\"#narrow/stream/179223-ihe/topic/MHD.20update.20and.20status/near/270448849\">said</a>:</p>\n<blockquote>\n<p>The closest equivalent to this operation is a PUT/POST of a bundle, so you could consider having a bundle as the OUT parameter. This exposes the client to whatever (filtered/modified/limited) version of the resources as supported/stored by the FHIR server, who may not wish/be able to support all things contained in the IN bundle. The resources in the IN bundle could be richer than that which is required by IHE, or may contain extensions, all of which may or may not be supported by the server.</p>\n</blockquote>\n<p>I believe, the original idea in MHD was, to return a transaction-response with <em>only</em> the URLs of the created resources. But I agree with René that returning the created resources <strong>as the server understood them</strong> is of value to the client. So I'll just use the same Parameters construct for return values but without the Binary.</p>",
        "id": 270694956,
        "sender_full_name": "Simone Heckmann",
        "timestamp": 1643970542
    }
]