[
    {
        "content": "<p>Just a note that if your work group is looking at adding extensions to support some of the elements from the workflow patterns, there are already standard collections of extensions in the \"profiles\" folder for the request, event and definition patterns.  Please add your resource to the context of the existing extensions or add new extensions to those existing repositories rather than creating your own.  (The workflow reports won't catch extensions you define elsewhere.)</p>",
        "id": 153971922,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530042504
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/extension-event-instantiatescanonical.html\" target=\"_blank\" title=\"http://build.fhir.org/extension-event-instantiatescanonical.html\">http://build.fhir.org/extension-event-instantiatescanonical.html</a> is an existing extension, but it just has a type of \"canonical\".  Is that correct?  I am questioning if it should have a type of \"canonical(ActivityDefinition | Measure | OperationDefinition | PlanDefinition | Questionnaire)\"</p>",
        "id": 153972530,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1530276961
    },
    {
        "content": "<p>That would be better, yes.</p>",
        "id": 153972564,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530280640
    },
    {
        "content": "<p>Feel free to make the fix</p>",
        "id": 153972565,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530280640
    },
    {
        "content": "<p>Will do whenever the build is successful again (it's been failed for the past week....)</p>",
        "id": 153972578,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1530283992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> .html pages must be well formed.</p>",
        "id": 153972703,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530397158
    },
    {
        "content": "<p>Argh, I broke the build? Whoops, sorry and will fix when I'm back at a computer!</p>",
        "id": 153972704,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1530399491
    },
    {
        "content": "<p>(can't wait til we move to GitHub and can prevent broken changes from breaking the master branch.)</p>",
        "id": 153972705,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1530399534
    },
    {
        "content": "<p>I'll fix it</p>",
        "id": 153972706,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530400468
    },
    {
        "content": "<p>not sure that preventing changes from breaking the build will make everyone happy...</p>",
        "id": 153972707,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530400486
    },
    {
        "content": "<p>Thanks Grahame, and sorry for the trouble. (Everyone may not be happy, but perhaps we can strive for \"enlightened\"?)</p>",
        "id": 153972708,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1530400696
    },
    {
        "content": "<p>well, we will all be happy with that particular outcome, but I suspect we will all struggle with the side consequences</p>",
        "id": 153972709,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530401348
    },
    {
        "content": "<p>I checked out a fresh, clean build (made NO changes) and my local build is failing, so I am officially baffled.  Here are the errors:</p>\n<div class=\"codehilite\"><pre><span></span> [java] ERROR @ CapabilityStatement (line 0, col0): capabilitystatement-messagedefinition:: CapabilityStatement: If kind = instance, implementation must be present and software may be present [(kind != &#39;instance&#39;) or implementation.exists()] (src = InstanceValidator)\n [java] ERROR @ CapabilityStatement: capabilitystatement-messagedefinition:: CapabilityStatement: If kind = instance, implementation must be present and software may be present [(kind != &#39;instance&#39;) or implementation.exists()] (src = InstanceValidator)\n [java] ERROR @ CareTeam.participant[2] (line 0, col0): careteam-example:: CareTeam.participant[2]: CareTeam.participant.onBehalfOf can only be populated when CareTeam.participant.member is a Practitioner [onBehalfOf.exists() implies (member.resolve() is Practitioner)] (src = InstanceValidator)\n [java] ERROR @ CareTeam.participant[2]: careteam-example:: CareTeam.participant[2]: CareTeam.participant.onBehalfOf can only be populated when CareTeam.participant.member is a Practitioner [onBehalfOf.exists() implies (member.resolve() is Practitioner)] (src = InstanceValidator)\n [java] ERROR @ List (line 0, col0): list-example:: List: A date can only be used if the mode of the list is &quot;working&quot; [mode = &#39;working&#39; or entry.date.empty()] (src = InstanceValidator)\n [java] ERROR @ List: list-example:: List: A date can only be used if the mode of the list is &quot;working&quot; [mode = &#39;working&#39; or entry.date.empty()] (src = InstanceValidator)\n</pre></div>",
        "id": 153972956,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1530558876
    },
    {
        "content": "<p>I don't know anything about the careteam ones</p>",
        "id": 153972973,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530566826
    },
    {
        "content": "<p>I just fixed the other ones</p>",
        "id": 153972974,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530566833
    },
    {
        "content": "<p>Thanks, I'll try another build and see if that fixes all of them.  Nothing has changed with CareTeam -- and the example <em>should</em> be compliant with the invariant provided the expression is correctly written:  onBehalfOf.exists() implies (member.resolve() is Practitioner)</p>",
        "id": 153972976,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1530567128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>   There are some odd things gong on with the build.  <br>\n#1 - I saw you made a change to the careteam-example, but now the example isn't valid.  CareTeam.participant.onBehalfOf only supports a Reference(Organization), but you changed it to be a Reference(Practitioner).  I would have expected the build to fail.<br>\n#2 - I still get failures when doing a full build locally (without making any changes).  The errors are noted below, but there is a small theme around contained resource references.  For example, the errors are related to CareTeam invariant, which says if onBehalfOf is populated, then the member must be a Practitioner (and it is, but it is a reference to a contained practitioner).  I also see some errors related to contained references for PlanDefinition, too.</p>\n<blockquote>\n<p>[java] ERROR @ CareTeam.participant[2] (line 0, col0): careteam-example:: CareTeam.participant[2]: CareTeam.participant.onBehalfOf can only be populated when CareTeam.participant.member is a Practitioner [onBehalfOf.exists() implies (member.resolve() is Practitioner)] (src = InstanceValidator)</p>\n<p>[java] ERROR @ CareTeam.participant[2]: careteam-example:: CareTeam.participant[2]: CareTeam.participant.onBehalfOf can only be populated when CareTeam.participant.member is a Practitioner [onBehalfOf.exists() implies (member.resolve() is Practitioner)] (src = InstanceValidator)</p>\n<p>[java] ERROR @ PlanDefinition (line 0, col0): plandefinition-example-cardiology-os:: PlanDefinition: If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource [contained.all(('#'+id in (%resource.descendants().reference | %resource.descendants().as(canonical))) or descendants().where(reference = '#').exists() or descendants().where(as(canonical) = '#').exists())] (src = InstanceValidator)</p>\n<p>[java] ERROR @ C:\\buildTEST\\publish\\plandefinition-example-cardiology-os.xml (line 461, col59): plandefinition-example-cardiology-os:: C:\\buildTEST\\publish\\plandefinition-example-cardiology-os.xml: cvc-complex-type.2.4.a: Invalid content was found starting with element 'options'. One of '{\"http://hl7.org/fhir\":readOnly, \"http://hl7.org/fhir\":maxLength, \"http://hl7.org/fhir\":answerValueSet, \"http://hl7.org/fhir\":answerOption, \"http://hl7.org/fhir\":initial, \"http://hl7.org/fhir\":item}' is expected. (src = InstanceValidator)</p>\n<p>[java] ERROR @ PlanDefinition: plandefinition-example-cardiology-os:: PlanDefinition: If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource [contained.all(('#'+id in (%resource.descendants().reference | %resource.descendants().as(canonical))) or descendants().where(reference = '#').exists() or descendants().where(as(canonical) = '#').exists())] (src = InstanceValidator)</p>\n</blockquote>",
        "id": 153973133,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1530627344
    },
    {
        "content": "<p>Note:  It is odd that my build succeeds when committed, but still fails locally (with and without my changes applied).<br>\nUpon further investigation into the care team local build (only) failure, is this the correct xpath for an invariant that is trying to check that a reference is to Practitioner, specifically?</p>\n<blockquote>\n<p>xpath: starts-with(f:member/f:reference/@value, 'Practitioner/') or contains(f:member/f:reference/@value, '/Practitioner/') ....</p>\n</blockquote>\n<p>The thing that caught my attention was that a contained reference value doesn't have \"Practitioner\" in the path.  Is the build or xpath smart enough to recognize that #pr1 contained resource is a Practitioner resource?</p>\n<blockquote>\n<p>&lt;reference value=\"#pr1\"/&gt; </p>\n</blockquote>",
        "id": 153973139,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1530628333
    },
    {
        "content": "<p>RE:  \"<a href=\"http://build.fhir.org/extension-event-instantiatescanonical.html\" target=\"_blank\" title=\"http://build.fhir.org/extension-event-instantiatescanonical.html\">http://build.fhir.org/extension-event-instantiatescanonical.html</a> is an existing extension, but it just has a type of \"canonical\". Is that correct? I am questioning if it should have a type of \"canonical(ActivityDefinition | Measure | OperationDefinition | PlanDefinition | Questionnaire)\"\"</p>\n<p>It is unclear to me what this notation means,  canonical is a primitive and not a reference?   Does that limit your choices in validation, and where is this documented -( I looked and did not see it by the data-type)</p>",
        "id": 153973141,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530628581
    },
    {
        "content": "<p>FYI, I just applied the changes to the common event extension as described earlier.  I'm not sure where it is clearly defined, which is why I raised the question to begin with -- I had seen other instances where canonical has specific resources listed.  For example QuestionnaireResponse.questionnaire has type canonical(Questionnaire) only.  The awkward thing (I'll log a tracker) is that the resource types don't show up until you drill down into the details (<a href=\"http://build.fhir.org/questionnaireresponse-definitions.html#QuestionnaireResponse.questionnaire\" target=\"_blank\" title=\"http://build.fhir.org/questionnaireresponse-definitions.html#QuestionnaireResponse.questionnaire\">http://build.fhir.org/questionnaireresponse-definitions.html#QuestionnaireResponse.questionnaire</a>)</p>",
        "id": 153973142,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1530629003
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=17438\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=17438\">GF#17438</a> has been logged</p>",
        "id": 153973147,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1530630382
    },
    {
        "content": "<p>I'd be in favor of qualifying the canonical reference to the allowed types</p>",
        "id": 153973149,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530630471
    },
    {
        "content": "<p>how does this work - is it a binding with url as \"codes\"</p>",
        "id": 153973150,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530630574
    },
    {
        "content": "<p>because I've been tempted to do that in the recent past  (except I made codes for the types or profiles like we did for resource types)</p>",
        "id": 153973151,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530630659
    },
    {
        "content": "<p>targetProfile, the same as for Reference</p>",
        "id": 153973152,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530630922
    },
    {
        "content": "<p>Where it this documented?  (  I missed it)</p>",
        "id": 153973155,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530631921
    },
    {
        "content": "<p>Submitted a change proposal yesterday to update the documentation on ElementDefinition..targetProfile to make clear it can be used for canonical as well as Reference</p>",
        "id": 153973156,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530631978
    },
    {
        "content": "<p>(So I guess you're just not as on top of things as you should be ;))</p>",
        "id": 153973157,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530632005
    },
    {
        "content": "<p>as well as in the <a href=\"http://build.fhir.org/references.html\" target=\"_blank\" title=\"http://build.fhir.org/references.html\">http://build.fhir.org/references.html</a> page?</p>",
        "id": 153973158,
        "sender_full_name": "Eric Haas",
        "timestamp": 1530632030
    },
    {
        "content": "<p>Feel free to add a comment.  <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=17433\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=17433\">GF#17433</a></p>",
        "id": 153973159,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530632104
    },
    {
        "content": "<p>the CI build does not run the validation - it was taking too long and failing, so I had to turn it off. But that's not sustainable, since some committers are ignoring the validation errors locally</p>",
        "id": 153973219,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1530648523
    },
    {
        "content": "<p>Did you warn us about that?  I've been presuming that successful CI build means everything is fine...</p>",
        "id": 153973231,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530651342
    },
    {
        "content": "<p>How can I use xpath to check that a <em>contained</em> resource reference is a given resource type?  Currently, the invariant xpath is as follows, which I fear is failing on an example where the resource reference is contained (e.g. no \"Practitioner\" in the reference value).</p>\n<blockquote>\n<p>xpath: starts-with(f:member/f:reference/@value, 'Practitioner/') or contains(f:member/f:reference/@value, '/Practitioner/') ....</p>\n</blockquote>",
        "id": 153973715,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1530799543
    },
    {
        "content": "<p>or exists(ancestor::*/f:contains/f:Practitioner/f:id[@value=substring-after(current()/f:member/f:reference/@value, '#')])</p>",
        "id": 153973731,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1530800344
    }
]