[
    {
        "content": "<p>FYI, the build fails with an ungraceful null pointer exception when ValueSet resources lack a description even though ValueSet.description is 0..1. The problem starts in ValueSetValidator.VSDuplicateList() at line 44 with the call to splitByCamelCase(vs.getDescription()). I tried fixing splitByCamelCase() to gracefully handle null strings and just return a zero length string, which got past the initial error, but then other things broke downstream so the description dependency runs deeper that I thought. </p>\n<p>Anyway, I just added a description element to the value set in question and all went well, but we should probably decide to either a) fix the build or b) make ValueSet.description required. If the decision is to fix the build I don't mind taking a stab at it after Monday's Connectathon deadline, but figured it best not to rock the boat beforehand. </p>",
        "id": 153818350,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1459141967
    },
    {
        "content": "<p>it doesn't follow that since description is 0..1, the build should allow value sets without description, nor that because the build requires description, it should be 1..1</p>",
        "id": 153818355,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459145202
    },
    {
        "content": "<p>my solution would be to add an explicit validation rule that valuesets must have a description </p>",
        "id": 153818356,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1459145224
    },
    {
        "content": "<p>Grahame: Fair enough, at least then implementers would get a better error message than null pointer. </p>",
        "id": 153818384,
        "sender_full_name": "Rick Geimer",
        "timestamp": 1459176373
    }
]