[
    {
        "content": "<p>To <span class=\"user-mention\" data-user-id=\"*\">@all</span> FHIR Committers: prior to the September Connectathon+WGM, we're undertaking a <strong>migration of the FHIR source repository from GForge/subversion to GitHub</strong>. We expect this this transition will provide advantages for maintainability, including the ability to run automatic build status checks and request review and sign-off before merging code â€” as well as a much lower barrier for proposing small tweaks like spelling corrections. At the same time, we know there's a learning curve associated with git and with GitHub, so we're setting up documentation plus a team of helpers on Zulip (#committers/git-help) to ease the transition.</p>\n<p>To get started, please read \"Get Started with FHIR on GitHub\" (<a href=\"https://github.com/hl7-fhir/fhir-svn/wiki/Get-Started-with-FHIR-on-GitHub\" target=\"_blank\" title=\"https://github.com/hl7-fhir/fhir-svn/wiki/Get-Started-with-FHIR-on-GitHub\">preview here</a>) and fire off any questions here so we can start developing a FAQ and supporting docs :-)</p>",
        "id": 153993208,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536095994
    },
    {
        "content": "<p>short question about non- (or not yet) committers, will there be also a process supported for submitting patches trough a fork/pull workflow like described in <a href=\"https://gist.github.com/Chaser324/ce0505fbed06b947d962\" target=\"_blank\" title=\"https://gist.github.com/Chaser324/ce0505fbed06b947d962\">https://gist.github.com/Chaser324/ce0505fbed06b947d962</a> ?</p>",
        "id": 153993565,
        "sender_full_name": "Oliver Egger",
        "timestamp": 1536176525
    },
    {
        "content": "<p>I think we'd like to get there.  We'll probably need to tie that into Jira so we've got a single point of traceability for change submissions.  (So likely a \"phase 2\" thing.)</p>",
        "id": 153993574,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536177590
    },
    {
        "content": "<p>Yes -- any committer will be able to shepherd an external PR.</p>",
        "id": 153993575,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536177605
    },
    {
        "content": "<p>That's the technical answer. In terms of policy, we will have to develop guidance about when this is good/expected (e.g., anyone contributing content may need to agree to a contributor license before their content can be incorporated).</p>",
        "id": 153993576,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536177681
    },
    {
        "content": "<p>So far we've focused on supporting our existing svn contribution model.</p>",
        "id": 153993577,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536177715
    },
    {
        "content": "<p>Okay -- we've made the cutover! <a href=\"http://github.com/hl7/fhir\" target=\"_blank\" title=\"http://github.com/hl7/fhir\">http://github.com/hl7/fhir</a> is live and ready for your PRs (assuming you follow <a href=\"https://github.com/HL7/fhir/wiki/Get-Started-with-FHIR-on-GitHub\" target=\"_blank\" title=\"https://github.com/HL7/fhir/wiki/Get-Started-with-FHIR-on-GitHub\">https://github.com/HL7/fhir/wiki/Get-Started-with-FHIR-on-GitHub</a>)</p>",
        "id": 153994354,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536343013
    },
    {
        "content": "<p>You should change the project description <code>Mirrors the FHIR SVN repo (via git-svn)</code> since it isn't exactly true anymore.</p>",
        "id": 153994391,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1536349861
    },
    {
        "content": "<p>Also, the build is still trying the read the SVN number from the repo. So that will need to be fixed.</p>",
        "id": 153994400,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1536352235
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>     [java] Warning @ Unable to read the SVN version number: svn: E155007: &#39;/Users/jwalonoski/git/fhir&#39; is not a working copy\n</pre></div>",
        "id": 153994401,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1536352275
    },
    {
        "content": "<p>I'm not sure what to do about that. Under svn, the build number allows you to reconstruct the source used to produce the build. We need an equivalent in git</p>",
        "id": 153994406,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536353221
    },
    {
        "content": "<p>I humbly suggest that you could use the git commit number. In Synthea we shell out the command <code>git describe --tags --always</code> which returns the commit hash, and you can use that as your build number.</p>",
        "id": 153994411,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1536353651
    },
    {
        "content": "<p>I'm using the commit hash (--short) on the CI build already</p>",
        "id": 153994423,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536354657
    },
    {
        "content": "<p>See the bottom line of <a href=\"http://build.fhir.org\" target=\"_blank\" title=\"http://build.fhir.org\">http://build.fhir.org</a></p>",
        "id": 153994425,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536354687
    },
    {
        "content": "<p>This allows rebuilding by anyone with the source, very straightforward as Jay suggests.</p>",
        "id": 153994429,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536354744
    },
    {
        "content": "<p>I need to do the same for the PR builds (though they're not published anywhere for the moment, so it doesn't matter yet).</p>",
        "id": 153994430,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536354793
    },
    {
        "content": "<p>what did you change for the CI Build?</p>",
        "id": 153994432,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536354905
    },
    {
        "content": "<p>Using the git commit hash as the version argument to the publish script, so it appears in the output</p>",
        "id": 153994433,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536354950
    },
    {
        "content": "<p>(this is just in the VSTS config, so not visible in GitHub directly right now.)</p>",
        "id": 153994434,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536354976
    },
    {
        "content": "<p>I'm really really going to miss a linear build number. I think it's a genuinely big issue. I can't tell you how much the derivative eco-system depends on build number.</p>",
        "id": 153994435,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536354981
    },
    {
        "content": "<p>can we make the PR system define a serially incrementing number on the trunk?</p>",
        "id": 153994436,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536355007
    },
    {
        "content": "<p>We should be tagging with numbers whenever we want this kind of behavior.</p>",
        "id": 153994438,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355021
    },
    {
        "content": "<p>we want this behavior on every commit to the trunk, and then to be picked up on every branch derived from the trunk</p>",
        "id": 153994439,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536355061
    },
    {
        "content": "<p>Not easily; I don't think we should try this, since there will be ways to slip through the cracks.</p>",
        "id": 153994440,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355064
    },
    {
        "content": "<p>well, easy to say for you, who aren't so harmed by the lack of it. It's a <em>big deal</em> for me</p>",
        "id": 153994441,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536355088
    },
    {
        "content": "<p>I'm just saying I've never seen this done in Git, and I'm wary of trying to invent a new strategy here. Does anyone here have experience with this?</p>",
        "id": 153994449,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355223
    },
    {
        "content": "<p>and you must have made some changes in the java code for the CI build? but I bet you just broke all the rest of the build, the non-visual parts... what change did you make?</p>",
        "id": 153994450,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536355229
    },
    {
        "content": "<p>There was a one line change -- one sec</p>",
        "id": 153994451,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355270
    },
    {
        "content": "<p>Never mind -- <a href=\"https://github.com/HL7/fhir/pull/14\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pull/14\">https://github.com/HL7/fhir/pull/14</a> wasn't merged yet. So, not sure what you're referring to, but \"git diff\" will show you recent changes</p>",
        "id": 153994455,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355366
    },
    {
        "content": "<p>And \"git log -p\" will show you all commits with code changes inline.</p>",
        "id": 153994457,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355402
    },
    {
        "content": "<p>I</p>",
        "id": 153994458,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536355413
    },
    {
        "content": "<p>I'm rapidly falling back to the hate git thing again.  I don't know how I'm going to get by without the serially incrementing number. I already have enough trouble trying to keep things together</p>",
        "id": 153994462,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536355474
    },
    {
        "content": "<p>and I hate the command line</p>",
        "id": 153994463,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536355486
    },
    {
        "content": "<p>I'm assuming we don't have to use the commandline - that we can use tortoisegit the way we used svn.  That's what I did with IGs - though I guess I never needed to do pull requests there...</p>",
        "id": 153994464,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536355530
    },
    {
        "content": "<p>all the documentation is command line based, and I think that for some of it, that's the only way to do things</p>",
        "id": 153994465,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536355556
    },
    {
        "content": "<p>Well, please keep the questions flowing on <a class=\"stream\" data-stream-id=\"138\" href=\"/#narrow/stream/138-committers.2Fgit-help\">#committers/git-help</a></p>",
        "id": 153994467,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355611
    },
    {
        "content": "<p>We'll do our best to push over the pain of the transition.</p>",
        "id": 153994468,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355627
    },
    {
        "content": "<p>right now I'm not feeling that 'suck it up' is the best help with regard to the build number</p>",
        "id": 153994469,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536355655
    },
    {
        "content": "<p>we have downstream synchronization code that depends on knowing whether the build number is more recent than a given fixed value</p>",
        "id": 153994473,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536355696
    },
    {
        "content": "<p>I'm open to ideas; tagging is the closest thing I know to what you're asking about.</p>",
        "id": 153994474,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355718
    },
    {
        "content": "<p>That's a very common approach for marking explicit releases.</p>",
        "id": 153994475,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355737
    },
    {
        "content": "<p>Otherwise, we can point to code that tells you whether one revision comes before another...</p>",
        "id": 153994477,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355761
    },
    {
        "content": "<blockquote>\n<p>code that tells you whether one revision comes before another</p>\n</blockquote>\n<p>would have to go look in the git history?</p>",
        "id": 153994479,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536355800
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/a/13526591\" target=\"_blank\" title=\"https://stackoverflow.com/a/13526591\">https://stackoverflow.com/a/13526591</a></p>",
        "id": 153994480,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355812
    },
    {
        "content": "<p>Right</p>",
        "id": 153994481,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355815
    },
    {
        "content": "<p>How does the current code work? How does it know the svn revision of the build it's working with?</p>",
        "id": 153994483,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355921
    },
    {
        "content": "<p>the current code looks it up from svn</p>",
        "id": 153994484,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536355936
    },
    {
        "content": "<p>Okay, so it has access to the repository</p>",
        "id": 153994485,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355999
    },
    {
        "content": "<p>Okay, so it has access to the repository</p>",
        "id": 153994486,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536355999
    },
    {
        "content": "<p>what we're saying is that we're going from a system where you could just know how recent the base of the code was, to a system where you can only establish this by looking it up in git</p>",
        "id": 153994487,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536356007
    },
    {
        "content": "<p>Ok, so it  has access to the repository, similar to what you'd need with git.</p>",
        "id": 153994488,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356021
    },
    {
        "content": "<p>the build always runs in the context of a version control system. if you tried to remove it from an svn context, it would fail.</p>",
        "id": 153994489,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536356048
    },
    {
        "content": "<p>well, actually, the build would work, but anything downstream would fail. I will start getting failure reports pretty soon, acually</p>",
        "id": 153994490,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536356086
    },
    {
        "content": "<p>Apparently, this is controversial, but I submitted a pull request <a href=\"https://github.com/HL7/fhir/pull/17\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pull/17\">https://github.com/HL7/fhir/pull/17</a> to use the hash.</p>",
        "id": 153994491,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1536356089
    },
    {
        "content": "<p>We can sort of fix this...</p>",
        "id": 153994492,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1536356096
    },
    {
        "content": "<p><code>git rev-list --count HEAD</code></p>",
        "id": 153994493,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1536356100
    },
    {
        "content": "<p>That will tell you the sequence number of the last commit.</p>",
        "id": 153994494,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1536356116
    },
    {
        "content": "<p>Cool -- what's a sequence number?</p>",
        "id": 153994495,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356147
    },
    {
        "content": "<p>The pull request I submitted will output something like <code>Version 3.5.0-4b6f35af3b</code>, but using the above command it would become <code>Version 3.5.0-11949</code></p>",
        "id": 153994496,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1536356163
    },
    {
        "content": "<p>And does this change or break with shallow clones?</p>",
        "id": 153994497,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356174
    },
    {
        "content": "<p>It is literally the length of the commit log. Regarding breaks -- don't know to be honest. Never had to deal with this before.</p>",
        "id": 153994498,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1536356221
    },
    {
        "content": "<p>well, I'm screwed either way.</p>",
        "id": 153994499,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536356284
    },
    {
        "content": "<p>I'd be careful with this. I worry it's going to be a bit context dependent, but we should explore.</p>",
        "id": 153994500,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356298
    },
    {
        "content": "<p>Hey, are you saying you want to switch back?</p>",
        "id": 153994501,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356314
    },
    {
        "content": "<p>We're only 5h into this; easy enough to reverse.</p>",
        "id": 153994502,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356337
    },
    {
        "content": "<p>I don't want to reverse. You've done a lot of work, and we have to make the transition.</p>",
        "id": 153994503,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536356370
    },
    {
        "content": "<p>but I don't know how I'm going to deal with this going forward</p>",
        "id": 153994504,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536356381
    },
    {
        "content": "<p>I think it changes depending on the branch. But so long as official builds are always built from <code>master</code> it should be fine. <a href=\"https://stackoverflow.com/questions/4120001/what-is-the-git-equivalent-for-revision-number\" target=\"_blank\" title=\"https://stackoverflow.com/questions/4120001/what-is-the-git-equivalent-for-revision-number\">https://stackoverflow.com/questions/4120001/what-is-the-git-equivalent-for-revision-number</a></p>",
        "id": 153994505,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1536356391
    },
    {
        "content": "<p>so we can't get the PR build to do anything to generate something into the commit that follows the PR build?</p>",
        "id": 153994509,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536356458
    },
    {
        "content": "<p>Jay, if you do a shallow clone, does the count go down? (I'd try but I'm on mobile right now.(</p>",
        "id": 153994511,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356554
    },
    {
        "content": "<p>You could try to, like, write a file -- but there's race conditions there.</p>",
        "id": 153994512,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356615
    },
    {
        "content": "<p>We could automatically tag each new commit with an increasing number</p>",
        "id": 153994513,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356643
    },
    {
        "content": "<p>I can think about the race conditions. but how would we write a file?</p>",
        "id": 153994514,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536356650
    },
    {
        "content": "<blockquote>\n<p>We could automatically tag each new commit with an increasing number</p>\n</blockquote>",
        "id": 153994515,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536356662
    },
    {
        "content": "<p>Amending each PR before merging (yuck).</p>",
        "id": 153994516,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356669
    },
    {
        "content": "<p>how would we do that? commits to trunk?</p>",
        "id": 153994517,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536356678
    },
    {
        "content": "<p>But if your key question is \"does A come before B,\" I want to understand why git ancestor tests don't work.</p>",
        "id": 153994518,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356695
    },
    {
        "content": "<p>because in the context where I do the test, I don't have access to git, or even necessarily the web</p>",
        "id": 153994519,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536356725
    },
    {
        "content": "<p>You'd try something like a script to modify every PR branch before merging it. (I definitely don't like this idea.)</p>",
        "id": 153994520,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356739
    },
    {
        "content": "<p>You don't need the web...</p>",
        "id": 153994522,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356754
    },
    {
        "content": "<p>several key places in derivative tools checking for currency</p>",
        "id": 153994523,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536356755
    },
    {
        "content": "<p>Can you share more about the context?</p>",
        "id": 153994524,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356765
    },
    {
        "content": "<p>Shallow clone messes up the <code>rev-list</code> result.</p>",
        "id": 153994525,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1536356777
    },
    {
        "content": "<p>Okay, thanks Jay!  It's not necessarily terrible, but important to know what we're dealing with.</p>",
        "id": 153994526,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536356815
    },
    {
        "content": "<p>the technical output from the build is marked with the build version. As is the same output from the local build. it goes in each page, it goes in the IGpublisher, and it goes in the packages that get produced. </p>\n<p>It's  common discussion for me to have with people: what version of (<a href=\"http://build.fhir.org\" target=\"_blank\" title=\"http://build.fhir.org\">build.fhir.org</a>) are you using, what version of the ig publisher are you using. we would say 13800 or more recent. </p>\n<p>Then, there's a file <a href=\"http://build.fhir.org/package-min-ver.json\" target=\"_blank\" title=\"http://build.fhir.org/package-min-ver.json\">http://build.fhir.org/package-min-ver.json</a> that tells all my tooling what's the minimum acceptable build version for any packages/caches linked to the current  build. if I set that to the next version when committing, then all of the packages/caches will be wiped (that one does depend on web access, people off the web won't pick up the fix anyway)</p>\n<p>I'm not sure that's the full list....</p>",
        "id": 153994528,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536357036
    },
    {
        "content": "<p>how do you think that that currency discussion will work?</p>",
        "id": 153994530,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536357062
    },
    {
        "content": "<p>it's possible, given that the package-min-ver system requires web access anyway, it's possible I could just work around it</p>",
        "id": 153994531,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536357085
    },
    {
        "content": "<blockquote>\n<p>if I set that to the next version when committing, then</p>\n</blockquote>\n<p>This is the crux of it. With git and PRs, you can't know what the next revisions will be; someone else could merge first. (That said, in think the same is true for svn...)</p>",
        "id": 153994532,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536357277
    },
    {
        "content": "<p>Hmm.</p>",
        "id": 153994533,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536357319
    },
    {
        "content": "<p>yes there's a risk of that. it hasn't been a problem in practice</p>",
        "id": 153994534,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536357324
    },
    {
        "content": "<p>I mean, you could certainly Express something like \"expire any caches associated with commits equal to or earlier than d472be2a\" (where that's the current master), even without knowing what the next is.</p>",
        "id": 153994536,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536357434
    },
    {
        "content": "<p>how can I express that?</p>",
        "id": 153994537,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536357451
    },
    {
        "content": "<p>In the semantics of your min-ver file.</p>",
        "id": 153994538,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536357479
    },
    {
        "content": "<p>You'd have a property like \"must-be-newer-than\".</p>",
        "id": 153994539,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536357513
    },
    {
        "content": "<p>Otherwise, I think explicit tags is best</p>",
        "id": 153994540,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536357524
    },
    {
        "content": "<p>alright, I asked the wrong question. I'm a tool, I've got a hash code from min-ver. I want to know whether some other hash code is newer or older than the hash code from min-ver...</p>",
        "id": 153994541,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536357536
    },
    {
        "content": "<p>how?</p>",
        "id": 153994542,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536357539
    },
    {
        "content": "<p>Especially if you don't need to reference every single commit this way</p>",
        "id": 153994543,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536357543
    },
    {
        "content": "<p>The hash comparison only works if you have a git repo with history.</p>",
        "id": 153994544,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536357580
    },
    {
        "content": "<p>Otherwise, this is really what tags are for</p>",
        "id": 153994545,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536357590
    },
    {
        "content": "<p>When you're making changes, you can explicitly define a tag that you want to apply to the commit on master, and then when your changes land on master, you apply the tag.</p>",
        "id": 153994546,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536357642
    },
    {
        "content": "<p>The tags can be simple integers, or follow whatever pattern you like.</p>",
        "id": 153994547,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536357668
    },
    {
        "content": "<p>as for humans, here's a super common work flow for - probably averages 3 times week, but as publication approaches, can be 1/hr on average:</p>\n<p>a. user X reports an issue to me. They're hanging out for a fix<br>\nb. I figure out the issue, commit something. I get a commit number<br>\nc. I tell them to wait until the commit number is built (by checking <a href=\"http://build.fhir.org\" target=\"_blank\" title=\"http://build.fhir.org\">build.fhir.org</a>)<br>\nd. once it clicks over, they're fixed and good to go</p>\n<p>I think that the work flow for this is now... absent</p>",
        "id": 153994548,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536357680
    },
    {
        "content": "<p>(You could point them to the PR that fixed the issue and they could get the commit hashes etc from there, but agreed it's more work.)</p>",
        "id": 153994550,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536357783
    },
    {
        "content": "<p>but they won't know when it's built anyway, because how will they know when the build is derived from the trunk that has that PR?</p>",
        "id": 153994551,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536357842
    },
    {
        "content": "<p>The PR will show the merge. The merge commit hash will appear on <a href=\"http://build.fhir.org\" target=\"_blank\" title=\"http://build.fhir.org\">build.fhir.org</a></p>",
        "id": 153994552,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536357934
    },
    {
        "content": "<p>transiently. some other one will probably overwrite it a little later. then what?</p>",
        "id": 153994553,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536357958
    },
    {
        "content": "<p>I'm sorry, but this seems so fundamental to me. how can this be hard?</p>",
        "id": 153994554,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536357990
    },
    {
        "content": "<p>I think it's the price for branching and merging to be easy; you lose linearity.</p>",
        "id": 153994555,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536358101
    },
    {
        "content": "<p>I thought we added *.class to gitIgnore</p>",
        "id": 153994556,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536358109
    },
    {
        "content": "<p>I'm not asking for linearity outside the head</p>",
        "id": 153994557,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536358116
    },
    {
        "content": "<p>presumably I'm just stupid because I think that there's workflow associated with the linearity of the head, which does exist.</p>",
        "id": 153994560,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536358161
    },
    {
        "content": "<p>I thought we did too. Just merged <a href=\"https://github.com/HL7/fhir/pull/15\" target=\"_blank\" title=\"https://github.com/HL7/fhir/pull/15\">https://github.com/HL7/fhir/pull/15</a> now.</p>",
        "id": 153994561,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536358166
    },
    {
        "content": "<p>to think that people actually care</p>",
        "id": 153994562,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536358170
    },
    {
        "content": "<p>FWIW, I set up GitHub to ensure that master stays linear; it's a protected branch and only allows \"squash\" merges, so each PR becomes one single commit on master.</p>",
        "id": 153994563,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536358237
    },
    {
        "content": "<p>there's some other option?</p>",
        "id": 153994564,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536358271
    },
    {
        "content": "<p>I was about to ask what squash meant</p>",
        "id": 153994565,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536358280
    },
    {
        "content": "<p>It's an option in the GH settings, to limit the types of merges allowed.</p>",
        "id": 153994566,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536358315
    },
    {
        "content": "<p>Squash keeps things linear, and compresses multiple commits into one when merging a PR.</p>",
        "id": 153994567,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536358336
    },
    {
        "content": "<p>another issue - I suppose we are using a standard git/zulip bot. is it really value to have a topic per branch? (when we have a branch per pull request). that's also horrible. Is that a Zulip issue?</p>",
        "id": 153994681,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536363078
    },
    {
        "content": "<p>It makes sense when pull requests are going to get reviewed and might be commented on.  It doesn't make much sense when they're auto-committed on success (and failure is noted elsewhere)</p>",
        "id": 153994705,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536367534
    },
    {
        "content": "<p>we're not auto-committing on success. that's not even in the plan.</p>",
        "id": 153994706,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536367593
    },
    {
        "content": "<p>it's just part of the increased workload for using git - a lot more than i expected.</p>",
        "id": 153994707,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536367612
    },
    {
        "content": "<p>Why would we <em>not</em> auto-commit on success if it's possible?  Once we have content that requires approvals, sure.  But until then, it's a needless no-value step.</p>",
        "id": 153994715,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536367914
    },
    {
        "content": "<p>You've both committed and pushed.  Both are clear signals that you want it in the master.  What's the value of a third confirmation that \"yes, I really really really want this in the master\"?</p>",
        "id": 153994716,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536367962
    },
    {
        "content": "<p>you are talking about commits by users authorised to approve pull requests.</p>",
        "id": 153994718,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536368018
    },
    {
        "content": "<p>I identified this as an issue earlier, but Josh said it wasn't possible? normal?</p>",
        "id": 153994719,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536368042
    },
    {
        "content": "<p>it just seems like yet another way to have an inefficient workflow to me.</p>",
        "id": 153994720,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536368064
    },
    {
        "content": "<p>So the intention is that someone is reviewing all commits now?</p>",
        "id": 153994722,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536368178
    },
    {
        "content": "<p>I used to review all commits. It stopped being possible a long time ago</p>",
        "id": 153994723,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536368209
    },
    {
        "content": "<p>Right.  So we're <em>not</em> reviewing all commits?</p>",
        "id": 153994724,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536368225
    },
    {
        "content": "<p>Because if we're not reviewing them, then anyone who was a committer on gForge should be able to auto-push to master</p>",
        "id": 153994725,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536368263
    },
    {
        "content": "<p>Obviously that can't fly for commits from the public which we'll have to review.</p>",
        "id": 153994726,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536368289
    },
    {
        "content": "<p>here's a super common work flow for me:<br>\n- user reports an issue<br>\n- I make a fix and go on with what I'm doing<br>\n- I debug the fix next time I run the build for whatever I'm doing<br>\n- I confirm that the fix works<br>\n- I commit the fix </p>\n<p>now that we've moved to git, I think the work flow becomes:<br>\n- create a new local clone with a named branch<br>\n-  open it as a new workarea in eclipse<br>\n- configure the output from the work area<br>\n- make the fix<br>\n- run under the debugger &amp; confirm fixed. <br>\n- don't build on the other workarea (computer can't take 2 builds)<br>\n- commit/pullrequest/approve pull request</p>\n<p>I can't do this. It has to be easier. I'm tapped to the limit, and it's already a problem...</p>",
        "id": 153994727,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536368320
    },
    {
        "content": "<p>Can you commit something to a branch that's not currently open?</p>",
        "id": 153994729,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536368387
    },
    {
        "content": "<p>It may be better to just have \"branch of stuff I'm doing today\" and commit to that and push when ready.  Saves switching branches.</p>",
        "id": 153994730,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536368446
    },
    {
        "content": "<p>but I don't work like that. the stuff I'm doing today is typically an interlacing of <br>\n- a big project i'm carrying forward (often take many days)<br>\n- small things I'm rolling over as I have a chance to look at them<br>\n- urgent fixes for people</p>",
        "id": 153994732,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536368535
    },
    {
        "content": "<p>I was going to try \"just have \"branch of stuff I'm doing today\" and commit to that and push when ready\" but josh says not to use a branch after a merge from it... so that's not really possible</p>",
        "id": 153994733,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536368588
    },
    {
        "content": "<p>So the issue for you is you'll have a whole bunch of uncommitted stuff while you want to make a commit and a push, but really don't want to switch branches.</p>",
        "id": 153994734,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536368628
    },
    {
        "content": "<p>If you could \"commit to branch X\", that could work for you.  Though this is probably a better discussion to have on the <a class=\"stream\" data-stream-id=\"138\" href=\"/#narrow/stream/138-committers.2Fgit-help\">#committers/git-help</a> thread where people are supposed to be monitoring who can answer whether that's possible...</p>",
        "id": 153994735,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536368684
    },
    {
        "content": "<p>I don't mind switching branches, but what I'm undestanding right now is that it isn't really possible to a clone locally and just commit bits of it to whatever branch I want.</p>",
        "id": 153994737,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536371254
    },
    {
        "content": "<p>You can create and commit to as many local branches as you want. And then push those separate branches with their commits to origin (your clone), and generate pull requests and merge them to master whenever ready. You should be able to work it out so you can keep working on the big project branches for as long as you need to, and open, push and close the smaller branches separately in parallel with that. I think that might be mostly what you want and need - but there may be more.</p>",
        "id": 153994743,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536384468
    },
    {
        "content": "<p>what it appears to me is that I can only do that from different clones on my local drive. if I can do that from a single clone... please explain</p>",
        "id": 153994775,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536443926
    },
    {
        "content": "<p>back to the build version thing: it's possible that I can replace the linear build version thing in the code with simply updating the fhir version (e.g. 3.6.0 --&gt; 3.6.1). It's possible I <em>should</em> do it that way. But it takes me about 90min  to change the version, instead of 20secs with the old way. I think that's pretty significant. It's possible I could reduce that, with practice - it happens rarely now, partly because it takes so long - but it does have a long sting in the tail for me. </p>\n<p>But whatever, the fact that we don't have a linearly increasing build version will cost me a lot of time. And I still have no idea how I can tell someone 'I committed a fix, when x happens, the fix is available to you'</p>",
        "id": 153994776,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536444302
    },
    {
        "content": "<p>You only need one clone; you can switch quickly back and forth between branches by using the \"git checkout\" command. This is perhaps the quintessential feature of git.</p>",
        "id": 153994797,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536461727
    },
    {
        "content": "<p>Can you say more about where the 90 minutes comes from? If you're willing to manually update something in the code base, then using that manual effort to update something as simple as a text file with a version number might be able to achieve the same thing.</p>",
        "id": 153994798,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536461826
    },
    {
        "content": "<p>The use-case Grahame has described is that he wants to be able to work in one directory (and build against that one directory) without switching branches while committing and pushing subsets of the content from that directory.  Is that possible?  I do the same thing, though not nearly with the frequency Grahame does.</p>",
        "id": 153994803,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536463599
    },
    {
        "content": "<p>I didn't follow the exact use case. If the question is \"can I push subsets of updated content,\" then sure. A given commit only has whatever you <code>git add</code> to put in it. So if you've changed 10 files but only want to push up 3 of them, you can <code>git add f1.txt f2.txt f3.txt</code> and then <code>git commit</code> and the <code>git push</code>.</p>",
        "id": 153994804,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536463717
    },
    {
        "content": "<p>This is more commonly changed files rather than added ones.  The issue is the prohibition against multiple pushes of the same branch</p>",
        "id": 153994806,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536464117
    },
    {
        "content": "<p>How can I have a bunch of changed files in my folder, commit and push a subset, keep working, commit and push a different subset, etc.</p>",
        "id": 153994807,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536464154
    },
    {
        "content": "<p>What do you mean, \"prohibition against multiple pushes of the same branch\"?</p>",
        "id": 153994810,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536465010
    },
    {
        "content": "<p>You can just do exactly as you've said: commit and push, commit and push,</p>",
        "id": 153994811,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536465049
    },
    {
        "content": "<p>It looks like:</p>\n<p>1. Change 10 files<br>\n2. Commit the first few via <code>git add f1 f2 f3; git commit -m \"some initial changes\"; git push</code><br>\n3. Later repeat with f4...f10.</p>",
        "id": 153994812,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536465075
    },
    {
        "content": "<p>But I thought you said we weren't supposed to push multiple times with the same branch?</p>",
        "id": 153994813,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536465677
    },
    {
        "content": "<p>Because what gets pushed should get merged right away</p>",
        "id": 153994814,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536465688
    },
    {
        "content": "<p>What I tried to say was: once you merge a branch into master, don't keep pushing to it.</p>",
        "id": 153994815,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536466264
    },
    {
        "content": "<p>Before you merge it, you should free free to organize your workflow in whatever manner suits you.</p>",
        "id": 153994816,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536466281
    },
    {
        "content": "<p>Right.  And what Grahame wants to do is commit some stuff and merge it, then commit more stuff and merge it, etc.  Without switching branches</p>",
        "id": 153994817,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536467933
    },
    {
        "content": "<p>Can you commit content to a branch you're not in?</p>",
        "id": 153994818,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536467944
    },
    {
        "content": "<p>Or alternatively can you move where you currently are to being a different branch while having uncommitted content?</p>",
        "id": 153994819,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536468004
    },
    {
        "content": "<p>E.g. Work in a \"working\" branch that's never committed.  Then decide \"oh, I want to commit some stuff\", so clone/move to a new branch, commit a few things, push and (auto)merge.  Then work some more.  Then clone/move to a new branch, commit a few things, push and (auto)merge</p>",
        "id": 153994821,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536468109
    },
    {
        "content": "<p>yes, if you stash the changed content before you switch to a different branch<br>\nthen you can pop or apply the stashed changes when you are ready to come back and continue working on them</p>",
        "id": 153994822,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536468315
    },
    {
        "content": "<p>I'm having trouble following. In general, you shouldn't be working with more than one local clone at a time.</p>",
        "id": 153994823,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536468331
    },
    {
        "content": "<p>And yes, as Rob says: between stashing (<code>git stash</code>) and checking out various branches it's pretty easy to jump around.</p>",
        "id": 153994824,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536468398
    },
    {
        "content": "<p>For getting to know git though, I'd highly recommend committing (even without pushing) rather than stashing, to make sure you have an explicit handle on the work you've done so it's easier to pick up later.</p>",
        "id": 153994825,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536468461
    },
    {
        "content": "<p>agree with Josh - but there might be some times where you would want to stash rather than commit (as discussed in the Git documentation) - and you have the ability to do either one</p>",
        "id": 153994826,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536468624
    },
    {
        "content": "<p>I'm generally inclined to commit, too - I've only rarely used stash (so far)</p>",
        "id": 153994827,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536468833
    },
    {
        "content": "<p>The key thing is that Grahame (and others) may be working on multiple problems at once.  So they're not working in a problem-specific branch.  They're working in mainline or a \"get stuff done\" branch that's never committed.  Given that, how do you commit and push multiple branches?</p>",
        "id": 153994829,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536469317
    },
    {
        "content": "<p>You want to be able to build with all of the changes you're working on, but push and merge them separately</p>",
        "id": 153994830,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536469364
    },
    {
        "content": "<p>I have a local clone. It's really hard for me to create another local clone because I have all sorts of tools, bookmarks, etc tied to the local location of that clone. (which is c:\\work\\org.hl7.fhir\\build, a path everyone will have seen at some time or other). I typically have multiple things going on in that workspace. Under svn, I just committed the things I wanted to commit when I wanted to commit. </p>\n<p>What I haven't figured out with Git is: how do I do this? It seems that my clone is tied to a single branch, and I can't commit to another branch locally without some... operation.. of some sort that might or might not trash what I'm doing. </p>\n<p>When <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> sold me on it, it was because I'd get more control over how to commit my work, but right now it seems that I have a lot less</p>",
        "id": 153994847,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536490956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> updating the version number takes 90min - more, actually - because of all the things that have to be done in sync with each other when I change the version number.</p>",
        "id": 153994850,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536491366
    },
    {
        "content": "<p>here's the instructions:</p>",
        "id": 153994851,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536491374
    },
    {
        "content": "<p>; see the version policy in versions.html, and consult the FHIR Product Director before changing this.<br>\n1# update, make sure you have the latest copy, and make sure that the java reference implementation is synced<br>\n2#. do a successful build<br>\n3# make the version change, and make an entry in build\\source\\history.html<br>\n3a# and replace any occurances of he old version in the xml files in \\source and \\guide unless they are specifically referring to a past version (e.g. not in history.html)<br>\n4#. start a build<br>\n5#. when the build fails, copy the java reference to the tools (use \\build\\tools\\java\\compare-current-generated-code.bat)<br>\n6# run the build again<br>\n7# now upgrade the terminology server for the new build, and run it locally<br>\n8# now delete the terminology cache, and run the build again against the local terminology server<br>\n9# update the version of tools\\html\\package-min-ver.json to force the current fhir package to be reloaded everywhere<br>\n10# now commit everything</p>",
        "id": 153994852,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536491462
    },
    {
        "content": "<p>it's possible that now the conformance resources are finally frozen, I can reduce the length of this list. I'm not sure right now, and now is not a time for things to blow up with regard to this</p>",
        "id": 153994853,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536491535
    },
    {
        "content": "<p>Thanks for spelling that out -- I'm not sure where to go with the version update story, because I don't really know about most of these pieces. Does anyone else (besides you Grahame) ever follow these steps?</p>",
        "id": 153994855,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536497016
    },
    {
        "content": "<p>Re: branches, git is very flexible here. But blindly committing a change to a branch you don't have open is... not making a ton of sense to me. Can you give an example of the kind of thing you have in mind?</p>",
        "id": 153994856,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536497384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> The only operation you need for switching to commit to different branches of your single local clone is 'git checkout', in combination with committing first before you checkout and switch to a different branch or using 'git stash' to save the state of your work (including 'git stash -u' or 'git stash -a' if you also want to save the state of untracked or even \"ignored\" files).</p>",
        "id": 153994862,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536503534
    },
    {
        "content": "<p>The workflow in SVN is I have a single working folder.  I can be working on many problems at once in that working folder and when I build, I build with all of the changes made.  I can then commit subsets of them at will to the master.  With Git, the \"preferred\" approach is that you solve each problem in a separate branch and do a local gen, commit and push separately for each branch.  But the problem with that is the local gen.  It can take anywhere from 30-45 minutes.  And while it's running, you can't mess around switching branches.  The result is that the idea of one problem, one branch is a non-starter.  But there's still a need to commit and push incrementally.  And yes, that means that you're committing content where you haven't done a local build where that content is the <em>only</em> thing that's change.  For some people, that's dangerous.  Even Grahame will occasionally mess it up.  But that's what the CI Build process is for.  If the local build took 2 minutes, we wouldn't be having this conversation.</p>",
        "id": 153994867,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536506928
    },
    {
        "content": "<p>So the svn process isn't \"safe\" in the sense that you're pushing subsets of a complete change set that haven't been individually tested. If you're willing to do this, then pushing untested code to a GitHub branch should be strictly better (since at least tests will run remotely). In other words, if you're comfortable skipping the local build then you don't take the 30 minute hit.</p>",
        "id": 153994883,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536511592
    },
    {
        "content": "<p>What's the process for making that scenario happen?  I.e. how can I work in a folder with multiple changes and commit/push/auto-merge a subset of those changes?</p>",
        "id": 153994889,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536518836
    },
    {
        "content": "<p>From above...</p>",
        "id": 153994924,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536527700
    },
    {
        "content": "<p>It looks like:</p>\n<p>1. Change 10 files<br>\n2. Commit the first few via <code>git add f1 f2 f3; git commit -m \"some initial changes\"; git push</code><br>\n3. Later repeat with f4...f10.</p>",
        "id": 153994925,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536527703
    },
    {
        "content": "<p>where's the branch switch?</p>",
        "id": 153994926,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536527730
    },
    {
        "content": "<p>Note that there has to be a merge right after the git push - the whole point of the commit is to get the content into the CI build.</p>",
        "id": 153994932,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536528043
    },
    {
        "content": "<p>We're going in circles, probably because I don't understand the use case yet. But once you merge, you don't want to keep pushing commits to a remote branch</p>",
        "id": 153994958,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536529187
    },
    {
        "content": "<blockquote>\n<p>you don't want to keep pushing commits to a remote branch</p>\n</blockquote>\n<p>but your advice was to repeat with f4..f10. We are going in circles, but the use case seems pretty basic to me: I am doing different things at the same time, and I want to commit one cause it's done (and other people are waiting for it) while I continue working on the other. In all the time I've been working with version control, this is basic workflow # 2</p>",
        "id": 153994959,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536529431
    },
    {
        "content": "<p>I use stash to save out my local changes, create the branch to commit, stash pop, commit only what I want to on that branch, then stash the rest again to switch back to master and stash pop.</p>",
        "id": 153995060,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1536541328
    },
    {
        "content": "<p>the thing that's problematic for me is that until you commit something, it's in your local space and remains when you switch branches. but once you commit it, then it disappears when you switch</p>",
        "id": 153995092,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536547756
    },
    {
        "content": "<p>What do you mean \"disappears when you switch\"?  What \"disappears\"?  I'm not following that.</p>",
        "id": 153995105,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536552051
    },
    {
        "content": "<p>if you have an uncommitted change in your folder, when you checkout a different branch, it will stay in your folder. But once you commit it, when you change branches to a branch that doesn't have that change, the change will disappear</p>",
        "id": 153995111,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536552522
    },
    {
        "content": "<p>I guess you'd have to merge the branch you committed it from into your \"main\" branch</p>",
        "id": 153995112,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1536553156
    },
    {
        "content": "<p>yes, in that case you'll need to merge the branch you committed from into the newly checked out one<br>\nand you can cherry-pick individual commits, if needed</p>",
        "id": 153995156,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1536559915
    },
    {
        "content": "<p>I added <code>_JAVA_OPTIONS=-Xmx3200m</code> as an env variable in our build system to try to keep 4 builds within 16Gb of RAM. Checking now to see if we can get 4 builds to run in parallel.</p>",
        "id": 153996408,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536794708
    },
    {
        "content": "<p>Hmm <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> not a RAM issue but one build failed like this: <a href=\"https://fhir-build.visualstudio.com/build.fhir.org/_build/results?buildId=719&amp;view=logs\" target=\"_blank\" title=\"https://fhir-build.visualstudio.com/build.fhir.org/_build/results?buildId=719&amp;view=logs\">https://fhir-build.visualstudio.com/build.fhir.org/_build/results?buildId=719&amp;view=logs</a> -- could multiple build be clobbering each other's temp space? Do I need to isolate them?</p>",
        "id": 153996409,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536794784
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>2018-09-12T23:24:18.2095662Z      [java] FHIR build failure @ Wed, Sep 12, 2018 23:24+0000                          0.106  39sec 1162MB\n2018-09-12T23:24:18.2115632Z      [java] Error: Error Parsing Resource patient: unable to read /tmp/ohfu-fhir4115606082990555608xml: /tmp/ohfu-fhir4115606082990555608xml (No such file or directory)\n2018-09-12T23:24:18.2137582Z      [java] java.lang.Exception: Error Parsing Resource patient: unable to read /tmp/ohfu-fhir4115606082990555608xml: /tmp/ohfu-fhir4115606082990555608xml (No such file or directory)\n2018-09-12T23:24:18.2165371Z      [java]    at org.hl7.fhir.definitions.parsers.SourceParser.loadResource(SourceParser.java:1112)\n2018-09-12T23:24:18.2188562Z      [java]    at org.hl7.fhir.definitions.parsers.SourceParser.parse(SourceParser.java:258)\n2018-09-12T23:24:18.2204235Z      [java]    at org.hl7.fhir.tools.publisher.Publisher.execute(Publisher.java:591)\n2018-09-12T23:24:18.2219542Z      [java]    at org.hl7.fhir.tools.publisher.Publisher.main(Publisher.java:482)\n2018-09-12T23:24:18.2238740Z      [java] Caused by: java.lang.Exception: unable to read /tmp/ohfu-fhir4115606082990555608xml: /tmp/ohfu-fhir4115606082990555608xml (No such file or directory)\n2018-09-12T23:24:18.2257560Z      [java]    at org.hl7.fhir.definitions.model.Example.&lt;init&gt;(Example.java:118)\n2018-09-12T23:24:18.2273987Z      [java]    at org.hl7.fhir.definitions.parsers.SpreadsheetParser.readExamples(SpreadsheetParser.java:1596)\n2018-09-12T23:24:18.2291583Z      [java]    at org.hl7.fhir.definitions.parsers.SpreadsheetParser.parseResource(SpreadsheetParser.java:488)\n2018-09-12T23:24:18.2308114Z      [java]    at org.hl7.fhir.definitions.parsers.SourceParser.loadResource(SourceParser.java:1110)\n2018-09-12T23:24:18.2325972Z      [java]    ... 3 more\n2018-09-12T23:24:18.2354723Z      [java] Caused by: java.io.FileNotFoundException: /tmp/ohfu-fhir4115606082990555608xml (No such file or directory)\n2018-09-12T23:24:18.2375827Z      [java]    at java.io.FileInputStream.open0(Native Method)\n2018-09-12T23:24:18.2391406Z      [java]    at java.io.FileInputStream.open(FileInputStream.java:195)\n2018-09-12T23:24:18.2406651Z      [java]    at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:138)\n2018-09-12T23:24:18.2422650Z      [java]    at org.hl7.fhir.utilities.CSFileInputStream.&lt;init&gt;(CSFileInputStream.java:54)\n2018-09-12T23:24:18.2441195Z      [java]    at org.hl7.fhir.definitions.model.Example.&lt;init&gt;(Example.java:115)\n2018-09-12T23:24:18.2456675Z      [java]    ... 6 more\n2018-09-12T23:24:18.2464314Z\n</pre></div>",
        "id": 153996410,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536794797
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 153996411,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536794833
    },
    {
        "content": "<p>probably they are.</p>",
        "id": 153996412,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536794836
    },
    {
        "content": "<p>I'll.. investigate. Could be painful</p>",
        "id": 153996413,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1536794846
    },
    {
        "content": "<p>OK -- if it is, le tme know; I can just isolate in containers, probably.</p>",
        "id": 153996645,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1536848147
    },
    {
        "content": "<p>\"What I haven't figured out with Git is: how do I do this? It seems that my clone is tied to a single branch, and I can't commit to another branch locally without some... operation.. of some sort that might or might not trash what I'm doing.</p>\n<p>When @Ewout Kramer sold me on it, it was because I'd get more control over how to commit my work, but right now it seems that I have a lot less\"</p>\n<p>Yes, I was talking about staging - which I have not seen in the discussion so far.  I am sometimes working on multiple fixes at the same time. When part of it works, I stage only those files that are concerned with that fix and then commit them.  Much like the SVN tools allowed you to pick a subset of the changed files to commit.  So like this, you could be working on multiple issues - periodically run the build, and only commit those changes that you are actually happy with.</p>",
        "id": 153997402,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1537200275
    },
    {
        "content": "<blockquote>\n<p>It seems that my clone is tied to a single branch</p>\n</blockquote>\n<p>Yes, though you could check out multiple copies of the repo. It's not normally something I do in my workflows though - I switch branches since it's pretty lightweight.</p>\n<blockquote>\n<p>and I can't commit to another branch locally without some... operation</p>\n</blockquote>\n<p>You cannot commit \"blindly\" to another branch - there might be merge conflicts (at the least) when you'd do that.  The closest thing is to copy the content of once commit of another branch onto your current branch (cherry-picking).</p>",
        "id": 153997403,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1537200468
    },
    {
        "content": "<p>Switching branches isn't lightweight if you can't do so when you're running a 45-minute build - which is why (for at least some individuals) we're going to move to a single commit branch where all changes (over a period of weeks or months) are pushed to a user-specific branch rather than issue-specific branching.</p>",
        "id": 153997404,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1537200772
    },
    {
        "content": "<blockquote>\n<p>, I was talking about staging - which I have not seen in the discussion so far</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> please explain</p>",
        "id": 153997468,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1537223427
    },
    {
        "content": "<p>I expect that Ewout is talking about staging for a commit - via <code>git add</code> (he can confirm - or not).  We haven't mentioned that very much, but it is the way to specify which of your changes are included in a specific commit.</p>",
        "id": 153997639,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1537286127
    },
    {
        "content": "<p>Please update the documentation on the github wiki regarding the commit process as it is now outdated. It should provide guidance on the pull request approach and associated branching requirements.</p>",
        "id": 153998332,
        "sender_full_name": "Claude Nanjo",
        "timestamp": 1537381626
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191703\">@Claude Nanjo</span> ! There's a <a href=\"#narrow/stream/138-committers.2Fgit-help\" title=\"#narrow/stream/138-committers.2Fgit-help\">git-help</a> stream specifically for github related questions</p>",
        "id": 153998351,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1537384743
    },
    {
        "content": "<p>There's a <a href=\"https://github.com/HL7/fhir/wiki/Get-Started-with-FHIR-on-GitHub\" target=\"_blank\" title=\"https://github.com/HL7/fhir/wiki/Get-Started-with-FHIR-on-GitHub\">Getting Started</a> page on the fhir wiki for using git in general, and there's a <a href=\"https://github.com/HL7/fhir/wiki/Using-TortoiseGit-with-FHIR\" target=\"_blank\" title=\"https://github.com/HL7/fhir/wiki/Using-TortoiseGit-with-FHIR\">TortoiseGit</a> page that talks about using TortoiseGit on Windows specifically.</p>",
        "id": 153998352,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1537384820
    },
    {
        "content": "<p>I think the Getting Started guide may need an update.</p>",
        "id": 153998369,
        "sender_full_name": "Claude Nanjo",
        "timestamp": 1537388503
    },
    {
        "content": "<p>When building and then getting ready to stage my changes, I get two new vscache files: all-systems.cache and lang.cache. I assume these should be added to gitignore? Also, I get a whole bunch of .png files. I am assuming these too should be in gitignore?</p>",
        "id": 153998370,
        "sender_full_name": "Claude Nanjo",
        "timestamp": 1537388569
    },
    {
        "content": "<p>Correction: the png files are new but the vscache files are modified. I am adding a *.png for now to gitignore since it is a pull request but someone should probably update it and refine it unless these files generated files should be committed.</p>",
        "id": 153998371,
        "sender_full_name": "Claude Nanjo",
        "timestamp": 1537388991
    },
    {
        "content": "<p>it's on my list to get to this. I'm impossibly far behind right now. but in general the cache files should in in git, and the other file should not exist</p>",
        "id": 153998427,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1537400422
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>, I was talking about staging - which I have not seen in the discussion so far</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> please explain</p>\n</blockquote>\n<p>I'll take the opportunity that we will be face to face in a few days to show you and answer any questions that might remain ;-)</p>",
        "id": 153999709,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1537866243
    },
    {
        "content": "<p>I am planning to move our git instructions into the hl7 confluence. I don't think there's an existing space for it and I don't think I have permissions to create one. <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  can you please help?</p>",
        "id": 154006701,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1539010940
    },
    {
        "content": "<p>Also, I tried creating a page just to test out formatting etc, and I can't even delete or move it (I lack permissions).</p>",
        "id": 154006703,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1539011392
    },
    {
        "content": "<p>So if you can help me delete <a href=\"https://confluence.hl7.org/display/DOF/Get+Started+with+FHIR+on+GitHub#space-menu-link-content\" target=\"_blank\" title=\"https://confluence.hl7.org/display/DOF/Get+Started+with+FHIR+on+GitHub#space-menu-link-content\">this page</a> that'd be great.</p>",
        "id": 154006706,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1539011427
    },
    {
        "content": "<p>Before we start moving stuff to Confluence, I'd like both the FMG and FHIR-I to spend some time thinking about exactly what spaces we want, what should go in them, what we should bring across, etc.  I was thinking we'd start having those discussions after the freeze deadline for content submissions.  Do we think there's a reason to move the Git instructions sooner than that?</p>",
        "id": 154006724,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1539012322
    },
    {
        "content": "<p>No rush on my side; I was just trying to be responsive to the request from last week. (FYI <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>.)</p>",
        "id": 154006736,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1539016503
    },
    {
        "content": "<p>If you can delete the page I linked above though, that'd be great to avoid spreading info into too many places before we're ready to make the cutover.</p>",
        "id": 154006737,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1539016574
    },
    {
        "content": "<p>Deleted</p>",
        "id": 154006738,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1539016754
    }
]