[
    {
        "content": "<p>Does everyone else hate it when null.cache gets merge conflicts?  I still don't know the proper way to merge these in.  Is there some reason why we've included a cache file in the repository?</p>",
        "id": 228317372,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614637423
    },
    {
        "content": "<p>they make a massive difference to performance - hours of difference</p>",
        "id": 228318089,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614637721
    },
    {
        "content": "<p>but you can always revert your files and ignore your local changes</p>",
        "id": 228318148,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614637748
    },
    {
        "content": "<p>I never check this in (or snomed.cache or tools/.../snomed.xml) because they seem to change when I made no changes.</p>",
        "id": 228328338,
        "sender_full_name": "Rik Smithies",
        "timestamp": 1614642689
    },
    {
        "content": "<p>that's cause someone else didn't commit it</p>",
        "id": 228329780,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614643418
    },
    {
        "content": "<p>null.cache changes every time you build - it has a bunch of expansion timestamps in it that change when you build</p>",
        "id": 228336073,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614646980
    },
    {
        "content": "<p>Hmm, just did some searching and we could this:</p>\n<div class=\"codehilite\"><pre><span></span><code>git update-index --skip-worktree FILENAME\n</code></pre></div>\n<p>and then it will never commit that file to the repository but will get any changes to it that are checked in.</p>",
        "id": 228336853,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614647422
    },
    {
        "content": "<p>Can we jsut add it to the gitignore?</p>",
        "id": 228338717,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1614648680
    },
    {
        "content": "<p>if someone wants to actually update it, they still can, but this way it won't affect other peoples builds</p>",
        "id": 228338755,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1614648720
    },
    {
        "content": "<p>The desire is that it gets kept up-to-date.  If it's ignored, no one will commit it and all builds will slow down as a consequence.</p>",
        "id": 228348226,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614656426
    },
    {
        "content": "<p>no, if you add it to .gitignore then it doesn't get committed and it also doesn't get checked out.  The main problem with the file is that it doesn't merge nicely.  In my latest merge failure, it was just a bunch of dates that were different.  I really don't understand why git can't merge it.  Maybe it's not treating it as a text file?</p>",
        "id": 228357646,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614664385
    },
    {
        "content": "<p>The issue is you download with one set of dates.  Someone else merges with a different set of dates, then you try to merge with your dates and Git doesn't know which dates you want.  Your only chance to succeed is to create your pull request and get your test build to completion between your initial pull and your merge.  If anyone else gets in there, you'll get a conflict.  I think the solution is for the build to hardcode the dates and expansion ids to something so they never change (unless Grahame uses them somehow?)  Similar issue in the SNOMED CT expansions.</p>\n<p>There's a tougher issue in that some of the changes appear to be date-related content that manifests in the narrative.  Not sure how easy that will be to lock and not change.</p>",
        "id": 228360233,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614666403
    },
    {
        "content": "<p>it shouldn't have dates in it. I'll investigate at some time</p>",
        "id": 228360890,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614666941
    },
    {
        "content": "<p>The SNOMED cache changes dates too.</p>",
        "id": 228363525,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1614668792
    },
    {
        "content": "<p>Just curious, doesn't the build process in github rebuild every PR? If so, what is the point to check-in build generated/updated files? I have never checked in any cache files (null.cache, snomed.cache, etc). Maybe I should do that?</p>",
        "id": 228842770,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1614889015
    },
    {
        "content": "<p>the CI pipeline only checks the build, and then generates the webpage for the branch/master</p>",
        "id": 228844738,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1614889726
    },
    {
        "content": "<p>the pipeline doesn't commit anything back to the repo iteself</p>",
        "id": 228844765,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1614889739
    },
    {
        "content": "<p>it onlygenerates the website code and pushes it to <a href=\"http://build.fhir.org\">build.fhir.org</a> or <a href=\"http://build.fhir.org/branches/&lt;your\">build.fhir.org/branches/&lt;your</a> fancy branch name here&gt;</p>",
        "id": 228844865,
        "sender_full_name": "Mark Iantorno",
        "timestamp": 1614889770
    }
]