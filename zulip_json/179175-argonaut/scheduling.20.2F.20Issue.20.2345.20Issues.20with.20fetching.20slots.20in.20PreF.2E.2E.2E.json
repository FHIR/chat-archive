[
    {
        "content": "<p>Healthedata1 opened <a href=\"https://github.com/argonautproject/scheduling/issues/45\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/45\">Issue #45</a></p>\n<blockquote>\n<p>Assuming:</p>\n<p>1. our goal is to get all the open slots for a service for all actors needed for that service.<br>\n1. client has a set of business rules to know what actors are needed to create an Appointmenr for a particular service<br>\n1. a \"service based approach\" can be used ( \"visit type\" links all the actors, schedules and slots together )</p>\n<div class=\"codehilite\"><pre><span></span>Example:\n- visit-type = &quot;Physical&quot;\n- Set of rules for what is needed:\n- a Room (Location A)\n- a Doctor (Practitioner A)\n- a Nurse (Practitioner B)\n</pre></div>\n\n\n<p>Getting open slots for type \"Physical\" --&gt; just a pile of slots:</p>\n<ul>\n<li>need to first figure out which schedules are applicable (i.e.,  a room , a practitioner or a machine)</li>\n<li>'Determining which schedules should be consulted often will involve searching via the properties of the referenced actors, such as the ServiceCategory on the HealthcareService, or the Address on a Location or the specialty on a PractitionerRole.'</li>\n</ul>\n<p>Options:</p>\n<ul>\n<li>include schedules ( and possible recursively Location and PractitionerRole and Practitioner) in the search bundle (reconstruct on client side)</li>\n<li>filter Slots by chained search on schedule.actor  ( all open slots for schedules with type = X  and actor = PractitionerRole )</li>\n<li>Alternative: is to search by schedule by type and rev_include all open slots ( can't do this by standard search - custom operation )</li>\n<li>Alternative is to add actor extension to slot</li>\n</ul>\n</blockquote>",
        "id": 153917274,
        "sender_full_name": "argo-scheduling-bot",
        "timestamp": 1509597192
    },
    {
        "content": "<p>Healthedata1 labeled <a href=\"https://github.com/argonautproject/scheduling/issues/45\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/45\">Issue #45</a></p>",
        "id": 153918139,
        "sender_full_name": "argo-scheduling-bot",
        "timestamp": 1510115523
    },
    {
        "content": "<p>Healthedata1 <a href=\"https://github.com/argonautproject/scheduling/issues/45#issuecomment-351510486\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/45#issuecomment-351510486\">commented</a> on <a href=\"https://github.com/argonautproject/scheduling/issues/45\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/45\">Issue #45</a></p>\n<blockquote>\n<p>separated prefetch with realtime WF:</p>\n<p>specific to prefecth WF and search params. ...</p>\n<p>follow up offline--2 questions;<br>\n# What (if any) search parameters<br>\n# _includes?</p>\n</blockquote>",
        "id": 153924878,
        "sender_full_name": "argo-scheduling-bot",
        "timestamp": 1513196466
    },
    {
        "content": "<p>brandon-larue-zocdoc <a href=\"https://github.com/argonautproject/scheduling/issues/45#issuecomment-351530803\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/45#issuecomment-351530803\">commented</a> on <a href=\"https://github.com/argonautproject/scheduling/issues/45\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/45\">Issue #45</a></p>\n<blockquote>\n<p>Start date and end date seem like minimal requirements, as the search needs to be bounded.</p>\n<p>As a consumer of these, we like to be able to narrow down further - practitioner (via Schedule.actor is fine) and location are the best candidates, and requiring one but not both gives a lot of flexibility. </p>\n<p>Cerner has a good pattern here: <a href=\"http://fhir.cerner.com/millennium/dstu2/scheduling/slot/\" target=\"_blank\" title=\"http://fhir.cerner.com/millennium/dstu2/scheduling/slot/\">http://fhir.cerner.com/millennium/dstu2/scheduling/slot/</a> although they also require Slot.type (they're using DSTU2) which is isn't ideal for a pre-fetch scenario.</p>\n</blockquote>",
        "id": 153924906,
        "sender_full_name": "argo-scheduling-bot",
        "timestamp": 1513200563
    },
    {
        "content": "<p>Healthedata1 <a href=\"https://github.com/argonautproject/scheduling/issues/45#issuecomment-355125196\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/45#issuecomment-355125196\">commented</a> on <a href=\"https://github.com/argonautproject/scheduling/issues/45\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/45\">Issue #45</a></p>\n<blockquote>\n<p>same approach for polling updates.  </p>\n<p>diff </p>\n</blockquote>",
        "id": 153927560,
        "sender_full_name": "argo-scheduling-bot",
        "timestamp": 1515013088
    },
    {
        "content": "<p>Healthedata1 closed <a href=\"https://github.com/argonautproject/scheduling/issues/45\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/45\">Issue #45</a></p>",
        "id": 153927564,
        "sender_full_name": "argo-scheduling-bot",
        "timestamp": 1515013842
    }
]