[
    {
        "content": "<p>Healthedata1 labeled <a href=\"https://github.com/argonautproject/scheduling/issues/52\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/52\">Issue #52</a></p>",
        "id": 153927561,
        "sender_full_name": "argo-scheduling-bot",
        "timestamp": 1515013633
    },
    {
        "content": "<p>Healthedata1 opened <a href=\"https://github.com/argonautproject/scheduling/issues/52\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/52\">Issue #52</a></p>\n<blockquote>\n<p>How to represent \"Null\" availability using the update polling approach which is an issue for systems which don't have a concept of slots?</p>\n<p>e.g. chunk of time (9-12) is open but not represented by slots in Server. So when a piece of that time is booked (say for example 9-10)  it is represented by a smaller chunk of time (10-12).  How to represent this using update polling mechanism?</p>\n<p>Options:</p>\n<ul>\n<li>reallocate chunk of time as new slot and delete old chunk of time represented by old slot ???</li>\n<li>treat as a caching problem and cache reconciliation</li>\n<li>Use a more event driven i.e.,subscription/messaging paradigm. Repackage and resend updated slot package when triggered by an booking event.</li>\n</ul>\n</blockquote>",
        "id": 153927562,
        "sender_full_name": "argo-scheduling-bot",
        "timestamp": 1515013633
    },
    {
        "content": "<p>brandon-larue-zocdoc <a href=\"https://github.com/argonautproject/scheduling/issues/52#issuecomment-355133410\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/52#issuecomment-355133410\">commented</a> on <a href=\"https://github.com/argonautproject/scheduling/issues/52\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/52\">Issue #52</a></p>\n<blockquote>\n<p>This is actually a problem for any implementation where the Slot search for updated information (diffs) only has a way to return open slots.</p>\n<p>If I send a request for updated slots on a particular day, and a newly opened slot has appeared since my last request, it is easy to return that newly opened slot as the diff and let the client append it to their prefetched availability. But if I query for that same day, and a slot is no longer open that I had previously fetched, what does the server return? </p>\n<p>In a slot based system, it could return a value for that removed slot with a new status (booked, blocked, etc.) but I don't believe we've articulated this anywhere. And I believe we also specified that the call should explicitly request slots with a status of \"free.\" But that doesn't account for other potential deletion/invalidation events such as merging slots, closing schedules entirely, etc., where the slot object itself has been removed from the system (rather than a simple status change).</p>\n<p>This is also an issue for Option 1 in your list here. What does the deletion look like?</p>\n</blockquote>",
        "id": 153927568,
        "sender_full_name": "argo-scheduling-bot",
        "timestamp": 1515015174
    },
    {
        "content": "<p>Healthedata1 <a href=\"https://github.com/argonautproject/scheduling/issues/52#issuecomment-357099620\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/52#issuecomment-357099620\">commented</a> on <a href=\"https://github.com/argonautproject/scheduling/issues/52\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/52\">Issue #52</a></p>\n<blockquote>\n<p>I updated the assumptions for the Prefetch Option and corrected a big error in my example.</p>\n<ul>\n<li>Assume that the FHIR Server maintain a version history</li>\n<li>My error in how I documented the update polling - this an interaction and not a search so doesn't take any search parameter like I had previously documented.</li>\n</ul>\n<p>so in a nutshell get all Slots that have been updated, deleted and added. including Slots you may not be interested in.</p>\n<p>GET [base]/Slot/_history?_since=[last-update]</p>\n</blockquote>",
        "id": 153928548,
        "sender_full_name": "argo-scheduling-bot",
        "timestamp": 1515714719
    },
    {
        "content": "<p>Healthedata1 <a href=\"https://github.com/argonautproject/scheduling/issues/52#issuecomment-357100493\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/52#issuecomment-357100493\">commented</a> on <a href=\"https://github.com/argonautproject/scheduling/issues/52\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/52\">Issue #52</a></p>\n<blockquote>\n<p>So to answer the above question.   the update polling looks at all slots an does not filter on status or any other mechanism.  These slots need additional filtering to determine which are add, deletes, etc.   If the system is unable to expose the history then this won't work and you are left polling or pub/sub which could be triggered by status changes or event driven.  Certainly worth fleshing out some more!</p>\n</blockquote>",
        "id": 153928549,
        "sender_full_name": "argo-scheduling-bot",
        "timestamp": 1515715015
    },
    {
        "content": "<p>Healthedata1 <a href=\"https://github.com/argonautproject/scheduling/issues/52#issuecomment-365744876\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/52#issuecomment-365744876\">commented</a> on <a href=\"https://github.com/argonautproject/scheduling/issues/52\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/52\">Issue #52</a></p>\n<blockquote>\n<p>this is is superseded by #59</p>\n</blockquote>",
        "id": 153937486,
        "sender_full_name": "argo-scheduling-bot",
        "timestamp": 1518642329
    },
    {
        "content": "<p>Healthedata1 closed <a href=\"https://github.com/argonautproject/scheduling/issues/52\" target=\"_blank\" title=\"https://github.com/argonautproject/scheduling/issues/52\">Issue #52</a></p>",
        "id": 153937487,
        "sender_full_name": "argo-scheduling-bot",
        "timestamp": 1518642329
    }
]