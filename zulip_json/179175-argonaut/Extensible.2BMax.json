[
    {
        "content": "<p>Reading the <a href=\"https://build.fhir.org/ig/HL7/US-Core-R4/general-guidance.html#max-binding\" target=\"_blank\" title=\"https://build.fhir.org/ig/HL7/US-Core-R4/general-guidance.html#max-binding\">current definition</a>:</p>\n<blockquote>\n<p>For this IG, we have defined the Extensible + Max-ValueSet binding to allow for either a code from the defined value set or text if the code is not available. (for example, legacy data). This means, unlike a FHIR extensible binding, alternate code(s) are not permitted and a text value SHALL be supplied if the code is not available.</p>\n</blockquote>\n<p>I am confused. Can we add an example of how this \"Extensible + Max\" would be used in a best-practice way? Like, a legacy system that maintains coded data but does <em>not</em> have a mapping into the bound valueset? What would they write to convey (as losslessly as possible) the codes the <em>do</em> have?</p>",
        "id": 173805066,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566401495
    },
    {
        "content": "<p>(Also, are there validation rules formalized for checking conformance to the \"Extensible + Max\" binding? Do any of the validators know how to implement these rules?)</p>",
        "id": 173805111,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566401523
    },
    {
        "content": "<p>Reading the definitions at <a href=\"http://hl7.org/fhir/R4/extension-elementdefinition-maxvalueset.html\" target=\"_blank\" title=\"http://hl7.org/fhir/R4/extension-elementdefinition-maxvalueset.html\">http://hl7.org/fhir/R4/extension-elementdefinition-maxvalueset.html</a>, I'm not sure what the semantics are of binding a single element to the CVX valueset with binding strength \"extensible\" and then <em>again</em> with \"max\". Since it's the CVX valueset in both cases, the \"max\" seems redundant.</p>",
        "id": 173805259,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566401626
    },
    {
        "content": "<p>So I'm not sure what <a href=\"https://build.fhir.org/ig/HL7/US-Core-R4/StructureDefinition-us-core-immunization-definitions.html#Immunization.vaccineCode\" target=\"_blank\" title=\"https://build.fhir.org/ig/HL7/US-Core-R4/StructureDefinition-us-core-immunization-definitions.html#Immunization.vaccineCode\">https://build.fhir.org/ig/HL7/US-Core-R4/StructureDefinition-us-core-immunization-definitions.html#Immunization.vaccineCode</a> is intended to accomplish.</p>",
        "id": 173805337,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566401661
    },
    {
        "content": "<p>If there's an extensible + max binding, a legacy system has no choice but to map their codes to the 'max' value set.  If they can't map, they can't populate the element and be conformant.</p>",
        "id": 173806142,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566402251
    },
    {
        "content": "<p>But what does it mean that \"alternate code(s) are not permitted.... However, multiple codings (translations) are allowed\" ?</p>",
        "id": 173808022,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566403397
    },
    {
        "content": "<p>Can't a \"translation\" coding be used to supply an \"alternate code\"?</p>",
        "id": 173808061,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566403420
    },
    {
        "content": "<p>The goal in an example: to return problems in a coded manner, must return SNOMED. Can also return translations if you have them. If you have a \"freetext\" problem, then just populate the text and no coded value</p>",
        "id": 173810099,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566404775
    },
    {
        "content": "<p>I know there's been all kinds of discussion around this mess</p>",
        "id": 173810117,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566404789
    },
    {
        "content": "<p>the freetext issue was the main reason we couldn't just do a required binding</p>",
        "id": 173810151,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566404818
    },
    {
        "content": "<p>The \"alternate code(s) are not permitted\" means that \"alternate codes\" that would be used <strong>instead of</strong> a code from the bound value set are not permitted.  But alternate codes that are sent <strong>in addition to</strong> one of the codes in the bound value set (i.e. \"translations\") are definitely allowed.</p>",
        "id": 173811886,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566406078
    },
    {
        "content": "<p>\"alternate code\" means no code from the max value set but some other code instead.</p>\n<p>As an example, if your extensible binding was \"common UCUM codes\" and your max binding was \"all UCUM codes\", then it's <em>not allowed</em> to send just text or send just a CDISC code - you <em>must</em> have a valid UCUM code, but it's ok if the code that you send isn't in the \"common UCUM codes\" value set.</p>",
        "id": 173812548,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566406597
    },
    {
        "content": "<p>If you have a max binding, required binding or extensible binding, implementations <em>must</em> be able to translate from whatever codes they have.  If they can't, they can't support the element.</p>",
        "id": 173812588,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566406645
    },
    {
        "content": "<p>like Jenni said is a \"use this code or Free text\" binding.  we hashed this out several times  I proposed changing the name \"required or  free text only , but decided that only issue ever comes up is here in a very small hl7 insider communitye and not with implementers.  to drop it for now.  Other prriorities</p>",
        "id": 173815104,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566408560
    },
    {
        "content": "<p>I think our issue will end up being the validators that are expecting to never see a free text or uncoded Resource and failing it</p>",
        "id": 173815282,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566408697
    },
    {
        "content": "<p>I know we get flagged in our FHIR server for this, but we literally can't code the free text things a practitioner or patient would type in</p>",
        "id": 173815342,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566408727
    },
    {
        "content": "<p>and not returning them at all isn't an option</p>",
        "id": 173815355,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566408741
    },
    {
        "content": "<p>but the business need still exists and we don't have the time to be making changes now.</p>",
        "id": 173815415,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566408809
    },
    {
        "content": "<p>you can point to the spec and say \"look here\" and this is what is means...</p>",
        "id": 173815520,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566408869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> As far as I can recall we haven't said anywhere that declaring a max value set binding precludes the possibility of sending only text (CodeableConcept.text, with no Codings) - which I think is what you are saying.  If we have that clearly documented, you can point me to it.  The closest that I see is in the description of the maxValueSet extension where it says that \"This defines a 'required' binding over the top of the extensible binding\".  The problem I think with that is that it's not really clear exactly what that means.  It has 'required' in quotes with no link to the discussion of the <a href=\"http://build.fhir.org/terminologies.html#required\" target=\"_blank\" title=\"http://build.fhir.org/terminologies.html#required\">required</a> binding strength in the Using Codes in Resources page, as we do elsewhere in the spec.  So does this mention of 'required' here mean that all of the rules that are stated for a required binding must also apply in the case of the max binding, including \"at least one Coding element SHALL be present\", even though the extensible (min) binding doesn't require that?  Either way, there's huge room for confusion here.</p>",
        "id": 173817397,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566410273
    },
    {
        "content": "<p>Right now, max binding says it acts as a 'required' binding - and required bindings prohibit text only.  If we want to allow text only, we need to change the description of 'max' not not refer to 'required'.</p>",
        "id": 173817734,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566410473
    },
    {
        "content": "<p>From an introperability perspective I can't understand why choosing extensible and maximum is better than just choosing  extensible</p>",
        "id": 173818010,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566410654
    },
    {
        "content": "<p>maybe if the bindings were to two different value sets, but <em>if the same valueset is being used in both bindings</em>, what is the point?</p>",
        "id": 173818049,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566410693
    },
    {
        "content": "<p>And practically, from the validator's perspective, how does a validator tell which coding is \"the one matching the extensible/max\" binding, and which is a translation? Just... look for the one with only text, and call that \"the one\"? (What is the point of this?)</p>",
        "id": 173818436,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566410981
    },
    {
        "content": "<p>It would make no sense for the value set to be the same.  The use-case is always that the extensible binding is to a small (enumerable) value set that is a proper subset of the large (typically non-enumerable) value set that is the max.</p>",
        "id": 173818619,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566411112
    },
    {
        "content": "<p>But that's what we're seeing at <a href=\"http://build.fhir.org/ig/HL7/US-Core-R4/StructureDefinition-us-core-immunization-definitions.html#Immunization.vaccineCode\" target=\"_blank\" title=\"http://build.fhir.org/ig/HL7/US-Core-R4/StructureDefinition-us-core-immunization-definitions.html#Immunization.vaccineCode\">http://build.fhir.org/ig/HL7/US-Core-R4/StructureDefinition-us-core-immunization-definitions.html#Immunization.vaccineCode</a></p>",
        "id": 173818677,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566411138
    },
    {
        "content": "<p>The validator just checks all of the codings and sees if at least one of them falls within the value set.</p>",
        "id": 173818683,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566411141
    },
    {
        "content": "<p>Yeah, the us-core model makes no sense</p>",
        "id": 173818712,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566411166
    },
    {
        "content": "<p>(for that one binding! :))</p>",
        "id": 173818725,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566411178
    },
    {
        "content": "<p>and <a href=\"http://build.fhir.org/ig/HL7/US-Core-R4/StructureDefinition-us-core-careteam-definitions.html#CareTeam.participant.role\" target=\"_blank\" title=\"http://build.fhir.org/ig/HL7/US-Core-R4/StructureDefinition-us-core-careteam-definitions.html#CareTeam.participant.role\">http://build.fhir.org/ig/HL7/US-Core-R4/StructureDefinition-us-core-careteam-definitions.html#CareTeam.participant.role</a></p>",
        "id": 173818780,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566411210
    },
    {
        "content": "<p>I think that was done because there was a belief that allowed you to say \"one of these codes, or just text\" - but that's not what it currently says.</p>",
        "id": 173818862,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566411250
    },
    {
        "content": "<p>I think the best (only?) way to say \"text or this required binding\" is to have an invariant.</p>",
        "id": 173818985,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566411356
    },
    {
        "content": "<p>And even if we <em>did</em> get the invariants right, what would be the <em>rationale</em> for saying \"one of these codes, or just text\" ?</p>",
        "id": 173819235,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566411546
    },
    {
        "content": "<p>Right.  That was the purpose.  I take it that what I said about \"what it currently says\" wasn't persuasive.  But obviously the Argonaut group either missed or ignored that mention of 'required', or didn't understand how it was intended to be applied in this different context.</p>",
        "id": 173819255,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566411560
    },
    {
        "content": "<p>The rationale is that some of the systems don't have codes.  And they need to be able to send what they've got.  However, if they have coded data at all, they're expected to create a translation to the official code system.</p>",
        "id": 173819404,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566411652
    },
    {
        "content": "<p>\"Extensible\" clearly prohibits sending <em>just</em> text if the text content is representable by the extensible value set, so an extensible binding wouldn't have met the desired intent, regardless of how max value set was defined.</p>",
        "id": 173819475,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566411720
    },
    {
        "content": "<p>But the real-world challenge is that <em>some of the systems don't have standardized code mappings</em> (whether the source is free text or a local code).</p>",
        "id": 173820625,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566412552
    },
    {
        "content": "<p>Why stop them from sharing the info they <em>do</em> have (whether text, or text + local code)? What purpose does this serve?</p>",
        "id": 173820695,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566412577
    },
    {
        "content": "<p>Yes, that was their point - they want to be able to send what they have, even if it's only text - and if it is sent as coded, then they want to require that one of the codes <strong>must</strong> be from the bound value set.  They were not intending to send only text in a case where the text content <strong>is</strong> representable by the bound (extensible) value set.</p>",
        "id": 173821484,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566413151
    },
    {
        "content": "<p>But that's what \"extensible\" already means, isn't it?  What's the gap?</p>",
        "id": 173821714,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566413308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> I think the rationale is the belief that if the systems have codes that they'll always be able to map and that it's reasonable to expect them to do so.  (And that forcing the mapping dramatically increases the interoperability/computability of the data.)  If we left the binding open, implementers would just send whatever they had, wouldn't bother with translation and there'd be no interoperability.</p>",
        "id": 173821721,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566413313
    },
    {
        "content": "<p>Extensible allowing text only would solve our goofy binding name...</p>",
        "id": 173821725,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1566413319
    },
    {
        "content": "<p>well, folks are telling us that the belief that systems always having codes  isn't the case!</p>",
        "id": 173821763,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1566413354
    },
    {
        "content": "<blockquote>\n<p>If we left the binding open, implementers would just send whatever they had</p>\n</blockquote>\n<p>But we're currently saying that they should just <em>drop</em> the codes they have and send text instead. How is that better?</p>",
        "id": 173821797,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566413376
    },
    {
        "content": "<p>I think you mean \"required allowing text only\", Brett?</p>",
        "id": 173821800,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566413378
    },
    {
        "content": "<p>thanks Rob, correct.</p>",
        "id": 173821916,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1566413448
    },
    {
        "content": "<p>Basically we're offering a validation escape-hatch: \"omit your codes and just pass your text along\". Can someone explain how this is better than the escape-hatch of \"pass your text along, and your codes if you have any\"?</p>",
        "id": 173822039,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566413548
    },
    {
        "content": "<p>(The latter wouldn't need any special new binding types, and would allow servers to express themselves more completely.)</p>",
        "id": 173822072,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566413575
    },
    {
        "content": "<p>Sorry if I'm just repeating myself here; I'm really trying to understand the argument for making bindings <em>still more complex</em> than they already are.</p>",
        "id": 173822121,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566413625
    },
    {
        "content": "<p>if I can interpret, I think what is actually wanted is \"if you can code the data from <strong>this</strong> value set, then you must - but if the meaning of your data isn't covered by the codes included in <strong>this</strong> value set <strong>then</strong> you can send only text\"</p>",
        "id": 173822416,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566413818
    },
    {
        "content": "<p>I disagree and have disagreed with Lloyd and Rob's interpretation of max value extension all along and still do.   The binding is extensible which allows free text only and the extension says you can't use any other codes.  So them repeating the same f$#%^#$%^ thing over and over does not in my opinion make it so.</p>",
        "id": 173823131,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566414401
    },
    {
        "content": "<p>I don't think that Lloyd's and Rob's interpretation are entirely the same here (unless I'm confused) - are you able to be a little bit more specific?</p>",
        "id": 173823258,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566414514
    },
    {
        "content": "<p>the extension is changing the binding rules to required</p>",
        "id": 173823301,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566414568
    },
    {
        "content": "<p>I think that's what I just disagreed with Lloyd about</p>",
        "id": 173823370,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566414605
    },
    {
        "content": "<p>umm, but doesn't the extension explicitly say that: \"This defines a 'required' binding over the top of the extensible binding.\"</p>",
        "id": 173823423,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566414670
    },
    {
        "content": "<p>Oh my apologies. leave to terminology to get my dander u p</p>",
        "id": 173823435,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566414675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span>  The challenge was also around validation of extensible. We really did expect the system to be able to bind any coded value to the value set. And then there's data that truly isn't coded</p>",
        "id": 173823549,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566414746
    },
    {
        "content": "<p>I'm almost to the point of \"i give up\" here. We were trying to encode ONC requirements around standards, and allow for \"free text\" (things that are literally a string in the local system)</p>",
        "id": 173823622,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566414812
    },
    {
        "content": "<p>That phrase seems to be the sticking point, <span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span>.  For some reason 'required' is stated in quotes but extensible following it a few words later is not - and for both of them there is no hyperlink to the relevant documentation, which would have made it clearer if that was the intent.</p>",
        "id": 173823702,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566414873
    },
    {
        "content": "<p>Argonaut did a ton of discussion with FHIR-I to come up with the max binding as a solution (with a lot of that conversation likely here or in older conversation groups). It apparently didn't do what we thought it did, though I remember Grahame very much not likely that we were blocking proprietary codes if we don't have the SNOMED (for example)</p>",
        "id": 173823721,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566414893
    },
    {
        "content": "<p>in R3 = \"<br>\nThe maximum allowable value set, for use when the binding strength is 'extensible'. This value set is the value set from which extensions can be taken from.\"</p>\n<p>in R4 changed to \"The maximum allowable value set, for use when the binding strength is 'extensible' or 'preferred'. This value set is the value set from which additional codes can be taken from. This defines a 'required' binding over the top of the extensible binding.\"</p>",
        "id": 173823750,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566414931
    },
    {
        "content": "<p>Not sure I follow about \"blocking proprietary codes\"?</p>",
        "id": 173823751,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566414932
    },
    {
        "content": "<p>Not allowing systems to send the local code</p>",
        "id": 173823765,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566414952
    },
    {
        "content": "<p>if they don't have the standard</p>",
        "id": 173823769,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566414958
    },
    {
        "content": "<p>so I am unhappy with that change  as what does 'requried'  ( in quotes) mean  that a required ( no quotes)  binding does not?</p>",
        "id": 173823842,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566414994
    },
    {
        "content": "<p>I you want a binding to be required then change the binding and no need for the extension?</p>",
        "id": 173823992,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566415086
    },
    {
        "content": "<p>umm, <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> those are the same thing, so I think you have a copy and paste error above. :)  <br>\nThe use case that makes sense to me and validates the use of maxValueSet:  I suggest you try and use this small set of codes to codify your data but if you really can't, then here is the larger value set that you are restricted to.  We have this in presenting Indications for prescribing - we just want the high-level codes in ICD-10, but if you want to be ultra-specific, then we'll let you.</p>",
        "id": 173824209,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566415264
    },
    {
        "content": "<p>Apologies - I didn't go back to check what it said in STU3, which is what the Argonaut interpretation initially was based on (or DSTU2, which is the same).  The third sentence of \"This defines a 'required' binding over the top of the extensible binding.\" was added in R4.</p>",
        "id": 173824215,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566415272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span>   yes I updated</p>",
        "id": 173824221,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566415277
    },
    {
        "content": "<p>There is  currently no other way to say   \"only these codes or text.\"  and because the max-valueset is now all balled up it seems useless to me for anything else either</p>",
        "id": 173824579,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566415530
    },
    {
        "content": "<p>Is the validator now enforcing all of the <strong>required</strong> binding rules when the maxValueSet extension is used (I haven't checked)?</p>",
        "id": 173824947,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566415783
    },
    {
        "content": "<p>I don't even know what \"The maximum allowable value set, for use when the binding strength is 'extensible'. This value set is the value set from which extensions can be taken from.\" means.  \"...from which extensions can be taken from\"???</p>",
        "id": 173825051,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566415844
    },
    {
        "content": "<p>Well need to understand what required in quotes actually means  that is still open to interpretation  - is it required-like?</p>",
        "id": 173825062,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566415848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span>    this extension is in the context of a valueset  in ElementDefinition the \"extensions\" are the extra concepts you are allowed to use</p>",
        "id": 173825306,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566416018
    },
    {
        "content": "<p>Put a set of quotes around the last 'extensible' and it seems to make perfect sense to me:  The maximum allowable value set, for use when the binding strength is 'extensible' or 'preferred'. This value set is the value set from which additional codes can be taken from. This defines a 'required' binding over the top of the 'extensible' binding.</p>",
        "id": 173825376,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566416058
    },
    {
        "content": "<p>I do agree that it does not accomplish what you wanted it to accomplish.  If you want a binding that says \"use one of these codes or just use text\", we don't have a binding for that.</p>",
        "id": 173825407,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566416095
    },
    {
        "content": "<p>Which binding rules rule? extensible  ( can have text only? ) or required ( can't have text only)</p>",
        "id": 173825465,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566416150
    },
    {
        "content": "<p>If it means make the binding required for <em>all</em> the codes - its useless</p>",
        "id": 173825590,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566416234
    },
    {
        "content": "<p>Major Fail IMO</p>",
        "id": 173825615,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566416257
    },
    {
        "content": "<p>I would say that if you have a coded element with an 'extensible' or 'preferred' binding and then add a maxValueSet, that you have effectively created a 'required' binding to the larger value set, while indicating a preference for using the smaller value set.</p>",
        "id": 173825692,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566416289
    },
    {
        "content": "<p>can't spell argonaut without Arrrrggghhh</p>",
        "id": 173825838,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566416404
    },
    {
        "content": "<p>but I'm not sure what it meant in STU3 because that language isn't clear to me.</p>\n<p>Leaving all of this aside, it appears from you and Jenni, that you wanted to be able to say \"if you are going to send a code, it must be one of these codes, otherwise just send plain text\".  Is that correct?</p>",
        "id": 173825921,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566416480
    },
    {
        "content": "<p>that is what we have been saying - yes</p>",
        "id": 173825953,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566416510
    },
    {
        "content": "<p>Per Jean</p>\n<blockquote>\n<p>I do agree that it does not accomplish what you wanted it to accomplish. If you want a binding that says \"use one of these codes or just use text\", we don't have a binding for that</p>\n</blockquote>\n<p>Seems to sum it all up</p>",
        "id": 173826295,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1566416789
    },
    {
        "content": "<p>we had one until R4 - ggrrrrr</p>",
        "id": 173826341,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566416841
    },
    {
        "content": "<p>no you didn't.  maxValueSet never solved your problem.  The description of that extension in STU3 made no sense.</p>",
        "id": 173826371,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566416866
    },
    {
        "content": "<p>I respectfully disagree</p>",
        "id": 173826428,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566416894
    },
    {
        "content": "<p>maybe we should add a 99999 to all value sets for vendors to then share their free text....(kidding)</p>",
        "id": 173826502,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1566416959
    },
    {
        "content": "<p>I think we should have an extensible binding and be done with it. An extensible binding <em>already</em> prohibits use of proprietary codes that <em>could</em> map to standard values (it's just impossible to validate this automatically -- which is the situation we're in with free text anyway, so it's no worse).</p>",
        "id": 173826608,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566417028
    },
    {
        "content": "<p>I believe that you intended the maxValueSet extension to limit the codes that could be used to the value set listed in the extension without adding any further constraints on the binding.  But I don't see how it really limits anything.  I agree with Josh that you probably should have just stuck to an Extensible binding.</p>",
        "id": 173826657,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566417084
    },
    {
        "content": "<p>so, catching up.... several points:</p>\n<ul>\n<li>the definition of the extension in R3 might have been what you wanted (Eric) but it wasn't consistent with the overall methodology and other uses</li>\n<li>it isn't what you want now</li>\n<li>Josh is right that it's an odd thing to do: one of these codes, or just text with no code (why no code in this case? just send the codes and text you have)</li>\n<li>there is a use case for max value set, and it is used a lot in snomed. But it's not bringing value here</li>\n</ul>",
        "id": 173826676,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566417120
    },
    {
        "content": "<p>I agree with Grahame (both the part where he said I'm right <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>  and the part where he says \"there is a use case for max value set... But it's not...  here\")</p>",
        "id": 173826994,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566417340
    },
    {
        "content": "<p>I'm not the one with the business requirements.  <span class=\"user-mention\" data-user-id=\"191356\">@Jenni Syed</span> ?</p>",
        "id": 173827064,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566417371
    },
    {
        "content": "<p>oh - also - I'm not sure where the validator is on this. It knows the max value set extension, and checks that. But the text question... I'd have to test it</p>",
        "id": 173827124,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566417431
    },
    {
        "content": "<p>Not sure wihy is so complicated if you want to say all these codes are required but we like this subset more then have any extension on required binding for preferred valueset.  why change extensible to required?</p>",
        "id": 173827446,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566417685
    },
    {
        "content": "<p>(I didn't follow that.)</p>",
        "id": 173827744,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566417909
    },
    {
        "content": "<p>using and extension to change a binding from extensible to required jsut so you can have a preferrred subset of codes seems like a rounsda bout way of doing it.  just indicate that  a subset is preferred.</p>",
        "id": 173828001,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566418108
    },
    {
        "content": "<p>where we use maxValueSet on contentType and language, it might be simplier just to have a required binding, and a suggested common set as an extension. But there are other cases where max value set is clearly appropriate. But not this case, I think</p>",
        "id": 173828418,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566418471
    },
    {
        "content": "<p>we do have the minValueSet extension, so it seems like you can go either way - extensible/preferred + max or required + min - to express the same thing</p>",
        "id": 173828480,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566418537
    },
    {
        "content": "<p>I give up on validator hopes :) The use case we had was literally \"there is NO possible code here without using NLP\" - If you all say no option but go extensible, I'm fine as long as I'm still able to return free text</p>",
        "id": 173828741,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566418732
    },
    {
        "content": "<p>I don't think we were the only system with free text data in the system</p>",
        "id": 173828755,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566418744
    },
    {
        "content": "<p>sure. we understand freetext. That's an extensible binding... what's going on here that's extra is this idea that you shouldn't codes if don't have a valid code</p>",
        "id": 173828868,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566418804
    },
    {
        "content": "<p>required+min would be something completely different</p>",
        "id": 173828890,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566418822
    },
    {
        "content": "<p>The use-case for extensible + max value set (which we do in two places in the core spec) is as follows:<br>\n- we have a single value set we expect all data to come from.  However that value set is \"big\"/unlimited.  As a result, we define a narrower set of codes that are common and suitable for a dropdown.  Our expectation is that there will always be a code from the 'big' value set.</p>\n<p>That's behavior we need in the core spec - and is now normative.  It covers language and units of measure.  We can't mess with it now (and don't want to).</p>\n<p>If we want to allow text that could say anything (because we have no clue what it might say) <em>or</em> a code from a defined value set, then we define no binding or a preferred binding on the element overall, then define an invariant that says <code>text.exists() or coding.in('some valueset URL').exists()</code></p>\n<p>If we want to allow text <em>only</em> if it doesn't express something that's in our defined value set, but want to ensure that if there's a code, that at least one of the codes comes from our value set, then we define an extensible binding on the element and then define the same invariant as above.  I agree with <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> though that prohibiting a custom code from accompanying the text doesn't make much sense and is generally a bad practice.</p>",
        "id": 173829611,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566419530
    },
    {
        "content": "<p>Extensible isn't something that's automatically validatable.  That's life.  Imposing a requirement that prohibits local codes doesn't mean you're doing proper validation because you're still not checking that the text isn't something that could have been expressed using the value set - and if you don't do that, you can't tell if the instance is valid.</p>",
        "id": 173829762,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566419682
    },
    {
        "content": "<blockquote>\n<p>We can't mess with it now (and don't want to).</p>\n</blockquote>\n<p>We can change the way we describe it as long as it doesn't change the meaning to implementers</p>",
        "id": 173829807,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566419725
    },
    {
        "content": "<p>Right - but allowing text would be changing the meaning to implementers.</p>",
        "id": 173830048,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566419937
    },
    {
        "content": "<p>well, wouldn't apply in the normative cases since they are code only.</p>",
        "id": 173830067,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566419959
    },
    {
        "content": "<p>anyway, it seems to me that there are 3 outstanding issues:</p>\n<ul>\n<li>does argonaut really want to prohibit other codes if no proper code is available? (why not just use extensible?)</li>\n<li>if there really is a reason, what is the right way to express it </li>\n<li>does the validator support whatever is expressed</li>\n</ul>",
        "id": 173830210,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566420067
    },
    {
        "content": "<p>the last one is a strictly process issue. The first should be decided here, and the second... maybe over on terminology track?</p>",
        "id": 173830239,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566420096
    },
    {
        "content": "<p>/poll does argonaut really want to prohibit other codes if no proper code is available?</p>",
        "id": 173830356,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566420181
    },
    {
        "content": "<p>I'm assuming vote is intended to be for Argonaut members/participants?</p>",
        "id": 173830699,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566420453
    },
    {
        "content": "<p>I mean, this is fair game for anyone. Especially since it seems to be informing the US Core guidance...</p>",
        "id": 173830771,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566420500
    },
    {
        "content": "<p>(<a href=\"http://build.fhir.org/ig/HL7/US-Core-R4/profiles.html\" target=\"_blank\" title=\"http://build.fhir.org/ig/HL7/US-Core-R4/profiles.html\">http://build.fhir.org/ig/HL7/US-Core-R4/profiles.html</a>)</p>",
        "id": 173830799,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566420538
    },
    {
        "content": "<p>I'm not having an opinion on this. But this won't be picked up by most of the argonaut participants who matter.... should move discussion on this to the argonaut email list?</p>",
        "id": 173830819,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566420565
    },
    {
        "content": "<p>What argonaut e-mail list? We could point people here to GitHub, but it shouldn't be private.</p>",
        "id": 173830902,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566420615
    },
    {
        "content": "<p>the argonaut email list is not closed, though only participants can join (anyone can sign up)</p>",
        "id": 173830926,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566420653
    },
    {
        "content": "<p>What's the email list?</p>",
        "id": 173831057,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566420743
    },
    {
        "content": "<p>We can discuss on the next call but most of the people who contributed to this notion are here.  I am not a big fan of  open polling/group think 10 days before publishing the spec either.   This is way over the head of 90+ % anyway.  What we tried to do was balance the needs of implementers  with the regulatory requirements surrounding terminology bindings.   We wanted to avoid getting polluted with local codes since cheating on standard codes using extensible bindings is easy to do  since there is no way to check and allow for the free text situation with legacy data etc. So this was the compromise we chose and there were haters ever since and did what any standards org would do and changed the standard so we could not do it anymore.   Moving forward the sensible thing to do is make extensible since required is too strict for implementation and live with the dilution of the standard terminology.</p>",
        "id": 173838114,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566427214
    },
    {
        "content": "<p>I think this requires further discussion; the current state makes no sense to me and It is not clear to me who is advocating for it.</p>",
        "id": 173838283,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566427419
    },
    {
        "content": "<p>the current state is now extensible ?</p>",
        "id": 173838363,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566427460
    },
    {
        "content": "<p>The current state is \"extensible +max\" -- meaning that text is okay but local codes are forbidden  -- right? That's what I think does not make sense.</p>",
        "id": 173838392,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566427496
    },
    {
        "content": "<p>Do you have specific examples of the regulatory requirements surrounding terminology bindings that you were trying to comply with?  In general I don't think that regulators are usually very clear about such things and their statements are subject to (differing) interpretations.</p>",
        "id": 173838415,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566427522
    },
    {
        "content": "<p>well that is no longer tenable since the extension changed</p>",
        "id": 173838426,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566427533
    },
    {
        "content": "<p>reason.:  the regulations named terminology  and implementers  had real world limitations  hence get the regulated terminology and meet the industry needs.</p>",
        "id": 173838568,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566427648
    },
    {
        "content": "<blockquote>\n<p>well that is no longer tenable since the extension changed</p>\n</blockquote>\n<p>even if the extension was what you wanted, Josh and others are questioning that since it doesn't make sense.</p>",
        "id": 173838639,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566427712
    },
    {
        "content": "<p>I feel like my compentence being questioned.</p>",
        "id": 173838668,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566427764
    },
    {
        "content": "<p>go read the regs yourself</p>",
        "id": 173838689,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566427799
    },
    {
        "content": "<p>we are trying to navigate a way forward for this and Grahame's first two points made real sense to me:<br>\ndoes argonaut really want to prohibit other codes if no proper code is available? (why not just use extensible?)<br>\nif there really is a reason, what is the right way to express it</p>\n<p>Right now, we're discussing if #1 is really what Argonaut wanted since it does seem strange.</p>",
        "id": 173838744,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566427822
    },
    {
        "content": "<p>I explained it.  what is important to me is moving forward.</p>",
        "id": 173838786,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566427866
    },
    {
        "content": "<p>okay, so you are adamant that the requirement \"only codes from this value set or free text\" is correct.  Then that is the answer to #1 and we can all try to determine how to make that expressible in the specification.</p>",
        "id": 173838873,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566427962
    },
    {
        "content": "<p>why do you think an extensible binding plus the invariant <code>text.exists() or coding.in('some valueset URL').exists()</code> isn't the way forward?</p>",
        "id": 173838964,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1566428076
    },
    {
        "content": "<p>Extensible+Max Summary</p>\n<p>Here is a summary of the 4 place we used Extensible+Max bindings in Argo-R4/US Core and the applicable regulations:<br>\nWhen these were introduced it was felt in each of these cases there was need to constrain the vocab due to regulations but still allow for legacy data as strings. (The case of CareTeam the rational is not known). If they are made required then they are not strictly in line with the regulations, but cause pain for implementers dealing with real world data. If they are made extensible then there is no way to validate regulatory compliance.</p>\n<p><a href=\"https://github.com/argonautproject/R4/wiki/Max-Binding-Summary\" target=\"_blank\" title=\"https://github.com/argonautproject/R4/wiki/Max-Binding-Summary\">https://github.com/argonautproject/R4/wiki/Max-Binding-Summary</a></p>",
        "id": 173843123,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566433414
    },
    {
        "content": "<p>I am not adamant about it but trying to negotiate between to competing requirements and the choice is to :</p>\n<ul>\n<li>go with required</li>\n<li>go with extensible</li>\n<li>Invariant + Extensible  ( invariant looks challenging to implement though)</li>\n</ul>",
        "id": 173843428,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566433821
    },
    {
        "content": "<p>That's a great summary.  I think the issue becomes more the conformance testing expectations rather than the details of the regulations themselves.  And, as you said, an extensible binding alone doesn't really give you anything that you can validate computably (which has been a longstanding issue).  And the extensible binding doesn't actually help much (if at all) with legacy data that's coded, as in order to be conformant if the coded data is covered by the bound value set but the codes from the value set aren't there you would still need to strip out the legacy codes and send it as a string (as you're doing in the current approach).</p>",
        "id": 173845438,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566436957
    },
    {
        "content": "<p>What I'm hearing is:<br>\na) legacy data as strings must still be allowed<br>\nb) there's no way to computably tell whether legacy strings could have/should have been encoded using the 'approved' terminology<br>\nc) we don't want to allow local codes because there's no way to computabily tell  if they could have/should have been encoded using the 'approved' terminology</p>\n<p>Josh and I are not understanding the rationale for the difference in expectations between (b) and (c).  Both are just as non-testable without a human in the loop.  Both are clearly testable <em>with</em> a human in the loop.  There's greater value in having a local code than text in cases where it truly <em>is</em> an extensible use-case because at least there's a chance for translation in the future.</p>",
        "id": 173846932,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566439460
    },
    {
        "content": "<p>Not really understanding why the invariant is hard to implement.  If the EHR doesn't have FHIRPath support, it'll have to hard-code the rules, but the rules are straightforward and clearly do what you say you want.  (Though it's still unclear why you want it :&gt;)</p>",
        "id": 173846953,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566439526
    },
    {
        "content": "<blockquote>\n<p>There's greater value in having a local code than text in cases where it truly is an extensible use-case because at least there's a chance for translation in the future.</p>\n</blockquote>\n<p>In a ideal world the intent was for the binding to be required and all the translations to occur <em>before</em> being transacted.   The question is how much teeth does the invariant have to force the proper behavior and is it worth it (and yes we all recognize you could cram local codes into text as a cheat if allowed )?</p>\n<p>Unless I get information to the contrary it will be rewritten as extensible.</p>",
        "id": 173888057,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566484470
    },
    {
        "content": "<p>Extensible says you can only have text if the concept is not covered by a code in the value set.  That means that if you have legacy data that's text only, a user must look at the text and code it in the correct code system if at all possible and only if no coding is possible would the text be sent.  Is that the behavior you want?</p>",
        "id": 173892710,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566487811
    },
    {
        "content": "<p>Why are we calling this \"legacy\" ? :)</p>",
        "id": 173894772,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566489174
    },
    {
        "content": "<p>As much as we would like practitioners (and other systems integrating) to always have codified data, it's not always possible</p>",
        "id": 173894947,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566489306
    },
    {
        "content": "<p>it's not always a legacy data issue</p>",
        "id": 173894996,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1566489348
    },
    {
        "content": "<p>If it's not <em>possible</em> - i.e the code system can't express the concept, then extensible makes sense.  If it's just that the system doesn't know how to do coded data, then that's \"legacy\" in that the system isn't meeting current regulatory requirements.</p>",
        "id": 173895738,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566489863
    },
    {
        "content": "<p>And for things like diagnosis, it's pretty hard to not have an appropriate code, given that you can use SNOMED to say things like \"disease of the liver\" or other highly abstract/all-encompassing  terms when you encounter something weird/essoteric.</p>",
        "id": 173895825,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566489946
    },
    {
        "content": "<p>reading this, and thinking about what is being said... the challenge is that we really want 2 incompatible things: </p>\n<ul>\n<li>we want to push systems hard to use the right codes, but we know that there's circumstances where users don't want to comply</li>\n<li>we think that if we don't have automated validation, then whatever we say has no teeth and will be ignored</li>\n</ul>",
        "id": 173914417,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566502663
    },
    {
        "content": "<p>\"don't want to\" is a bit prejudicial.  I'd re-frame as \"don't feel they can comply in all cases for reasonable cost\".  (I don't think any of the EHR vendors \"don't want to\" always send SNOMED codes.  But they can't realistically have someone wade through all their existing historical free-text data at all of their hospitals and appropriately code it.</p>",
        "id": 173914999,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566503105
    },
    {
        "content": "<p>In the case of \"extensible\", we have partially-automated validation.  We have warnings spit out whenever something doesn't meet the binding.  However, there is a need for a human to look at each warning and evaluate whether the warning should be treated as an error (system is non-conformant) or should be ignored (exception is appropriate).  Whether there are teeth behind that is really a question of how much energy the oversight body is willing to invest.  If the oversight body checks all of the warnings (or even a random percentage of them), then you've absolutely still got real teeth.  If the oversight body ignores all warnings, then you've got the teeth you paid for.</p>",
        "id": 173915236,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566503306
    },
    {
        "content": "<p>I do believe that there's no effective oversight body here right now. Hence where we are</p>",
        "id": 173915422,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1566503443
    },
    {
        "content": "<p>If there's no oversight at all, then even a required binding that spits out errors doesn't much matter.</p>",
        "id": 173916026,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566503999
    },
    {
        "content": "<p>If we're depending on self-governance, then we need to rely - at least somewhat - on the purity of intent of the participants.  If we believe that the participants (in general) want to do the right thing, then the difference between error and warning is in whether we can make the warning sufficiently clear that someone of good intention can look at it and determine whether they're in violation or not.  I, personally, think the messages around extensible aren't too bad, but we could potentially make them better.</p>",
        "id": 173916289,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566504137
    },
    {
        "content": "<p>I think there's an issue with the use of an extensible binding and sending the \"legacy\" data that I'm not sure that we've sufficiently addressed.  Validating of any of it will require human review, as Lloyd has described.  But with the extensible binding it would not be conformant to send only free text if the meaning of that text was covered by a code that was in the bound value set (which is likely to be true in most instances of sending legacy data).  That's what it says for the <a href=\"http://hl7.org/fhir/R4/terminologies.html#extensible\" target=\"_blank\" title=\"http://hl7.org/fhir/R4/terminologies.html#extensible\">extensible</a> binding:</p>\n<blockquote>\n<p>To be conformant, codes in this element SHALL be from the specified value set if any of the codes within the value set can apply to the concept being communicated.</p>\n</blockquote>\n<p>Note that it's the \"concept being communicated\", not the \"concept that is <strong>coded</strong>\".  So if you are not able or willing to additionally code the legacy data (free text or coded) with the applicable code from the bound value set then in order to be able to send the data and be conformant the binding will have to be either preferred or example.</p>",
        "id": 174010915,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566602037
    },
    {
        "content": "<p>I agree with this assessment, but I'm not sure which buying we should use. Is the consensus that it is okay to provide free text even in the case when a serviceable standard code exists? And we think this meets the regulatory intent?</p>",
        "id": 174011722,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566603113
    },
    {
        "content": "<p>I guess one question is in circumstances where the choice is to expose text or expose nothing, is the regulatory intent to expose nothing.  (I expect that's how the regulation is written, but if that's not the intent, hopefully that's not how it'll be enforced.)</p>\n<p>Agree that extensible doesn't fit if the usecase is \"if all you have is text, send that\".  The same question goes to legacy local codes - though in some cases one could argue that it's practical to map and translate those, depending on volume.</p>",
        "id": 174014844,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566607156
    },
    {
        "content": "<p>The intent of the regulation is to use standard codes instead of proprietary codes to enhance interoperability.     I don't think we can dowse these nuances here.    It is a blunt instrument and will break down in some real world use cases.  A pragmatic solution is to make it extensible for now and discuss our approach with regulators.</p>",
        "id": 174156759,
        "sender_full_name": "Eric Haas",
        "timestamp": 1566837293
    },
    {
        "content": "<p>\"extensible\" means that if you send plain text for a diagnosis, you're non-conformant.  Because you're only allowed to send text without a code if you can't find a code in the code system - and it's pretty much impossible to come up with a diagnosis that you can't code at some level of abstraction with SNOMED.  In short - I don't think \"extensible\" is meeting your need.  What I'm hearing is that there's a need to send text in cases where all you've got is text and there's no hope of getting it coded.  It's not as clear what the expectation is where you've got local codes - but those local codes vary for every single hospital and thus are a huge pain to try to translate.  My general leaning on the pragmatic side would be to say that for any condition that has an onset after Jan 1 2018 (or pick an alternate appropriate date) or something like that, treat the element as a required binding.  Prior to that date, treat it as a preferred binding.  That allows for legacy data to be a mess, but imposes no wiggle-room on new data.  And it seems like something that should be manageable.</p>",
        "id": 174193782,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1566876819
    },
    {
        "content": "<p>I was thinking of something similar.  If it's possible to do so, handle the legacy data separately (using a preferred binding), and then use a required binding (likely the same as the current max binding) if that's what is needed to meet the regulations and ensure and test the desired level of conformance.</p>",
        "id": 174328464,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1566961866
    },
    {
        "content": "<p>Does FHIR provide a way to express that bindings for one element (e.g.  vaccine code) are dependent on values in the another (e.g., date)? Would you make two different profiles altogether (Old Vaccine profile &amp; Recent Vaccine Profile), and enforce different date constraints in each?</p>",
        "id": 174360953,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1566998284
    },
    {
        "content": "<blockquote>\n<p>Does FHIR provide a way to express that bindings for one element (e.g. vaccine code) are dependent on values in the another (e.g., date)? </p>\n</blockquote>\n<p>yes through invariants,  but I don't see the point</p>",
        "id": 174374097,
        "sender_full_name": "Eric Haas",
        "timestamp": 1567006359
    },
    {
        "content": "<p>The point is to clearly define conformance expectations.  If we want to have looser rules for \"legacy\" data than for \"current\" data (which is what I think I'm hearing the use-case is), then the only way to do that is with invariants based on dates.  Extensible doesn't really support the 'looser rules for legacy data' use-case.</p>",
        "id": 174383097,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1567012638
    },
    {
        "content": "<blockquote>\n<p>If we want to have looser rules for \"legacy\" data than for \"current\" data (which is what I think I'm hearing the use-case is)</p>\n</blockquote>\n<p>I did not hear that.  is not a date based thing</p>",
        "id": 174383452,
        "sender_full_name": "Eric Haas",
        "timestamp": 1567012870
    },
    {
        "content": "<p>is a user based thing</p>",
        "id": 174383490,
        "sender_full_name": "Eric Haas",
        "timestamp": 1567012909
    },
    {
        "content": "<p>Presumably from a regulation perspective, the expectation is that <em>all</em> users need to comply starting at some date.  Free text isn't going to be an option any more.  If that's not the case, then not clear how we can make any conformance assertions at all.</p>",
        "id": 174386129,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1567014767
    },
    {
        "content": "<p>You can have two profiles: a tight one and a loose one. Then say \"All instances SHALL conform to the loose profile (the legacy one), instances that conform to the tight profile get a gold star and bragging rights\".<br>\n<span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 174421011,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1567050182
    },
    {
        "content": "<p>(this is something that I actually even proposed to the ONC years back: instead of certifying conformance in a binary way give stars or colors <br>\n depending on how complete / well implemented the API is)</p>",
        "id": 174451678,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1567084005
    },
    {
        "content": "<p>it recognizes capability to be very compliant, while also being a realistic system. Reality is not compliant.</p>",
        "id": 174451872,
        "sender_full_name": "John Moehrke",
        "timestamp": 1567084151
    },
    {
        "content": "<p>This is well known in the Interop space going back to beginning of TCP/IP  as Postel's Law</p>",
        "id": 174451970,
        "sender_full_name": "John Moehrke",
        "timestamp": 1567084204
    },
    {
        "content": "<p>ok I'm testing extensible+max in the validator test cases now. The validator allows just text if there's a max binding. for now</p>",
        "id": 174684698,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1567387772
    },
    {
        "content": "<p>We voted on the SDWG call on Thursday to change these bindings for US Core to only extensible (without the max value set) as per <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=23773\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=23773\">GF#23773</a>.</p>",
        "id": 174689539,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1567397343
    },
    {
        "content": "<p>So I think we could keep the behavior as documented, consistent with a required binding (text only not allowed)?</p>",
        "id": 174689617,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1567397520
    },
    {
        "content": "<p>Is this a reasonable summary:<br>\n1/ when the nominated value set has a suitable code, use it, <br>\n2/ when it does not have a suitable code, use a code from a different value set or use text,<br>\n3/ using a code from a different value set or text, when the nominated value set does have a value is an error, but the error is not tested for.</p>",
        "id": 174689777,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1567397872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191682\">@Richard Townley-O'Neill</span>  Yes, I think that's a reasonable summary for extensible (if that's what you were thinking of).  But it isn't completely correct for extensible + max (either with the full required binding behavior or as Grahame has just modified it), as with the max binding when you use a code then the code (or at least one of the Codings in a CodeableConcept) must come from the max value set.</p>",
        "id": 174690183,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1567398602
    },
    {
        "content": "<p>ok I changed the validator then</p>",
        "id": 174693448,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1567404281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> changed the validator how?</p>",
        "id": 174721909,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1567434400
    },
    {
        "content": "<p>if there's only text (and no codes) and there's a max value set, then that produces an error</p>",
        "id": 174738168,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1567452583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  So is the validator producing an error if there is only text with a max value set binding, or is it now the way you said above as \"The validator allows just text if there's a max binding\"?</p>",
        "id": 174746359,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1567464607
    },
    {
        "content": "<p>Based on the current definition of 'max binding', it should be raising an error if there isn't a code from the max value set.</p>",
        "id": 174747007,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1567465582
    },
    {
        "content": "<blockquote>\n<p>raising an error if there isn't a code from the max value set</p>\n</blockquote>\n<p>That's what it's doing now</p>",
        "id": 174752783,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1567476447
    },
    {
        "content": "<blockquote>\n<p>So I think we could keep the behavior as documented, consistent with a required binding (text only not allowed)?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191405\">@Rob Hausam</span> Do you mean the behavior of \"max\" binding?</p>",
        "id": 174831352,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1567546233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191506\">@Yunwei Wang</span> Yes, I meant the behavior of \"max\" binding, which is described as being a 'required' binding (so presumably it should behave according to the rules that are documented for required bindings).</p>",
        "id": 174833122,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1567547694
    },
    {
        "content": "<p>think of it this way....Max binding extension will change extensible to required if the valuesets are the same.</p>",
        "id": 174844800,
        "sender_full_name": "Eric Haas",
        "timestamp": 1567561473
    },
    {
        "content": "<p>If the valueset are the same, why not just change the binding strength to required.</p>",
        "id": 174897187,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1567613590
    },
    {
        "content": "<p>That case is formalism to illustrate what the extension does to the binding.  in real life your max binding valueset is a superset.  see for example here: <a href=\"http://build.fhir.org/patient-definitions.html#Patient.communication.language\" target=\"_blank\" title=\"http://build.fhir.org/patient-definitions.html#Patient.communication.language\">http://build.fhir.org/patient-definitions.html#Patient.communication.language</a></p>",
        "id": 174897507,
        "sender_full_name": "Eric Haas",
        "timestamp": 1567613828
    }
]