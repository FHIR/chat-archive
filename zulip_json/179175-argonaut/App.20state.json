[
    {
        "content": "<p>Reminder that our App State call is on today at 1p CT.</p>",
        "id": 275679563,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1647533343
    },
    {
        "content": "<p>From today's call -- please reflect on the proposed goals and proposed design at <a href=\"https://hackmd.io/@argonaut/smart-app-state\">https://hackmd.io/@argonaut/smart-app-state</a></p>\n<p>We'd like to understand who's willing to build infrastructure in support of the prioritized goals below. As I said, I think the same design can readily cover the P0 and P1 proposals, and as such it's a good thing to cover both. But if we have folks willing to support the P0 and not the P1, that'd be an important input. As <span class=\"user-mention\" data-user-id=\"191764\">@Cooper Thompson</span> mentioned, restrictions could always be at the business level (contracts/agreements) rather than at the technical level, if we opt for a unified design.</p>\n<h2>Proposed Goals</h2>\n<ul>\n<li>P0 <strong>Enable patient-facing apps to store \"small\" data in EHR</strong> in support  of use cases like E2E encryption of external data. This <strong>enables</strong> EHR-embedded apps to display at-home fitness data with E2E encryption. It's <strong>important</strong> because it surfaces diverse at-home data in the clinical workflow.<ul>\n<li>without being prescriptive about the \"how\" (algorithms, token formats, etc would be app-internal details)</li>\n</ul>\n</li>\n<li>P1 <strong>Support additional use cases including provider-specific preferences</strong> for apps that otherwise have no backend. This <strong>enables</strong> EHR-embedded apps to serve up the screens that a user prefers. It's <strong>important</strong> because it lowers the friction of launching an app and getting into a productive state.<ul>\n<li>Good thing about this goal is that it helps shape API design for P0s (toward minimalism)</li>\n</ul>\n</li>\n<li>P2? <strong>Support app ability for provider-facing \"companion apps\" to write back non-opaque data</strong>. This <strong>enables</strong> EHR-embedded apps to return standardized data into the EHR. It's <strong>important</strong> because it helps other clinical tools make use of data, <em>if</em> standards exist.<ul>\n<li>e.g., Audit log documents?</li>\n<li>e.g., Discrete FHIR data that a clinician has chosen to import?</li>\n</ul>\n</li>\n</ul>",
        "id": 275710685,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1647543914
    },
    {
        "content": "<p>Another use-case that may fit within P1: an application's \"message of the day\" would be an example of something an app without a backend might want to store. If that fit here, the the subject wouldn't be a patient or practitioner, so the scope of Basic.subject would need to be expanded. Device could potentially be used - the verbiage in STU3 Device states \"Non-medical devices may include items such as a machine, cellphone, computer, application, etc.\" Not sure why that line was removed from the R4 Device description.</p>",
        "id": 277343431,
        "sender_full_name": "Ben Winters",
        "timestamp": 1648762596
    },
    {
        "content": "<p>Interesting. Are there use cases where this message of the day would contain protected health information or other sensitive information that an app could not make available through its own static hosting? The app does need at least enough hosting to support static application content (HTML, JavaScript , css, etc)</p>",
        "id": 277344434,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1648763302
    },
    {
        "content": "<p>That's definitely fair, I don't have a scenario for PHI in the MotD. One of our FHIR customers did the use-case I stated, but they eventually changed that to use a cloud function of some sort instead.</p>",
        "id": 277440981,
        "sender_full_name": "Ben Winters",
        "timestamp": 1648829242
    },
    {
        "content": "<p>Based on our last call, I've drafted a separate write-up at <a href=\"https://hackmd.io/@argonaut/smart-app-state-with-custom-ops\">https://hackmd.io/@argonaut/smart-app-state-with-custom-ops</a> which aims to <strong>support routing App State requests based on URL pattern matching</strong>. </p>\n<p>To accomplish this, we'd have to move away from using the standard FHIR REST API and use something like the custom <code>$smart-app-state-*</code> operations I've proposed in the draft. (The details of <em>how</em> we accomplish this can be debated -- e.g., do we defined one operation or several? Do we return Bundles or Parameters? etc, etc -- but I'd rather suppress that debate while we squint and decide if we like the general way this is shaping up.)</p>\n<p>This is a <strong>significant cost</strong> in my view, because it means out-of-the-box behaviors like batching, search parameters, version management, conditional operations, and contention management won't work, or we'll have to re-invent them. </p>\n<p>The <strong>benefit</strong> is that <span class=\"user-mention\" data-user-id=\"276585\">@Brian Forbis</span> would be able to perform path-based routing, instead of routing Basic CRUDS requests based on payload content.</p>\n<p>It's not clear to me that the benefit is worth the costs, but I'd like to get feedback here or on Thursday's call.</p>",
        "id": 278642501,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1649732277
    }
]