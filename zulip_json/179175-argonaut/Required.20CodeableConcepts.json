[
    {
        "content": "<p>Argonaut Decision was to: allow for text only for the CodeableConcepts elements with Required bindings.  We had discussed applying an invariant to say “either the code from the required valueset or text”.  But applying the invariant is not straightforward ( the specifying a code from a value set part in particular)  So I elected to fall back to other option of requiring text in all cases.  See this example <a href=\"http://build.fhir.org/ig/Healthedata1/Argo-DSTU2/StructureDefinition-argo-careteam.html\" target=\"_blank\" title=\"http://build.fhir.org/ig/Healthedata1/Argo-DSTU2/StructureDefinition-argo-careteam.html\">here</a>.  I will be updating the guidance to explain this more clearly. </p>",
        "id": 153864425,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482273407
    },
    {
        "content": "<p>so you know that the validator won't support this? </p>",
        "id": 153864432,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482275041
    },
    {
        "content": "<p>what do mean by 'this'  -  the binding on coding?  </p>",
        "id": 153864449,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482278727
    },
    {
        "content": "<p>hmmm .... I need to slice this in order to have it work.</p>",
        "id": 153864451,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482279595
    },
    {
        "content": "<p>You mean put your required binding on a slice?  Because Grahame's right - if the required binding is on the codeable concept, the validator won't let you have text without also having a coding from the value set.</p>",
        "id": 153864455,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1482283551
    },
    {
        "content": "<p>I still don't know why you need slicing here. This is a stanard extensible binding, so far as we have discussed. I'm failing to grasp what the resistance to this simple solution is</p>",
        "id": 153864460,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482284171
    },
    {
        "content": "<p>Just to refresh your collective memory .  We have already discussed this a couple of times.</p>\n<ul>\n<li><a href=\"https://chat.fhir.org/#narrow/stream/terminology/topic/Required.20binding.20when.20all.20you.20got.20is.20text\" target=\"_blank\" title=\"https://chat.fhir.org/#narrow/stream/terminology/topic/Required.20binding.20when.20all.20you.20got.20is.20text\">https://chat.fhir.org/#narrow/stream/terminology/topic/Required.20binding.20when.20all.20you.20got.20is.20text</a></li>\n<li><a href=\"https://chat.fhir.org/#narrow/stream/implementers/topic/Definition.20Problem\" target=\"_blank\" title=\"https://chat.fhir.org/#narrow/stream/implementers/topic/Definition.20Problem\">https://chat.fhir.org/#narrow/stream/implementers/topic/Definition.20Problem</a></li>\n</ul>\n<p>Neither required nor extensible bindings work here.   The need is for a non-extensible binding which allows free text.  ( ie only codes from the value set or if all you got is text then text.)  </p>",
        "id": 153864574,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482342053
    },
    {
        "content": "<p>OK I see that it collapses into extensible binding and I see that.   What I don't see is how you can say \" we don't have a standard code but we got this alternate code we want to send  anyway as a translation (and it may even come from the same codesytem) but be clear it not the standard code.  Do we need to pull out the <a href=\"http://hl7.org/fhir/extension-valueset-reference.html\" target=\"_blank\" title=\"http://hl7.org/fhir/extension-valueset-reference.html\">valueset</a> extension and slice on that?</p>",
        "id": 153864575,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482342232
    },
    {
        "content": "<p>and for context.  The regulations say you need to use valueset X and the vendors are saying sometimes all we got is a bit of text.</p>",
        "id": 153864577,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482344127
    },
    {
        "content": "<p>Reality and regulations don't necessarily go well together.  But you've got to decide which of the two the specification is going to reflect.  Required in FHIR says you must send one of the approved codes if you send the element at all. </p>",
        "id": 153864580,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1482345243
    },
    {
        "content": "<p>To do what you want - can send text, but if you send a coding, one of them must be from the specified value set is *hard*.  You'd essentially have to use an invariant</p>",
        "id": 153864581,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1482345287
    },
    {
        "content": "<p>How do you slice by valueset?</p>\n<p>It says <a href=\"http://hl7.org/fhir/profiling.html#discriminator\" target=\"_blank\" title=\"http://hl7.org/fhir/profiling.html#discriminator\">here</a>:</p>\n<p>\"When a constraining structure designates one or more discriminators, it SHALL fix the value of the element for each discriminator for each slice (using ElementDefinition.fixed[x]), or if the element has a terminology binding, it SHALL be associated with a complete binding with <strong>a required Value Set</strong> that enumerates the list of possible codes in the value set. \"</p>\n<p>and I had alway assumed the discriminator would be code but now I'm thinking maybe its by extension.url?   would that work?  and then keep the required binding on code with a card of 0..1</p>\n<p>so a slice: Unordered, Open, by url?</p>",
        "id": 153864584,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482345902
    },
    {
        "content": "<p>We can revisit the all-I-got-is-a-bit-0-text extension on code ?  which = <a href=\"http://hl7.org/fhir/extension-data-absent-reason.html\" target=\"_blank\" title=\"http://hl7.org/fhir/extension-data-absent-reason.html\">http://hl7.org/fhir/extension-data-absent-reason.html</a>  Which is where the argonaut discussions started...</p>",
        "id": 153864586,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482346675
    },
    {
        "content": "<p>You can slice by profile, but not by value set.  But slicing wouldn't meet your need because you don't want a mandatory slice, but want to require that if anything's present, at least one slice matches your value set.  There's no way to do that by slicing.</p>",
        "id": 153864587,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1482346828
    },
    {
        "content": "<p>- So a question about the spec?  Is the discriminator code if the element has a terminology binding?  ( there are no examples that show this - only a bunch of fixed values)</p>",
        "id": 153864588,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482347102
    },
    {
        "content": "<p>I'm not following the question</p>",
        "id": 153864593,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1482347863
    },
    {
        "content": "<p>when \" the element has a terminology binding, it SHALL be associated with a complete binding with a required Value Set that enumerates the list of possible codes in the value set. \"  is the discriminator <code>code</code>? </p>",
        "id": 153864595,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482348412
    },
    {
        "content": "<p>I'm afraid I don't know how to slice by value set.  But even if it were possible, slicing wouldn't meet your needs.  A 0..1 slice would say it's fine to have any coding you like and a 1..1 slice would say the coding always has to be present.  In order to say \"must have a coding that matches this value set *or* text\", you need an invariant.</p>",
        "id": 153864596,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1482348885
    },
    {
        "content": "<p>OK - thanks for the answer on slicing by value set.  </p>\n<p>I have a couple place where I do slice by valueset and I would think there is a need for that generally ( e.g  first coding is the standard answer list and second is the local answer list etc ). but like you said you could use an invariant instead.</p>\n<p>To use an invariant I may need the valueset extension.   </p>\n<p>Back to the binding and using a data-absent-reason extension on code.  Do you know if that will validate?  I'll check that out too.</p>",
        "id": 153864597,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482350124
    },
    {
        "content": "<p>so what you realy want is a variant of extensible that says 'if you don't provide one of the correct codes, you have to provide text only, not an alternate code' . I don't think that's a useful rule, personally, But if you really want to make it, there's 3 different ways to go about it:<br>\n- use a required binding on the code.coding, and no binding on the code itself<br>\n- use an extensible binding on the code, with a fhirpath constraint that either fixes coding.system or the value set (coding in '[url'])<br>\n- define a max value set using the max value set extension which is the same as the main value set</p>",
        "id": 153864600,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482350816
    },
    {
        "content": "<p>- use a required binding on the code.coding, and no binding on the code itself  is what I did <a href=\"http://build.fhir.org/ig/Healthedata1/Argo-DSTU2/StructureDefinition-argo-careteam.html\" target=\"_blank\" title=\"http://build.fhir.org/ig/Healthedata1/Argo-DSTU2/StructureDefinition-argo-careteam.html\">here</a> and you pointed out I won't validate.</p>",
        "id": 153864606,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482351753
    },
    {
        "content": "<p>Required binding on code.coding would prevent translations</p>",
        "id": 153864608,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1482352013
    },
    {
        "content": "<p>as I understand it, preventing translations is the goal. </p>",
        "id": 153864609,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482352071
    },
    {
        "content": "<p>I don't recall saying that wouldn't validate. Perhaps I misunderstood</p>",
        "id": 153864610,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482352098
    },
    {
        "content": "<p>Thanks for the suggestions and I'll take another stab at this.</p>",
        "id": 153864611,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482352287
    },
    {
        "content": "<p>Very helpful BTW</p>",
        "id": 153864612,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482352311
    },
    {
        "content": "<p>Why would you want to avoid translations?  Obviously you want the primary code to be there if data is coded, but not allowing translations is generally a bad thing.</p>",
        "id": 153864623,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1482355384
    },
    {
        "content": "<p>I agree, but that that's the whole sticking point of extensibility here</p>",
        "id": 153864625,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482355494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> It's not preventing translations. It's allowing for truely freetext and uncodified fields. What we want to say is you MUST provide a LOINC (and, as required allows, you can additionally provide more translations). But you can also have a \"freetext\" value</p>",
        "id": 153864638,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1482359550
    },
    {
        "content": "<p>that will never have a code - proprietary or other - the backing data is truely a string typed in by the practitioner</p>",
        "id": 153864639,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1482359581
    },
    {
        "content": "<p>LOINC being the example, but this applies pretty broadly to the \"code\" concept in many resources</p>",
        "id": 153864640,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1482359620
    },
    {
        "content": "<p>so that's just a straight extensible binding. </p>",
        "id": 153864641,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482359654
    },
    {
        "content": "<p>No, because then you can provide any other code than LOINC, not be able to be validated/failed, and still meet the profile</p>",
        "id": 153864642,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1482359680
    },
    {
        "content": "<p>but that's what you described</p>",
        "id": 153864643,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482359700
    },
    {
        "content": "<p>No, there is *no* codeable in my example at all. Only freetext. and only rarely. Most values will have a code meeting the required.</p>",
        "id": 153864644,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1482359732
    },
    {
        "content": "<p>If we losened to extensible, it's valid for someone to choose, say, SNOMED or some other code and be in compliance/validated against the profile</p>",
        "id": 153864646,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1482359775
    },
    {
        "content": "<p>so you're saying that if it's coded, it *has* to be coded in the specified value set? </p>",
        "id": 153864647,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482359791
    },
    {
        "content": "<p>Correct</p>",
        "id": 153864648,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1482359797
    },
    {
        "content": "<p>which matches with regulation as well</p>",
        "id": 153864649,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1482359804
    },
    {
        "content": "<p>that goes against all our existing practice as demanded by implementers, because the value sets and code systems can never keep up</p>",
        "id": 153864650,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482359816
    },
    {
        "content": "<p>So far, Argonaut implementers have been in agreement as this also meets required regulation for CCDS by the ONC</p>",
        "id": 153864651,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1482359865
    },
    {
        "content": "<p>well, this is an extensible binding with a max value set = the extensible value set</p>",
        "id": 153864652,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482359890
    },
    {
        "content": "<p>Yes, when we've discussed previously, we thought it would be easier to define this with a different or special binding, but there didn't seem to be any appetite for that (and it wouldn't fix the DSTU 2 issue)</p>",
        "id": 153864653,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1482359930
    },
    {
        "content": "<p>I assume, as the profile goes through ballot, we'll see how/what comments come in as more eyes look at this. But for now, this was the compromise/proposal to try to get as close to regulation as possible</p>",
        "id": 153864654,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1482360016
    },
    {
        "content": "<p>well, Eric, that's how to do this correctly - an extensible binding with a max value set, and the validator supports that (or will, if it doesn't now)</p>",
        "id": 153864655,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482360055
    },
    {
        "content": "<p>I'll weigh in here and say that I thnk the described binding needed is clear and I want to make sure I'm following how <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  says an extensable binding will work for this. If you make the binding REQUIRED, EXTENSABLE and MAX VALUE SET = the set of ALL acceptable LOINC codes (for example) then are you saying that extensable will still allow text only and NO codable concept? </p>",
        "id": 153864668,
        "sender_full_name": "Robert McClure",
        "timestamp": 1482362174
    },
    {
        "content": "<p>no, not required. </p>",
        "id": 153864671,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482362897
    },
    {
        "content": "<p>extensible = use one of these codes, or if you can't, text, or another code </p>",
        "id": 153864673,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482362911
    },
    {
        "content": "<p>max binding provided as well as extensible = if you use codes outside the extensible value set, it must be one of these codes </p>",
        "id": 153864674,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482362937
    },
    {
        "content": "<p>outcome = use one of these codes, or if you can't, text</p>",
        "id": 153864675,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482362955
    },
    {
        "content": "<p>I think a simpler and more consistent accross the board approach is using a data abent extension on code + invariant.  Would work for both code and codeable.  We discussed this and wanted to try something else.  I'm creating an example now so you all can shoot it down.  :-)</p>",
        "id": 153864676,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482363065
    },
    {
        "content": "<p>ok, we'll enjoy doing that</p>",
        "id": 153864677,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482363096
    },
    {
        "content": "<p>here is an example using careteam provider.role in us-core  where the binding is required the invarient requires a code or DAR extension + provider.role.text.    Will that work?   We have already discussed and documented using the DAR for code....</p>",
        "id": 153864687,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482365232
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/y-xW4y-81r3AV5PzPE8PL68K/Screen-Shot-2016-12-21-at-4.00.27-PM.png\" target=\"_blank\" title=\"Screen-Shot-2016-12-21-at-4.00.27-PM.png\">Screen-Shot-2016-12-21-at-4.00.27-PM.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/y-xW4y-81r3AV5PzPE8PL68K/Screen-Shot-2016-12-21-at-4.00.27-PM.png\" target=\"_blank\" title=\"Screen-Shot-2016-12-21-at-4.00.27-PM.png\"><img src=\"/user_uploads/10155/y-xW4y-81r3AV5PzPE8PL68K/Screen-Shot-2016-12-21-at-4.00.27-PM.png\"></a></div>",
        "id": 153864688,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482365246
    },
    {
        "content": "<p>checking to see if the validation works right now...</p>",
        "id": 153864689,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482365305
    },
    {
        "content": "<p>that seems very clunky for the requirement - forcing an extension. why not just use max-value set?</p>",
        "id": 153864691,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482366235
    },
    {
        "content": "<p>I agree that max value set is a better approach.  Still stuck on the idea that a translation coding will make this look just like a regular extensible binding in the end.   Since the code system is SCT or CPT  for some required bindings, there will not be a way to differentiate standard codes  from  a translaction code without a terminology server -although that is kind of true anyway.   </p>",
        "id": 153864693,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482367435
    },
    {
        "content": "<p>can I do it with spreadsheets or do I need to go into the SD directly?</p>",
        "id": 153864694,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482367487
    },
    {
        "content": "<p>I don't think it will; translations may be present, but something in there must come from the max value set</p>",
        "id": 153864695,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482367551
    },
    {
        "content": "<p>make me a task for getting it to work in a spreadsheet.</p>",
        "id": 153864696,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482367577
    },
    {
        "content": "<p>and for your other issues - else I'll miss them. Nearly finished what I'm doing....</p>",
        "id": 153864698,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482367588
    },
    {
        "content": "<p>gforge tasks?</p>",
        "id": 153864699,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482367633
    },
    {
        "content": "<p>yes</p>",
        "id": 153864701,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482367668
    },
    {
        "content": "<p>got it</p>",
        "id": 153864702,
        "sender_full_name": "Eric Haas",
        "timestamp": 1482367679
    },
    {
        "content": "<p>though maybe I should take up the notion of an extension on ElementDefinition.binding that modulates extensible with vocab:<br>\n- allow either other code or text<br>\n- allow only other code<br>\n- allow only text </p>",
        "id": 153864703,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482368045
    },
    {
        "content": "<p>we've mentioned the 2nd before, but not executed on it </p>",
        "id": 153864704,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482368065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191503\">@Robert McClure</span> what does the binding spec have as options here?</p>",
        "id": 153864706,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482368079
    },
    {
        "content": "<p>We need to revisit the allowance for use of TEXT instead of a concept ID, but we do allow for it based on or original review of this. </p>\n<p>In the second section of the Binding Semantics work (<a href=\"http://wiki.hl7.org/index.php?title=Binding_Syntax#SHALL_specify_one_of_the_following_Binding_Strengths_to_describe_Expected_behaviors_for_Sending.2Foriginating_data_Receiving.2Fconsuming_data\" target=\"_blank\" title=\"http://wiki.hl7.org/index.php?title=Binding_Syntax#SHALL_specify_one_of_the_following_Binding_Strengths_to_describe_Expected_behaviors_for_Sending.2Foriginating_data_Receiving.2Fconsuming_data\">http://wiki.hl7.org/index.php?title=Binding_Syntax#SHALL_specify_one_of_the_following_Binding_Strengths_to_describe_Expected_behaviors_for_Sending.2Foriginating_data_Receiving.2Fconsuming_data</a>) we say that when a \"Binding Strength\" of CEA (Coding with Exceptions Allowed) is specified, this means that:<br>\nThe Sending perspective:<br>\n  1) SHALL send from expansion if idea is in the expansion<br>\n  2) MAY send something not in expansion if idea is not in the expansion<br>\n      1) SHALL Flag the instance in some way to clearly identify that the concept sent is not in the expansion set<br>\n          1) Send a code and an identification of code system (can be local)<br>\n          2) Send text and no code</p>\n<p>So this would mean we’d align with your #1 I think</p>",
        "id": 153864798,
        "sender_full_name": "Robert McClure",
        "timestamp": 1482437440
    },
    {
        "content": "<p>btw, if it turns out FHIR wants to closely tune extensable/CEA to say specifically code or text, code only, text only, I'd see that as three flavors of what we call CEA. We can add that to the binding semantics material if the decision is to be that specific. </p>",
        "id": 153864914,
        "sender_full_name": "Robert McClure",
        "timestamp": 1482514616
    },
    {
        "content": "<p>I think it would make sense to add to the binding semantics if it turns out that there is a implementer to do that </p>",
        "id": 153864926,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1482520360
    }
]