[
    {
        "content": "<p>Need a refresher on whether DAR can be used on CodeableConcepts with required bindings.<br>\nSpecifically, <a href=\"http://build.fhir.org/terminologies.html#required\" target=\"_blank\" title=\"http://build.fhir.org/terminologies.html#required\">http://build.fhir.org/terminologies.html#required</a> says</p>\n<blockquote>\n<p>at least one Coding element SHALL be present<br>\none of the Coding values SHALL be from the specified value set</p>\n</blockquote>\n<p>Anytime the CodeableConcept has a Required binding (such as US Core's DocumentReference.type), do the above SHALL statements prevent us from sharing the local code and/or text when we weren't able to map our local code to a code in the required value set?  Using a data absent reason (DAR) extension doesn't seem to satisfy the SHALL statements.  Can you help me understand whether the local code and/or text can be shared without a coding from the specified value set?  Or, do we need to reconsider loosening the binding strength to Extensible instead?</p>",
        "id": 161859855,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1553694168
    },
    {
        "content": "<p>We used the max binding to allow text only</p>",
        "id": 161864421,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553697053
    },
    {
        "content": "<p>Or only these codes</p>",
        "id": 161864454,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553697075
    },
    {
        "content": "<p>Not an answer to your question</p>",
        "id": 161864554,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553697123
    },
    {
        "content": "<p>Short answer is we say you can use DAR on the code element.  But I’m not sure if it will pass validation</p>",
        "id": 161865126,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553697447
    },
    {
        "content": "<p>Pass</p>",
        "id": 161865141,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553697461
    },
    {
        "content": "<p>Thé validator may be looking for the code</p>",
        "id": 161865215,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553697498
    },
    {
        "content": "<p>Have there been any recent conversations to rename the 'max' binding? It seems about every few months we get a question!</p>",
        "id": 161865866,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1553697913
    },
    {
        "content": "<p>we can name it anything we want.   required + text?</p>",
        "id": 161867228,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553698645
    },
    {
        "content": "<p>required or text?</p>",
        "id": 161867251,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553698662
    },
    {
        "content": "<p>If an element has a 'required' binding, that element can only be present if it includes a coding from the bound value set.  It can't be present if it only contains text, extensions or anything else that doesn't <em>also</em> include a coding from the bound value set.</p>",
        "id": 161870227,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553700212
    },
    {
        "content": "<p>A 'max' required binding doesn't allow text only.  If you want text-only, the binding strength needs to be 'extensible'.</p>",
        "id": 161870340,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553700267
    },
    {
        "content": "<p>see, even Lloyd doesn't get what we did :)</p>",
        "id": 161871390,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1553700857
    },
    {
        "content": "<p>see <a href=\"https://build.fhir.org/ig/HL7/US-Core-R4/general-guidance.html#extensible--max-valueset-binding-for-codeableconcept-datatype\" target=\"_blank\" title=\"https://build.fhir.org/ig/HL7/US-Core-R4/general-guidance.html#extensible--max-valueset-binding-for-codeableconcept-datatype\">Extensible + Max-ValueSet binding for CodeableConcept Datatype</a></p>",
        "id": 161871571,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1553700990
    },
    {
        "content": "<p>If that's what's happening, then the definition of the max-valueSet extension is broken.  Because it says \"This defines a 'required' binding over the top of the extensible binding.\".  And a required binding doesn't allow a 'text' element unless there's a coding from the specified value set.</p>",
        "id": 161872067,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553701357
    },
    {
        "content": "<p>You're going to need to revamp the definition of the max-valueSet to explicitly allow free-text.  (and if you didn't have that exception, there'd be no need for the max-valueSet extension because you'd just slice and declare both your extensible/preferred and your required binding.</p>",
        "id": 161872211,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553701446
    },
    {
        "content": "<p>I have no idea what you said in that last part.</p>",
        "id": 161873926,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553702421
    },
    {
        "content": "<p>first of  all there are like 5 people who know what what the min and max binding do.</p>",
        "id": 161874133,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553702564
    },
    {
        "content": "<p>and we limit ourselves to basically 3 bindings  ( since preferred == example)</p>",
        "id": 161874314,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553702687
    },
    {
        "content": "<p>shockingly  in the real world things are not that simple</p>",
        "id": 161874373,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553702735
    },
    {
        "content": "<p>so we wanted required without the heavy handed constraint of no text only</p>",
        "id": 161874482,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553702788
    },
    {
        "content": "<p>the way I read it is take the extensible with its text only option and lose the extensible code part</p>",
        "id": 161874534,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553702840
    },
    {
        "content": "<blockquote>\n<p>a 'required' binding over the top of the extensible binding.\" </p>\n</blockquote>\n<p>Means to me just that,  take the extensible binding and restrict the code set so you can't add on to it.</p>",
        "id": 161874906,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553703104
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 161874935,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553703122
    },
    {
        "content": "<p>the caveat here is the max binding == regular extensible binding</p>",
        "id": 161875390,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553703368
    },
    {
        "content": "<p>Otherwise is no different than a required binding</p>",
        "id": 161875508,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553703449
    },
    {
        "content": "<p>I agree the definition could be be improved by striking out the entire second sentence in </p>\n<blockquote>\n<p>The maximum allowable value set, for use when the binding strength is 'extensible' or 'preferred'. This value set is the value set from which additional codes can be taken from. This defines a 'required' binding over the top of the extensible binding.</p>\n</blockquote>",
        "id": 161875921,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553703744
    },
    {
        "content": "<p>I understand what you want.  (required + text).  I'm just saying that, with its current definition, maxValueSet isn't giving you that.  So make a change request to update the description of maxValueSet to what it needs to be.</p>",
        "id": 161878753,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553705687
    },
    {
        "content": "<p>So let's step back to Michelle's original question. As it stands today, US Core has several required value sets. The stance is that NO data can be provided if you don't map to the actual value set? DAR for code does not work so that you can provide other translations, and display (text) also can't be provided.</p>",
        "id": 161884165,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1553709263
    },
    {
        "content": "<p>I think the argo max value set issue probably needs to be dug into, I thought we did this on guidance from previous threads :)</p>",
        "id": 161884180,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1553709288
    },
    {
        "content": "<p>It's weird to allow text but not other codes.  And if you allow text + other codes, then you're essentially extensible.</p>",
        "id": 161888692,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553712321
    },
    {
        "content": "<p>I think this got more strange when some PC concepts moved their statuses (things that are commonly required bindings) to codeableConcepts.</p>",
        "id": 161889530,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1553712810
    },
    {
        "content": "<p>clincial and verification statuses</p>",
        "id": 161889554,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1553712829
    },
    {
        "content": "<p>But DocType is another good example</p>",
        "id": 161889563,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1553712837
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 161890099,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553713184
    },
    {
        "content": "<p>so now I see the issue.   what used to be a code where DAR works cleanly is now A codeableConcept.   too many options?</p>",
        "id": 161890840,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553713620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191356\">@Jenni Syed</span>  what do you want the answer to be?</p>",
        "id": 161890870,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553713638
    },
    {
        "content": "<p>we coould profile them back to code.  ;-)</p>",
        "id": 161890964,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553713688
    },
    {
        "content": "<blockquote>\n<p>we coould profile them back to code.  ;-)</p>\n</blockquote>\n<p>Is that allowed?</p>",
        "id": 161891491,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1553714041
    },
    {
        "content": "<p>by allowed yes it is possible by constraining all but a single code, whether a good idea is another question because it would wreck interop</p>",
        "id": 161892321,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553714592
    },
    {
        "content": "<p>The equivalent of 'code' is just a required binding.  \"You must have a code from this value set if the element is present\" - no plain text, no just extensions.  (As an aside, technically you can't send a regular 'code' element with an extension in place of a value either because that would violate the required binding.)</p>",
        "id": 161892939,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553715081
    },
    {
        "content": "<p>Found the old conversation: <a href=\"#narrow/stream/179166-implementers/topic/missing.20required.20field\" title=\"#narrow/stream/179166-implementers/topic/missing.20required.20field\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/missing.20required.20field</a></p>",
        "id": 161896939,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1553718092
    },
    {
        "content": "<p>It sounds like \"required\" with a required binding means DAR isn't useful anymore</p>",
        "id": 161896960,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1553718111
    },
    {
        "content": "<p>I don't think that was understood</p>",
        "id": 161896995,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1553718122
    },
    {
        "content": "<p>Also, most required fields in FHIR are code fields (statuses) at least in core</p>",
        "id": 161897034,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1553718138
    },
    {
        "content": "<p>So I know some of this may also be resolved now that \"unknown\" is in most statuses. Which relegates this back to IGs and profiles?</p>",
        "id": 161897132,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1553718218
    },
    {
        "content": "<p>If you've got an \"unknown\" you're relatively ok</p>",
        "id": 161897384,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553718368
    },
    {
        "content": "<p>that solves codes,  what about codeables without \"unknown\"  are there any of those?</p>",
        "id": 161897553,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553718506
    },
    {
        "content": "<p>I will need to review the DAR bit in US Core.   (I would prefer if DAR wiped out the binding too. that is a modifier.)</p>",
        "id": 161897625,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553718576
    },
    {
        "content": "<p>I guess we could tack on unknowns to the valuesets if we needed to.</p>",
        "id": 161897777,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553718682
    },
    {
        "content": "<p>Modifiers change interpretation of data, they don't change model constraints</p>",
        "id": 161897780,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553718685
    },
    {
        "content": "<p>OK a magic extension then</p>",
        "id": 161897897,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553718781
    },
    {
        "content": "<p>Any magic would be new methodology which would change the behavior of binding strength of required, which is now normative, so it'd have to be magic indeed...</p>",
        "id": 161898010,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553718855
    },
    {
        "content": "<p>Isn't the point of DAR to safely handle a 1..1 required?</p>",
        "id": 161915958,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1553737834
    },
    {
        "content": "<p>Thinking about US Core/Argonaut, a simple response would be to make everything we can 0..1 'Must Support' which doesn't feel right.</p>",
        "id": 161916058,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1553737997
    },
    {
        "content": "<p>There's a difference between 1..1 element and a 'required' binding.</p>",
        "id": 161922742,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553746801
    },
    {
        "content": "<p>You can absolutely use DAR with a non-coded element.  You can also use with 1..1 coded elements that don't have required bindings.  If it's got a required binding and it's 1..1, you have to pick one of the approved codes or not send the instance.  If you don't think the set of codes covers the use-cases, then you need to propose an addition and, for prior releases, you've got a choice of not sending data or picking what's closest/safest.</p>",
        "id": 161922822,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553746921
    },
    {
        "content": "<p>Going back to my initial question, it seems we have consensus that a CodeableConcept with 1..1 cardinality and required binding (and no unknown in the value set) is problematic when we don't have a value at all or want to allow text and/or local codes that couldn't be mapped to a code in the required value set.  I think there are 5 specific elements that applies to:</p>\n<ul>\n<li>DocumentReference.type</li>\n<li>AllergyIntolerance.clinicalStatus (invariant makes cardinality required most of the time)</li>\n<li>AllergyIntolerance.verificationStatus</li>\n<li>Condition.clinicalStatus (invariant makes cardinality required for non-In Error problems)</li>\n<li>Condition.verificationStatus</li>\n</ul>\n<p>For Condition and AllergyIntolerance clinicalStatus, our profiles are at the mercy of the base spec.  FYI - The data type change from code to CodeableConcept was made to allow SNOMED codes as translations.</p>\n<p>For the others, I think Argonaut (and US Core) do have some choices to make in R4.  I recommend the following changes (and I can log a tracker if there is general agreement here):</p>\n<ul>\n<li>DocumentReference.type -- change to extensible binding</li>\n<li>AllergyIntolerance.verificationStatus -- change to 0..1</li>\n<li>Condition.verificationStatus -- change to 0..1</li>\n</ul>",
        "id": 161949570,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1553778270
    },
    {
        "content": "<p>Thanks for the summary Michelle.  I don't understand how the transition from code to CodeableConcept made any difference.  The cardinalities are what matter in terms of narrative-only.   If the cardinalities are over-tight for Condition and AllergyIntolerance, the correct solution is to loosen the constraints.  I recognize that doesn't fix things for published releases, but it's absolutely the correct thing to do going forward.  Cardinality in the base resource is never supposed to be about what \"should\" happen, it's about what we're confident will always exist.</p>",
        "id": 161957156,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553783064
    },
    {
        "content": "<p>&lt;edited&gt;  I was recalling <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=18833\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=18833\">GF#18833</a> incorrectly.  In this past discussion, when Patient Care was presented with use cases where clinicalStatus didn't exist, PC updated the invariant to not require clinicalStatus for diagnosis</p>",
        "id": 161960972,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1553785397
    },
    {
        "content": "<p>You shouldn't have been able to use a DAR with a code data type.  If you could, that's a tooling error.</p>",
        "id": 161961367,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553785603
    },
    {
        "content": "<p>I edited my comments to clarify.  I forgot that Patient Care also edited the Condition invariant, such that clinicalStatus isn't required for encounter-diagnoses (only problems) now.</p>",
        "id": 161963976,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1553787181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  Why can't it be used with code?</p>",
        "id": 161969478,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1553790794
    },
    {
        "content": "<p>or are you saying it couldn't be used for a required code binding?</p>",
        "id": 161969495,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1553790825
    },
    {
        "content": "<p>Yes Lloyd is saying both since code is usually required binding.  Lloyd's assertion requires further discussion since ramifications are deeply disruptive to implementation behavior.</p>",
        "id": 161971715,
        "sender_full_name": "Eric Haas",
        "timestamp": 1553792340
    },
    {
        "content": "<p>If something has a type of 'code', it <em>always</em> has a required binding.</p>",
        "id": 161980012,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1553797853
    },
    {
        "content": "<p>Here is a summary of the binding for US Core R4.  We will have to look at all of them. <br>\n<a href=\"https://github.com/HL7/US-Core-R4/wiki/Survey-of-Required-Coded-Elements\" target=\"_blank\" title=\"https://github.com/HL7/US-Core-R4/wiki/Survey-of-Required-Coded-Elements\">https://github.com/HL7/US-Core-R4/wiki/Survey-of-Required-Coded-Elements</a></p>",
        "id": 162365441,
        "sender_full_name": "Eric Haas",
        "timestamp": 1554232668
    },
    {
        "content": "<p>here is a summary of the required status element bindings in the  the Currrent FHIR build for comparison:  <a href=\"https://github.com/Healthedata1/MyNotebooks/wiki/Summary-of-required-status-element-with-required-binding\" target=\"_blank\" title=\"https://github.com/Healthedata1/MyNotebooks/wiki/Summary-of-required-status-element-with-required-binding\">https://github.com/Healthedata1/MyNotebooks/wiki/Summary-of-required-status-element-with-required-binding</a></p>",
        "id": 162392955,
        "sender_full_name": "Eric Haas",
        "timestamp": 1554259014
    },
    {
        "content": "<p>I don't understand the rationale behind the invariant and switch to codeable for Condition and Allergy clinicalStatus.  I think it worthwhile discussing  whether there are use cases where the status is not known and whether to log a tracker to remove the invariants.  Statuses being codeable is a clear outlier and annoying.</p>\n<p>So is here is my list ( including some Michelle missed):</p>\n<ul>\n<li>DocumentReference.type --  - we actually voted against \"change to extensible binding\"  for this in US Core ballot <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19914\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19914\">GF#19914</a> can we update the valueset to \"all LOINC values whose SCALE is DOC in the LOINC database.\" and  include an unknown? <span class=\"user-mention\" data-user-id=\"191410\">@Brett Marquard</span> </li>\n<li>AllergyIntolerance.verificationStatus -- change to 0..1 Must Support</li>\n<li>Condition.verificationStatus -- change to 0..1 Must Support</li>\n<li>CareTeam.status -- change to 0..1 Must Support</li>\n<li>Immunization.status -- FHIR core binding and cardinality, Discuss whether there are use cases where the status is not known in and whether the resource has any worth if status is absent or unknown.  Then if warranted log a FHIR Tracker to PHER</li>\n<li>DocumentReference.status -- FHIR core binding and cardinality, Discuss whether there are use cases where the status is not known in and whether the resource has any worth if status is absent or unknown. Then if warranted log a FHIR Tracker to SDWG</li>\n<li>CarePlan.text.status -- FHIR core binding and cardinality, Discuss whether there are use cases where this status is not known  and whether the resource has any worth if status is absent or unknown. Then decide what to do :-)</li>\n<li>Goal.lifecycleStatus - -- FHIR core binding and cardinality, Discuss whether there are use cases where the status is not known  and whether the resource has any worth if status is absent or unknown. Then if warranted log a FHIR Tracker to PC</li>\n</ul>",
        "id": 162579278,
        "sender_full_name": "Eric Haas",
        "timestamp": 1554420994
    },
    {
        "content": "<p>I find it interesting that instead of using Data Absent Reason, we are going to start pushing unknown into our Implementation Guide  value sets. Seems like we are pushing a real problem around  - <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span>  is this the preferred approach of FHIR-I?</p>",
        "id": 162619158,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1554468059
    },
    {
        "content": "<p>I think it’s better to put the code in the value set itself</p>",
        "id": 162619311,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1554468181
    },
    {
        "content": "<p>Many of these should be recommended to be changed in R5. Because of the lockstep movement, the IG might need to hack the constraint into your IG, while the IG documents that it is tracking a CR targeting R5. This is a common governance process that IHE uses. In this way when R5 comes around, you have reminders of what hacks could now be removed. Rather than relying on humans to remember.</p>",
        "id": 162621657,
        "sender_full_name": "John Moehrke",
        "timestamp": 1554470100
    },
    {
        "content": "<p>although I am reminded when the base is 0..1 required that's not possible.</p>",
        "id": 162622480,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1554470671
    },
    {
        "content": "<p>Tracker to correct  <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20696\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20696\">GF#20696</a></p>",
        "id": 162667708,
        "sender_full_name": "Eric Haas",
        "timestamp": 1554503857
    },
    {
        "content": "<p>We can't  hack a constraint for a 1..1 required binding element.   Based on the conformance and profiling rules that is as tight as it get and you can't loosen it.</p>",
        "id": 162667937,
        "sender_full_name": "Eric Haas",
        "timestamp": 1554504026
    },
    {
        "content": "<p>is a one way street.</p>",
        "id": 162667963,
        "sender_full_name": "Eric Haas",
        "timestamp": 1554504047
    },
    {
        "content": "<p>when the base has a required binding.... the committee is asserting that all relevant use cases are core committee business. You have to take any issues to them</p>",
        "id": 162724238,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1554589761
    },
    {
        "content": "<p>and we will</p>",
        "id": 162734873,
        "sender_full_name": "Eric Haas",
        "timestamp": 1554607739
    },
    {
        "content": "<p>I'm hearing this:<br>\n1. required binding = no DAR. If you might not have a valid value, cardinality should allow omission. If it doesn't, and you're implementing DSTU2, you are stuck. Perhaps you could use an extension to modify the meaning of the selected code. You certainly need to educate recipients on the limitations of the code. Going forward, an 'unknown' value may be adopted in these cases. (Though maybe \"unassigned\" or \"NI\" would be better than \"unknown.\")<br>\n2. Max may or may not require work, but if it doesn't then the US Core binding Brett pointed to does.<br>\nRe the CC type change: <br>\nSNOMED was the example, but we're hitting the issue far in advance of that. The issue is that we have status values that are not in FHIR, and that are not bijective with FHIR. At the same time, interoperability requires core-defined codes. CC supports both requirements, and I'm not sure I see what the problem is with this approach. I gather that some would prefer simply to use cardinality on the FHIR code and to let implementers add whatever extensions they need for more refined status values. I prefer using a single element, as the two values are, or should be, representing the same meaning, which shouldn't be repeated in separate elements. That way the more precise value is directly associated with the mapped value.</p>",
        "id": 163204780,
        "sender_full_name": "Jay Lyle",
        "timestamp": 1555086148
    },
    {
        "content": "<p>see <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20696\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20696\">GF#20696</a></p>",
        "id": 163207042,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1555088148
    },
    {
        "content": "<p>for US Core based on R4 we plan to update cardinality to 0..1 in places we are stuck</p>",
        "id": 163207101,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1555088177
    },
    {
        "content": "<p>If you have extra status then as you use extensions. That is the stance I am taking.  I think what PC did was a mistake and would like to see the codeables return to code for R5.</p>",
        "id": 163231646,
        "sender_full_name": "Eric Haas",
        "timestamp": 1555107703
    },
    {
        "content": "<blockquote>\n<p>we have status values that are not in FHIR</p>\n</blockquote>\n<p>In which case, you need to take it up with the committee - they've asserted it's under control</p>",
        "id": 163239846,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1555117227
    },
    {
        "content": "<blockquote>\n<p>If something has a type of 'code', it always has a required binding.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> There are a couple cases where I see a preferred binding strength with a code data type (e.g. Attachment.language).  Should that be a required binding since the data type is code?</p>",
        "id": 163410545,
        "sender_full_name": "Michelle (Moseman) Miller",
        "timestamp": 1555357957
    },
    {
        "content": "<p>Yes.  Can you please submit a change request?  (That's a candidate for an R4 patch)</p>",
        "id": 163419146,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1555364861
    },
    {
        "content": "<p>Wouldn't that be a breaking change to a normative data type?</p>",
        "id": 163419361,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1555365047
    },
    {
        "content": "<p>that's not a justified change. that's a carefully chosen binding and an example of one of the special cases for preferred or extensible bindings on a code attribute. Note that it has a max binding</p>",
        "id": 163419413,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1555365119
    },
    {
        "content": "<p>it arises because there's a grammar with unlimited possible values in the code element, even if it has a max (=required) binding to a single value set</p>",
        "id": 163419518,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1555365202
    },
    {
        "content": "<p>Ah.  If there's a max, we're fine.</p>",
        "id": 163432149,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1555378714
    }
]