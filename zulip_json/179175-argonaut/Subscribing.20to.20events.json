[
    {
        "content": "<p>There are three concepts to a subscription that can easily be conflated:<br>\n1. The subject of a subscription (e.g. a patient or any patient with a certain PCP)<br>\n2. When you want to hear about that subject (e.g. when the patient has a new appointment or when a patient with that PCP is admitted)<br>\n3. The content of the notification.  <br>\nI think it behooves us to treat these as separate concepts and answer what we want before diving into the details of how to do it.</p>",
        "id": 164643059,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556733667
    },
    {
        "content": "<p>Agree on separation of concerns here. I think (3) is the clearest -- or the least confusing with our current \"payload\" approach, though it's still interesting in its own right.</p>",
        "id": 164656255,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556743513
    },
    {
        "content": "<p>For (1) and (2), the way I look at the world, \"subject\" is a bit slippery. It's clearer for me to think about an event stream (e.g., all events that match a specific definition like \"admission\") and then a series of filters that narrow things down (e.g, by subject, but possibly by diverse parameters, like time range, codes, etc).</p>",
        "id": 164656334,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556743577
    },
    {
        "content": "<p>I'm still trying to articulate this properly, but <strong><a href=\"https://gist.github.com/jmandel/f57fda6ce92174af663abe13cbb4612e\" target=\"_blank\" title=\"https://gist.github.com/jmandel/f57fda6ce92174af663abe13cbb4612e\">this gist is a start</a></strong>, in terms of how I'd think about breaking down the \"events\" (more or less your (2), <span class=\"user-mention\" data-user-id=\"191936\">@Michael Donnelly</span>) and \"filters\" (a generalization of your (1), <span class=\"user-mention\" data-user-id=\"191936\">@Michael Donnelly</span> ).</p>",
        "id": 164656399,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556743643
    },
    {
        "content": "<p>(For those who haven't seen it, this is building on the \"named event\" approach that's <a href=\"https://confluence.hl7.org/pages/viewpage.action?pageId=46596101#id-2019-05SubscriptionsTrack-ExampleEventDefinitionextension\" target=\"_blank\" title=\"https://confluence.hl7.org/pages/viewpage.action?pageId=46596101#id-2019-05SubscriptionsTrack-ExampleEventDefinitionextension\">being tested at connectathon</a>. You may have to \"expand source\" in Jira to see it properly.)</p>",
        "id": 164656490,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556743696
    },
    {
        "content": "<p>Our system support event definition and subscriptions based on these user-definable queries:<br>\n<a href=\"/user_uploads/10155/hYHCOjX-OKwDNrb8nseWTvHa/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/hYHCOjX-OKwDNrb8nseWTvHa/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/hYHCOjX-OKwDNrb8nseWTvHa/pasted_image.png\"></a></div>",
        "id": 164661356,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1556747688
    },
    {
        "content": "<p>Can you help explain what \"Wrap query\" means <span class=\"user-mention\" data-user-id=\"191912\">@Michele Mottini</span> ?</p>",
        "id": 164661400,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556747738
    },
    {
        "content": "<p>Also, if you have a chance to glance through my gist, whether this makes sense to you (and/or seems like a good direction)?</p>",
        "id": 164661470,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556747777
    },
    {
        "content": "<p>oh I have no idea - there are a ton of options there I do not know how to use</p>",
        "id": 164661501,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1556747807
    },
    {
        "content": "<p>basically it is impossible to define those 'events' via FHIR in some reasonable way</p>",
        "id": 164661575,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1556747864
    },
    {
        "content": "<p>so what we are doing are just exposing them as List</p>",
        "id": 164661632,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1556747888
    },
    {
        "content": "<p>and then you can subscribe (via FHIR) to one of these List</p>",
        "id": 164661640,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1556747910
    },
    {
        "content": "<p>I wonder if that's an approach that could be of general use</p>",
        "id": 164661669,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1556747959
    },
    {
        "content": "<p>(I checked: wrap query is 'Except', 'Intersect', 'Union' - basically you can have a list of different filters there and 'Wrap query' tells the system how to combine them)</p>",
        "id": 164661812,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1556748088
    },
    {
        "content": "<p>(here is an example - Anticoagulant Therapy Surveillance:)<br>\n<a href=\"/user_uploads/10155/fzCGnu5EpTk_D2mwa4LKftq6/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/fzCGnu5EpTk_D2mwa4LKftq6/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/10155/fzCGnu5EpTk_D2mwa4LKftq6/pasted_image.png\"></a></div>",
        "id": 164661918,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1556748217
    },
    {
        "content": "<p>Huh! So is all of that backed by EventDefinition? How does it represent \"except\" for instance?</p>",
        "id": 164662609,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556748854
    },
    {
        "content": "<p>No, it is not backed by EventDefinition - it is totally not-FHIR</p>",
        "id": 164666097,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1556752433
    },
    {
        "content": "<p>and I don't think is feasible to define such a thing via FHIR - hence the idea that you keep defining them out of band and just publish them as List</p>",
        "id": 164666171,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1556752476
    },
    {
        "content": "<p>Gotcha -- thanks!</p>",
        "id": 164669462,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556756098
    },
    {
        "content": "<p>I think that's a valid way of looking at it Josh, <del>but I'd like to explore a different angle and see if it works at all.</del>  </p>\n<p><del>When an event occurs, it has two parts</del><br>\n<del>A. The EventDefinition (the platonic form of the event)</del><br>\n<del>B. Contextual data</del></p>",
        "id": 164671599,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556759030
    },
    {
        "content": "<p><del>For ADT or scheduling events, the Encounter is the context.</del></p>",
        "id": 164671774,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556759183
    },
    {
        "content": "<p><del>There are a bunch of indirect contextual data as well: the Patient for the Encounter, the Location where it occurs, the Practitioner for the attending provider.</del></p>",
        "id": 164671792,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556759224
    },
    {
        "content": "<p><del>Another layer deeper, we have the Patient's PCP, etc.</del></p>",
        "id": 164671805,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556759245
    },
    {
        "content": "<p>Now that I've started writing it out, I think my idea adds complexity without adding value.</p>",
        "id": 164671978,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556759505
    },
    {
        "content": "<p>Your first two examples (each with its explicit EventDefinition and EventFilter) look great.  I believe it'd be clear to the client what it's asking for and what it'll get, and a system that already triggers v2 shouldn't have trouble with that.</p>",
        "id": 164672168,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556759748
    },
    {
        "content": "<p>The <a href=\"https://gist.github.com/jmandel/f57fda6ce92174af663abe13cbb4612e#expressiveness\" target=\"_blank\" title=\"https://gist.github.com/jmandel/f57fda6ce92174af663abe13cbb4612e#expressiveness\">Expressiveness</a> example makes perfect sense.  I think having named events like that is a good idea; easier for client developers to understand, fewer fiddly bits.  The status part <em>could</em> be problematic depending on the mapping involved and how much processing is involved in getting the %previous.status.</p>",
        "id": 164672430,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556760011
    },
    {
        "content": "<p>...but since that'd be agreed upon ahead of time in a spec or IG, there's plenty of room to work that out ahead of time.</p>",
        "id": 164672467,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556760074
    },
    {
        "content": "<p>Getting into <a href=\"https://gist.github.com/jmandel/f57fda6ce92174af663abe13cbb4612e#continuing-to-explore-expressiveness\" target=\"_blank\" title=\"https://gist.github.com/jmandel/f57fda6ce92174af663abe13cbb4612e#continuing-to-explore-expressiveness\">Continuing to explore expressiveness</a> is thinner ice.  Instead of  the trigger being an EventDefinition based on an actual step in a workflow, the trigger is or could be perceived to be based on a change to a datum.</p>",
        "id": 164672787,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556760444
    },
    {
        "content": "<p>Practically, if we needed to implement that, we'd take all the specific events in our system, put it through a generalization layer (for all events in a set) and then doing the filtering.</p>",
        "id": 164672864,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556760526
    },
    {
        "content": "<p>Would it be too confusing if EventDefinitions could refer to other event definitions?  E.g.</p>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;resourceType&quot;: &quot;EventDefinition&quot;,\n  &quot;id&quot;: &quot;admission-by-patient&quot;,\n  &quot;trigger&quot;: {\n    &quot;type&quot;: &quot;named-event&quot;,\n    &quot;name&quot;: &quot;admission-by-patient&quot;,\n    &quot;condition&quot;: &quot;eventDefinition = &#39;EventDefinition/admission&#39; and eventFilter = &#39;EventFilter/by-patient&#39;&quot;\n  }\n}\n</pre></div>",
        "id": 164673583,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556761538
    },
    {
        "content": "<p>Then if we wanted a more general version for multiple events without the client having to explicitly make multiple subscriptions, we could do something like</p>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;resourceType&quot;: &quot;EventDefinition&quot;,\n  &quot;id&quot;: &quot;inpatient-status-change-by-patient&quot;,\n  &quot;trigger&quot;: {\n    &quot;type&quot;: &quot;named-event&quot;,\n    &quot;name&quot;: &quot;inpatient-status-change-by-patient&quot;,\n    &quot;condition&quot;: &quot;(eventDefinition = &#39;EventDefinition/admission&#39; or eventDefinition = &#39;EventDefinition/transfer&#39; or eventDefinition = &#39;EventDefinition/discharge&#39;) and eventFilter = &#39;EventFilter/by-patient&#39;&quot;\n  }\n}\n</pre></div>",
        "id": 164673640,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556761612
    },
    {
        "content": "<p>Before putting in that effort, I'd want a better idea of which clients actually wanted a set like that.  If it's common that clients want multiple event definitions and (understandably) don't want a separate subscription for each, we could let them specify multiple EventDefinitions in the triggers:</p>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;resourceType&quot;: &quot;Subscription&quot;,\n  &quot;triggerParameter&quot;: [\n    {&quot;name&quot;: &quot;patientId&quot;, &quot;value&quot;: &quot;Patient/123&quot;}\n  ],\n  &quot;trigger&quot;: [{&quot;reference&quot;: &quot;EventDefinition/admission&quot;},\n              {&quot;reference&quot;: &quot;EventDefinition/transfer&quot;},\n              {&quot;reference&quot;: &quot;EventDefinition/discharge&quot;},\n              {&quot;reference&quot;: &quot;EventFilter/by-patient&quot;}]\n}\n</pre></div>",
        "id": 164673767,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556761830
    },
    {
        "content": "<p>With the EventDefinitions having OR logic, naturally.</p>",
        "id": 164673785,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556761884
    },
    {
        "content": "<p>Ooh, I really like the final bit you arrived at there <span class=\"user-mention\" data-user-id=\"191936\">@Michael Donnelly</span>  -- this kind of thing is super practical and potentially could span across multiple resource types (encounter events and <code>EventDefinition/new-lab-result</code> or whatever, so there's a pool of Observations + Encounters that can be then filtered down <code>by-patient</code>).</p>",
        "id": 164674391,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556762817
    },
    {
        "content": "<p>(Separately: the joining of EventDefinitions like:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>&quot;condition&quot;: &quot;eventDefinition = &#39;EventDefinition/admission&#39; and eventFilter = &#39;EventFilter/by-patient&#39;&quot;\n</pre></div>\n\n\n<p>confuses me a bit, because I was assuming that the \"condition\" would be a valid FHIRpath expression over some input resource, and if I think about what you wrote here:</p>\n</blockquote>\n<p>1. My head hurts, and <br>\n2. It would seem to emit  stream of EventDefinitions rather than a stream of events)</p>",
        "id": 164674460,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556762903
    },
    {
        "content": "<p>I think it ends up not being worth it anyway; if clients can assemble their own set of EventDefinitions in the Subscription itself, the need for combo EventDefinitions isn't crucial.</p>",
        "id": 164674547,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556763023
    },
    {
        "content": "<p>And I totally agree; no reason why a client couldn't put as many EventDefinitions into the same Subscription as long as they all use the same EventFilter.</p>",
        "id": 164674558,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556763056
    },
    {
        "content": "<p>I'm stealing your example for my gist :)</p>",
        "id": 164674693,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556763243
    },
    {
        "content": "<p>Added <a href=\"https://gist.github.com/jmandel/f57fda6ce92174af663abe13cbb4612e#the-rules\" target=\"_blank\" title=\"https://gist.github.com/jmandel/f57fda6ce92174af663abe13cbb4612e#the-rules\">\"The Rules\"</a> and incorporated your example below, <span class=\"user-mention\" data-user-id=\"191936\">@Michael Donnelly</span>.</p>",
        "id": 164675028,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1556763788
    },
    {
        "content": "<p>That works.</p>",
        "id": 164676533,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556766160
    },
    {
        "content": "<p>Good balance of letting servers base events off workflow rather than data model and giving clients the power to hear about the specific things that matter to them.</p>",
        "id": 164676606,
        "sender_full_name": "Michael Donnelly",
        "timestamp": 1556766280
    }
]