[
    {
        "content": "<p>I know we don't provide much guidance on writes, but how do you feel if DocumentReference.date was ignored on write and instead is defaulted by the system? Does that meet the spirit of must support?<br>\ncc: <span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span></p>",
        "id": 202582084,
        "sender_full_name": "Drew Torres",
        "timestamp": 1593616882
    },
    {
        "content": "<p>if it is populated, it must be kept as the client  filled it. right? If the client doesn't know it, then it should be allowed to be left empty. This would be the spirit of the IHE flavor of MS (aka R2 or RE)</p>",
        "id": 202583053,
        "sender_full_name": "John Moehrke",
        "timestamp": 1593617311
    },
    {
        "content": "<p>I mean the issue here is that the field is defined as the date the indexing system index the document.... Our indexing system date is different.</p>",
        "id": 202585109,
        "sender_full_name": "Drew Torres",
        "timestamp": 1593618364
    },
    {
        "content": "<p>I think FHIR does allow business rules allow us to overwrite the field. I believe <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  even said detecting that you don't support a value and rejecting the data meets the spirit of Must Support.</p>",
        "id": 202585244,
        "sender_full_name": "Drew Torres",
        "timestamp": 1593618412
    },
    {
        "content": "<p>I was more curious about the definition of the field.</p>",
        "id": 202585259,
        "sender_full_name": "Drew Torres",
        "timestamp": 1593618420
    },
    {
        "content": "<p>If someone tries to pass in a date it seems like we should be overwriting it.</p>",
        "id": 202585289,
        "sender_full_name": "Drew Torres",
        "timestamp": 1593618439
    },
    {
        "content": "<p>My first thought was that since DocumentReference was created to match the IHE Document Entry metadata, it would seem that DocumentReference.date is supposed to match DocumentEntry.creationTime, which is the time stamp of the document, not the index. Looking at DocumentReference.content.attachment though, it is clear that attachment.creation is the equivalent of DocumentEntry.creationTime.</p>\n<p>GIven the above, it seems to me that a RESTful CREATE of a DocumentReference must populate the DocumentReference.date with the instant when the resource was created (regardless of what was provided in the body of the POST) unless somehow there is a legitimate reason to leave it blank and still satisfy \"must support\".</p>",
        "id": 202589004,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1593619928
    },
    {
        "content": "<p>The .date element was not added for the XDS reason. And early revisions did imply that it was related to indexing.  I think the intention of  the value is to indicate when the DocumentReference was first available. I think the idea was that this would lead to an understanding that the DocumentReference may lag being created from the date that the content itself was created.</p>",
        "id": 202608389,
        "sender_full_name": "John Moehrke",
        "timestamp": 1593629310
    },
    {
        "content": "<p>when one is knowing that this is creating a first DocumentReference, then yes that is the instant of creation... but I wonder about where the client knows that this DocumentReference was created elsewhere and it is just now being imported into the new system. Thus it is not really being just now first created.</p>",
        "id": 202608507,
        "sender_full_name": "John Moehrke",
        "timestamp": 1593629377
    },
    {
        "content": "<p>in XDS the distinction is clear... there is different client compliance requirements for a new entry vs an import request</p>",
        "id": 202609504,
        "sender_full_name": "John Moehrke",
        "timestamp": 1593629938
    }
]