[
    {
        "content": "<p><a href=\"http://jira.hl7.org/browse/FHIR-28392\">J#28392</a> Commenter proposed that Encoutner.serviceProvider is of more value instead of location?  Seeking feedback here</p>",
        "id": 214906942,
        "sender_full_name": "Eric Haas",
        "timestamp": 1603925205
    },
    {
        "content": "<p><span aria-label=\"-1\" class=\"emoji emoji-1f44e\" role=\"img\" title=\"-1\">:-1:</span>  we do not have that data - we have locations and participants</p>",
        "id": 214907681,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1603925784
    },
    {
        "content": "<p>I know its a little late to provide comments on this issue after its resolution (sorry!), but I'm interested in how the proposed solution voted on yesterday relates to the base FHIR definition of <code>MustSupport</code>.</p>\n<p><a href=\"https://jira.hl7.org/browse/FHIR-28392\">Proposed Solution</a>:</p>\n<blockquote>\n<p>Make both serviceProvider (US Core Organization) and Location Must Support and include text that you may have both but Must Support one or the other. Add clarifying sentence about location address.</p>\n</blockquote>\n<p><a href=\"https://www.hl7.org/fhir/conformance-rules.html#mustSupport\">FHIR R4 Must Support Definition</a> (emphasis mine):</p>\n<blockquote>\n<p>Labeling an element MustSupport means that implementations that produce or consume resources <strong>SHALL provide \"support\" for the element</strong> in some meaningful way.</p>\n</blockquote>\n<p>Marking an element as <code>MustSupport</code> and then providing language that effectively allows an implementation to provide no support for an element seems like an incorrect usage of <code>MustSupport</code>, despite how loose the base FHIR definition is.   I don't have a problem with the business rule itself, but I think enforcing it with the clarifying sentences or an updated element description would be better than applying must-support in a way that seems counter to its definition. Thoughts on this?</p>",
        "id": 217420964,
        "sender_full_name": "Reece Adamson",
        "timestamp": 1605888490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> <span class=\"user-mention\" data-user-id=\"191410\">@Brett Marquard</span></p>",
        "id": 217433853,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1605893736
    },
    {
        "content": "<p>currently there is no other way to express choice of mustsupport elements</p>\n<p>We will document this fully on our conformance page  - this is still pending further editing</p>\n<p>see how implemented here so far:</p>\n<p><a href=\"http://build.fhir.org/ig/HL7/US-Core/branches/master/CapabilityStatement-us-core-server.html#medicationrequest\">http://build.fhir.org/ig/HL7/US-Core/branches/master/CapabilityStatement-us-core-server.html#medicationrequest</a></p>",
        "id": 217439252,
        "sender_full_name": "Eric Haas",
        "timestamp": 1605896298
    },
    {
        "content": "<p>Is an invariant not possible?</p>",
        "id": 217439352,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1605896350
    },
    {
        "content": "<p>invariant to say must support A or B ?</p>",
        "id": 217439406,
        "sender_full_name": "Eric Haas",
        "timestamp": 1605896385
    },
    {
        "content": "<p>Maybe need an extension to support say that must support element A or element B</p>",
        "id": 217440364,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1605896854
    },
    {
        "content": "<p>A combination:<br>\nMust support for A and must support for B are defined as must support when present (this is possible, correct?)<br>\nInvariant states that if A is not present, B must be present, and vice versa.</p>",
        "id": 217440387,
        "sender_full_name": "Vassil Peytchev",
        "timestamp": 1605896868
    },
    {
        "content": "<p>That is different. Invariant is on resource instance level so that any resource instance must be either A or B. Must support is on the server capability level. A single resource does not have either A or B. But all resources (of the same type) on the server as whole need to support either A or B.</p>",
        "id": 217440639,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1605896997
    },
    {
        "content": "<p>Just write it in English, that's enough</p>",
        "id": 217441494,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1605897441
    },
    {
        "content": "<p>Plain English is not computable. Our concern is that we can no longer looking at the StuctureDefinition to know if an element is must support or not. Also this violates the \"must support\" defined in the FHIR spec unless we say that \"not support\" is a kind of \"support\"</p>",
        "id": 217442418,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1605897941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191506\">@Yunwei Wang</span> , I feel your pain but currently not a way to do this using SD.   in future the datatype codeableReference and changes to resources may help</p>",
        "id": 217447323,
        "sender_full_name": "Eric Haas",
        "timestamp": 1605900220
    },
    {
        "content": "<p>Computability is not very important - especially for something like must support that cannot really be checked automatically. What is important is the English description: it is an implementation guide - it guides implementers - that are humans</p>",
        "id": 217448026,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1605900577
    },
    {
        "content": "<p>For the <a href=\"http://build.fhir.org/ig/HL7/US-Core/branches/master/CapabilityStatement-us-core-server.html#medicationrequest\">MedicationRequest.reported[x]</a> example, why not just put the 'must-support' flag on MedicationRequest.reported[x], and leave it off MedicationRequest.reportedBoolean/MedicationRequest.reportedReference?  Doesn't that computably mean the same thing as what is written out in guidance?</p>",
        "id": 217456597,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1605905138
    },
    {
        "content": "<p>There is a tiny difference. reportedReference itself is a reference type. Just marking reported[x] as must support means that at least one of reportBoolean, reportedReference is must supported but it does not indicate which reference in reportedReference is a must support.</p>",
        "id": 217457649,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1605905809
    },
    {
        "content": "<p>But the language says \"or a reference using MedicationRequest.reportedReference to Practitioner or other resource.\"</p>",
        "id": 217459937,
        "sender_full_name": "Robert Scanlon",
        "timestamp": 1605907050
    },
    {
        "content": "<p>That language is not accurate. From the SD, the reportedReference to US Core Practitioner is must supported.</p>",
        "id": 217460277,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1605907221
    },
    {
        "content": "<p>An invariant is not possible.  Invariants reflect what must appear in instances.  mustSupport reflects what systems must be capable of in their design - in user interfaces, in their database, in their decision logic, etc.  Invariants don't apply there.</p>\n<p>I think US Core's approach is the best we can handle right now.  mustSupport says that the rules around its meaning must be defined in the IG or the profile.  I think it's reasonable for the rules to <em>also</em> be defined in the usage notes for individual elements.  Essentially seeing the mustSupport flag on a particular element says to the implementer \"There are obligations around the implementation of this element - go look at the documentation to understand what they are\".  The absence of mustSupport on the other hand says \"so long as you meet the technical cardinalities and invariants of the instance, there are no rules at all around whether you need to store, display or otherwise take into account the value of this element.</p>",
        "id": 217462657,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1605908607
    }
]