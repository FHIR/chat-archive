[
    {
        "content": "<p>Question about the Patient Race/ethnicity extensions:  Why do these use repeated Codings with bound systems, as opposed to repeated Codes with bound systems (as seems to be more common in the main spec).  <a href=\"http://hl7.org/fhir/us/core/StructureDefinition-us-core-race.html\" target=\"_blank\" title=\"http://hl7.org/fhir/us/core/StructureDefinition-us-core-race.html\">http://hl7.org/fhir/us/core/StructureDefinition-us-core-race.html</a> </p>\n<p>Is there a meaningful difference between a coding with a bound system and a code with a bound system?</p>",
        "id": 165552393,
        "sender_full_name": "Nick George",
        "timestamp": 1557770476
    },
    {
        "content": "<p>I guess coding can have other metadata like veresion.  is that the main reason?</p>",
        "id": 165554553,
        "sender_full_name": "Nick George",
        "timestamp": 1557771752
    },
    {
        "content": "<p>I'm not aware of any place we have repeated 'code' elements, but if that were to exist, all repetitions would have to be tied to the same value set.  With repeated codings, the sender can identify the code and the system - and thus can extract codes from the desired code system from among repetitions pointing to other code systems.  Coding is the data type that allows identification of the system and thus is what typically gets used.</p>",
        "id": 165554999,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557772018
    },
    {
        "content": "<p>yeah but it has a required binding on the coding, so all of the codes would have to have the same code system anyway</p>",
        "id": 165555751,
        "sender_full_name": "Nick George",
        "timestamp": 1557772507
    },
    {
        "content": "<p>(that's sort of my point - if the system is bound to the same system for all the codings, why not have codes instead of codings)</p>",
        "id": 165555908,
        "sender_full_name": "Nick George",
        "timestamp": 1557772579
    },
    {
        "content": "<p>Ah, I see.  Yeah, that's rather weird.  The only way that would make sense is if they were drawing from multiple code systems and there were overlaps in the codes between the code system in the value set they wanted to draw from.  <span class=\"user-mention\" data-user-id=\"191410\">@Brett Marquard</span> <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> Thoughts on why Coding was chosen instead of code or CodeableConcept?</p>",
        "id": 165556033,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557772670
    },
    {
        "content": "<p>pretty sure the inclusion of nullFlavor pushed us to coding. The repeat of the 'categories' in both is because folks can be in multiple categories</p>",
        "id": 165559898,
        "sender_full_name": "Brett Marquard",
        "timestamp": 1557774891
    },
    {
        "content": "<p>I think it is also to align with CCDA</p>",
        "id": 165559963,
        "sender_full_name": "Eric Haas",
        "timestamp": 1557774950
    },
    {
        "content": "<p>You don't need to go to coding just because you draw from multiple code systems.  What matters is that you can infer the system from the code within the value set.</p>",
        "id": 165562400,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557776773
    },
    {
        "content": "<p>Aligning with CCDA shouldn't be a driver in the choice of data type...</p>",
        "id": 165562415,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557776792
    },
    {
        "content": "<p>I'd have a similar question if it were a CodeableConcept...  My understanding is that the point there is to allow for multiple codings from multiple different systems.  So if there's a required binding to a single valueset, why not have repeated coding?</p>",
        "id": 165573522,
        "sender_full_name": "Nick George",
        "timestamp": 1557785177
    },
    {
        "content": "<p>If there's a required binding on a CodeableConcept, that says that <em>one</em> of the codings needs to match the binding - but the others are free to point to any other codes.</p>",
        "id": 165573657,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557785284
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 165573720,
        "sender_full_name": "Nick George",
        "timestamp": 1557785372
    },
    {
        "content": "<p>that almost seems more like a slicing on the codeableconcept</p>",
        "id": 165573825,
        "sender_full_name": "Nick George",
        "timestamp": 1557785471
    },
    {
        "content": "<p>It's a shortcut to slicing the CodeableConcept and declaring a 1..1 slice with a required binding</p>",
        "id": 165574069,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1557785686
    },
    {
        "content": "<p>yeah except with no slicename, which makes it a little tougher to refer to</p>",
        "id": 165576361,
        "sender_full_name": "Nick George",
        "timestamp": 1557787827
    },
    {
        "content": "<p>reviving this thread - does a repeated Coding with a required binding mean ALL codes in that fields are from that binding, or AT LEAST ONE?</p>",
        "id": 167034672,
        "sender_full_name": "Nick George",
        "timestamp": 1559336979
    },
    {
        "content": "<p>for context, looking at <a href=\"http://hl7.org/fhir/us/core/STU2/StructureDefinition-us-core-race.html\" target=\"_blank\" title=\"http://hl7.org/fhir/us/core/STU2/StructureDefinition-us-core-race.html\">http://hl7.org/fhir/us/core/STU2/StructureDefinition-us-core-race.html</a> here</p>",
        "id": 167034765,
        "sender_full_name": "Nick George",
        "timestamp": 1559337056
    },
    {
        "content": "<p>It's as Lloyd said - <strong>at least one</strong> of the Codings in the CodeableConcept must be from the value set that is bound to the element (with the required binding), as documented <a href=\"http://build.fhir.org/terminologies.html#required\" target=\"_blank\" title=\"http://build.fhir.org/terminologies.html#required\">here</a>.</p>",
        "id": 167035542,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1559337746
    },
    {
        "content": "<p>that's for CodeableConcepts, no?</p>",
        "id": 167035556,
        "sender_full_name": "Nick George",
        "timestamp": 1559337771
    },
    {
        "content": "<p>here we're talking about 0..* Coding</p>",
        "id": 167035573,
        "sender_full_name": "Nick George",
        "timestamp": 1559337786
    },
    {
        "content": "<p>yes</p>",
        "id": 167035578,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1559337788
    },
    {
        "content": "<p>which is a lot like a codeable concept, but not one</p>",
        "id": 167035582,
        "sender_full_name": "Nick George",
        "timestamp": 1559337794
    },
    {
        "content": "<p>oh, sorry - I didn't look at the reference directly</p>",
        "id": 167035592,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1559337816
    },
    {
        "content": "<p>having repeated Coding with a bound system feels weird to me, like it should be either  0..* Code, or 0..1 CodeableConcept</p>",
        "id": 167035657,
        "sender_full_name": "Nick George",
        "timestamp": 1559337860
    },
    {
        "content": "<p>because if it were 0..* Code with a required binding, it would mean \"All codes should be from this valueset\", and if  it were 0..1 CodeableConcept with a required binding, it would say, \"At least one should be from this valueset\".  I don't know how to interepret a repeated Coding with a required binding</p>",
        "id": 167035786,
        "sender_full_name": "Nick George",
        "timestamp": 1559337970
    },
    {
        "content": "<p>What I see is that valueCoding in both cases is 1..1, but the encompassing 'extension' cardinalities are either 0..5 or 0..* - in both of those cases each instance of valueCoding <strong>must</strong> have a code from the bound value set (no exceptions).</p>",
        "id": 167035966,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1559338126
    },
    {
        "content": "<p>ah good point.  In that case, why not use Code?</p>",
        "id": 167036008,
        "sender_full_name": "Nick George",
        "timestamp": 1559338189
    },
    {
        "content": "<p>(with a required binding)</p>",
        "id": 167036053,
        "sender_full_name": "Nick George",
        "timestamp": 1559338204
    },
    {
        "content": "<p>Yeah, that's a good question for the extension author(s).  The data type would be 'code' - I'm not seeing any reason to use 'Coding' here - 'code' would be simpler and likely clearer.</p>",
        "id": 167036255,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1559338419
    },
    {
        "content": "<p>do you know who/where would be an appropriate place to raise that?</p>",
        "id": 167036274,
        "sender_full_name": "Nick George",
        "timestamp": 1559338442
    },
    {
        "content": "<p>Well, I assume probably it would be on this stream.  <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> <span class=\"user-mention\" data-user-id=\"191410\">@Brett Marquard</span>?</p>",
        "id": 167036356,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1559338498
    },
    {
        "content": "<p>Actually, now that I think about it a bit more, since these are external (not FHIR defined) code systems with non human readable codes there could be value in using Coding since you can also include the display string.  That may be the reason, and probably is a legitimate consideration.</p>",
        "id": 167036745,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1559338875
    },
    {
        "content": "<p>wouldn't you define the display string on the valueset-level?  in other words once per code instead of once per code-use</p>",
        "id": 167036972,
        "sender_full_name": "Nick George",
        "timestamp": 1559339072
    },
    {
        "content": "<p>the race valueset already defines some display info <a href=\"https://build.fhir.org/ig/HL7/US-Core-R4/ValueSet-omb-race-category.html\" target=\"_blank\" title=\"https://build.fhir.org/ig/HL7/US-Core-R4/ValueSet-omb-race-category.html\">https://build.fhir.org/ig/HL7/US-Core-R4/ValueSet-omb-race-category.html</a></p>",
        "id": 167037012,
        "sender_full_name": "Nick George",
        "timestamp": 1559339117
    },
    {
        "content": "<p>(that's the R4 version but it's the same in the published STU3)</p>",
        "id": 167037065,
        "sender_full_name": "Nick George",
        "timestamp": 1559339162
    },
    {
        "content": "<p>The display string is typically defined by the code system.  It is defined once per code, but it can be carried in each Coding instance.  It can also be specified in the value set (for enumerated, i.e. extensional, value set definitions), but if it's already defined in the code system you wouldn't normally do that and would just use the display string that the code system provides.</p>",
        "id": 167037533,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1559339532
    },
    {
        "content": "<p>yeah, so I'm not sure why we'd need Coding here to carry an extra display string since we have it on the race valueset itself</p>",
        "id": 167037972,
        "sender_full_name": "Nick George",
        "timestamp": 1559339933
    },
    {
        "content": "<p>Right.  You don't <strong>need</strong> it.  The question is do you (or does somebody) <strong>want</strong> it (in the instances)?</p>",
        "id": 167038086,
        "sender_full_name": "Rob Hausam",
        "timestamp": 1559340006
    },
    {
        "content": "<p>I think the usecase is that some implementations may need to send additional codes conveying more detail - from varying code systems.  However, apparently there's zero use for original text (which I personally find surprising).</p>",
        "id": 167043220,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1559345370
    },
    {
        "content": "<p>you should be a smell a regulatory agenda at play here</p>",
        "id": 167043321,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1559345522
    },
    {
        "content": "<p>Not sure I follow Lloyd, how does that work if the binding is required?</p>",
        "id": 167043472,
        "sender_full_name": "Nick George",
        "timestamp": 1559345703
    },
    {
        "content": "<p>One of the Codings must meet the binding.  The others don't have to.  Though I suspect we don't explicitly address this case in the spec.  Feel free to submit a change request</p>",
        "id": 167043716,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1559346019
    },
    {
        "content": "<p>hmm, that doesn't quite make sense to me - because then the validation would have to \"cross\" extension lines - within a single extension with uri \"ombCategory\", there is only a single Coding, and that Single coding has a required binding</p>",
        "id": 167043803,
        "sender_full_name": "Nick George",
        "timestamp": 1559346135
    },
    {
        "content": "<p>for what you're describing, shouldn't it be a single CodeableConcept?</p>",
        "id": 167043810,
        "sender_full_name": "Nick George",
        "timestamp": 1559346146
    },
    {
        "content": "<p>that way the \"at least one coding with this binding\" applies to a single extension, as opposed to applying across many extensions</p>",
        "id": 167043818,
        "sender_full_name": "Nick George",
        "timestamp": 1559346175
    },
    {
        "content": "<p>it would sort of make sense if the required binding were on a 0..* Coding, although I'd still argue that a codeableconcept might be clearer.  But I feel like having a required binding on a 1..1 Coding pretty strongly implies that that Coding <em>has</em> to have that binding</p>",
        "id": 167044102,
        "sender_full_name": "Nick George",
        "timestamp": 1559346567
    },
    {
        "content": "<p>The binding isn't on the Coding.  It's on the <em>element</em> - which has a type of 0..* Coding.  The binding is satisfied for the <em>element</em> so long as one of the Codings match.</p>",
        "id": 167044437,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1559347041
    },
    {
        "content": "<p>hmm, not sure we're looking at the same thing.  I'm talking about Extension.extension:ombcategory.valueCoding</p>",
        "id": 167044497,
        "sender_full_name": "Nick George",
        "timestamp": 1559347120
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhir/us/core/STU2/StructureDefinition-us-core-race.json.html\" target=\"_blank\" title=\"http://hl7.org/fhir/us/core/STU2/StructureDefinition-us-core-race.json.html\">http://hl7.org/fhir/us/core/STU2/StructureDefinition-us-core-race.json.html</a></p>",
        "id": 167044498,
        "sender_full_name": "Nick George",
        "timestamp": 1559347128
    },
    {
        "content": "<p>which has 1..1 Coding, and a required binding</p>",
        "id": 167044502,
        "sender_full_name": "Nick George",
        "timestamp": 1559347142
    },
    {
        "content": "<p>it's the <em>extension</em> that has 0..* cardinality, so you'd have to apply the binding to the extension element, which would also be pretty odd.</p>",
        "id": 167044615,
        "sender_full_name": "Nick George",
        "timestamp": 1559347298
    },
    {
        "content": "<p>Codeable Concept does not work here. <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19925&amp;start=0\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19925&amp;start=0\">Here</a> is a tracker were I explain it ( once a agiain )   It is heavily tied to US Regs and alignment with CCDA and this extension has been carefully crafted to meet that. </p>\n<p>I am concerned with what Lloyd is suggesting  since there is no wiggle room on the bindings  -  <em>every</em> coding repeat needs to be from the valueset.</p>",
        "id": 167044837,
        "sender_full_name": "Eric Haas",
        "timestamp": 1559347660
    },
    {
        "content": "<p>That would make much more sense to me in terms of what the current Structure Definition says, since it's 1..1 with a required binding, that seems to me to imply that every coding would be from the valueset.  But in that case, why not use Code?</p>",
        "id": 167044898,
        "sender_full_name": "Nick George",
        "timestamp": 1559347742
    },
    {
        "content": "<p>I forget but I think either regulatory requirement or ccda alignment</p>",
        "id": 167044971,
        "sender_full_name": "Eric Haas",
        "timestamp": 1559347819
    },
    {
        "content": "<p>fair enough, thanks.  I'd be curious to know why Coding was chosen over Code, if there's any documentation/tracker items I could read</p>",
        "id": 167045246,
        "sender_full_name": "Nick George",
        "timestamp": 1559348183
    },
    {
        "content": "<blockquote>\n<p>t's on the element - which has a type of 0..* Coding. The binding is satisfied for the element so long as one of the Codings match</p>\n</blockquote>\n<p>I disagree with this. We make that statement about CodeableConcept - where the binding is on the CodeableConcept, not the Coding. We do not make any other similar statement, where constraints on a 0..* element need only be met by one of the elements</p>",
        "id": 167047424,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1559351529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I agree we don't make that statement.  However, if you have a 0..* Coding element that has a binding, it'd be super-foolish to say that the binding has to apply to all of the repetitions.</p>",
        "id": 167054982,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1559364543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"196561\">@Nick George</span> I misunderstood the situation.  Obviously you're right - the cardinality on valueCoding would have to be 1..1, and thus the binding would inevitably apply to all of them.  I'm not really sure what the point is of the multiple occurrences on the extension.  Perhaps so you can declare more than one?</p>",
        "id": 167055039,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1559364613
    },
    {
        "content": "<blockquote>\n<p>if you have a 0..* Coding element that has a binding, it'd be super-foolish to say that the binding has to apply to all of the repetitions.</p>\n</blockquote>\n<p>unless that was exactly what you wanted, as in this case. I think you should just restrict yourself to saying 'this is an idea with very limited utility' and perhaps 'I don't like the regulatory analysis that lead to this requirement' though of course you and I have no grounds for an opinion on this one. (but if you really want, you should read Eric's analysis first)</p>",
        "id": 167055251,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1559365025
    },
    {
        "content": "<p>Criticism accepted.  In this case, the cardinality is actually 1..1 rather than 0..<em>.  However, it's probably worth evaluating the intention of other places in the resoruces where we have 0..</em> Coding with a required or extensible binding.  The places where this occurs are as follows:<br>\nAuditEvent.subtype<br>\nAuditEvent.source.type<br>\nAuditEvent.entity.securityLabel<br>\nConsent.provision.securityLabel<br>\nConsent.provision.purpose<br>\nConsent.provision.class<br>\nImagingStudy.modality<br>\nStructureDefinition.keyword</p>\n<p>We also have the following locations which don't have a fixed or extensible binding in the core spec, but where such a binding could be asserted in a profile:<br>\nContract.term.securityLabel.category<br>\nContract.term.securityLabel.control<br>\nQuestionnaire.code<br>\nQuestionnaire.item.code</p>\n<p>So, the question is: What behavior should apply for these elements?  All codings must come from the bound value set, or \"at least one\" must come from the bound value set?</p>",
        "id": 167085507,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1559416084
    },
    {
        "content": "<p>Hmm, I feel I am being picked on given that the majority of these are mine. Did something change that I didn't know about and adjust the model?<br>\nMostly mine are Extensible bindings, meaning nothing more than we want the values in the valueset to be used if they apply. I don't see why that is not clear. If the vocabulary value applies, it should be used... if it does not then use other codes as you want to. How is this a problem?<br>\nFor Required binding, I see this slightly more problematic.</p>",
        "id": 167088053,
        "sender_full_name": "John Moehrke",
        "timestamp": 1559420498
    },
    {
        "content": "<p>I have always read the Extensible as something NOT testable at the recipient side. How can a recipient know that the meaning the sender intended did NOT fall into one of the Extensible vocabulary values. SO I have always seen Extensible as a recommendation on the sender. <br>\nRequired could be seen more strictly at the recipient.</p>",
        "id": 167088198,
        "sender_full_name": "John Moehrke",
        "timestamp": 1559420714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> Not picking on or criticizing - but certainly wanting to understand intent.  Specifically, is the desire that repetitions represent multiple items all of which must share the binding, or is the intention that repetitions represent different encodings of the same item and only one needs to satisfy the binding?</p>",
        "id": 167088937,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1559422022
    },
    {
        "content": "<p>I was not seriously worried about being picked on....    Can't say that we thought about repetition at all. As I indicated before, the binding is just a desire for use of the vocabulary in the valueset, specifically to avoid creativity at defining a new vocabulary value that has the meaning already given to a vocabulary value.</p>",
        "id": 167092697,
        "sender_full_name": "John Moehrke",
        "timestamp": 1559428346
    },
    {
        "content": "<p>Extensible is more than just \"a desire\".  It's mandating.  If someone is communicating a concept that your code covers, there's no choice but to use the code you've chosen.  Can you go through your elements and think about whether translations are appropriate and/or whether multiple non-translation codes are appropriate.</p>",
        "id": 167093102,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1559429080
    },
    {
        "content": "<p>I filed <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=22781\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=22781\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=22781</a> about this, specifically back to the Argonaut extension <a href=\"http://hl7.org/fhir/us/core/STU3/StructureDefinition-us-core-race.html\" target=\"_blank\" title=\"http://hl7.org/fhir/us/core/STU3/StructureDefinition-us-core-race.html\">http://hl7.org/fhir/us/core/STU3/StructureDefinition-us-core-race.html</a></p>",
        "id": 169267031,
        "sender_full_name": "Nick George",
        "timestamp": 1561760335
    },
    {
        "content": "<p>It's certainly possible and in fact probable I'm missing some subtlety, but my understanding would be to say Codings should only have bindings within codeableconcepts, and for \"free radical\" fields with bound system it should be Code not Coding</p>",
        "id": 169267176,
        "sender_full_name": "Nick George",
        "timestamp": 1561760492
    },
    {
        "content": "<p>am I missing something with that?</p>",
        "id": 169267180,
        "sender_full_name": "Nick George",
        "timestamp": 1561760498
    },
    {
        "content": "<p>framed like that, I'm not sure if it matters if it's 0..1 or 1..1 or 0..*, either way, if it's a known and _required_ binding, why not use Code?</p>",
        "id": 169267250,
        "sender_full_name": "Nick George",
        "timestamp": 1561760558
    },
    {
        "content": "<p>I’ll discuss on the Argo R4 call.  There is a lot going on with these extensions and I’ll try dig up the history.  This is not an error it was done with intent and I really think it is tied into CCDA US realm header.</p>",
        "id": 169271376,
        "sender_full_name": "Eric Haas",
        "timestamp": 1561764680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"196561\">@Nick George</span> I generally agree with what you say but the race extension appears to live in one of the corners where a free Coding is appropriate</p>",
        "id": 169739244,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1562366032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>  any insight into why?</p>",
        "id": 171023432,
        "sender_full_name": "Nick George",
        "timestamp": 1563308303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191410\">@Brett Marquard</span>  and I were the primary ones who created these extensions.  And looking back it was to align with CCDA's US Realm Header.<br>\ne.g. </p>\n<div class=\"codehilite\"><pre><span></span>            &lt;!-- CDC Race and Ethnicity code set contains the five minimum\n                 race and ethnicity categories defined by OMB Standards --&gt;\n            &lt;raceCode code=&quot;2106-3&quot; displayName=&quot;White&quot; codeSystem=&quot;2.16.840.1.113883.6.238&quot; codeSystemName=&quot;Race &amp; Ethnicity - CDC&quot; /&gt;\n</pre></div>\n\n\n<p>It seemed to make sense at the time, even though in hindsight it may have been overkill and I  frankly don't think changing it now is worth the implementer headaches of  having  to map between versions.</p>",
        "id": 171025435,
        "sender_full_name": "Eric Haas",
        "timestamp": 1563309781
    },
    {
        "content": "<p>IMO, using coding increase the human readability. Comparing these two extensions, </p>\n<div class=\"codehilite\"><pre><span></span>            {\n               &quot;url&quot;: &quot;ombCategory&quot;,\n               &quot;valueCode&quot;: &quot;2106-3&quot;\n            },\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span>            {\n               &quot;url&quot;: &quot;ombCategory&quot;,\n               &quot;valueCoding&quot;: {\n                  &quot;system&quot;: &quot;urn:oid:2.16.840.1.113883.6.238&quot;,\n                  &quot;code&quot;: &quot;2106-3&quot;,\n                  &quot;display&quot;: &quot;White&quot;\n               }\n            },\n</pre></div>\n\n\n<p>Apparently, the 2nd one is more human readable.</p>",
        "id": 171183876,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1563465319
    },
    {
        "content": "<p>well, codes with bound valuesets are very common throughout the spec, so it wouldn't be a strange thing to have here, readability-wise</p>",
        "id": 171188027,
        "sender_full_name": "Nick George",
        "timestamp": 1563468424
    },
    {
        "content": "<p>In general, if you're going to use code, the code itself should be readable and understandable by a developer.  (That's why the gender codes are \"male\", \"female\" rather than \"01\", \"02\" or something like that.)  It's not a hard and fast rule, but it's certainly a good practice.</p>",
        "id": 171190811,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1563470463
    },
    {
        "content": "<p>another reason for using Coding vs Code, I assume everyone knows, is that to avoid code collision/conflict.</p>",
        "id": 171197753,
        "sender_full_name": "Yunwei Wang",
        "timestamp": 1563475369
    },
    {
        "content": "<p>If you're using 'code', then the binding must be fixed and the value set must be one where there are no code collisions.</p>",
        "id": 171201681,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1563478187
    }
]