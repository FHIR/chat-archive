[
    {
        "content": "<p>I am curious about a server's conformance to the Patient Access API and/or the C4BB IG, if the server supports count, but not paging.</p>\n<p>FHIR says that if a server does not support paging, the value indicated by \"_count=[value]\" is the maximum number of results the server SHALL return.  </p>\n<p>Let's say I want to see all of my EOBs  and since I know there are a lot, I want to see these 10 at a time. The request t this server:<br>\n GET [base]ExplanationOfBenefit?patient=3545&amp;_count=10 <br>\nwould return a TOTAL of 10 EOBs. Is this compliant with the CMS Mandate? Shouldn't we provide the member/patient with all the EOBs they are requesting?</p>\n<p><span class=\"user-mention\" data-user-id=\"191529\">@Corey Spears</span> <span class=\"user-mention\" data-user-id=\"243554\">@Pat Taylor</span></p>",
        "id": 252837368,
        "sender_full_name": "Caitlin Ryan",
        "timestamp": 1631301963
    },
    {
        "content": "<blockquote>\n<p>if the server supports count, but not paging.</p>\n</blockquote>\n<p>That will be bad. Either support neither - and so return always the complete result set, or do support both.</p>",
        "id": 252839024,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1631302721
    },
    {
        "content": "<p>Or perhaps the consumer could then narrow the scope of their query until the matching rows is &lt; 10.</p>",
        "id": 252843126,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1631304501
    },
    {
        "content": "<p>The regulation does not get into that kind of detail and the CARIN IG is silent about paging and count. I would think that the minimum requirement would be for the server to be able to return all of the resources (be that through the server support for paging or the clients ability to narrow the search parameter enough to get results that fit within the server defined limit).</p>",
        "id": 253252145,
        "sender_full_name": "Corey Spears",
        "timestamp": 1631626860
    },
    {
        "content": "<blockquote>\n<p>or the clients ability to narrow the search parameter enough to get results that fit within the server defined limit</p>\n</blockquote>\n<p>That's the part that won't really work: client do a search, there is no paging - <br>\n1) how does it know that those are not all the values?<br>\n2) how does it know how to restrict the search criteria?<br>\nFor (1) it can use <code>total</code>,  but that is not a required element and it can even be incorrect, and for (2) there is really no solution</p>",
        "id": 254409104,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1632332999
    },
    {
        "content": "<p>So either the server implements paging or it ignores <code>_count </code> and always return everything (that is OK spec-wise)</p>",
        "id": 254409221,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1632333037
    },
    {
        "content": "<p>Per <a href=\"https://www.hl7.org/fhir/search.html#count\">https://www.hl7.org/fhir/search.html#count</a><br>\n\"Servers SHALL NOT return more resources than requested, even if they don't support paging, but may return less than the client requested. \"</p>",
        "id": 254413194,
        "sender_full_name": "Daniel Venton",
        "timestamp": 1632334626
    },
    {
        "content": "<p>So that's out as well then, I misremembered</p>",
        "id": 254440497,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1632345212
    },
    {
        "content": "<p>What problem are we trying to solve here? FHIR defines a pretty clear search API that handles large (and small) result sets by 1) letting the server paginate, and 2) letting the client cap the maximum number of \"match\" resources returned per page. Why would we not just use this?</p>",
        "id": 254443420,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1632346694
    },
    {
        "content": "<p>Avoid writing code to support pagination I guess</p>",
        "id": 254447771,
        "sender_full_name": "Michele Mottini",
        "timestamp": 1632348877
    }
]