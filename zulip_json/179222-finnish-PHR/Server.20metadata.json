[
    {
        "content": "<p>Hi! It seems <code>https://fhirsandbox2.kanta.fi/phr-resourceserver/baseStu3/metadata</code> is not accessible without a valid access token. That's unfortunate for FHIR apps that would handle the authentication automatically, based on the metadata provided by the server. Another way to get the <em>auth</em> and <em>token</em> locations would be from the \"well known\" location at <a href=\"https://fhirsandbox2-auth.kanta.fi/.well-known/openid-configuration\" target=\"_blank\" title=\"https://fhirsandbox2-auth.kanta.fi/.well-known/openid-configuration\">https://fhirsandbox2-auth.kanta.fi/.well-known/openid-configuration</a> (based on OpenID specs), but that does not seem to be available either.<br>\nHow should a FHIR app query for the auth and token locations of the server?</p>",
        "id": 153970599,
        "sender_full_name": "Mikael Rinnetmäki",
        "timestamp": 1529434947
    },
    {
        "content": "<p>Hi, thanks for question. We have to think about this from a whole Kanta PHR service architecture view, so we’ll get back to you later.</p>",
        "id": 153972038,
        "sender_full_name": "Pirjo Vuorikallas",
        "timestamp": 1530085914
    },
    {
        "content": "<p>Hi,<br>\nnot any client can use the PHR production environment. You have to go through the connection process to connect a client. Therefore the authorization can not be done automatically, even though the endpoint information were available.</p>",
        "id": 153973100,
        "sender_full_name": "Juha Paasolainen",
        "timestamp": 1530612115
    },
    {
        "content": "<p>I understand I need to go through the client registration process to get the client ID. The requirement is not to be able to do that automagically, although that would be awesome too.</p>\n<p>The requirement is to reduce environment specific implementation in the application, both in the code and configuration. And to reduce the need for  manual maintenance work.</p>\n<p>I have a FHIR application that gets its client ID and potential client secret from a configuration file. However, in an attempt to be as dynamic as possible, it fetches and stores all other information dynamically, based on the <code>iss</code> parameter from the SMART on FHIR launch sequence. So that there is minimal need to update the configuration manually, even when the FHIR server the application uses decides to change a URL, for instance. In this case, the application notices that the previously fetched configuration is no longer valid, and fetches the new configuration (mainly auth and token urls) again, and uses those.</p>\n<p>This is very nice and works with all other FHIR servers. However, I need to change this dynamic application logic in order to support the Finnish PHR, and only for that single FHIR server rely on static configuration or hard-coded URLs. That's not nice.</p>",
        "id": 153974457,
        "sender_full_name": "Mikael Rinnetmäki",
        "timestamp": 1531229418
    },
    {
        "content": "<p>Thank you for the feedback. We will consider this when planning the Kanta PHR road map.</p>",
        "id": 153983586,
        "sender_full_name": "Juha Paasolainen",
        "timestamp": 1533722022
    }
]