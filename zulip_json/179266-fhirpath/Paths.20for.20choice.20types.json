[
    {
        "content": "<p>Given the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;resourceType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Observation&quot;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;valueQuantity&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"mi\">26</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;unit&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;breaths/minute&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;system&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://unitsofmeasure.org&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;code&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;/min&quot;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>The FHIR spec says I can use <code>Observation.value</code> or <code>(Observation.value as Quantity)</code> to refer to the value.</p>\n<p>Question: Can we use <code>Observation.valueQuantity</code> as well?</p>",
        "id": 164971778,
        "sender_full_name": "Michael Calderero",
        "timestamp": 1557139737
    },
    {
        "content": "<p>not in FHIRPath, no</p>",
        "id": 164972127,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557140040
    },
    {
        "content": "<p>fhirpath.js does not handle that yet, and still would use valueQuantity. The difficult part about \".value\" is that fhirpath.js has no knowledge of FHIR types, so when it loads a JSON resource and sees the key \"valueQuantity\", it does not have a way to know that that should be changed to \"value\".  In order to make that work, I think we will need to add some limited knowledge of the common polymorphic keys in FHIR.</p>",
        "id": 164982826,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1557150570
    },
    {
        "content": "<p>you are guaranteed that .value[x] will never have a sibling .valueXX so that there is any ambiguity</p>",
        "id": 164983025,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557150691
    },
    {
        "content": "<p>so you shouldn't need any metadata insight to make that work</p>",
        "id": 164983111,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557150747
    },
    {
        "content": "<p>From fhirpath.js' perspective, \"valueQuantity\" has no more meaning than a key like \"abc\".  I suppose if it knew a few basic FHIR types (Quanntity, Attachment, Reference), it could detect that \"zzzQuantity\" was meant to be a polymorphic value \"zzz\".</p>",
        "id": 164983398,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1557150971
    },
    {
        "content": "<p>yes. if you have a request for [N} and you don't find [N] but you do find [N]{T} where {T} is from the list below, then it's a match</p>",
        "id": 164983596,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557151096
    },
    {
        "content": "<p>the list is:</p>",
        "id": 164983601,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557151099
    },
    {
        "content": "<p>Address<br>\nAge<br>\nAnnotation<br>\nAttachment<br>\nBase64Binary<br>\nBoolean<br>\nCanonical<br>\nCode<br>\nCodeableConcept<br>\nCoding<br>\nContactDetail<br>\nContactPoint<br>\nContributor<br>\nCount<br>\nDataRequirement<br>\nDate<br>\nDateTime<br>\nDecimal<br>\nDistance<br>\nDosage<br>\nDuration<br>\nExpression<br>\nHumanName<br>\nId<br>\nIdentifier<br>\nInstant<br>\nInteger<br>\nMarkdown<br>\nMoney<br>\nOid<br>\nParameterDefinition<br>\nPeriod<br>\nPositiveInt<br>\nQuantity<br>\nRange<br>\nRatio<br>\nReference<br>\nRelatedArtifact<br>\nSampledData<br>\nSignature<br>\nString<br>\nTime<br>\nTiming<br>\nTriggerDefinition<br>\nUnsignedInt<br>\nUri<br>\nUrl<br>\nUsageContext<br>\nUuid</p>",
        "id": 164983699,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557151196
    },
    {
        "content": "<p>that works across all versions</p>",
        "id": 164983701,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557151201
    },
    {
        "content": "<p>If FHIRPath is meant to be an language that is independent of FHIR, should it include so much knowledge of FHIR?   I guess since FHIRPath is probably only used with FHIR, it is acceptable-- maybe it could include that type list as an override-able default.</p>",
        "id": 164984191,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1557151527
    },
    {
        "content": "<p>you are here asking a question about how the language binds to FHIR, not about the language itself. And so you get a FHIR specific answer</p>",
        "id": 164984684,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1557151904
    },
    {
        "content": "<p>i still think postfix notation in fhir json is a mistake :) this is one of illustration</p>",
        "id": 165017614,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1557175697
    },
    {
        "content": "<p>but yeah  we can put some fhir-hacks  to make it work</p>",
        "id": 165017678,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1557175765
    },
    {
        "content": "<p>or  can force always use <code>x as Type =&gt; xType</code></p>",
        "id": 165017838,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1557175900
    },
    {
        "content": "<p>The rule to check the trailing text won't always work. As there are a few cases where this transform doesn't happen<br>\ne.g. <a href=\"http://build.fhir.org/medicationadministration.html#MedicationAdministration\" target=\"_blank\" title=\"http://build.fhir.org/medicationadministration.html#MedicationAdministration\">http://build.fhir.org/medicationadministration.html#MedicationAdministration</a><br>\nthe pair of instantiates properties. There are others, this was the first that I found.</p>",
        "id": 165649094,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1557859061
    },
    {
        "content": "<p>is it a problem?</p>",
        "id": 165854526,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558045530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Yes, it is a problem in that it means that the light-weight solution you proposed for handling polymorphic fields would not work.  In Brian's example, you would not want to replace \"instantiatesCanonical\" with \"instantiates\".</p>",
        "id": 165905619,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1558104085
    },
    {
        "content": "<p>well, why is that a problem? I think that is the intent here. It's on my list to get agreement to recast all of those as instantiates[x] : canonical | url</p>",
        "id": 165941630,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558131867
    },
    {
        "content": "<p>Oh-- in that case maybe it isn't a problem.  <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> ?</p>",
        "id": 165941690,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1558131950
    },
    {
        "content": "<p>My point was the example I gave wasn't a choice type, so shouldn't be changing over to use just value. So the simple trailing type can't always be trimmed/assumed.<br>\nEven though in the future this specific case will be fixed to be a choice type.</p>",
        "id": 165946643,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1558137623
    },
    {
        "content": "<p>well, what's the harm in treating it as a choice type now?</p>",
        "id": 165946664,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558137658
    },
    {
        "content": "<p>There were other cases, but I'll have to go find them.</p>",
        "id": 165946680,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1558137666
    },
    {
        "content": "<p>It's about knowing when to do it.</p>",
        "id": 165946687,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1558137680
    },
    {
        "content": "<p>It was also the point that I believe you were saying that you can't include the type in the field.</p>",
        "id": 165947031,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1558138081
    },
    {
        "content": "<p>hmm yes that's problematic. Might need some special case exemptions, I'm afraid.</p>",
        "id": 165952979,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558146518
    }
]