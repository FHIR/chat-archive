[
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=17275\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=17275\">GF#17275</a> is actually a bug in my FHIRPath somewhere. Maybe in my head... </p>\n<div class=\"codehilite\"><pre><span></span>(concept.code | descendants().concept.code).isDistinct()\n</pre></div>",
        "id": 153987492,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534415340
    },
    {
        "content": "<p>because, of course (!), | is a set union, and the outcomes are guaranteed to be unique....</p>",
        "id": 153987493,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534415366
    },
    {
        "content": "<p>so it should be </p>\n<div class=\"codehilite\"><pre><span></span>concept.code.combine(descendants().concept.code).isDistinct()\n</pre></div>",
        "id": 153987494,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534415429
    },
    {
        "content": "<p>Yes, one of my favourite dislikes ;)</p>",
        "id": 153987938,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534465701
    },
    {
        "content": "<p>I still don't like the syntax on the combine operation. It just feels weird to me, the scope of the collection inside the call, isn't the thing to the left of the function, it is its parent. (descendants() isn't called on the items of code, its called on the items of concept)</p>",
        "id": 153987954,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534466576
    },
    {
        "content": "<p>It is a bit strange that it's not like other iterators in that regard (like .select() and .where()) and there's no visual cue in the syntax to say that.</p>",
        "id": 153987955,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534466744
    },
    {
        "content": "<p>Are these the same thing (ignoring the isdistinct part)?<br>\nPatient.name.select(given | family)<br>\nPatient.name.select(given.combine(family))</p>",
        "id": 153987956,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534466749
    },
    {
        "content": "<p>the . operator isn't applying to the property</p>",
        "id": 153987957,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534466780
    },
    {
        "content": "<p>I know its too late, wish I'd complained earlier, and been in the ballot pool - Thanks HL7Au</p>",
        "id": 153987959,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534466815
    },
    {
        "content": "<p>Yeah, those would be the same (minus the distinct), because the identifiers within the select will both resolve on the currently iterated name element.</p>",
        "id": 153987961,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534466850
    },
    {
        "content": "<p>Patient.name.select(given.combine($this.family))</p>",
        "id": 153987963,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534466886
    },
    {
        "content": "<p>Yeah, that at least gives a visual cue</p>",
        "id": 153987966,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534466951
    },
    {
        "content": "<p>Is it the only function where the $this isn't the thing on the left of the . ?</p>",
        "id": 153987967,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534466955
    },
    {
        "content": "<p>In this example the $this is name, and not given</p>",
        "id": 153987968,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534466977
    },
    {
        "content": "<p>No, <code>.subsetOf()</code>, <code>.supersetOf()</code>, <code>.intersect()</code>, <code>.exclude()</code>, <code>.union()</code> (synonym for <code>|</code>), and all of the singleton functions like <code>.indexOf()</code>, <code>.startsWith</code>, etc.</p>",
        "id": 153987974,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534467161
    },
    {
        "content": "<p>By number, functions that introduce an iterating context are actually the minority.</p>",
        "id": 153987976,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534467198
    },
    {
        "content": "<p>Thanks Bryn, I'm going to have to go investigate how Ewout has done this then!</p>",
        "id": 153987978,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534467373
    },
    {
        "content": "<p>Coincidentally, I am trying to implement subsetOf today.  <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>  Does \"$this\" really apply in subsetOf?  The documentation under \"5. Functions\" says, \"If the function takes an expression as a parameter.... These expressions may refer to the special $this element....\"  The function \"subsetOf\" is not one of those listed as taking an \"expression\", but rather the documentation (at <a href=\"http://hl7.org/fhirpath/#existence\" target=\"_blank\" title=\"http://hl7.org/fhirpath/#existence\">http://hl7.org/fhirpath/#existence</a>) says it takes a \"collection\".</p>",
        "id": 153990783,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1535126373
    },
    {
        "content": "<p>You're right, <code>$this</code> does not apply in a <code>.subsetOf()</code>; the list I provided above is operators where <code>$this</code> does not apply (because they're not \"iterators\").</p>",
        "id": 153990821,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1535137029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> I don't think<br>\nPatient.name.select(given.combine(family))<br>\nis correct syntax.  The \"select\" function expects \"projection: expression\" as an argument, but you are passing it the result of \"combine\", which is a collection.</p>",
        "id": 153990822,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1535137142
    },
    {
        "content": "<p>The entire argument <code>given.combine(family)</code> is the \"expression\" argument.</p>",
        "id": 153990824,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1535137325
    },
    {
        "content": "<p>So that expression is evaluated for every member of the <code>Patient.name</code> collection.</p>",
        "id": 153990825,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1535137341
    },
    {
        "content": "<p>Okay, that makes sense.  Thanks.</p>",
        "id": 153990831,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1535138924
    }
]