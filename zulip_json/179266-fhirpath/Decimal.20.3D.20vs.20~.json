[
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19356\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=19356\">GF#19356</a> points out that the test in the <code>testDivide</code> group, <code>1.2 / 1.8 = 0.67</code> is behaving with equivalent semantics, not equality semantics. We should either change the test to use equivalent or clarify that the equality semantics round to the least precise value, the same as equivalent semantics do.</p>",
        "id": 157333070,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549002103
    },
    {
        "content": "<p>The question we should ask is firstly about functional outcomes - how do we want equality to work, and how do we want equivalence to work?</p>",
        "id": 157380940,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549051087
    },
    {
        "content": "<p>under the current exact match rules, we cannot do 1.2 / 1.8 = X because there's no way to express the internal imprecision of a 32 bit floating point number in decimal</p>",
        "id": 157381019,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549051141
    },
    {
        "content": "<p>in other implementations, I've done = means to the lowest precision, and ~ means +/- 5%</p>",
        "id": 157381227,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549051292
    },
    {
        "content": "<p>When you say lowest precision, I'm confused, because the test says 1.2/1.8 = 0.67, but 1.2/1.8 = .666666..., but are we saying that we want the least precise (i.e. two digits of precision in this case)?</p>",
        "id": 157383056,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549052778
    },
    {
        "content": "<p>There is also some confusion about the meaning of precision.  My understanding was that the FHIRPath meaning of precision was the number of digits after the decimal place.  \"1.2\" has two significant digits, but one digit of precision.</p>",
        "id": 157383318,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1549053022
    },
    {
        "content": "<p>That's my understanding of precision.</p>",
        "id": 157383332,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549053053
    },
    {
        "content": "<p>But saying \"lowest precision\" to me implies 0.0000001 (assuming 8 digits of precision).</p>",
        "id": 157383376,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549053107
    },
    {
        "content": "<p>So, in that case, 1.2/1.8 ~ 0.7.<br>\nOh- - I read \"lowest precision\" meaning \"least precision\".</p>",
        "id": 157383460,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1549053147
    },
    {
        "content": "<p>I did indeed mean least precision. but yes, I should have been talking about significant digits</p>",
        "id": 157384467,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549054020
    },
    {
        "content": "<p>I don't think the concept of significant digits has any place in fhirpath.</p>",
        "id": 157384794,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1549054239
    },
    {
        "content": "<p>so you don't think we should be able to say 1.2/18 = X?</p>",
        "id": 157384959,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549054392
    },
    {
        "content": "<p>I don't know what to do about 1.2/1.8 =.  But, the FHIRPath spec deals with digits of precision, by which I understand it to mean digits after the decimal point.  Maintaining precision, 1.2/1.8 would be 0.7.  Maintaining significant digits, 1.2/1.8 would be 0.67.  [Edit:  I was avoiding using operators here.  I am not saying what FHIRPath's \"=\" should be, but just showing the distinction between the two concepts of significant digits and precision.]</p>",
        "id": 157385211,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1549054606
    },
    {
        "content": "<p>I disagree.</p>",
        "id": 157385794,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549055151
    },
    {
        "content": "<p>I think 1.2/1.8 is 0.6666667</p>",
        "id": 157385800,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549055161
    },
    {
        "content": "<p>This is just talking about whether we need to say that to get a true out of the equality comparison.</p>",
        "id": 157385866,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549055189
    },
    {
        "content": "<p>Otherwise, we'd have to carry that precision semantic through all the operators. I don't think we're suggesting that, right?</p>",
        "id": 157385999,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549055285
    },
    {
        "content": "<p>So the proposed change is for =, values must be equal, comparison is done on values rounded to the precision of the least precise operand. Trailing zeroes after the decimal are ignored in determining precision.</p>",
        "id": 157386053,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549055349
    },
    {
        "content": "<p>The same as a for ~?</p>",
        "id": 157386076,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1549055383
    },
    {
        "content": "<p>And for equivalence: values must be equal within +/-5%, with comparison done on values rounded to the precision of the least precise operand. Trailing zeroes after the decimal are ignored in determining precision.</p>",
        "id": 157386144,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549055408
    },
    {
        "content": "<p>+/- 5% of which operand?</p>",
        "id": 157386184,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1549055455
    },
    {
        "content": "<p>Good question, Grahame? My take is that the absolute value of the difference between them is less than 10 times the place value of the comparison precision.</p>",
        "id": 157386485,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549055679
    },
    {
        "content": "<p>Mulling this a bit more, if we do this, it means 0.1 = 0.15 will be true. Is that really what we want?</p>",
        "id": 157388793,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549057685
    },
    {
        "content": "<p>I think you mean  0.1 ~ 0.105.</p>",
        "id": 157388873,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1549057787
    },
    {
        "content": "<p>No, I mean 0.1 = 0.15.</p>",
        "id": 157388933,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549057814
    },
    {
        "content": "<p>If equal is defined as the values are the same to the least precise value, then the comparison would be performed at the tenths-place, and it would return true.</p>",
        "id": 157388955,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549057845
    },
    {
        "content": "<p>Oh.  But, in that case at least, 0.15, <em>rounded</em> to 1 digit of precision would give you 0.2.</p>",
        "id": 157388990,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1549057895
    },
    {
        "content": "<p>True, missed that. So 0.1 = 0.14 is true.</p>",
        "id": 157389216,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549058099
    },
    {
        "content": "<p>I think I would prefer to just say that 1.2/1.8 = 0.66666667</p>",
        "id": 157389344,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1549058197
    },
    {
        "content": "<p>Me too, 0.1 = 0.14 is a bridge too far, I think.</p>",
        "id": 157389482,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549058315
    },
    {
        "content": "<p>Doesn't that depend what you are measuring?</p>",
        "id": 157406040,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1549080146
    },
    {
        "content": "<p>A change in temp of 5% F or C are different if we're comparing freezing point temps</p>",
        "id": 157406240,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1549080539
    },
    {
        "content": "<p>I do indeed carry semantic precision through. But I don't understand 1.2/1.8 = 0.66666667 - where did the choice of precision come from? is 1.2/1.8 != 0.6666667 ?</p>",
        "id": 157438793,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549142109
    },
    {
        "content": "<p>what about 1.2/1.8 = 0.666666667 ?</p>",
        "id": 157438795,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549142118
    },
    {
        "content": "<p>Is my understanding correct that, based on significant digit rules, 5 = 4.9?  If so, does that mean that 4.9 &gt;= 5?</p>",
        "id": 157439911,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1549144025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> , the current specification just says decimal values must be \"exactly equal\". The proposal being considered here is to relax that to say that the comparison is done by rounding the operands to the precision of the least precise operand, but that has some significant effects, one of which you are pointing out (5 = 4.9 would be true).</p>",
        "id": 157485691,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549231771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , the suggestion comes from the required precision of 8 digits. Systems may support more precision, but they must support at least 8. But the test would only work for systems that supported exactly that level of precision. The simplest option is, as the comment suggests, to change the test to use equivalent rather than equal.</p>",
        "id": 157485817,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549232039
    },
    {
        "content": "<p>5 = 4.9 I could almost live with.  4.9&gt;= 5 is pretty scary...</p>",
        "id": 157485861,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1549232071
    },
    {
        "content": "<p>so<br>\n1.2 / 1.8 = 1.6666667<br>\n1.2 / 1.8 = 1.666666667<br>\n1.2 / 1.8 != 1.666667<br>\n1.2 / 1.8 != 1.67<br>\n1.2 / 1.8 ~1.67<br>\n1.2 / 1.8 !~ 1.6</p>",
        "id": 157486558,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549233361
    },
    {
        "content": "<p>1.2 / 18000000 = 0.0000001</p>",
        "id": 157486615,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549233465
    },
    {
        "content": "<p>12000000/1.8 = 6666666.6666667</p>",
        "id": 157486661,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549233495
    },
    {
        "content": "<p>1.2 / 1.8 = 1.66666666 (to whatever precision your platform specifies)</p>",
        "id": 157486662,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549233498
    },
    {
        "content": "<p>I'm just sticking with 8 digits... I have whatever precision is desired, but actually use significant figures, since the maths was developed for UCUM...</p>",
        "id": 157486675,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549233551
    },
    {
        "content": "<p>1.2 / 18000000 = 0.00000006, right? (or 7 if you're rounding it)</p>",
        "id": 157486793,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1549233726
    },
    {
        "content": "<p>ah yes, I miscounted</p>",
        "id": 157486797,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549233759
    },
    {
        "content": "<blockquote>\n<p>I'm just sticking with 8 digits... I have whatever precision is desired, but actually use significant figures, since the maths was developed for UCUM...</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Significant digits present a couple of difficulties.  1) You have to keep track of trailing zeros somehow, because 1.00 has more significant digits that 1.0, but if you store that as a number the computer won't see the difference; 2) There is ambiguity in interpreting the number of significant digits for a number like \"100\".    If one uses significant digits, ideally the numbers should be entered in scientific notation (e.g. 1.23*10^6) to make it clear how many significant digits are meant, but it seems unlikely that someone filling in a form of (for example) blood pressure readings would do that.</p>",
        "id": 157530488,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1549293941
    },
    {
        "content": "<p>I keep track of the significant figures so I can see a difference. The ambiguity is build into the human representation and nothing I can do about that</p>",
        "id": 157549890,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1549308878
    }
]