[
    {
        "content": "<p>I'm doing a pre-population fhirpath expression for converting what is a string in the source data, and need to convert it to a Coding for the QuestionnaireResponse item (as it is a choice type).<br>\nHas this been covered anywhere already?<br>\n<span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> , <span class=\"user-mention\" data-user-id=\"195344\">@Paul Lynch</span> - come across this in any forms you guys have looked at?</p>\n<p>Was considering using the <code>%terminologies</code> stuff, but that seemed odd.<br>\nwhat would feel more natural would be a shortcut like <br>\n<code>%LaunchPatient.address.first().postalCode.toCoding('http://exmaple.org/CodeSystem/codedPostcodes')</code><br>\nthe other possibility I considered was using the translate function<br>\n%terminologies.translate(conceptMap, code, params) : Parameters<br>\nEven this would have been more natural as .translate from a string/code/coding as the context<br>\ne.g. <code>%LaunchPatient.address.first().postalCode.translate('http://exmaple.org/ConceptMap/pcConverter').parameter.where(name='match').part.where(name='concept')</code></p>",
        "id": 198011925,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1589849063
    },
    {
        "content": "<p>Not something I've seen yet, no.</p>",
        "id": 198014257,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1589851624
    },
    {
        "content": "<p>Yeah, FHIRPath doesn't have syntax or operators to support this currently.</p>",
        "id": 198023149,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1589865597
    },
    {
        "content": "<p>The translate is an interesting option, but I agree, a function to construct the value would be more natural.</p>",
        "id": 198023201,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1589865646
    },
    {
        "content": "<p>What is the value you are converting?</p>",
        "id": 198023212,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1589865676
    },
    {
        "content": "<p>i.e., do you have a code, or are you trying to find a code from some display text?</p>",
        "id": 198023220,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1589865703
    },
    {
        "content": "<p>If you have a known code and system then I would have expected you could go via token syntax -- <code>http://exmaple.org/CodeSystem/postcode|1234</code></p>",
        "id": 198023277,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1589865788
    },
    {
        "content": "<p>I don't think I have had to translate a string to Coding.</p>",
        "id": 198096626,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1589907747
    },
    {
        "content": "<p>I have defined a number of factory functions for this kind of use - mainly creating complex data types</p>",
        "id": 198254346,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1590007197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191343\">@Michael Lawley</span> , its a string in the source content (e.g. Address.State) and being populated into a coded field on a questionnaire form.</p>",
        "id": 198259484,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1590010137
    },
    {
        "content": "<p>So you just looking for some kind of type cast? string -&gt; code<br>\n(I'm not a FHIRPath expert, just looking to understand the interactions with terminology.)</p>",
        "id": 198259722,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1590010315
    },
    {
        "content": "<p>string -&gt; Coding.</p>",
        "id": 198270585,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1590017780
    },
    {
        "content": "<p>Which is why I was thinking of \"token syntax\" as the literal form of a Coding, but I see now from <a href=\"http://hl7.org/fhirpath/#literals\">http://hl7.org/fhirpath/#literals</a> that it is missing.<br>\nStill, why not <code>'http://exmaple.org/CodeSystem/postcode|1234' as Coding</code> or<br>\n<code>''http://exmaple.org/CodeSystem/postcode|' + %LaunchPatient.address.first().postalCode as Coding</code>?</p>",
        "id": 198271061,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1590018243
    },
    {
        "content": "<p>That is an interesting idea.  More generally, it might be useful to have a way in FHIRPath to create a structure (Coding, or something else) from primitives.</p>",
        "id": 198271930,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1590019038
    },
    {
        "content": "<p>Based on <a href=\"https://www.hl7.org/fhir/search.html#token\">https://www.hl7.org/fhir/search.html#token</a> it might make sense if the token syntax could be converted to at least <code>Coding</code>, <code>CodeableConcept</code>, <code>Identifier</code>,  and <code>ContactPoint</code> using the <code>as</code> mechanism?</p>",
        "id": 198276026,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1590022930
    },
    {
        "content": "<p><code>as</code> is a type cast though, not a conversion function. A string <code>as</code> a Coding already has a defined meaning in FHIRPath. A conversion function for strings to and from Coding/CodeableConcept would make sense though, something like <code>'http://exmaple.org/CodeSystem/postcode|1234'.toCoding()</code></p>",
        "id": 198276218,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1590023207
    },
    {
        "content": "<p>we shouldn't invent crazy syntaxes. Factory.toCocing('<a href=\"http://exmaple.org/CodeSystem/postcode\">http://exmaple.org/CodeSystem/postcode</a>', '1234') is nicer</p>",
        "id": 198277481,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1590024776
    },
    {
        "content": "<p>toCocing <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 198278475,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1590026011
    },
    {
        "content": "<p>Factory rather than Fluent?</p>",
        "id": 198278491,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1590026035
    },
    {
        "content": "<p>The other operations .toString() or .toInteger() are fluent like this (without the factory).</p>",
        "id": 198278560,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1590026071
    },
    {
        "content": "<p>So for my example at the top this would be:<br>\n<code>Factory.toCoding('http://exmaple.org/CodeSystem/codedPostcodes', %LaunchPatient.address.first().postalCode)</code></p>",
        "id": 198278659,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1590026176
    },
    {
        "content": "<p>not sure what you mean by fluent?</p>",
        "id": 198282688,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1590031669
    },
    {
        "content": "<p>or re-use crazy syntaxes :-)</p>",
        "id": 198285379,
        "sender_full_name": "Michael Lawley",
        "timestamp": 1590035163
    },
    {
        "content": "<p>Has this got any legs?<br>\nWe're doing a sample quesitonnaire and kinda want to use this?</p>",
        "id": 209684799,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1599760733
    },
    {
        "content": "<p>My sample form want's to fill a coded question for the language based on the Patient.language(s)</p>",
        "id": 209685549,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1599761025
    },
    {
        "content": "<p>Isn't language already a CodeableConcept from which you can get Codings?  Did you mean a different field in Patient?</p>",
        "id": 209785713,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1599833729
    },
    {
        "content": "<p>has what got legs?</p>",
        "id": 209923796,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599992264
    },
    {
        "content": "<p>The toCoding factory.</p>",
        "id": 209950673,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1600033147
    },
    {
        "content": "<p>I think it would be good to have a factory API like the terminology service API as part of the FHIR adoption of FHIRPath</p>",
        "id": 209951770,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600034951
    },
    {
        "content": "<p>Since this was a type conversion, that's why I was encouraging the same format as toString() and toInteger()</p>",
        "id": 209958206,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1600046433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> Has this issue (of making Codings) been addressed by the recent changes?  I ran into a case where I wanted to convert ValueSet.expansion.contains elements into Codings, and couldn't.  (They are close enough that in fhirpath.js I could get away without converting, and just pretend they were Codings, but it is not really \"proper\" from a type perspective.)</p>",
        "id": 211990283,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1601596562
    },
    {
        "content": "<p>This hasn't been addressed by any spec changes I'm aware of, no. There are different potential approaches, we'd have to land one to move forward here.</p>",
        "id": 212123406,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1601669763
    },
    {
        "content": "<p>Here is a proposal that would allow construction of coding from ValueSet.expansion.contains (or from other things).</p>\n<div class=\"codehilite\"><pre><span></span><code>toCoding(displayExpr, codeExpr, systemExpr)\n</code></pre></div>\n\n\n<p>It applies the expressions given as parameters to the list of nodes on which toCoding is called.  (Yes, Coding also has fields \"version\" and \"userSelected\".   Parameters could be added for those as well, if desired.)</p>\n<p>Examples:<br>\n1) If %vs is a ValueSet expansion:</p>\n<div class=\"codehilite\"><pre><span></span><code>%vs.expansion.contains.toCoding(display, code, system)\n</code></pre></div>\n\n\n<p>This takes the display, code, and system properties of each node in \"contains\", and uses them to create a list of Codings with those properties.</p>\n<p>2) If you just want to convert a list of codes into codings with same system (borrowing from Brian's example above):</p>\n<div class=\"codehilite\"><pre><span></span><code>%patient.address.postalCode.toCoding($this, $this, &#39;http://exmaple.org/CodeSystem/codedPostcodes&#39;)\n</code></pre></div>\n\n\n<p>3) If you really wanted to start from scratch (though I am not sure why you would do this), you could do:</p>\n<div class=\"codehilite\"><pre><span></span><code>(1).toCoding(&#39;Retired&#39;, &#39;retired&#39;, &#39;http://hl7.org/fhir/publication-status&#39;)\n</code></pre></div>\n\n\n<p>In this case this value of the input would be ignored, so it is a bit of hack, but I am not sure this is a real use case.</p>",
        "id": 212138107,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1601679366
    },
    {
        "content": "<p>I would not want to add something specific for this. In general, the FHIR profile on FHIRPath should define a factory class that constructs data type instances. I already have informal constructors for Quantity, Coding, Identifier and Period.</p>",
        "id": 212141585,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1601682575
    },
    {
        "content": "<p>What does that syntax look like, and are there any language facilities that need to be in place to support that?</p>",
        "id": 212176846,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1601738594
    },
    {
        "content": "<p>I don't think it needs language features. I've just defined a Factory class that expresses a bunch of functions on it. E.g.</p>\n<p>Factory.coding(system, code, display)</p>",
        "id": 212205755,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1601786897
    },
    {
        "content": "<p>How would you use that to convert ValueSet.expansion.contains to Codings?</p>",
        "id": 212306665,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1601908243
    },
    {
        "content": "<p><code>ValueSet.expansion.contains.select(Factory.coding(system, code, display))</code></p>",
        "id": 212315012,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1601911366
    },
    {
        "content": "<p>That does not look like fhirpath to me.  What is Factory.coding returning?  select takes an expression.</p>",
        "id": 212360039,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1601933831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179266-fhirpath/topic/data.20extraction.20for.20Questionnaires/near/212141585\">said</a>:</p>\n<blockquote>\n<p>I would not want to add something specific for this. In general, the FHIR profile on FHIRPath should define a factory class that constructs data type instances. I already have informal constructors for Quantity, Coding, Identifier and Period.</p>\n</blockquote>\n<p>So, <code>toCoding</code> is specific, but <code>Factory.coding</code> is not?  The <code>toCoding</code> I suggested above has the advantage of being consistent with the Fluent pattern used in FHIRPath.</p>",
        "id": 212360562,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1601934188
    },
    {
        "content": "<blockquote>\n<p>So, toCoding is specific, but Factory.coding is not?</p>\n</blockquote>\n<p>I don't want to do something that only works for Coding. It should handle at least the commonly used complex data types I listed above. That's not about syntax, but about scope</p>\n<p>In terms of syntax, I think it's better to have a Factory based syntax rather than defining .toX with probably 20+ variants for data types and parameter combinations on every data type, which appears to be what you're doing. I guess if you have a root base class in the implementation, for all possible types, then that doesn't matter, but some/many implementations won't, and will have to do special case logic for the functions. Where as \"Factory\" that returns a global object with all those functions defined once seems less intrusive to me</p>",
        "id": 212363521,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1601936334
    },
    {
        "content": "<p>I like the idea of being able to construct more than just Codings, and I would actually prefer something that lets you construct any structure and assign a type as needed.  But, I don't see how Factory.coding(...) works if you are starting with a list of objects (like my ValueSet.expansion.contains example) that you want to turn into Codings.  I can see it working if you have a fixed set of strings, or if the parameters are independent of each other and just need to reach into (say) a QuestionnaireResponse for data.</p>",
        "id": 212364363,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1601936923
    },
    {
        "content": "<p>well, scope is the enemy whatever. This, for instance:</p>\n<p><code>%vs.expansion.contains.toCoding(display, code, system)</code></p>\n<p>it doesn't do what you think, since display, code and system come from your context... null, in other words</p>",
        "id": 212364499,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1601937027
    },
    {
        "content": "<p>That depends on how toCoding is defined.  I was defining it like \"where\" or \"select\", where the expression has access to the collection elements.</p>",
        "id": 212364608,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1601937112
    },
    {
        "content": "<p>well, that's exactly why I don't want to special case this stuff. resetting the context is a language specification, but specific to the function.</p>",
        "id": 212364716,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1601937175
    },
    {
        "content": "<p>It's a feature of the language that already exists.  I am just suggesting a new function (or set of functions) that use it.</p>",
        "id": 212364839,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1601937263
    },
    {
        "content": "<p>That's what I don't agree with. I don't think that profiles on the language -as this one is - should use that feature</p>",
        "id": 212366442,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1601938589
    },
    {
        "content": "<p>Just to make sure we're talking about the same \"feature\"-- are you referring to the feature in which a function can take an expression as a parameter, with access to $this and $index, as described as <a href=\"http://hl7.org/fhirpath/#functions\">http://hl7.org/fhirpath/#functions</a>?</p>",
        "id": 212369272,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1601940626
    },
    {
        "content": "<p>How about defining something in FHIRPath (not the FHIR profile), very general, like:<br>\n<code>toElement(type, fields, expressions)</code><br>\nwhere type is the type of the structure you are creating, fields is an array of field names (or possibly paths, if you want to handle nested structures like Identifier.period), and expressions are the FHIRPath expressions for obtaining values for those field names.  So, for example, you could do:</p>\n<div class=\"codehilite\"><pre><span></span><code>%vs.expansion.contains.toElement(&#39;Coding&#39;, &#39;display&#39; | &#39;code&#39; | &#39;system&#39;, &#39;display&#39; | &#39;code&#39; | &#39;system&#39;)\n</code></pre></div>\n\n\n<p>In this case the expressions and field names happen to be the same, but they might be different.</p>",
        "id": 212589615,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1602090602
    },
    {
        "content": "<p>sounds slippery to me. You really don't like the factory idea?</p>",
        "id": 212632562,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602113654
    },
    {
        "content": "<p>Yeah, I'm not seeing the problem with the Factory idea, I think that nicely solves the problem without needing to introduce any features in FHIRPath.</p>",
        "id": 212644789,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1602128977
    },
    {
        "content": "<p>CQL has instance selector syntax for this purpose. If we really wanted to do something in FHIRPath directly, I'd suggest adopting that syntax as something that's already defined and implemented in the CQL engines.</p>",
        "id": 212644861,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1602129067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191359\">Bryn Rhodes</span> <a href=\"#narrow/stream/179266-fhirpath/topic/data.20extraction.20for.20Questionnaires/near/212644789\">said</a>:</p>\n<blockquote>\n<p>Yeah, I'm not seeing the problem with the Factory idea, I think that nicely solves the problem without needing to introduce any features in FHIRPath.</p>\n</blockquote>\n<p>As I mentioned <a href=\"#narrow/stream/179266-fhirpath/topic/data.20extraction.20for.20Questionnaires/near/212360039\">above</a>, I don't see how the Factory idea would work to convert %vs.expansion.contains into Codings.</p>",
        "id": 212684754,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1602161892
    },
    {
        "content": "<blockquote>\n<p>That does not look like fhirpath to me. What is Factory.coding returning? select takes an expression.</p>\n</blockquote>\n<p>Is <code>Factory.coding(system, code, display)</code> not an expression?</p>",
        "id": 212691777,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1602164873
    },
    {
        "content": "<p>It looked like it was passing a Coding into select(), but I see... everything inside the select is an expression that gets evaluated for each item in the \"contains\".</p>",
        "id": 212695027,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1602166226
    },
    {
        "content": "<p>But, I think the syntax has some problems.  1) Normally in fhirpath, if you have Abc.def, Abc acts as an assertion that the context object is a resource of type Abc.  The <a href=\"http://hl7.org/fhirpath/#path-selection\">spec</a> says is can be a path on the context, but that it should try to match the type of the context object first, and actually I don't think there has been any case yet where a path starts with an uppercase letter.  \"Factory\" looks like a resource type.</p>",
        "id": 212697066,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1602167029
    },
    {
        "content": "<p>2) A second problem is that \".coding\" should be acting on the node returned by \"Factory\", which therefore means <code>system</code>, etc., would get evaluated with the context of the Factory object, not the objects in the contains.</p>",
        "id": 212697636,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1602167269
    },
    {
        "content": "<p>The <code>.coding()</code> function isn't iterative, so doesn't introduce any context, aso the system, code, and display references fall back to the <code>.select()</code> context. The reference to <code>Factory</code> is part of the FHIRProfile, in the same way that terminology services are introduced.</p>",
        "id": 212698143,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1602167469
    },
    {
        "content": "<p>terminology services are introduced with a variable syntax -- %terminologies, not Terminology.  (I am not sure how to handle that either, but it might be better to have one way of doing it).</p>",
        "id": 212699710,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1602168091
    },
    {
        "content": "<p>My main point in (2) is that (except I guess for %terminologies), in when you have <code>a.b(...)</code>, <code>a</code> sets the context for the <code>b(...)</code></p>",
        "id": 212700185,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1602168273
    },
    {
        "content": "<p>I guess what is happening is that %terminologies and Factory are introducing the idea of a namespace for functions, where the namespace does not modify the context but just provides access to a set of functions.  I don't see such a concept the core FHIRPath spec (but maybe I've missed it), and it seems like a new language feature that is being introduced by the FHIR profile.</p>",
        "id": 212701350,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1602168760
    },
    {
        "content": "<p>in <code>a.b(...)</code>, <code>a</code> only sets the context for <code>b(...)</code> if <code>b</code> is an iterative function, and that only applies to things like <code>.where()</code> and <code>.select()</code>. So I don't see it as introducing a new language feature, it's just taking advantage of the fact that implementations can introduce types.</p>",
        "id": 212705048,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1602170105
    },
    {
        "content": "<p>By \"context\", I mean the data nodes against which the next segment is applied.  So, in <code>Patient.name.count()</code>, you are getting the count of the names, not the count of Patient, because <code>name</code> has set the context for <code>count()</code>.</p>",
        "id": 212708274,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1602171353
    },
    {
        "content": "<p>Does the JS engine not have a stack?</p>",
        "id": 212713103,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1602173356
    },
    {
        "content": "<p>A stack of contexts?  No.  But how would that help?  The pattern in FHIRPath is to apply the immediate context of the thing on the left to the thing on the right.</p>",
        "id": 212713932,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1602173702
    },
    {
        "content": "<p>I'll review my implementation. I think you have a point about Factory. - I would be ok with %factory</p>",
        "id": 212740081,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1602186233
    },
    {
        "content": "<p>Yes, I think I like %factory better, though it still seems odd to me (but at least it is the same oddness as %terminologies).  %variable usually points to some data object (e.g. %questionnaire) which then provides the context for what follows after the <code>.</code>.  With %factory, you don't get a data object, but instead allow an extra set of functions to be called on whatever the context was previously.  It is like a variable that holds functions rather than data.  Definitely implementable, but it's a new thing compared to what I've encountered in the core FHIRPath spec.</p>",
        "id": 212748194,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1602190731
    },
    {
        "content": "<p>Since %factory seems acceptable, should there be a tracker item created for it?</p>",
        "id": 213555674,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1602852915
    },
    {
        "content": "<p>yes please</p>",
        "id": 213986355,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1603232077
    },
    {
        "content": "<p><a href=\"http://jira.hl7.org/browse/FHIR-29324\">J#29324</a></p>",
        "id": 214082543,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1603300055
    }
]