[
    {
        "content": "<p>Hi <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I was playing around with FHIRPath and trying to come up with an expression for reducing a CodeableConcept to a string. The logic I want involves preferences, e.g.</p>\n<ol>\n<li>if there are codes that are use selected, take the first display value from those</li>\n<li>otherwise, if there are codes from code systems I know, take the display string of the first of those</li>\n<li>otherwise take <code>CodeableConcept.text </code></li>\n</ol>\n<p>The generic logic here is I have several expressions that each yield a collection (possibly empty) and I want to go through those collections in a specified order and pick some element from the first non-empty collection. If these were arrays, I would concatenate them in the required order and take the first element, but the <code>union</code> operator does not guarantee to maintain the ordering. I can think of a few very ugly solutions - are there any elegant ones?</p>",
        "id": 230058341,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1615566433
    },
    {
        "content": "<p>my first thought is iif() chaining but that could be quite messy and long for all the processing you want to do</p>",
        "id": 230058606,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1615566526
    },
    {
        "content": "<p>Yup, that should work. I did consider it, but I was hoping for something that would avoid this sort of nesting and be more functional-style (a hope I could not make come true myself by reading the spec <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span> )</p>",
        "id": 230059895,
        "sender_full_name": "Morten Ernebjerg",
        "timestamp": 1615566988
    },
    {
        "content": "<p>Using a unions of firsts should work, but it would be long. It's a prime candidate for a function, but given that you're looking for \"code systems you know\" it couldn't be a standard function (unless everyone agreed what that meant).</p>",
        "id": 230074254,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1615572795
    },
    {
        "content": "<p>but how do you differentiate between the three preferred options in that union'd set?</p>",
        "id": 230074701,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1615573006
    },
    {
        "content": "<p>Mmmm, yes, that's true, sorry. Yep, iif. We considered coalesce(), like CQL has, but opted against it since it was shorthand for iif.</p>",
        "id": 230075951,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1615573575
    },
    {
        "content": "<p>(coding.where(system=\"blah\").code | coding.where(system=\"blah_2nd\").code | coding.where(system=\"3rd_system\").code ).first()</p>",
        "id": 241684083,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1622973950
    }
]