[
    {
        "content": "<p>I'm using the FHIRPath grammar from <a href=\"http://hl7.org/fhirpath/2018May/grammar.html\" target=\"_blank\" title=\"http://hl7.org/fhirpath/2018May/grammar.html\">http://hl7.org/fhirpath/2018May/grammar.html</a>, and working with the SearchParameter FHIRPath expressions in search-parameters.xml.  They are working great except for this one:</p>\n<p>ValueSet.expansion.contains.code</p>\n<p>I'm getting this error using Antlr 4.3, generating Java:</p>\n<p>line 1:19 no viable alternative at input 'contains'</p>\n<p>If I remove the following line from the grammar, it works just fine.  I don't think that \"contains\" is used in any SearchParameter FHIR expressions:</p>\n<div class=\"codehilite\"><pre><span></span>    | expression (&#39;in&#39; | &#39;contains&#39;) expression                 #membershipExpression\n</pre></div>\n\n\n<p>The problem appears to be with the keyword \"contains\" in the FHIRPath expression.</p>\n<p>Has anyone else run into this problem with the grammar?</p>",
        "id": 153964342,
        "sender_full_name": "Steve Munini",
        "timestamp": 1527088589
    },
    {
        "content": "<p>it's certainly valid because contains is an element in the ValueSet resource</p>",
        "id": 153964366,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527096140
    },
    {
        "content": "<p>If the model has an element that is named the same as a keyword in the language, use a quoted identifier to access the element, so <code>\"contains\"</code></p>",
        "id": 153964436,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1527103960
    },
    {
        "content": "<p>This was something we did not appreciate when we wrote the spec, and it's currently wrong if you're correct. But I don't think you are. field.contains is not ambiguous</p>",
        "id": 153964437,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527104090
    },
    {
        "content": "<p>(as in, the FHIRPath spec is wrong)</p>",
        "id": 153964438,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527104128
    },
    {
        "content": "<p>Not sure I'm following. Are you saying the spec is wrong for having contains as a keyword?</p>",
        "id": 153964483,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1527113951
    },
    {
        "content": "<p>well, no, but if having that means you can't use xx.contains, then some examples are wrong. And I don't know whether I would have agreed to symbols containing words if I realised that was the case</p>",
        "id": 153964484,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527114020
    },
    {
        "content": "<p>we don't publish a list of words...</p>",
        "id": 153964485,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527114033
    },
    {
        "content": "<p>True, we don't have a list of keywords, and we should, there are several:</p>",
        "id": 153964486,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1527114133
    },
    {
        "content": "<p>But they are defined as such in the grammar.</p>",
        "id": 153964487,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1527114152
    },
    {
        "content": "<p><code>div</code>, <code>mod</code>, <code>is</code>, <code>as</code>, <code>in</code>, <code>contains</code>, <code>and</code>, <code>or</code>, <code>xor</code>, <code>implies</code>, and the date/time precision keywords (<code>year</code>, <code>month</code>, <code>day</code>, etc.)</p>",
        "id": 153964488,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1527114326
    },
    {
        "content": "<p>If the implementations don't do this though, then I agree, the spec is wrong</p>",
        "id": 153964489,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1527114405
    },
    {
        "content": "<p>well, the spec doesn't put \"\" around them in the examples.</p>",
        "id": 153964490,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527114443
    },
    {
        "content": "<p>and I don't see why we should unless there's actual ambiguity.</p>",
        "id": 153964491,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527114461
    },
    {
        "content": "<p>I agree, and I also agree that <code>xx.contains</code> isn't ambiguous, it couldn't possibly be a keyword because it's clearly part of a path. I think the Antlr parser chokes on this though, and as far as I've been able to determine, the workaround is to put the keywords in the indentifier rule. We've already actually done this with is and as, for example.</p>",
        "id": 153964492,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1527114579
    },
    {
        "content": "<p>well, can we fix the grammar then?</p>",
        "id": 153964493,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527114609
    },
    {
        "content": "<p>I'll take a look and see if i can figure out a better way to convince Antlr it's not ambiguous.</p>",
        "id": 153964494,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1527114686
    },
    {
        "content": "<p>Worst case, yes, we can add all the keywords to the identifier rule.</p>",
        "id": 153964495,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1527114711
    },
    {
        "content": "<p>ok great.</p>",
        "id": 153964496,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1527114729
    },
    {
        "content": "<p>Thanks Bryn and Grahame for looking into this.</p>",
        "id": 153964504,
        "sender_full_name": "Steve Munini",
        "timestamp": 1527124698
    }
]