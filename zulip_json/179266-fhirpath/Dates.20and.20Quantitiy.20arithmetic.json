[
    {
        "content": "<p>The simple implementation of Date &amp; Quantity arithmetic I had hoped to implement in fhirpath.js was as follows:<br>\n1) Convert the date (or datetime, or time) to milliseconds<br>\n2) Use our JavaScript UCUM conversion library (ucum-lhc) to convert the quantity to milliseconds<br>\n3) Add/subtract the quantity ms from the date ms<br>\n4) Convert back to a date string and truncate to the precision of the date</p>\n<p>However, having read the resolutions to <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20682&amp;start=0\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20682&amp;start=0\">GF#20682</a>, <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14089&amp;start=0\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=14089&amp;start=0\">GF#14089</a>, and <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13365\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=13365\">GF#13365</a>, it seems like things are a lot more complicated, and from a UCUM point of view, inconsistent.  As I understand the behavior from the spec, we have:</p>\n<ul>\n<li>@2019-02-01 + 1 'mo' = @2019-03-01</li>\n<li>@2019-02-01 + 30.4375 'd' = @2019-03-03  (even though in UCUM 1 'mo' = 30.4375 'd')</li>\n<li>@2019-02-01  + 1.0001 ' mo'  = @2019-03-03  (because the month amount is no longer a whole number, and gets interpreted per UCUM)</li>\n<li>@2019-01-30 + 1 'mo' = ???</li>\n</ul>\n<p>Is that correct?</p>",
        "id": 165911177,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1558107933
    },
    {
        "content": "<p>yes that's correct. (including the last one ;-) )</p>",
        "id": 165941735,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558131963
    },
    {
        "content": "<p>:-) So, the \"last one\" was meant as a hidden question.  Are you saying the answer to @2019-01-30 + 1 'mo'  is undefined (or maybe throws an error?)</p>",
        "id": 165941777,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1558132031
    },
    {
        "content": "<p>no I think it should not be undefined or result in an error - both would be very unmanagable in practice, but I do not know what the result should be. I just asked my daughter (since she was around) the question in plain english context and she wasn't sure what the right answer is</p>",
        "id": 165941873,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1558132128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> ?</p>",
        "id": 166091822,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1558364319
    },
    {
        "content": "<p>And I guess @2019-03-31 + 1 'mo' = ?</p>",
        "id": 166094976,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1558366658
    },
    {
        "content": "<p>Asked my firely colleagues here.... the common tendency seems to be \"end of the next month\"</p>",
        "id": 166095051,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1558366698
    },
    {
        "content": "<p>And now, @2016-02-29 + 1 'a' ?</p>",
        "id": 166095106,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1558366749
    },
    {
        "content": "<p>That would be @2017-02-28 by the same logic.</p>",
        "id": 166095128,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1558366773
    },
    {
        "content": "<p>Could be a pain to implement. Let's me check what the .NET stack does...</p>",
        "id": 166095232,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1558366817
    },
    {
        "content": "<p>Yep:<br>\nnew DateTime(2019,01,30).AddMonths(1) == new DateTime(2019,2,28)</p>",
        "id": 166095366,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1558366932
    },
    {
        "content": "<p>new DateTime(2016,02,29).AddYears(1) == new DateTime(2017,2,28)</p>",
        "id": 166095430,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1558366988
    },
    {
        "content": "<p>@2019-02-28 + 1 'mo' = @2019-03-28 ? <br>\nThen:<br>\n@2019-01-31 + 1 'mo' + 1 'mo' = @2019-03-28</p>",
        "id": 166106311,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1558375700
    },
    {
        "content": "<p>And @2019-01-31 + 2 'mo' = @2019-03-31?</p>",
        "id": 166106348,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1558375747
    },
    {
        "content": "<p>It is on the .NET stack.</p>",
        "id": 166110905,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1558379299
    },
    {
        "content": "<p>moment.js also behaves that way.  I guess we can live with that behavior.</p>",
        "id": 166114475,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1558381915
    },
    {
        "content": "<p>CQL defines this behavior according to the ISO 8601 guidelines, which allow for \"agreement\": <a href=\"https://cql.hl7.org/05-languagesemantics.html#datetime-arithmetic-1\" target=\"_blank\" title=\"https://cql.hl7.org/05-languagesemantics.html#datetime-arithmetic-1\">https://cql.hl7.org/05-languagesemantics.html#datetime-arithmetic-1</a></p>",
        "id": 166116116,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1558383250
    },
    {
        "content": "<p>And yes, that's consistent with the .NET and Java stacks, same behavior.</p>",
        "id": 166116493,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1558383565
    },
    {
        "content": "<p>The one clarification I would suggest here is that <code>1.0001 'mo'</code> doesn't make sense in this context, because a month isn't a definite quantity. The Java engine ignores the fractional component so that <code>@2019-02-01 + 1.0001 'mo'</code> is actually <code>@2019-03-01</code>.</p>",
        "id": 166116715,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1558383723
    },
    {
        "content": "<p>'mo' is a definite quantity in UCUM.  I think that is why the resolution of those tracker items follow the UCUM definition for non-whole numbers.</p>",
        "id": 166116894,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1558383876
    },
    {
        "content": "<p>Right, we're just saying that when you use UCUM months and years in calendar calculations, the calculations round for calendar semantics, consistent with ISO 8601 definitions.</p>",
        "id": 166118486,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1558385202
    },
    {
        "content": "<p>And the only way to add calender months in .NET is using the AddMonths() function as shown above, which takes an integer parameter.</p>",
        "id": 166152013,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1558426985
    },
    {
        "content": "<p>The spec currently says, \"For partial date/time values, the operation is performed by converting the time-valued quantity to the highest precision in the partial....\"  I assume that is only done if the time-valued quantity is at a higher precision than the partial date/time?  Otherwise, if one follows that sentence as written, @2019-01-01 + 1 'a'  would need to be converted to @2019-01-01 + 365 'd'  before processing the addition, which would cause problems in leap years.  I think if the text is changed to limit that conversion to when the partial date/time has less precision than the quantity, it should be okay.</p>",
        "id": 167298953,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1559658285
    },
    {
        "content": "<p>What is the current situation on this topic?<br>\nIf I understand the topic correctly. The operations like @2014-02-04T15:32:29 + 1 'mo'. Adding UCUM values to FHIRPath Date/DateTime/Time values is not allowed. <br>\nIs this true?</p>\n<p>(related to tracker item 21601https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=21601)</p>",
        "id": 167467899,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1559815275
    },
    {
        "content": "<p>I think that a clarification will be added to the FhirPath spec describing the logic we discussed in this thread.</p>",
        "id": 167492513,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1559835156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194452\">@Bas van den Heuvel</span>  See the recent resolution of <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20682&amp;start=0\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20682&amp;start=0\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20682&amp;start=0</a>.  Quantities with UCUM units are still allowed to be added to date/time.</p>",
        "id": 167492522,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1559835167
    },
    {
        "content": "<blockquote>\n<p>The spec currently says, \"For partial date/time values, the operation is performed by converting the time-valued quantity to the highest precision in the partial....\"  I assume that is only done if the time-valued quantity is at a higher precision than the partial date/time?  Otherwise, if one follows that sentence as written, @2019-01-01 + 1 'a'  would need to be converted to @2019-01-01 + 365 'd'  before processing the addition, which would cause problems in leap years.  I think if the text is changed to limit that conversion to when the partial date/time has less precision than the quantity, it should be okay.</p>\n</blockquote>\n<p><a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=22677\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=22677\">GF#22677</a></p>",
        "id": 167493987,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1559836004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"195344\">@Paul Lynch</span> , thank you for submitting that, that is definitely the intent and I agree with the proposed clarification to address it.</p>",
        "id": 167670558,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1560032418
    }
]