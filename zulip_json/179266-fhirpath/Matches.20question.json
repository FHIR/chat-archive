[
    {
        "content": "<p>According to the spec, matches():</p>\n<blockquote>\n<p>Returns true when the value matches the given regular expression. Regular expressions should function consistently, regardless of any culture- and locale-specific settings in the environment, should be case-sensitive, use 'single line' mode and allow Unicode characters.</p>\n</blockquote>",
        "id": 274771854,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1646870874
    },
    {
        "content": "<p>so, should this test pass:</p>",
        "id": 274771900,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1646870883
    },
    {
        "content": "<p>'<a href=\"http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matches('Library')\">http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matches('Library')</a></p>",
        "id": 274771926,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1646870906
    },
    {
        "content": "<p>my take is that this should not pass. <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> </p>\n<p>because it doesn't pass i java or dotnet: both of them treat matches as a full match, not a partial match</p>",
        "id": 274772318,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1646871156
    },
    {
        "content": "<p>If you want it to match the full string, you could use the beginning/end of string markers: <br>\n'<a href=\"http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matches('^Library$')\">http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matches('^Library$')</a><br>\nwhich would be false.<br>\nWithout those, I think it should be true.  Otherwise, how would you test whether an expression matches part of a string?</p>",
        "id": 274773802,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646872271
    },
    {
        "content": "<p>JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\">String.match(regex)</a> does not require a full-string match. It works like <span class=\"user-mention\" data-user-id=\"195344\">@Paul Lynch</span> suggests (matches any region; use <code>^</code>/ <code>$</code> to force full-string matches).</p>",
        "id": 274782994,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1646880368
    },
    {
        "content": "<p>That said, I think I recall discussing CQL <code>matches</code> behavior w/ <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> and he indicated that it should be full-string matching for CQL. Assuming I remember that correctly, I expect that's also the intent for FHIRPath.</p>",
        "id": 274783319,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1646880711
    },
    {
        "content": "<p>I'm with Paul on this one. We've been explicit with the other parameters for the regex engine.<br>\n(not sure why we'd have said single line too, means can't process narratives, or longer text content)</p>",
        "id": 274803825,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646900978
    },
    {
        "content": "<blockquote>\n<p>Otherwise, how would you test whether an expression matches part of a string?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code>&#39;http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1&#39;.matches(&#39;.*Library.*&#39;)\n</code></pre></div>",
        "id": 274881015,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1646939337
    },
    {
        "content": "<p>for me, a full string match is the intent. The spec says \"when the value matches the given regular expression\" not \"when the value has content that matches the given regular expression\"</p>\n<p>This is a subtle difference. But this certainly needs clarity</p>",
        "id": 274881244,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1646939449
    },
    {
        "content": "<p>When languages (e.g. JavaScript, Ruby, Perl) provide the ability to match a string against a regular expression, it is the regular expression that controls whether it is against the full string or not.  I think it would be very unexpected to provide a \"match\" API that takes a regular expression but always requires it to match against the full string.</p>",
        "id": 274886555,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646941864
    },
    {
        "content": "<p>given that's what Java does, it's not going to be that unexpected</p>",
        "id": 274887715,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1646942450
    },
    {
        "content": "<p>It's also what XML schema does</p>",
        "id": 274888048,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646942609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179266-fhirpath/topic/Matches.20question/near/274887715\">said</a>:</p>\n<blockquote>\n<p>given that's what Java does, it's not going to be that unexpected</p>\n</blockquote>\n<p>I guess it has been too many years since I did Java development.  I had to go test that, but you are right.</p>",
        "id": 274889867,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646943586
    },
    {
        "content": "<p>Java has both matches() and find() (in Matcher) and find() is the one that will look for a match in a substring of the string.  It sounds like if FHIRPath matches() is supposed to be like Java matches(), then find() should be added as well.</p>",
        "id": 274890621,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646943981
    },
    {
        "content": "<p>I don't understand why Java has both APIs though, when the regular expression can control that.</p>",
        "id": 274890762,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646944079
    },
    {
        "content": "<p>A tool I frequently use is <a href=\"https://regexr.com/\">https://regexr.com/</a> (though I tested against several just to be sure - feel free to use whichever tester you would like).</p>\n<p>If you enter the text: <code>http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1</code>, you can see the difference in the evaluations:</p>\n<table>\n<thead>\n<tr>\n<th>RegEx</th>\n<th>IsMatch</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Library</code></td>\n<td>true</td>\n<td>matches the literal 'Library' in the string</td>\n</tr>\n<tr>\n<td><code>.*Library.*</code></td>\n<td>true</td>\n<td>matches the entire string</td>\n</tr>\n<tr>\n<td><code>^Library$</code></td>\n<td>false</td>\n<td>asking for exact literal</td>\n</tr>\n</tbody>\n</table>\n<p>Given that every 'tester' I used is consistent, and assuming the intention is that FHIRPath is consistent with regex, I would apply those behaviors.</p>\n<p>edit: actually, at <a href=\"https://regex101.com/\">https://regex101.com/</a> it can perform the evaluation in a lot of contexts (PHP versions, JS, Java, .Net).  They are all consistent with the above.</p>",
        "id": 274890923,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1646944186
    },
    {
        "content": "<p>well, I use that too. But it's testing regex matching, not the behaviour of the match() function, which is where the actual question arises.</p>",
        "id": 274892635,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1646945177
    },
    {
        "content": "<p>either way around works - you just have to prefix/suffix for the other case (either ^ &amp; $ or .*)</p>",
        "id": 274892677,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1646945207
    },
    {
        "content": "<p>Sure. My point is that matching against <code>Library</code>, <code>.*Library.*</code>, and <code>^Library$</code> are different things in RegEx.  FHIRPath can define any behavior it wants, but if it differs from the behavior of regex there, it will cause confusion down the road.</p>\n<p>edit for clarity</p>",
        "id": 274892940,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1646945368
    },
    {
        "content": "<blockquote>\n<p>don't understand why Java has both APIs though, when the regular expression can control that.</p>\n</blockquote>\n<p>a mature API. If you have contexts in which the regular expression is written for one approach and not the other, then massaging it from one to the other is yucky</p>",
        "id": 274892960,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1646945384
    },
    {
        "content": "<blockquote>\n<p>if FHIRPath matches() is supposed to be like Java matches(), then find() should be added as well</p>\n</blockquote>\n<p>I think that's the right thing for us to do here</p>",
        "id": 274893024,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1646945404
    },
    {
        "content": "<blockquote>\n<p>it differs from the behavior of regex there</p>\n</blockquote>\n<p>my point is that this is orthogonal. The question isn't regex, the question is the meaning of the match() function. And we're screwed one way or the other because java does it one way and javascript does it another</p>",
        "id": 274894414,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1646946165
    },
    {
        "content": "<p>Yep, I get that we are discussing the behavior of a FHIRPath function.  It could be defined to do literally anything and would be correct by definition =).</p>\n<p>But this is also relevant for the sibling <code>replaceMatches</code> function, which I assume should use the same semantics as <code>matches</code> and depends on what parts of the string are actually matched.</p>",
        "id": 274895877,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1646946941
    },
    {
        "content": "<p>Ha.  That's a good point.  <code>replaceMatches</code> wouldn't work very well if it only did full-string matching, now would it?</p>",
        "id": 274904897,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1646951306
    },
    {
        "content": "<p>I agree this test should not pass, but also agree that the specification needs some clarity here. I have confirmed that the CQL engine behaves this way (fails the test), and that both the FHIRPath and CQL descriptions of the matches (and replaceMatches) functions are identical. Given that the engines are confirmed to behave this way I think this can be a technical correction to clarify the expected semantics here on FHIRPath and CQL.</p>",
        "id": 274904965,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1646951350
    },
    {
        "content": "<p>Bryn, how can you replace just 'Library' in <code>http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1</code> via <code>replaceMatches</code> if that test fails?  (assuming normal regex processing that replace <code>.*Library.*</code> would replace the whole string)</p>",
        "id": 274905749,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1646951811
    },
    {
        "content": "<p>Hmm.... fair point, so basically the way it works now we can't hit that simple use case :(</p>",
        "id": 274907622,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1646952891
    },
    {
        "content": "<p>So as Grahame is suggesting, we'd have to introduce a findMatches() and change replaceMatches to use find semantics.</p>",
        "id": 274907723,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1646952951
    },
    {
        "content": "<p>I am not familiar enough with FHIRpath implementations to weigh in on that part.  I do not see any examples of <code>match</code> in the spec, but I do see something under <a href=\"https://hl7.org/fhirpath/#replacematchesregex-string-substitution-string-string\">replaceMatches</a>... which uses the <code>replace</code> function  =).</p>\n<p>Assuming that we swap out <code>replace</code> with <code>repalceMatches</code>, the example would indicate that the match semantics would need the be the 'typical regex' version to work.</p>\n<p>I also discovered the note in that section that the implementation should generally align with <a href=\"https://hl7.org/fhirpath/#PCRE\">PCRE</a>, in which the original test matches successfully.</p>",
        "id": 274908388,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1646953294
    },
    {
        "content": "<p>Oh what a tangled web we weave.</p>",
        "id": 274908750,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1646953504
    },
    {
        "content": "<p>Are you saying that PCRE semantics implies the test should pass?</p>",
        "id": 274908860,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1646953565
    },
    {
        "content": "<p>As far as I can tell, yes. <a href=\"https://regex101.com/\">https://regex101.com/</a> has the option for testing against PCRE and it passes there.</p>",
        "id": 274909273,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1646953851
    },
    {
        "content": "<p>Note that FHIRPath's <a href=\"https://hl7.org/fhirpath/#replacematchesregex-string-substitution-string-string\">replaceMatches</a> says:</p>\n<blockquote>\n<p>Matches the input using the regular expression in regex and replaces each match with the substitution string.</p>\n</blockquote>\n<p>I think the phrase \"replaces each match\" implies that the pattern can match on sequences within the input string (not just the whole string itself).</p>",
        "id": 274909997,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1646954337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> -- As you know, CQL has <a href=\"https://cql.hl7.org/09-b-cqlreference.html#matches\">matches</a>, <a href=\"https://cql.hl7.org/09-b-cqlreference.html#replacematches\">replaceMatches</a>, and <a href=\"https://cql.hl7.org/09-b-cqlreference.html#splitonmatches\">splitOnMatches</a>.</p>\n<p>Whether <code>matches</code> is full-string or not is ambiguous.  But <code>replaceMatches</code> contains a description similar to what I pointed out above (implying matches against substrings) and an example that demonstrates this:</p>\n<div class=\"codehilite\"><pre><span></span><code>define &quot;ReplaceMatchesFound&quot;: ReplaceMatches(&#39;ABCDE&#39;, &#39;C&#39;, &#39;XYZ&#39;) // &#39;ABXYZDE&#39;\n</code></pre></div>\n<p>And of course <code>SplitOnMatches</code> would just be silly if the pattern was required to match the whole string.</p>",
        "id": 274910240,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1646954495
    },
    {
        "content": "<blockquote>\n<p>but I do see something under replaceMatches... which uses the replace function =).</p>\n</blockquote>\n<p>Ha, that one is definitely a bug.</p>",
        "id": 274911880,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1646955652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> , agreed, replaceMatches in both FHIRPath and CQL imply find semantics, and splitOnMatches would be silly without it.</p>",
        "id": 274912091,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1646955806
    },
    {
        "content": "<p>So maybe define a .matchesFull() that has full-string matching semantics and clarify that .matches should use \"find\" semantics, consistent with PCRE?</p>",
        "id": 274912228,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1646955886
    },
    {
        "content": "<p>And yes, confirmed that the replaceMatches in the CQL engine uses find semantics:</p>\n<div class=\"codehilite\"><pre><span></span><code>define TestReplaceMatches: ReplaceMatches(&#39;http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1&#39;, &#39;Library&#39;, &#39;Measure&#39;)\n// returns http://fhir.org/guides/cqf/common/Measure/FHIR-ModelInfo|4.0.1\n</code></pre></div>",
        "id": 274913307,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1646956697
    },
    {
        "content": "<blockquote>\n<p>'<a href=\"http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matches('Library')\">http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matches('Library')</a><br>\nbecause it doesn't pass i java or dotnet: both of them treat matches as a full match, not a partial match</p>\n</blockquote>\n<p>It doesn't?  I am calling the underlying Regex.IsMatch .NET function which according to this: <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch?view=net-6.0\">https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch?view=net-6.0</a> does a partial match.</p>\n<p>I just tested that:</p>\n<p><code>Assert.IsTrue(Regex.IsMatch(\"http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1\",\"Library\"))</code> passes...</p>",
        "id": 275217548,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1647253977
    },
    {
        "content": "<p>Okay, based on feedback here, proposed disposition for this technical correction: <a href=\"https://jira.hl7.org/browse/FHIR-36257\">https://jira.hl7.org/browse/FHIR-36257</a></p>",
        "id": 275251988,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1647271654
    },
    {
        "content": "<p>And another one to add .matchesFull() <a href=\"https://jira.hl7.org/browse/FHIR-36270\">https://jira.hl7.org/browse/FHIR-36270</a></p>",
        "id": 275252388,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1647271804
    },
    {
        "content": "<p>And a technical correction for the replaceMatches example: <a href=\"https://jira.hl7.org/browse/FHIR-36271\">https://jira.hl7.org/browse/FHIR-36271</a></p>",
        "id": 275252745,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1647271937
    },
    {
        "content": "<p>Thanks Bryn, I added some notes to <a href=\"http://jira.hl7.org/browse/FHIR-36257\">FHIR-36257</a> that could provide additional clarity.</p>\n<p>I am not sure I understand the implementation of <code>matchesFull()</code>.  Is it checking to see if an entire string matches a regular expression (e.g., all characters in input are part of a match group)?  What is the use case that needs that vs. either <code>matches</code> or <code>=</code>?</p>",
        "id": 275255005,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1647272820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> your weird and misplaced obsession with standard regex had please not be true.</p>",
        "id": 275304731,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1647295801
    },
    {
        "content": "<p>specifically the table you posted</p>",
        "id": 275304789,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1647295821
    },
    {
        "content": "<p>I don't want to have to scan and reverse engineeer the regex in order to make $test^ work</p>",
        "id": 275304899,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1647295897
    },
    {
        "content": "<p>What did I miss?  Following are from online tools (all the ones I tested agree):<br>\n<a href=\"/user_uploads/10155/v0iwUOn6136l4jAiHIcdL5Vv/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/v0iwUOn6136l4jAiHIcdL5Vv/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/v0iwUOn6136l4jAiHIcdL5Vv/image.png\"></a></div>",
        "id": 275305087,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1647296038
    },
    {
        "content": "<p>(this is consistent with the regex implementation in C#, and I <em>believe</em> the <code>Pattern</code> implementation in Java - though I have not tried it myself)</p>",
        "id": 275305783,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1647296480
    },
    {
        "content": "<p>the question is not, what do the underlying regex engines do, the question is, how does the function matches() work.</p>",
        "id": 275313342,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1647301963
    },
    {
        "content": "<p>Sure <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> .  But I believe the question came up, and several implementers have chimed since, that other languages have a different behavior for their language's <code>matches</code> function.  <em>Java</em> is the odd duck that has a separate <code>matches</code> and <code>find</code> - <code>find</code> is aligned with what everyone else uses for <code>matches</code>.</p>\n<p>I do not think you would disagree if I say that programming languages have idiosyncrasies.  In this case, there are production implementations with both behaviors.  I am offering the view that FHIRPath should align with the general RegEx definition and behavior, instead of adopting the unique Java convention.</p>\n<p>Development-wise, changing the Java implementation to use <code>find</code> under-the-hood makes it the same as other languages.  To my knowledge, neither JS (client or node) nor C# have any function that replicates the behavior of Java <code>matches</code>, meaning other SDK developers would need to re-invent the behaviors to match.</p>",
        "id": 275315541,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1647303795
    },
    {
        "content": "<p>sigh. ok. I have switched it round, and added matchesFull to the java implementation</p>",
        "id": 275319521,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1647308029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> this breaks the widely used constraint sdf-0: <code>name.matches('[A-Z]([A-Za-z0-9_]){0,254}'</code>&gt;</p>\n<p>I am internally treating this as <code>name.matches('^[A-Z]([A-Za-z0-9_]){0,254}$')</code> in the java validator</p>",
        "id": 275725818,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1647550748
    },
    {
        "content": "<p>also eld-19 and eld-20 need wrapping with ^ and $</p>",
        "id": 275741937,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1647559627
    },
    {
        "content": "<p>Thanks, yes, I will admit that my mental regex parser <em>does</em> work like the Java matches(), so I never noticed these mistakes. We'll fix it in the .NET library too.</p>",
        "id": 276020120,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1647852585
    }
]