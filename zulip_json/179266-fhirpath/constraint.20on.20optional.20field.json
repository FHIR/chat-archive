[
    {
        "content": "<p>A lot of resources have a <code>name</code> field, and a warning regex that <code>name.matches('[A-Z]([A-Za-z0-9_]){0,254}')</code></p>\n<p>My validation engine barfs on this when <code>name</code> is absent, because it says that this expression evaluates to <code>{}</code> which is not <code>true</code>.</p>\n<p>Should this expression instead be <code>name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')</code> ?</p>",
        "id": 273280640,
        "sender_full_name": "Nick George",
        "timestamp": 1645820944
    },
    {
        "content": "<p>Ex.: <a href=\"http://hl7.org/fhir/plandefinition-definitions.html#PlanDefinition\">http://hl7.org/fhir/plandefinition-definitions.html#PlanDefinition</a></p>",
        "id": 273280714,
        "sender_full_name": "Nick George",
        "timestamp": 1645820981
    },
    {
        "content": "<p>Or else put the constraint on <code>name</code> rather than the root element</p>",
        "id": 273281152,
        "sender_full_name": "Nick George",
        "timestamp": 1645821196
    },
    {
        "content": "<p>As far as I can tell, this only exists on Questionnaire.  And yes, it should be fixed.  We can catch it in R4B if you submit a change request ASAP :)</p>",
        "id": 273288767,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1645825565
    },
    {
        "content": "<p>I saw it on a number of resources... did you see the plan def link I posted?</p>",
        "id": 273290965,
        "sender_full_name": "Nick George",
        "timestamp": 1645826790
    },
    {
        "content": "<p>will post a change request</p>",
        "id": 273290978,
        "sender_full_name": "Nick George",
        "timestamp": 1645826803
    },
    {
        "content": "<p>Yeah, it's present on all the canonicals, it's inherited from the base pattern.</p>",
        "id": 273291662,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1645827188
    },
    {
        "content": "<p>In most places it has some funky escaping in the source, which is why my search didn't find it.</p>",
        "id": 273291791,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1645827259
    },
    {
        "content": "<p>filed <a href=\"https://jira.hl7.org/browse/FHIR-36127\">https://jira.hl7.org/browse/FHIR-36127</a> with a list of affected resources (as identified by my engine)</p>",
        "id": 273292009,
        "sender_full_name": "Nick George",
        "timestamp": 1645827408
    },
    {
        "content": "<p>Bryn - not sure I follow about inhereited - the expression exists on root elements, not on canonical</p>",
        "id": 273292052,
        "sender_full_name": "Nick George",
        "timestamp": 1645827443
    },
    {
        "content": "<p>also <code>name</code> is a <code>string</code>, not a <code>canonical</code>?  sorry if I misunderstand you</p>",
        "id": 273292138,
        "sender_full_name": "Nick George",
        "timestamp": 1645827491
    },
    {
        "content": "<p>I just mean that it's defined on the CanonicalResource that is the \"base\" for all the canonical resources:<br>\n<a href=\"https://build.fhir.org/canonicalresource.html#invs\">https://build.fhir.org/canonicalresource.html#invs</a></p>",
        "id": 273292587,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1645827632
    },
    {
        "content": "<p>So it's not really \"inherited\" per se, but that's the root definition of that invariant.</p>",
        "id": 273292614,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1645827647
    },
    {
        "content": "<p>huh #TIL</p>",
        "id": 273292759,
        "sender_full_name": "Nick George",
        "timestamp": 1645827740
    },
    {
        "content": "<p>And also another example of why I don't like {} not being interpreted as true.</p>",
        "id": 273321183,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1645855369
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> this one)</p>",
        "id": 274592849,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1646767480
    },
    {
        "content": "<p>The presumption that \"{}\" equates to \"false\" creates issues with Questionnaire.enableWhen.  If you have an enableWhen statement of \"@1970=@1970-12-15\", it's much safer for that to evaluate to 'true' than to 'false'.</p>",
        "id": 274593740,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646767843
    },
    {
        "content": "<p>But right now, it evaluates to {}, which means 'false'.</p>",
        "id": 274593765,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646767857
    },
    {
        "content": "<p>An empty list (<code>{}</code>) means there is not enough information to assess if it is true or false (i.e., it means \"maybe\"). Sometimes you might want to treat \"maybe\" as true, but other times you might want to treat it as false. I personally think it makes sense to default to false.</p>\n<p>If you want <code>{}</code> to be treated as true, then you can modify your expression to enforce that.  To take Lloyd's example, you could do:</p>\n<div class=\"codehilite\"><pre><span></span><code>(@1970 = @1970-12-15).allTrue()\n</code></pre></div>\n<p>Since <code>allTrue()</code> is defined to return true on an empty list (<code>{}</code>), this would get you the behavior you want.</p>\n<p>Or you could be a little more explicit if you prefer:</p>\n<div class=\"codehilite\"><pre><span></span><code>(@1970 = @1970-12-15) or (@1970 = @1970-12-15).empty()\n</code></pre></div>",
        "id": 274607123,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1646773633
    },
    {
        "content": "<p>this has come up repeatedly. That constraint is wrong and problematic</p>",
        "id": 274884070,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1646940695
    },
    {
        "content": "<p>The extension has a tracker item to fix (assigned to me)</p>",
        "id": 274888190,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1646942672
    }
]