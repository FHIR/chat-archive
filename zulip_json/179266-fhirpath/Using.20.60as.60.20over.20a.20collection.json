[
    {
        "content": "<p><a href=\"http://hl7.org/fhirpath/index.html#types\" target=\"_blank\" title=\"http://hl7.org/fhirpath/index.html#types\">http://hl7.org/fhirpath/index.html#types</a> says:</p>\n<blockquote>\n<p>If there is more than one item in the input collection, the evaluator will throw an error.</p>\n</blockquote>",
        "id": 180060406,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573063877
    },
    {
        "content": "<p>however, there are multiple search parameter expressions in fhir that use it over an element with cardinality &gt; 1  (e.g. <code>Observation.component.value as Quantity</code> where component can repeat)</p>",
        "id": 180060572,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573063961
    },
    {
        "content": "<p>is this an issue with the fhirpath spec?  or is it an issue with fhir's use of it?</p>",
        "id": 180060648,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573064009
    },
    {
        "content": "<p>or is the guidance at <a href=\"http://hl7.org/fhirpath/index.html#types\" target=\"_blank\" title=\"http://hl7.org/fhirpath/index.html#types\">http://hl7.org/fhirpath/index.html#types</a> not applicable for <code>as</code> when used this way?  for example, maybe its only referring to <code>as</code> the function?</p>",
        "id": 180060742,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573064050
    },
    {
        "content": "<p>What would be a use case where you would want to do <code>Observation.component.value as Quantity</code> with multiple components?</p>",
        "id": 180061300,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1573064376
    },
    {
        "content": "<p>see <code>component-value-quantity</code> at <a href=\"https://www.hl7.org/fhir/observation.html#search\" target=\"_blank\" title=\"https://www.hl7.org/fhir/observation.html#search\">https://www.hl7.org/fhir/observation.html#search</a></p>",
        "id": 180062320,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573064981
    },
    {
        "content": "<p>not sure about real-world use case for it...seems like normally you'd want to seach on the \"composite\" parameter</p>",
        "id": 180062423,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573065012
    },
    {
        "content": "<p>but I assume the search parameter exists for a reason</p>",
        "id": 180062438,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573065023
    },
    {
        "content": "<p>another example where as is used over a collection in fhir is the dom-3 constraint (but this one is pretty complicated):</p>\n<div class=\"codehilite\"><pre><span></span>    description = &quot;If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource&quot;,\n    expression = &quot;contained.where(((&#39;#&#39;+id in (%resource.descendants().reference | %resource.descendants().as(canonical) | %resource.descendants().as(uri) | %resource.descendants().as(url))) or descendants().where(reference = &#39;#&#39;).exists() or descendants().where(as(canonical) = &#39;#&#39;).exists() or descendants().where(as(canonical) = &#39;#&#39;).exists()).not()).trace(&#39;unmatched&#39;, id).empty()&quot;\n</pre></div>",
        "id": 180062981,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573065350
    },
    {
        "content": "<p>I see.   There is either a problem with the FHIRPath specification, or a problem with the \"Expression\" for the component-value-quantity search parameter.</p>",
        "id": 180063040,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1573065365
    },
    {
        "content": "<p>for that dom-3 example,  just note the <code>%resource.descendants().as(canonical)</code> i guess</p>",
        "id": 180063075,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573065393
    },
    {
        "content": "<p>It's also worth mentioning that the FHIRPath specification does not document the <code>as</code> an <code>is</code> functions (only the operators). I think the FHIRPath specification should change to allow collections that have more than one item (to specifically support the search parameter extraction and constraints that use them that way).</p>",
        "id": 180063616,
        "sender_full_name": "John Timm",
        "timestamp": 1573065729
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/ig/HL7/FHIRPath/branches/master/N1/index.html#types\" target=\"_blank\" title=\"http://build.fhir.org/ig/HL7/FHIRPath/branches/master/N1/index.html#types\">http://build.fhir.org/ig/HL7/FHIRPath/branches/master/N1/index.html#types</a> includes \"as\" and \"is\" functions, but they are deprecated.</p>",
        "id": 180063656,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1573065769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> ?</p>",
        "id": 180063696,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1573065795
    },
    {
        "content": "<p>Interesting. I wonder why they are deprecated. They are used a lot.</p>",
        "id": 180065082,
        "sender_full_name": "John Timm",
        "timestamp": 1573066581
    },
    {
        "content": "<p>Yes, the FHIRPath spec defines the is and as operators as singleton operators; otherwise there is some ambiguity about the result. It appears though that for the as operator at least, at least one reference implementation doesn't respect that singleton-ness.</p>",
        "id": 180065306,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1573066693
    },
    {
        "content": "<p>The is() and as() functions are deprecated because they are defined as operators. They are defined as operators because the arguments are type specifiers, a different syntactic category than expression.</p>",
        "id": 180065391,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1573066757
    },
    {
        "content": "<p>(Either that, or that constraint has never been violated in practice).</p>",
        "id": 180065492,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1573066814
    },
    {
        "content": "<p>I would say there is evidence that as is used with non-singleton collections in some of the built-in FHIRPath expressions used within the FHIR specification (e.g. dom-3).</p>",
        "id": 180078063,
        "sender_full_name": "John Timm",
        "timestamp": 1573075550
    },
    {
        "content": "<p>Also, per the comment about the argument is a type specifier, I got around this by asking ANTLR for the text of the AST node instead of trying to evaluate the expression (like I would for qualified identifier).</p>",
        "id": 180079167,
        "sender_full_name": "John Timm",
        "timestamp": 1573076304
    },
    {
        "content": "<p>so i'm still wondering this:  is it a fhirpath issue or a fhir issue?</p>",
        "id": 180079375,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573076472
    },
    {
        "content": "<p>should I open a GForge ticket for it?  should it start with fhir-i or fhirpath?</p>",
        "id": 180079441,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573076521
    },
    {
        "content": "<p>per my current understanding and bryn's response, this would be a FHIR issue.<br>\nbut clearly using <code>as</code> to filter a collection down to just the elements of a given type is a very useful capability...is there something comparable for FHIR to use if it can't use <code>as</code> in this way?</p>",
        "id": 180079780,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573076757
    },
    {
        "content": "<p>maybe <code>Observation.component.select(value as Quantity)</code> in this case?</p>",
        "id": 180079941,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573076869
    },
    {
        "content": "<p>well. This works in my implementation. Clearly, the FHIR Path test cases don't test out the failure of this on a collection, since I do succeed on these implementations</p>",
        "id": 180084185,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573080211
    },
    {
        "content": "<p>given the massive amount of work a technical correction represents (approximately a month of &gt; 8hrs/day  so far), I'm just not going to correct this right now</p>",
        "id": 180084254,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573080252
    },
    {
        "content": "<p>so I'm not sure what the right resolution is. Take the first example</p>",
        "id": 180084268,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573080279
    },
    {
        "content": "<p><code>Observation.component.value as Quantity</code></p>\n<p>I think this is clear, at least, and what I'm trying to do seems reasonable to me - select all the Observation.component.value that are Quantities</p>",
        "id": 180084321,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573080328
    },
    {
        "content": "<p>Or that might be expected to include an assertion that all of the Observation.component.values are Quantities.</p>",
        "id": 180084590,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1573080580
    },
    {
        "content": "<p>as is not an assertion. things that fail as fall out</p>",
        "id": 180085846,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573081606
    },
    {
        "content": "<p>Oops-- yes you are right.</p>",
        "id": 180085982,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1573081737
    },
    {
        "content": "<p>Agreed on the level of effort, it's trivial to characterize this as a clarification on <code>as</code> behavior, given that at least one system behaves that way. And the behavior is reasonable for <code>as</code>, though I would not say the same for <code>is</code>; in the <code>is</code> case, I think it's still ambiguous and should be treated as an error. So I'm hearing support for considering this a clarification on FHIRPath and submitting as a tracker there?</p>",
        "id": 180107260,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1573109861
    },
    {
        "content": "<p>I'd like that</p>",
        "id": 180107736,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573110433
    },
    {
        "content": "<p>for as.</p>",
        "id": 180107739,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573110436
    },
    {
        "content": "<p>is.. I don't know if I used it like that</p>",
        "id": 180107746,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573110453
    },
    {
        "content": "<p>if the focus cardinality != 1, I return false from .is()</p>",
        "id": 180107822,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573110506
    },
    {
        "content": "<p>I added a throw for cardinality != 1 for both <code>as</code> and <code>is</code>.  This is how I found the issue with FHIR use of <code>as</code> in the first place.<br>\nFor <code>is</code>, I havn't seen any such issue...I don't think FHIR is using that on collections with size &gt; 1 and so I agree that one can stay as-is (no pun intended).</p>",
        "id": 180129914,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573132288
    },
    {
        "content": "<p>However, it would be good to nail down the expected behavior of <code>as</code> and <code>is</code> when the left operand is an empty collection.<br>\nIn our implementation, I had to stop throwing when the input collection to <code>is</code> was empty, but instead of returning false we opted to return an empty collection in this case.</p>",
        "id": 180130139,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573132447
    },
    {
        "content": "<p>The spec says:</p>\n<blockquote>\n<p>If the left operand is a collection with a single item and the second operand is a type identifier, this operator returns true if the type of the left operand is the type specified in the second operand, or a subclass thereof. If the input value is not of the type, this operator returns false. If the identifier cannot be resolved to a valid type identifier, the evaluator will throw an error. If the input collections contains more than one item, the evaluator will throw an error. In all other cases this operator returns the empty collection.</p>\n</blockquote>\n<p>So our interpretation was that an empty input collection would fall through to that last sentence (which matches a number of other functions) and this seems to be working well.</p>",
        "id": 180130417,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573132682
    },
    {
        "content": "<p>I opened <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=25188\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=25188\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=25188</a> for this issue</p>",
        "id": 180132243,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573133956
    },
    {
        "content": "<p>I also opened <a href=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=25189\" target=\"_blank\" title=\"https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=25189\">https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=25189</a> for the behavior of <code>is</code> on an empty input collection, but I accidentally clicked submit before flagging it for FHIRPath...can someone please correct that?</p>",
        "id": 180165566,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1573154431
    },
    {
        "content": "<p>fixed</p>",
        "id": 180170698,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1573157497
    }
]