[
    {
        "content": "<p>I'm considering adding a modulo check on the value of an identifier (to verify just some part of the value) has anyone done so before (I'm just trying to save some minutes of work here )</p>",
        "id": 260032913,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1635875400
    },
    {
        "content": "<p>as part of an invariant - in fhirpath that is</p>",
        "id": 260033001,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1635875420
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhirpath/#mod\">http://hl7.org/fhirpath/#mod</a> ? or am in misinterpreting your question?</p>",
        "id": 260048491,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1635882722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237342\">@ryan moehrke</span>  yes and no. Using the <code>mod</code> operation only does some of the trick. I have to run a modulo 11 check - like this one ... <a href=\"https://www.activebarcode.com/codes/checkdigit/modulo11.html\">https://www.activebarcode.com/codes/checkdigit/modulo11.html</a></p>",
        "id": 260053347,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1635884817
    },
    {
        "content": "<p>so cherrypicking digits - doing multiplication on weights and then do modulo</p>",
        "id": 260056410,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1635886412
    },
    {
        "content": "<p>so this should work (but will be very lengthy) for the PZN example you linked<br>\npath.select(($this.substring(0,1).toInteger()<em>2) + ($this.substring(1,1).toInteger()</em>3) + . . . ) mod 11 != 10</p>\n<p>you may be able to do something with an aggregate() but I don't think it actually saves much space since you'd have to combine() all of the digits which would take up more space than you'd save</p>",
        "id": 260059812,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1635888220
    },
    {
        "content": "<p>yep ... that was also my idea ... hence the question was just to hear if there was something I could borrow ...</p>",
        "id": 260060925,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1635888863
    },
    {
        "content": "<p>This profile has the luhn algorithm implemented in it, you might be able to do something similar... <br>\n<a href=\"http://build.fhir.org/ig/hl7au/au-fhir-base/StructureDefinition-au-hpii.html\">http://build.fhir.org/ig/hl7au/au-fhir-base/StructureDefinition-au-hpii.html</a></p>",
        "id": 260066721,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1635892080
    },
    {
        "content": "<p><code>(((select(value.substring(0,1).toInteger()).select(iif($this&amp;lt;5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this&amp;lt;5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this&amp;lt;5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this&amp;lt;5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this&amp;lt;5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger())+(select(value.substring(10,1).toInteger()).select(iif($this&amp;lt;5, $this*2, (($this*2)-9))))+(value.substring(11,1).toInteger())+(select(value.substring(12,1).toInteger()).select(iif($this&amp;lt;5, $this*2, (($this*2)-9))))+(value.substring(13,1).toInteger())+(select(value.substring(14,1).toInteger()).select(iif($this&amp;lt;5, $this*2, (($this*2)-9))))+(value.substring(15,1).toInteger()))mod 10=0)</code></p>\n<p>(pulled from the profile brian linked)<br>\nyea looks like you aren't going to be able to be succinct</p>",
        "id": 260070378,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1635894609
    },
    {
        "content": "<p>I haven't looked into it to see if there's a more efficient way to do it.</p>",
        "id": 260079103,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1635901830
    },
    {
        "content": "<p>And not sure how modulo11 and luhn compare, but at least thought worth sharing.</p>",
        "id": 260079238,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1635901958
    },
    {
        "content": "<p>I ended here which works: <a href=\"https://build.fhir.org/ig/hl7dk/dk-core/branches/1.1.0/StructureDefinition-dk-core-cvr-identifier.html#constraints\">https://build.fhir.org/ig/hl7dk/dk-core/branches/1.1.0/StructureDefinition-dk-core-cvr-identifier.html#constraints</a></p>",
        "id": 260303264,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1636045733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191427\">Jens Villadsen</span> has marked this topic as resolved.</p>",
        "id": 260303276,
        "sender_full_name": "Notification Bot",
        "timestamp": 1636045739
    },
    {
        "content": "<p>Nice!</p>",
        "id": 260338804,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1636062121
    },
    {
        "content": "<p>Mind if I use that elsewhere too?</p>",
        "id": 260338862,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1636062140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span>  be my guest</p>",
        "id": 260339423,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1636062528
    },
    {
        "content": "<p>If that string does not have 8 chars, the modulus 11 test doesn't execute,</p>",
        "id": 260340212,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1636063008
    },
    {
        "content": "<p>(but it is caught by the length invariant above it)</p>",
        "id": 260340229,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1636063029
    },
    {
        "content": "<p>wait why would that invariant not execute? if there aren't enough characters to process then the math logic will cascade down and result in an empty collection. does that not fail as an invariant output?</p>",
        "id": 260458010,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1636142824
    },
    {
        "content": "<p>As you describe not enough chars, so empty result which is true as an invariant, or if there are more chars they aren't checked, in which case that invariant itself is true.<br>\nIt is caught by the other, so net result is ok.</p>",
        "id": 260468316,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1636148583
    },
    {
        "content": "<p>I guess the two invariants could be collapsed into one, but that would be at the price of readability</p>",
        "id": 260503494,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1636191648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> FYI - here's one more - I've built a constraint enforcing the modulus 10 check for GLN's/GTIN's : <a href=\"https://build.fhir.org/ig/hl7dk/dk-core/branches/1.1.0/StructureDefinition-dk-core-gln-identifier.html\">https://build.fhir.org/ig/hl7dk/dk-core/branches/1.1.0/StructureDefinition-dk-core-gln-identifier.html</a></p>",
        "id": 260505759,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1636194825
    },
    {
        "content": "<p>This is the in progress update to the FhirPathTester with the new context field testing this expression, along with how I included the length in the expression and keeping it quite readable.<br>\n<a href=\"/user_uploads/10155/3WrN9N9i7EAvubhjGJrXAcIC/image.png\">image.png</a><br>\nHappy to take any feedback on the UI updates too</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/3WrN9N9i7EAvubhjGJrXAcIC/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/3WrN9N9i7EAvubhjGJrXAcIC/image.png\"></a></div>",
        "id": 260598217,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1636322878
    },
    {
        "content": "<p>an empty result is really a 'true' invariant? that's wild to me.. wonder what that usecase is</p>\n<p>your FhirPathTester looks really cool though, being able to (what looks like) give a location in addition to expression in order to better emulate the invariant logic sounds really handy, it seems a bit cramped for space but also looks rather zoomed in so I'm assuming you can resize to fit your monitor (and eyes)<br>\nquestion though, what's all in the output panel (lower left) it looks like there's a tree following the different output collections? that could be really interesting and if it is designed well enough could help new people debugging their expressions<br>\nalso also, is word wrap not on for your fhirpath expression input? obviously the one we're testing here is very verbose but if you can add (or already have) settings to switch between word wrap on/off (per panel if possible!) it could be really helpful</p>",
        "id": 260692154,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1636393326
    },
    {
        "content": "<p>Whitespace doesn't matter in the expressions, so I usually lay them out in a way that's easy to see rather than general wrapping. But a config setting could do.<br>\nAnd yes is really zoomed in for the shot, even has a slider for the font size to help with presenting <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 260745098,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1636422924
    },
    {
        "content": "<p>The empty result caters for expressions like <code>birthDate &lt; today()</code> if there is no birthday property, then that's still a pass.</p>",
        "id": 260745207,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1636423006
    },
    {
        "content": "<p>huh, i feel like that's just a lazy way of supporting something like <code>birthDate.exists() implies birthDate &lt; today()</code> but at least I know that it does work that way</p>",
        "id": 260822897,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1636475346
    },
    {
        "content": "<p>thinking about this - shouldn't naming systems in general have a field expressing a regex / fhirpath expression that could be applied to any identifiers comming from that naming system?</p>",
        "id": 263487496,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1638472721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 263487546,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1638472746
    },
    {
        "content": "<p>I don't know about \"should\", but it's certainly a reasonable extension if you wanted to submit a change request.</p>",
        "id": 263497559,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1638477621
    },
    {
        "content": "<p>That could be in a profile on that identifier type, just as we did with the Australian IHI and HPI types.</p>",
        "id": 263499397,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1638478695
    },
    {
        "content": "<p>Which is really what you've done here.</p>",
        "id": 263499437,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1638478718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> yeah - I was just wondering if there should be a more tight coupling to the Identifier datatype from the Naming System.</p>",
        "id": 263552194,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1638522770
    },
    {
        "content": "<p>So for things like snomed or loinc codes where there's a specific structure that the ids all have?</p>",
        "id": 263805720,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1638762102
    },
    {
        "content": "<p>Aren't all SNOMED codes of numeric value?</p>",
        "id": 263825546,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1638783094
    },
    {
        "content": "<p>Can there be leading zeros?</p>",
        "id": 263865017,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1638804058
    },
    {
        "content": "<p>sure - it would still be a numeric value</p>",
        "id": 263865108,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1638804093
    },
    {
        "content": "<p>Depends on your definition of 'numeric' :)</p>",
        "id": 263865246,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1638804133
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/PMOkv9NdiWT7iNHe3xl_Gq9L/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/PMOkv9NdiWT7iNHe3xl_Gq9L/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/PMOkv9NdiWT7iNHe3xl_Gq9L/image.png\"></a></div>",
        "id": 263865318,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1638804160
    }
]