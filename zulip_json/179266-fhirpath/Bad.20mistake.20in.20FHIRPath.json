[
    {
        "content": "<p>So I think we've made a bad mistake in the language, one that wastes a lot of my time.</p>",
        "id": 153977424,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532390247
    },
    {
        "content": "<p>\"\" means a element with an illegal name<br>\n'' means a string constant</p>",
        "id": 153977426,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532390271
    },
    {
        "content": "<p>this has wasted a lot of time of mine debugging something only to find out that I've used \" not ' and I didn't notice. And I'm not the only one</p>",
        "id": 153977428,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532390317
    },
    {
        "content": "<p>we should do something like [] (like SQL) around illegal names... and use \" ' interchangeably.</p>",
        "id": 153977430,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532390354
    },
    {
        "content": "<p>I expect that we'll have to decide it's too late to do anything about it..... but can we do anything to reduce the damage?</p>",
        "id": 153977431,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532390380
    },
    {
        "content": "<p>this is something like SQL and that always trips me up as well.  i'd love it if we didn't recreate that problem and let \" and ' be used for strings.</p>",
        "id": 153977435,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1532390549
    },
    {
        "content": "<p>Would it make sense to have the compiler/interpreter/engine/processor give a warning in the case that a string resolves to an identifier?</p>",
        "id": 153977478,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1532413413
    },
    {
        "content": "<p>well, maybe. a warning where?</p>",
        "id": 153977480,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532413758
    },
    {
        "content": "<p>but also, it's a warning if it doesn't.</p>",
        "id": 153978844,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532726284
    },
    {
        "content": "<p>I suppose it would go the same place that traces do, with some pointers back to context and/or source location. Not sure I follow \"it's a warning if it doesn't\"?</p>",
        "id": 153978972,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1532794406
    },
    {
        "content": "<p>the time to raise a warning is if \"xx\" doesn't match a known path, but has mapped to it anyway</p>",
        "id": 153978982,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532809374
    },
    {
        "content": "<p>or maybe the solution is that if the engine doesn't find \"xx\" it falls back to treating it as a string?</p>",
        "id": 153978983,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532809394
    },
    {
        "content": "<p>In my usage of it, I actually produce errors when the parse tree doesn't resolve identifiers with properties. Doesn't cater for all occasions, but usually the string doesn't exist as a property.</p>",
        "id": 153979056,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1532863891
    },
    {
        "content": "<p>But yes, is a source of potential issues.</p>",
        "id": 153979057,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1532863906
    },
    {
        "content": "<p>\"or maybe the solution is that if the engine doesn't find \"xx\" it falls back to treating it as a string?\" I think this isn't well-defined. It should be an error if an identifier doesn't resolve to a valid path, whether that happens at compile-time or run-time is up to the environment, but it's still an error condition. A string could never resolve to a valid path, it's a string literal, not an identifier, so this is just a warning to say \"you're using a string literal that resolved to a valid path in this context, did you mean to use an identifier instead?\".</p>",
        "id": 153979194,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1532895336
    },
    {
        "content": "<p>I just think that all these approaches are wrong: we're trying to use tooling to work around a language mistake. and the problem for me is, in most places people use FHIRPath, there's not any logical place to handle these things - it's a language that lives in the cracks in most places (not like CQL)</p>",
        "id": 153979197,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532895879
    },
    {
        "content": "<p>It's a fair point, but what is the solution? About to get on a plane to Tanzania, but I'll give it some more thought on the plane.</p>",
        "id": 153979199,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1532896115
    },
    {
        "content": "<p>Is changing FHIRPath to support both types of strings and introducing a new delimiter even an option at this point?</p>",
        "id": 153979200,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1532896182
    },
    {
        "content": "<p>If we're going to change it, now would be the time.<br>\n(I had to handle the quote change in my first version, and still migrating content)</p>",
        "id": 153979218,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1532906930
    },
    {
        "content": "<p>it feels too late, but I don't want to say that this is actually too late on this issue</p>",
        "id": 153979219,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532907092
    },
    {
        "content": "<p>enjoy Tanzania - thanks for going</p>",
        "id": 153979220,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1532907140
    },
    {
        "content": "<p>How about this: Change the identifier delimiter in FHIRPath to a backtick, so double-quotes wouldn't be allowed at all in FHIRPath. Then CQL can introduce a double-quoted identifier.</p>",
        "id": 153982353,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1533523985
    },
    {
        "content": "<p>That way it doesn't clash with any existing symbol-use in FHIRPath or CQL, FHIRPath gets a non-string-looking identifier delimiter, and CQL can still have double-quoted identifiers (which is really important in the CQL space).</p>",
        "id": 153982354,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1533524036
    },
    {
        "content": "<p>by 'identifier' you mean 'element name'?</p>",
        "id": 153982420,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1533533766
    },
    {
        "content": "<p>Element name is one possible resolution of an identifer, I mean identifier in the sense of the lexical element of the language. So everywhere we currently allow the use of quoted-identifiers would be changed to use back-ticks.</p>",
        "id": 153982543,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1533565084
    },
    {
        "content": "<p>Probably the biggest impact would be in the use of context variables where we regularly use the quoted-identifiers to allow characters like - in the identifiers. So what is now <code>%\"us-zip\"</code> would become <code>%`us-zip` </code></p>",
        "id": 153982544,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1533565173
    },
    {
        "content": "<p>And looking at this page in the current build: <a href=\"http://build.fhir.org/fhirpath.html\" target=\"_blank\" title=\"http://build.fhir.org/fhirpath.html\">http://build.fhir.org/fhirpath.html</a>, I can see the issue occurs at least three times on that page. So with this change, the use of double-quotes would always be an error in FHIRPath.</p>",
        "id": 153982545,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1533565372
    },
    {
        "content": "<p>Back-tick vs. forward tick are going to be confusing to some...</p>",
        "id": 153982559,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1533566472
    },
    {
        "content": "<p>Yes, but much less likely to be confused with string delimiters, especially in the web space where JSON is ubiquitous.</p>",
        "id": 153982578,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1533567124
    },
    {
        "content": "<p>Backticks are somewhat unusual, might also be a bit hard to discern depending on font/rendering. What about the earlier proposed SQL-style square brackets? e.g. [identifier]</p>",
        "id": 153982581,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1533567412
    },
    {
        "content": "<p>Square brackets would conflict with array indexers, as well as with the retrieve syntax in CQL.</p>",
        "id": 153982582,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1533567482
    },
    {
        "content": "<p>And it seems like they would also be confused with array syntax in JSON.</p>",
        "id": 153982583,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1533567530
    },
    {
        "content": "<p>Ah I see, thanks for explaining. Apparently the backtick character is not <em>that</em> unusual either:<br>\n<a href=\"https://en.wikipedia.org/wiki/Grave_accent#Use_in_programming\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Grave_accent#Use_in_programming\">https://en.wikipedia.org/wiki/Grave_accent#Use_in_programming</a></p>",
        "id": 153982588,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1533568300
    },
    {
        "content": "<p>Another option (not that I object to back-ticks) would be to use braces around the identifiers, like %{us-zip}, sort of like the example in 5.6.8 (replaceMatches) in <a href=\"http://hl7.org/fhirpath/\" target=\"_blank\" title=\"http://hl7.org/fhirpath/\">http://hl7.org/fhirpath/</a>, and also sort of like JavaScript template literal syntax (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\" title=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals</a>).  Braces make sense to me if the identifier is a variable name; I'm not sure about other cases.</p>",
        "id": 153982682,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1533576252
    },
    {
        "content": "<p>Braces would conflict with list selector syntax.</p>",
        "id": 153982683,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1533576932
    },
    {
        "content": "<blockquote>\n<p>Square brackets would conflict with array indexers</p>\n</blockquote>",
        "id": 153982699,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1533582257
    },
    {
        "content": "<p>why?</p>",
        "id": 153982700,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1533582259
    },
    {
        "content": "<p>In postgresql \" used to quote identifiers and ' for strings - postgresql implements SQL standard better than others.</p>",
        "id": 153982706,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1533582638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> </p>\n<blockquote>\n<p>why?</p>\n</blockquote>\n<p>....</p>",
        "id": 153987099,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534365693
    },
    {
        "content": "<p>You're right, square brackets wouldn't conflict with array indexers directly in FHIRPath, I misspoke. But they would conflict with the retrieve syntax in CQL.</p>",
        "id": 153987106,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534367309
    },
    {
        "content": "<p>We chose the double-quotes for identifiers and single-quotes for strings in CQL based on the fact that many (if not all) dialects of SQL support that.</p>",
        "id": 153987113,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534367436
    },
    {
        "content": "<p>Square brackets for identifiers is common in T-SQL flavors (Sybase, MSSQL, MySQL)</p>",
        "id": 153987114,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534367557
    },
    {
        "content": "<p>Actually, MySQL uses backticks (and has an option to turn on double-quotes).</p>",
        "id": 153987117,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534367705
    },
    {
        "content": "<p>so.... where does that leave us?</p>",
        "id": 153987491,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534415295
    },
    {
        "content": "<p>Well, it seems to me we have two options, 1) leave it, or 2) change the identifier delimiter in FHIRPath to a backtick. FHIR has far and away the most usage of FHIRPath, so what is the practical impact of the change? Are there any actual invariants that use double-quoted identifiers?</p>",
        "id": 153987540,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534423280
    },
    {
        "content": "<p>if there are in the spec, then they are in error</p>",
        "id": 153987779,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534451189
    },
    {
        "content": "<p>there might be a few in implementers structure maps.</p>",
        "id": 153987782,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534451218
    },
    {
        "content": "<p>So it seems like if we're going to do it, now is the only windows. Straw poll?</p>",
        "id": 153987799,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534452400
    },
    {
        "content": "<p>I think so.</p>",
        "id": 153987800,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534452449
    },
    {
        "content": "<p>@all Straw Poll: FHIRPath says that:</p>\n<blockquote>\n<p>Paths may use double quotes to include characters in path parts that would otherwise be interpreted as keywords or operators, e.g.: Message.\"PID-1\"</p>\n</blockquote>\n<p>This is confusing for implementers who often use \" for strings. We could fix this by changing from \" to `, and saying that strings can either be delimited by ' or \". </p>\n<p>Please indicate your response to this as yes or no by responding to this post with either <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span>  or <span class=\"emoji emoji-1f44e\" title=\"thumbs down\">:thumbs_down:</span>  (you can find that by scrolling further down the list of emojis)</p>",
        "id": 153987803,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534452661
    },
    {
        "content": "<p>(use emoji by clicking on the down arrow on the top right against the post, and choose \"Add emoji reaction\"</p>",
        "id": 153987804,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534452717
    },
    {
        "content": "<p>Friendly amendment, strings would only be delimited by a single-quote. Double-quotes would be invalid syntax.</p>",
        "id": 153987805,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534452725
    },
    {
        "content": "<p>you can vote for the amendment as well if you want. I'm... abstaining on the amendment (not sure....)</p>",
        "id": 153987806,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534452749
    },
    {
        "content": "<p>Allowing both single and double-quoted delimited strings in FHIRPath would represent a significant misalignment with CQL.</p>",
        "id": 153987807,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534452794
    },
    {
        "content": "<p>oh?</p>",
        "id": 153987808,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534452803
    },
    {
        "content": "<p>Yes, if FHIRPath allowed double-quoted strings, I could no longer differentiate them as identifiers in CQL sytnax.</p>",
        "id": 153987810,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534452824
    },
    {
        "content": "<p>ok. guess I'll vote for the amendment after all</p>",
        "id": 153987811,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534452853
    },
    {
        "content": "<p>Thank you :)</p>",
        "id": 153987812,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534452865
    },
    {
        "content": "<p>I don't suppose making the same change in CQL is something to be considered?  Then there would not be a misalignment if double-quotes were allowed on strings.</p>",
        "id": 153987852,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1534456470
    },
    {
        "content": "<p>not to be considered - a massive set of existing content that would be invalidated, including explicit ballot syntax rules</p>",
        "id": 153987855,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1534456639
    },
    {
        "content": "<p>Backtick and single quote are so close to the same , and with some editors the font makes it even worse.<br>\nBut I do support the removal of double quotes as valid syntax to force the issue.</p>",
        "id": 153987943,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534466087
    },
    {
        "content": "<p>We did come to the conclusion that using the square brackets wasn't a conflict with array scopers right?</p>",
        "id": 153987946,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534466135
    },
    {
        "content": "<p>That's correct, it's not in conflict with array indexers within FHIRPath itself, but it would conflict with Retrieve syntax in CQL (because brackets can start an expression in CQL).</p>",
        "id": 153987951,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1534466247
    },
    {
        "content": "<p>Thanks, a CQL clash, ok.</p>",
        "id": 153987952,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1534466277
    }
]