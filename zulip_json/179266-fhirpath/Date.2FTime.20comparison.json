[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> From, the FHIRPath spec (<a href=\"http://hl7.org/fhirpath/N1/#comparison\" title=\"http://hl7.org/fhirpath/N1/#comparison\">http://hl7.org/fhirpath/N1/#comparison</a>):</p>\n<p>\"If one value is specified to a different level of precision than the other, the result is empty ({ }) to indicate that the result of the comparison is unknown.\"</p>\n<p>and (<a href=\"http://hl7.org/fhirpath/N1/#datetime-equality\" title=\"http://hl7.org/fhirpath/N1/#datetime-equality\">http://hl7.org/fhirpath/N1/#datetime-equality</a>):</p>\n<p>\"If one input has a value for the precision and the other does not, the comparison stops and the result is empty ({ });\"</p>\n<p>I take this to mean that if we are comparing a fully-specified Date and a fully-specified DateTime as in the FHIRPath spec test <code>testDateTimeGreaterThanDate</code>:</p>\n<p><code>now() &gt; Patient.birthDate</code></p>\n<p>or the FHIRPath spec test <code>testNow1</code>:</p>\n<p><code>Patient.birthDate &lt; now()</code></p>\n<p>Then the result should be empty ({}) because a fully-specified Date will never have the same precision as a fully-specified DateTime. However, the test suite thinks that both of these examples should return true.</p>",
        "id": 196236174,
        "sender_full_name": "John Timm",
        "timestamp": 1588624333
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"192334\">@John Timm</span> , for date/time comparisons, the comparisons proceeds from years down, so if the comparison results in true or false at any specified precision, then that will be the result. Only in the case that comparison proceeds beyond the specified precision of one of the inputs will the result be null. Does that help?</p>",
        "id": 196329550,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1588695013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> thanks for the explanation. Do these examples adequately capture the algorithm?</p>\n<div class=\"codehilite\"><pre><span></span><code>1970-01-01 &lt; 2020-01-01\n1970 &lt; 2020 = true (stop) return true\n\n1970-01-01 &lt; 1970-02-01\n1970 &lt; 1970 = false\n01 &lt; 02 = true (stop) return true\n\n1970-01-01 &lt; 1970-01-01\n1970 &lt; 1970 = false\n01 &lt; 01 = false\n01 &lt; 01 = false (stop) return false\n\n\n1970-01-01 &lt; 1970-01-01T00:00:00Z\n1970 &lt; 1970 = false\n01 &lt; 01 = false\n01 &lt; 01 = false\nNULL &lt; 00 = not comparable, (stop) return empty\n</code></pre></div>",
        "id": 196338569,
        "sender_full_name": "John Timm",
        "timestamp": 1588699270
    },
    {
        "content": "<p>For what it's worth, I too read the spec the way you originally did John. It makes sense to me it should be the way that Bryn describes but it's easy to mis(?)-read the spec. Particularly, \"If one value is specified to a different level of precision than the other, the result is empty ({ }) to indicate that the result of the comparison is unknown.\"</p>",
        "id": 196340706,
        "sender_full_name": "Aaron Nash",
        "timestamp": 1588700320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252986\">@Aaron Nash</span> , yes, those examples accurately reflect the behavior. And also agree, it's worth a clarification, can I trouble you to submit that as a tracker as well? Would be good to include that example as a test case too.</p>",
        "id": 196699685,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1588800276
    },
    {
        "content": "<p><a href=\"https://jira.hl7.org/browse/FHIR-27055\" title=\"https://jira.hl7.org/browse/FHIR-27055\">https://jira.hl7.org/browse/FHIR-27055</a></p>",
        "id": 196818788,
        "sender_full_name": "Aaron Nash",
        "timestamp": 1588879391
    },
    {
        "content": "<p>I implemented the algorithm mentioned above, but I fail some tests in the <code>tests-fhir-r4.xml</code> file, e.g.</p>\n<p><code>Patient.birthDate != @1974-12-25T12:34:00-10:00</code>   (by the way, birthDate = <code>1974-12-25</code>).</p>\n<p>Clearly, based on the above discussion, this should return  <code>empty</code>?  The test expects an output of <code>true</code>.</p>",
        "id": 203843831,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1594738919
    },
    {
        "content": "<p>hmm where did you get this from?</p>",
        "id": 204192827,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1594983305
    },
    {
        "content": "<p>the current master for the test is here:</p>",
        "id": 204192832,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1594983310
    },
    {
        "content": "<p><a href=\"https://github.com/FHIR/fhir-test-cases/blob/master/r4/fhirpath/tests-fhir-r4.xml\">https://github.com/FHIR/fhir-test-cases/blob/master/r4/fhirpath/tests-fhir-r4.xml</a></p>",
        "id": 204192970,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1594983415
    },
    {
        "content": "<p>I got these from <a href=\"http://hl7.org/fhirpath/N1/tests.html\">http://hl7.org/fhirpath/N1/tests.html</a> and <a href=\"https://github.com/HL7/FHIRPath/blob/master/tests/r4/tests-fhir-r4.xml\">https://github.com/HL7/FHIRPath/blob/master/tests/r4/tests-fhir-r4.xml</a>.</p>",
        "id": 204405258,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595239734
    },
    {
        "content": "<p>Seems we have too many copies ;-)</p>",
        "id": 204405283,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595239760
    },
    {
        "content": "<p>I didn't find the test case you asked about in what I think is the master?</p>",
        "id": 204411527,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1595244911
    },
    {
        "content": "<p>That's right, it is corrected in the master branch of \"fhir-test-cases\".   It's just hard to know which is <em>the</em> master file, since the other two links I mentioned also seemed pretty authorative.</p>",
        "id": 204413358,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595246388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <span class=\"user-mention\" data-user-id=\"191676\">@Lee Surprenant</span> - it seems we have two forks of the test files, which have both been edited.</p>\n<p>These are the forks I am looking at:</p>\n<ul>\n<li><a href=\"https://github.com/HL7/FHIRPath/blob/master/tests/r4/tests-fhir-r4.xml\">https://github.com/HL7/FHIRPath/blob/master/tests/r4/tests-fhir-r4.xml</a>.    Let's call this \"Bryn's testfile\"</li>\n<li><a href=\"https://github.com/FHIR/fhir-test-cases/blob/master/r4/fhirpath/tests-fhir-r4.xml\">https://github.com/FHIR/fhir-test-cases/blob/master/r4/fhirpath/tests-fhir-r4.xml</a>. Let's call this \"Grahame's testfile\"</li>\n</ul>\n<p>\"Bryn's testfile\" Has been edited until end of 2019, Grahame's file has been updated in january 2020, so is newer.</p>\n<p>Bryn's file includes edits to make the test names unique (very much appreciated!), which are missing in Grahame's.  E.g.\"testLiteralDate\" has numerous repeats, and in Bryn's file these have been made unique. </p>\n<p>Grahame's file seem to have \"uncorrected\" some of the tests:</p>\n<p>E.g. in Bryn's file has this test:</p>\n<p><code>' 1 \\'wk\\''.toQuantity() = 1 'wk'</code>.  Which I think is correct, in Grahame's this has been changed to </p>\n<p><code>' 1 \\'wk\\''.toQuantity() = 1 week</code>. Which I think is wrong, since it is converting the definite time quantity <code>wk</code> from UCUM into the calender quantity from CQL.</p>\n<p>Grahame's file does have some corrections of incorrect tests in Bryn's though like this one:   </p>\n<p><code>name !~ name</code> (true)</p>\n<p>I do see Grahame has committed changes to Bryn's file too, so he probably knows about both files.</p>\n<p>Can we try to trace what is going on?</p>",
        "id": 204644128,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595408762
    },
    {
        "content": "<p>I certainly didn't 'uncorrect' anything.</p>",
        "id": 204647641,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1595411674
    },
    {
        "content": "<p>I do want the master to be the one in fhir-test-cases - it's in with all the other tests, and suitable for integration into build pipelines, and PRs and so forth</p>",
        "id": 204647695,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1595411722
    },
    {
        "content": "<p>I can't comment about the specific differences</p>",
        "id": 204647717,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1595411737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179266-fhirpath/topic/Date.2FTime.20comparison/near/204647641\">said</a>:</p>\n<blockquote>\n<p>I certainly didn't 'uncorrect' anything.</p>\n</blockquote>\n<p>Then we have to conclude that the files forked before  these changes were made, because I think the <em>original</em> tests had exactly the same test for week as yours has now, Grahame.</p>",
        "id": 204657158,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595419905
    },
    {
        "content": "<p>I do remember, that at first, '1 week = 1wk'.</p>",
        "id": 204657238,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595419937
    },
    {
        "content": "<p>This was changed in the normative edition.</p>",
        "id": 204657250,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595419945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179266-fhirpath/topic/Date.2FTime.20comparison/near/204647695\">said</a>:</p>\n<blockquote>\n<p>I do want the master to be the one in fhir-test-cases - it's in with all the other tests, and suitable for integration into build pipelines, and PRs and so forth</p>\n</blockquote>\n<p>Yes, I noticed, very useful.</p>",
        "id": 204657380,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595420044
    },
    {
        "content": "<p>But I can imagine the FhirPath spec has its set of tests too.  And indeed it has, if you navigate to the FhirPath spec, there is a menu item \"Tests\", which lead to yet another version of the file (which has been corrected by Lee).</p>",
        "id": 204657430,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595420089
    },
    {
        "content": "<p>the other problem I had with the tests there is that they are tied to a specific version of FHIR.</p>",
        "id": 204658312,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1595420661
    },
    {
        "content": "<p>we could correct the FHIRPath tests page to link to a list of known test suites</p>",
        "id": 204658346,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1595420694
    },
    {
        "content": "<p>yes! that's painful.</p>",
        "id": 204658349,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595420697
    },
    {
        "content": "<p>since the releases of FhirPath &amp; FHIR are out-of-sync.</p>",
        "id": 204658368,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595420722
    },
    {
        "content": "<p>yes. that's why I moved them to the test cases</p>",
        "id": 204658406,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1595420754
    },
    {
        "content": "<p>But they are under r4/.   you'd like to have them one directory up.</p>",
        "id": 204658496,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595420822
    },
    {
        "content": "<p>which is possible for the tests that don't need FHIR instance data.  There are actually quite a few of these.</p>",
        "id": 204658523,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595420847
    },
    {
        "content": "<p>One thing Marco and I have been considering is having a bit of data that has all the features you need - but is against a \"test\" model, so not against FHIR data.  Another option is to use FHIR instances that only use elements that don't differ over r3/r4/r5</p>",
        "id": 204658696,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1595420965
    },
    {
        "content": "<p>I'm open to either of them, though I don't know that it's a good investment to build a different object model that only exists to support the tests</p>",
        "id": 204658797,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1595421019
    },
    {
        "content": "<p>If FHIRPath is really an independent thing, I think it should have its own tests which have as little reference to FHIR as possible.</p>",
        "id": 204710865,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1595445787
    },
    {
        "content": "<p>Or only reference Normative content in R4?</p>",
        "id": 204715871,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1595448394
    },
    {
        "content": "<p>I think that's where most of there are anyway</p>",
        "id": 204715899,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1595448409
    },
    {
        "content": "<p>in theory it could have it's own tests but since it doesn't define any content, that's a bit difficult</p>",
        "id": 204715963,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1595448452
    },
    {
        "content": "<p>Right, and there aren't any \"selector\" constructs, so you really _can't_ test a lot of FHIRPath without picking some content model.</p>",
        "id": 204716115,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1595448516
    },
    {
        "content": "<p>And R4 normative is a good a candidate as any (especially given the tests are already written against it:))</p>",
        "id": 204716162,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1595448543
    },
    {
        "content": "<p>I agree the file at <a href=\"https://github.com/FHIR/fhir-test-cases/blob/master/r4/fhirpath/tests-fhir-r4.xml\">https://github.com/FHIR/fhir-test-cases/blob/master/r4/fhirpath/tests-fhir-r4.xml</a> should be the source of truth, I don't think I knew about that when I was making the changes as part of the normative publication track though.</p>",
        "id": 204716232,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1595448578
    },
    {
        "content": "<p>So that's my bad, I'm happy to reconcile those two and submit the updated cases as a PR there and an Errata report to the spec</p>",
        "id": 204716329,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1595448613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191359\">Bryn Rhodes</span> <a href=\"#narrow/stream/179266-fhirpath/topic/Date.2FTime.20comparison/near/204716115\">said</a>:</p>\n<blockquote>\n<p>Right, and there aren't any \"selector\" constructs, so you really _can't_ test a lot of FHIRPath without picking some content model.</p>\n</blockquote>\n<p>fhirpath.js got pretty far without adding a FHIR context model.  I agree there are some things that need a model, but something small could probably be created to test that.</p>",
        "id": 204716372,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1595448631
    },
    {
        "content": "<p>Do you have those content model independent test cases expressed in the FHIRPath test case format?</p>",
        "id": 204716451,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1595448674
    },
    {
        "content": "<p>fhirpath.js (in addition to its own tests) uses tests-fhir-r4.xml and four resource files (observation-example.xml, etc.), but turns them into a yaml format we use for the other tests we wrote.  In that yaml format, we have disabled certain tests and groups of tests for things we do not yet support.  So, it would not be trivial to pull out which ones need a model and which ones don't, but doable.  Few of the fhirpath.js tests are using a model (though that is maybe not surprising given that support for models was added late) - and it looks like none of the non-disabled tests from test-fhir-r4.xml are using a model (though they are using the four test resource files).</p>",
        "id": 204718929,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1595449861
    },
    {
        "content": "<p>So what makes the most sense to me then is to continue on the path of reconciling the fhir-test-cases and FHIRPath published test case files.</p>",
        "id": 204719748,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1595450330
    },
    {
        "content": "<p>Okay, I've reconciled the differing test files. Tests that will most likely need to be looked at:<br>\n4) testDivide5 was changed from <code>1.2 / 1.8 = 0.67</code> to <code>1.2 / 1.8 = 0.66666667</code> per the resolution to this tracker: <a href=\"https://jira.hl7.org/browse/FHIR-19356\">https://jira.hl7.org/browse/FHIR-19356</a></p>\n<p>5) testQuantityLiteralWeekToString was changed from <code>1 week.toString()</code> resulting in <code>1 '{week}'</code> (in the FHIRPath version of the tests) to <code>1 week.toString()</code> resulting in <code>1 'week'</code>  per the resolution to this tracker: <a href=\"https://jira.hl7.org/browse/FHIR-21606\">https://jira.hl7.org/browse/FHIR-21606</a></p>\n<p>See the resolution to this tracker for more complete details: <a href=\"https://jira.hl7.org/browse/FHIR-28242\">https://jira.hl7.org/browse/FHIR-28242</a></p>",
        "id": 206662320,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1597211922
    },
    {
        "content": "<p>I've submitted a PR against fhir-test-cases with the updated test cases: <a href=\"https://github.com/FHIR/fhir-test-cases/pull/67\">https://github.com/FHIR/fhir-test-cases/pull/67</a></p>",
        "id": 206662328,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1597211943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> , <span class=\"user-mention\" data-user-id=\"191676\">@Lee Surprenant</span>, <span class=\"user-mention\" data-user-id=\"195344\">@Paul Lynch</span> , <span class=\"user-mention\" data-user-id=\"191367\">@Brian Postlethwaite</span> , <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ,  when you get a chance, please verify these changes, I tried to commit them in a way that would make very clear what was applied, the first commit just updates all the names, the second commit reconciles differences between the tests. And the summary of <a href=\"http://jira.hl7.org/browse/FHIR-28242\">J#28242</a> lists everything that changed. I also added a note to the file to make clear that the source of truth is now the r5 tests in fhir-test-cases.</p>",
        "id": 206662478,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1597212136
    },
    {
        "content": "<p>1.2 / 1.8 = 0.66666667 assumes a step size of 10^-8.  <a href=\"http://hl7.org/fhirpath/#decimal\">4.1.4. Decimal</a> says, \"Implementations can provide support for larger decimals and higher precision, but must provide at least the range and precision defined here.\"  If some implementation supports 10^-9, then 1.2/1.8  would be 0.666666667 (one additional \"6\").  Does the = operator then need to change to say that comparison is made with the operands rounded to 8 places after the decimal?</p>",
        "id": 206685925,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1597234421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> finally had a look at this and left a suggestion to fix an issue on the PR</p>",
        "id": 207961980,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1598361929
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"195344\">@Paul Lynch</span> and <span class=\"user-mention\" data-user-id=\"191676\">@Lee Surprenant</span> . For the decimal rounding issue, I wonder if we should introduce a .round() into the test case, rather than changing the definition of equal?</p>",
        "id": 208020169,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1598387978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> I'm working on this, and I have plenty of failing tests. The first issue I have is with this test</p>",
        "id": 208051978,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598416084
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;testDateNotEqualTimezoneOffsetBefore&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression&gt;</span>Patient.birthDate != @1974-12-25T12:34:00-10:00<span class=\"nt\">&lt;/expression&gt;&lt;output</span> <span class=\"na\">type=</span><span class=\"s\">&quot;boolean&quot;</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/output&gt;&lt;/test&gt;</span>\n</code></pre></div>",
        "id": 208051983,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598416106
    },
    {
        "content": "<p>the relevant text in the specification is:</p>\n<blockquote>\n<p>DateTime: must be exactly the same, respecting the timezone offset (though +00:00 = -00:00 = Z)</p>\n</blockquote>",
        "id": 208051989,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598416128
    },
    {
        "content": "<p>but your test presumes something not stated: that if the DateTimes are not exactly the same, then the comparison is <code>false</code>, where as we have said in the past that it should only be <code>false</code> if you are sure that the dates are not the same (e.g. different precision)</p>",
        "id": 208052052,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598416225
    },
    {
        "content": "<p>Agreed if the precisions are different that should be empty</p>",
        "id": 208052120,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1598416375
    },
    {
        "content": "<p>right. because that's what this test says:</p>",
        "id": 208052216,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598416535
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>        <span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;testDateNotEqual&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression&gt;</span>Patient.birthDate != @1974-12-25T12:34:00<span class=\"nt\">&lt;/expression&gt;&lt;/test&gt;</span>\n</code></pre></div>",
        "id": 208052217,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598416539
    },
    {
        "content": "<p>so I'm going to fix the test \"testDateNotEqualTimezoneOffsetBefore\"</p>",
        "id": 208052259,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598416564
    },
    {
        "content": "<p>I don't see how this test can pass:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;testStringQuantityDayLiteralToQuantity&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression&gt;</span>&#39;1 day&#39;.toQuantity() = 1 &#39;{day}&#39;<span class=\"nt\">&lt;/expression&gt;&lt;output</span> <span class=\"na\">type=</span><span class=\"s\">&quot;boolean&quot;</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/output&gt;&lt;/test&gt;</span>\n</code></pre></div>",
        "id": 208052701,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598417373
    },
    {
        "content": "<p>This should pass:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;testStringQuantityDayLiteralToQuantity&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression&gt;</span>&#39;1 day&#39;.toQuantity() = 1 &#39;d&#39;<span class=\"nt\">&lt;/expression&gt;&lt;output</span> <span class=\"na\">type=</span><span class=\"s\">&quot;boolean&quot;</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/output&gt;&lt;/test&gt;</span>\n</code></pre></div>",
        "id": 208052780,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598417499
    },
    {
        "content": "<p>And I don't see how an implementation can pass both of these tests:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;testQuantityLiteralWkToString&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression&gt;</span>1 &#39;wk&#39;.toString()<span class=\"nt\">&lt;/expression&gt;&lt;output</span> <span class=\"na\">type=</span><span class=\"s\">&quot;string&quot;</span><span class=\"nt\">&gt;</span>1 &#39;wk&#39;<span class=\"nt\">&lt;/output&gt;&lt;/test&gt;</span>\n        <span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;testQuantityLiteralWeekToString&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression&gt;</span>1 week.toString()<span class=\"nt\">&lt;/expression&gt;&lt;output</span> <span class=\"na\">type=</span><span class=\"s\">&quot;string&quot;</span><span class=\"nt\">&gt;</span>1 &#39;week&#39;<span class=\"nt\">&lt;/output&gt;&lt;/test&gt;</span>\n</code></pre></div>",
        "id": 208052838,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598417631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> who can release a new version of the ucum code?</p>",
        "id": 208054273,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598419947
    },
    {
        "content": "<p>because I made a PR for you approve and release <a href=\"https://github.com/FHIR/Ucum-java/pull/16\">https://github.com/FHIR/Ucum-java/pull/16</a></p>",
        "id": 208054360,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598420115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> I don't understand this test:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;testEquality7&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression&gt;</span>(1 | 1) = (1 | 2 | {})<span class=\"nt\">&lt;/expression&gt;&lt;/test&gt;</span>\n</code></pre></div>",
        "id": 208055377,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598421533
    },
    {
        "content": "<p>why would this have no outcome?</p>",
        "id": 208055388,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598421554
    },
    {
        "content": "<p>from the spec:</p>\n<blockquote>\n<p>In other words, this function returns the distinct list of elements from both inputs. For example, consider two lists of integers A: 1, 1, 2, 3 and B: 2, 3:</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code>A union B // 1, 2, 3\nA union { } // 1, 2, 3\n</code></pre></div>",
        "id": 208055393,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598421567
    },
    {
        "content": "<p>(1 | 1) = {1}<br>\n(1 | 2 | {} ) = {1 ,2}</p>",
        "id": 208055403,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598421601
    },
    {
        "content": "<p>and then equality:</p>",
        "id": 208055450,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598421609
    },
    {
        "content": "<blockquote>\n<p>If both operands are collections with multiple items:<br>\nEach item must be equal<br>\nComparison is order dependent</p>\n</blockquote>",
        "id": 208055459,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598421625
    },
    {
        "content": "<p>so the comparison is false.</p>",
        "id": 208055464,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598421632
    },
    {
        "content": "<p>also, I don't understand the logic here: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;testNEquality23&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression&gt;</span>1.2 / 1.8 != 0.67<span class=\"nt\">&lt;/expression&gt;&lt;output</span> <span class=\"na\">type=</span><span class=\"s\">&quot;boolean&quot;</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/output&gt;&lt;/test&gt;</span>\n</code></pre></div>\n\n\n<p>what do you think would be true, and why according  to the spec?</p>",
        "id": 208058796,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598425583
    },
    {
        "content": "<p>Another one: This cannot be true:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;testDateTimeGreaterThanDate&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression&gt;</span>now() <span class=\"ni\">&amp;gt;</span> Patient.birthDate<span class=\"nt\">&lt;/expression&gt;&lt;output</span> <span class=\"na\">type=</span><span class=\"s\">&quot;boolean&quot;</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/output&gt;&lt;/test&gt;</span>\n</code></pre></div>\n\n\n<p>I'm changing it to </p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;testDateTimeGreaterThanDate&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression&gt;</span>now() <span class=\"ni\">&amp;gt;</span> Patient.birthDate<span class=\"nt\">&lt;/expression&gt;&lt;/test&gt;</span>\n        <span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;testDateGreaterThanDate&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression&gt;</span>today() <span class=\"ni\">&amp;gt;</span> Patient.birthDate<span class=\"nt\">&lt;/expression&gt;&lt;output</span> <span class=\"na\">type=</span><span class=\"s\">&quot;boolean&quot;</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/output&gt;&lt;/test&gt;</span>\n</code></pre></div>",
        "id": 208071849,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598435655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , working on a 1.0.3 Ucum-java release</p>",
        "id": 208097968,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1598451916
    },
    {
        "content": "<p>Agree on testEquality7, that should be false, not empty.</p>",
        "id": 208098105,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1598451972
    },
    {
        "content": "<p>On testNEquality23, 1.2 / 1.8 should be 0.66666667 (to however many decimal places the implementation supports, but at least 8), so it would not compare equal to 0.67.</p>",
        "id": 208098290,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1598452060
    },
    {
        "content": "<p>On testDateTimeGreaterThanDate, <code>now() &gt; Patient.birthDate</code> would be true, so long as the value of Patient.birthDate was at most yesterday, because the comparison proceeds from years down.</p>",
        "id": 208098809,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1598452262
    },
    {
        "content": "<p>New Ucum release 1.0.3 available: <a href=\"https://github.com/FHIR/Ucum-java/releases/tag/v1.0.3\">https://github.com/FHIR/Ucum-java/releases/tag/v1.0.3</a></p>",
        "id": 208106694,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1598455385
    },
    {
        "content": "<p>thanks for the new UCUM release</p>",
        "id": 208138931,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598471134
    },
    {
        "content": "<blockquote>\n<p>now() &gt; Patient.birthDate would be true, so long as the value of Patient.birthDate was at most yesterday, because the comparison proceeds from years down</p>\n</blockquote>\n<p>I do not see this written in the spec. What I see is 'strictly greater than'</p>",
        "id": 208139155,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598471231
    },
    {
        "content": "<blockquote>\n<p>1.2 / 1.8 should be 0.66666667 </p>\n</blockquote>\n<p>no. 1.2000000/1.8000000 should be 0.66666667; 1.2/1.8 should be 0.67.</p>",
        "id": 208139231,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598471278
    },
    {
        "content": "<p>which is what the reference implementation does</p>",
        "id": 208139301,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598471295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179266-fhirpath/topic/Date.2FTime.20comparison/near/208139231\">said</a>:</p>\n<blockquote>\n<p>1.2/1.8 should be 0.67.</p>\n</blockquote>\n<p>I don't see anything about rounding or precision stated in the <a href=\"http://hl7.org/fhirpath/#math-2\">Math</a> section.</p>",
        "id": 208156537,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1598480505
    },
    {
        "content": "<p>no. I don't think that's from the spec</p>",
        "id": 208156835,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598480673
    },
    {
        "content": "<p>If you are reporting a result, I agree that the final number should have the same number of significant digits.  The trouble is that I don't think FHIRPath knows whether the result is 'final' or intermediate in some larger calculation.</p>",
        "id": 208158285,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1598481595
    },
    {
        "content": "<p>no but my implementation does</p>",
        "id": 208158569,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598481809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> </p>\n<p>Please check the changes at <a href=\"https://github.com/FHIR/fhir-test-cases/pull/70\">https://github.com/FHIR/fhir-test-cases/pull/70</a></p>",
        "id": 208171195,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598493163
    },
    {
        "content": "<p>There's one set of changes in there that are driven by a limitation I can't deal with right now: the hapi fhir core library can't deal with a time that has just hours. In fact, that's really a bad thing for FHIRPath to require dealing with. But for now I've worked around it by changing the tests. The others are genuine issues in the tests</p>",
        "id": 208171263,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1598493243
    },
    {
        "content": "<p>Agree with the changes, except for:</p>\n<ul>\n<li><code>testStringQuantityDayLiteralToQuantity</code>, that should be empty</li>\n<li><code>testQuantityLiteralWeekToString</code>, why would that convert the calendar unit to a UCUM unit?</li>\n<li><code>testNEquality22</code>, <code>testNEquality23</code>, and <code>testDivide5</code>, we didn't want to prescribe support for maintaining significant digits, so can we add a <code>.round()</code> to these tests?</li>\n</ul>",
        "id": 208870573,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1599072842
    },
    {
        "content": "<p><a href=\"https://github.com/FHIR/fhir-test-cases/pull/71\">https://github.com/FHIR/fhir-test-cases/pull/71</a></p>",
        "id": 208874741,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1599074637
    },
    {
        "content": "<p>Left comment on pull request.</p>",
        "id": 208878147,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1599076209
    },
    {
        "content": "<p>My tests are failing on <code>encode</code>, <code>decode</code>, <code>escape</code>, <code>unescape</code> and <code>trim</code>.  I have looked at the normative version of FhirPath and the latest fhirpath addendum to FHIR, but cannot find the definitions of these functions . Where should I look?</p>",
        "id": 209291139,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599482352
    },
    {
        "content": "<p>All these new encode/decode tests (the group testEncodeDecode) do not carry a name per test, whereas the others do.  Can we add names to them?</p>",
        "id": 209291291,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599482448
    },
    {
        "content": "<p>We agreed that this test is wrong:   \"testIntegerBooleanNotTrue\",</p>",
        "id": 209291889,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599482908
    },
    {
        "content": "<p>And I don't think these are correct: \"testDateNotEqualTimezoneOffsetBefore\", \"testDateNotEqualTimezoneOffsetAfter\", \"testDateNotEqualUTC\"</p>",
        "id": 209291956,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599482970
    },
    {
        "content": "<p>This is from my notes, I'll have to check on why.  I see a reference to <a href=\"https://jira.hl7.org/browse/FHIR-27033\">https://jira.hl7.org/browse/FHIR-27033</a> and <a href=\"login/#narrow/stream/179266-fhirpath/topic/Singleton.20Evaluation.20of.20Collections\">https://chat.fhir.org/login/#narrow/stream/179266-fhirpath/topic/Singleton.20Evaluation.20of.20Collections</a> in reference to \"testIntegerBooleanNotTrue\".</p>",
        "id": 209292314,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599483233
    },
    {
        "content": "<p>The \"testDateNotEqual\" etc:</p>\n<p>One example is this:</p>\n<div class=\"codehilite\"><pre><span></span><code>   &lt;test name=&quot;testDateNotEqual&quot; inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;Patient.birthDate != @1974-12-25T12:34:00&lt;/expression&gt;\n    &lt;/test&gt;\n</code></pre></div>\n\n\n<p>For reference, <code>Patient.birthDate</code> is:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;birthDate value=&quot;1974-12-25&quot;&gt;\n        &lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/patient-birthTime&quot;&gt;\n            &lt;valueDateTime value=&quot;1974-12-25T14:35:45-05:00&quot;/&gt;\n        &lt;/extension&gt;\n    &lt;/birthDate&gt;\n</code></pre></div>\n\n\n<p>The datetimes have the same precision, but they are clearly not the same, hence I think this should result in true.</p>",
        "id": 209292527,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599483375
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209292643,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599483465
    },
    {
        "content": "<p>Or is this a timezone issue?</p>",
        "id": 209292768,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599483534
    },
    {
        "content": "<p>no - this is an extension issue. There is no instruction to the FHIRPath engine to pick up the birth time extension</p>",
        "id": 209295022,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599484965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span>  and I added encode, etc to meet some use cases we had. I believe Bryn created a task to add them to a future version of FHIRPath</p>",
        "id": 209295103,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599485025
    },
    {
        "content": "<p>I think we should have labelled those tests with a version indicator</p>",
        "id": 209295160,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599485044
    },
    {
        "content": "<p>Can I assume the hex encoding/decoding turns the string into hex via UTF8?</p>",
        "id": 209302493,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599489548
    },
    {
        "content": "<p>Actually, the base64 is also using UTF8.</p>",
        "id": 209304319,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599490611
    },
    {
        "content": "<p>There's variance on how to deal with the padding chars in urlbase64.  I propose stripping '=', but other variants are replacing '=' by '.'</p>",
        "id": 209310055,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599494601
    },
    {
        "content": "<p>(and the current test uses the padding char '=', but that then needs to be escaped, which is really defeating the point of urlbase64)</p>",
        "id": 209310134,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599494649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> ?</p>",
        "id": 209323807,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599507941
    },
    {
        "content": "<p>Documentation is on a branch here: <a href=\"http://build.fhir.org/ig/HL7/FHIRPath/branches/feature-27757-additional-string-functions/\">http://build.fhir.org/ig/HL7/FHIRPath/branches/feature-27757-additional-string-functions/</a></p>",
        "id": 209323873,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1599507998
    },
    {
        "content": "<p>Working through this feedback now.</p>",
        "id": 209323876,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1599508007
    },
    {
        "content": "<p>I've added names to the tests and a version attribute to the schema and set it for the new tests (to 2.1.0).</p>",
        "id": 209323887,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1599508026
    },
    {
        "content": "<p>Now working through the reported discrepancies</p>",
        "id": 209323895,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1599508045
    },
    {
        "content": "<p>Agreed on <code>testIntegerBooleanNotTrue</code>, that should result in an error, since a boolean-valued function is being invoked on a non-boolean-valued argument. Same with <code>testIntegerBooleanNotFalse</code>, so I've added <code>invalid=\"semantic\"</code> to those tests.</p>",
        "id": 209324217,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1599508445
    },
    {
        "content": "<p>I'll take a look at what is exactly the matter with those date tests, but I think:</p>\n<div class=\"codehilite\"><pre><span></span><code> &lt;test name=&quot;testDateNotEqualTimezoneOffsetBefore&quot; inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;Patient.birthDate != @1974-12-25T12:34:00-10:00&lt;/expression&gt;\n      &lt;output type=&quot;boolean&quot;&gt;true&lt;/output&gt;\n    &lt;/test&gt;\n    &lt;test name=&quot;testDateNotEqualTimezoneOffsetAfter&quot; inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;Patient.birthDate != @1974-12-25T12:34:00+10:00&lt;/expression&gt;\n      &lt;output type=&quot;boolean&quot;&gt;true&lt;/output&gt;\n    &lt;/test&gt;\n    &lt;test name=&quot;testDateNotEqualUTC&quot; inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;Patient.birthDate != @1974-12-25T12:34:00Z&lt;/expression&gt;\n      &lt;output type=&quot;boolean&quot;&gt;true&lt;/output&gt;\n    &lt;/test&gt;\n</code></pre></div>\n\n\n<p>where the Patient.birthDate has precision upto the date should all have an empty result.</p>",
        "id": 209324531,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599508867
    },
    {
        "content": "<p>no because some of them you know that it can't the same date</p>",
        "id": 209324549,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599508895
    },
    {
        "content": "<p>&lt;birthDate value=\"1974-12-25\"&gt;.   All of these dates are on the 25th, right?   (it's easy to make a mistake here, so just double checking ;-))</p>",
        "id": 209324732,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599509106
    },
    {
        "content": "<p>I think the tests are expecting that the birthTime is being considered, so that's the first thing to get settled</p>",
        "id": 209325618,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1599510291
    },
    {
        "content": "<p>I think since what we're testing is datetime equality, rather than extension access, I should just put the literal date in the test, rather than reading it from patient.</p>",
        "id": 209326423,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1599511247
    },
    {
        "content": "<p>good idea.  That's actually useful for other tests too.  Once you've determined that access to instance data by path (and some specific operations) work, we don't have to refer to the model anymore -&gt; makes the tests more reusable across versions....</p>",
        "id": 209326857,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599511767
    },
    {
        "content": "<p>I'm passing the tests and not considering birthTime.</p>",
        "id": 209328185,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599513509
    },
    {
        "content": "<p>Changing these tests is tiresome.. I'll be spending several hours in my date time comparison stuff. I really thought these tests align with the spec now</p>",
        "id": 209328199,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599513540
    },
    {
        "content": "<p>Let's figure out why you pass, and I fail first. I could be wrong too.  The reason I fail the test is that the precision is different, when this starts to matter: the dates are exactly the same, so you cannot conclude they are unequal, unless you have more precision. Since there is no more precision available in one of the two operands, I return empty.</p>",
        "id": 209351221,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599548383
    },
    {
        "content": "<p>I did this based on this piece of text: </p>\n<blockquote>\n<p>If the values are the same, comparison proceeds to the next precision; if the values are different, the comparison stops and the result is false. If one input has a value for the precision and the other does not, the comparison stops and the result is empty ({ });</p>\n</blockquote>",
        "id": 209351368,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599548493
    },
    {
        "content": "<blockquote>\n<p>Documentation is on a branch here: <a href=\"http://build.fhir.org/ig/HL7/FHIRPath/branches/feature-27757-additional-string-functions/\">http://build.fhir.org/ig/HL7/FHIRPath/branches/feature-27757-additional-string-functions/</a></p>\n</blockquote>\n<p>Should I provide feedback on this text here or as tracker items?</p>",
        "id": 209354897,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599551255
    },
    {
        "content": "<p>I think the dates are different before the precision differs</p>",
        "id": 209359466,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599554495
    },
    {
        "content": "<p>Then you are right, but I just see them all being \"1974-12-25\"</p>",
        "id": 209360568,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599555263
    },
    {
        "content": "<p>which ones exactly are we talking about?</p>",
        "id": 209368076,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599560269
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> &lt;test name=&quot;testDateNotEqualTimezoneOffsetBefore&quot; inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;Patient.birthDate != @1974-12-25T12:34:00-10:00&lt;/expression&gt;\n      &lt;output type=&quot;boolean&quot;&gt;true&lt;/output&gt;\n    &lt;/test&gt;\n    &lt;test name=&quot;testDateNotEqualTimezoneOffsetAfter&quot; inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;Patient.birthDate != @1974-12-25T12:34:00+10:00&lt;/expression&gt;\n      &lt;output type=&quot;boolean&quot;&gt;true&lt;/output&gt;\n    &lt;/test&gt;\n    &lt;test name=&quot;testDateNotEqualUTC&quot; inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;Patient.birthDate != @1974-12-25T12:34:00Z&lt;/expression&gt;\n      &lt;output type=&quot;boolean&quot;&gt;true&lt;/output&gt;\n    &lt;/test&gt;\n</code></pre></div>",
        "id": 209370093,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599561910
    },
    {
        "content": "<p><code>&lt;birthDate value=\"1974-12-25\"&gt;</code></p>",
        "id": 209370118,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599561946
    },
    {
        "content": "<p>For the encoding of human time units, it seems \"1 week\" = 1 'week'.  But there is also a test:</p>\n<div class=\"codehilite\"><pre><span></span><code>    &lt;test name=&quot;testStringQuantityDayLiteralToQuantity&quot; inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;&#39;1 day&#39;.toQuantity() = 1 &#39;{day}&#39;&lt;/expression&gt;\n      &lt;output type=&quot;boolean&quot;&gt;true&lt;/output&gt;\n    &lt;/test&gt;\n</code></pre></div>\n\n\n<p>where \"1 day\" = 1 '{day}'.  I am assuming now that should be <code>1 'day'</code>?</p>",
        "id": 209373107,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599564350
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209373221,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599564408
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209373278,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599564449
    },
    {
        "content": "<p>Actually based on this (<a href=\"#narrow/stream/179266-fhirpath/topic/Date.2FTime.20comparison.20vs.20equality\">https://chat.fhir.org/#narrow/stream/179266-fhirpath/topic/Date.2FTime.20comparison.20vs.20equality</a>) discussion, it should now be '1 day'.toQuantity() = 1 'd'.</p>",
        "id": 209373876,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599564850
    },
    {
        "content": "<p>and even '1 week'.toQuantity() = 1 'wk'.</p>",
        "id": 209373901,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599564879
    },
    {
        "content": "<p>So, I did that now. To be complete, this is what I have done:</p>\n<p><a href=\"/user_uploads/10155/uUIc-aqq30_Rxl7ebJhJTzDi/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/uUIc-aqq30_Rxl7ebJhJTzDi/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/uUIc-aqq30_Rxl7ebJhJTzDi/image.png\"></a></div>",
        "id": 209379096,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599568316
    },
    {
        "content": "<p>Is this correct?</p>\n<div class=\"codehilite\"><pre><span></span><code>  &lt;test name=&quot;testRound2&quot; inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;3.14159.round(3) = 2&lt;/expression&gt;\n      &lt;output type=&quot;boolean&quot;&gt;true&lt;/output&gt;\n    &lt;/test&gt;\n</code></pre></div>",
        "id": 209379239,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599568421
    },
    {
        "content": "<blockquote>\n<p>Agreed on testIntegerBooleanNotTrue, that should result in an error, since a boolean-valued function is being invoked on a non-boolean-valued argument.</p>\n</blockquote>\n<p>So, for <code>not()</code>,  we do <em>not</em> do singleton evaluation of the collection?</p>\n<p>I see the spec says:</p>\n<blockquote>\n<p>In general, when a collection is passed as an argument to a function or operator that expects a single item as input, the collection is implicitly converted to a singleton as follows:</p>\n</blockquote>\n<p>Is the <code>(0)</code> passed here \"as an argument to the function\", or not (because it is the focus, not the argument) ?</p>",
        "id": 209386036,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599571875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> , these new tests don't seem to align with your answers on Singleton Evaluation:</p>\n<div class=\"codehilite\"><pre><span></span><code> &lt;group&gt;\n    name=&quot;from-Zulip&quot;&gt;\n    &lt;test inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;(true and &#39;foo&#39;).empty()&lt;/expression&gt;\n      &lt;output type=&quot;boolean&quot;&gt;true&lt;/output&gt;\n    &lt;/test&gt;\n    &lt;test inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;(true | &#39;foo&#39;).allTrue()&lt;/expression&gt;\n      &lt;output type=&quot;boolean&quot;&gt;false&lt;/output&gt;\n    &lt;/test&gt;\n  &lt;/group&gt;\n</code></pre></div>\n\n\n<p>(true and 'foo') is 'true'.  So (true and  'foo').empty() is <em>false</em>.</p>\n<p>The second one, you said, was an error. That would be a comparable discussion to <code>(0).not()</code>, so I'll wait for that to settle ;-)</p>",
        "id": 209386499,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599572101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191328\">Ewout Kramer</span> <a href=\"#narrow/stream/179266-fhirpath/topic/Date.2FTime.20comparison/near/209370093\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code> &lt;test name=&quot;testDateNotEqualTimezoneOffsetBefore&quot; inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;Patient.birthDate != @1974-12-25T12:34:00-10:00&lt;/expression&gt;\n      &lt;output type=&quot;boolean&quot;&gt;true&lt;/output&gt;\n    &lt;/test&gt;\n    &lt;test name=&quot;testDateNotEqualTimezoneOffsetAfter&quot; inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;Patient.birthDate != @1974-12-25T12:34:00+10:00&lt;/expression&gt;\n      &lt;output type=&quot;boolean&quot;&gt;true&lt;/output&gt;\n    &lt;/test&gt;\n    &lt;test name=&quot;testDateNotEqualUTC&quot; inputfile=&quot;patient-example.xml&quot;&gt;\n      &lt;expression&gt;Patient.birthDate != @1974-12-25T12:34:00Z&lt;/expression&gt;\n      &lt;output type=&quot;boolean&quot;&gt;true&lt;/output&gt;\n    &lt;/test&gt;\n</code></pre></div>\n\n\n</blockquote>\n<p>FWIW our impl seems to match Ewouts.  The dates are the same and so it goes to time and only one has a time so they are not comparable =&gt; returns empty and not true.<br>\nIf the tests expect the impl to know about this special extension, then that explains it, but our impl not so clever.  Agree changing it to use literals will be better than testing this implied birthDate extension processing thing (is that even specified somewhere?)</p>",
        "id": 209417619,
        "sender_full_name": "Lee Surprenant",
        "timestamp": 1599585750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>, <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> , some of the tests have a <code>mode=\"strict\"</code> attribute, what is the intent of that attribute? How do your test runners interpret that?</p>",
        "id": 209418707,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1599586312
    },
    {
        "content": "<p>There's also a <code>checkOrderedFunctions=\"true\"</code> and <code>ordered=\"true\"</code>. I'm assuming this means that the test runner will check whether the results are ordered, and that these are different representations for the same attribute. Is that correct?</p>",
        "id": 209418868,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1599586398
    },
    {
        "content": "<p>I don't do anything with <code>checkOrderedFunctions</code></p>",
        "id": 209463204,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599614723
    },
    {
        "content": "<p>I do use ordered = true to check whether the outcome is in the right order or not</p>",
        "id": 209463213,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599614749
    },
    {
        "content": "<p>I don't do anything about \"strict\"</p>",
        "id": 209463258,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599614772
    },
    {
        "content": "<p>A revisited the tests <code>testDateNotEqualTimezoneOffsetBefore</code>, <code>testDateNotEqualTimezoneOffsetAfter</code>, <code>testDateNotEqualUTC</code>, and agree. I've changed them in the source</p>",
        "id": 209464064,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599615740
    },
    {
        "content": "<p><a href=\"https://github.com/FHIR/fhir-test-cases/commit/2bbdce168f2ff90a1b471fd87d9e1b8ec461a7ef\">https://github.com/FHIR/fhir-test-cases/commit/2bbdce168f2ff90a1b471fd87d9e1b8ec461a7ef</a></p>",
        "id": 209464233,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599615969
    },
    {
        "content": "<p>I am using 'strict' - these test exercise the section on strict eval (<a href=\"http://hl7.org/fhirpath/N1/#type-safety-and-strict-evaluation\">http://hl7.org/fhirpath/N1/#type-safety-and-strict-evaluation</a>) - and since e.g. my engine does not have access to structure definitions I don't run these tests.</p>",
        "id": 209480512,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599637566
    },
    {
        "content": "<p>(I have the impression -based on the text in that section- that strict evaluation is optional - so I needed to identify these tests)</p>",
        "id": 209480605,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599637677
    },
    {
        "content": "<p>we can clean those things up as far as I am considered by putting them in a named group. I can exclude tests for stuff I don't (yet) implement based on names.</p>",
        "id": 209480709,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599637759
    },
    {
        "content": "<p>which ones would we put in a group?</p>",
        "id": 209490092,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599644315
    },
    {
        "content": "<p>the ones marked with \"strict\" now - then the \"strict\" attribute can be removed.</p>",
        "id": 209490582,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599644695
    },
    {
        "content": "<p>given that this would force a re-order  and a re-assignment out of functional groups, this sounds like a retro-grade step to me</p>",
        "id": 209542140,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1599672415
    },
    {
        "content": "<p>Yeah, that would be a consequence indeed.</p>",
        "id": 209603588,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1599722719
    },
    {
        "content": "<p>Okay, addressed changes from <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> 's testing with this <a href=\"https://github.com/FHIR/fhir-test-cases/pull/75\">PR</a></p>",
        "id": 210215128,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600222528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> Where is the \"encode\" function (used in those tests) defined?</p>",
        "id": 210258706,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1600261901
    },
    {
        "content": "<p>It's in a PR on the FHIRPath repository: <a href=\"http://build.fhir.org/ig/HL7/FHIRPath/branches/feature-27757-additional-string-functions/#additional-string-functions\">http://build.fhir.org/ig/HL7/FHIRPath/branches/feature-27757-additional-string-functions/#additional-string-functions</a></p>",
        "id": 210259764,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600262406
    },
    {
        "content": "<p>A new version of the FHIRPath specification is being worked on?  When will it be balloted, or did it miss it?</p>",
        "id": 210260029,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1600262539
    },
    {
        "content": "<p>Not ready for ballot, no, but there are a lot of trackers that have been submitted, see the current outstanding items in JIRA for the whole list, but many of them still need discussion and resolution.</p>",
        "id": 210260167,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600262631
    },
    {
        "content": "<p>Other than trackers being submitted as issues are found, there hasn't been a lot of activity. ITS is the Work Group that stewards FHIRPath, so discussions will happen there once we get enough dispositions together to support a block vote or discussion on an ITS call. That is on my list, and I'll certainly post here when I make forward progress on it. And of course you (and anyone else) are welcome to comment on the trackers there to help come to resolution on them.</p>",
        "id": 210310002,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600285099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> I don't understand this:</p>\n<p>Bryn says:</p>\n<blockquote>\n<p>Agreed on testIntegerBooleanNotTrue, that should result in an error, since a boolean-valued function is being invoked on a non-boolean-valued argument. Same with testIntegerBooleanNotFalse, so I've added invalid=\"semantic\" to those tests</p>\n</blockquote>\n<p>Bryn makes a PR, that changes the test from</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;testIntegerBooleanNotTrue&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression&gt;</span>(0).not() = true<span class=\"nt\">&lt;/expression&gt;&lt;output</span> <span class=\"na\">type=</span><span class=\"s\">&quot;boolean&quot;</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/output&gt;&lt;/test&gt;</span>\n</code></pre></div>\n\n\n<p>to </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;testIntegerBooleanNotTrue&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression&gt;</span>(0).not() = false<span class=\"nt\">&lt;/expression&gt;&lt;output</span> <span class=\"na\">type=</span><span class=\"s\">&quot;boolean&quot;</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/output&gt;&lt;/test&gt;</span>\n</code></pre></div>",
        "id": 210347472,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600317448
    },
    {
        "content": "<p>I find the basis for this slippery since .not() is not formally defined. In most languages, you can apply not to an integer value as a boolean test</p>",
        "id": 210347611,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600317641
    },
    {
        "content": "<p>Yes, sorry for the confusion, but as Ewout pointed out, if the singleton vale cannot be implicitly converted to a boolean (and an integer requires explicit conversion), then the collection is evaluated as true if it contains a single element, no matter what the element is.</p>",
        "id": 210347631,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600317691
    },
    {
        "content": "<p>The alternative is to say that integers can implicitly convert to booleans</p>",
        "id": 210347686,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600317743
    },
    {
        "content": "<p>not necessarily. The alternative would be to say that .Not() can be applied to integers</p>",
        "id": 210347932,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600318182
    },
    {
        "content": "<p>I don't feel strongly for that, but there is no definition for .not()</p>",
        "id": 210347943,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600318202
    },
    {
        "content": "<p>but there is this:</p>",
        "id": 210348001,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600318243
    },
    {
        "content": "<blockquote>\n<p>IF the collection contains a single node AND the expected input type is Boolean THEN<br>\n  The collection evaluates to true</p>\n</blockquote>",
        "id": 210348009,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600318261
    },
    {
        "content": "<p>because of this, <code>(0).not() = false</code></p>",
        "id": 210348016,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600318278
    },
    {
        "content": "<p>so I think your commit was right and your comments were not</p>",
        "id": 210348679,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600319051
    },
    {
        "content": "<p>but this makes a mess of this test:</p>",
        "id": 210348788,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600319207
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>        <span class=\"nt\">&lt;test</span> <span class=\"na\">name=</span><span class=\"s\">&quot;from-zilip-2&quot;</span> <span class=\"na\">inputfile=</span><span class=\"s\">&quot;patient-example.xml&quot;</span><span class=\"nt\">&gt;&lt;expression</span> <span class=\"na\">invalid=</span><span class=\"s\">&quot;semantic&quot;</span><span class=\"nt\">&gt;</span>(true | &#39;foo&#39;).allTrue()<span class=\"nt\">&lt;/expression&gt;&lt;output</span> <span class=\"na\">type=</span><span class=\"s\">&quot;boolean&quot;</span><span class=\"nt\">&gt;</span>false<span class=\"nt\">&lt;/output&gt;&lt;/test&gt;</span>\n</code></pre></div>",
        "id": 210348884,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600319393
    },
    {
        "content": "<p>no. not a mess. But definitely beyond the definition, since it doesn't say what to do about items that are not convertible to boolean.</p>",
        "id": 210349281,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600319927
    },
    {
        "content": "<p>Right, for that test it’s an error because foo can’t be converted to boolean. For systems that can check types statically, it’s a compile-time error, and a runtime one for dynamically typed systems.</p>",
        "id": 210349447,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600320175
    },
    {
        "content": "<p>I check types statically, but that's still beyond me to be sure that's an error at compile time</p>",
        "id": 210349512,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600320251
    },
    {
        "content": "<p>I know at compile time that the collection might contain a string, but not that it is sure to</p>",
        "id": 210349525,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600320276
    },
    {
        "content": "<p>Defining not for integers specifically would be an option, but I will note that .not() is formally defined in the spec: <a href=\"http://hl7.org/fhirpath/#not-boolean\">http://hl7.org/fhirpath/#not-boolean</a></p>",
        "id": 210349538,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600320317
    },
    {
        "content": "<p>sigh apparently I was searching for <code>.not()</code> not <code>not()</code></p>",
        "id": 210349587,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600320386
    },
    {
        "content": "<p>And defining it only for not() would I think lead to some inconsistent behaviors with the other logical operators.</p>",
        "id": 210349609,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1600320447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191359\">Bryn Rhodes</span> <a href=\"#narrow/stream/179266-fhirpath/topic/Date.2FTime.20comparison/near/210349609\">said</a>:</p>\n<blockquote>\n<p>And defining it only for not() would I think lead to some inconsistent behaviors with the other logical operators.</p>\n</blockquote>\n<p>Right, and that's why <code>not()</code> is slightly inconsistent with other operators working on a focus (like <code>allTrue()</code>): <code>not()</code> explicitly applies the logic of singleton evaluation (<a href=\"http://hl7.org/fhirpath/#singleton-evaluation-of-collections\">http://hl7.org/fhirpath/#singleton-evaluation-of-collections</a>) to the focus - whereas the others do not.  Am I right?</p>",
        "id": 210363129,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1600332549
    },
    {
        "content": "<p>the others apply it to the individuals items in the collection</p>",
        "id": 210376320,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600342273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179266-fhirpath/topic/Date.2FTime.20comparison/near/210376320\">said</a>:</p>\n<blockquote>\n<p>the others apply it to the individuals items in the collection</p>\n</blockquote>\n<p>I am not sure how to interpret that.  The \"it\" seems to refer to <a href=\"http://hl7.org/fhirpath/#singleton-evaluation-of-collections\">http://hl7.org/fhirpath/#singleton-evaluation-of-collections</a>, but that section is explicitly only about functions and operators expecting a singleton item.</p>\n<p>Are you saying that allTrue() should convert convertible things in its input collection to Booleans, and non-convertible things to true?</p>",
        "id": 210406366,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1600356471
    },
    {
        "content": "<p>That tests presently say that allTrue() should convert convertible things in its input collection to Booleans, and blow up on non-convertible things</p>",
        "id": 210442796,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1600372786
    }
]