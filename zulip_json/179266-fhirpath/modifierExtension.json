[
    {
        "content": "<p>I believe that the <a href=\"https://hl7.org/fhir/fhirpath.html#functions\">Functions</a> topic should include a <code>modifierExtension()</code> function as well as <code>extension</code>, but want to double-check. <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> , will the Java FHIRPath <code>extension</code> function look in modifierExtensions as well, or will it only work on regular extensions?</p>",
        "id": 275677739,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1647533012
    },
    {
        "content": "<p>modifierExtensions are extensions so it includes them</p>",
        "id": 277217290,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1648684559
    },
    {
        "content": "<p>is there some logic forbidding extension and modifierextensions from using the same canonical url? I doubt they will in practice but on the off chance it happens it could add ambiguity..</p>",
        "id": 278198918,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1649352563
    },
    {
        "content": "<p>The expectation is that the canonical URL for <em>any</em> artifact is unique to that artifact.  A given extension is either a modifier or not (as declared in the StructureDefinition)</p>",
        "id": 278202815,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649354274
    },
    {
        "content": "<p>Does StructureDefinition contain a flag for modifier?  I thought that the behavior was determined by where it appears in an instance.  E.g., an extension could appear in <code>Patient.extension</code> or <code>Patient.modifierExtension</code> and would be treated as a regular or modifier extension accordingly.</p>",
        "id": 278203776,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1649354683
    },
    {
        "content": "<p>The 'isModifier' property of the root element in the StructureDefinition will be 'true' for modifierExtensions and false for all other StructureDefinitions.  (I guess possibly with an exception for logical models?)</p>",
        "id": 278204793,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649355150
    },
    {
        "content": "<p>Thanks Lloyd - that is an annoying convention (both to discover and to use).</p>",
        "id": 278204967,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1649355256
    },
    {
        "content": "<p>Why?</p>",
        "id": 278205015,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649355282
    },
    {
        "content": "<p>An extension can't be both a modifier and a non-modifier - it has to be clear up front which it is.  And the 'isModifier' element is the logical place to capture that...</p>",
        "id": 278205071,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649355316
    },
    {
        "content": "<p>There's no requirement to look up any extension definition unless you want to validate the content</p>",
        "id": 278205137,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649355358
    },
    {
        "content": "<p>Sure, but putting annotations on an element that control the behavior of the parent structure is a bit odd from a definitional point of view (considering we have StructureDefinition and ElementDefinition).  And, I cannot actually find any documentation explaining it.  The only reference to <code>isModifier</code> I can see is explaining how complex extensions can include it in elements to control their own behavior.</p>\n<p>I can follow a lot of 'why' knowing it exists (e.g., simpler propagation in snapshots / differentials, etc.), but it adds a layer of 'magic' to a lot of tooling.  E.g., the publisher sees the element and changes the root (<a href=\"http://build.fhir.org/extension-request-donotperform.html\">do-not-perform</a> renders as a <code>modifierExtension</code> while <a href=\"http://build.fhir.org/extension-request-insurance.html\">request-insurance</a> renders as an <code>extension</code>).</p>\n<p>I'm guessing there should be a ticket to add documentation for this?</p>",
        "id": 278206722,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1649356160
    },
    {
        "content": "<p>We do the same for cardinality.  If the root element of the StructureDefinition is 0..1, that means the extension (or other profile) can't be referenced in a place with a cardinality greater than 1.</p>",
        "id": 278207180,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649356358
    },
    {
        "content": "<p>In short, the root element of a StructureDefinition contains some of the metadata about the StructureDefinition when it's the same sort of information that might also need to be asserted about descendant elements.</p>",
        "id": 278207285,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649356408
    },
    {
        "content": "<p>Feel free to submit a tracker for us to call this out though if you feel it's not obvious.</p>",
        "id": 278207329,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649356429
    },
    {
        "content": "<p>Sure, is there other stuff that is inherited like that? (don't know what I don't know =)</p>",
        "id": 278208211,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1649356812
    },
    {
        "content": "<p>I assume that means that the specified profile/extension cannot appear more than once, right (because extension is always 0..*)?</p>",
        "id": 278208707,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1649357057
    },
    {
        "content": "<p>label, code, short, definition, comment, alias, min, max, meaningWhenMissing, pattern, example, constraint, mapping - all of these could come into play when referencing an extension - or any other data type profile.</p>",
        "id": 278208865,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649357137
    },
    {
        "content": "<p>Cool beans - created <a href=\"http://jira.hl7.org/browse/FHIR-36738\">FHIR-36738</a> , also as an aside: <code>ElementDefinition</code> shows up in <code>Related Pages</code> instead of <code>Related Artifacts</code> in Jira.</p>",
        "id": 278214649,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1649359726
    },
    {
        "content": "<p>In the core spec, only resources show up in \"Related Artifacts\", for historical reasons.</p>",
        "id": 278220672,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649362715
    },
    {
        "content": "<p>Um, hoping that when that additional clarification is added that the display style props aren't forced to be what is in the extension definition and that the profile can say what they want to about those things. Especially if they are profiles with display labels in another language or localisation.</p>",
        "id": 278240322,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1649374817
    },
    {
        "content": "<p>what is this about?</p>",
        "id": 278240619,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1649375055
    },
    {
        "content": "<p>Rules are the same as any other constraint - so you're free to override label, short, definition, etc. so long as you're refining/contextualizing, not completely changing the meaning.</p>",
        "id": 278240718,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649375115
    },
    {
        "content": "<p>Making clear that elements in the 'root' elementDefinition are talking about characteristics of the type - e.g. cardinality, isModifier, but other things too.</p>",
        "id": 278240764,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1649375157
    }
]