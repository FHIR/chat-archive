[
    {
        "content": "<p>Moving <a href=\"#narrow/stream/179166-implementers/topic/Creating.20a.20Coding.20in.20FHIRPath.3F\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Creating.20a.20Coding.20in.20FHIRPath.3F</a> to this thread which seems more appropriate.</p>\n<p>I have an expression I want to write that has the following behavior iif(somecondition, return new Coding(system, value), return other Coding(system, value))</p>\n<p>The issue I'm running into is I don't see a native way within FHIRPath to create Codings. You can extract a Coding from an object but I need to dynamically create one. We noticed that CQL does support this but I need this natively supported in FP.</p>",
        "id": 238552025,
        "sender_full_name": "RP",
        "timestamp": 1620857377
    },
    {
        "content": "<p><a href=\"http://jira.hl7.org/browse/FHIR-29324\">FHIR-29324</a>, still in state \"Triaged\".</p>",
        "id": 238558211,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1620861497
    },
    {
        "content": "<p>Thanks, much appreciated <span class=\"user-mention\" data-user-id=\"195344\">@Paul Lynch</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 238560868,
        "sender_full_name": "RP",
        "timestamp": 1620863420
    },
    {
        "content": "<p>the FHIR Tools do support a Factory class that can create Codings, but this is not part of the standard</p>",
        "id": 238563681,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1620865327
    },
    {
        "content": "<p>Thanks, we went with %factory.coding for our implementation</p>",
        "id": 238674058,
        "sender_full_name": "RP",
        "timestamp": 1620936746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> What do you think the time frame is for discussing <a href=\"http://jira.hl7.org/browse/FHIR-29324\">FHIR-29324</a> at an ITS meeting?</p>",
        "id": 241580931,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1622834149
    },
    {
        "content": "<p>Hey guys, is there anyway to easily generate a UUID string using FHIR expressions?</p>",
        "id": 241785622,
        "sender_full_name": "Ephraim Kigamba",
        "timestamp": 1623076527
    },
    {
        "content": "<p>not at the moment.</p>",
        "id": 241790961,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1623078506
    },
    {
        "content": "<p>Cool thanks</p>",
        "id": 241917799,
        "sender_full_name": "Ephraim Kigamba",
        "timestamp": 1623158572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"195344\">@Paul Lynch</span> , the description of <a href=\"http://jira.hl7.org/browse/FHIR-29324\">J#29324</a> suggests this would be a FHIRPath extension, which is actually a FHIR-I concern, not an ITS concern. If we wanted to update the language to include syntax for object construction, that would be a FHIRPath change (and then an ITS concern).</p>",
        "id": 241968737,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1623178662
    },
    {
        "content": "<p>Happy to go whatever direction makes the most sense, I would like to see constructor syntax, but the factory approach does not need language modification.</p>",
        "id": 241968832,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1623178695
    },
    {
        "content": "<p>I would not have a preference, but <span class=\"user-mention\" data-user-id=\"195807\">@Ralph</span>  already implemented %factory.coding, so I think we should stick with that.   <span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> if that means the workgroup should be changed, could you change it?  (I don't seem to be able to do that.)</p>",
        "id": 241985821,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1623186154
    },
    {
        "content": "<p>Moved and provided a proposed disposition</p>",
        "id": 241993878,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1623189918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191316\">Grahame Grieve</span> <a href=\"#narrow/stream/179266-fhirpath/topic/Creating.20a.20Coding.20in.20FHIRPath/near/241790961\">said</a>:</p>\n<blockquote>\n<p>not at the moment.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Is this something that can be added as an official spec. I see that we have something similar for FHIR mapping language?</p>",
        "id": 242980443,
        "sender_full_name": "Ephraim Kigamba",
        "timestamp": 1623913689
    },
    {
        "content": "<p>sure. Create a Jira task proposing the change</p>",
        "id": 242980608,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1623913827
    },
    {
        "content": "<p>Thanks</p>",
        "id": 243036500,
        "sender_full_name": "Ephraim Kigamba",
        "timestamp": 1623943939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> I created an issue for my account creation last week and I'm yet to get a reply. I assume I need to have an account so that I can propose the change on Jira. Could you help out? The issue is <strong>NEWID-3417</strong></p>",
        "id": 243756885,
        "sender_full_name": "Ephraim Kigamba",
        "timestamp": 1624524416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></p>",
        "id": 243756910,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1624524434
    },
    {
        "content": "<p>Looks like this was addressed by HQ already sometime today.  It can take 1-2 business days for someone to review and ensure you do indeed appear to be a real human.</p>",
        "id": 243821802,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1624556883
    },
    {
        "content": "<p>After discussing <a href=\"https://jira.hl7.org/browse/FHIR-29324\">https://jira.hl7.org/browse/FHIR-29324</a> tonight in FHIR-I, I do think I disagree with the %factory solution.  We need a more general way to create instances of types, we need this to work with System.Quantity too for example, and if we start out with <code>%factory.Quantity</code>, we introduce functionality that is useful outside of the FHIR datamodel, but cannot be used by other models without creating ambiguity.   We did this with is(Quantity), which we changed to is(FHIR.Quantity), we might need to do the same here.  Also, this is really about constructing instances, so it would make sense to have a kind of constructor syntax for it (<code>new FHIR.Quantity(x,y,z)</code>) ?</p>",
        "id": 244195553,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1624909696
    },
    {
        "content": "<p>the proiblem with this is the parameters. Somewhere. something needs to specify what parameters</p>",
        "id": 244195667,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1624909782
    },
    {
        "content": "<p>Right. So these need to specified per specification. It could be a specific section, or a new set of functions that are identified as constructors.  I guess the FHIR path appendix of FHIR could specify what are the constructor overloads available for each FHIR primitive, and we need to do it for System types too.</p>",
        "id": 244198507,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1624911202
    },
    {
        "content": "<p>(if you need to choose between watching a beautiful sunrise now or constructor syntax, I'd choose the first option ;-) )</p>",
        "id": 244198603,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1624911247
    },
    {
        "content": "<p>I am about to hit the road, yes. I don't mind the syntax, but yes, we have to specify it somewhere. we could say that there's a syntax that lets you call methods on the objects that are static (defined on the class, not the object) and that have a stereotype constructor, or something, and let the specifications define those somewhere?</p>",
        "id": 244201767,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1624912844
    },
    {
        "content": "<p>This would be a new syntax in FHIRPath, yes? A \"new\" keyword followed by a function invocation? I've added a tracker to support that in FHIRPath: <a href=\"https://jira.hl7.org/browse/FHIR-33044\">https://jira.hl7.org/browse/FHIR-33044</a></p>",
        "id": 245737571,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1626118889
    },
    {
        "content": "<p>Could potentially follow the approach taken by CQL that uses a tuple syntax so that constructors arguments are bound by name. That would avoid the need to document specific constructors anywhere.</p>",
        "id": 245737755,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1626118983
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>instanceSelector\n    : namedTypeSpecifier &#39;{&#39; (&#39;:&#39; | (instanceElementSelector (&#39;,&#39; instanceElementSelector)*)) &#39;}&#39;\n    ;\n\ninstanceElementSelector\n    : referentialIdentifier &#39;:&#39; expression\n    ;\n</code></pre></div>",
        "id": 245737791,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1626119001
    },
    {
        "content": "<p>I can see how this grammar works for   <code>FHIR.Patient { active : true }</code>, but it seems to allow  <code>FHIR.Patient { : }</code> too - what does that do?</p>",
        "id": 245930359,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1626249718
    },
    {
        "content": "<p>Maybe construct a new Patient without setting any of its properties which is more explicit than <code>FHIR.Patient { }</code> ?</p>",
        "id": 245931419,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1626250542
    },
    {
        "content": "<p>I do miss the \"new\" keyword, but that's my C/C#/Java bias I guess ;-)</p>",
        "id": 245931494,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1626250595
    },
    {
        "content": "<p>There's a bit of light between calling a constructor with a fixed # of predefined constructor arguments, or constructing an object, and then settings its properties (the CQL way).  I can see the C# language designers struggling with this nowadays since C# now supports both notions. Makes sense since most constructors did nothing but assign (read-only) properties to the given constructor arguments.  Since we're so data driven, maybe the constructor is less of a function, and the \"property-based\" approach of CQL is just fine.</p>",
        "id": 245931641,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1626250748
    },
    {
        "content": "<p>Proposed updates to the FHIRPath grammar to enable this, plus worked examples here: <a href=\"https://github.com/HL7/FHIRPath/blob/fhir-33044-instance-selector/spec/instance-selector.md\">https://github.com/HL7/FHIRPath/blob/fhir-33044-instance-selector/spec/instance-selector.md</a> <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> <span class=\"user-mention\" data-user-id=\"195344\">@Paul Lynch</span> <span class=\"user-mention\" data-user-id=\"407094\">@Ephraim Kigamba</span></p>",
        "id": 271027853,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1644261135
    },
    {
        "content": "<p>I don't understand why:</p>\n<div class=\"codehilite\"><pre><span></span><code>  type: CodeableConcept {\n    coding: {\n      Coding {\n        system: &#39;http://terminology.hl7.org/CodeSystem/v2-0203&#39;,\n        code: &#39;MR&#39;,\n        display: &#39;Medical Record Number&#39;\n      }\n    },\n    text: &#39;Medical Record Number&#39;\n  },\n</code></pre></div>\n<p>isn't:</p>\n<div class=\"codehilite\"><pre><span></span><code>  type: CodeableConcept {\n    coding: Coding {\n        system: &#39;http://terminology.hl7.org/CodeSystem/v2-0203&#39;,\n        code: &#39;MR&#39;,\n        display: &#39;Medical Record Number&#39;\n    },\n    text: &#39;Medical Record Number&#39;\n  },\n</code></pre></div>",
        "id": 271034915,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1644264424
    },
    {
        "content": "<p>Because <code>coding</code> is multi-cardinality, so it takes a <code>List&lt;Coding&gt;</code>, not <code>Coding</code>. Does that help?</p>",
        "id": 271040441,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1644267349
    },
    {
        "content": "<p>So {...} is used for both lists and objects?</p>",
        "id": 271040858,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1644267545
    },
    {
        "content": "<p>Okay, I guess we had  {} (empty list) already.  Another question:  I see \"listSelector\" defined like '('List' ('&lt;' typeSpecifier '&gt;')?)? ...',  but I don't see an example in which optional word 'List' appears.  Should there be one?</p>",
        "id": 271042078,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1644268136
    },
    {
        "content": "<p>Great feedback, thank you! Applied</p>",
        "id": 271053460,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1644273343
    },
    {
        "content": "<p>Makes sense.  I think the syntax will work well, though  I am not quite sure yet what fhirpath.js should do with the type information.  When it is better to write:</p>\n<div class=\"codehilite\"><pre><span></span><code>ValueSet.expansion.contains.select(Coding { system: system, version: version, code: code, display: display })\n</code></pre></div>\n<p>rather than:</p>\n<div class=\"codehilite\"><pre><span></span><code>ValueSet.expansion.contains.select({ system: system, version: version, code: code, display: display })\n</code></pre></div>",
        "id": 271055153,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1644274307
    },
    {
        "content": "<p>I'm thinking we'll want to define \"assignment-compatible\" as a tuple that has elements that are a subset (not necessarily proper) of the elements of the target, that is what CQL does so that you can use anonymous tuples or strongly-typed tuples. In FHIRPath where typing enforcement tends to be more run-time, the named instances won't be as important, though they would still be required to distinguish choices.</p>",
        "id": 271056383,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1644275037
    },
    {
        "content": "<p>Bryn, all the examples seem to be setting pre-defined data elements. Can I also create data elements with dynamic field values (values that are the result of expressions)?</p>",
        "id": 271147588,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1644335443
    },
    {
        "content": "<p>Yes, the grammar allows for the value of each element to be an arbitrary expression.</p>",
        "id": 271158727,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1644339992
    },
    {
        "content": "<p>If I understand the grammar correctly, when you use a constant for system and an expression for value and an it will look like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    Quantity{ value: (%someObs.value as Quantity.value), unit: &#39;g/dl&#39;, code: &#39;g/dL&#39;, system: %ucum }\n</code></pre></div>\n<p>If this is the case, why use a difference expression for constants and expressions? Wouldn't it be less confusing if we use the same syntax for both?</p>",
        "id": 271240633,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1644392746
    },
    {
        "content": "<p>If a function expects a Coding as a parameter, and I'd pass one of these as arguments:</p>\n<blockquote>\n<p>{ system: system, version: version, code: code, display: display }<br>\nCoding { system: system, version: version, code: code, display: display }</p>\n</blockquote>\n<p>If I did <code>type()</code> on each of those, would the first return <code>TupleTypeInfo</code> and the second <code>ClassInfo</code> ?  Or both <code>ClassInfo</code>?</p>",
        "id": 271419154,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1644493134
    },
    {
        "content": "<p>The first would return <code>TupleTypeInfo</code>, the second a <code>ClassInfo</code></p>",
        "id": 271443890,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1644505659
    },
    {
        "content": "<p>Can lists of anonymous tuples be used where <code>List</code> is expected?   And <code>List&lt;Any&gt;</code>?</p>",
        "id": 271445193,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1644506137
    },
    {
        "content": "<p>Is it expected that, if a function takes a Coding as parameter and you supply it with such an anonymous tuple, there is an implicit conversion to Coding?</p>",
        "id": 271445412,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1644506209
    },
    {
        "content": "<p>Coming from a Java/C#/C background, my view of typing in FhirPath was based on a nominal type system, but I can see we're sort of introducing structural typing with this feature. I am not sure we're not stepping on thin ice, although I enjoy the challenge.</p>",
        "id": 271446254,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1644506523
    },
    {
        "content": "<p>When/where will we continue this discussion? I'd be interested to join if this is handled on a call.</p>",
        "id": 271938865,
        "sender_full_name": "Ewout Kramer",
        "timestamp": 1644912682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191359\">@Bryn Rhodes</span> Would this new syntax allow you to construct something more complex, like a Condition?</p>",
        "id": 273536693,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646074636
    },
    {
        "content": "<p>Never mind -- I see you have an <a href=\"https://github.com/HL7/FHIRPath/blob/fhir-33044-instance-selector/spec/instance-selector.md\">example</a> of a Patient being constructed.  This seems really useful.</p>",
        "id": 273537017,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1646074781
    },
    {
        "content": "<p>Yes, it will support construction of any type of instance (including anonymous tuples)</p>",
        "id": 273714334,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1646170591
    },
    {
        "content": "<p>Apologies <span class=\"user-mention\" data-user-id=\"191328\">@Ewout Kramer</span> , I missed these questions. In CQL, implicit conversion from a class type to an equivalent tuple type is allowed, but the other direction is not. So if you had a function that took a Coding, and you passed it a compatible tuple type, you'd have to do an explicit conversion to get it to be a Coding, but if you had a function that took a compatible tuple type with Coding, you could pass it a Coding. So it is shades of \"duck typing\", yes.</p>",
        "id": 273715936,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1646171315
    }
]