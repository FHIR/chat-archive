[
    {
        "content": "<p>Found a FHIRPath problem....</p>",
        "id": 164215517,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556231118
    },
    {
        "content": "<p>see <a href=\"#narrow/stream/179166-implementers/topic/Period.20datatypes\" title=\"#narrow/stream/179166-implementers/topic/Period.20datatypes\">https://chat.fhir.org/#narrow/stream/179166-implementers/topic/Period.20datatypes</a>: should this be valid: </p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"nt\">&lt;valuePeriod&gt;</span>\n    <span class=\"nt\">&lt;start</span> <span class=\"na\">value=</span><span class=\"s\">&quot;2019-04-25T16:47:00Z&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;end</span> <span class=\"na\">value=</span><span class=\"s\">&quot;2019-04-25&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/valuePeriod&gt;</span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 164215603,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556231185
    },
    {
        "content": "<p>at present, it is labelled as not valid because</p>",
        "id": 164215620,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556231208
    },
    {
        "content": "<p><code>start.hasValue().not() or end.hasValue().not() or (start &lt;= end)</code></p>",
        "id": 164215627,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556231214
    },
    {
        "content": "<p>but in fact, according to the semantics, it should be</p>",
        "id": 164215629,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556231218
    },
    {
        "content": "<p><code>[start.hasValue().not() or end.hasValue().not() or (start.lowEdge() &lt;= end.highEdge())]</code></p>",
        "id": 164215648,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556231245
    },
    {
        "content": "<p>except, of course, we do not have lowEdge() and highEdge() defined in FHIRPath...</p>",
        "id": 164215667,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556231280
    },
    {
        "content": "<p>or whatever else we would call them</p>",
        "id": 164215730,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556231306
    },
    {
        "content": "<p>That's a problem.</p>",
        "id": 164232259,
        "sender_full_name": "Richard Townley-O'Neill",
        "timestamp": 1556253462
    },
    {
        "content": "<p>The problem seems to be caused by the change to FHIRPath to disallow comparisons of DateTimes at differing precisions.  In an older version, start &lt;= end would have truncated start to the date, so that start &lt;= end would be true.  In the current version (being balloted) start &lt;= end would return empty.  It might be worth revisiting that decision.</p>\n<p>Adding lowEdge/highEdge solves the problem, but the negative thing about them is that I think they would only apply to time types.</p>",
        "id": 164276749,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1556296341
    },
    {
        "content": "<p>Wouldn't they also apply to ranges?</p>",
        "id": 164277866,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1556297297
    },
    {
        "content": "<p>It looks like FHIRPath doesn't have a range type (though FHIR does).</p>",
        "id": 164278218,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1556297614
    },
    {
        "content": "<p>it also applies to decimals which have variable precision. To do the same with a decimal, you need either precision or low/high boundary properties, which we currently do not have either</p>",
        "id": 164294157,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556309520
    },
    {
        "content": "<p>You might run into the same problem with times that you do with decimals.  The FHIRPath grammar allows an infinite number of decimal places on seconds (though support is only required at the millisecond level - 4.1.6).</p>",
        "id": 164301785,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1556316350
    },
    {
        "content": "<p>right but that's usually a side issue to the main one, which really matters in a way it doesn't with decimals.</p>",
        "id": 164301985,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556316550
    },
    {
        "content": "<p>so I would like to define precision() and lowBoundary() and highBoundary() for date and decimal and use them in a revised FHIRPath constraint on period and range...</p>",
        "id": 164302003,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556316596
    },
    {
        "content": "<p>What do lowBoundary() and highBoundary() return?</p>",
        "id": 164397687,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1556472364
    },
    {
        "content": "<p>Never mind, I see, yes, useful operators, but shouldn't it be <code>start.highBoundary() &lt;= end.lowBoundary()</code>? Otherwise we would allow the interval from <code>@2019-04-25T16:47:00Z</code> to <code>@2019-04-25T00:00:00Z</code></p>",
        "id": 164398442,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1556473558
    },
    {
        "content": "<p>These comparisons are tricky to implement. Would it be possible to introduce higher level comparison methods/operators that incorporate the nullability and precision checks, to simplify expressions and coach implementers onto the happy path?</p>",
        "id": 164408150,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1556486701
    },
    {
        "content": "<p>well, you're trading there - higher level = more tricky to implement</p>",
        "id": 164410291,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556489922
    },
    {
        "content": "<p>interval <code>@2019-04-25T16:47:00Z to @2019-04-25T00:00:00Z</code> - would not be allowed because boundaries are:</p>\n<p>@2019-04-25T16:47:00Z = @2019-04-25T16:47:00.0000000Z to @2019-04-25T16:47:01.000000000Z <br>\n@2019-04-25T00:00:00Z = @2019-04-25T00:00:00.00000000Z to @2019-04-25T00:00:01.0000000000Z</p>\n<p>so start.lowBoundary() &lt;= end.highBoundary() is false</p>",
        "id": 164410424,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556490117
    },
    {
        "content": "<p>looking at my own internal date type, I would define the following functions to support all the things I do with dates:</p>\n<ul>\n<li>date +/- duration = date</li>\n<li>date - date = duration</li>\n<li>date.lowBoundary()</li>\n<li>date.highBoundary()</li>\n<li>date.toUTC() / date.toLocal()</li>\n<li>date.precision() / date.asPrecision()</li>\n<li>date.toDay()</li>\n<li>date.overlaps(date)</li>\n<li>date.between(min, max : date) : boolean</li>\n<li>date.compare(date) / date.canCompare(date)</li>\n</ul>",
        "id": 164410601,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556490397
    },
    {
        "content": "<p>These also then I troduce the timezones into the dates.</p>",
        "id": 164413357,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1556494971
    },
    {
        "content": "<p>I meant moving complexity away from FHIR Path expression authors to FHIR path compiler (server/API) implementers.</p>",
        "id": 164435894,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1556528439
    },
    {
        "content": "<p>i.e. like the proposed <code>date.overlaps(date)</code> method</p>",
        "id": 164435934,
        "sender_full_name": "Michel Rutten",
        "timestamp": 1556528499
    },
    {
        "content": "<p>I think highBoundary() should not be included in the date's internal range.  In other words, a date should be (internally) the range</p>\n<div class=\"codehilite\"><pre><span></span>   [ date.lowBoundary, date.highBoundary )\n</pre></div>\n\n\n<p>This means the test above should use &lt; instead of &lt;=:</p>\n<div class=\"codehilite\"><pre><span></span>start.lowBoundary() &lt; end.highBoundary()\n</pre></div>\n\n\n<p>Otherwise, if start=@2019-04-25T00:00:01Z  and end = @2019-04-25T00:00:00Z, then start.lowBoundary = end.highBoundary, which I don't think is desirable.</p>",
        "id": 164490933,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1556573700
    },
    {
        "content": "<p>I'm having trouble grokking that, start can't be after end.</p>",
        "id": 164492367,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1556574944
    },
    {
        "content": "<p>That is what I was trying to prevent by excluding \"highBoundary\" from the internal range of the date.</p>",
        "id": 164494433,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1556577043
    },
    {
        "content": "<p>I see</p>",
        "id": 164494780,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1556577391
    },
    {
        "content": "<p>oh right. I did that so low() &lt;= range &lt; high(). and then I agree that it should be &lt; not &lt;-</p>",
        "id": 164517163,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556608611
    },
    {
        "content": "<p>What are real use cases for all this \"temporal\" stuff in fhirpath?</p>",
        "id": 164558843,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1556646073
    },
    {
        "content": "<p>It's a rabbit hole :)</p>",
        "id": 164558929,
        "sender_full_name": "nicola (RIO/SS)",
        "timestamp": 1556646126
    },
    {
        "content": "<p>I need to get the period invariant fixed</p>",
        "id": 164730717,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556820355
    },
    {
        "content": "<p>Are you planning on defining those in the FHIR FHIRPath appendix?</p>",
        "id": 164731044,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1556820563
    },
    {
        "content": "<p>I don't know. I think they belong in the core on FHIRPath, actually.</p>",
        "id": 164732371,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556821408
    },
    {
        "content": "<p>I agree they eventually belong there, but is there a timing question there?</p>",
        "id": 164732758,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1556821644
    },
    {
        "content": "<p>yes</p>",
        "id": 164732772,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556821652
    },
    {
        "content": "<p>So, I'm happy to put definitions for them in, need to prep the reconciliation/publication branch for this ballot cycle anyway. Shall I take a stab at putting them there (and mark them STU?)?</p>",
        "id": 164732982,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1556821780
    },
    {
        "content": "<p>Will we have a chance to comment on them before they are published?</p>",
        "id": 164733156,
        "sender_full_name": "Paul Lynch",
        "timestamp": 1556821900
    },
    {
        "content": "<p>Absolutely, and I need a tracker to support adding them.</p>",
        "id": 164733233,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1556821937
    },
    {
        "content": "<p><a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=21234\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=21234\">GF#21234</a></p>",
        "id": 164737317,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1556825105
    },
    {
        "content": "<p>Sorry, I forgot that I had already captured this as a ballot comment against FHIRPath :) <a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20149\" target=\"_blank\" title=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&amp;tracker_item_id=20149\">GF#20149</a></p>",
        "id": 164843041,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1556932718
    },
    {
        "content": "<p>So, the result of lowBoundary() and highBoundary() is clear enough, but what is the result of precision()? Is it an integer returning the number of digits?</p>",
        "id": 167670804,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1560032883
    },
    {
        "content": "<p>For decimals that's clear enough, but for Date/DateTime/Time, what is the result of <code>(@2014).precision()</code> for example. 4?</p>",
        "id": 167670819,
        "sender_full_name": "Bryn Rhodes",
        "timestamp": 1560032931
    }
]