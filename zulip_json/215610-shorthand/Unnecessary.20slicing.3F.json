[
    {
        "content": "<p>I have a simple (well, simplified) profile:</p>\n<div class=\"codehilite\" data-code-language=\"Fish\"><pre><span></span><code>Profile: MyCondition\nParent: Condition\nDescription: <span class=\"s2\">\"My Condition\"</span>\n* onset<span class=\"o\">[</span>x<span class=\"o\">]</span> only dateTime <span class=\"k\">or</span> Period\n* onsetDateTime MS\n</code></pre></div>\n<p>If I comment out either of the constraints, I get a resource with no slicing, but when I have both constraints present, I suddenly get slicing. </p>\n<p>To me, it doesn't seem like slicing is needed, but maybe I'm missing something. Is sushi generating unnecessarily complicated profiles?</p>",
        "id": 256644637,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1633638549
    },
    {
        "content": "<p>If you're defining MS on only one of the types for onset, you have to slice</p>",
        "id": 256645186,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633638788
    },
    {
        "content": "<p>The only 'element' that exists is 'onset'.  If you're not making onset MS irrespective of type, then you must slice by type.</p>",
        "id": 256645239,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1633638819
    },
    {
        "content": "<p>But if all I have is the MS line, then no slice is created -- and that sets MS on only one of the types.</p>",
        "id": 256645670,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1633639037
    },
    {
        "content": "<p>So, this is the expected rendering then?</p>\n<p><a href=\"/user_uploads/10155/cmt0I2tKkgvwv6rrwdTTqDrT/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/cmt0I2tKkgvwv6rrwdTTqDrT/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/cmt0I2tKkgvwv6rrwdTTqDrT/image.png\"></a></div><p>It seems funny to me to show the base element and a separate slice for it.</p>",
        "id": 256651939,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1633641585
    },
    {
        "content": "<p>onsetDateTime creates an implicit slicing. If you don't want it:</p>\n<div class=\"codehilite\"><pre><span></span><code>Profile: MyCondition\nParent: Condition\nDescription: &quot;My Condition&quot;\n* onset[x] only dateTime or Period\n* onset[x]  MS\n</code></pre></div>",
        "id": 257053285,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1633953528
    },
    {
        "content": "<p>expressing only MS for a single datatype and not both needs slicing.</p>",
        "id": 257053559,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1633953652
    },
    {
        "content": "<p>What I was finding odd was that <code>onset[x] only dateTime or Period</code> didn't create a slice, and <code>onsetDateTime MS</code> didn't create a slice, but putting them both in did. If <code>onsetDateTime MS</code> always forced a slice, that would make more sense.</p>",
        "id": 257093294,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1633972713
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191380\">@Elliot Silver</span> -- It is, in fact, creating a slice even when you do only <code>onsetDateTime MS</code>.  What you're seeing is a difference in rendering of the differential view.  When you add the type constraint, it forces the <code>onset[x]</code> element to be rendered in the differential view, so you see the slicing.  When you don't add the type constraint, <code>onset[x]</code> doesn't get rendered in the differential view, so you don't see the slicing.  But it <em>is</em> there.  If you look at the snapshot view or the underlying JSON/XML, you'll see the slicing and onsetDateTime slice.</p>",
        "id": 257275358,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1634074337
    }
]