[
    {
        "content": "<p>I am struggling with more complex slicing beyond simple type. I have a need to slice on a extension which is a Reference, and need to slice on the Reference.Identifier.type element. I have a minimal FSH implementation guide that shows what I am trying to do. Would be glad to offer the working solution that we eventually come to as sample for others.</p>",
        "id": 264169904,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638976853
    },
    {
        "content": "<p>I have <code>^slicing.discriminator.path = \"(value as Reference).identifier.type\"</code> today, and Grahame says it needs to be <code>$this.value.ofType(Reference).identifier.type</code>, but that fails to build.</p>",
        "id": 264170243,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638976968
    },
    {
        "content": "<p>so I presume there is some translation of what Grahame is saying into sushi that I need</p>",
        "id": 264170315,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638976995
    },
    {
        "content": "<p><a href=\"https://github.com/JohnMoehrke/SlicingSlicedExtension\">https://github.com/JohnMoehrke/SlicingSlicedExtension</a></p>",
        "id": 264170369,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638977014
    },
    {
        "content": "<p>Hmmm... I didn't think that the <code>$this.</code> prefix would be necessary since the context is assumed to be this (e.g., I thought that <code>value</code> would implicitly be <code>$this.value</code>).  Either way, <code>$this.value</code> certainly is not wrong.  I also think that the cast is valid, but agree that <code>ofType</code> is better (I actually forgot about the <code>ofType</code> function). So... the discriminator that Grahame suggested looks ok to me.  I'll have to look into this further when I have a chance later.</p>",
        "id": 264174413,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1638978422
    },
    {
        "content": "<p>I feel stuck between a rock (IG builder) and a hard place (sushi). I only want to do the right thing, but can't figure out what the right thing is.</p>",
        "id": 264183115,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638981897
    },
    {
        "content": "<p>putting Grahame's recommendation into my FSH gives me a different error in the IG builder</p>\n<div class=\"codehilite\"><pre><span></span><code>Slicing cannot be evaluated: illegal use of ofType() in discriminator - Multiple possible types on Extension.value[x] (@char 1)\n</code></pre></div>",
        "id": 264183310,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638981966
    },
    {
        "content": "<p>sushi does seem to create the right thing...</p>\n<div class=\"codehilite\"><pre><span></span><code>        &quot;slicing&quot;: {\n          &quot;discriminator&quot;: [\n            {\n              &quot;type&quot;: &quot;pattern&quot;,\n              &quot;path&quot;: &quot;$this.value.ofType(Reference).identifier.type&quot;\n            }\n          ],\n          &quot;rules&quot;: &quot;open&quot;\n        }\n</code></pre></div>",
        "id": 264183451,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638982029
    },
    {
        "content": "<p>I added my small IG added to IG build<br>\n<a href=\"http://build.fhir.org/ig/JohnMoehrke/SlicingSlicedExtension/branches/main/index.html\">http://build.fhir.org/ig/JohnMoehrke/SlicingSlicedExtension/branches/main/index.html</a></p>",
        "id": 264186109,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638982993
    },
    {
        "content": "<p>It seems like <code>ofType</code> should be allowed there (based on the spec).  I'm not sure why it is not.  That said, maybe you can get by without it?  Have you tried: <code>$this.value.identifier.type</code>?</p>",
        "id": 264189528,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1638984432
    },
    {
        "content": "<p>I get this error with that</p>\n<div class=\"codehilite\"><pre><span></span><code>Slicing cannot be evaluated: Error in discriminator at Extension.value[x]: no children, multiple types (@char 1)\n</code></pre></div>",
        "id": 264198182,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638987834
    },
    {
        "content": "<p>Ha.  OK.  The way to fix that would be <code>ofType(Reference)</code>, but you know how that goes!</p>",
        "id": 264201544,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1638989224
    },
    {
        "content": "<p>yup, back to that rock and hard-place</p>",
        "id": 264202363,
        "sender_full_name": "John Moehrke",
        "timestamp": 1638989615
    },
    {
        "content": "<p>so, Grahame has provided examples in his validation github that he indicates work. The only difference I see in the json is that the id for the slice in his does not use the '/' character. And that character seems to be illegal in an id. Sushi is creating these id values... so, can this pattern be cleaned? (Note, I am very willing to be the failure, just not noticing any other difference between Grahames validation examples and what sushi creates from my sample IG.</p>\n<p>- His - <a href=\"https://github.com/FHIR/fhir-test-cases/blob/0b6699c0a54c445722194773fbac7cd8b7ef8784/validator/structureDefinition-SecondSliceProfile.json\">https://github.com/FHIR/fhir-test-cases/blob/0b6699c0a54c445722194773fbac7cd8b7ef8784/validator/structureDefinition-SecondSliceProfile.json</a></p>",
        "id": 265810001,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640182908
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>      {\n        &quot;id&quot;: &quot;AuditEvent.agent:user.extension:otherIdnpi&quot;,\n        &quot;path&quot;: &quot;AuditEvent.agent.extension&quot;,\n        &quot;sliceName&quot;: &quot;otherId-npi&quot;,\n        &quot;min&quot;: 0,\n        &quot;max&quot;: &quot;1&quot;\n      },\n</code></pre></div>",
        "id": 265810472,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640183138
    },
    {
        "content": "<p>vs what I get out of sushi</p>\n<div class=\"codehilite\"><pre><span></span><code>      {\n        &quot;id&quot;: &quot;AuditEvent.agent:user.extension:otherId/npi&quot;,\n        &quot;path&quot;: &quot;AuditEvent.agent.extension&quot;,\n        &quot;sliceName&quot;: &quot;otherId/npi&quot;,\n        &quot;min&quot;: 0,\n        &quot;max&quot;: &quot;1&quot;\n      },\n</code></pre></div>",
        "id": 265810597,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640183204
    },
    {
        "content": "<p>reminder that my github for my test IG for this use-case is <a href=\"https://github.com/JohnMoehrke/SlicingSlicedExtension\">https://github.com/JohnMoehrke/SlicingSlicedExtension</a></p>",
        "id": 265810819,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640183371
    },
    {
        "content": "<p>I replied over in <a class=\"stream\" data-stream-id=\"179252\" href=\"/#narrow/stream/179252-IG-creation\">#IG creation</a> too, but here is what I said there:</p>\n<blockquote>\n<p>I have not had the time to look at Grahame's example, but the <code>/</code> character is used when you are re-slicing.  In other words, if there is an existing slice defined and you need to create sub-slices within that slice, this is called re-slicing.  And in re-slicing, the sliceName is <code>${parentSliceName}/{subSliceName}</code>.  See <a href=\"http://hl7.org/fhir/R4/profiling.html#reslicinghttp://hl7.org/fhir/R4/profiling.html#reslicing\">Re-profiling and Re-slicing</a> (particularly the last paragraph).</p>\n</blockquote>\n<p>While it is true that the <code>id</code> datatype does not allow <code>/</code>, that does not apply here because <code>ElementDefinition.id</code> is a <code>string</code>, not an <code>id</code> (despite its name).  This is why element IDs are also allowed to use <code>:</code> (which happens quite a lot).</p>\n<p>I'll have to look at Grahame's example further to see how he is slicing it (without re-slicing), but AFAIK, re-slicing should work too.</p>",
        "id": 265812707,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1640184468
    },
    {
        "content": "<p>turns out it is not that</p>",
        "id": 265812825,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640184523
    },
    {
        "content": "<p>the second profile has <code>sliceName:otherId</code> that Grahame does not have. Removing that clears the error</p>\n<div class=\"codehilite\"><pre><span></span><code>     {\n        &quot;id&quot;: &quot;AuditEvent.agent:user.extension:otherId&quot;,\n        &quot;path&quot;: &quot;AuditEvent.agent.extension&quot;,\n       ~~ &quot;sliceName&quot;: &quot;otherId&quot;,~~\n        &quot;slicing&quot;: {\n          &quot;discriminator&quot;: [\n            {\n              &quot;type&quot;: &quot;pattern&quot;,\n              &quot;path&quot;: &quot;$this.value.ofType(Reference).identifier.type&quot;\n            }\n          ],\n          &quot;rules&quot;: &quot;open&quot;\n        }\n      },\n</code></pre></div>",
        "id": 265813133,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640184703
    },
    {
        "content": "<p>so <code>otherId</code> is an extension defined in the first profile. Is sushi thinking that the <code>.extension[otherId]</code> is a slice and not an index?</p>",
        "id": 265814125,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640185255
    },
    {
        "content": "<p>I'm not sure I follow.  <code>.extension[otherId]</code> <em>is</em> a slice (not an index).  Extensions are, in reality, just slices of <code>extension</code> with <code>url</code> as the <code>discriminator.path</code>.  SUSHI includes the <code>sliceName</code> because we've been told in the past (and it might be documented somewhere, but I'd need to check) that you must <em>always</em> include the <code>sliceName</code> in the differential -- even if it is not <em>different</em> (i.e., it's inherited).  Isn't that the case, <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>?  Or has that changed?</p>",
        "id": 265817517,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1640187222
    },
    {
        "content": "<p>thanks for continuing to work on this. the extension is defined in the first slice, as is the <code>user</code> slice is not replicated in the second one, just the extension slice</p>",
        "id": 265818041,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640187528
    },
    {
        "content": "<p>I'm looking at Grahame's test case now.  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> -- I'm a little confused by this.  Here are some things I'm seeing that I am not sure of:</p>\n<ol>\n<li>\n<p>The element with id <code>AuditEvent.agent:user.extension:otherId</code> does not redeclare the <code>sliceName</code> (<code>otherId</code>), but I think it is supposed to.</p>\n</li>\n<li>\n<p>The element with id <code>AuditEvent.agent:user.extension:otherIdnpi</code> is supposed to be a re-slice of <code>otherId</code>, so shouldn't the last part of the element id be <code>otherId/npi</code>?</p>\n</li>\n<li>\n<p>The children of the <code>AuditEvent.agent:user.extension:otherIdnpi</code> element have ids like <code>AuditEvent.agent:user.extension:otherId/npi.valueReference</code> (note they <em>do</em> have the <code>/</code>) -- which further seems to indicate that the first id is wrong.</p>\n</li>\n<li>\n<p>Most of the <code>sliceName</code> values do <em>not</em> match the slice name in the id.  For example, the element with id <code>AuditEvent.agent:user.extension:otherId/provider-id</code> has sliceName <code>otherId-provider-id</code>.  Shouldn't those match?</p>\n</li>\n</ol>",
        "id": 265819221,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1640188104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/215610-shorthand/topic/slicing.20with.20complex.20.24this/near/265813133\">said</a>:</p>\n<blockquote>\n<p>the second profile has <code>sliceName:otherId</code> that Grahame does not have. Removing that clears the error</p>\n<p><div class=\"codehilite\"><pre><span></span><code>     {\n        &quot;id&quot;: &quot;AuditEvent.agent:user.extension:otherId&quot;,\n        &quot;path&quot;: &quot;AuditEvent.agent.extension&quot;,\n       ~~ &quot;sliceName&quot;: &quot;otherId&quot;,~~\n        &quot;slicing&quot;: {\n          &quot;discriminator&quot;: [\n            {\n              &quot;type&quot;: &quot;pattern&quot;,\n              &quot;path&quot;: &quot;$this.value.ofType(Reference).identifier.type&quot;\n            }\n          ],\n          &quot;rules&quot;: &quot;open&quot;\n        }\n      },\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>so, removing this one line produces good output. So either Sushi should not put it in, or validator should not complain that it is there.</p>",
        "id": 265915446,
        "sender_full_name": "John Moehrke",
        "timestamp": 1640265468
    }
]