[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> I think I have a feature request for sushi ... - when I ask it to pass large files like eg. <a href=\"https://github.com/hl7-eu/gravitate-health/blob/master/input/fsh/Suliqua-instances-en/11-documentreference/suliqua-mp4.fsh\">https://github.com/hl7-eu/gravitate-health/blob/master/input/fsh/Suliqua-instances-en/11-documentreference/suliqua-mp4.fsh</a> it throws an error like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error Maximum call stack size exceeded\n  File: /Users/jvi/gravitate-health/input/fsh/Suliqua-instances-en/11-documentreference/suliqua-mp4.fsh\n  Line: 10\n</code></pre></div>\n<p>-which isn't really an error I think</p>",
        "id": 266731252,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1641240513
    },
    {
        "content": "<p>Oh wow.  Yeah, I see.  You have a huge base64-encoded attachment in there.  Ideally you would use the binary adjunct loading to handle that rather than shoving it in the FSH file.  But I do agree it would be nice if we didn't choke on this FSH (pun totally intended).  <code>Maximum call stack size exceeded</code> usually means that the Node.js interpreter ran into a circular processing chain -- although I don't fully understand why a large file would cause this.  We'll have to do some investigation.  Depending on where the problem lies, we may or may not be able to fix this.  But hopefully we can?</p>",
        "id": 266731755,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1641240821
    },
    {
        "content": "<blockquote>\n<p>Ideally you would use the binary adjunct </p>\n</blockquote>\n<p>How would that work? I had a glance at the shorthand documentation but didn't find anything relevant</p>",
        "id": 266783817,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1641286896
    },
    {
        "content": "<p>Answer: <a href=\"#narrow/stream/215610-shorthand/topic/Binary.20Adjunct/near/240180681\">https://chat.fhir.org/#narrow/stream/215610-shorthand/topic/Binary.20Adjunct/near/240180681</a></p>",
        "id": 266783934,
        "sender_full_name": "Vadim Peretokin",
        "timestamp": 1641286970
    },
    {
        "content": "<p><a href=\"https://confluence.hl7.org/pages/viewpage.action?pageId=66938614#ImplementationGuideParameters-BinaryAdjunctFiles\">https://confluence.hl7.org/pages/viewpage.action?pageId=66938614#ImplementationGuideParameters-BinaryAdjunctFiles</a> doesn't metion my media type (<code>video/mp4</code>). Is that a problem?</p>",
        "id": 266784339,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1641287270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span> -- it might be? I guess I don't know.  Truthfully, I don't have much experience w/ binary adjunct files -- I just know that they are a thing.  TBH, I've had some luck with them in testing but also some trouble.  I was actually going to try a little again today because <span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> was running into some trouble with it.</p>",
        "id": 266807544,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1641303178
    },
    {
        "content": "<p>I didn't try media types other than those listed. It would seem that the solution given should not care what the media type is, thus supporting any media type.</p>",
        "id": 266808824,
        "sender_full_name": "John Moehrke",
        "timestamp": 1641303964
    },
    {
        "content": "<p>In my case, I have xml and didn't see xml on the list... so I just named my file with a .txt extension. The contentType is applied at the resource level, so this trick at my filesystem level didn't matter... and an xml file is a text file.</p>",
        "id": 266808920,
        "sender_full_name": "John Moehrke",
        "timestamp": 1641304039
    },
    {
        "content": "<p>note Binary does work. there is just an \"file type\" error thrown in the IG QA report.</p>",
        "id": 266809120,
        "sender_full_name": "John Moehrke",
        "timestamp": 1641304152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> Grahame is insisting that the <code>implementationguide-resource-format</code> extension is needed. <br>\nI have a very focused test IG. <a href=\"https://github.com/JohnMoehrke/testBinary\">https://github.com/JohnMoehrke/testBinary</a><br>\nnot clear to me how to get that extension thru sushi-config into the IG json.</p>",
        "id": 267058348,
        "sender_full_name": "John Moehrke",
        "timestamp": 1641474383
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span>.  Thanks for the example project.  I now see what you mean and understand what you're trying to do.  You <em>should</em> be able to add this to your <code>sushi-config.yaml</code> file:</p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code><span class=\"nt\">resources</span><span class=\"p\">:</span>\n  <span class=\"nt\">Binary/B-hello-world</span><span class=\"p\">:</span>\n    <span class=\"nt\">extension</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://hl7.org/fhir/StructureDefinition/implementationguide-resource-format</span>\n        <span class=\"nt\">valueCode</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">text/plain</span>\n</code></pre></div>\n<p>But... it's not working.  SUSHI is dropping it when it generates the IG JSON.  I swear this worked when we tested it last (as it's a necessary part to supporting logical model examples).  We'll have to take a look at it!</p>",
        "id": 267067252,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1641479775
    },
    {
        "content": "<p>okay, I had tried it that way... so I figured I didn't do it right.</p>",
        "id": 267067457,
        "sender_full_name": "John Moehrke",
        "timestamp": 1641479893
    },
    {
        "content": "<p><a href=\"https://github.com/FHIR/sushi/issues/1005\">SUSHI#1005</a></p>",
        "id": 267068574,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1641480511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> - the issue w/ adding extensions to resources in <code>sushi-config.yaml</code> is fixed in the latest SUSHI 2.3.0 release!</p>",
        "id": 273293212,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1645828021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191427\">@Jens Villadsen</span> - the issue with handling large base64 values is also fixed in the latest SUSHI 2.3.0 release.  I think you found other approaches by now, but if you ever need to put a large Base64 string into a FSH file again, it should work!</p>",
        "id": 273293771,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1645828319
    }
]