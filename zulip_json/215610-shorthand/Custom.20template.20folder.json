[
    {
        "content": "<p>I changed an existing IG to use SUSHI for newly added profiles, but I ran into an Issue with my custom template. I have it in a folder \"mytemplate\" next to the \"input\" in the \"ig-data\" folder. I assumed when using the ig-data folder everything not somehow processed by SUSHI would simply be copied to the \"build\" directory. But only the \"input\" folder is in the \"build\" directory. Is this behaviour intended or a bug? Can I get SUSHI to copy the folder? I would preferr not to having to pre-propulate the \"build\" folder to avoid confusion...</p>",
        "id": 202686848,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1593696111
    },
    {
        "content": "<p>I don't use that folder structure, and it seems  the sushi folder structure and integration may cause you issues there.</p>",
        "id": 202691167,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593698130
    },
    {
        "content": "<p>What folder structure do use use? does it work?</p>",
        "id": 202692189,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1593698535
    },
    {
        "content": "<p>why not have the template on the parent above the fsh folder?</p>",
        "id": 202697036,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593700680
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/QyaW0sfFXxViKLg3qnd8wmJ9/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/QyaW0sfFXxViKLg3qnd8wmJ9/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/QyaW0sfFXxViKLg3qnd8wmJ9/image.png\"></a></div>",
        "id": 202698083,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593701153
    },
    {
        "content": "<p>this works for me (but I don't want sushi to take over my IG, whereas I think you probably want that)</p>",
        "id": 202698235,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593701218
    },
    {
        "content": "<p>others can advise what is the best way to keep things intact, but the approach above makes sure that fsh/sushi is simply another way to provide some content to the IG. I haven't tried the new config file approach, so i hope I am not misleading you</p>",
        "id": 202698486,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593701328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> has better advice</p>",
        "id": 202698538,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593701354
    },
    {
        "content": "<p>Yes, that works for the template folder, but then SUSHI fails to auto-generate the pages section in the IG (which was one of the reasons i wanted to switch to the new config-approach). So, two mutually exclusive workarounds for two maybe-bugs.... <br>\nStill, thanks for the advice!</p>",
        "id": 202698715,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1593701430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221444\">@Noemi Deppenwiese</span> -- we're currently looking at how we copy things during the build and will be considering a more liberal approach.  As it is now, SUSHI only copies over <em>certain</em> folders -- so custom template folders are not copied.  We recognize that it may make more sense to just copy over everything (even things SUSHI doesn't recognize / understand).  Tagging <span class=\"user-mention\" data-user-id=\"239822\">@Nick Freiter</span> since he is doing this work.</p>\n<p>For now, I think you could apply a hybrid strategy of what Jose recommends.  I think you can put your custom template folder <em>at the same level</em> as the <code>fsh</code> folder (so <em>outside</em> the <code>fsh</code> folder) -- but still put your pages in <code>fsh/ig-data/pagecontent</code> (or <code>pages</code>).  Then you still benefit from the advantages of the SUSHI processing on your pages, but the IG Publisher will also be able to find your custom template.</p>",
        "id": 202712464,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1593707732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> I am trying to have something that works but now sushi is asking me for a config.yaml - my IG wass already building OK, so how can I tell sushi to not change anything, just produce the profiles?</p>",
        "id": 202713914,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593708467
    },
    {
        "content": "<p>concretely, why do I now need a config.yaml file, I just want sushi to generate the profiles - can we remove that need? Even the minimal file is already defining properties that are defined elsewhere, so that seems a bit invasive.</p>",
        "id": 202714374,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593708707
    },
    {
        "content": "<p>Here's the minimum config.yaml that will just use your FSH files. <a href=\"/user_uploads/10155/yJ5gkHc4oqwsj-8m3XDwn-D9/config.yaml\">config.yaml</a></p>\n<p>As far as I know, you just have to update canonical to be the canonical that you want for your guide, as SUSHI needs that to generate proper URLs for the various artifacts.</p>",
        "id": 202715173,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1593709122
    },
    {
        "content": "<p>since we have FSHOnly set to true, many of the other variables are irrelevant.</p>\n<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> Although I think that Jose's use of SUSHI is not in line with the rest of us, he does have a point.  If I set FSHOnly to true, many of the other currently mandatory variables are ignored, so we might need to change the required nature of them.</p>",
        "id": 202715437,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1593709217
    },
    {
        "content": "<p>thanks Jean</p>",
        "id": 202715652,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593709295
    },
    {
        "content": "<p>that still duplicates data from what I have in my ig.ini, etc. files</p>",
        "id": 202715867,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593709378
    },
    {
        "content": "<p>Sure, as I said, you need those variables or SUSHI will complain, but other than canonical, it can be anything since it appears to get ignored when FSHOnly is set to true.</p>",
        "id": 202715940,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1593709416
    },
    {
        "content": "<p>And please don't mind but it's not that my \"use of sushi is not in line with the rest of us\". I am doing this to actually add sushi to the standard IG structure.<br>\nI do expect sushi to do its primary task - generating profiles from shorthand, without trying to step in my IG process</p>",
        "id": 202716088,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593709476
    },
    {
        "content": "<p>that's not sushi's primary task</p>",
        "id": 202716135,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1593709495
    },
    {
        "content": "<p>it hasn't been for awhile.</p>",
        "id": 202716160,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1593709506
    },
    {
        "content": "<p>ok. Sushi's primary task is not to parse shorthand?</p>",
        "id": 202716185,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593709520
    },
    {
        "content": "<p>no, SUSHI's primary task is to create an IG from FSH files.</p>",
        "id": 202716259,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1593709551
    },
    {
        "content": "<p>as part of that, it does parse shorthand, but there is a lot of other stuff that it does and the required variables in the config reflects that primary use case.</p>",
        "id": 202716398,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1593709606
    },
    {
        "content": "<p>what you really need is the IGPublisher to be understand FSH files natively and generate FHIR artifacts from those.</p>",
        "id": 202716492,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1593709642
    },
    {
        "content": "<p>I was not aware of that decision but anyway - my need was just to align the 2 \"worlds\" - those that use tools like Forge etc to generate profiles, and trifolia and other IG editors, and those that only use sushi.</p>",
        "id": 202716566,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593709670
    },
    {
        "content": "<p>But I agree that the team can make it slightly better for you by identifying the proper set of config variables that are needed by SUSHI if someone wants a FSHOnly use of the compiler.</p>",
        "id": 202716771,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1593709759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"192166\">Jean Duteau</span> <a href=\"#narrow/stream/215610-shorthand/topic/Custom.20template.20folder/near/202716492\">said</a>:</p>\n<blockquote>\n<p>what you really need is the IGPublisher to be understand FSH files natively and generate FHIR artifacts from those.</p>\n</blockquote>\n<p>no, what we need is a shorthand parser that does its job, handles logical models, can do reverse parsing... and leave the IG stuff for those tools, or provide an additional optional path</p>",
        "id": 202716775,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593709761
    },
    {
        "content": "<p>I thought there was an idea to split the functionalities in sushi between fsh / IG.</p>",
        "id": 202716958,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593709858
    },
    {
        "content": "<p>Which would be very good because I am using the standard toolset, building that up, and I don't want every discussion to be that I have to choose</p>",
        "id": 202717022,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593709889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"192166\">Jean Duteau</span> <a href=\"#narrow/stream/215610-shorthand/topic/Custom.20template.20folder/near/202715437\">said</a>:</p>\n<blockquote>\n<p>since we have FSHOnly set to true, many of the other variables are irrelevant.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> Although I think that Jose's use of SUSHI is not in line with the rest of us, he does have a point.  If I set FSHOnly to true, many of the other currently mandatory variables are ignored, so we might need to change the required nature of them.</p>\n</blockquote>\n<p>Jose and I had a private chat about this and we agree with the following changes (if you'll humour us in telling you what to do!):<br>\nShort-term: have FSHOnly = true in the config mean that only the config variables are needed to do FSH parsing are required<br>\nLong-term: have FSHOnly = true mean that it assumes that the input/* files exist and that it can find any paths and such that it needs by looking at those instead of needing any config at all.  This might also mean changing FSHOnly into a command-line flag to SUSHI.</p>",
        "id": 202720986,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1593711681
    },
    {
        "content": "<p>I guess it's good to have passionate users. ;-)</p>\n<p>So... I agree that if <code>FSHOnly</code> is set, we should be more lax about required properties in the <code>config.yaml</code>.  The addition of the <code>FSHOnly</code> flag was late-breaking, so if SUSHI requires properties that aren't actually necessary in that case, then it's an oversight (not intentional).</p>\n<p>We do plan to separate the Implementation Guide features out of SUSHI and into their own library/tool (which can be invoked as part of the SUSHI process as well).  We think it makes sense to separate the concerns, and in an ideal world, we hope to see IG features move into the IG Publisher to the extent that our IG tool is no longer necessary.</p>\n<p>I'm not sure if I fully understand the proposed long-term solution.  Is it that if <code>FSHOnly</code> is used, SUSHI looks for an <code>ImplementationGuide</code> resource in <code>input/</code> and uses that to dig out the canonical? One thing we've talked about is having a classic FHIR project structure, with <em>no fsh folder</em>, and putting your .fsh files in <code>input/*</code> just like your non-FSH files.  SUSHI then finds and processes these and puts the output into a special <code>temp/sushi</code> folder that the IG Publisher knows to look for -- so it will include the SUSHI outputs in its processing.  This would eliminate a lot of the confusion that the <code>fsh/ig-data</code> creates.</p>",
        "id": 202727591,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1593714692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/215610-shorthand/topic/Custom.20template.20folder/near/202727591\">said</a>:</p>\n<blockquote>\n<p>I'm not sure if I fully understand the proposed long-term solution.  Is it that if <code>FSHOnly</code> is used, SUSHI looks for an <code>ImplementationGuide</code> resource in <code>input/</code> and uses that to dig out the canonical? One thing we've talked about is having a classic FHIR project structure, with <em>no fsh folder</em>, and putting your .fsh files in <code>input/*</code> just like your non-FSH files.  SUSHI then finds and processes these and puts the output into a special <code>temp/sushi</code> folder that the IG Publisher knows to look for -- so it will include the SUSHI outputs in its processing.  This would eliminate a lot of the confusion that the <code>fsh/ig-data</code> creates.</p>\n</blockquote>\n<p>Yes, I'm not sure what variables it needs to output the various FHIR artifacts from the fsh files, but the idea is that it would simply use the ImplementationGuide resource (or the package.json or ig.ini or whatever files that I don't care about now that I use SUSHI) to get what it needs.  Your even longer term solution of real integration with the IG Publisher would be even better for Jose and who want straight FSH parsing.</p>",
        "id": 202728240,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1593714965
    },
    {
        "content": "<p>this is the minimal config that made it work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example.fhir.uv.myig (1)</span>\n<span class=\"nt\">canonical</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://hl7.org/fhir/uv/myig (2)</span>\n<span class=\"nt\">version</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.2.0 (1)</span>\n<span class=\"nt\">fhirVersion</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">4.0.1 (1)</span>\n<span class=\"nt\">FSHOnly</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n<span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">YourComputableMyIGNameHere (1)</span>\n<span class=\"nt\">status</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">draft (1)</span>\n</code></pre></div>",
        "id": 202738000,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593719825
    },
    {
        "content": "<p>(1) is an attribute that I copied from the ig.xml<br>\n(2) comes from the package-list.json</p>",
        "id": 202738077,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593719872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/215610-shorthand/topic/Custom.20template.20folder/near/202727591\">said</a>:</p>\n<blockquote>\n<p>Is it that if <code>FSHOnly</code> is used, SUSHI looks for an <code>ImplementationGuide</code> resource in <code>input/</code> and uses that to dig out the canonical?</p>\n</blockquote>\n<p>yes</p>",
        "id": 202738233,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593719936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/215610-shorthand/topic/Custom.20template.20folder/near/202727591\">said</a>:</p>\n<blockquote>\n<p>One thing we've talked about is having a classic FHIR project structure, with <em>no fsh folder</em>, and putting your .fsh files in <code>input/*</code> just like your non-FSH files.  SUSHI then finds and processes these and puts the output into a special <code>temp/sushi</code> folder that the IG Publisher knows to look for -- so it will include the SUSHI outputs in its processing. </p>\n</blockquote>\n<p>If you put the fish and the meat together in the same tank (which may be OK but I'd keep an eye on the naming convention and folder structure for that), why do you put the parsed output in a temp folder and not back in the tank?</p>",
        "id": 202738721,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593720167
    },
    {
        "content": "<blockquote>\n<p>why do you put the parsed output in a temp folder and not back in the tank?</p>\n</blockquote>\n<p>We want to keep the true <strong>source</strong> files completely separate from the <strong>output</strong> files -- otherwise things get confusing, it's difficult to know what to check in and what not to check in, and it's difficult to do a true <em>clean</em> build since you would need to delete the output files one-by-one since they're mixed in with source files.</p>",
        "id": 202757687,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1593734892
    },
    {
        "content": "<p>We're aware of how those config params map to the other files; because SUSHI uses the config to generate the other files.  But I think we're on the same page that most of them should not be necessary for a FSH-only build.  The two caveats are: (1) I don't think an <code>ImplementationGuide</code> is guaranteed to be present in every project, and (2) <code>package-list.json</code> is only required for HL7 projects.  So if there is no existing <code>ImplementationGuide</code> or <code>package-list.json</code> (or <code>package.json</code>) then SUSHI would need to get the canonical URL from <em>somewhere</em> (and that <em>somewhere</em> would probably be the <code>config.yaml</code>).</p>",
        "id": 202757942,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1593735212
    },
    {
        "content": "<p>But... the suggestion is noted.  It seems like a reasonable mode to support in SUSHI (the no-config mode that uses existing files if it can find them).  We'll definitely look into it.</p>",
        "id": 202758028,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1593735301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/215610-shorthand/topic/Custom.20template.20folder/near/202757942\">said</a>:</p>\n<blockquote>\n<p>So if there is no existing <code>ImplementationGuide</code> or <code>package-list.json</code> (or <code>package.json</code>) then SUSHI would need to get the canonical URL from <em>somewhere</em> (and that <em>somewhere</em> would probably be the <code>config.yaml</code>).</p>\n</blockquote>\n<p>The idea is that if sushi can get content from those files, it should, instead of failing. For now, it fails.</p>",
        "id": 202769196,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593752809
    },
    {
        "content": "<p>if I have an IG and want to add shorthand sources to it, i don't want to have to add files with duplicate data.</p>",
        "id": 202769261,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1593752893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/215610-shorthand/topic/Custom.20template.20folder/near/202727591\">said</a>:</p>\n<blockquote>\n<p>So... I agree that if <code>FSHOnly</code> is set, we should be more lax about required properties in the <code>config.yaml</code>.  The addition of the <code>FSHOnly</code> flag was late-breaking, so if SUSHI requires properties that aren't actually necessary in that case, then it's an oversight (not intentional).</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> when should we expect this to be fixed?</p>",
        "id": 203037238,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1594067530
    },
    {
        "content": "<p>We work in 2-week sprints.  We just started our current sprint on Thursday and it's fully planned out already.  So... we're probably looking at the next sprint for this, which means it would be released in 2-4 weeks.</p>",
        "id": 203039143,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1594068602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/215610-shorthand/topic/Custom.20template.20folder/near/202712464\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"221444\">Noemi Deppenwiese</span> -- we're currently looking at how we copy things during the build and will be considering a more liberal approach.  As it is now, SUSHI only copies over <em>certain</em> folders -- so custom template folders are not copied.  We recognize that it may make more sense to just copy over everything (even things SUSHI doesn't recognize / understand).  Tagging <span class=\"user-mention silent\" data-user-id=\"239822\">Nick Freiter</span> since he is doing this work.</p>\n<p>For now, I think you could apply a hybrid strategy of what Jose recommends.  I think you can put your custom template folder <em>at the same level</em> as the <code>fsh</code> folder (so <em>outside</em> the <code>fsh</code> folder) -- but still put your pages in <code>fsh/ig-data/pagecontent</code> (or <code>pages</code>).  Then you still benefit from the advantages of the SUSHI processing on your pages, but the IG Publisher will also be able to find your custom template.</p>\n</blockquote>\n<p>I finally got around to try that approach. The path needs to be <code>fsh/ig-data/input/pages</code> (without <code>ig-data</code> or <code>input</code> it does not work). Now I have both the poupulated pages section and the template folder, so thanks! <br>\n(I now get some error messages about how some of my my non-FSH resources have no id which was no problem with the IG Publisher before, but that can be solved.)</p>",
        "id": 203079665,
        "sender_full_name": "Noemi Deppenwiese",
        "timestamp": 1594111731
    },
    {
        "content": "<p>Thanks for following up, <span class=\"user-mention\" data-user-id=\"221444\">@Noemi Deppenwiese</span>.  I'm glad to hear it is working!  Sorry about the confusion on <code>pages</code> -- I didn't write up the full path because I already had done that for <code>pagecontent</code> and I guess I was getting lazy!  As for the <code>id</code> requirement -- yes, SUSHI currently requires <code>id</code>s -- as it uses them to organize the resources internally as well as in its file-naming convention when it exports them.  That's probably something we can look at in the future.</p>",
        "id": 203091043,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1594121489
    },
    {
        "content": "<p>so i understand that sushi is going to get the canonical URL from the input/ implementationGuide. What element in there? It does not seem to be following the .url element.</p>",
        "id": 203501067,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594384546
    },
    {
        "content": "<p>SUSHI gets the canonical URL from the config.yaml file, and the URL is specified using a <code>canonical</code> field.</p>",
        "id": 203504440,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1594386747
    },
    {
        "content": "<p>so i must have a config.yaml? is that new?</p>",
        "id": 203504884,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594387008
    },
    {
        "content": "<p>That was new in 0.13 and should have been created for you</p>",
        "id": 203504952,
        "sender_full_name": "David Pyke",
        "timestamp": 1594387059
    },
    {
        "content": "<p>how is it created for me? And if it is created for me, then how do I get the right caonical in there?</p>",
        "id": 203505095,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594387141
    },
    {
        "content": "<p>where is config.yaml documented?</p>",
        "id": 203505316,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594387270
    },
    {
        "content": "<p>what I can find on this config.yaml indicates it is only when there is no canonical in the implementationguide. I have one there, it just doesn't seem to be used consistently</p>",
        "id": 203505742,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594387511
    },
    {
        "content": "<p>so I should not need a config.yaml.  right?</p>",
        "id": 203506189,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594387739
    },
    {
        "content": "<p><a href=\"https://build.fhir.org/ig/HL7/fhir-shorthand/sushi.html#configuration-file\">https://build.fhir.org/ig/HL7/fhir-shorthand/sushi.html#configuration-file</a></p>",
        "id": 203506193,
        "sender_full_name": "David Pyke",
        "timestamp": 1594387743
    },
    {
        "content": "<p><a href=\"http://build.fhir.org/ig/HL7/fhir-shorthand/branches/master/sushi.html#configuration-file\">http://build.fhir.org/ig/HL7/fhir-shorthand/branches/master/sushi.html#configuration-file</a> has documentation, and <a href=\"https://github.com/FHIR/sushi/releases/tag/v0.13.0\">https://github.com/FHIR/sushi/releases/tag/v0.13.0</a> contains some additional documentation.</p>\n<p>Assuming you have an existing FSH project with a working SUSHI configuration, SUSHI should create a config.yaml file from that configuration when you run an updated version of SUSHI on that project. SUSHI does not get its configuration from <code>input/ImplementationGuide</code>.  You will always need a config.yaml, since that is how SUSHI is configured.</p>",
        "id": 203506221,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1594387761
    },
    {
        "content": "<p>Mine is in my fsh directory</p>",
        "id": 203506233,
        "sender_full_name": "David Pyke",
        "timestamp": 1594387770
    },
    {
        "content": "<p>well, sushi did not make a config.yaml</p>",
        "id": 203506314,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594387804
    },
    {
        "content": "<p>and the documentation says that it will get caonical from the ig...</p>",
        "id": 203506339,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594387822
    },
    {
        "content": "<p>so I am confused</p>",
        "id": 203506349,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594387833
    },
    {
        "content": "<p>is this a replacement for the package.json in the fsh directory?</p>",
        "id": 203506529,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594387923
    },
    {
        "content": "<p>I did find the bad canonical url in the package.json</p>",
        "id": 203506762,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594388049
    },
    {
        "content": "<p>Yes, SUSHI used to get its configuration from package.json, now it is configured by config.yaml. This is a sample repo that shows how a project using SUSHI might be structured with config.yaml <a href=\"https://github.com/standardhealth/fsh-devdays-exercise\">https://github.com/standardhealth/fsh-devdays-exercise</a>. It's difficult to say why SUSHI did not make a config.yaml for you, perhaps you are using an older version of SUSHI?</p>",
        "id": 203506800,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1594388065
    },
    {
        "content": "<p>so wondering if I continue to manage the package.json, or move this into config.yaml</p>",
        "id": 203506808,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594388068
    },
    {
        "content": "<p>I updated my sushi today. is that fresh enough?</p>",
        "id": 203506872,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594388116
    },
    {
        "content": "<p>So I understand I should switch to config.yaml, and remove package.json from my fsh tank. right?</p>",
        "id": 203506916,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594388153
    },
    {
        "content": "<p>That should be plenty fresh, config.yaml is the way to configure SUSHI going forward, and package.json is deprecated. SUSHI is supposed to generate config.yaml from your existing package.json, so I'd like to know why that isn't happening since it seems to be a bug, any extra info you can give us to reproduce that is appreciated.</p>",
        "id": 203507428,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1594388431
    },
    {
        "content": "<p>I updated my repo, and you can look at it.  <a href=\"https://github.com/JohnMoehrke/MHD-fsh\">https://github.com/JohnMoehrke/MHD-fsh</a></p>",
        "id": 203508311,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594388924
    },
    {
        "content": "<p>so I just removed package.json, and created what I think is the right config.yaml... now sushi fails with an error that seems to indicate it must find a package.json</p>",
        "id": 203509168,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594389399
    },
    {
        "content": "<p>Run Sushi on C:\\Users\\john.moehrke\\Git\\MHD-fsh                                   (00:00.0072)<br>\nSushi: info  Running SUSHI v0.12.6                                               (00:01.0318)<br>\nSushi: info  Current FSH tank conforms to an IG Publisher context. Output will be adjusted accordingly. (00:01.0320)<br>\nSushi: error No package.json in FSH definition folder.                           (00:01.0323)</p>",
        "id": 203509174,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594389402
    },
    {
        "content": "<p>I restored my original package.json,.. and it is building... so sushi does still require package.json</p>",
        "id": 203510138,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594389866
    },
    {
        "content": "<blockquote>\n<p>Sushi: info Running SUSHI v0.12.6</p>\n</blockquote>\n<p>It seems your SUSHI hasn't updated, could you again try <code>npm install -g fsh-sushi</code>? And then run <code>sushi -v</code> to see which version you have? The current version of SUSHI is 0.14.0, and 0.12.6 is an old version that uses package.json</p>",
        "id": 203511866,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1594390868
    },
    {
        "content": "<p>now at v0.14.0</p>",
        "id": 203512091,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594390985
    },
    {
        "content": "<p>Ok, then v0.14.0 version should work with a config.yaml file.</p>",
        "id": 203512263,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1594391076
    },
    {
        "content": "<p>getting further. but now I have my implementationGuide file (xml) and sushi creates an implementationGuide file (json).</p>",
        "id": 203514148,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594391908
    }
]