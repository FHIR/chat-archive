[
    {
        "content": "<p>I've got a profile with a number of extensions - including one on a primitive type (.status).   When I create an example, the extension on the primitive is at the top of the instance with all the others. Would it be feasible to have the extension immediately follow the primitive value?</p>",
        "id": 213068213,
        "sender_full_name": "David Hay",
        "timestamp": 1602525284
    },
    {
        "content": "<p>I don't understand. Do you want to extend resource.status?</p>",
        "id": 213070425,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1602526751
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>* status = #active\n* status.extension[regimen-under-review].valueCode = #**MiHIN Public Health Reporting**\n</code></pre></div>\n\n\n<p>should become:</p>\n<div class=\"codehilite\"><pre><span></span><code> &quot;status&quot;: &quot;active&quot;,\n &quot;_status&quot;: {\n    &quot;extension&quot;: [\n      {\n        &quot;url&quot;: &quot;http://clinfhir.com/fhir/StructureDefinition/regimen-under-review&quot;,\n        &quot;valueCode&quot;: &quot;review&quot;\n      }\n    ]\n  },\n</code></pre></div>\n\n\n<p>and it does - it's just that the extension is at the top of the instance, separated from the primary value.  Style over substance!</p>",
        "id": 213071578,
        "sender_full_name": "David Hay",
        "timestamp": 1602527432
    },
    {
        "content": "<p>ah, i see now. but isn't that json sorting?</p>",
        "id": 213073240,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1602528341
    },
    {
        "content": "<p>I believe that this is how sushi outputs it...</p>",
        "id": 213076975,
        "sender_full_name": "David Hay",
        "timestamp": 1602530562
    },
    {
        "content": "<p>That's what I need to look into.  Does SUSHI have control over this or is it something that happens in the JSON serialization?  Based on the way SUSHI works, I'd actually expect that SUSHI <em>builds</em> the JSON in the order <span class=\"user-mention\" data-user-id=\"191321\">@David Hay</span> expects -- so it is a little surprising that it comes out in a different order.  But it's possible that I may be remembering SUSHI's approach incorrectly -- so we need to check it out.</p>",
        "id": 213078761,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1602531753
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191321\">@David Hay</span> -- the newly announced SUSHI 1.0.0 Beta 4 now generates instances w/ any <code>_</code> properties adjacent to their corresponding non-<code>_</code> properties.</p>",
        "id": 215637140,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1604521798
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 215639124,
        "sender_full_name": "David Hay",
        "timestamp": 1604522800
    }
]