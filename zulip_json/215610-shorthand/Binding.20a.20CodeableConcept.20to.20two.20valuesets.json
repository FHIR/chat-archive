[
    {
        "content": "<p>I'm likely trying to do this wrong -- would love advice about 1) how to narrowly fix the specific example here, and 2) what I should be doing instead ;-)</p>\n<p>I want to describe a CodeableConcept profile that says \"I must contain a Coding from VS1 and a Coding from VS2\" (technically I want something even narrower: \"I must contain the specific coding X and the specific coding Y\", but I'm papering over this by defining two ValueSets each with a single concept). I'm naively writing:</p>\n<div class=\"codehilite\"><pre><span></span><code>Profile: C19ServiceCodeableConcept\nParent: CodeableConcept\nId: c19-service-codeable-concept\n* . from VS1\n* . from VS2\n</code></pre></div>\n<p>... but I can't use <code>.</code> in this way to refer to the CodeableConcept (\"error Cannot bind value set to ; \"). Is there something like <code>$this</code> or <code>self</code> that I can write instead, or is my idea just wrong, or is this a rational goal that just isn't supported by syntax today? (Writing <code>* coding from VS1</code> doesn't express my intended meaning, because I don't want <em>all codings</em> bound.)</p>",
        "id": 233680131,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617897688
    },
    {
        "content": "<p>StructureDefinition itself doesn't allow multiple bindings.  If you want multiple bindings, you need to slice coding and define different bindings per slice.</p>",
        "id": 233691136,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1617901790
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> . I'll do this (I'm already using slicing at the level of the resource that contains this CodeableConcept in an array, but I think I need it in both places).</p>",
        "id": 233691425,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617901890
    },
    {
        "content": "<p>Here's what I put together, then: <a href=\"https://fshschool.org/FSHOnline/#/share/39Vr4Lx\">https://fshschool.org/FSHOnline/#/share/39Vr4Lx</a></p>\n<p>I'd love feedback on whether this is a valid way (and if so: the preferred way?) to say \"serviceType[] needs to include at least one CodeableConcept that includes at least these two specific Codings\".</p>",
        "id": 233693846,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617902681
    },
    {
        "content": "<p>(FYI <span class=\"user-mention\" data-user-id=\"191647\">@Michael O'Keefe</span>  this relates to <a class=\"stream\" data-stream-id=\"281612\" href=\"/#narrow/stream/281612-smart.2Fscheduling-links\">#smart/scheduling-links</a>; figured I'd use it as an excuse to learn a bit more FSH before just asking you to add this to the <a href=\"https://github.com/inferno-community/fsh-smart-scheduling-links/tree/main/input/fsh\">profiles</a>.)</p>",
        "id": 233694036,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617902752
    },
    {
        "content": "<p>I don't see anything 'wrong' - but you're not actually specifying multiple bindings?</p>",
        "id": 233694722,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1617902979
    },
    {
        "content": "<p>Actually for my discriminator path, I realize this isn't being validated by sushi at all, so I may be doing it wrong:</p>\n<div class=\"codehilite\"><pre><span></span><code>Profile: C19ServiceCodeableConcept\nParent: CodeableConcept\nId: c19-service-codeable-concept\n* coding ^slicing.discriminator.type = #pattern\n* coding ^slicing.discriminator.path = &quot;.&quot;\n</code></pre></div>\n<p>Is <code>\".\"</code> the right way to say it? Or should it be <code>\"$this\"</code>, or something else? (If I change <code>\".\"</code> to <code>\"NO#$$BAD!\"</code>, sushi happily passes this through to its output, which made me lose confidence.)</p>",
        "id": 233694760,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617902990
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    immunizationAppointment 1..1 and\n    c19ImmunizationAppointment 1..1\n</code></pre></div>\n<p>This requires that both required codings are present... I hope?</p>",
        "id": 233694866,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617903015
    },
    {
        "content": "<p>(If I needed to bind to two value sets, I could do that with additional lines... but since the codings are directly specified, binding to a valueset would be superfluous, right <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> ?)</p>",
        "id": 233694988,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617903053
    },
    {
        "content": "<p>Specifying codings directly is fine.  You had just asked about multiple bindings, so I was a bit confused when you weren't actually doing that :)</p>",
        "id": 233696885,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1617903714
    },
    {
        "content": "<p>(Sorry, I had updated my initial question to explain this nuance!)</p>\n<blockquote>\n<p>(technically I want something even narrower: \"I must contain the specific coding X and the specific coding Y\", but I'm papering over this by defining two ValueSets each with a single concept).</p>\n</blockquote>",
        "id": 233708112,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617907655
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> -- glad to see you giving FSH a try!  I think you're pretty close to what you want to do.  You <em>do</em> want to use <code>$this</code> as your discriminator path.</p>\n<p>Re this:</p>\n<div class=\"codehilite\"><pre><span></span><code>* serviceType[c19Service] ^type.profile = &quot;http://example.org/StructureDefinition/c19-service-codeable-concept&quot;\n</code></pre></div>\n<p>you asked:</p>\n<blockquote>\n<p>Is there a way to infer \"This IG's prefix\"?</p>\n</blockquote>\n<p>and the answer is <em>yes</em>.  You can use the <code>Canonical</code> function to do that:</p>\n<div class=\"codehilite\"><pre><span></span><code>* serviceType[c19Service] ^type.profile = Canonical(C19ServiceCodeableConcept)\n</code></pre></div>\n<p>But actually there is an even simpler way to accomplish what you are trying to do:</p>\n<div class=\"codehilite\"><pre><span></span><code>* serviceType[c19Service] only C19ServiceCodeableConcept\n</code></pre></div>\n<p><a href=\"https://fshschool.org/FSHOnline/#/share/3uANN7w\">https://fshschool.org/FSHOnline/#/share/3uANN7w</a></p>\n<p>I'll also confirm, SUSHI does <em>not</em> attempt to validate slicing parameters or individual slices.  That's a level of complexity we did not want to take on and feel pretty ok about that since the IG Publisher will do that validation for you when you build it there.</p>",
        "id": 233723024,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617913841
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> for the encouragement, and for answering the questions I knew how to ask, and for answering the questions I didn't know how to ask!</p>",
        "id": 233723313,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617913959
    },
    {
        "content": "<p>Yep, you can use <code>only</code> to narrow a choice to a smaller subset of choices (or a single item) - but you can <em>also</em> use <code>only</code> to narrow a type to a profile (or a set of profiles).</p>\n<p>All that said, I probably should have mentioned: sometimes the validator gets cranky when you slice an array and then slice a sub-property within that array's items.  So... although I think what you're doing is technically valid, you might want to double-check that the validator handles it OK.  You can do that by creating an example of the <code>VaccineSchedule</code> and seeing if the IG Publisher reports any validation errors on it due to nested slicing.  Hopefully not! (BTW -- I created the simplest of examples here: <a href=\"https://fshschool.org/FSHOnline/#/share/2QciCAs\">https://fshschool.org/FSHOnline/#/share/2QciCAs</a>).</p>",
        "id": 233725031,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617914695
    },
    {
        "content": "<blockquote>\n<p>but you can also use only to narrow a type to a profile (or a set of profiles).</p>\n</blockquote>\n<p>I was just reading <a href=\"http://hl7.org/fhir/uv/shorthand/reference.html#type-rules\">http://hl7.org/fhir/uv/shorthand/reference.html#type-rules</a> -- it wasn't clear to me that you can refer to profiels this way. is this implied by \"&lt;element&gt; only {datatype}\" ?</p>",
        "id": 233725160,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617914748
    },
    {
        "content": "<blockquote>\n<p>You can do that by creating an example of the VaccineSchedule and seeing if the IG Publisher reports any validation errors on it due to nested slicing. </p>\n</blockquote>\n<p>Yeah, it's never clear to me what the existing tools will support, and where they might break. Any thoughts on how to incorporate this kind of \"try and see\" validation functionality into FSH Online?</p>",
        "id": 233725326,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617914829
    },
    {
        "content": "<p>I guess the challenge would be generating positive and negative examples, and making sure the validator deals with both.</p>",
        "id": 233725632,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617914978
    },
    {
        "content": "<p>Yes, I think <code>&lt;element&gt; only {datatype}</code> covers that use case, but also covers the use case of restricting a choice to a single type.  We could probably make that more clear.  There is also some narrative in the spec that addresses it:</p>\n<blockquote>\n<p>Following standard profiling rules established in FHIR, the data type(s) in a type rule MUST always be more restrictive than the original data type. For example, if the parent data type is Quantity, it can be replaced by SimpleQuantity, since SimpleQuantity is a profile on Quantity (hence more restrictive than Quantity itself), but cannot be replaced with Ratio, because Ratio is not a type of Quantity.</p>\n</blockquote>",
        "id": 233726077,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617915171
    },
    {
        "content": "<p>As for FSH Online, \"try and see\" w/ the Java validator is a little tricky because FSH Online is a fully client-side web application. It is hosted on GitHub pages and has no backend API/database/server -- only the standard GH Pages HTTP server.  So... we can't run Java on the backend, and we can't run Java on the frontend, so... the only way it would work is if there was some other service we could post the FHIR definitions to for validation.</p>",
        "id": 233726498,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617915370
    },
    {
        "content": "<p>And for a variety of reasons we've been intentionally avoiding having to acquire and maintain a real backend server (hence the use of GitHub pages).</p>",
        "id": 233726623,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617915434
    },
    {
        "content": "<blockquote>\n<p>the only way it would work is if there was some other service we could post the FHIR definitions to for validation.</p>\n</blockquote>\n<blockquote>\n<p>And for a variety of reasons we've been intentionally avoiding having to acquire and maintain a real backend server (hence the use of GitHub pages).</p>\n</blockquote>\n<p>Yeah. I get it. Sounds like writing a from-scratch validator in typescript (+ terminology packs) is the only thing for it ;-)</p>",
        "id": 233728492,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617915879
    },
    {
        "content": "<p>A near-term QoL step might be \"click here to download a bash script that downloads your profiles from fshonline, loads them into the FHIR jar validator, and invokes it\"</p>",
        "id": 233728649,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617915927
    },
    {
        "content": "<p>Love your use of bitly for state management BTW ;-)</p>",
        "id": 233728967,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1617916018
    },
    {
        "content": "<p>Ha.  Yeah, without a backend server we had to get creative for having some way to store and recall state.  Just don't try to type too much information in there. ;-)</p>",
        "id": 233759543,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617935518
    },
    {
        "content": "<p>My idea for an \"upgrade\" is to support a GitHub integration so users can auth against GitHub and use gists for storing/retrieving longer FSH snippets.</p>",
        "id": 233759719,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617935650
    }
]