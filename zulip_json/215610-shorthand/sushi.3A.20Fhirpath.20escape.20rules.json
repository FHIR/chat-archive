[
    {
        "content": "<p>We are using sushi extensively to create testscript resources containing a lot of FHIRpath Expressions.<br>\nWriting fhirpath in FSH is quite cumbersome as you have to pay attention to the escaping rules of FSH.</p>",
        "id": 258562781,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1634828847
    },
    {
        "content": "<p>It would be nice to have a way to just copy in the fhirpath expressions and use them without escaping.</p>",
        "id": 258563345,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1634829017
    },
    {
        "content": "<p>Is there an escaping/un-escaping tool FHIRpath &lt;-&gt; FSH ?</p>",
        "id": 258563874,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1634829199
    },
    {
        "content": "<p>Can you provide some examples of the types of things you're commonly needing to escape?</p>",
        "id": 258569687,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1634831247
    },
    {
        "content": "<p>It is mostly generic FHIRPath expressions that look like this: </p>\n<div class=\"codehilite\"><pre><span></span><code>component.where(code.coding.system = &#39;http://loinc.org&#39; and code.coding.code = &#39;8462-4&#39;\\).exists(\\)\ncomponent.select(valueQuantity.code = &#39;mm[Hg]&#39;\\).allTrue(\\)\ncomponent.all(valueSampledData.exists(\\)\\)\\)\ncomponent.all(valueSampledData.origin.exists(\\)\\)\\)\nentry.resource.all((code.coding.where(code = &#39;8462-4&#39; and system = &#39;http://loinc.org&#39;\\).exists(\\) or component.where(code.coding.where(code = &#39;8462-4&#39; and system = &#39;http://loinc.org&#39;\\)\\).exists(\\)\\) and (valueQuantity.where($this.value = 107\\).exists(\\) or component.valueQuantity.where($this.value = 107\\).exists(\\)\\)\\)\n</code></pre></div>\n<p>Notice how the escaping gets a bit crazy at times and impacts readability. We also have some cases in which we provide descriptions that contain i.e. a comma which needs to be escaped.</p>",
        "id": 258571385,
        "sender_full_name": "Yannick BÃ¶rner",
        "timestamp": 1634831928
    },
    {
        "content": "<p>Oh, I see.  It looks like you are passing FHIRPath as an argument to parameterized RuleSets?  Is that right?  Because I don't think you'd need to escape <code>)</code> and <code>,</code> otherwise.</p>",
        "id": 258585105,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1634837060
    },
    {
        "content": "<p>yes you are right <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span></p>",
        "id": 258674009,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1634887792
    },
    {
        "content": "<p>I want to come back to this issue, i ran into this issue again when nesting RuleSets in Rulesets:</p>\n<div class=\"codehilite\"><pre><span></span><code>RuleSet: inner (linkId)\n* item[+].linkId = {linkId}\n  * item[+].linkId = {linkId}_question\n\nRuleSet: outer (linkId)\n* insert inner ({linkId})\n\nInstance: Test\nInstanceOf: Questionnaire\n* insert outer (&quot;test\\, test1&quot;)\n</code></pre></div>",
        "id": 262703333,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1637845627
    },
    {
        "content": "<p>The escaping is lost after the first RuleSet -&gt; leading to an error.<br>\nWould it be possible for the FSH Syntax/SUSHI to just accept Strings as they are?  ( ignore <code>,</code>and <code>)</code>if they are inside of a <code>\"...\"</code>block?)</p>",
        "id": 262703334,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1637845627
    },
    {
        "content": "<p><a href=\"https://fshschool.org/FSHOnline/#/share/3HV93fK\">https://fshschool.org/FSHOnline/#/share/3HV93fK</a></p>",
        "id": 262704358,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1637846303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>  can i make this a feature request issue? Or is something from the FSH grammar blocking this idea?</p>",
        "id": 263304008,
        "sender_full_name": "Patrick Werner",
        "timestamp": 1638371165
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191451\">@Patrick Werner</span> -- parameterized rule sets are Trial-Use in FSH, so we do have the liberty to make changes like this.  Feel free to propose a change on the FHIR issue tracker (as I think that's where spec feature requests are supposed to go).  Make sure you indicate it is for the FHIR Shorthand spec.  As for whether or not we do it, I think we'll have to look at the implications and see if it adds new complications somewhere else.  I like the idea in principal, but we'll have to see if there are other consequences of making a change like this.</p>",
        "id": 263336596,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1638383931
    },
    {
        "content": "<p>So far as I see, there is nothing in the shorthand specification where it requires parsing of the strings in a general context. <br>\nThis might just be an implementation feature, which I agree, is very annoying. </p>\n<p>Related question: what does this mean for aliases? Will they also be replaced if the alias is in a text string?</p>",
        "id": 263584110,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1638540353
    },
    {
        "content": "<blockquote>\n<p>So far as I see, there is nothing in the shorthand specification where it requires parsing of the strings in a general context.</p>\n</blockquote>\n<p>I'm not sure exactly what you mean, but in the context of using parameterized RuleSets, the spec only calls out that (a) parameters are wrapped in <code>(</code> <code>)</code>, (b) each parameter is separated by <code>,</code>, (c) literal <code>,</code> and <code>)</code> must be escaped inside a parameter, and (d) whitespace between parameters is removed (<a href=\"http://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#inserting-parameterized-rule-sets\">doc</a>).  The idea was to try to simplify the rules such that it really works like raw find/replace would.  Once we get into anything much more sophisticated, we need to treat parameters more like tokens, which complicates matters in some ways and also may restrict where placeholders can be in the RuleSet.</p>\n<p>For example, imagine a RuleSet that contains a string like this: <code>\"This is a profile for {Description}\"</code>.  As it is defined today, you would just pass in <code>a patient</code> -- which would get substituted via simple find/replace.  But if we support special tokenization of the parameters (to support things like allowing strings with unescaped <code>,</code> in them), then you'd pass in <code>\"a patient\"</code> -- but it's no longer find/replace because we now need to be smart enough to know if we <em>keep</em> the wrapping <code>\"</code> (when it represents a <em>whole string</em> in the RuleSet) or we discard the wrapping <code>\"</code> (when it is <em>inside a string</em> in the RuleSet). This requires a more complicated parsing of the RuleSet before substitution.  That is, unless we also make a new rule that <code>\"</code> is <em>always</em> stripped before substitution -- but that can also be confusing to users.  So... it's not as clear as it might seem.</p>\n<blockquote>\n<p>what does this mean for aliases? Will they also be replaced if the alias is in a text string?</p>\n</blockquote>\n<p>Aliases are only allowed where a URL token would be expected in the grammar, so an alias reference inside a string would not be replaced (e.g. <code>\"The URI for LOINC is $LOINC.\"</code> would not replace the <code>$LOINC</code> alias with the LOINC URI).</p>",
        "id": 263588320,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1638542337
    },
    {
        "content": "<p>Chris, <br>\nThanks for the response. If I understand your correctly, a rule such as stated below should just work.</p>\n<blockquote>\n<ul>\n<li>insert fhirPathVariable( \"score\", \"%resource.repeat(item).where(linkId = 'score').answer.value\")</li>\n</ul>\n</blockquote>\n<p>Yet, when I run this through   sushi I get the following errors:<br>\nImporting FSH text...</p>\n<blockquote>\n<p>error extraneous input '.where(linkId' expecting {&lt;EOF&gt;, KW_ALIAS, KW_PROFILE, KW_EXTENSION, KW_INSTANCE, KW_INVARIANT, KW_VALUESET, KW_CODESYSTEM, KW_RULESET, KW_MAPPING, KW_LOGICAL, KW_RESOURCE}</p>\n</blockquote>\n<blockquote>\n<p>error Cannot find definition for Instance: \"%resource.repeat(item. Skipping rule.</p>\n</blockquote>",
        "id": 263593755,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1638544619
    },
    {
        "content": "<p>No... I think that is what was being proposed as something to consider.  As it is today, however, you need to escape all <code>)</code> except the last one so they don't get interpreted as the end of the argument list.   So you need something more like: <code>insert fhirPathVariable( \"score\", \"%resource.repeat(item\\).where(linkId = 'score'\\).answer.value\")</code> (assuming the wrapping <code>\"</code> are also intended to be literally inserted into the RuleSet).</p>",
        "id": 263600551,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1638547615
    },
    {
        "content": "<p>No... I think that is what was being proposed as something to consider. As it is today, however, you need to escape all ) except the last one so they don't get interpreted as the end of the argument list. So you need something more like: insert fhirPathVariable( \"score\", \"%resource.repeat(item\\).where(linkId = 'score'\\).answer.value\") (assuming the wrapping \" are also intended to be literally inserted into the RuleSet)</p>\n<p>Chris, I think I understand the issue (and got mine to work). Thanks.<br>\nAs you indicated above the escapes are needed in order for the parser to identify the different input parameters. Too bad this causes a somewhat strangly formatted input format. The root cause behind this that for parameterised Rule inserts we seem to make a format shift. From the shorthand - one parameter on a line starting with an '*' to a more java/C-style format (I know that it is present in Reference(xx) like format but these are behind an '=').<br>\nThis shift is responsible that input intended for the 'shorthand' domain is to interpreted in the 'java-like' domain. The escapes are needed to resolve this. </p>\n<p>This make me wonder what the more shorthand way of addressing this would be.<br>\nA ruleset specified as</p>\n<blockquote>\n<p>RuleSet: variable( name, language, expression )\n* extension[+]<br>\n  * url = \"<a href=\"http://hl7.org/fhir/StructureDefinition/variable\">http://hl7.org/fhir/StructureDefinition/variable</a>\"<br>\n  * valueExpression<br>\n    * name = {name}<br>\n    * language = {language}<br>\n    * expression = {expression}</p>\n</blockquote>\n<p>is now inserted as:</p>\n<blockquote>\n<ul>\n<li>insert variable( \"varNam\", #text/fhirpath, \"%resource.repeat(item\\).answer.value.extension.value.aggregate($this+$total\\,0\\)\" )</li>\n</ul>\n</blockquote>\n<p>Note the escaped characters. As these are removed when the rule is nested, this makes nesting of such expressions difficult.<br>\nFrom a shorthand perspective, the trailing ')' has no direct meaning as the end of the statement is determined by the next line starting with an '*'. </p>\n<p>A more shorthand approach could be:</p>\n<blockquote>\n<ul>\n<li>insert variable<ul>\n<li>name = \"varNam\"</li>\n<li>language = #text/fhirpath</li>\n<li>expression = \"%resource.repeat(item).answer.value.extension.value.aggregate($this+$total,0)\"</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>This would be more verbose but would retain the shorthand way of providing data. It would also allow nesting of rules as the beginning and end of each parameter is obvious. Wouldn't this be a better way to provide the parameters? Or an alternative if the bracketted approach does not work?</p>",
        "id": 263819514,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1638779019
    },
    {
        "content": "<p>Thanks for the suggestion, <span class=\"user-mention\" data-user-id=\"194452\">@Bas van den Heuvel</span>.  That is an interesting approach -- and one that we had not yet considered.  There are a few implications to consider:</p>\n<ul>\n<li><code>*</code> would need to be escaped in parameter values (unless we restricted the values to only allow valid tokens like a string, number, code, etc.)</li>\n<li>It requires indenting -- which so far we've kept as a purely optional feature since some people really don't like it.  (E.g., in other cases, there is always a way to do something <em>without</em> indenting, but in this case, you <em>must</em> use indenting).</li>\n</ul>\n<p>I'm making a note to revisit parameterized RuleSets -- at which point we'll look at your suggestion, as well as Patrick's and anyone else who has ideas on how to improve this!</p>",
        "id": 263856993,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1638800862
    },
    {
        "content": "<p>Reading this thread, I wonder if two notations are needed? One would substitute the parameter as is; the other strips off a level of quoting and escaping. (Alternatively, one notation substitutes the parameter as is; the other adds quotes and escapes.) Something along the lines the following, using ! to indicate the new behaviour:</p>\n<blockquote>\n<p>RuleSet: variable( name, language, expression )  </p>\n<ul>\n<li>extension[+]<ul>\n<li>...</li>\n<li>name = {name}</li>\n<li>language = {language}</li>\n<li>expression = {!expression}</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>or</p>\n<blockquote>\n<p>insert variable( \"varNam\", #text/fhirpath, !\"%resource.repeat(item).answer.value.extension.value.aggregate($this+$total,0)\" )</p>\n</blockquote>\n<p>The second version might actually be generally useful to outside of this context--take a string and escape it properly. I haven't had my coffee yet, or thought it through fully, but is there some value here?</p>",
        "id": 263877703,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1638808755
    }
]