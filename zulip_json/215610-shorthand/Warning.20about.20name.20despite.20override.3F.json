[
    {
        "content": "<p>If I create a profile like:</p>\n<div class=\"codehilite\"><pre><span></span><code>Profile: PatientAccessOrg-v0.0.1\nParent: Organization\nDescription: &quot;Organization supporting SMART Patient Access endpoint discovery and crawling&quot;\n* ^url = &quot;https://argonaut.fhir.us/patient-access/org&quot;\n* ^name = &quot;PatientAccessOrg&quot;\n* ^version = &quot;0.0.1&quot;\n</code></pre></div>\n<p>... I'm a bit surprised to see the following warning:</p>\n<div class=\"codehilite\"><pre><span></span><code>warn  The name &quot;PatientAccessOrg-v0.0.1&quot; may not be suitable for machine processing applications such as code generation. Valid names start with an upper-case ASCII letter (&#39;A&#39;..&#39;Z&#39;) followed by any combination of upper- or lower-case ASCII letters (&#39;A&#39;..&#39;Z&#39;, and &#39;a&#39;..&#39;z&#39;), numerals (&#39;0&#39;..&#39;9&#39;) and &#39;_&#39;, with a length limit of 255 characters.\n</code></pre></div>\n\n<p>If I understand correctly, my overriding of <code>name</code> should make this warning superfluous, and in an ideal world sushi would recognize this and suppress the warning? (I'm just checking my understanding here, not critiquing sushi's output -- I recognize this is a weird example and probably an edge case, and that I can ignore it or avoid it with an ID like <code>PatientAccessOrgv001</code>)</p>",
        "id": 272311065,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645126352
    },
    {
        "content": "<p>Yeah, ideally SUSHI would recognize that you're overriding <code>^name</code> later.  But this would be kind of a weird thing to do anyway, because the bit after the <code>Profile:</code> is actually <code>name</code>.  And if you want a different <code>id</code>, then you can use <code>Id:</code>.  E.g., the recommended way to do the above would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>Profile: PatientAccessOrg\nId: PatientAccessOrg-v0.0.1\nParent: Organization\nDescription: &quot;Organization supporting SMART Patient Access endpoint discovery and crawling&quot;\n* ^url = &quot;https://argonaut.fhir.us/patient-access/org&quot;\n* ^version = &quot;0.0.1&quot;\n</code></pre></div>",
        "id": 272311561,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1645126585
    },
    {
        "content": "<p>Ah, but this breaks when I get to the next one:</p>\n<div class=\"codehilite\"><pre><span></span><code>Profile: PatientAccessOrg\nId: PatientAccessOrg-v0.0.1\n\n\nProfile: PatientAccessOrg\nId: PatientAccessOrg-v1.0.1\n</code></pre></div>\n<p>gets me</p>\n<div class=\"codehilite\"><pre><span></span><code>error Skipping Profile: a Profile named PatientAccessOrg already exists.\n</code></pre></div>",
        "id": 272311751,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645126680
    },
    {
        "content": "<p>So there's a unique <em>name</em> requirement in addition to a unique <em>id</em> requirement at the FSH level, even though the names can be non-unique at the StructureDefinition level.</p>",
        "id": 272311938,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645126747
    },
    {
        "content": "<p>(Sorry, I know I'm just kind of stumbling around here as I explore -- really appreciate the helpful suggestions and your knack for inferring what I actually want to know vs what I'm asking about, Chris ;-))</p>",
        "id": 272312008,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645126793
    },
    {
        "content": "<p>Oh, yeah, OK.  SUSHI also uses the name as a handle, so it wants it to be unique.  So you're right.  In that case you would need to do something like this if you want multiple versions with the same <code>name</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>Profile: PatientAccessOrgV001\nId: PatientAccessOrg-v0.0.1\n* ^name = &quot;PatientAccessOrg&quot;\n\nProfile: PatientAccessOrgV101\nId: PatientAccessOrg-v1.0.1\n* ^name = &quot;PatientAccessOrg&quot;\n</code></pre></div>",
        "id": 272312098,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1645126822
    },
    {
        "content": "<p>Cool. I'll take the warnings as a fair price to pay for unambiguous mappings from version-&gt;profile name (in the case of, say, <code>v10.0</code> and <code>v1.0.0</code> both looking like <code>V100</code> after lossy transform)</p>",
        "id": 272312198,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645126878
    },
    {
        "content": "<p>And if SUSHI were smart enough to not warn you about names that you override, then you _could_ do it the way you originally suggested (w/ <code>Profile: PatientAccessOrg-v0.0.1</code> and omitting the <code>Id:</code>).  I'll file a bug on SUSHI to see if we can get it to look ahead and see if <code>name</code> is overridden in a rule.</p>",
        "id": 272312309,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1645126927
    },
    {
        "content": "<p>Thanks. I'm not at all convinced that trying to publish multiple versions of a profile in a single project is useful; I'm just poking around.</p>",
        "id": 272312362,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645126958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191315\">Josh Mandel</span> <a href=\"#narrow/stream/215610-shorthand/topic/Warning.20about.20name.20despite.20override.3F/near/272312198\">said</a>:</p>\n<blockquote>\n<p>Cool. I'll take the warnings as a fair price to pay for unambiguous mappings from version-&gt;profile name (in the case of, say, <code>v10.0</code> and <code>v1.0.0</code> both looking like <code>V100</code> after lossy transform)</p>\n</blockquote>\n<p>Well... I suppose you could do this, even though it is a bit ugly:</p>\n<div class=\"codehilite\"><pre><span></span><code>Profile: PatientAccessOrgV0_0_1\nId: PatientAccessOrg-v0.0.1\n* ^name = &quot;PatientAccessOrg&quot;\n\nProfile: PatientAccessOrgV1_0_1\nId: PatientAccessOrg-v1.0.1\n* ^name = &quot;PatientAccessOrg&quot;\n</code></pre></div>",
        "id": 272312431,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1645127007
    },
    {
        "content": "<p>Or you can use <a href=\"https://fshschool.org/docs/sushi/project/#ignoring-warnings\">sushi-ignoreWarnings.txt</a> to suppress those warnings from SUSHI.  It allows regular expressions, so you wouldn't need to individually suppress every message (like you do in IGP's ignoreWarnings file).</p>",
        "id": 272312680,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1645127146
    },
    {
        "content": "<p><a href=\"https://github.com/FHIR/sushi/issues/1024\">SUSHI#1024</a> *(BTW - congrats on getting an awesome issue number).</p>",
        "id": 272314979,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1645128093
    },
    {
        "content": "<p>Thanks! *(And wow, thanks!)</p>",
        "id": 272320904,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645131177
    }
]