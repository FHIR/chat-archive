[
    {
        "content": "<p>Do aliases work in instance generation? Adding an Alias seems to produce an empty resource (resourceType only)</p>\n<div class=\"codehilite\"><pre><span></span>Instance:   drDoolittleGP\nInstanceOf: Practitioner\nAlias: extQualStatus = http://hl7.org.nz/fhir/StructureDefinition/practitioner-qualification-status\n\n\n* extension[0].url = &quot;http://hl7.org.nz/fhir/StructureDefinition/nzethnicity&quot;\n* extension[0].valueCodeableConcept.coding[0].system = &quot;https://standards.digital.health.nz/codesystem/ethnic-group-level-4&quot;\n* extension[0].valueCodeableConcept.coding[0].code = #32114\n* extension[0].valueCodeableConcept.text = &quot;Manihiki Islander&quot;\n</pre></div>",
        "id": 185037399,
        "sender_full_name": "David Hay",
        "timestamp": 1578420774
    },
    {
        "content": "<p>In general, SUSHI will expect the rules about an instance to immediately follow the declaration of the instance. In this example the Instance <code>drDoolittleGP</code> is declared, but then instead of getting a list of rules like it expects, SUSHI gets the <code>Alias</code>,  so it doesn't associate those rules with the Instance you are declaring. I think if you try like this:</p>\n<div class=\"codehilite\"><pre><span></span>Alias: extQualStatus = http://hl7.org.nz/fhir/StructureDefinition/practitioner-qualification-status\n\nInstance:   drDoolittleGP\nInstanceOf: Practitioner\n* extension[0].url = &quot;http://hl7.org.nz/fhir/StructureDefinition/nzethnicity&quot;\n* extension[0].valueCodeableConcept.coding[0].system = &quot;https://standards.digital.health.nz/codesystem/ethnic-group-level-4&quot;\n* extension[0].valueCodeableConcept.coding[0].code = #32114\n* extension[0].valueCodeableConcept.text = &quot;Manihiki Islander&quot;\n</pre></div>\n\n\n<p>You should get the resource being generated correctly,  and that Alias is still defined and can be used within the definition of the Instance.</p>",
        "id": 185039226,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1578421927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191321\">@David Hay</span> -- did SUSHI report any errors when you put the alias between the Instance metadata and the Instance rules.  I think <span class=\"user-mention\" data-user-id=\"239822\">@Nick Freiter</span> was correct in his analysis, but I would have expected SUSHI to spit out an error about those rules.</p>",
        "id": 185042377,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578423709
    },
    {
        "content": "<p>No error when around the wrong way - but it did work ok when I re-ordered it - thanks!</p>\n<p>And for my next question :)</p>\n<p>This line:</p>\n<div class=\"codehilite\"><pre><span></span> * extension[0].valueCodeableConcept = systemEthnicity#32114 &quot;Manihiki Islander&quot;\n</pre></div>\n\n\n<p>results in</p>\n<div class=\"codehilite\"><pre><span></span>{\n      &quot;url&quot;: &quot;http://hl7.org.nz/fhir/StructureDefinition/nzethnicity&quot;,\n      &quot;valueCodeableConcept&quot;: {\n        &quot;coding&quot;: [\n          {\n            &quot;code&quot;: &quot;32114&quot;,\n            &quot;system&quot;: &quot;https://standards.digital.health.nz/codesystem/ethnic-group-level-4&quot;\n          }\n        ]\n      }\n    }\n</pre></div>\n\n\n<p>Shouldn't the text element be present? And is it possible to emit the code display using the shorthand?</p>",
        "id": 185043046,
        "sender_full_name": "David Hay",
        "timestamp": 1578424036
    },
    {
        "content": "<p>Yes, it should put in the text.  That looks like a bug.  It's probably because we share some some of the code between setting codes in instances and fixing codes in profiles -- and in profiles we purposefully omit the text because usually you wouldn't want a fixed code to _require_ specific text/display.</p>",
        "id": 185051931,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578429335
    },
    {
        "content": "<p>One question we have to answer though, is when you set a CodeableConcept as you did above, would you expect that text to be reflected in the CodeableConcept.text, in the CodeableConcept.coding.display, or both?</p>",
        "id": 185052033,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578429395
    },
    {
        "content": "<p>Actually, display makes more sense I guess. Better to set the text explicitly...</p>",
        "id": 185052085,
        "sender_full_name": "David Hay",
        "timestamp": 1578429433
    },
    {
        "content": "<p>Where is the syntax for instances creation?</p>",
        "id": 185055439,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1578431631
    },
    {
        "content": "<p>I just copied what I was using for profiles - just used the InstanceOf keyword...  There is more info apparently, but the IG is currently down...</p>",
        "id": 185055876,
        "sender_full_name": "David Hay",
        "timestamp": 1578431917
    },
    {
        "content": "<p>There is some documentation on the wiki: <a href=\"https://github.com/HL7/fhir-shorthand/wiki/3.7-Instances\" target=\"_blank\" title=\"https://github.com/HL7/fhir-shorthand/wiki/3.7-Instances\">https://github.com/HL7/fhir-shorthand/wiki/3.7-Instances</a></p>\n<p>Note that referring to slices by name (in instances) does not currently work and referring to extensions still requires the <code>extension.</code> prefix (as opposed to the shorter syntax in some of the wiki examples).</p>",
        "id": 185056088,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578432079
    },
    {
        "content": "<p>ok i just had one question. Array index- are they necessary?</p>",
        "id": 185056189,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1578432145
    },
    {
        "content": "<p>If you leave out the index then it assumes index <code>[0]</code>.</p>",
        "id": 185056225,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578432179
    },
    {
        "content": "<p>i mean for the others as well</p>",
        "id": 185056235,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1578432189
    },
    {
        "content": "<p>Yeah, if you want to do anything other than the first one, then you need the indexes.  Are you suggesting that if we see a path repeated we could just assume to increment the index?</p>",
        "id": 185056273,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578432239
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"nt\">name</span><span class=\"p\">:</span>\n <span class=\"p p-Indicator\">-</span> <span class=\"nt\">family</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Costa</span>\n   <span class=\"nt\">given</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Jose</span>\n <span class=\"p p-Indicator\">-</span> <span class=\"nt\">family</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Sanches</span>\n   <span class=\"nt\">given</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Jose</span>\n</pre></div>",
        "id": 185056415,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1578432329
    },
    {
        "content": "<p>That would be interesting, but we could run into trouble when you have two array elements in the same path.  For example, what would we do with this?</p>\n<div class=\"codehilite\"><pre><span></span>* name.given = &quot;Steven&quot;\n* name.given = &quot;Brian&quot;\n</pre></div>\n\n\n<p>How do we know if the second one should be <code>name[0].given[1]</code> or <code>name[1].given[0]</code>?</p>",
        "id": 185056534,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578432406
    },
    {
        "content": "<p>not that syntax, look at my syntax above</p>",
        "id": 185056556,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1578432423
    },
    {
        "content": "<p>(I understand you may already have some syntax pattern, apologies if I am rocking the boat, but whenever possible, YAML should allows simple syntax, right?)</p>",
        "id": 185056725,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1578432522
    },
    {
        "content": "<p>Oh, I see... I missed your follow-up when I was writing that...  People have suggested something like a YAML syntax before.  There were mixed opinions.  We played with it a little early on and it felt like it didn't add a lot of value over JSON.  But I think we could revisit it at some point.</p>",
        "id": 185056742,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578432537
    },
    {
        "content": "<p>It's certainly a lot less typing!</p>",
        "id": 185056791,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578432575
    },
    {
        "content": "<p>just take it as input. I think things like [indexes] make it less short-handy.</p>",
        "id": 185057136,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1578432784
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"nt\">Instance</span><span class=\"p\">:</span>   <span class=\"l l-Scalar l-Scalar-Plain\">PatientPia</span>\n<span class=\"nt\">InstanceOf</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Patient</span>\n<span class=\"nt\">Id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pia</span>\n<span class=\"nt\">Title</span><span class=\"p\">:</span>  <span class=\"s\">&quot;Patient</span><span class=\"nv\"> </span><span class=\"s\">Pia&quot;</span>\n<span class=\"err\">*</span> <span class=\"l l-Scalar l-Scalar-Plain\">name[0].family = &quot;AnyWoman&quot;</span>\n<span class=\"err\">*</span> <span class=\"l l-Scalar l-Scalar-Plain\">name[0].given[0] = &quot;Pia&quot;</span>\n</pre></div>\n\n\n<p>This generates an empty patient resource, no names. Am I missing something obvious?</p>",
        "id": 186111673,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579534572
    },
    {
        "content": "<p>If you remove the Id: it seems to work...</p>",
        "id": 186120220,
        "sender_full_name": "David Hay",
        "timestamp": 1579541065
    },
    {
        "content": "<p>Instances don't support the <code>Id</code> metadata field.  So I think that's choking up the parser.  We have a separate bug to figure out why sometimes the parser fails silently.</p>\n<p>Since this is an instance, and <code>id</code> is a field on <code>Patient</code>, you can accomplish what you want via a normal instance setter:</p>\n<div class=\"codehilite\"><pre><span></span>* id = &quot;pia&quot;\n</pre></div>\n\n\n<p>I think we didn't support a separate <code>Id:</code> metadata field because we thought that whatever you put after <code>Instance: </code> could be / would be used as the id -- since instances don't really have anywhere to put a <em>name</em> (so we'd re-use it as <em>id</em>).  That said, it looks like we don't actually do that (export the <em>name</em> as the <em>id</em>)...  So, this seems like a good thing to discuss:</p>\n<ul>\n<li>Should we support a separate <code>Id:</code> field?</li>\n<li>If so, what does the _name_ after <code>Instance:</code> signify?  Just a handle for referencing it from other FSH instances?</li>\n<li>Or should we treat the <em>name</em> (after <code>Instance:</code>) as the <em>id</em> and leave it at that?</li>\n</ul>",
        "id": 186185641,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1579615736
    },
    {
        "content": "<p>Interestingly, this extension definition does have Id: and seems to work fine (the SD has both a name and an id field, both populated with 'hpiLocation-established'. Is there a list of 'FSH metadata' and what they do in the spec? (I couldn't find it)</p>\n<div class=\"codehilite\"><pre><span></span>Extension: hpiLocation-established\nId: hpiLocation-established\nDescription: &quot;The period over which the location is open&quot;\n//These files were generated by a script\n\n* extension 0..0\n* value[x] only Period\n</pre></div>",
        "id": 186207528,
        "sender_full_name": "David Hay",
        "timestamp": 1579628571
    },
    {
        "content": "<blockquote>\n<p>Oh, I see... I missed your follow-up when I was writing that...  People have suggested something like a YAML syntax before.  There were mixed opinions.  We played with it a little early on and it felt like it didn't add a lot of value over JSON.  But I think we could revisit it at some point.</p>\n</blockquote>\n<p>on this: not sure if relevant but besides less typing, it is easier on the eyes and easier on diff's for example</p>",
        "id": 186230218,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1579642310
    },
    {
        "content": "<blockquote>\n<p>Interestingly, this extension definition does have Id: and seems to work fine (the SD has both a name and an id field, both populated with 'hpiLocation-established'. Is there a list of 'FSH metadata' and what they do in the spec? (I couldn't find it)</p>\n</blockquote>\n<p>Right -- <code>Extension</code> supports both a name and an id because FHIR StructureDefinition has discrete fields for each.  Unfortunately, the same can't be said for instances -- there is no obvious place to put the _name_ of an instance within the instance itself.</p>\n<p>The potential metadata fields really depend on what you're writing; what is available is based on the thing you're defining (e.g., Profile vs Extension vs ValueSet vs CodeSystem vs Instance).  So... there is no one set of FSH metadata fields -- although we try to provide consistency where we can.  Currently, I think that you'd need to go to the appropriate section of the documentation for each type of FSH thing to see what its available metadata fields are for it.  We could potentially update the <a href=\"https://build.fhir.org/ig/HL7/fhir-shorthand/#keywords\" target=\"_blank\" title=\"https://build.fhir.org/ig/HL7/fhir-shorthand/#keywords\">Keywords</a> part of the documentation to list where each is valid, however.</p>",
        "id": 186233828,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1579644752
    }
]