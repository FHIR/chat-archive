[
    {
        "content": "<p>So I use fsh and sushi in order to create mocked up structure definitions in order to test against and then to confirm different validation outputs. Recently I needed to test an explicitly faulty profile. From what I tried though I was (probably properly) kept from recreating this invalid profile through sushi, so instead I edited a full .json structure definition in order to suit my needs.</p>\n<p>My question though, is I have vaguely seen that I can use an ig-data folder in order to pull a .json structure definition into my sushi-created folder of structure definitions. Does that not work with fshOnly? or is there some other nuance I didn't figure out?</p>\n<p>I have it in fsh/ig-data/input/profiles/ <br>\nand am running \"sushi fsh -s -o TMP-TestResources\" from one folder above the fsh folder<br>\nif there was anything else I needed to add to say the yaml file I for sure don't have that</p>",
        "id": 213192044,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1602611343
    },
    {
        "content": "<p>which version of sushi?</p>",
        "id": 213192548,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1602611569
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"237342\">@ryan moehrke</span> -- as <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> implied above, the answer will depend on if you're using SUSHI 0.x or SUSHI 1.0 Beta.</p>\n<p>In SUSHI 0.16.x, you can put BYOJ (Bring Your Own JSON) profiles in <code>fsh/ig-data/input/profiles</code> and SUSHI will consider them as it processes the FSH definitions (which may reference the BYOJ profiles).  In FSHOnly mode, however, it will <em>not</em> copy them to the output folder (as FSHOnly produces only the FSH-defined resources).</p>\n<p>In SUSHI 1.0 Beta, we no longer use <code>ig-data</code>.  We've streamlined project structure to a single approach.  Using the SUSHI 1.0 approach, your BYOJ profiles should go in <code>input/profiles</code> (or <code>input/resources</code>).  BUT... in this case, SUSHI still does not copy the files to the output folder; it leaves them in place (regardless of FSHOnly mode).  That is because they already are where the IG Publisher expects them.  If you wanted SUSHI-generated files and user-provided (BYOJ) files in the same folder, you would need to create a script to copy the files from <code>input/*</code> as needed.</p>",
        "id": 213195994,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1602613155
    },
    {
        "content": "<p>well that sucks, Im currently on 0.16.0 but sounds like neither of the versions will play the way I want them to :/</p>",
        "id": 213199600,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1602614753
    }
]