[
    {
        "content": "<p>No idea if someone else needs this... but I am making example resources in an IG, would be cool if sushi could have a new type of object in which I write plantuml, and it just puts that somewhere that the IG publisher can process plantuml like it already supports.<br>\nThis can be done today, but in two different files. And it is harder to keep two files of examples/diagrams aligned than if both the examples and the diagram are in the same file.</p>",
        "id": 271692662,
        "sender_full_name": "John Moehrke",
        "timestamp": 1644678098
    },
    {
        "content": "<p>What do you mean by \"two files\"?  Current IG publisher lets you put a .plantuml file in images-source and will generate a .svg file in your output folder.  Why would you want plantuml <em>inside</em> a FHIR resource?</p>",
        "id": 271692966,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1644678438
    },
    {
        "content": "<p>that is the 'second' file....  I explained my use-case. i am making example resources in a .fsh file, those examples are related to a diagram -- in my case a services directory.</p>",
        "id": 271693374,
        "sender_full_name": "John Moehrke",
        "timestamp": 1644678963
    },
    {
        "content": "<p>it is an edge case... hence why I start with a question of if it is useful beyond me</p>",
        "id": 271693387,
        "sender_full_name": "John Moehrke",
        "timestamp": 1644678992
    },
    {
        "content": "<p>might not even be as useful as I imagine</p>",
        "id": 271693399,
        "sender_full_name": "John Moehrke",
        "timestamp": 1644679020
    },
    {
        "content": "<p>What you’re looking for is one fsh file for both the resource and the plantuml, not the plantuml inside a resource, right?</p>",
        "id": 271693471,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1644679112
    },
    {
        "content": "<p>right</p>",
        "id": 271693532,
        "sender_full_name": "John Moehrke",
        "timestamp": 1644679204
    },
    {
        "content": "<p>I can see it as marginally easier to keep attribute names, etc in sync in one file than in two, or to take advantage of sushi rules to generate common content between the two.</p>",
        "id": 271693546,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1644679253
    },
    {
        "content": "<p>On the other hand the models are very different, and search and replace across files isn’t that hard.</p>",
        "id": 271693568,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1644679314
    },
    {
        "content": "<p>the other example I have of this is where I was using plantuml as a prototype UI example - so want to link the UI elements to the data elements in the profile or example. -- which has no good solution even if they could be in the same source file.</p>",
        "id": 271693947,
        "sender_full_name": "John Moehrke",
        "timestamp": 1644679835
    },
    {
        "content": "<p>What kind of link do you have in mind? Just the attributes or also the links?</p>",
        "id": 271791075,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1644823055
    },
    {
        "content": "<p>We've also had someone recently suggest that it would be helpful to put the intro and notes markdown in the same .fsh file as the definition it applies to.  We considered if maybe we could support it via tagged comments (e.g., multiline comments with tags like <code>@NOTES:</code> or <code>@INTRO:</code>).  I could see maybe a similar approach working for plantuml (e.g., <code>@PLANTUML:</code>).</p>\n<p>The two main issues w/ this are:</p>\n<ul>\n<li>You give up any special support your IDE has.  E.g., for the NOTES use case, the markdown would not be syntax-highlighted and the built-in Markdown Preview in many editors (like VS Code) would not work.</li>\n<li>It's outside of the spec (and putting it in the spec would expand FSH beyond what it's currently meant to be).  That said, I suppose many things related to the doc that goes into an IG are already outside of spec anyway.</li>\n</ul>",
        "id": 271831313,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1644848070
    },
    {
        "content": "<p>I think having them as an extension to the FSH spec would be a great idea.  I could work up the code in a separate file and then include them if I wanted the previewer or other benefits of my IDE.</p>\n<p>I wouldn't make it part of the FSH spec, just a published sushi extension</p>",
        "id": 271832016,
        "sender_full_name": "David Pyke",
        "timestamp": 1644848454
    },
    {
        "content": "<p>On plantuml something else comes into play. Plantuml presents (amongst others) class diagrams. The scope of sushi is more on the resource (class). This makes me wonder what diagram is to be generated? One just presenting the resource? What other resource are shown?<br>\nIn this case a different approach might be more interesting, adding a sushi specific pre-processing step to plantuml in which sushi specific content is injected in the plantuml file.<br>\nThis will work well for attributes. Not sure whether we need to add something for references and what that would look like.</p>",
        "id": 271884717,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1644870939
    },
    {
        "content": "<p>could be like clinfhir can diagram a bundle content.</p>",
        "id": 271891737,
        "sender_full_name": "John Moehrke",
        "timestamp": 1644874337
    },
    {
        "content": "<p>That could work. The consequence would be that the Bundle would also appear as an artifact in the IG. I do not know whether that is an advantage or disadvantage though. Sounds like something we could try. An extension could label the Bundle as a plantuml collection. We could also consider adding extensions that would indicate what attributes to show: all, just MS, just those defined in the profile, ...</p>",
        "id": 271937047,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1644911360
    },
    {
        "content": "<p>E.g. something like:<br>\nProfile: PlantUmlClassBundle<br>\nParent:  Bundle</p>\n<ul>\n<li>type = #collection</li>\n<li>link   0..0</li>\n<li>entry<ul>\n<li>extension contains ClassContentLevel named lvl 0..1 MS</li>\n<li>resource 0..0</li>\n<li>search   0..0</li>\n<li>request  0..0</li>\n<li>response 0..0</li>\n</ul>\n</li>\n</ul>\n<p>Extension: ClassContentLevel</p>\n<ul>\n<li>value[x] only code</li>\n</ul>\n<p>Instance: PlantumlClass<br>\nInstanceOf: PlantUmlClassBundle</p>\n<ul>\n<li>id = \"plantuml\"</li>\n<li>entry[+]<ul>\n<li>fullUrl = \"<a href=\"http://hl7.org/fhir/StructureDefinition/Patient\">http://hl7.org/fhir/StructureDefinition/Patient</a>\"</li>\n<li>extension[lvl].valueCode = #MS</li>\n</ul>\n</li>\n<li>entry[+]<ul>\n<li>link[+]<ul>\n<li>relation = \"subject\"</li>\n<li>url = \"<a href=\"http://hl7.org/fhir/StructureDefinition/Patient\">http://hl7.org/fhir/StructureDefinition/Patient</a>\"</li>\n</ul>\n</li>\n<li>fullUrl = \"<a href=\"http://hl7.org/fhir/StructureDefinition/Encounter\">http://hl7.org/fhir/StructureDefinition/Encounter</a>\"</li>\n</ul>\n</li>\n</ul>",
        "id": 271974876,
        "sender_full_name": "Bas van den Heuvel",
        "timestamp": 1644932647
    },
    {
        "content": "<p>I don't see a way that plantuml would generate nice diagrams without requiring tweaking</p>",
        "id": 274790505,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646888754
    },
    {
        "content": "<p>Depends on the diagram and the resource metadata that we are willing to add</p>",
        "id": 274790569,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646888793
    },
    {
        "content": "<p>For example, sequence diagrams from an ExampleScenario is ok because the metadata is similar - sequence, actor types, interaction...</p>",
        "id": 274790615,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646888855
    },
    {
        "content": "<p>However a class diagram would be harder. There's some need to tell plantuml where to position the elements</p>",
        "id": 274790676,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646888899
    },
    {
        "content": "<p>See for example <a href=\"http://www.plantuml.com/plantuml/uml/rLXVRzis47_Nf-3SXsm6WcNTYY53qJLMciQ0adYMwgxO1eCHppOHYHH8AfstvRkFD6acCiNMopfWLHvCtUzu_u-ywALKMAYshf83UKDPWmMkKKKPg7K3gE7LshpqWboe5KzMb00ggIWhi6kfG00t74boy4KZyBB6gC9htYeaQr2OuIIv5rTMMChdpq_o5o_GdmaQSK50fBpY0frYSJC5eecul5aAtZ9YWGigrNhA9IJe7B3ctsLuiZWwrd_9NQZeuhHVKLvX1Qy5NeVgtgweWhpcDt5znr5zPrcexydrqVT7puv2JQCt-VZoLPx7_NgwU7hyJEi95HKNFOgUQJN7FOfE9fDid9uKuwlBcAxyPZsgMkZNbVK7yRK0OA6soVcxN6lBOgeoMeFTgfKr6iHBG8FpyGobM0BAMt4BjAemAs60i4GQCS13khP6FmWXQo8Q38UvmenWGUWVG8R3NzbmQCNPzHGQBjHmk16OAsBVxrrpZoNxrx_cI42flPwN0h02qeEq3Tb59bXHO5QC9rAYINH1GSWkm70DNSerrRqsNmCMNVeI684T6YP4W3GYEsH2fHAqLBlqzrYGWFdMH7K9ynLl9J2n2pU2tr9MmhoaQjtLhbLJ0WQJ2gjMFep2bCeRrF2chR2Yd0MGAOccG-Mj0iGNYB85bBjxGAqOzHOueYcQKugNZ4igaGBPoLrQKRq5LqWgxTv3v6GwcmjOqXewEWgJPKthIZdzRhuhkPXbqtcnGpmLxN9k8YALgT5Wqy-NyqjuF-_rhXZD9m9kWVK0ti6Evz1WHPNsUZHFkm2kr0gDcMp5fbLIBBhLgHrd6jb9vLMhIbv3Hyc53Zecd477JS1grTrxYXLqAIbk9MpVFNHuw9S_jI2DhmnJ0LEG3MSITXdlN9FxGq8tDV87XMjjqxMc4n5oxPrnjlHNZ1NGEIbSUpfk_UPFqvt27xkMBJS5lA7kienCgw9tW8EkUHNKgmCkSGsxjDUTplPLsj_RLsNPDfsUygaDkYsIj21nGV8SEKoSVe83xYuCikrnbw4pN2ekv3P11eh5t5Y4SZEb0EcDkDdi11emRcJA6Q4k5d4pVJTiZJE43nddxWWWGV0hNCRHKwZeBOWrsZS96I-3J7RwD4mR9qvEKA6Q75SRrA9Kjk1FbhqCRu4kLwfN99YZJVP1fclppHs1Oh0_vsoSU_bEfWNQpB28Q9v_dtwZrnMfL-ygmH2YbL08p6HDfTGAtCM5Ugk5Bumb2ofg6zE0ow6KBL66hmCuRw0qrnJgotTLsPia25Z8uihpWnrpTIr1tEAF1cqA9PYESO4pzw2BcO6Y8LitWBwSPUXhDCKD9Lz58sObXfqFigrKG3MoaBkBzuzj6Dtzuxj_X0t7B0kjsolm4wpGeJ2zzikA4WBijqDx-ls01eF4h0BO75uMDgi0rXNjOBCAXKDfqJ3dPhPnwPxw2SStYYO5MO-azFzMtJs-cedFkMQMZ_4iABqVFul6db61AvHnJBR-pxBFCB4XsrtIc-YYlGPHjfKxzKrvtq_XBWB5fDXdLkd5Kbut5MZKEn3-gu6QZtkOOW4w497anPtnLzhMbr7KbV3kVVpD6ZF7--pD-GIX_UyZUpATMViVY7OUQ2ZcmJcLYelr_evvZ3UDgvZUWJ1-RMPdnPlUGMK1GW0neoD2Um-WaUli6wbGHfbt8kHuoiX7EBuL4Ox7L__vQEQIOfRxbNcqSZmGJzl-pHvDtkFFwVFKEwkN-_Pql5C-hRsXmMD6u7SWvkHGkDos_pYDMJw5QYDKhcZpZsiZSJ_-Av-RSmut7mRqV8FYpo0vUB1jEncvxVecYEyU9F6D-fJuqCRamFoUYLfkBNs1lB3xZGFBTw5ZkAhM5ktPOCT6mj-phHKRozrWfrV1s5UCacBKGoqqEUJMtMLbwKK8fWvqchfcw3WuLA-2lMQAjB1P1R2Un2og5m4uoomsom9edFgPzWwXvA0dVfwx4ySaAN6pAUsazzjq0enuZkIbVclhAlaR\">this diagram</a></p>",
        "id": 274790722,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646888962
    },
    {
        "content": "<p>All the lines at the end to say that one box needs to be to the left or to the right of another box (and plantuml's behaviour when the arrow is <code>-&gt;</code> or <code>--&gt;</code> and the renderer used and the version of plantuml...</p>",
        "id": 274790919,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646889126
    },
    {
        "content": "<p>If the goal is to say \"well, this diagram is always going to be in this resource\" then I think a better option would be for sushi to have a syntax for containing special file content:</p>\n<div class=\"codehilite\"><pre><span></span><code>...\nInstance: myBundleExample\nInstanceOf: myBundleProfile\n\n/*The following creates a plantuml file - decent delimiters should be found*/\n∆∆bundleexample1\n@startuml\nClass &quot;a little box here&quot;\n...\n@enduml\n∆∆\n/*Now back to fshy stuff*/\nDescription: &quot;This is an example of the document bundle as shown in the diagram &lt;div&gt;{{bundleexample1.svg}}&lt;/div&gt;. This example is used in...\n</code></pre></div>",
        "id": 274791534,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646889729
    },
    {
        "content": "<p>This would generate the plantuml file from sushi (sushi should not care that it is plantuml, only that it is an external file)</p>",
        "id": 274791567,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646889781
    },
    {
        "content": "<p>The IG publisher/templates would take care of the rest</p>",
        "id": 274791600,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646889811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> how does it sound, the possibility to have \"contained files\" inside a fsh file?</p>",
        "id": 274885845,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646941496
    },
    {
        "content": "<p>If the content is inside a definition (and not inside a comment), then it needs to be a part of the grammar, and technically should be part of the FSH spec.  I don't think that IG documentation (plantuml, intro, etc) belongs in the spec; IMO, it is outside of scope. One exception would be if we added a very generic keyword that could indicate \"the following content is implementation-specific and not required to be understood by all parsers\".</p>\n<p>But the way we've been thinking about this is as special annotations in comments.  So it might look similar to your example above, but it would all be in a block comment, and would be introduced via a special tag.</p>\n<p>I think it's definitely feasible and has some advantages.  A disadvantage I've noted in the past is that since it is in a <code>.fsh</code> file, you would likely lose any language-specific IDE syntax or snippets (for plantuml, markdown, etc).  But still, I do think it's worth looking into.  The problem is, we just don't have the available resources to look into it <em>right now</em>.</p>",
        "id": 274976050,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1647006190
    },
    {
        "content": "<p>I tend to agree that sushi should stick with sushi specific things. I just initially wondered if there was already an \"embedded file here\" function that could be used for plantuml script. Second came up the idea of having sushi generate plantuml based on a FHIR object that it created, such as a Bundle (like David Hay's tool can).</p>",
        "id": 274983293,
        "sender_full_name": "John Moehrke",
        "timestamp": 1647009579
    }
]