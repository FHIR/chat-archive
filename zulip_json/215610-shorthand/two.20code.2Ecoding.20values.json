[
    {
        "content": "<p>How do I specify that I want to force in a profile that the coding element in a code have TWO specific values?<br>\nFor example in Observation.code, where I need to indicate both a LOINC and SNOMED code for this Observation.<br>\nInstance looks like:</p>\n<blockquote>\n<ul>\n<li>code.coding = LOINC#72514-3 \"Pain severity - 0-10 verbal numeric rating\"</li>\n<li>code.coding[1] = SNO#225908003 \"Pain Score\"</li>\n</ul>\n</blockquote>",
        "id": 217305457,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605807973
    },
    {
        "content": "<p>Is this a resource example or a profile you're trying to create?</p>",
        "id": 217305583,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1605808036
    },
    {
        "content": "<p>I am trying to make a profile that would force instances to have these two codes</p>",
        "id": 217305644,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605808067
    },
    {
        "content": "<p>so the example above comes from an instance that builds... but if I put that same thing into a profile, sushi complains about the second coding</p>",
        "id": 217305785,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605808134
    },
    {
        "content": "<p>You'll probably need to define slices for them and require each to be present.</p>",
        "id": 217305793,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1605808138
    },
    {
        "content": "<p>show me</p>",
        "id": 217305877,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605808181
    },
    {
        "content": "<p>I think this might do what you want...</p>\n<div class=\"codehilite\"><pre><span></span><code>code ^slicing.discriminator.type = #value\ncode ^slicing.discriminator.path = &quot;coding&quot;\ncode contains loincCode 1..1 MS and snomedCode 1..1 MS\ncode[loincCode].coding = LOINC#stuff (exactly)\ncode[snomedCode].coding = SNO#stuff (exactly)\n</code></pre></div>",
        "id": 217306379,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1605808399
    },
    {
        "content": "<p>John, are you trying to bind to specific values or just say that there must be a LOINC code and a SNOMED code?</p>",
        "id": 217306623,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1605808508
    },
    {
        "content": "<p>specific values</p>",
        "id": 217308023,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605809101
    },
    {
        "content": "<p>@jean. the repetition is not on .code... it is on code.coding</p>",
        "id": 217308080,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605809123
    },
    {
        "content": "<p>yes, but coding doesn't repeat.  code does.  so you slice on code</p>",
        "id": 217308275,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1605809207
    },
    {
        "content": "<p>not in Observation</p>",
        "id": 217308483,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605809305
    },
    {
        "content": "<p>.code is 1..1</p>",
        "id": 217308527,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605809330
    },
    {
        "content": "<p>thus I need to repeat at .code.coding</p>",
        "id": 217308558,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605809346
    },
    {
        "content": "<p>the loinc and snomed codes are equivilant</p>",
        "id": 217308579,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605809359
    },
    {
        "content": "<p>Yeah, you're right.  maybe this is better...</p>\n<div class=\"codehilite\"><pre><span></span><code>code.coding ^slicing.discriminator.type = #value\ncode.coding ^slicing.discriminator.path = &quot;this&quot;\ncode.coding contains loincCode 1..1 MS and snomedCode 1..1 MS\ncode.coding[loincCode] = LOINC#stuff (exactly)\ncode.coding[snomedCode] = SNO#stuff (exactly)\n</code></pre></div>",
        "id": 217310835,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1605810501
    },
    {
        "content": "<p>It worked!!!!! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>      Excellent. thanks</p>",
        "id": 217311748,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605810951
    },
    {
        "content": "<p>I tried to make it a closed slice by adding</p>\n<blockquote>\n<ul>\n<li>code.coding ^slicing.rules = #closed </li>\n</ul>\n</blockquote>\n<p>but it doesn't seem to stop instances from having MORE coding than these two.</p>",
        "id": 217316229,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605813180
    },
    {
        "content": "<p>yeah, I think you'd have to profile code.coding to be 2..2.  #closed should mean that you can only have those so you could have 20 repetitions but only of those 2 specific codings.</p>",
        "id": 217316572,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1605813274
    },
    {
        "content": "<p>yeah... again, that did work.</p>",
        "id": 217316903,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605813437
    },
    {
        "content": "<p>wow, I actually am starting to understand this FHIR and FSH stuff! :)</p>",
        "id": 217316958,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1605813471
    },
    {
        "content": "<p>Just for fun, here is another approach:</p>\n<div class=\"codehilite\"><pre><span></span><code>* code ^patternCodeableConcept.coding[0].system = LOINC\n* code ^patternCodeableConcept.coding[0].code = #stuff\n* code ^patternCodeableConcept.coding[1].system = SNO\n* code ^patternCodeableConcept.coding[1].code = #stuff\n</code></pre></div>\n<p>It results in:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Observation.code\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Observation.code\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"patternCodeableConcept\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"coding\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">\"system\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://loinc.org\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"stuff\"</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">\"system\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://snomed.info/sct\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"stuff\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 217317078,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1605813530
    },
    {
        "content": "<p>well. slight change of topic... I need ValueQuantity.value to be between 0-10. So I tried this</p>\n<blockquote>\n<ul>\n<li>valueQuantity.value ^minValueInteger = 0</li>\n<li>valueQuantity.value ^maxValueInteger = 10</li>\n</ul>\n</blockquote>\n<p>but this seems to allow 11</p>",
        "id": 217317109,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605813549
    },
    {
        "content": "<p>Regarding my last approach, one thing I don't recall is if patterns enforce ordering in arrays or not.</p>",
        "id": 217317146,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1605813579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/215610-shorthand/topic/two.20code.2Ecoding.20values/near/217317109\">said</a>:</p>\n<blockquote>\n<p>well. slight change of topic... I need ValueQuantity.value to be between 0-10. So I tried this</p>\n<blockquote>\n<ul>\n<li>valueQuantity.value ^minValueInteger = 0</li>\n<li>valueQuantity.value ^maxValueInteger = 10</li>\n</ul>\n</blockquote>\n<p>but this seems to allow 11</p>\n</blockquote>\n<p>What do you mean by \"this seems to allow 11\"?  If you're saying that <em>SUSHI</em> allows you to create an instance with the value <code>11</code> then that doesn't really mean anything -- because SUSHI only does very very limited validation.  You'd want to test it w/ a real FHIR validator to see if it works as expected.</p>",
        "id": 217317412,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1605813688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/215610-shorthand/topic/two.20code.2Ecoding.20values/near/217317109\">said</a>:</p>\n<blockquote>\n<p>well. slight change of topic... I need ValueQuantity.value to be between 0-10. So I tried this</p>\n<blockquote>\n<ul>\n<li>valueQuantity.value ^minValueInteger = 0</li>\n<li>valueQuantity.value ^maxValueInteger = 10</li>\n</ul>\n</blockquote>\n<p>but this seems to allow 11</p>\n</blockquote>\n<p>Does that mean it’s louder? Is it any louder?  Well, it’s one louder, isn’t it? It’s not ten. You see, most blokes, you know, will be playing at ten...Where can you go from there? Where?</p>",
        "id": 217317555,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1605813742
    },
    {
        "content": "<p>Oh man, <span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span> -- I can't believe I missed that opportunity.  There I was, like a dope, providing a serious answer.</p>",
        "id": 217318038,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1605813949
    },
    {
        "content": "<p>I am not disappointed... yes, I understand Sushi would not be validating. but the build continues and does not complain. so I wondered if I had done the right sushi thing. first always expect chair-to-keyboard failure</p>",
        "id": 217319671,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605814617
    },
    {
        "content": "<p>note.. I am getting a build error with that code.coding slicing trick.  I might have messed something up in the slicing trick?<br>\nI have</p>\n<p>\"</p>\n<ul>\n<li>code.coding ^slicing.discriminator.type = #value</li>\n<li>code.coding ^slicing.discriminator.path = \"this\"</li>\n<li>code.coding ^slicing.rules = #closed</li>\n<li>code.coding 2..2</li>\n<li>code.coding contains loincCode 1..1 and snomedCode 1..1</li>\n<li>code.coding[loincCode] = LOINC#72514-3 \"Pain severity - 0-10 verbal numeric rating [Score] - Reported\"</li>\n<li>code.coding[snomedCode] = SNO#225908003 \"Pain Score\"<br>\n\"</li>\n</ul>\n<p>but get this error from the build</p>\n<p>\"<br>\nObservation/ex-MHV-pain-0: Observation.code.coding[0] (l28/c8)  error   Internal error: Unable to resolve discriminator in definitions: this (@char 1)<br>\nObservation/ex-MHV-pain-0: Observation.code.coding[1] (l33/c8)  error   Internal error: Unable to resolve discriminator in definitions: this (@char 1)<br>\nObservation/ex-MHV-pain-0: Observation.code (l27/c16)   information Observation.code.coding:loincCode: Unable to check minimum required (Observation.code.coding) due to lack of slicing validation (from <a href=\"https://johnmoehrke.github.io/MHV-PGHD/StructureDefinition/VA.MHV.pain\">https://johnmoehrke.github.io/MHV-PGHD/StructureDefinition/VA.MHV.pain</a>)<br>\nObservation/ex-MHV-pain-0: Observation.code (l27/c16)   information Observation.code.coding:snomedCode: Unable to check minimum required (Observation.code.coding) due to lack of slicing validation (from <a href=\"https://johnmoehrke.github.io/MHV-PGHD/StructureDefinition/VA.MHV.pain\">https://johnmoehrke.github.io/MHV-PGHD/StructureDefinition/VA.MHV.pain</a>)<br>\n\"</p>",
        "id": 217321500,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605815478
    },
    {
        "content": "<p>i might be wrong but shouldn't it be \"$this\"?</p>",
        "id": 217321908,
        "sender_full_name": "David Pyke",
        "timestamp": 1605815658
    },
    {
        "content": "<p>see... problem is in the chair-to-keyboard interface implementation</p>",
        "id": 217322424,
        "sender_full_name": "John Moehrke",
        "timestamp": 1605815899
    },
    {
        "content": "<p>Time to get a new, more intuitive keyboard</p>",
        "id": 217322725,
        "sender_full_name": "David Pyke",
        "timestamp": 1605816050
    },
    {
        "content": "<p>Picking up on this with a question about two <code>codings</code> inside <code>code</code>. I'm defining two <code>coding</code> slices, one of which should be optional. And I want <code>code.coding</code> to remain <code>0..*</code>.  Sushi sets the minimum cardinality of <code>code.coding</code> to the number of slices defined. Plus it sets the minimum cardinality of the optional slice to 1. Am I missing something in my FSH file? Here's my snippet:</p>\n<div class=\"codehilite\"><pre><span></span><code>Alias: $loinc = http://loinc.org\nAlias: $snomed = http://snomed.info/sct\n\nProfile: RespRate\nParent: Observation\n* code.coding ^slicing.discriminator[0].type = #pattern\n* code.coding ^slicing.discriminator[0].path = &quot;$this&quot;\n* code.coding ^slicing.rules = #open\n* code.coding contains\n    loinc 1..* and\n    snomed 0..*\n* code.coding[loinc] = $loinc#9279-1\n* code.coding[loinc].system 1..\n* code.coding[loinc].code 1..\n* code.coding[snomed] = $snomed#86290005\n* code.coding[snomed].system 1..\n* code.coding[snomed].code 1..\n</code></pre></div>\n<p><a href=\"https://fshschool.org/FSHOnline/#/share/3tZBeml\">https://fshschool.org/FSHOnline/#/share/3tZBeml</a></p>",
        "id": 236499125,
        "sender_full_name": "Julian Sass",
        "timestamp": 1619613587
    },
    {
        "content": "<p>I'm not quite sure what is going on here, it seems like for some reason this line</p>\n<div class=\"codehilite\"><pre><span></span><code>* code.coding[snomed] = $snomed#86290005\n</code></pre></div>\n<p>leads SUSHI to believe that <code>code.coding</code> must contain <code>$snomed#86290005</code>, but that does not seem right. We will have to investigate this more, I'll log it as a bug. In the meantime, you should be able to accomplish something logically equivalent to what you want by applying that assignment constraint  at the <code>system</code> and <code>code</code> level instead of the <code>coding</code> level. See here <a href=\"https://fshschool.org/FSHOnline/#/share/3vE7JXZ\">https://fshschool.org/FSHOnline/#/share/3vE7JXZ</a> for an example of what I mean.</p>",
        "id": 236504873,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1619615943
    },
    {
        "content": "<p>Here is the bug: <a href=\"https://github.com/FHIR/sushi/issues/810\">https://github.com/FHIR/sushi/issues/810</a>.</p>",
        "id": 236505775,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1619616279
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"239822\">@Nick Freiter</span></p>",
        "id": 236506112,
        "sender_full_name": "Julian Sass",
        "timestamp": 1619616405
    }
]