[
    {
        "content": "<p>One other naming issue I'm running into: if I want to use an externally defined extension with a URL containing a hash (say: <code>https://example.org/ext#favorite</code>), I see a parsing error when I do:</p>\n<div class=\"codehilite\"><pre><span></span><code>* extension contains https://example.org/ext#favorite named fave 1..1\n</code></pre></div>\n\n<p>i.e.</p>\n<div class=\"codehilite\"><pre><span></span><code>expecting {&#39;MS&#39;, &#39;SU&#39;, &#39;TU&#39;, &#39;N&#39;, &#39;D&#39;, &#39;codes&#39;, &#39;valueset&#39;, &#39;system&#39;, NUMBER, SEQUENCE}\n</code></pre></div>\n\n<p>Quotes don't seem to help; is there another way?</p>",
        "id": 272312669,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645127138
    },
    {
        "content": "<p>I think you mean containing a <em>hash</em> (not a *slash)... and what I expect is happening here is that SUSHI is erroneously parsing this as a code, because FSH syntax for codes is <code>system#code</code> (and system can be a URL). We should probably try to tweak the grammar to support that.</p>\n<p>In the mean time, there is a workaround.  Just use an alias like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>Alias: FAV = https://example.org/ext#favorite\n\nProfile: MyPatient\nParent: Patient\n* extension contains FAV named fave 1..1\n</code></pre></div>",
        "id": 272313075,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1645127392
    },
    {
        "content": "<p>Yes, updated my post when I saw the error!) Alias workaround is good, thanks!</p>",
        "id": 272313433,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645127571
    },
    {
        "content": "<p><a href=\"https://github.com/FHIR/sushi/issues/1025\">SUSHI#1025</a></p>",
        "id": 272316031,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1645128509
    },
    {
        "content": "<p>Canonical URLs should NOT contain a hash</p>",
        "id": 272317858,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1645129481
    },
    {
        "content": "<p>We use hash in some cases to refer to an element within a reference, so including them in the URL is bad practice.</p>",
        "id": 272317896,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1645129503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span> do we document this expectation? If not, we should.</p>",
        "id": 272320741,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1645131097
    },
    {
        "content": "<p>Actually, I guess I lied.  Canonical references are explicitly defined as allowing '#'.  But having that in a code system canonical is definitely going to cause tooling grief.  <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>?</p>",
        "id": 272341296,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1645142034
    },
    {
        "content": "<p>Are there uses for # in canonicals other than (IIRC) referencing a particular element (in a StructureDefinition) or item (in a Questionnaire)? I suspect we allow # in canonicals to support those uses, but the language was sloppy and didn't restrict it to those uses.</p>",
        "id": 272345965,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1645145451
    },
    {
        "content": "<p>Questionnaire.item.definition is one place, and I think in the last few days there was a use case in the CodeSystem that Michael Lawley identified.</p>",
        "id": 272742887,
        "sender_full_name": "Brian Postlethwaite",
        "timestamp": 1645484459
    }
]