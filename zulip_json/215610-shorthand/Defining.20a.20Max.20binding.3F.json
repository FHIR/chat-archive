[
    {
        "content": "<p>Is there an easy way to define a max binding on a coded value?  If not, what would be the non-easy way to do this?</p>",
        "id": 193809256,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1586805356
    },
    {
        "content": "<p>I used to know what that means, but have forgotten.  What does it mean?</p>",
        "id": 193809722,
        "sender_full_name": "Keith Boone",
        "timestamp": 1586805585
    },
    {
        "content": "<p>the max binding defines the full set of codes that you'd accept with your actual binding being the preferred (or extensible) set of codes that you want<br>\nthe common example is language where the binding is CommonLanguages with a MaxBinding of AllLanguages.<br>\nin my case, I have a Condition representing Anaphylaxis so I have a set of SNOMED and ICD-10-CM codes that represent Anaphylaxis.  I have Condition.code with a preferred binding to this value set, because we might miss some but I want to ensure that if you do send me a code, that you are restricted to the US Core Condition Code value set.</p>",
        "id": 193810066,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1586805771
    },
    {
        "content": "<p>In this example from US Core, <a href=\"https://build.fhir.org/ig/HL7/US-Core-R4/StructureDefinition-us-core-documentreference.html\" title=\"https://build.fhir.org/ig/HL7/US-Core-R4/StructureDefinition-us-core-documentreference.html\">https://build.fhir.org/ig/HL7/US-Core-R4/StructureDefinition-us-core-documentreference.html</a>, the <code>DocumentReference.type</code> element has a Min binding on it, here is how you would accomplish that with FSH:</p>\n<div class=\"codehilite\"><pre><span></span>Profile: MyDocReference\nParent: DocumentReference\n* type ^binding.extension[1].url = &quot;http://hl7.org/fhir/StructureDefinition/elementdefinition-minValueSet&quot;\n* type ^binding.extension[1].valueCanonical = &quot;http://hl7.org/fhir/us/core/ValueSet/us-core-clinical-note-type&quot;\n</pre></div>\n\n\n<p>You have to use the ^ syntax to directly operate on the <code>type</code> element. The extension is not being placed on an element in the Structure Definition, but rather on a field within the <code>type</code> element itself. I think you'd want to do something very similar to set a max binding.</p>",
        "id": 193810841,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1586806160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239822\">@Nick Freiter</span> thanks, that looks perfect.</p>",
        "id": 193811020,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1586806222
    },
    {
        "content": "<p>BTW -- in the example above, <span class=\"user-mention\" data-user-id=\"239822\">@Nick Freiter</span> used <code>type ^binding.extension[1]</code> because <code>type</code> already had another extension on it in the US Core example.  Assuming max value is the only extension on your use case (<code>Condition.code</code>), you'd want to use: <code>code ^binding.extension[0]</code>...</p>",
        "id": 193811824,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1586806628
    },
    {
        "content": "<p>Shouldn't the parent be the US-Core DocumentReference rather than the base DocumentReference then?</p>",
        "id": 193828836,
        "sender_full_name": "David Hay",
        "timestamp": 1586816402
    },
    {
        "content": "<p>no, he's showing us how you would replicate the US-Core DocReference in FSH</p>",
        "id": 193829098,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1586816529
    },
    {
        "content": "<p>Ah - he left out the existing extension (from USCore) in the example above...</p>",
        "id": 193829565,
        "sender_full_name": "David Hay",
        "timestamp": 1586816866
    },
    {
        "content": "<p>yes</p>",
        "id": 193829583,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1586816877
    },
    {
        "content": "<p>Just out of interest (and as I'm too lazy to check for myself) if the example HAD set the parent to USCore, would you still need to use the [1] indexer? (as the parent already had the extension on it) or could you leave it out (or use [0])...</p>",
        "id": 193829824,
        "sender_full_name": "David Hay",
        "timestamp": 1586817013
    },
    {
        "content": "<p>Actually, I just looked at the US Core DocumentReference and it looks like the minValueSet extension is the <em>only</em> extension on <code>type</code> in US Core -- so I don't know why <span class=\"user-mention\" data-user-id=\"239822\">@Nick Freiter</span> used the <code>[1]</code> indexer.  I suspect it was a copy/paste error.  Nick's example should have used <code>extension[0]</code>.</p>\n<p>To answer <span class=\"user-mention\" data-user-id=\"191321\">@David Hay</span>'s question, if you declare US Core DocumentReference as your parent, you automatically inherit its constraints, so you get the minValueSet extension for free (whether you want it or not).  If you wanted to add a maxValueSet extension, you would need to use <code>extension[1]</code> because if you tried to use <code>extension[0]</code>, it would attempt to overwrite the existing extension (which is not allowed).</p>",
        "id": 193830521,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1586817560
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> !</p>",
        "id": 193831007,
        "sender_full_name": "David Hay",
        "timestamp": 1586817910
    },
    {
        "content": "<p>So if we put Max binding and min binding into FHIR Terms, the min = the preferred set, and the max = required set.  I would a) bind to a required value set (that's the max), and define that value set in terms of two other value sets: a) The preferred value set (the min), and b) everything else.  Creating an extension for Max doesn't establish an enforced constraint with existing tooling, which is perhaps why there's already a min extension rather than a max.  The min extension sort of does what I suggested using already existing value set mechanisms, but makes it clear that one of them is the MIN.</p>",
        "id": 193852438,
        "sender_full_name": "Keith Boone",
        "timestamp": 1586843117
    },
    {
        "content": "<p>min != preferred</p>",
        "id": 193853734,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1586844783
    },
    {
        "content": "<blockquote>\n<p>Creating an extension for Max doesn't establish an enforced constraint with existing tooling</p>\n</blockquote>\n<p>yes it does</p>",
        "id": 193853750,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1586844806
    },
    {
        "content": "<p>I used the <code>[1]</code> indexer intentionally because the original base DocumentReference resource does have an existing extension on <code>type.binding</code>. The FSH I gave leaves this existing extension, while it appears this extension is overwritten in US Core. I didn't want to give FSH that overwrites the existing extension, so that is why there is a difference.</p>",
        "id": 193885650,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1586865557
    },
    {
        "content": "<p>TIL, interesting thread.  I saw this previous discussion that discusses minValueSet and maxValueSet for those who want some more background: </p>\n<p><a href=\"#narrow/stream/179202-terminology/topic/required.20binding.20meaning.20for.20source.20system\" title=\"#narrow/stream/179202-terminology/topic/required.20binding.20meaning.20for.20source.20system\">https://chat.fhir.org/#narrow/stream/179202-terminology/topic/required.20binding.20meaning.20for.20source.20system</a></p>",
        "id": 193942977,
        "sender_full_name": "Reece Adamson",
        "timestamp": 1586891066
    },
    {
        "content": "<p>What if FSH offered something like this?</p>\n<ul>\n<li>foo from MyPreferredValueSet (preferred)</li>\n<li>foo from MyMaxValueSet (max)</li>\n</ul>",
        "id": 194540537,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1587210737
    },
    {
        "content": "<p>and </p>\n<ul>\n<li>foo from MyMinValueSet (min)</li>\n</ul>",
        "id": 194548628,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1587221941
    },
    {
        "content": "<p>Submitted issue: <a href=\"https://github.com/FHIR/sushi/issues/371\" title=\"https://github.com/FHIR/sushi/issues/371\">https://github.com/FHIR/sushi/issues/371</a></p>",
        "id": 194597442,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1587302569
    },
    {
        "content": "<p>I think the question here is whether or not min/max VS are used enough to warrant adding them as a 1st-class feature of FSH.  For some reason, FHIR has chosen <em>not</em> to support them as 1st-class properties -- so why should FSH?  That's an honest question, with no negative connotation intended.</p>\n<p>If they are not commonly used, including them in FSH may just make things more complicated/confusing for the 95% (???) of authors who don't use them -- as now you need to understand not only the differences between the normative bindings, but also the <code>min</code>/<code>max</code> bindings and understand which binding flavors can be applied concurrently and which ones cancel out previous values...  Again, not arguing against it, but trying to think of the implications of adding these to FSH grammar (as every feature you add to the grammar, by definition, increases the grammar's complexity).</p>",
        "id": 194675492,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1587389826
    },
    {
        "content": "<p>The issue is there to be racked and stacked against priority of other issues.</p>",
        "id": 194701838,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1587400887
    },
    {
        "content": "<blockquote>\n<p>For some reason, FHIR has chosen not to support them as 1st-class properties</p>\n</blockquote>\n<p>It's on the plan for R5</p>",
        "id": 194734421,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1587417293
    },
    {
        "content": "<p>you need some strategy to avoid people having to say \"I just can't use FSH because I need a min or max value set\"</p>",
        "id": 194734473,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1587417321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> said:</p>\n<blockquote>\n<p>you need some strategy to avoid people having to say \"I just can't use FSH because I need a min or max value set\"</p>\n</blockquote>\n<p>FSH supports it now via the same way FHIR does: by allowing the author to specify an extension.  So it's no harder in FSH than it currently is in FHIR.</p>\n<p>This discussion was about whether we should make it even <em>easier</em> to do in FSH than in FHIR (by abstracting away the fact that it is an extension).  Knowing that FHIR R5 will support min / max VS more directly, I think it's easy to justify FSH adding special support in the grammar for it.  Thanks for that tidbit of info!</p>",
        "id": 194748644,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1587428243
    },
    {
        "content": "<p>I don't think it should be easier than that.</p>",
        "id": 194751003,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1587430458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> -- I think I may be confused.  You said above that \"It's on the plan for R5\" regarding making min/max VS \"1st-class properties\".  So that sounds to me like FHIR is planning to make min/max VS easier to use.  But you also said \"I don't think it should be easier than that\" regarding the need to currently use extensions for min/max VS.  Did I misunderstand something?</p>",
        "id": 194755567,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1587436366
    },
    {
        "content": "<p>for now, you shouldn't make it easier. When we add multiple bindings in R5, then FSH should follow along.</p>",
        "id": 194756948,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1587438408
    },
    {
        "content": "<p>cause then we'll know what it looks like</p>",
        "id": 194756954,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1587438419
    }
]