[
    {
        "content": "<p>is it possible to improve this error feedback?</p>\n<div class=\"codehilite\"><pre><span></span><code>Sushi: Line: 1 - 250                                                             (00:05.0679)\nSushi: error Element Questionnaire.item.item.item.item.type has minimum cardinality 1 but occurs 0 time(s). (00:05.0682)\n</code></pre></div>",
        "id": 218707891,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1607008951
    },
    {
        "content": "<p>it would be really helpful to see which item.item.item.item is it complaining about</p>",
        "id": 218708007,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1607008996
    },
    {
        "content": "<p>But we told you it's somewhere between line 1 and line 250! ;-)</p>",
        "id": 218717931,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1607012741
    },
    {
        "content": "<p>Yeah, we can look at that.  We generally try to be as helpful as we can, so I kind of wonder if there is something that makes this technically difficult to narrow down, but... hopefully it was just an oversight or general laziness on our part and we can provide something more useful in the future.</p>",
        "id": 218718142,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1607012814
    },
    {
        "content": "<p><a href=\"https://github.com/FHIR/sushi/issues/686\">SUSHI #686</a>.  I think I'm remembering now that we do the cardinality validation after processing the instance, on the result of the instance (in JSON format) -- so we can't as easily relate a specific issue in the JSON back to the specific line of FSH in the source file.  Still, we'll look at it.  At a minimum I would hope we might be able to give you indexes in the path (e.g., <code>Questionnaire.item[14].item[1].item[2].item</code>) -- but <em>maybe</em> we could also find a way to related it back to a specific line of code.  Maybe.</p>",
        "id": 218719069,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1607013169
    },
    {
        "content": "<p>Can you link it to a particular line of code? It's something that is missing, so there isn't a line of code to link to, right? On the other hand, including the path should be enough, then I can figure out where to put it.</p>",
        "id": 218734427,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1607019864
    },
    {
        "content": "<p>Next thing you'll know, you'll want them to actually tell you the exact thing wrong!  In my day, we only had three errors, What?  Where? and How?  and we liked it that way</p>",
        "id": 218734825,
        "sender_full_name": "David Pyke",
        "timestamp": 1607020065
    },
    {
        "content": "<p>Good point, <span class=\"user-mention\" data-user-id=\"191380\">@Elliot Silver</span>.  We can't point at a line of code that is missing.  Ha.  I didn't think of that.  Still, as you confirmed, we could be more helpful.</p>\n<p><span class=\"user-mention\" data-user-id=\"192587\">@David Pyke</span> - we could try to just dump a bunch of binary and/or assembly code to the screen instead.  Then you would really need to work hard to find out what the error is.  Would you prefer that?  I mean, that kind of negative reinforcement would make people choose to author fewer errors because each one is so painful.  That's how it works, right?</p>",
        "id": 218735486,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1607020366
    },
    {
        "content": "<p>Absolutely!  The more difficult to read the error, the better code is produced.  I learned that from my IBM 370 Assembler classes</p>",
        "id": 218735587,
        "sender_full_name": "David Pyke",
        "timestamp": 1607020423
    },
    {
        "content": "<p>correlation does not mean causation....    more difficult to use tools, are only used by more dedicated people. We need MORE people engaged, not less.</p>",
        "id": 218735885,
        "sender_full_name": "John Moehrke",
        "timestamp": 1607020569
    },
    {
        "content": "<p>And perhaps randomly shuffle the output as well?</p>",
        "id": 218735931,
        "sender_full_name": "David Hay",
        "timestamp": 1607020592
    },
    {
        "content": "<p>Yeah, if I could get error messages out of order, that's so much better</p>",
        "id": 218736315,
        "sender_full_name": "David Pyke",
        "timestamp": 1607020796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"192587\">David Pyke</span> <a href=\"#narrow/stream/215610-shorthand/topic/Error.20message/near/218734825\">said</a>:</p>\n<blockquote>\n<p>Next thing you'll know, you'll want them to actually tell you the exact thing wrong!  In my day, we only had three errors, What?  Where? and How?  and we liked it that way</p>\n</blockquote>\n<p>What?</p>",
        "id": 218737239,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1607021261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191321\">David Hay</span> <a href=\"#narrow/stream/215610-shorthand/topic/Error.20message/near/218735931\">said</a>:</p>\n<blockquote>\n<p>And perhaps randomly shuffle the output as well?</p>\n</blockquote>\n<p>I could swear it has that feature already.</p>",
        "id": 218737325,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1607021293
    },
    {
        "content": "<p>Can we have a fork that only says \"you messed up somehow somewhere\"?</p>",
        "id": 218741630,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1607023233
    },
    {
        "content": "<p>just put a random list of error messages at the top, then have the sushi output, and then put a random list of code lines at the bottom.</p>\n<p>I was going to suggest random error messages and random code lines interspersed throughout the SUSHI output, but that seemed slightly silly.</p>",
        "id": 218741650,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1607023247
    },
    {
        "content": "<p>And don't forget to make sushi muddle the INPUT fsh files, so that people really have one shot at doing right.</p>",
        "id": 218742107,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1607023457
    },
    {
        "content": "<p>that would be the greatest compiler ever made!</p>",
        "id": 218742181,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1607023494
    },
    {
        "content": "<p>mSUSHI!  (mashed)  IT's the future</p>",
        "id": 218742239,
        "sender_full_name": "David Pyke",
        "timestamp": 1607023533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"192587\">David Pyke</span> <a href=\"#narrow/stream/215610-shorthand/topic/Error.20message/near/218742239\">said</a>:</p>\n<blockquote>\n<p>mSUSHI!  (mashed)  IT's the future</p>\n</blockquote>\n<p>Are you sure? Looks more like an IHE profile.</p>",
        "id": 218743410,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1607024087
    },
    {
        "content": "<p>Great ideas, everyone.  Really great.  We do accept Pull Requests, so I expect to see some soon.</p>",
        "id": 218747447,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1607026022
    },
    {
        "content": "<p>Great!  I'll add my randomizer and a global replace of all error messages with \"What?\" and random high bit characters by EOD tomorrow.  I'm glad to help move this project forward.</p>",
        "id": 218757253,
        "sender_full_name": "David Pyke",
        "timestamp": 1607031086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"192587\">David Pyke</span> <a href=\"#narrow/stream/215610-shorthand/topic/Error.20message/near/218757253\">said</a>:</p>\n<blockquote>\n<p>Great!  I'll add my randomizer and a global replace of all error messages with \"What?\" and random high bit characters by EOD tomorrow.  I'm glad to help move this project forward.</p>\n</blockquote>\n<p>I think I'd prefer \"No\", and if you expand for details (or use a flag for <em>verbose</em> debugging info), you get \"Just, no.\"  :-P</p>\n<p>If we need to nod to the hardcore devs, we can use the color of the text as a hint to the category of error (or line number by RGB value).</p>",
        "id": 218759958,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1607032484
    },
    {
        "content": "<p>Line numbers in decimal base are quite uninteresting, i'd say</p>",
        "id": 218762237,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1607033584
    },
    {
        "content": "<p>You're right.  I'll expand them to binary, insert random bits every other bit and then convert to ASCII.</p>",
        "id": 218828896,
        "sender_full_name": "David Pyke",
        "timestamp": 1607086743
    }
]