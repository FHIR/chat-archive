[
    {
        "content": "<p>Creating complex extensions and getting a number of these errors: error: The slice latitude on extension must reference an existing extension, or fix a url if the extension is defined inline.</p>\n<p>a) Would be good to include the filename in the error<br>\nb) any thoughts why I'm getting the error? sample: (based on the example from <a href=\"http://build.fhir.org/ig/HL7/fhir-shorthand/#defining-extensions\" target=\"_blank\" title=\"http://build.fhir.org/ig/HL7/fhir-shorthand/#defining-extensions\">http://build.fhir.org/ig/HL7/fhir-shorthand/#defining-extensions</a> )</p>\n<div class=\"codehilite\"><pre><span></span>Extension: geolocation\nId: geolocation\nDescription:  &quot;None supplied yet&quot;\n\n* extension contains\n    latitude 0..1\n\n// definitions of sub-extensions\n* extension[latitude] ^definition = &quot;No description&quot;\n* extension[latitude].value[x] only decimal\n</pre></div>",
        "id": 184970282,
        "sender_full_name": "David Hay",
        "timestamp": 1578355391
    },
    {
        "content": "<p>looks like I need to specify the internal url in some way...</p>",
        "id": 184970379,
        "sender_full_name": "David Hay",
        "timestamp": 1578355493
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 184971431,
        "sender_full_name": "David Hay",
        "timestamp": 1578356641
    },
    {
        "content": "<p>Right, I think you need to add the url for the sub-extension:</p>\n<div class=\"codehilite\"><pre><span></span>* extension[latitude].url = &quot;latitude&quot;\n</pre></div>\n\n\n<p>I can't access the built documentation (due to the IG Auto Build bug), but the example in the Wiki shows this approach correctly: <a href=\"https://github.com/HL7/fhir-shorthand/wiki/3.2-Extensions\" target=\"_blank\" title=\"https://github.com/HL7/fhir-shorthand/wiki/3.2-Extensions\">https://github.com/HL7/fhir-shorthand/wiki/3.2-Extensions</a></p>\n<p>I guess we should think about whether or not it makes sense to infer the url value from the slice name when the author doesn't provide an explicit url value.  That might make sense.</p>",
        "id": 185016196,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578408083
    },
    {
        "content": "<p>Also, I <em>thought</em> we <em>were</em> showing the filename in the error messages, but maybe we missed passing in that metadata for this particular log message.</p>",
        "id": 185016288,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578408136
    },
    {
        "content": "<p>pretty sure I tried that - but will check...</p>",
        "id": 185043196,
        "sender_full_name": "David Hay",
        "timestamp": 1578424112
    },
    {
        "content": "<p>No - you're right - that did work. Some interesting twists (using a different extension) though. </p>\n<p>a) It only needs to be done on the first one - the following works fine (and the ED looks Ok to a cursory view)</p>\n<div class=\"codehilite\"><pre><span></span>Extension: practitioner-additional-authorizations\nId: practitioner-additional-authorizations\nDescription:  &quot;None supplied yet&quot;\n\n* extension contains\n    auth 0..1 and\n    period 0..1\n\n// definitions of sub-extensions\n* extension[auth].url = &quot;auth&quot;\n* extension[auth] ^definition = &quot;A code identifying the additional authorisations that a practitioner is authorised to perform&quot;\n* extension[auth].value[x] only CodeableConcept\n\n* extension[period] ^definition = &quot;The period the additional authorization is effective&quot;\n* extension[period].value[x] only Period\n</pre></div>\n\n\n<p>b) But changing the sub extension name to 'code' results in an error. ie this definition:</p>\n<div class=\"codehilite\"><pre><span></span>* extension contains\n    code 0..1 and\n    period 0..1\n\n// definitions of sub-extensions\n* extension[code].url = &quot;code&quot;\n* extension[code] ^definition = &quot;A code identifying the additional authorisations that a practitioner is authorised to perform&quot;\n* extension[code].value[x] only CodeableConcept\n\n* extension[period] ^definition = &quot;The period the additional authorization is effective&quot;\n* extension[period].value[x] only Period\n</pre></div>\n\n\n<p>results in this error (I'm guessing that code is a reserved word):</p>\n<div class=\"codehilite\"><pre><span></span>error: No element found at path extension[code].url for practitioner-additional-authorizations, skipping rule\n  File: /Users/davidhay/Dropbox/contracting/MOH/ResourcesForRegistryIG/shorthand/extension-practitioner-additional-authorizations.fsh\n  Line: 10\nerror: No element found at path extension[code].value[x] for practitioner-additional-authorizations, skipping rule\n  File: /Users/davidhay/Dropbox/contracting/MOH/ResourcesForRegistryIG/shorthand/extension-practitioner-additional-authorizations.fsh\n  Line: 12\n</pre></div>\n\n\n<p>c) And it does not like the url being attached to the second sub extension. This definition:</p>\n<div class=\"codehilite\"><pre><span></span>* extension contains\n    auth 0..1 and\n    period 0..1\n\n// definitions of sub-extensions\n* extension[auth].url = &quot;auth&quot;\n* extension[auth] ^definition = &quot;A code identifying the additional authorisations that a practitioner is authorised to perform&quot;\n* extension[auth].value[x] only CodeableConcept\n\n* extension[period].url = &quot;period&quot;\n* extension[period] ^definition = &quot;The period the additional authorization is effective&quot;\n* extension[period].value[x] only Period\n</pre></div>\n\n\n<p>results in</p>\n<div class=\"codehilite\"><pre><span></span>error: Cannot fix period to this element; a different uri is already fixed: http://hl7.org/fhir/StructureDefinition/organization-period.\n  File: /Users/davidhay/Dropbox/contracting/MOH/ResourcesForRegistryIG/shorthand/extension-practitioner-additional-authorizations.fsh\n  Line: 14\n</pre></div>",
        "id": 185044847,
        "sender_full_name": "David Hay",
        "timestamp": 1578425180
    },
    {
        "content": "<p>Issue c) is related to using the slicename 'period' - renaming it makes it work OK...</p>",
        "id": 185050077,
        "sender_full_name": "David Hay",
        "timestamp": 1578428096
    },
    {
        "content": "<p>I think <code>a)</code> and <code>c)</code> are actually related.  Here is what's going on... When you say <code>extension contains period 0..1</code>, SUSHI looks for an already existing extension named <code>period</code>.  If it finds one, it uses it (and fixes the <code>url</code>) appropriately.  If it doesn't find one, it sets up the slice so the author can specify the <code>url</code>.  In this case, core FHIR already defines an extension w/ <code>\"name\": \"period\"</code> (<a href=\"http://hl7.org/fhir/R4/extension-organization-period.json.html\" target=\"_blank\" title=\"http://hl7.org/fhir/R4/extension-organization-period.json.html\">here</a>), so SUSHI assumes that is what you want and sets it up that way.</p>\n<p>This is why <code>a)</code> works .  You don't need to declare the <code>url</code> because SUSHI is using the <code>url</code> from the pre-existing FHIR extension.  It is also why <code>c)</code> fails -- because you can't overwrite an existing fixed value.</p>",
        "id": 185052816,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578429854
    },
    {
        "content": "<p>It's an interesting problem.  It seems we might need to adjust how FHIR Shorthand works to make it less ambiguous -- so we know if you are intending to create a <em>new</em> extension or re-use an existing one...  Hmmm....</p>",
        "id": 185053010,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578429983
    },
    {
        "content": "<p>As for <code>b)</code>, I wonder if that is a parser error.  It might be that <code>code</code> is a keyword in our grammar already and that using it in this context confuses the parser.  If that's what is going on, it should be a fairly easy fix.</p>",
        "id": 185053081,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578430048
    },
    {
        "content": "<p>Oh-- I see you had already guessed it was a reserved word.  Good guess!  Ideally though, we don't really want it to be a \"reserved\" word -- we should allow you to use it in contexts like this.</p>",
        "id": 185053430,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578430317
    },
    {
        "content": "<p>Great to understand how this works! But doesn't this approach mean that names need to be globally unique? Is 'contains' only used for defining sub-extensions?</p>",
        "id": 185053579,
        "sender_full_name": "David Hay",
        "timestamp": 1578430372
    },
    {
        "content": "<p><code>contains</code> is used in any context where slices apply.  So... since extensions (and sub-extensions) are really just slices of extension, we use <code>contains</code>.  But you would also use <code>contains</code> to slice any other element as well.  Currently, however, extensions are the only context in which the slice name might refer to an external entity -- so it's the only place where we currently run into this.</p>\n<p>Well... that's not entirely true.  In any place we need to look something up by name, there is the possibility of finding the wrong one.  So, for example, <code>performer only Practitioner</code> could refer to the resource Practitioner, but also could refer to a profile with the _name_ Practitioner (if it existed).  The only real way around that is to require full URL identifiers, but that's not very user-friendly.  So... we should document rules about how lookups are performed and what locations are preferred over others -- and if you want something that isn't the \"preferred\" result of a lookup, only _then_ do you need to use the full URL.</p>\n<p>That still doesn't solve the <code>extension contains</code> problem though, since we still can't tell if you want an existing extension or a new one.</p>",
        "id": 185054430,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1578431017
    },
    {
        "content": "<p>Using name does seem a bit fragile - to take your 'performer only Practitioner' example, it sounds that it could be quite easy to muck it up. Would alias help out here?</p>",
        "id": 185055212,
        "sender_full_name": "David Hay",
        "timestamp": 1578431481
    }
]