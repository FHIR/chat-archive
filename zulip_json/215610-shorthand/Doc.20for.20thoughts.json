[
    {
        "content": "<p>Hey Folks, I've put together a doc with some of my thoughts from working with FSH - figured it might be useful as a place for people to put their thoughts too.  I'll turn these into issues on the tracker, but for now it's easier for me to have a place to put ideas:<br>\n<a href=\"https://docs.google.com/document/d/1dPC8sWsNzYtZevlQp8FCvn5EbHZt5LoacYfqhWYcVfc/\" target=\"_blank\" title=\"https://docs.google.com/document/d/1dPC8sWsNzYtZevlQp8FCvn5EbHZt5LoacYfqhWYcVfc/\">https://docs.google.com/document/d/1dPC8sWsNzYtZevlQp8FCvn5EbHZt5LoacYfqhWYcVfc/</a></p>",
        "id": 187223822,
        "sender_full_name": "Nick George",
        "timestamp": 1580684440
    },
    {
        "content": "<p>Seems google docs doesn't work for everyone, I'll upload here:</p>",
        "id": 187224647,
        "sender_full_name": "Nick George",
        "timestamp": 1580686101
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/wgMste6fN13p_iKIwEokIhih/FHIR-Shorthand-Thoughts.docx\" target=\"_blank\" title=\"FHIR-Shorthand-Thoughts.docx\">FHIR-Shorthand-Thoughts.docx</a></p>",
        "id": 187224648,
        "sender_full_name": "Nick George",
        "timestamp": 1580686121
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"196561\">@Nick George</span> -- some really good feedback here.  Regarding #1...</p>\n<blockquote>\n<p>1) The profile has no control over the name of the slice</p>\n</blockquote>\n<p>Technically you <em>can</em> control the slicename by using an alias.  For example, US Core <em>could</em> create an alias called <code>race</code> that points to their race extension and then use that alias when introducing the extension to a profile.  But that is admittedly a bit more complicated than we'd like.  I don't mention it as a counter-example, but moreso to provide a workaround that should work w/ current FSH/SUSHI for those struggling with this now.  I agree we should think more about how we control slicenames in general.</p>",
        "id": 187226558,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580689996
    },
    {
        "content": "<blockquote>\n<p>2)    The slice name is non-standard case (CapitalCase instead of camelCase)</p>\n</blockquote>\n<p>Does FHIR actually say anything about this?  I also prefer lowercase when given the choice, but there are counterexamples in the core FHIR spec.  For example, the <a href=\"http://hl7.org/fhir/R4/bp.html\" target=\"_blank\" title=\"http://hl7.org/fhir/R4/bp.html\">BP profile</a> contains the following slicenames: <code>BPCode</code>, <code>SystolicBP</code>, <code>DiastolicBP</code>.  In fact, this is the profile that convinced me it is OK to have capitalized slicenames.</p>",
        "id": 187226618,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580690142
    },
    {
        "content": "<blockquote>\n<p>Proposal: specify slice name separate from type.</p>\n<ul>\n<li>\n<p>extension[species] FishSpecies</p>\n</li>\n<li>\n<p>extension[species] 0..1 FishSpecies</p>\n</li>\n</ul>\n</blockquote>\n<p>Personally, I kind of like the consistency that whenever you add a slice, you always do it the same way, regardless of context -- so I like using <code>extension contains</code>...  But that is a personal preference.  I may be in the minority (I am kind of known for <em>really</em> liking consistency).  But I do like your idea of separating the slice name from the type.  What do you think of this?</p>\n<blockquote>\n<ul>\n<li>extension contains FishSpecies as species</li>\n</ul>\n</blockquote>\n<p>or if we did away w/ <code>contains</code> here:</p>\n<blockquote>\n<ul>\n<li>extension[FishSpecies as species] 0..1</li>\n</ul>\n</blockquote>\n<p>Or we could borrow from CQL's convention for renaming imported libraries (e.g., <em>FishSpecies called species</em>).</p>",
        "id": 187226884,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580690646
    },
    {
        "content": "<p>I'm a huge fan of consistency too, but I think it's worth considering Extensions as a separate case because they're so far and away the most common kind of slicing people will do.  I think optimizing/ for the most common case makes sense.</p>",
        "id": 187227295,
        "sender_full_name": "Nick George",
        "timestamp": 1580691599
    },
    {
        "content": "<p>regarding <br>\nextension[FishSpecies as species] 0..1<br>\nthat seems doable, but a bit odd, imho.  I think that <br>\n$FIELD_NAME[$SLICE_ NAME] $info $about $slice<br>\nis a more obvious pattern</p>",
        "id": 187227360,
        "sender_full_name": "Nick George",
        "timestamp": 1580691683
    },
    {
        "content": "<p>as for <code>SystolicBP</code>, I consider those non-standard :) <br>\nthat being said, the flexibility for a given resource to define its own slicenames, regardless of the information on the extension SD, is more important to me than the actually slicename that gets chosen</p>",
        "id": 187227410,
        "sender_full_name": "Nick George",
        "timestamp": 1580691794
    },
    {
        "content": "<blockquote>\n<p>Thought: Referring to extensions by name makes me a little uncomfortable, because it could be ambiguous, e.g., if two Extensions share a name, or Extension has a name that is a Resource type.</p>\n</blockquote>\n<p>Yeah, I think in an effort to try to be ultra flexible, we might be shooting ourselves in the foot a bit.  I expect we might need some more strict naming resolution rules in the near future.  You're right on.</p>",
        "id": 187228428,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580693592
    },
    {
        "content": "<p>I updated that one in the google doc - was writing exactly what you ended up saying on stream - that reserving name resolution for things within the same package, and using URLs for external resolution  could be a reasonable solution</p>",
        "id": 187228501,
        "sender_full_name": "Nick George",
        "timestamp": 1580693702
    },
    {
        "content": "<p>Yes, although we can still run into this issue even locally -- for example, if someone uses <code>Foo</code> as the <code>name</code> of one extension and then <code>Foo</code> as the <code>id</code> of another.  Since we allow you to reference by name <em>or</em> id, this would be ambiguous.   (Although doing what I just said is a horrible idea, so no one should ever do that).</p>\n<p>More realistically, FHIR does allow you to re-use the <code>id</code> for a different type, even in the same IG.  So you could have a profile w/ name/id <code>Foo</code> and a ValueSet w/ name/id <code>Foo</code> in the same IG.  Usually we could tell from context which one is intended (when <code>Foo</code> is referenced), but maybe there are some cases where that might be ambiguous?</p>\n<p>Also, someone reported on GitHub that there are issues if you give a profile a name/id that matches a FHIR resource name (e.g., <code>Patient</code>).  Is it fair/reasonable/user-friendly to require that even FHIR base resources must be specified by URL?  We have to figure this stuff out.</p>",
        "id": 187228680,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580694016
    },
    {
        "content": "<p>my vote would be to pick one of name or id (I'd vote id), and error out if two things in the same package have the same id.  Not sure what the spec says about package-wide uniqueness of id on SDs, but it seems a reasonable requirement to me.  If it's not something that is enforced, I think we'd have to go URL everywhere.  But my vote would be for Name to not have syntactical meaning</p>",
        "id": 187228768,
        "sender_full_name": "Nick George",
        "timestamp": 1580694184
    },
    {
        "content": "<p>for ValueSets/CodeSystems, I'd vote always use URL</p>",
        "id": 187228781,
        "sender_full_name": "Nick George",
        "timestamp": 1580694212
    },
    {
        "content": "<p>the number of cases where you're using a local ValueSet/CodeSystem are rare enough that I don't think we need the ambiguity</p>",
        "id": 187228792,
        "sender_full_name": "Nick George",
        "timestamp": 1580694236
    },
    {
        "content": "<blockquote>\n<p>If we make a specialized grammar for keyword ComplexExtensions...</p>\n</blockquote>\n<p>We did consider the syntax that allows you to omit the <code>extension[]</code> bit and just refer to the extension slicename (or id? -- I say this because if you look at the profile documentation in a published IG, and that profile uses an extension, the table actually shows the extension's <code>id</code> (not the slicename) -- so that might be what users want to use).  Anyway, I think <span class=\"user-mention\" data-user-id=\"191447\">@Mark Kramer</span> is a fan of supporting a shorter syntax for referencing extensions and complex extension sub-extensions.  We didn't go quite as far as you suggest, but only because we did not think of it!</p>",
        "id": 187228830,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580694243
    },
    {
        "content": "<p>(but just to be clear, none of that is implemented at this point and we weren't 100% agreed on how it should work -- so your feedback is very helpful).</p>",
        "id": 187228852,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580694307
    },
    {
        "content": "<p>I think it puts the id of the extension just to be helpful (and not spit out the full url).  The rule is that slicename of a subfield matches url of the subfield (when it's not an externally defined extension).</p>\n<p>Yeah, and to be clear I'm just spitballing ideas here myself, all of this is just things to consider, based on my experience using our language internally</p>",
        "id": 187228930,
        "sender_full_name": "Nick George",
        "timestamp": 1580694433
    },
    {
        "content": "<p>Also just to be clear, I think you've all done a fantastic job so far :)  The main reason I'm making so many suggestions is that I wanna be able to switch over from my langauge to yours :)</p>",
        "id": 187228939,
        "sender_full_name": "Nick George",
        "timestamp": 1580694478
    },
    {
        "content": "<blockquote>\n<p>my vote would be to pick one of name or id (I'd vote id)</p>\n</blockquote>\n<p>Hmm... currently when you declare a thing (e.g., <code>Profile: MyPatientProfile</code>), the bit that goes after the <code>:</code> becomes the <em>name</em>.  This is partially why we allow reference by name, because it seems natural given that specific approach.  Do you think the bit after the <code>:</code> should actually be the <em>id</em> then as well?</p>",
        "id": 187228977,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580694484
    },
    {
        "content": "<p>hmm good point.  The Software Engineer in me is tempted to say the <code>id</code> should be the top-level definer, but Name is probably more aesthetically pleasing... Personally I've always found the whole, Id/Name/Title a bit excessive...</p>",
        "id": 187229040,
        "sender_full_name": "Nick George",
        "timestamp": 1580694627
    },
    {
        "content": "<p>which do you use for the URL?</p>",
        "id": 187229043,
        "sender_full_name": "Nick George",
        "timestamp": 1580694650
    },
    {
        "content": "<blockquote>\n<p>Also just to be clear, I think you've all done a fantastic job so far :) </p>\n</blockquote>\n<p>Understood.  And we definitely appreciate the feedback, especially from someone who has experience designing a similar thing themselves.  And don't worry -- we're trying not to make changes just because <em>one</em> person suggests them.  Ideally, these sorts of things will be discussed in a telecon or other open meeting so we can come to consensus of a broader diversity of users.  Of course, that depends on users dialing in and/or contributing here on Zulip!</p>",
        "id": 187229048,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580694670
    },
    {
        "content": "<blockquote>\n<p>which do you use for the URL?</p>\n</blockquote>\n<p>We use <code>id</code>.  At one point, I <em>think</em> the IG Publisher required the url to have form <code>${canonicalbase}/${type}/${id}</code> -- although you're the second person to ask me that, so I'm beginning to second-guess myself!</p>",
        "id": 187229094,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580694758
    },
    {
        "content": "<p>in that case I'd vote for making the top level identifier the <code>id</code>.  This would also minimize the diffs between an internal reference and an external reference. it would either be<br>\n<code>${id}</code><br>\nor<br>\n<code>${external_url}/StructureDefinition/${id}</code></p>",
        "id": 187229152,
        "sender_full_name": "Nick George",
        "timestamp": 1580694902
    },
    {
        "content": "<blockquote>\n<p>The Software Engineer in me is tempted to say the id should be the top-level definer, but Name is probably more aesthetically pleasing</p>\n</blockquote>\n<p>It is actually a difficult call.  The <code>name</code> is intended to be the machine-friendly name used for code generation.  In that way, it seems like a fair way to want to reference something and it is aesthetically pleasing.  The other thing is that it seems ids most often start w/ lowercase, so (to me) profiles and extensions lose the feel of being like a class when we start doing <code>Profile: us-core-patient</code>.  (But I don't know exactly why I want them to have a class-y feel in the first place).</p>",
        "id": 187229161,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580694956
    },
    {
        "content": "<p>but this is a more minor point to me because it doesn't really affect the capability</p>",
        "id": 187229163,
        "sender_full_name": "Nick George",
        "timestamp": 1580694960
    },
    {
        "content": "<blockquote>\n<p>If I understand correctly, it’s not currently possible to define a multi-level complex extensions via FSH</p>\n</blockquote>\n<p>I <em>think</em> this is possible?  At least it is intended to be.  If it doesn't work that's a bug.  That said, point taken on the simpler grammar.</p>",
        "id": 187229258,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580695107
    },
    {
        "content": "<blockquote>\n<p>Ginzu/auto slicing on Coding</p>\n</blockquote>\n<p>Aside from the very simple approach for extensions, we haven't defined any of the rules/algorithms for Ginzu slicing -- so your suggestions are very welcome.  Thanks!</p>",
        "id": 187229273,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580695164
    },
    {
        "content": "<blockquote>\n<p>5) Alias feel a bit ambiguous</p>\n<p>...</p>\n<p>Suggestion:  Adopt the common “$VARIABLE” pattern.</p>\n</blockquote>\n<p>Yeah, I think you made a really good point about this in the meeting.  I too have noticed that fat-fingered aliases generally just get processes as strings, so it's hard for SUSHI to know it was not intended that way.  A <code>$</code> prefix would certainly help with that!  We'll discuss this further for sure.</p>",
        "id": 187229327,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580695286
    },
    {
        "content": "<p>Thanks again for the excellent feedback!  I'm going to signoff for now.  Enjoy the rest of the connectathon!</p>\n<p>BTW -- if the doc becomes cumbersome (especially w/out Google docs), feel free to introduce further topics here or even as issues on the appropriate GitHub (SUSHI or fhir-shorthand, depending on if it's a comment about the language or the implementation).</p>",
        "id": 187229377,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580695382
    },
    {
        "content": "<p>Sounds good!  Great to meet you and look forward to working with you!</p>",
        "id": 187229380,
        "sender_full_name": "Nick George",
        "timestamp": 1580695405
    },
    {
        "content": "<p>Same!</p>",
        "id": 187229551,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1580695739
    },
    {
        "content": "<p>My top 3 things that would make this more ready for prime time (I will put these suggestions where they belong, but wanted to see if worth discussing)</p>\n<ol>\n<li>SUSHI - Support roundtripping between FHIR and shorthand</li>\n<li>SUSHI - Clean the unnecessary / legacy content that sushi puts in a structure definition (I didn't feel comfortable that sushi started by cloning the core resource)</li>\n<li>SHORTHAND and SUSHI- Logical models</li>\n</ol>",
        "id": 187317478,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1580773344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> <span class=\"user-mention\" data-user-id=\"191407\">@Rick Geimer</span> had the first implementation of Hatchery in XSLT at the end of the connectathon and was able to do round tripping with that + SUSHI. <span class=\"user-mention\" data-user-id=\"193430\">@Alexander Zautke</span> also suggested to implement FHIR Shorthand -&gt; Structure Definitions in the FHIR Mapping Language...</p>",
        "id": 187317776,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1580773659
    },
    {
        "content": "<p>reconciliation of the mapping language and short hand is in the future</p>",
        "id": 187317835,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1580773702
    }
]