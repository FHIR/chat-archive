[
    {
        "content": "<p>I have my sushi stuff in a igroot/input/shorthand folder to avoid the fsh folder to trigger sushi automatically. I manually run sushi and then copy whatever I want from sushi output into my IG input. I'm ok with manual work at this moment.</p>",
        "id": 205113072,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1595854676
    },
    {
        "content": "<p>I can try to figure out a decent folder configuration for having that integration less obtrusive (and less obtuse), but I think sushi can be more interoperable - everything works fine if we use one tool, but the real interoperability starts when the tools really need to share roles</p>",
        "id": 205113267,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1595854778
    },
    {
        "content": "<p>(we're all experienced with systems that can easily export data in all formats, the funny interoperability issues start when the tools need to actually import data from outside) - that is for me the turning point to interoperability. Applying that to sushi:</p>",
        "id": 205113476,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1595854873
    },
    {
        "content": "<ol>\n<li>We need to find a good folder structure for a typical IG that uses sushi for part of the content.</li>\n<li>We need a way for sushi to NOT replace some of the artefacts - for example I have codesystems that I start in sushi, then I have to add language translations in my own tooling, then I don't want sushi to mess with them anymore</li>\n</ol>",
        "id": 205113694,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1595854997
    },
    {
        "content": "<p>just for brainstorming: </p>\n<ul>\n<li>in YAML we can embed json. in sushi we could embed or point to json/xml...</li>\n<li>we could have an extension \"youCanTouchThis\" - which is sushi telling itself \"ok to replace this artifact\"</li>\n</ul>",
        "id": 205114076,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1595855214
    },
    {
        "content": "<p>Since this is becoming such a popular topic, here's one more:<br>\nI think we should:</p>\n<ul>\n<li>more clearly separate the input and the output folders (it's all mixed now) - say a \"ig-data-in\" and \"ig-data-out\". </li>\n<li>split the creation of the IG infrastructure (like getting the batch files etc, which you really only do once per ig, and after that you normally don't touch often), and the updating of the fsh-generated resources.</li>\n</ul>",
        "id": 205163880,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1595881375
    },
    {
        "content": "<p>I am happily surprised to see that the second of my  bullet point may be working well with sushi --init (which i tried, doesn't work, but i will wait for next release)</p>",
        "id": 205523577,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596138266
    },
    {
        "content": "<p>but the first point shows one thing that I consider a design flaw:</p>",
        "id": 205523622,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596138284
    },
    {
        "content": "<p>sushi regenerates everything every time it runs. if sushi has a ig.ini as input, it should not touch it (unless you explicitly tell it to)</p>",
        "id": 205523747,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596138341
    },
    {
        "content": "<p>and there should be a way for sushi to know whether to replace some artifacts.</p>",
        "id": 205523914,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596138440
    },
    {
        "content": "<p>Suggestion : why not give sushi a parameter <code>-ihsus &lt;foldername&gt;</code> and sushi would then use the stuff in that folder when they'd conflict with what sushi just generated. That folder could contain an ig.ini, a menu.xml, some artifacts... This would be simple. <br>\nAre there any donwsides that I can't think of?</p>",
        "id": 205524259,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596138697
    },
    {
        "content": "<p>(btw, ihsus means obviously InHeritedStuffthatshallremainUntouchedasiS)</p>",
        "id": 205524383,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596138767
    },
    {
        "content": "<blockquote>\n<p>if sushi has a ig.ini as input, it should not touch it (unless you explicitly tell it to)</p>\n</blockquote>\n<p>Can you elaborate on that?  If you have {{ig.ini}} outside of the {{ig-data}} folder, SUSHI won't touch it.  If you have it inside of the {{ig-data}} folder, I think SUSHI copies it to the output folder, but that's all.  So what touching is it that you don't want SUSHI to do?</p>",
        "id": 205524577,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596138845
    },
    {
        "content": "<blockquote>\n<p>and sushi would then use the stuff in that folder when they'd conflict with what sushi just generated. . That folder could contain an ig.ini, a menu.xml, some artifacts...</p>\n</blockquote>\n<p>Today, if you don't include <code>template</code>, <code>menu</code>, <code>history</code> properties in the <code>config.yaml</code>, SUSHI won't generate those things.  And if you don't have <code>ig.ini</code>, <code>menu.xml</code>, <code>package-list.json</code> in their relative locations in the <code>ig-data</code> folder, it won't copy them either.  So if you have <code>ig.ini</code>, <code>menu.xml</code>, and <code>package-list.json</code> anywhere <em>but</em> <code>ig-data</code>, SUSHI won't touch them (as long as you don't specify their contents in <code>config.yaml</code> either).</p>",
        "id": 205525009,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596139064
    },
    {
        "content": "<p>For resources, if SUSHI finds a resource in one of the supported <code>ig-data/input</code> subfolders, and that resource matches canonicals with a resource SUSHI generated, SUSHI will prefer the one in <code>ig-data/input/*</code> and copy that over instead of overwriting it with the generated content.</p>",
        "id": 205525210,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596139169
    },
    {
        "content": "<p>In the next few days I hope to put a fuller proposal on the table for how SUSHI / Publisher integration can work in a more seamless way.  I hope it will address some of the issues you've brought up, so I will appreciate your feedback!</p>",
        "id": 205525382,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596139243
    },
    {
        "content": "<p>suppose if I want my config.yaml to generate all that stuff except an ig.ini. <br>\nThat is what I'm proposing.</p>",
        "id": 205525557,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596139328
    },
    {
        "content": "<p>we can have an option for each of the things that sushi generates, but wouldn't it be easier to just tell sushi :<br>\n\"hey sushi, when you're done, here's a couple of files to replace anything with the same name even if you may have created it\"</p>",
        "id": 205525687,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596139403
    },
    {
        "content": "<p>that would be a simple thing, I think. then it's up to me to decide which files I want to have there (and replace those created by sushi)</p>",
        "id": 205525820,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596139458
    },
    {
        "content": "<p>in this, I am making a separation between input data and output data (which I hope it's agreeable - it's complicated today with the integration)</p>",
        "id": 205525902,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596139514
    },
    {
        "content": "<p>if we have an optional input folder besides an output folder, this should be easy, i think.<br>\nToday there is an issue that the output folder is a child of the input folder, unless when run by the ig publisher, which puts the output in the parent folder to the input.. that is complicated.</p>",
        "id": 205526307,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596139697
    },
    {
        "content": "<p>FSHOnly works well for me</p>",
        "id": 205526325,
        "sender_full_name": "John Moehrke",
        "timestamp": 1596139710
    },
    {
        "content": "<p>(i use fshonly as well, this is the broader set of problems that I mention above)</p>",
        "id": 205526399,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596139740
    },
    {
        "content": "<p>I think maybe I'm not fully understanding.  <em>With the exception of the IG resource</em> (and I realize that is a big exception), you can control whether or not SUSHI generates each file by excluding its corresponding property in the SUSHI config.  If you don't want it to generate a resource (profile, extension, etc) you can comment it out -- or as I noted above, put an alternate non-FSH version into <code>ig-data</code> that will be used instead.  But I don't understand why you would want to tell SUSHI to generate something AND then also tell it to ignore what it generated and use something else instead.  If you want it to use something else instead, then tell SUSHI not to generate it anymore and supply your own \"something else\".</p>",
        "id": 205526702,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596139882
    },
    {
        "content": "<p>i think I realized it was easier to have sushi replace the file instead of telling it not to generate it.</p>",
        "id": 205526833,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596139936
    },
    {
        "content": "<p>easier and more powerful</p>",
        "id": 205526853,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596139944
    },
    {
        "content": "<p>I guess I find it confusing if you specify multiple input sources, which is what you're doing when you provide info in the config that says to generate the file but also provide a file to replace the generated one.  For example, I can imagine people looking at the output menu.xml file and looking at the configured menu content in the config and wondering why they don't match at all (until they realize there is a menu.xml override in some other folder).  I really think it's not a great idea to specify two inputs for the same output and rely on rules to determine which one is used and which one is tossed out.</p>",
        "id": 205527361,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596140241
    },
    {
        "content": "<p>and wasn't that the whole point of the config.yaml - to have one file that ruled it all and told me what was being used for what?</p>",
        "id": 205527457,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1596140284
    },
    {
        "content": "<p>In this thread i had some random proposals but here is short:</p>\n<ol>\n<li>\n<p>allow an \"input stuff\" that sushi can take as optional parameter, and whatever is in that folder, sushi will copy to the folder where it generates the IG<br>\n1.1 use that in the integration e.g. ask Grahame to add a fixed parameter to the way sushi is executed inside the IG publisher</p>\n</li>\n<li>\n<p>Make sushi have <strong>2 modules</strong>, with options:<br>\n2.1 Module 1 <strong>IG generation</strong><br>\n2.1.1 init a default ig (--init)<br>\n2.2.1 Recreate everything about IG (--regen?) - can be by assumed to be default if there is nothing in the input <br>\n2.2 Module 2 <strong>Shorthand parser</strong><br>\n2.2.1 generate everything and ignore input folder<br>\n2.2.2 generate everything and use input folder to overwrite</p>\n</li>\n</ol>",
        "id": 205527589,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596140372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/215610-shorthand/topic/sushi.20-.20ig.20integration/near/205527361\">said</a>:</p>\n<blockquote>\n<p>I guess I find it confusing if you specify multiple input sources, which is what you're doing when you provide info in the config that says to generate the file but also provide a file to replace the generated one.</p>\n</blockquote>\n<p>yes, it's a downside. I think it is way better than the other options. If a person has an input folder, they know what they are doing. If input folder is empty, they leave their fate to sushi and that is fine.</p>",
        "id": 205527911,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596140564
    },
    {
        "content": "<p>what i suggested would also solve the problem with BYOx files.</p>",
        "id": 205527967,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596140600
    },
    {
        "content": "<p>don't we have most of that already?<br>\n1) that is the ig-data/input folder<br>\n2.2.1 - FSHOnly = true<br>\n2.2.2 - default</p>",
        "id": 205527970,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1596140601
    },
    {
        "content": "<p>2.2.1 yes.<br>\n2.2.2 and 1. - almost, the idea is that it would just replace whatever is in the output.</p>",
        "id": 205528071,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596140658
    },
    {
        "content": "<p>this is why I think it is an easy thing</p>",
        "id": 205528087,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596140673
    },
    {
        "content": "<p>(above i was thinking of extensions and some more crazy stuff. This is simpler).</p>",
        "id": 205528149,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596140696
    },
    {
        "content": "<p>concretely, <span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span> it's not only the ig-data/input folder, it's also the ig.ini</p>",
        "id": 205528231,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596140755
    },
    {
        "content": "<p>i think I'm with Chris in that I'm missing the point of what you are proposing.  Is it \"create everything in my FSH files and copy over everything in my ig-data/input folder, even if it overwrites something you just created\"?</p>",
        "id": 205528346,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1596140819
    },
    {
        "content": "<p>almost</p>",
        "id": 205528515,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596140917
    },
    {
        "content": "<p>The only difference I'm seeing is that you don't want SUSHI to complain if you configure <code>ig.ini</code> content in the config <em>and</em> supply an <code>ig.ini</code> in <code>ig-data</code> (and the same for menu, etc).  The thing is, those things are already <em>opt-in</em> in the config.  So putting <code>ig.ini</code> or <code>menu</code> info in the config is an explicit (and intentional) action taken by the author to tell SUSHI to generate those files.  I don't know why you would so explicitly opt in if you then want SUSHI to overwrite them with some other file anyway.</p>",
        "id": 205528596,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596140975
    },
    {
        "content": "<p>SUSHI used to generate those things by default, but not anymore.  Now you have to opt in by adding specific parameters in your <code>config.yaml</code>.</p>",
        "id": 205528748,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596141031
    },
    {
        "content": "<p>\"when you're done creating everything (from my FSH files and config), copy over everything in <code>myInputFolder</code> folder to that, overwriting anything you just created\"</p>",
        "id": 205528786,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596141050
    },
    {
        "content": "<p>wow, that seems pretty dangerous</p>",
        "id": 205528816,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1596141067
    },
    {
        "content": "<p>why?</p>",
        "id": 205528830,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596141077
    },
    {
        "content": "<p>so I have a bunch of examples that I've created in FSH, but there is an example in myInputFolder that I don't realize.  I keep making changes to the FSH file and not seeing the change and I don't know why</p>",
        "id": 205528969,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1596141139
    },
    {
        "content": "<p>(i'm avoiding mentioning the ig-data folder because that is kind of a Moebius strip.)</p>",
        "id": 205529024,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596141170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"192166\">Jean Duteau</span> <a href=\"#narrow/stream/215610-shorthand/topic/sushi.20-.20ig.20integration/near/205528969\">said</a>:</p>\n<blockquote>\n<p>so I have a bunch of examples that I've created in FSH, but there is an example in myInputFolder that I don't realize.  I keep making changes to the FSH file and not seeing the change and I don't know why</p>\n</blockquote>\n<p>yep. that inconvenience is to me a very acceptable downside, if the upside is that you can tell sushi \"hey, i've just translated this codesystem in 3 languages, please don't overwrite it\"</p>",
        "id": 205529163,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596141247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> -- why not comment out or delete the code system in the FSH source?  That would eliminate ALL confusion.</p>",
        "id": 205529228,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596141292
    },
    {
        "content": "<p>But as I said above, SUSHI will actually overwrite a SUSHI-generated resource with one in ig-data if it is a match (sorry, <span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span>!).</p>",
        "id": 205529292,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596141346
    },
    {
        "content": "<p>(But it doesn't do that with configuration resources)</p>",
        "id": 205529350,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596141370
    },
    {
        "content": "<p>does it warn you if it is overwriting?</p>",
        "id": 205529369,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1596141387
    },
    {
        "content": "<p>Ha! you mentioned the <code>ig-data</code>. (we should have a rule that someone pays a beer when they use that in a discussion about redesigning the  structure)</p>",
        "id": 205529410,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596141423
    },
    {
        "content": "<p>i.e. based on the canonical like you said earlier, it warns you that it's overwriting?</p>",
        "id": 205529451,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1596141449
    },
    {
        "content": "<p>I guess that if your requirement is to have a special folder that you use to specify files that should be copied, I don't see why we need to complicate things by insisting that users can call the folder whatever they want.  So... let's just call this folder <code>ig-data</code> for now.</p>",
        "id": 205529596,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596141521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span> -- I don't remember, but I can check.</p>",
        "id": 205529642,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596141550
    },
    {
        "content": "<p>if you don't assume that sushi is the beginning of all the IGs (you got something already working , you just want to add some stuff, maybe even a  because that is easier), isn't that much simpler?</p>",
        "id": 205529688,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596141579
    },
    {
        "content": "<p>2 beers.</p>",
        "id": 205529698,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596141588
    },
    {
        "content": "<p>I can call it ig-data, but to me that presumes it is a folder under the fsh folder, which is something I'd challenge. But sure let's call it that.</p>",
        "id": 205529827,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596141669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191832\">Jose Costa Teixeira</span> <a href=\"#narrow/stream/215610-shorthand/topic/sushi.20-.20ig.20integration/near/205529688\">said</a>:</p>\n<blockquote>\n<p>if you don't assume that sushi is the beginning of all the IGs (you got something already working , you just want to add some stuff, maybe even a  because that is easier), isn't that much simpler?</p>\n</blockquote>\n<p>But that isn't sushi's happy path, so I don't think so.  Sushi's happy path is where a user is using FSH and the ig-data folder to define all of their IG content.  That is what many of us are doing and it's how I'm preaching about SUSHI and FSH to projects in Canada.</p>",
        "id": 205529828,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1596141673
    },
    {
        "content": "<p>(see? I just gave you a belgian beer <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 205529853,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596141692
    },
    {
        "content": "<p>I have to switch over to my other project now... but again, I'll be revisiting all this very soon... so I'm sure there will be further discussion.  Feel free to talk amongst yourselves, but I'm signing out for now!</p>",
        "id": 205530216,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596141912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"192166\">Jean Duteau</span> <a href=\"#narrow/stream/215610-shorthand/topic/sushi.20-.20ig.20integration/near/205529828\">said</a>:</p>\n<blockquote>\n<p>Sushi's happy path is where a user is using FSH and the ig-data folder to define all of their IG content.  That is what many of us are doing and it's how I'm preaching about SUSHI and FSH to projects in Canada.</p>\n</blockquote>\n<p>this should be rephrased, right? Sushi cannot be the only source of IG content- logical models, retouching the conformance resources- this is not in sushi.</p>",
        "id": 205530289,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596141953
    },
    {
        "content": "<p>and it's not that this way of working has been really there for a long time and without any issues and complaints...</p>",
        "id": 205530443,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596142027
    },
    {
        "content": "<p>I know  it is a change. I am not saying my proposal is bullet proof. I'm proposing and definding it and I like the feedback. But it seems a simple change and I don't see why it would not be better.</p>",
        "id": 205530648,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596142134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> does this proposal help? <br>\nIn short, it's about using an input folder (with the standard IG folder structure) and letting sushi use that for parsing fsh and also to copy that content over to the final output. Simpler than specific flags, and more powerful for those cases where the user must see what they want Sushi to replace or not.</p>",
        "id": 205824847,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596476880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> -- did you intend to link to a specific proposal?  Re: the general gist, the proposal I was going to build on sounds somewhat similar -- in short, you put your .fsh files in input/* just like you do any formal FHIR artifact -- and SUSHI builds it to a special temp folder that the IG Publisher knows to pickup (keeping SUSHI src separate from output).  I was thinking that temp folder would be outside of input, but I guess it could also be something like input/sushi-out.  Anyway, I was going to draft something up for internal review today and probably post it here tomorrow.  But that's basically the long and short of it.</p>",
        "id": 205825681,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1596477361
    },
    {
        "content": "<p>I was just feeding the general thoughts to you - basically having 3 folders (configurable as command line parameters): ig-input , fsh-input, and output<br>\nBut I will prepare something more detailed</p>",
        "id": 205826376,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1596477658
    }
]