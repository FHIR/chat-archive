[
    {
        "content": "<p>Does sushi support slicing by profile?</p>\n<p>Profile (On Observation):</p>\n<div class=\"codehilite\"><pre><span></span>* partOf ^slicing.discriminator.type = #profile\n* partOf ^slicing.discriminator.path = &quot;reference&quot;\n* partOf ^slicing.rules = #open\n* partOf 1..1\n* partOf contains ultrasoundScan 1..1\n* partOf[ultrasoundScan] only Reference(Procedure)\n</pre></div>\n\n\n<p>Instance of that profile</p>\n<div class=\"codehilite\"><pre><span></span> * partOf = Reference(aupc-procedureUltraSound)\n</pre></div>\n\n\n<p>(where aupc-procedureUltraSound is an instance of Procedure)</p>\n<p>Error: </p>\n<div class=\"codehilite\"><pre><span></span>error Element Observation.partOf:ultrasoundScan has minimum cardinality 1 but occurs 0 time(s).\n</pre></div>",
        "id": 195128291,
        "sender_full_name": "David Hay",
        "timestamp": 1587681632
    },
    {
        "content": "<p>don't you have to do:</p>\n<ul>\n<li>partOf[ultrasoundScan] = Refernece(aupc-procedureUltrasound)</li>\n</ul>\n<p>?</p>",
        "id": 195130196,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1587683100
    },
    {
        "content": "<p>In the instance? That gives me this error:</p>\n<p>error Cannot resolve element from path: partOf[ultrasoundScan]</p>",
        "id": 195131100,
        "sender_full_name": "David Hay",
        "timestamp": 1587683959
    },
    {
        "content": "<p>Not sure if its related, but heres another one:</p>\n<p>Profile (on Observation)</p>\n<div class=\"codehilite\"><pre><span></span>* code.coding ^slicing.discriminator.type = #value\n* code.coding ^slicing.discriminator.path = &quot;system&quot;\n* code.coding ^slicing.rules = #open\n* code.coding contains sliceCoding 1..1\n* code.coding[sliceCoding] from http://aehrc.com/valueset/expecteddateofdeliverytypes (required)\n</pre></div>\n\n\n<p>Instance of profile</p>\n<div class=\"codehilite\"><pre><span></span>* code.coding.system = $SNOMED\n* code.coding.code = #366322004\n* code.coding.display = &quot;Finding of estimated date of delivery (finding)&quot;\n</pre></div>\n\n\n<p>Error: </p>\n<div class=\"codehilite\"><pre><span></span>error Element Observation.code.coding:sliceCoding has minimum cardinality 1 but occurs 0 time(s).\n</pre></div>\n\n\n<p>Note that the error goes away if \"* code.coding contains sliceCoding 1..1\" becomes \"* code.coding contains sliceCoding 0..1\" (perhaps unsurprisingly) :)</p>",
        "id": 195131747,
        "sender_full_name": "David Hay",
        "timestamp": 1587684592
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span> does have the right idea, you need to specify for SUSHI which slice you are setting. So in your second example, on the Instance, instead of doing:</p>\n<div class=\"codehilite\"><pre><span></span>* code.coding.system = $SNOMED\n* code.coding.code = #366322004\n* code.coding.display = &quot;Finding of estimated date of delivery (finding)&quot;\n</pre></div>\n\n\n<p>you would want to do</p>\n<div class=\"codehilite\"><pre><span></span>* code.coding[sliceCoding].system = $SNOMED\n* code.coding[sliceCoding].code = #366322004\n* code.coding[sliceCoding].display = &quot;Finding of estimated date of delivery (finding)&quot;\n</pre></div>\n\n\n<p>You will note that the output is actually the same for both. But SUSHI will emit an error in the first case, because to SUSHI it looks like you aren't setting the <code>sliceCoding</code> slice, but that slice is 1..1. In the first situation, you would want to do <code>partOf[ultrasoundScan]</code>. I'm not sure why SUSHI couldn't find that path, I tried a similar setup, with </p>\n<div class=\"codehilite\"><pre><span></span>* partOf ^slicing.discriminator.type = #profile\n* partOf ^slicing.discriminator.path = &quot;reference&quot;\n* partOf ^slicing.rules = #open\n* partOf 1..1\n* partOf contains ultrasoundScan 1..1\n* partOf[ultrasoundScan] only Reference(Procedure)\n</pre></div>\n\n\n<p>on a profile of Observation, and </p>\n<div class=\"codehilite\"><pre><span></span>* partOf[ultrasoundScan] = Reference(aupc-procedureUltraSound)\n</pre></div>\n\n\n<p>on an instance of that profile, and SUSHI was able to find that path. It doesn't look like you are trying to do anything funky there, so I'm not sure why SUSHI would fail to find the path.</p>",
        "id": 195174695,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1587727527
    },
    {
        "content": "<p>One more thing to note is that instead of writing three lines of FSH to set the system, code, and display, you can do that in one line, so this:</p>\n<div class=\"codehilite\"><pre><span></span>* code.coding[sliceCoding].system = $SNOMED\n* code.coding[sliceCoding].code = #366322004\n* code.coding[sliceCoding].display = &quot;Finding of estimated date of delivery (finding)&quot;\n</pre></div>\n\n\n<p>can be accomplished by doing this:</p>\n<div class=\"codehilite\"><pre><span></span>* code.coding[sliceCoding] = $SNOMED#366322004  &quot;Finding of estimated date of delivery (finding)&quot;\n</pre></div>\n\n\n<p>Of course that's just a stylistic preference, if you prefer having a one to one relationship between lines and setting values, that's totally understandable.</p>",
        "id": 195174986,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1587727764
    },
    {
        "content": "<p>All that said, it would be kind of cool if SUSHI was sophisticated enough to identify slices in an array when the author hasn't specifically called them out.  E.g., given <span class=\"user-mention\" data-user-id=\"191321\">@David Hay</span>'s second example above, a more advanced SUSHI could theoretically identify the following element as being in the <code>sliceCoding</code> slice (assuming that SNOMED 366322004 is in the VS bound to the slice):</p>\n<div class=\"codehilite\"><pre><span></span>* code.coding = $SNOMED#366322004  &quot;Finding of estimated date of delivery (finding)&quot;\n</pre></div>\n\n\n<p>But... supporting automatic slice membership in SUSHI would be difficult given the many different variations there may be on slices and given the requirement of resolving external value sets and/or profiles in some cases.  Maybe we'll support it some day, but probably not soon.  Until then, you need to explicitly identify the slice when setting it in SUSHI (as <span class=\"user-mention\" data-user-id=\"239822\">@Nick Freiter</span> demonstrated above).</p>",
        "id": 195185885,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1587734191
    },
    {
        "content": "<p>Thanks guys - that all worked. Key to this is properly understanding the sliceName - making progress!</p>\n<p>Incidentally,  I did notice (I think) an error.</p>\n<p>I have a profile on Observation (called AUPrimaryCareObservation-GestationOnScan) that requires an element to be a specific profiled type:</p>\n<blockquote>\n<ul>\n<li>partOf[ultrasoundScan] = Reference(AUPrimaryCareProcedure-UltrasoundScanObstetric)</li>\n</ul>\n</blockquote>\n<p>where AUPrimaryCareProcedure-UltrasoundScanObstetric is a profile on Procedure</p>\n<p>However, when I create an instance of AUPrimaryCareObservation-GestationOnScan, and set partOf[ultrasoundScan] to <em>any</em> Instance,  sushi compiles just fine. Shouldn't it generate an error ?</p>",
        "id": 195245079,
        "sender_full_name": "David Hay",
        "timestamp": 1587762684
    },
    {
        "content": "<p>That's an interesting point. I think part of the reason we aren't checking this is because we don't want to disallow you from making an example where you set a Reference to an Instance that doesn't exist. Because maybe you want to make an example of a Profile, which has a Reference to Patient or something, but you don't want to actually have to make your own example for Patient.</p>\n<p>That being said, I think in the situations where SUSHI does resolve the Reference to a defined Instance, you're right, we are able to, and should, check that that resolved Instance has a matching type. I'll add an issue for this on GitHub.</p>",
        "id": 195410659,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1587991319
    },
    {
        "content": "<p>Added: <a href=\"https://github.com/FHIR/sushi/issues/395\" title=\"https://github.com/FHIR/sushi/issues/395\">https://github.com/FHIR/sushi/issues/395</a>.</p>",
        "id": 195411199,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1587991647
    },
    {
        "content": "<p>Ta. Perhaps a warning if there is no resolved instance?</p>",
        "id": 195463284,
        "sender_full_name": "David Hay",
        "timestamp": 1588015257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191321\">@David Hay</span> said:</p>\n<blockquote>\n<p>However, when I create an instance of AUPrimaryCareObservation-GestationOnScan, and set partOf[ultrasoundScan] to any Instance, sushi compiles just fine. Shouldn't it generate an error ?</p>\n</blockquote>\n<p>Just to be clear, even though the profile says it should be instances of <code>AUPrimaryCareProcedure-UltrasoundScanObstetric</code>, SUSHI <em>should</em> allow an example to refer to any <code>Procedure</code> instance -- this is because profile conformance is not exclusive (one instance can conform to multiple profiles) and true conformance validation is outside of the scope of SUSHI (or at least outside of the <em>current</em> scope of SUSHI).</p>",
        "id": 196214835,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1588614093
    },
    {
        "content": "<p>Fair enough - understand that it's not sushi's role to validate this. </p>\n<p>I guess full validation would require the referenced resource to be validated against the profile, which is not a simple thing! Though - when you say non exclusive, although the referenced instance could conform to multiple profiles, it must at least be conformant to  AUPrimaryCareProcedure-UltrasoundScanObstetric in this case though...</p>",
        "id": 196218228,
        "sender_full_name": "David Hay",
        "timestamp": 1588615739
    },
    {
        "content": "<blockquote>\n<p>Though - when you say non exclusive, although the referenced instance could conform to multiple profiles, it must at least be conformant to AUPrimaryCareProcedure-UltrasoundScanObstetric in this case though...</p>\n</blockquote>\n<p>What I was trying to get at is that even if it points at an instance defined in SUSHI, we can't assume the the thing referred to by <code>InstanceOf:</code> is the <em>only</em> thing it conforms to.  So even though the profile calls for an instance of <code>AUPrimaryCareProcedure-UltrasoundScanObstetric</code>, if you set it to an an instance that declares <code>InstanceOf: SomeOtherProcedureProfile</code>, SUSHI can't say for sure that it is wrong; it would need full validation capabilities to be able to definitively make that determination.</p>",
        "id": 196223312,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1588617969
    },
    {
        "content": "<p>Oh I agree - not something to expect sushi to be going at the moment...</p>",
        "id": 196227889,
        "sender_full_name": "David Hay",
        "timestamp": 1588620131
    }
]