[
    {
        "content": "<p>Hi, I am working on changing from using XML/JSON based structure definitions to use the FSH ones, however we have quite a base and I looking for a better way to reverse engineer the files, can you recommend any tool/ example to do this?</p>",
        "id": 203341864,
        "sender_full_name": "ben",
        "timestamp": 1594256872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> can you point me somewhere?</p>",
        "id": 203344005,
        "sender_full_name": "ben",
        "timestamp": 1594259557
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"319828\">@ben</span> -- this is a fairly common request.  Up until now, we've been focusing on SUSHI, a tool for translating FSH --&gt; SD JSON.  But we've just started working on <em>GoFSH</em>, a tool for translating SD JSON --&gt; FSH.  It's still very early on, so we haven't yet pushed anything up to GitHub.  If we pushed it up soon, is this something you might be interested in contributing to?</p>",
        "id": 203346838,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1594263545
    },
    {
        "content": "<p>There is also an early prototype from Lantana called <a href=\"https://github.com/lantanagroup/fshfood\">FSH Food</a>, but it's fairly out of date now.  The GoFSH implementation is based on TypeScript, while FSH Food was prototyped using XSLT.</p>",
        "id": 203346934,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1594263689
    },
    {
        "content": "<p>On a similar note - any plans for developing a tool for reverse engineering of valueset files? I find that dynamic valuesets are much easier to maintain in fsh  than manipulating the xml/jsons inside the vocab folder.</p>",
        "id": 203757160,
        "sender_full_name": "Halina Labikova",
        "timestamp": 1594667307
    },
    {
        "content": "<p>Yes, <span class=\"user-mention\" data-user-id=\"194075\">@Halina Labikova</span>.  Translating value sets to FSH is part of the plan as well -- although StructureDefinitions are the first priority.  We're also going to have to figure out what to do for Value Sets that use features that don't have a FSH syntax (yet).  We may have to translate them as straight-up <em>Instance</em>s (of ValueSet) -- which won't be quite as nice...</p>",
        "id": 203783426,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1594682719
    },
    {
        "content": "<p>I have C# code to generate FSH from STU3 ValueSet/CodeSystems - I need to get that on GitHub somewhere.</p>",
        "id": 203808428,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1594714266
    },
    {
        "content": "<p>I have a project on GitHub (<a href=\"https://github.com/microsoft/fhir-codegen\">fhir-codegen</a>) that loads, parses, and filters FHIR (DSTU2 through R5 beta).  It supports most all FHIR features (StructureDefs, Codes, CodeSystems, ValueSets / Expansions, Operations, SearchParameters...), though Interactions need work (noted below).   Export \"Languages\" are defined via an <a href=\"https://github.com/microsoft/fhir-codegen/blob/main/src/Microsoft.Health.Fhir.SpecManager/Language/ILanguage.cs\">interface</a>, which lets you traverse the loaded structures and output whatever you want.</p>\n<p>I've already done exports of</p>\n<ul>\n<li>Plain Text: <a href=\"https://github.com/microsoft/fhir-codegen/blob/main/src/Microsoft.Health.Fhir.SpecManager/Language/Info.cs\">language definition</a>, <a href=\"https://github.com/microsoft/fhir-codegen/blob/main/generated/R4.txt\">R4 output</a></li>\n<li>TypeScript <a href=\"https://github.com/microsoft/fhir-codegen/blob/main/src/Microsoft.Health.Fhir.SpecManager/Language/TypeScript.cs\">language definition</a>, <a href=\"https://github.com/microsoft/fhir-codegen/blob/main/generated/R5.ts\">R4 output</a></li>\n<li>Simple C# (for prototyping/simple projects) <a href=\"https://github.com/microsoft/fhir-codegen/blob/main/src/Microsoft.Health.Fhir.SpecManager/Language/CSharpBasic.cs\">language definition</a>, <a href=\"https://github.com/microsoft/fhir-codegen/blob/main/generated/R4.cs\">R4 output</a></li>\n<li>Still testing: Firely-style C# (replacing the <code>generated</code> content from the T4 templates) <a href=\"https://github.com/microsoft/fhir-codegen/blob/main/src/Microsoft.Health.Fhir.SpecManager/Language/CSharpFirely.cs\">language definition</a></li>\n</ul>\n<p>I'm working on OpenAPI next (as noted above, I need to flesh out support for Interactions, so it will take a little longer than just a language export), but I can add FSH  to my list if you let me know what you want them to look like.  Or, anyone else could take a stab at defining the export file and I'm happy to review/merge.</p>\n<p>Edit: docs <a href=\"https://microsoft.github.io/fhir-codegen/\">here</a></p>",
        "id": 203841285,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1594737741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> do you have a cloud hosted service? I have some StructureDef that I would really like converted to FSH, and I am not looking forward to doing it by hand.</p>",
        "id": 203852761,
        "sender_full_name": "John Moehrke",
        "timestamp": 1594743054
    },
    {
        "content": "<p>I plan to, but building the UI is <del>behind some of the languages on the list</del> down a bit on the list.</p>",
        "id": 203852861,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1594743116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> -- the \"Usage\" and \"Extending\" links in that doc are <code>404</code>.</p>",
        "id": 203861430,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1594747325
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> .  GH Pages isn't serving the updated content for some reason - until it updates you can access them via the <code>Articles</code> tab.<br>\nEdit: done, though you may need to force-refresh the page.  Thanks again!</p>",
        "id": 203866843,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1594750054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> how do you handle invariants in your code generation  ?</p>",
        "id": 217039099,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1605636043
    },
    {
        "content": "<p>as in invariants in the profiles</p>",
        "id": 217039140,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1605636060
    },
    {
        "content": "<p>Hi Jens, I was just looking and it doesn't seem that's come up yet.  I've added it to my list for parsing, but it would be up to each exported 'language' to decide what to do with them.</p>",
        "id": 217125950,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1605701264
    },
    {
        "content": "<p>right ... makes sense. Any class annotation / class documentation would however be helpful</p>",
        "id": 217320255,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1605814918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> an annotation of mine (just as an example, to make your head spin):</p>\n<p>Category message invariant:</p>\n<p><code> category.coding.code = 'message' implies (recipient.reference.contains('Patient/') and ( sender.reference.contains('Device/') or contained.ofType(Device).where('#' + id = %resource.sender.reference).empty().not() or extension.where(url = 'http://ehealth.sundhed.dk/fhir/StructureDefinition/ehealth-communication-senderCareTeam').valueReference.exists())) or (( extension.where(url = 'http://ehealth.sundhed.dk/fhir/StructureDefinition/ehealth-communication-recipientCareTeam').valueReference.exists()) and (sender.reference.contains('Patient/') or sender.reference.contains('Device/'))) or (extension.where(url = 'http://ehealth.sundhed.dk/fhir/StructureDefinition/ehealth-communication-recipientCareTeam').valueReference.exists() and extension.where(url = 'http://ehealth.sundhed.dk/fhir/StructureDefinition/ehealth-communication-senderCareTeam').valueReference.exists() )</code></p>",
        "id": 217320502,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1605815033
    },
    {
        "content": "<p>Yep.  I can see the value, just hadn't been added yet since none of the languages were using them.  The first step will be getting the invariants parsed (across all FHIR versions) and into a common set of models.</p>\n<p>From there, it is straightforward to add <em>something</em> to export in various languages (e.g., annotations, FHIRpath strings, etc.).  But there is a long tail around functionality that would be possible (e.g., converting FHIRpath into language-appropriate validation checks using the exported model hierarchy).</p>",
        "id": 217321182,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1605815328
    },
    {
        "content": "<p>I agree - first step is simply to just generate  helper functions (at least in Java) in order to support extensions and associated mechanisms for codeableconcepts and such stuff I guess. I've previously given it a shot where the generation was based on top of HAPI FHIR classes as most Java FHIR devs will probably be using HAPI, and by using extended HAPI classes, everything just works out of the box.</p>",
        "id": 217321920,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1605815662
    },
    {
        "content": "<p>I actually came pretty far but realised that the need wasn't proportional with the effort of maintaining it</p>",
        "id": 217322002,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1605815714
    },
    {
        "content": "<p>and I eventually did abandon it</p>",
        "id": 217322044,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1605815738
    },
    {
        "content": "<p>That's one of the primary drivers for the project - by separating out the parsing and normalizing everything (which still has to be done, but that's generally me), the language exports are a lot less work to maintain.  Hopefully as it matures, we can build more extended / fun things (e.g., I was playing with an export for cytoscape to use as visualization for the spec).</p>\n<p>I'll ping you when I have the invariants added to the core, but it may be a little bit until I get there.</p>",
        "id": 217325018,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1605817163
    },
    {
        "content": "<p>I see a tool called \"Hatchery\", at <a href=\"https://github.com/HL7/fhir-shorthand/wiki/4.1-Hatchery\">https://github.com/HL7/fhir-shorthand/wiki/4.1-Hatchery</a>.   <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> is this the same tool you were talking about ? But could not see any code checked in to download. Can you help ?</p>",
        "id": 233309091,
        "sender_full_name": "Janaka Peiris",
        "timestamp": 1617711971
    },
    {
        "content": "<p>if you are looking for a tool to go from FHIR structuredefinitions to FSH then it is GoFSH: <a href=\"https://github.com/FHIR/GoFSH\">https://github.com/FHIR/GoFSH</a>. (documentation is here: <a href=\"https://fshschool.org/docs/gofsh/\">https://fshschool.org/docs/gofsh/</a>)</p>",
        "id": 233314867,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1617714461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span> is exactly right.  Hatchery was the early concept name for it, but we eventually ended up calling it GoFSH.  That Wiki is fairly outdated at this point.  We need to update it or retire it.  Thanks for the reminder!</p>",
        "id": 233370330,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617735291
    }
]