[
    {
        "content": "<p>Hi, I am struggling with the Invariants in FSH while using hasMember[Observation]. I am trying to build the logic for validating the existence of 2 different hasMember while the 3rd one then must not be present :<br>\nProfile: TestInvariants<br>\nParent: Observation<br>\nId: test-invariants<br>\nTitle: \"test invariants\"<br>\nDescription: \"This Profile defines the different invariants\"</p>\n<ul>\n<li>code = <a href=\"http://dicom.nema.org/resources/ontology/DCM#121071\">http://dicom.nema.org/resources/ontology/DCM#121071</a> \"Finding\"</li>\n<li>value[x] 0..0</li>\n<li>hasMember ^slicing.discriminator.type = #profile</li>\n<li>hasMember ^slicing.discriminator.path = \"$this.resolve()\"</li>\n<li>hasMember ^slicing.rules = #open</li>\n<li>hasMember ^slicing.ordered = true</li>\n<li>\n<p>hasMember contains<br>\n    Observation1 0..1 and<br>\n    Observation2 0..* and<br>\n    Observation3 0..1</p>\n</li>\n<li>\n<p>hasMember[Observation1] only Reference(Observation1)</p>\n</li>\n<li>hasMember[Observation1] ^short = \"Observation1\"</li>\n<li>\n<p>hasMember[Observation1] ^definition = \"This Profile defines the obs 1\"</p>\n</li>\n<li>\n<p>hasMember[Observation2] only Reference(Observation2)</p>\n</li>\n<li>hasMember[Observation2] ^short = \"Observation2\"</li>\n<li>hasMember[Observation2] ^definition = \"This Profile defines the obs 2\"</li>\n<li>hasMember[Observation3] only Reference(Observation3)</li>\n<li>hasMember[Observation3] ^short = \"Observation3\"</li>\n<li>\n<p>hasMember[Observation3] ^definition = \"This Profile defines the obs 3\"</p>\n</li>\n<li>\n<p>obeys test</p>\n</li>\n</ul>\n<p>Invariant:   test<br>\nDescription: \"Observation1 and Observation2  SHALL be present Then Observation3 SHALL NOT exist\"<br>\nExpression:  \"hasMember[Observation1].exists() and hasMember[Observation2].exists() and hasMember[Observation3].exists().not()\"<br>\nSeverity:    #error</p>\n<p>Instance: InvariantsExample<br>\nInstanceOf: TestInvariants<br>\nUsage: #example<br>\nTitle: \"Invariants Example\"<br>\nDescription: \"\"</p>\n<ul>\n<li>status = <a href=\"http://hl7.org/fhir/observation-status#final\">http://hl7.org/fhir/observation-status#final</a></li>\n<li>code = <a href=\"http://dicom.nema.org/resources/ontology/DCM#121071\">http://dicom.nema.org/resources/ontology/DCM#121071</a> \"Finding\"</li>\n<li>hasMember[Observation1] = Reference(Observation1Example) </li>\n<li>hasMember[Observation2] = Reference(Observation2Example)</li>\n</ul>\n<p>Even if only Observation1 and Observation2 exist, I get a Failed status at the qa.html. I am not sure if the syntaxis I am using in FSH while defining the invariant  is the correct one, or why is this failing? It isn't clear how to write it when referring to the existence of a contained profile.<br>\nThanks!</p>",
        "id": 256191947,
        "sender_full_name": "Diana_Ovelgoenne",
        "timestamp": 1633419992
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"197447\">@Diana_Ovelgoenne</span>.  Unfortunately, FSH syntax does not work inside of invariant expressions (keyword <code>Expression</code> in the <code>Invariant</code> definition).  Invariant expressions must be written using FHIRPath syntax (<a href=\"http://hl7.org/fhirpath/N1/\">FHIRPath spec</a>, <a href=\"http://hl7.org/fhir/R4/fhirpath.html\">FHIRPath in FHIR</a>).  You got some of the FHIRPath syntax right already (e.g., <code>.exists()</code>, <code>.not()</code>) -- but the approach to identifying slices was not correct.  In FHIR-based FHIRPath, you use the <code>slice</code> to refer to slices (documented in the <a href=\"http://hl7.org/fhir/R4/fhirpath.html#functions\">additional functions</a> part of the spec).  Using this approach, your FHIRPath would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>Expression: &quot;hasMember.slice(&#39;http://example.org/StructureDefinition/test-invariants&#39;, &#39;Observation1&#39;).exists()\n    and hasMember.slice(&#39;http://example.org/StructureDefinition/test-invariants&#39;, &#39;Observation2&#39;).exists()\n    and hasMember.slice(&#39;http://example.org/StructureDefinition/test-invariants&#39;, &#39;Observation3&#39;).exists().not()&quot;\n</code></pre></div>\n<p>(assuming canonical URL <code>http://example.org/StructureDefinition/test-invariants</code> for your profile).</p>\n<p><em>Unfortunately</em>, however, if you run this through the IG Publisher and try to validate your example, the IG Publisher crashes with this exception:</p>\n<div class=\"codehilite\"><pre><span></span><code>Exception in thread &quot;main&quot; java.lang.Error: Not done yet (ValidatorHostServices.resolveFunction): slice\n    at org.hl7.fhir.validation.instance.InstanceValidator$ValidatorHostServices.resolveFunction(InstanceValidator.java:228)\n    at org.hl7.fhir.r5.utils.FHIRPathEngine.parseExpression(FHIRPathEngine.java:1042)\n</code></pre></div>\n<p>I <em>think</em> this means that support for the FHIRPath slice function is not yet implemented in the validator.  Is that correct, <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span>?  If so, is there a way to still use the slice function in invariants without crashing the publisher?</p>",
        "id": 256405233,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1633524785
    },
    {
        "content": "<p>Is this addressed in the meanwhile? I'm looking for guidance on how to add slices in invariants, and I cannot find it</p>",
        "id": 268367021,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1642499634
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> -- as noted above, the FHIRPath <code>slice</code> command is documented in the <em>additional functions</em> part of the FHIR spec's FHIRPath page here: <a href=\"http://hl7.org/fhir/R4/fhirpath.html#functions\">http://hl7.org/fhir/R4/fhirpath.html#functions</a>.  As for whether or not the IG Publisher supports <code>slice(...)</code> yet, I don't know.</p>",
        "id": 268399084,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1642516535
    }
]