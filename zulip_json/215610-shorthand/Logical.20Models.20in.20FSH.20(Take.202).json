[
    {
        "content": "<p>We previously confused the discussion on logical models by introducing too many things at the same time (logical models, context paths, offloaded language resources).  We'd like to rein in the discussion by focusing ONLY on the syntax <em>necessary</em> to create logical models.</p>\n<p>We propose that support for defining logical models requires only two new features of FSH:</p>\n<ul>\n<li>A new <code>Logical</code> keyword</li>\n<li>A new <em>AddElement Rule</em> w/ the following syntax:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>* {path} {min}..{max} {flags} {type (or type or...)} &quot;{short}&quot; &quot;{definition}&quot;\n</code></pre></div>\n<p>(where <code>path</code>, <code>min</code>, <code>max</code>, and <code>type</code> are <em>required</em>, but <code>flags</code>, <code>short</code>, and <code>definition</code> are <em>optional</em>).</p>",
        "id": 228674070,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614807866
    },
    {
        "content": "<p>An example logical model inspired by <a href=\"http://build.fhir.org/ig/openhie/hiv-ig/branches/master/StructureDefinition-model-hiv-record.html\">Open HIE's HIV Record</a>:<br>\n<a href=\"/user_uploads/10155/-QKHgcm0mLWBSNIoYj-fiydk/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/-QKHgcm0mLWBSNIoYj-fiydk/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/-QKHgcm0mLWBSNIoYj-fiydk/image.png\"></a></div>",
        "id": 228674236,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614807948
    },
    {
        "content": "<p>Or if you don't like the long busy lines, you can put the text on separate lines (partial definition in image to illustrate): <a href=\"/user_uploads/10155/-jl8chN-xjmtMHfDHAmmCdVo/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/-jl8chN-xjmtMHfDHAmmCdVo/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/-jl8chN-xjmtMHfDHAmmCdVo/image.png\"></a></div>",
        "id": 228674650,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614808107
    },
    {
        "content": "<p>For the moment, forget everything we ever said about context paths, offloaded text, etc...  What do you think?</p>",
        "id": 228674759,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614808156
    },
    {
        "content": "<p>BTW -- I forgot to mention -- all other things you might want to do (like binding value sets, etc) would use the same exact rules and rule syntax as when you author profiles.</p>",
        "id": 228674901,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614808214
    },
    {
        "content": "<p>looks good to me...</p>",
        "id": 228680293,
        "sender_full_name": "David Hay",
        "timestamp": 1614810512
    },
    {
        "content": "<p>I presume AddElement is then a built-in rule that gets activated for Logical definitions?</p>",
        "id": 228683908,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614812239
    },
    {
        "content": "<p>I like the compactness of the language. A few comments:</p>",
        "id": 228684071,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614812311
    },
    {
        "content": "<ol>\n<li>type is not required in LMs</li>\n</ol>",
        "id": 228684104,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614812331
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 228684309,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614812422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20FSH.20(Take.202)/near/228674759\">said</a>:</p>\n<blockquote>\n<p>For the moment, forget everything we ever said about context paths, offloaded text, etc...  What do you think?</p>\n</blockquote>\n<p>I like where this is going</p>",
        "id": 228684554,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614812546
    },
    {
        "content": "<p>(just to be clear: I also like where it is right now, and i think it will get even better)</p>",
        "id": 228684665,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614812595
    },
    {
        "content": "<p>I just wonder about a specific syntax for LMs, but I don't see a better way</p>",
        "id": 228684747,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614812635
    },
    {
        "content": "<p>Which type are you referring to?</p>",
        "id": 228685501,
        "sender_full_name": "David Hay",
        "timestamp": 1614812955
    },
    {
        "content": "<p>data element type</p>",
        "id": 228685659,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614813014
    },
    {
        "content": "<p>Yes, the <em>AddElement</em> rule would only be valid for Logical Models (and Resources).  You could also put it in a RuleSet, but then you could only apply that RuleSet to Logical Models and Resources.  Regarding the notion that <code>type</code> is not required in Logical Models, can you describe what it means to have an element without a type (aside from the root element)?</p>",
        "id": 228685712,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614813037
    },
    {
        "content": "<p>a mode abstract-ish logical model...</p>",
        "id": 228685765,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614813063
    },
    {
        "content": "<p>Is <a href=\"http://element.id\">element.id</a> automatically generated?</p>",
        "id": 228685859,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1614813103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> - OK.  And I just realized it is also absent on elements that have a <code>contentReference</code>.  We kind of need <code>type</code> in the grammar to distinguish an <em>AddElement Rule</em> from a normal <em>Cardinality Rule</em>.  So perhaps we'd need to introduce something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>* foo 0..1 &lt;no-type&gt; &quot;My element with no type&quot;\n</code></pre></div>",
        "id": 228686622,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614813463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191380\">@Elliot Silver</span> -- yes, <code>Element.id</code> and <code>Element.path</code> would be automatically generated.  FHIR has rules around how those should be constructed anyway, so we'd just be following those rules.</p>",
        "id": 228686796,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614813564
    },
    {
        "content": "<p>Don't quite understand why elements wouldn't need a datatype...</p>",
        "id": 228687212,
        "sender_full_name": "David Hay",
        "timestamp": 1614813785
    },
    {
        "content": "<p>We may just want to explain a data structure without defining the types.</p>",
        "id": 228687261,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614813824
    },
    {
        "content": "<p>Also note that data types are FHIR data types (except if we are brave enough to create abstract types), so a Logical Model with a physical data type is not purebred</p>",
        "id": 228687480,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614813920
    },
    {
        "content": "<p>Hmm. You could always use a string. I like having datatypes in there myself (admitting that it is a chimera)...</p>",
        "id": 228687603,
        "sender_full_name": "David Hay",
        "timestamp": 1614813980
    },
    {
        "content": "<p>saying it is a string may be actually incorrect</p>",
        "id": 228687689,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614814055
    },
    {
        "content": "<p>But if you don't want datatypes, then why would you care?</p>",
        "id": 228687798,
        "sender_full_name": "David Hay",
        "timestamp": 1614814097
    },
    {
        "content": "<p>I like binding to ValueSets in models, for example...</p>",
        "id": 228687827,
        "sender_full_name": "David Hay",
        "timestamp": 1614814120
    },
    {
        "content": "<p>I find it helps clinical users with context...</p>",
        "id": 228687847,
        "sender_full_name": "David Hay",
        "timestamp": 1614814141
    },
    {
        "content": "<p>we also do bindings to valuesets in models. We should have an abstract data type for that, but it is not only \"nice to have\"  - it is really important. Some elements are bound to a vocabulary at a functional level, not only at technical level</p>",
        "id": 228687915,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614814192
    },
    {
        "content": "<blockquote>\n<ul>\n<li>foo 0..1 &lt;no-type&gt; \"My element with no type\"</li>\n</ul>\n</blockquote>\n<p>why not use this and define a consistent syntax for defining types?</p>",
        "id": 228687926,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614814201
    },
    {
        "content": "<p>where else do we define types in fsh?</p>",
        "id": 228687999,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614814219
    },
    {
        "content": "<p>in profiles we use only {type}... anywhere else?</p>",
        "id": 228688081,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614814265
    },
    {
        "content": "<p>where I'm heading with this, <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> : if we define a way to express type constraints, something that works here AND does not conflict (and could also be used in) profiles, that would be a good thing.</p>",
        "id": 228688255,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614814337
    },
    {
        "content": "<p>taking the <code>&lt; &gt;</code> as example</p>",
        "id": 228688388,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614814400
    },
    {
        "content": "<p>then indeed </p>\n<ul>\n<li>foo 0..1 &lt;&gt; \"I don't want to have a type\" could work</li>\n</ul>",
        "id": 228688577,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614814472
    },
    {
        "content": "<p>(unless we really need the dedicated keyword)</p>",
        "id": 228688606,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614814487
    },
    {
        "content": "<p>and if we can use </p>\n<div class=\"codehilite\"><pre><span></span><code>* element &lt;string&gt;\n</code></pre></div>\n<p>the same way we use</p>\n<div class=\"codehilite\"><pre><span></span><code>* element only string\n</code></pre></div>\n<p>then our grammar is a bit more consistent</p>\n<p>(I think  <code>( )</code>  or <code>[ ]</code> are better than <code>&lt; &gt;</code> )</p>",
        "id": 228688797,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614814582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191321\">@David Hay</span> if we don't have a type because we don't care that's one thing. If we don't have a type because we want to say \"no types here, this is just about the structure and cardinalities. if you want data types, go one level down\", we should not abandon that.</p>",
        "id": 228688900,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614814653
    },
    {
        "content": "<p>Note that I recommend always having a LM for everything we do, and I do use (FHIR) types in my IGs. But I don't think a logical model should be forced to have a type if it's done in sushi</p>",
        "id": 228689069,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614814769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> -- we do want to try to be consistent, but having no type is the exception to the rule.  Given the choice, at this point in time, I'd rather introduce something a little different for a minority use case (e.g., <code>&lt;no-type&gt;</code>) than change the approach for the majority use case (e.g., require <code>&lt;string&gt;</code> syntax everywhere) -- which would affect the 50+ IGs already using FSH.</p>",
        "id": 228769559,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614863774
    },
    {
        "content": "<p>If it feels better, another approach could be using <code>-</code> in place of the type, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>* foo 0..1 - &quot;My element with no type&quot;\n</code></pre></div>",
        "id": 228769808,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614863891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> -- I want to be sure we're on the same page here.  You said:</p>\n<blockquote>\n<p>But I don't think a logical model should be forced to have a type if it's done in sushi</p>\n</blockquote>\n<p>Is a typeless element (aside from a <code>contentReference</code>) allowed by the IG Publisher today?  Or are you actually proposing that it <em>should</em> be allowed in FHIR overall (even if it isn't currently)?  Because I assumed when you said you could use it in abstract models that it was a current feature of FHIR -- but I can't find it documented anywhere.</p>\n<p>In fact, looking at the (very brief) <a href=\"http://hl7.org/fhir/R4/structuredefinition.html\">Logical Model documentation</a>, it says (<strong>emphsasis</strong> mine):</p>\n<blockquote>\n<p>StructureDefinitions are used to define the basic structures of FHIR: data types, resources, extensions, and profiles. The same definition structure can also be used to define any arbitrary structures that are a directed acyclic graph <strong>with typed nodes</strong>, where the primitive types are those defined by the FHIR specification.</p>\n</blockquote>",
        "id": 228770562,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614864196
    },
    {
        "content": "<p>Typeless LMs are allowed today in the publisher (well, \"today\" is relative). Type is also 0..* - and I presume this is not only for differential purposes, but it would also make sense to keep them typeless. <br>\nIndeed we should have a page on LMs in the core spec (pinging <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> on this, I can volunteer to helw write)</p>",
        "id": 228771611,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614864617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> my idea would not be to replace anything on the (hundreds of ?) existing IGs. Just to allow a new syntax that allows people to say either <code>value only string</code> or <code>value &lt;string&gt;</code></p>",
        "id": 228772263,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614864858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191832\">Jose Costa Teixeira</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20FSH.20(Take.202)/near/228771611\">said</a>:</p>\n<blockquote>\n<p>Typeless LMs are allowed today in the publisher (well, \"today\" is relative). Type is also 0..* - and I presume this is not only for differential purposes, but it would also make sense to keep them typeless.</p>\n</blockquote>\n<p>I looked into this last night and although type is 0..*, there are a few constraints and some wording in ElementDefinition that I <em>think</em> makes it required for most logical models.  I got bogged down by the language on the page about which category a Logical Model fit into.  <a href=\"http://hl7.org/fhir/elementdefinition.html#interpretation\">http://hl7.org/fhir/elementdefinition.html#interpretation</a></p>",
        "id": 228800073,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614874190
    },
    {
        "content": "<p>Good point, <span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span>.  I missed that table, but it does indicate that <code>type</code> is <em>required</em> for \"Type definition, first element\" and \"Type definition, following elements\" -- and I do believe that LMs meet the definition of \"Type definition\":</p>\n<blockquote>\n<p>Type definition: A StructureDefinition without a baseDefinition element, or where the derivation type is 'specialization'</p>\n</blockquote>",
        "id": 228806342,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614876010
    },
    {
        "content": "<p>Yeah, that is what I think to, but where I got confused was trying to determine if a LM is a Type definition or not.</p>",
        "id": 228806539,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614876081
    },
    {
        "content": "<p>is a constrained LM still an LM or is that now a profile?  that was the question that I couldn't figure out because it made my brain hurt. :)</p>",
        "id": 228807305,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614876335
    },
    {
        "content": "<p>all I know is that all of my LMs would be considered base definitions of a data type so they would have type required for all elements.</p>",
        "id": 228807533,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614876418
    },
    {
        "content": "<p>If your LM adds any new elements (not inherited from the <code>baseDefinition</code>), then I believe it has to be a <code>specialization</code> -- and that makes it a <code>Type</code>.   If you have an LM that doesn't add anything new, I'm not sure if that's still an LM then.  Good question.</p>",
        "id": 228812154,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614877936
    },
    {
        "content": "<blockquote>\n<p>typeless LMs are allowed today in the publisher (well, \"today\" is relative)</p>\n</blockquote>\n<p>yesterday that was true, but not today.</p>",
        "id": 228826839,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1614883164
    },
    {
        "content": "<p>I don't see why we should force a physical data type on a LM</p>",
        "id": 228829061,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614883976
    },
    {
        "content": "<p>and we could express a data structure without types to leave it open (I did use string before but that felt weird)</p>",
        "id": 228829963,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614884301
    },
    {
        "content": "<p>what is a data structure without types?  that's basically just a bunch of strings</p>",
        "id": 228830016,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1614884325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> - couldn't you just use <code>Element</code> as the type?  It's a real type but it doesn't really say much (so doesn't feel as weird as a more specific type like <code>string</code>).</p>",
        "id": 228830375,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614884439
    },
    {
        "content": "<p><a href=\"http://hl7.org/fhir/R4/element.html\">http://hl7.org/fhir/R4/element.html</a></p>",
        "id": 228830459,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614884474
    },
    {
        "content": "<p>less weird indeed</p>",
        "id": 228830629,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1614884535
    },
    {
        "content": "<p>Actually, looks like <code>ele-1</code> might get in the way of that idea:<br>\n<a href=\"/user_uploads/10155/0EnKFLh56DqLcWal-L4xDjER/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/0EnKFLh56DqLcWal-L4xDjER/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/0EnKFLh56DqLcWal-L4xDjER/image.png\"></a></div>",
        "id": 228830717,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614884585
    },
    {
        "content": "<p>Although I'm not 100% sure how to interpret that constraint, so maybe not?  Maybe that says that in an <em>instance</em> an element must have a value or children, but perhaps it's fine in a LM since we don't typically create instances of LM.</p>",
        "id": 228831096,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1614884718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>  So, can you share any info on when logical model support in FSH might appear in a new version of  fsh-sushi? I'm not looking for a specific date, just an idea as to if/when it might appear.  We're looking forward to its availability!!</p>",
        "id": 229668042,
        "sender_full_name": "Joe Paquette",
        "timestamp": 1615386279
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"211704\">@Joe Paquette</span> -- we're actually just in the middle of figuring that out.  I can tell you, we haven't started implementation yet but want to start it very soon (ideally next week).  A few people have indicated they might be willing to help w/ implementing this feature, so we're currently chasing them down!</p>",
        "id": 229728088,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615404719
    },
    {
        "content": "<p>Here's a \"typeless\" but I think still meaningful structure:<br>\n<a href=\"/user_uploads/10155/xvN10hBN-5Gu-pEpsRH-ThjT/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/xvN10hBN-5Gu-pEpsRH-ThjT/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/xvN10hBN-5Gu-pEpsRH-ThjT/image.png\"></a></div>",
        "id": 229738913,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1615408431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"192166\">Jean Duteau</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20FSH.20(Take.202)/near/228807305\">said</a>:</p>\n<blockquote>\n<p>is a constrained LM still an LM or is that now a profile?  that was the question that I couldn't figure out because it made my brain hurt. :)</p>\n</blockquote>\n<p>A constrained LM is still a LM. Going from LM to profile is not constraining, it is moving to the implementation level.</p>",
        "id": 229739271,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1615408530
    },
    {
        "content": "<p>(depending on what you mean by Profile). You could say that the above is a \"profiled LM\" but that would keep me up at night.</p>",
        "id": 229739511,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1615408597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> to summarise: my suggestion is to avoid any positional syntax (where type is the nth keyword. I'd find a way to express type.<br>\nFor sake of language simplicity/consistency, I would prefer that syntax for type to be not exclusive for LM - if you define it as &lt;type&gt;, then eventually in a profile definition we could also use &lt;type&gt; - without affecting the keyword \"only\". Seen from a different angle, <code>&lt;type&gt;</code> would just be a shorter-hand for \"only\", because they mean the same.</p>",
        "id": 229740679,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1615409037
    },
    {
        "content": "<p>Is that sensible?</p>",
        "id": 229740687,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1615409041
    },
    {
        "content": "<p>I don't think I understand the value of what you're proposing.  As a domain specific language w/ a formal grammar, I think it's fair to have positional syntax -- and I actually like that it enforces some consistency.  We already have 50+ projects that use FSH, and I feel like having some syntactical constraints in place to force some consistency is actually <em>helpful</em>.</p>\n<p>We also intentionally want the element creation syntax to be <em>different</em> from the constraint syntax.  While we want <em>elements</em> of the syntax to be consistent w/ other rules, we don't want people to have to think too much when they look at a rule to determine if it is constraining something or adding something.  By having a unique syntactical shape to the rule, we also ensure that it's not possible for an author to mistakenly create a new element because they mistyped the path of an element they meant to constrain.</p>",
        "id": 229746948,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615411269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20FSH.20(Take.202)/near/229746948\">said</a>:</p>\n<blockquote>\n<p>I think it's fair to have positional syntax -- and I actually like that it enforces some consistency.  </p>\n</blockquote>\n<p>Right. It's fair to have it, my idea is that it's fair not to have it too :)</p>\n<blockquote>\n<p>I feel like having some syntactical constraints in place to force some consistency is actually helpful.</p>\n</blockquote>\n<p>My preference for constraints and consistency (and the experience I have atm) just makes me _slightly_ lean to the other side.</p>\n<blockquote>\n<p>We also intentionally want the element creation syntax to be different from the constraint syntax.<br>\nwe don't want people to have to think too much when they look at a rule to determine if it is constraining something or adding something. </p>\n</blockquote>\n<p>That is a deciding preference. Personally I do not see a big difference between those - it's an ElementDefinition in both cases, right?</p>",
        "id": 229758253,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1615414994
    },
    {
        "content": "<p>I'm not pulling down your proposal, just trying to build on it and adding a perspective. I hope that makes your decision - whatever it is - more solid.</p>",
        "id": 229758732,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1615415206
    },
    {
        "content": "<p>I really don't mind the positional syntax to express a type that much / I cannot express what makes me somewhat itchy (maybe it because I don't see how that would evolve).</p>",
        "id": 229758852,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1615415281
    },
    {
        "content": "<p>TBH, in the syntax you write seems ok. There are more important things to discuss - <br>\nthe \"with\" or equivalent syntax to avoid all that repeated typing, or the lookup functionality to create test data.</p>",
        "id": 229759249,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1615415478
    },
    {
        "content": "<blockquote>\n<p>That is a deciding preference. Personally I do not see a big difference between those - it's an ElementDefinition in both cases, right?</p>\n</blockquote>\n<p>Yes, but maybe it is easier to explain via example... Consider this line of FSH:</p>\n<div class=\"codehilite\"><pre><span></span><code>* justification 1..1\n</code></pre></div>\n<p>If we allowed the syntax <code>* {path} {min}..{max}</code> to be a constraint on an existing element, <em>or</em> a new element declaration without a type -- then what happens is based on whether or not the path <code>justification</code> already exists.</p>\n<p>So now imagine the author wants to constrain an existing <code>justification</code> element in the LM, but mistakenly fat-fingers it:</p>\n<div class=\"codehilite\"><pre><span></span><code>* justfication 1..1\n</code></pre></div>\n<p>If we allow that syntax to be constraint <em>or</em> add, this typo results in a <em>new</em> element called <code>justficaton</code> being added.  No errors are emitted because SUSHI does not know the intent was to constrain an existing path.  It just knows that <code>justfication</code> does not exist, so the author must have meant to add that element.  On the other hand, if we <em>require</em> type in order for it to be an \"add element\" operation, then the above is flagged as an error (because it can only constrain and the path is not valid).</p>\n<p>The opposite situation also applies.  Maybe the author intends to create a new element and does not realize that an element of the same name already exists.  If the syntax can be constrain or add -- if the user meant to add, but it exists already, it would just become a constraint (and no error is emitted).  On the other hand, if \"add element\" has a unique syntax, SUSHI would emit an error saying that it can't create an element because an element with that name already exists.</p>",
        "id": 229759938,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615415777
    },
    {
        "content": "<blockquote>\n<p>TBH, in the syntax you write seems ok. There are more important things to discuss - <br>\nthe \"with\" or equivalent syntax to avoid all that repeated typing, or the lookup functionality to create test data.</p>\n</blockquote>\n<p>I'll be posting an updated proposal for handling nested paths later tonight or tomorrow.  We've been wrestling with that a lot -- trying to iron out the implications and such.  We've arrived on an approach that is a little different than previously proposed, but somewhat similar to what some people have asked for in the past, so... stay tuned. ;-)</p>",
        "id": 229760257,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615415952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191832\">Jose Costa Teixeira</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20FSH.20(Take.202)/near/229739271\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"192166\">Jean Duteau</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20FSH.20(Take.202)/near/228807305\">said</a>:</p>\n<blockquote>\n<p>is a constrained LM still an LM or is that now a profile?  that was the question that I couldn't figure out because it made my brain hurt. :)</p>\n</blockquote>\n<p>A constrained LM is still a LM. Going from LM to profile is not constraining, it is moving to the implementation level.</p>\n</blockquote>\n<p>OKay, then if that is true, then all LMs must have typed Elements.  ElementDefinition has a constraint that type is required whenever it is used in a StructureDefinition that defines a type, which is what a LM is doing.</p>\n<p>But I'm not sure that your language was precise according to the specification.  There are different rules on ElementDefinition.type depending on whether you are a Type definition or a Constraint definition.  Normal LMs are Type Definitions and thus must have a type specified for each element.  It seems that you can create a StructureDefinition LM that is a constraint of a different LM StructureDefinition.  I'm unsure whether that is defining a new type or just a constraint on a type.  If you are saying that it is defining a new type, then my interpretation holds.</p>",
        "id": 229760988,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1615416317
    },
    {
        "content": "<p>OK.  So I'm not sure about the exact terminology, but perhaps the word \"Profile\" implies it is a constraint of a Resource (not a constraint of a Logical Model).  In that case, you have two flavors of Logical Model:</p>\n<ul>\n<li><strong>derivation = \"specialization\"</strong> -- this logical model can add new elements (and I assume constraint inherited elements?)</li>\n<li><strong>derivation = \"constraint\"</strong> -- this logical model can only constrain inherited elements (it cannot create new elements)</li>\n</ul>",
        "id": 229765140,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615418370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"192166\">Jean Duteau</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20FSH.20(Take.202)/near/229760988\">said</a>:</p>\n<blockquote>\n<p>ElementDefinition has a constraint that type is required whenever it is used in a StructureDefinition that defines a type, which is what a LM is doing.</p>\n</blockquote>\n<p>Where is this constraint? I didn't see it, I may have missed that.</p>\n<p>And a LM is a \"type\" - but not a physical one. I understand the impact of having a \"physical\" representation of an abstract model, but if our physical constraints prevent us from representing a logical model, I would assume that this is not intentional?.. not sure.</p>",
        "id": 229768388,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1615420243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191832\">Jose Costa Teixeira</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20FSH.20(Take.202)/near/229768388\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"192166\">Jean Duteau</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20FSH.20(Take.202)/near/229760988\">said</a>:</p>\n<blockquote>\n<p>ElementDefinition has a constraint that type is required whenever it is used in a StructureDefinition that defines a type, which is what a LM is doing.</p>\n</blockquote>\n<p>Where is this constraint? I didn't see it, I may have missed that.</p>\n</blockquote>\n<p>I provided the link earlier in this topic: <a href=\"http://hl7.org/fhir/elementdefinition.html#interpretation\">http://hl7.org/fhir/elementdefinition.html#interpretation</a><br>\nBasically, all Logical Models are the definition of a type - they are represented as StructureDefinitions with a baseDefinition of 'Element' and a derivation type of 'specialization', so that makes ElementDefinition.type required.<br>\nAs Chris said, when derivation = 'constraint', you're only constraining elements so you can't create new ones.</p>",
        "id": 229774665,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1615423920
    },
    {
        "content": "<p>It's kind of hidden in a whole lot of data, but I highlighted the relevant portions in this screenshot: <a href=\"/user_uploads/10155/Vi75JXh8DdBUfu2BQ87OP3r1/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/Vi75JXh8DdBUfu2BQ87OP3r1/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/Vi75JXh8DdBUfu2BQ87OP3r1/image.png\"></a></div>",
        "id": 229778380,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1615426549
    },
    {
        "content": "<p>I've been away from the FSH scene for a while, so just catching up on the status re Logical model generation. <br>\nI see the grammar on GitHub now makes provision for Logical models, but I am not sure how far the development has got.</p>\n<p>I tried running an example through, I got no errors but also no output either.<br>\n<a href=\"/user_uploads/10155/8VG5v0kBY6cYNrtv5GdBR5SV/image.png\">image.png</a><br>\nEither I'm too keen and this has not fully arrived yet, or I crested my FSH file incorrectly...</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/8VG5v0kBY6cYNrtv5GdBR5SV/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/8VG5v0kBY6cYNrtv5GdBR5SV/image.png\"></a></div>",
        "id": 235488819,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1619002191
    },
    {
        "content": "<p>Not a developer, just an observer: The current SUSHI release (v1.3.1) includes the parser for the updated grammar, but no output is generated yet. In the repo, there has been some activity regarding the output side. There is a PR for the export, but it is currently in draft-mode: <a href=\"https://github.com/FHIR/sushi/pull/802\">https://github.com/FHIR/sushi/pull/802</a></p>",
        "id": 235494670,
        "sender_full_name": "Martin Höcker",
        "timestamp": 1619005213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191362\">@Richard Kavanagh</span>  Martin is correct. The grammar had to be completed before we could proceed with the rest of the development. We are actively working on adding support for both logical models and for resources. We are getting close, so stay tuned!</p>",
        "id": 235496785,
        "sender_full_name": "Joe Paquette",
        "timestamp": 1619006207
    },
    {
        "content": "<p>is there a sample IG with some logical modeling in FSH? I think I have a need, but am unclear on the concept or how to do it with FSH.</p>",
        "id": 236323650,
        "sender_full_name": "John Moehrke",
        "timestamp": 1619525000
    },
    {
        "content": "<p>Support for logical models in FSH has not yet been released, so there are not yet any IGs in the wild that do logical models w/ FSH.  Right now, the very top of this thread probably contains the best publicly available examples of logical models in FSH.</p>",
        "id": 236335508,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1619529873
    }
]