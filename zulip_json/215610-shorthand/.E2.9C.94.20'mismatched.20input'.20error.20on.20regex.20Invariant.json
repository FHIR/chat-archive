[
    {
        "content": "<p>Hi, I'm trying to create an invariant to verify an OID string, but the SUSHI compiler reports an error on the escaped dots.<br>\nThis is a simplified example of the invariant I'm trying to create:</p>\n<div class=\"codehilite\"><pre><span></span><code>Invariant: example\nDescription: &quot;Should only accept the string: foo:1.2&quot;\nExpression: &quot;$this.matches(&#39;foo:1\\.2&#39;)&quot;\nSeverity: #error\n</code></pre></div>\n<p>The error reported by SUSHI:  <code>error mismatched input '\"$this.matches('foo:1\\.2')\"' expecting STRING</code><br>\n<a href=\"https://regex101.com/r/vrUF0H/1\">Example of the regex</a>.</p>\n<p>Am I missing something or is this a bug?</p>",
        "id": 250976493,
        "sender_full_name": "Eirik Myklebost",
        "timestamp": 1630089784
    },
    {
        "content": "<p><a href=\"https://fshschool.org/FSHOnline/#/share/3yrsNBV\">Demo at fsh-school</a>.</p>",
        "id": 251078664,
        "sender_full_name": "Eirik Myklebost",
        "timestamp": 1630180867
    },
    {
        "content": "<p>Thanks for providing the example.  I think that the issue is that you need to escape the backslash <code>\\</code> in your string.  When I did that (<a href=\"https://fshschool.org/FSHOnline/#/share/3t9AfAJ\">example</a>), it converted without error.</p>\n<p>This did also retain the <code>\\\\</code> in the resulting JSON, but I think that may be what you want anyway because <a href=\"http://hl7.org/fhirpath/N1/#string\">FHIRPath</a> says you should escape backslash too.</p>\n<p>All that said, the FSH spec isn't clear about this, and I admit it is a bit confusing, so I will also check w/ the rest of the FSH team to see what they think.</p>",
        "id": 251149483,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1630261800
    },
    {
        "content": "<p>(Also, I apologize -- I somehow missed your original post about this and only noticed it when you posted the example later).</p>",
        "id": 251149573,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1630261876
    },
    {
        "content": "<p>I'm trying to escape the dot <code>.</code>, which in regex is interpreted as <code>Match any single character</code>, hence the use of backslash. From my understanding your suggestion would result in the following regex: <code>foo:1\\\\.2</code>, which will escape the backslash instead of the dot, and thereby require a literal backslash match. The regex will then match on e.g. <code>foo:1\\A2</code>, <code>foo:1\\B2</code>, but I want it to only match on <code>foo:1.2</code>.</p>",
        "id": 251153867,
        "sender_full_name": "Eirik Myklebost",
        "timestamp": 1630266608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> , any thoughts? Or should I register this as an issue on the SUSHI github?</p>",
        "id": 251303537,
        "sender_full_name": "Eirik Myklebost",
        "timestamp": 1630361831
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"223185\">@Eirik Myklebost</span> -- SUSHI outputs the resources in JSON, and the invariant expression gets serialized as a JSON string.  JSON requires you to escape <code>\\</code> in JSON strings (see <a href=\"https://www.json.org/json-en.html\">here</a> and <a href=\"https://www.tutorialspoint.com/json_simple/json_simple_escape_characters.htm\">here</a>) but does not require you to escape <code>.</code> in JSON strings (for obvious reasons).  So... I believe you <em>have</em> to serialize it as <code>\\\\.</code> in the JSON string in order to represent a final form of <code>\\.</code>.  Because, technically, I think <code>\\.</code> alone is invalid in a JSON string since it is an unrecognized escaped character.  So I do still think SUSHI is doing it right.  Does that make sense?</p>",
        "id": 251311610,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1630367162
    },
    {
        "content": "<p>For example, if you go to <a href=\"https://jsonlint.com\">https://jsonlint.com</a> and validate <code>{ \"foo\": \"foo\\.bar\" }</code> you will get validation errors.  But if you change it to <code>{ \"foo\": \"foo\\\\.bar\" }</code> it validates cleanly.</p>",
        "id": 251311797,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1630367315
    },
    {
        "content": "<p>Ah, that makes sense. I will have to try this with the fhir-validator, but I guess it means we'll have to \"double escape\" when escaping a character in a regex within json.<br>\nThanks for the explanation.</p>\n<p>EDIT: This got me thinking. Could the escaping required by json representation be added by SUSHI? This would be a nice feature, but also required if SUSHI was to ever support multiple output formats (XML, Turtle).</p>",
        "id": 251343138,
        "sender_full_name": "Eirik Myklebost",
        "timestamp": 1630394803
    },
    {
        "content": "<p>The thing is that SUSHI also needs to escape <code>\\</code>.  Since SUSHI supports <code>\\n</code>, <code>\\r</code>, <code>\\t</code>, something like <code>\\node</code> would be ambiguous (is it newline plus <code>ode</code> or is it backslash plus <code>node</code>)?  This is why SUSHI also requires you to escape the <code>\\</code>.</p>\n<p>For fields that take a true regex (and only a regex), SUSHI supports regex in the form <code>/myregex/</code> -- but I think the only place that happens is in ValueSet filters.</p>",
        "id": 251370718,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1630410287
    },
    {
        "content": "<p>Ok, the behavior is understandable. Thanks again for the explanation, I will mark the topic as resolved.<br>\nMaybe this behavior should be documented in the FSH IG and\\or fsh-school?</p>",
        "id": 251378889,
        "sender_full_name": "Eirik Myklebost",
        "timestamp": 1630414375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"223185\">Eirik Myklebost</span> has marked this topic as resolved.</p>",
        "id": 251378893,
        "sender_full_name": "Notification Bot",
        "timestamp": 1630414378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"223185\">Eirik Myklebost</span> has marked this topic as unresolved.</p>",
        "id": 251378906,
        "sender_full_name": "Notification Bot",
        "timestamp": 1630414385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"223185\">Eirik Myklebost</span> has marked this topic as resolved.</p>",
        "id": 251378916,
        "sender_full_name": "Notification Bot",
        "timestamp": 1630414389
    }
]