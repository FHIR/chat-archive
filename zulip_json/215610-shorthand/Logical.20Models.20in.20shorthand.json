[
    {
        "content": "<p>Here is a first poke to see how would FSH look like for a Logical Model.</p>",
        "id": 182967089,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1575905764
    },
    {
        "content": "<p>Any ideas? Is this something for a call (I can try to join)?</p>",
        "id": 182967142,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1575905803
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> -- the wiki hides it behind an obscure \"show 15 more pages\" link, but we do have a very notional logical model syntax documented here: <a href=\"https://github.com/HL7/fhir-shorthand/wiki/5.2-Logical-Models\" target=\"_blank\" title=\"https://github.com/HL7/fhir-shorthand/wiki/5.2-Logical-Models\">https://github.com/HL7/fhir-shorthand/wiki/5.2-Logical-Models</a></p>",
        "id": 182968036,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1575906291
    },
    {
        "content": "<p>I don't think we've discussed it w/ the community yet as we had been focusing on the profiling piece.  <span class=\"user-mention\" data-user-id=\"191447\">@Mark Kramer</span> -- what do you think about adding this to the agenda for Thursday?</p>",
        "id": 182968232,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1575906372
    },
    {
        "content": "<p>Thanks. Looks flat'ish - can we put some structure there?</p>",
        "id": 182968281,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1575906404
    },
    {
        "content": "<p>I mean, how to put structure? is it by doing <br>\nElement: parent<br>\n...<br>\nElement: parent.child<br>\n...</p>",
        "id": 182968469,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1575906509
    },
    {
        "content": "<p>I think the way it is currently written up, each \"level\" of the structure is defined as a separate component.  So the way you introduce another level deep is by defining a new complex element with the sub-children.  In the example in the doc, this is shown by the <code>Model</code> called <code>MyClass</code>, which contains a property that is a <code>Backbone</code> called <code>bar</code>, which then has nested <code>Element</code>s called <code>baz</code> and <code>qux</code>.</p>",
        "id": 182978098,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1575912081
    },
    {
        "content": "<p>So you're suggesting that perhaps the syntax should allow that nesting inline in a single element definition?  Did I understand correctly?</p>",
        "id": 182978194,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1575912127
    },
    {
        "content": "<p>Not sure. If the purpose is to make it easier to read, I would expect more something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nn\">---</span>\n<span class=\"nt\">MyClass</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">foo 0..1</span>\n    <span class=\"l l-Scalar l-Scalar-Plain\">Description</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">&quot;An</span><span class=\"nv\"> </span><span class=\"s\">element&quot;</span>\n    <span class=\"nt\">Datatype</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string or CodeableConcept</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">bar 0..*</span>\n    <span class=\"l l-Scalar l-Scalar-Plain\">Description</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">&quot;A</span><span class=\"nv\"> </span><span class=\"s\">backbone</span><span class=\"nv\"> </span><span class=\"s\">element&quot;</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">baz 0..1</span>\n        <span class=\"l l-Scalar l-Scalar-Plain\">Description</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">&quot;Element</span><span class=\"nv\"> </span><span class=\"s\">in</span><span class=\"nv\"> </span><span class=\"s\">the</span><span class=\"nv\"> </span><span class=\"s\">backbone&quot;</span>\n        <span class=\"nt\">Datatype</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Patient or Provider</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">qux 0..1</span>\n        <span class=\"l l-Scalar l-Scalar-Plain\">Description</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">&quot;Another</span><span class=\"nv\"> </span><span class=\"s\">element</span><span class=\"nv\"> </span><span class=\"s\">in</span><span class=\"nv\"> </span><span class=\"s\">the</span><span class=\"nv\"> </span><span class=\"s\">backbone&quot;</span>\n        <span class=\"nt\">Datatype</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Quantity</span>\n</pre></div>",
        "id": 182986887,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1575917591
    },
    {
        "content": "<p>Just exploring. I do not know the impact.</p>",
        "id": 182986919,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1575917613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span>  I'm open to that suggestion. The proposed syntax that you were looking at was spun off CIMPL, where the emphasis was on reuse of any element, at any level. But I do like the compactness of your approach</p>",
        "id": 183286991,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1576175477
    },
    {
        "content": "<p>Are there any news on this topic?</p>",
        "id": 207859668,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1598283868
    },
    {
        "content": "<p>Not yet.  FSH 1.0.0 is not yet officially out nor is SUSHI 1.0.0.  After we get those out the door, we'll start talking about post-1.0.0 features more...</p>",
        "id": 207879329,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1598293979
    },
    {
        "content": "<p>We are on the verge of the STU 1 release. Just one more approval and we're there.</p>",
        "id": 208151764,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1598477540
    },
    {
        "content": "<p>cc the above syntax: if we don't want to bring indenting, perhaps we can use the \"with\" syntax - or even a shorter version of it.</p>",
        "id": 208349581,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1598624949
    },
    {
        "content": "<p>if instead of </p>\n<div class=\"codehilite\"><pre><span></span><code>* with a:\n   a1 = x\n   a2 = y\n</code></pre></div>\n\n\n<p>we have a syntax like </p>\n<div class=\"codehilite\"><pre><span></span><code>* a:\n    a1 =\n    a2 =\n</code></pre></div>\n\n\n<p>(in practice, the <code>with:</code> is replaced by a <code>:</code>)</p>",
        "id": 208356401,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1598628052
    },
    {
        "content": "<p>(not sure how to close the <code>with</code> - semicolon?). <br>\nAnyway, this is just an idea that might be useful for the LMs</p>",
        "id": 208356476,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1598628090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> <span class=\"user-mention\" data-user-id=\"191447\">@Mark Kramer</span> Any updates to logical model support in FSH/SUSHI? Looking thru the docs/source and not able to figure out the current state of support...</p>",
        "id": 225745907,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1612899812
    },
    {
        "content": "<p>it is possible to create logical models in shorthand.  but you have to create them as Instances of StructureDefinition.  Support for syntax that makes it easier isn't there yet as far as I know.  I've attached a sample of one of my logical models. <a href=\"/user_uploads/10155/xP13nyFdNv4PQTZkz3WBXDk3/LabelerLogicalModel.fsh\">LabelerLogicalModel.fsh</a></p>",
        "id": 225746246,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1612899956
    },
    {
        "content": "<p>I know during the last connectathon there was some discussion of more \"direct\" support (e.g. <a href=\"https://github.com/HL7/fhir-shorthand/wiki/5.2-Logical-Models\">https://github.com/HL7/fhir-shorthand/wiki/5.2-Logical-Models</a>). Any more on that thread?</p>",
        "id": 225757119,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1612904676
    },
    {
        "content": "<p>We started off STU2 work by focusing on soft indexing and parameterized rule sets, but we've just started thinking about logical models and resource definitions again.  We have a few different syntax ideas and examples kicking around.  I'll post a few snippets here so you can see what we're thinking (and offer any feedback)...</p>",
        "id": 225757221,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612904729
    },
    {
        "content": "<p><strong>Logical model example using <a href=\"http://build.fhir.org/ig/openhie/hiv-ig/branches/master/StructureDefinition-model-hiv-record.html\">HIV Record</a> as the example.</strong></p>\n<p>Key to the grammar:</p>\n<ul>\n<li>Use <code>+</code> instead of <code>*</code> to <em>create</em> a new element</li>\n<li><code>+ {path} {min}..{max} {type (or type or...)} {short} {definition}</code></li>\n<li>Use <code>*</code> to constrain an existing element (same rules and syntax as profiling)</li>\n<li>Use multiple <code>+</code>/<code>*</code> to operate in context of last element path with one fewer <code>+</code>/<code>*</code></li>\n</ul>\n<p><a href=\"/user_uploads/10155/bcxzGzHwLw-dhM-skwuEYAr9/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/bcxzGzHwLw-dhM-skwuEYAr9/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/bcxzGzHwLw-dhM-skwuEYAr9/image.png\"></a></div>",
        "id": 225758152,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612905155
    },
    {
        "content": "<p>Or if we don't like the <code>+</code>, we can introduce a new keyword <code>is</code> instead.  But we do think it is important to be explicit about <em>creating</em> a new element vs <em>constraining</em> an existing element.<br>\n<a href=\"/user_uploads/10155/g7TZSiCkjug6EcEwPdI6yaeA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/g7TZSiCkjug6EcEwPdI6yaeA/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/g7TZSiCkjug6EcEwPdI6yaeA/image.png\"></a></div>",
        "id": 225758606,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612905327
    },
    {
        "content": "<p><strong>Patient resource</strong></p>\n<p>Here are some examples of using a similar grammar to define resources.  But note that it get's a lot more unwieldy because resources are very text-heavy.  This is only the first few elements of <code>Patient</code>:<br>\n<a href=\"/user_uploads/10155/Bx0zjW72vJ2kFS44XeEkbgIj/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/Bx0zjW72vJ2kFS44XeEkbgIj/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/Bx0zjW72vJ2kFS44XeEkbgIj/image.png\"></a></div>",
        "id": 225759154,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612905561
    },
    {
        "content": "<p>So... another idea is introducing the concept of <code>TextContent</code>- a way to outboard your text content to another file, optionally even allowing for multiple languages.  In that case we'd have a <code>Patient</code> resource w/ just the structural rules:<br>\n<a href=\"/user_uploads/10155/dNEHk0U3utJ2oRXgXVeStW7H/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/dNEHk0U3utJ2oRXgXVeStW7H/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/dNEHk0U3utJ2oRXgXVeStW7H/image.png\"></a></div>",
        "id": 225759411,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612905684
    },
    {
        "content": "<p>And another file w/ all the text content:<br>\n<a href=\"/user_uploads/10155/WMdsAHtb9i-Y_7AaHALMMIgw/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/WMdsAHtb9i-Y_7AaHALMMIgw/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/WMdsAHtb9i-Y_7AaHALMMIgw/image.png\"></a></div>",
        "id": 225759650,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612905761
    },
    {
        "content": "<p>We also experimented w/ putting text content in YAML, Java resource bundles (property files), etc.  But just re-using the FSH syntax seemed most consistent.</p>",
        "id": 225759966,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612905862
    },
    {
        "content": "<p>Awesome work <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> ! Building a system right now that's going to use a lot of FHIR logical models, and this looks like something that would be absolutely invaluable in that.</p>",
        "id": 225760890,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1612906262
    },
    {
        "content": "<p>Are you working on a public branch here? Has any of this made its way into SUSHI?</p>",
        "id": 225760960,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1612906293
    },
    {
        "content": "<p>May be able to bring some contribution to the effort....</p>",
        "id": 225761013,
        "sender_full_name": "Chris Grenz",
        "timestamp": 1612906321
    },
    {
        "content": "<p>At this point we were just tossing around syntax ideas and experimenting. The experimental files are all local and exist only as text files like I screenshotted above.  We have not built any of this into SUSHI or any other tooling -- because it's still very subject to change based on feedback from people like you!</p>\n<p>Also, we've been heads down trying to get a GoFSH 1.0 release out the door, so we haven't had the time to focus on this quite yet.</p>",
        "id": 225761743,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612906615
    },
    {
        "content": "<p>I think the TextContent is equivalent to the idea of \"with: \", right?</p>",
        "id": 225774796,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1612914260
    },
    {
        "content": "<p>I like the shortness of the first approach and the precision of the second, so, just spitballing: </p>\n<ul>\n<li>I'd like <code>++</code> instead of <code>+ +</code> (with space)?</li>\n<li>TextContent feel strange. I'd like more words like <code>with</code>, <code>use</code>...</li>\n</ul>",
        "id": 225775209,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1612914550
    },
    {
        "content": "<p>My idea would be this:</p>\n<div class=\"codehilite\"><pre><span></span><code>* Patient.identifier[+]:\n** system = $ssnnumbers\n** value = &quot;123&quot;\n* Patient.identifier[+]:\n** type = $hospitalids\n** value = &quot;456&quot;\n</code></pre></div>",
        "id": 225775801,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1612914990
    },
    {
        "content": "<p>in this case: <br>\nthe <code>:</code> tells the parser: From now on, when you see n+1 stars, prefix that element with the expression between this colon and the star(s) before.<br>\nthe number of stars tells us how deep we are (this could be nested)</p>",
        "id": 225775977,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1612915115
    },
    {
        "content": "<p>we can use a reserved keyword such as \"with\" or \"TextContent\".. but is it necessary?</p>",
        "id": 225776028,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1612915155
    },
    {
        "content": "<p>The <code>Logical</code> and <code>Resource</code> syntaxes use the <code>with</code> idea, but <em>without</em> the <code>with</code> (no pun intended).  We actually started by using <code>with</code> but then realized it was completely unnecessary.  Whenever you go from <code>n</code> to <code>n+1</code> <code>*</code>s, that's an indicator you're going into the context of the previous path.  The <code>with</code> or <code>:</code> doesn't seem to buy us much except for extra typing.</p>\n<p>As for whether it is <code>**</code> or <code>* *</code> (or <code>++</code> vs <code>+ +</code>) since FSH is (mostly) whitespace-insensitive, the spaces would be optional.  I tried both ways and found that for large complex definitions, my eye could parse the whole thing much easier when I put spaces between the bullets (to effectively double the indent size).</p>",
        "id": 225797251,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612936490
    },
    {
        "content": "<p>The idea for <code>TextContent</code> was that it would be just that -- reserved for specifying text content.  What makes it different than just doing it in a <code>RuleSet</code> or inline in the definition is that it is optimized for the common use case that every <em>element</em> (e.g., <code>Patient.identifier</code>) will have multiple text components <em>within</em> the element  (e.g., <code>short</code>, <code>definition</code>, <code>requirements</code>, <code>comment</code>, etc).  In standard syntax you would need to access all those things via caret rules:</p>\n<div class=\"codehilite\"><pre><span></span><code>* ^title = &quot;Patient&quot;\n* ^description = &quot;&quot;&quot;\n   Demographics and other administrative information about an individual or animal\n   receiving care or other health-related services.\n   &quot;&quot;&quot;\n* ^publisher = &quot;Health Level Seven International (Patient Administration)&quot;\n* ^purpose = &quot;Tracking patient is the center of the healthcare process.&quot;\n* Patient.identifier\n** ^short = &quot;An identifier for this patient&quot;\n** ^definition = &quot;An identifier for this patient&quot;\n** ^requirements = &quot;Patients are almost always assigned specific numerical identifiers.&quot;\n* Patient.active\n** ^short = &quot;Whether this patient&#39;s record is in active use&quot;\n** ^definition = &quot;&quot;&quot;\n    Whether this patient record is in active use. \\nMany systems use this property to mark\n    as non-current patients, such as those that have not been seen for a period of time based\n    on an organization&#39;s business rules.\\n\\nIt is often used to filter patient lists to\n    exclude inactive patients\\n\\nDeceased patients may also be marked as inactive for the\n    same reasons, but may be active for some time after death.\n    &quot;&quot;&quot;\n** ^comment = &quot;&quot;&quot;\n    If a record is inactive, and linked to an active record, then future patient/record\n    updates should occur on the other patient.\n    &quot;&quot;&quot;\n** ^requirements = &quot;&quot;&quot;\n    Need to be able to mark a patient record as not to be used because it was created\n    in error.\n    &quot;&quot;&quot;\n** ^meaningWhenMissing = &quot;&quot;&quot;\n    This resource is generally assumed to be active if no value is provided for the\n    active element\n    &quot;&quot;&quot;\n** ^sModifierReason = &quot;&quot;&quot;\n    This element is labelled as a modifier because it is a status element that can\n    indicate that a record should not be treated as valid\n    &quot;&quot;&quot;\n</code></pre></div>\n<p>That's a lot of caret rules.  TBH, I don't love caret rules.  I prefer to avoid them.  In addition, there's not an obvious way to support multiple languages there.</p>\n<p><code>TextContent</code> on the other hand, avoids carets because within the element you're defining, we can just <em>assume</em> the paths are relative to the <code>ElementDefinition</code>.  It also gives us a place to put the language.  The same example as above would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>TextContent: Patient\nLanguage: en\n* title = &quot;Patient&quot;\n* description = &quot;&quot;&quot;\n  Demographics and other administrative information about an individual or animal\n  receiving care or other health-related services.\n  &quot;&quot;&quot;\n* publisher = &quot;Health Level Seven International (Patient Administration)&quot;\n* purpose = &quot;Tracking patient is the center of the healthcare process.&quot;\n\nTextContent: Patient.identifier\n* short = &quot;An identifier for this patient&quot;\n* definition = &quot;An identifier for this patient&quot;\n* requirements = &quot;Patients are almost always assigned specific numerical identifiers.&quot;\n\nTextContent: Patient.active\n* short = &quot;Whether this patient&#39;s record is in active use&quot;\n* definition = &quot;&quot;&quot;\n    Whether this patient record is in active use. \\nMany systems use this property to mark\n    as non-current patients, such as those that have not been seen for a period of time based\n    on an organization&#39;s business rules.\\n\\nIt is often used to filter patient lists to\n    exclude inactive patients\\n\\nDeceased patients may also be marked as inactive for the\n    same reasons, but may be active for some time after death.\n    &quot;&quot;&quot;\n* comment = &quot;&quot;&quot;\n    If a record is inactive, and linked to an active record, then future patient/record\n    updates should occur on the other patient.\n    &quot;&quot;&quot;\n* requirements = &quot;&quot;&quot;\n    Need to be able to mark a patient record as not to be used because it was created\n    in error.\n    &quot;&quot;&quot;\n* meaningWhenMissing = &quot;&quot;&quot;\n    This resource is generally assumed to be active if no value is provided for the\n    active element\n    &quot;&quot;&quot;\n* isModifierReason = &quot;&quot;&quot;\n    This element is labelled as a modifier because it is a status element that can\n    indicate that a record should not be treated as valid\n</code></pre></div>\n<p>Personally I just find that cleaner, but it is a matter of preference.  Anyway, I just wanted to clarify what I was going for with <code>TextContent</code>.  Of course if nobody gets it then that will be a good sign that it's probably not the right approach.</p>",
        "id": 225797884,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612937174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20shorthand/near/225797251\">said</a>:</p>\n<blockquote>\n<p>The <code>Logical</code> and <code>Resource</code> syntaxes use the <code>with</code> idea, but <em>without</em> the <code>with</code> (no pun intended).  We actually started by using <code>with</code> but then realized it was completely unnecessary.  Whenever you go from <code>n</code> to <code>n+1</code> <code>*</code>s, that's an indicator you're going into the context of the previous path.  The <code>with</code> or <code>:</code> doesn't seem to buy us much except for extra typing.</p>\n<p>As for whether it is <code>**</code> or <code>* *</code> (or <code>++</code> vs <code>+ +</code>) since FSH is (mostly) whitespace-insensitive, the spaces would be optional.  I tried both ways and found that for large complex definitions, my eye could parse the whole thing much easier when I put spaces between the bullets (to effectively double the indent size).</p>\n</blockquote>\n<p>Agree. I also think the <code>with</code> is optional <br>\nAnd I thought \"TextContent\" would be a bizarre keyword for \"with\", and simply use the colon would be better.</p>",
        "id": 225802519,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1612942891
    },
    {
        "content": "<p>My idea for the colon is to make sure that the **s are not referring to the parent elementdefinition, but to whatever is in between the <code>*</code> and the <code>:</code><br>\nit could be a slice, for example.</p>",
        "id": 225802605,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1612943015
    },
    {
        "content": "<p>OK.  The <code>TextContent</code> really is an entirely different concept than <em>with</em> (or nested contexts) -- it just happens to use nested contexts as part of its grammar.  But they're not the point of <code>TextContent</code>.</p>\n<p>As for the <code>**</code>, I interpret that to mean <em>in the context of the last path</em> -- which may be something simple, like <code>referenceRange</code>, a slice, like <code>component[systolic]</code>, an extension, like <code>extension[http://foo.org/bar-ext]</code>, a choice, like <code>valueQuantity</code>, or a nested combination of these, like <code>component[systolic].extension[http://foo.org/bar-ext].valueQuantity</code>.  In short, <em>whatever</em> the previous path was, that is the context inherited by <code>**</code>.  I still don't think <code>:</code> is necessary.</p>",
        "id": 225857247,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612972734
    },
    {
        "content": "<p>so whatever is after the * before the **s, right?</p>",
        "id": 225860806,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1612973530
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 225860966,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612973572
    },
    {
        "content": "<p>i was thinking that the colon could be interesting to tell the compiler why this is not a finished sentence</p>",
        "id": 225861077,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1612973603
    },
    {
        "content": "<p>(and visually it feels good - but I was a Pascal guy, so I may be biased to appreciate the begins and ends of sentences)</p>",
        "id": 225861571,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1612973728
    },
    {
        "content": "<p>OK.  I get that.  The rule with just a path and no other action can seem a little odd to someone who's used to always seeing something after the path.  I guess I'd ask if that is the _only_ way you can establish a context?  Or can you establish a context under a rule that also does other things.  For example, do you think this should be allowed?</p>",
        "id": 225866633,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612974849
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>* identifier 1..1 MS\n** system = &quot;http://foo.org/mysystem&quot;\n</code></pre></div>",
        "id": 225866821,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612974897
    },
    {
        "content": "<p>I think a problem with the : syntax is that there is no way to mark the \"end of the sentence.\" Or at least not in a way that provides a benefit over just using *'s.</p>",
        "id": 225866984,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1612974955
    },
    {
        "content": "<p>Is this general idea also being considered for Questionnaire?</p>",
        "id": 225867135,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1612975007
    },
    {
        "content": "<p>Right.  From a parsing perspective, the <code>*</code> is all I need in order to know that the previous \"sentence\" is done.  I don't really need the <code>:</code>.</p>",
        "id": 225867173,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612975023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191380\">Elliot Silver</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20shorthand/near/225867135\">said</a>:</p>\n<blockquote>\n<p>Is this general idea also being considered for Questionnaire?</p>\n</blockquote>\n<p>The notion of contexts is actually separate from logical models, but logical models really highlight why such a thing is useful.    So, yes, this notion of contexts with <code>**</code> and <code>***</code>, etc, would apply throughout most of the shorthand language.  In profile definitions, extension definitions, instances (including Questionnaire), etc.  You could always use <code>**</code> (or <code>* *</code>) to work within the context of the last stated path.</p>",
        "id": 225867544,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612975155
    },
    {
        "content": "<p>We do need to figure out if/how it interacts w/ RuleSets though.  For example, if I do <code>** insert MyRuleSet</code>, should all paths in the ruleset be interpreted at the inherited context?  In some cases, that would be quite nice, but maybe there are others where it would be confusing.  We need to work that out some more I think.</p>",
        "id": 225868301,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612975375
    },
    {
        "content": "<p>We'd love more feedback on the proposed logical model approach (and context too) so we can nail it down before we beginning development (or taking up others' offers to help with development!).  <span class=\"user-mention\" data-user-id=\"203235\">@Ward Weistra</span>, I know your crew has some experience with logical models.  Any feedback?  <span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span> -- you've been a FSH advocate and power user from the start.  Any thoughts?  Same for <span class=\"user-mention\" data-user-id=\"192611\">@Kurt Allen</span>, <span class=\"user-mention\" data-user-id=\"191321\">@David Hay</span>, and many others...  Appreciate your thoughts.  Our first starts at a logical model and/or resource syntax introduced halfway through the thread <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20shorthand/near/225757221\">here</a>.</p>",
        "id": 225868933,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612975595
    },
    {
        "content": "<p>I don't object to the idea of TextContent (ugh, I keep reading/typing Context), but...</p>\n<p>I like that it allows you to split content into multiple files and define a context  for that file. That's a positive, but we already could split content into multiple files, e.g. using rulesets, so the real main advantage is the context.</p>\n<p>On the other hand, what makes the text elements special? I think in part, you've eliminated the need for ^ syntax for most common uses with custom syntax for cardinality, must support, binding, etc. But, how do I set the item's ElementDefinition.code, or alias, or any of the other less common definitional elements? I think I still need to drop down to ^ syntax. Perhaps what is needed is the ability to use any element without using ^ syntax (based on one of your examples above):</p>\n<div class=\"codehilite\"><pre><span></span><code>+ communication is 0..* BackboneElement\n* * obeys ele-1\n+ + language is 1..1 CodeableConcept\n* * * obeys ele-1\n* * * from LANGUAGES (preferred)\n* * * code = $LNC#1234\n* * * short = &quot;my short description&quot;\n* * * example[+]\n* * * * label = &quot;this is an example&quot;\n* * * * valueDate = &#39;2021-01-01&#39;\n</code></pre></div>\n<p>The outstanding capability is to be able to specify the language(s).</p>\n<p>It would be nice to clarify if there is a difference between <code>+ +</code> and <code>* +</code>. Are both valid? Are do they mean the same?</p>",
        "id": 225873627,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1612977294
    },
    {
        "content": "<p>I quite like the idea of TextContent. In the clinFHIR modeller I've found that the textual stuff is important - especially when using the model to capture input from domain experts  - but  inserting it in the main model would certainly obfsucate the model definition (IMHO)</p>",
        "id": 225878006,
        "sender_full_name": "David Hay",
        "timestamp": 1612979029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20shorthand/near/225866821\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\"><pre><span></span><code>* identifier 1..1 MS\n** system = &quot;http://foo.org/mysystem&quot;\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Indeed, I don't like this (atm I cannot explain why)</p>",
        "id": 225878794,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1612979280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20shorthand/near/225868301\">said</a>:</p>\n<blockquote>\n<p>We do need to figure out if/how it interacts w/ RuleSets though.  For example, if I do <code>** insert MyRuleSet</code>, should all paths in the ruleset be interpreted at the inherited context?  In some cases, that would be quite nice, but maybe there are others where it would be confusing.  We need to work that out some more I think.</p>\n</blockquote>\n<p>this discovery is fundamental, I think. </p>\n<ul>\n<li>I think <code>**</code> insert MyRuleSet should indeed apply to the context determined by the <code>**</code></li>\n</ul>",
        "id": 225879377,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1612979476
    },
    {
        "content": "<p>of the examples thus far, I found the HIV one (with + symbols) the easiest to grok...</p>",
        "id": 225879427,
        "sender_full_name": "David Hay",
        "timestamp": 1612979498
    },
    {
        "content": "<p>How would you represent elements with different possible datatypes? like Patient.multipleBirth[x] ?</p>",
        "id": 225879936,
        "sender_full_name": "David Hay",
        "timestamp": 1612979681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191321\">David Hay</span> <a href=\"#narrow/stream/215610-shorthand/topic/Logical.20Models.20in.20shorthand/near/225879936\">said</a>:</p>\n<blockquote>\n<p>How would you represent elements with different possible datatypes? like Patient.multipleBirth[x] ?</p>\n</blockquote>\n<p>Similar to how you do it in an <code>only</code> rule: by using <code>or</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>+ multipleBirth[x] 0..1 boolean or integer &quot;Whether patient is part of a multiple birth&quot;\n</code></pre></div>",
        "id": 225885593,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612982032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191380\">@Elliot Silver</span> -- I think we need the <code>^</code> to indicate if you're talking about a property from the <code>ElementDefinition</code> or a sub-path of the element in context.  E.g., a shortened (And slightly modified) version of your example:</p>\n<div class=\"codehilite\"><pre><span></span><code>+ communication is 0..* BackboneElement\n+ + language is 1..1 CodeableConcept\n* * * coding = $LNC#1234\n* * * short = &quot;my short description&quot;\n</code></pre></div>\n<p>In the case above:</p>\n<ul>\n<li><code>coding</code> refers to <code>communication.language.coding</code> (the <code>coding</code> sub-path of the <code>communication.language</code> CodeableConcept)</li>\n<li><code>short</code> refers to <code>communication.language ^short</code> (the <code>short</code> property in the <code>communication.language</code> ElementDefinition)</li>\n</ul>\n<p>There is no syntactic hint for which is which.  You need to be familiar with the structure of <code>CodeableConcept</code> and the structure of <code>ElementDefinition</code> to ascertain what is going on.</p>\n<p>There is also potential for ambiguity.  How should I interpret this in the context of an Observation profile?</p>\n<div class=\"codehilite\"><pre><span></span><code>* component\n* * code = LOINC#1234-5\n</code></pre></div>\n<p>Is that a pattern[x] assignment on <code>component.code</code> or is that setting <code>component ^code</code> (e.g., <code>ElementDefintion.code</code> for the <code>component</code> element?</p>",
        "id": 225887349,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612982676
    },
    {
        "content": "<blockquote>\n<p>It would be nice to clarify if there is a difference between + + and * +. Are both valid? Are do they mean the same?</p>\n</blockquote>\n<p>Good question.  Discussing this with <span class=\"user-mention\" data-user-id=\"191447\">@Mark Kramer</span>, he thought that the bullet style should be consistent on a given line.  So we're going in with the idea that it's either <code>* *</code> or <code>+ +</code>, but never <code>* +</code> or <code>+ *</code>.  This approach probably is best at eliminating any ambiguity, but it (and all of this) is certainly up for discussion.</p>",
        "id": 225887864,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1612982847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191469\">Chris Moesel</span> [said](<a href=\"#narrow/stream/215610-\">https://chat.fhir.org/#narrow/stream/215610-</a></p>\n<div class=\"codehilite\"><pre><span></span><code>In the case above:\n* `coding` refers to `communication.language.coding` (the `coding` sub-path of the `communication.language` CodeableConcept)\n* `short` refers to `communication.language ^short` (the `short` property in the `communication.language` ElementDefinition)\n</code></pre></div>\n<p>Perhaps this is a place where \"with\" or equivalent is needed. E.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>+ communication is 0..* BackboneElement\n+ + language is 1..1 CodeableConcept with:\n* * * short = &quot;my short description&quot;\n* * * endwith\n* * * coding = $LNC#1234\n</code></pre></div>\n<p>I think the key is that there are two \"modes\" (although I'm having trouble articulating what those two are; describing the element attributes, and ...?) You've eliminated the many places where the element attributes are described by defining special syntax: obeys, is, etc. and thus you assume any other content is the (?) use. Currently to get back to the element attribute you need to use ^ syntax.</p>",
        "id": 225893555,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1612985094
    },
    {
        "content": "<ul>\n<li>Like the ability to separate out text labels to a separate file, especially if you can start using those for different languages (<code>nl-NL</code>, <code>en-US</code>)</li>\n<li>Would definitely directly look at ability to define Custom Resources and editing the core resources while you're at Logical Models, which you already seem to be doing.</li>\n</ul>",
        "id": 225991081,
        "sender_full_name": "Ward Weistra",
        "timestamp": 1613050984
    },
    {
        "content": "<p>I just think of trying to explain that to someone who is new to FSH and blowing their minds. Keeping it simple is a VERY important goal here.</p>",
        "id": 226065234,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1613081308
    },
    {
        "content": "<p>I agree, and I think consistency will address that. The above discussion is not simple, but the solutions seems reasonably simple.</p>",
        "id": 226078088,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1613089112
    },
    {
        "content": "<p>I presume the same way to do a LM will be the same to create a custom resource thus addressing <span class=\"user-mention\" data-user-id=\"203235\">@Ward Weistra</span>'s request <br>\n(The syntax above just helps to simplify the nesting)</p>",
        "id": 226078183,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1613089201
    },
    {
        "content": "<p>I also struggle with the caret topic that Elliot and Chris are bringing up</p>",
        "id": 226078305,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1613089283
    },
    {
        "content": "<p>Mark and I discussed the concept of <code>TextContent</code> a little more, and given that it does seem to have caused some confusion, we think maybe it goes to the back-burner for now.  If you want to separate out text from structure, that <em>is</em> possible using RuleSets.  E.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code>Resource: Patient\nParent: DomainResource\n* insert PatientText\n+ identifier is 0..* SU Identifier\n// etc.\n\nRuleSet: PatientText\n* ^title = &quot;Patient&quot;\n* ^description = &quot;&quot;&quot;\n  Demographics and other administrative information about an individual or animal\n  receiving care or other health-related services.\n  &quot;&quot;&quot;\n* ^purpose = &quot;Tracking patient is the center of the healthcare process.&quot;\n* identifier\n* * ^short = &quot;An identifier for this patient&quot;\n* * ^definition = &quot;An identifier for this patient&quot;\n* * ^requirements = &quot;Patients are almost always assigned specific numerical identifiers.&quot;\n</code></pre></div>\n<p>Then we're not introducing as many ideas at once.  And maybe the existing mechanims work just fine.  We shall see.</p>",
        "id": 226137193,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1613137046
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"191447\">@Mark Kramer</span> about keeping it simple. I think the debate was about what is \"simple.\" <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> <br>\nI also think there is some value to easily being able to do multi-language content, or pass narrative off to someone different than the person writing the technical content, so I don't want to dismiss TextContent, but it does seem rather arbitrary which elements are supported. Would it only be a set of predefined elements, or any string, markdown, html element?</p>",
        "id": 226174518,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1613153122
    },
    {
        "content": "<p>For TextContent, I think a lot can be done without special constructs using RuleSet. There are several possible approaches to factor the text content into a different file or files using that approach.</p>",
        "id": 226314640,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1613322335
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>  for showing the example of how to separate text from the rest of the structure using a RuleSet! This is solving a problem I was facing. I also really liked the syntactic sugar of your TextContent-proposal. It looks a lot cleaner. Texts and translation are often captured and edited by domain experts and/or  translation specialists, and I'm sure they would greatly appreciate the visual simplicity of TextContent. I understand this is not a priority right now, but I would certainly appreciate seeing it implemented sometime!</p>\n<p>Regarding the new syntax to distinguish between <em>creating</em> elements and <em>constraining</em> elements: Might we be able to get by without this per-rule distinction? In my (limited) understanding, one either creates a new resource-type using a StructureDefinition with .derivation = #specialization, or one would constrain a resource-type/data-type using a StructureDefinition with .derivation = #constraint. Assuming that specialization and constraint are never mixed, then the new \"Resource\"-keyword you proposed would be distinctive enough for me.</p>",
        "id": 226429477,
        "sender_full_name": "Martin Höcker",
        "timestamp": 1613422822
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"217988\">@Martin Höcker</span> -- thanks for the feedback and glad we could provide an approach that might be useful today!</p>\n<p>As for <em>create</em> vs <em>constrain</em> -- you're right that in general a <code>specialization</code> will create and a <code>constraint</code> will constrain, but I was thinking that within a logical model, you might need to further <em>constrain</em> one of the elements you <em>created</em> (like binding to a VS) -- and I wanted to make those clear so that if you had a typo (<code>desgnation</code> vs <code>designation</code>), it would be obvious that you weren't trying to <em>create</em> a new thing called <code>desgnation</code>.</p>\n<p>But... as I think it through, I guess that if we only create using a rule of the form <code>{path} {card} {optional-flags} {type}</code>, then any other form of rule is by-definition a constraint.  So maybe the form of the rule itself is enough to indicate it is creating something...  I think you may be on to something -- but I'll have to think it through some more.  Thanks!</p>",
        "id": 226432923,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1613425526
    }
]