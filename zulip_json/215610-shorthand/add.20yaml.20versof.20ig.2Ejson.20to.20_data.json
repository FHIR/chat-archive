[
    {
        "content": "<p>I  do a some artifact processing directly from the ig resource itself instead of the the derived _data artifact .  Can you  have Sushi do two things...</p>\n<p>1  create a <code> /input/data</code> directory  and  add a YML version of the implementation guide resource to it and call it \"ig.yml\"<br>\n2 copy the  contents <code>fsh/ig-data/input/data</code> directory to the  <code>/input/data</code>  directory  ?</p>\n<p>the ig-pub will add  the contents to the <code>temp/pages/_data</code> directory so can be accessed for page rendering ...</p>",
        "id": 211992577,
        "sender_full_name": "Eric Haas",
        "timestamp": 1601598722
    },
    {
        "content": "<p>can  the do stuff like this in liquid...</p>\n<div class=\"codehilite\"><pre><span></span><code>{% for p in site.data.ig.definition.resource %}\n  {%- if p.exampleBoolean or p.exampleCanonical -%}\n      {% if types %}\n        {% assign types =  types | append: &quot;,&quot; | append: p.reference.reference | split: &#39;/&#39; | first %}\n      {% else %}\n       {% assign types = p.reference.reference | split: &#39;/&#39; | first %}\n      {% endif %}\n  {% endif %}\n{% endfor %}\n\n{% assign my_array = types | split: &quot;,&quot; %}\n{% assign my_array = my_array | sort | uniq %}\n\n{% for i in my_array %}\n### {{ i }}\n  {%- for p in site.data.ig.definition.resource -%}\n      {%- if p.exampleBoolean or p.exampleCanonical -%}\n        {%- assign type =  p.reference.reference | split: &#39;/&#39; | first -%}\n            {%- if type == i %}\n- [{{p.name}}]({{p.reference.reference | replace: &#39;/&#39;,&#39;-&#39;}}.html)\n            {%- endif -%}\n       {%- endif -%}\n   {%- endfor %}\n{% comment %} keep this line here for proper rendering {% endcomment %}\n{% endfor %}\n</code></pre></div>",
        "id": 211992655,
        "sender_full_name": "Eric Haas",
        "timestamp": 1601598786
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191401\">@Eric Haas</span> -- we're just a day away from releasing SUSHI 1.0.0 Beta 1.  This release changes how projects are structured.  There are two things related to our changes that affect your request:</p>\n<p>1) We no longer use an <code>ig-data</code> folder.  Instead, just put all your IG stuff where you normally would.  So, there is no need to copy <code>/ig-data/input/data</code> because you will just put that stuff in <code>/input/data</code> directly.</p>\n<p>2) SUSHI no longer generates into <code>/input</code> at all, as we're trying to avoid mixing generated files and source files.  Instead, SUSHI will generate resources (and IG JSON) to <code>/fsh-generated/resources</code> and generate menu.xml (if applicable) to <code>/fsh-generated/includes</code>.  The base template is currently being updated to support these locations as source locations.</p>\n<p>SUSHI 1.0.0 Beta 1 should be released tomorrow.  As for generating <code>ig.yml</code> (wherever we would generate it), we can discuss.  For example, I'd like to better understand if this is a feature that only you will use or if it has use for others as well.</p>",
        "id": 211997639,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1601604956
    },
    {
        "content": "<p>OK that works partially for me so my data folder won't disappear every time I run sushi right?  I have no idea who else wants to access the ig resource directly, but  I imagine is limited only to those willing use the liquid syntax in the page rendering.      This is really a nice to have since I can add to bash script to insert between sushi and ig-pub.  but still it would be nice to park a new copy of the ig.json ( as YAML ) in the data folder so can be used out of the box.   Yaml is just easier to read and works fine in Jekyll so can kill 2 birds with one stone.  use the the resource directly in generating page data and able to glance at it to see the ig resource when debugging etc.  Jekyll accepts json too so that would be my second choice.</p>",
        "id": 212000251,
        "sender_full_name": "Eric Haas",
        "timestamp": 1601608237
    }
]