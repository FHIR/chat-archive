[
    {
        "content": "<p>Can someone provide an example of creating a transaction bundle example using other existing examples? How are fullUrls handled in examples referencing other examples? The standalone examples created by sushi have an id but resources in a transaction bundle would not, correct?</p>",
        "id": 192979762,
        "sender_full_name": " Bob Milius",
        "timestamp": 1586123051
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191916\">@ Bob Milius</span> -- those are some great questions. SUSHI does not populate <code>fullUrl</code> in bundles for you.  I think that would be difficult without knowing the base FHIR URL you want to post to -- so you'd need to set that yourself.</p>\n<p>As for including or not including the <code>id</code>... currently SUSHI always includes the id if you are referencing an existing instance. From a strict perspective of the spec, this is actually ok for <a href=\"http://hl7.org/fhir/R4/http.html#create\" title=\"http://hl7.org/fhir/R4/http.html#create\">create</a> since it states:</p>\n<blockquote>\n<p>The resource does not need to have an id element (this is one of the few cases where a resource exists without an id element). If an id is provided, the server SHALL ignore it.</p>\n</blockquote>\n<p>But I can see why maybe you wouldn't want the id to show up in an example (since it's not necessary and is ignored).  In the case of a <a href=\"http://hl7.org/fhir/R4/http.html#trules\" title=\"http://hl7.org/fhir/R4/http.html#trules\">transaction</a>, however, having the <code>id</code> can be helpful as it allows you to specify relationships between resources -- and if the server creates a new <code>id</code>, it will update all references based on the old <code>id</code>.</p>\n<p>I think we'd need to think about how to handle something like suppressing the <code>id</code> in an inlined resource... Open to suggestions.</p>",
        "id": 193042100,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1586180126
    },
    {
        "content": "<p>thanks, <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> . Actually what I'd like is for the fullUrl for one resource to populate the reference in another (eg DiagnosticReport.results --&gt; fullUrl of Observation) . Would there be a were a way to do this in the standalone examples? e.g., have the example <code>DiagnosticReport.result</code> point to an existing example <code>Observation.id</code>, then when creating the bundle example, perhaps substitute them for fullUrls? Hope that make sense.</p>",
        "id": 193042963,
        "sender_full_name": " Bob Milius",
        "timestamp": 1586180524
    },
    {
        "content": "<p>Ah.  I see.  That's a bit trickier.  Right now, I think it would use relative URLs in the reference (e.g., <code>Observation/12345</code>), right?  And you want that to use full URLs instead?  Hmm... you would still need to somehow tell it what the base FHIR URL should be (e.g., what to put _before_ <code>Observation/12345</code>) -- but assuming you want to do this to show support for resources on other servers (because relative URL would be fine otherwise), then I also assume that not every reference should use the same base URL.  I have an idea, although I'm not positive that it would work.  <span class=\"user-mention\" data-user-id=\"239822\">@Nick Freiter</span> -- I think you implemented the contained resources.  Would something like this work?</p>",
        "id": 193051232,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1586183898
    },
    {
        "content": "<p>(Oops.  Didn't mean to submit.  Stand by...)</p>",
        "id": 193051272,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1586183917
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Instance: MyDiagnosticReport\nInstanceOf: DiagnosticReport\nId: my-diagnostic-report\n// ... stuff\n* result[0] = Reference(MyObservation)\n\nInstance: MyObservation\nInstanceOf: Observation\nId: my-observation\n// ... stuff\n\nInstance: MyBundle\nInstanceOf: Bundle\n// ... stuff\n* entry[0].fullUrl = &quot;http://someserver.com/fhir/DiagnosticReport/my-diagnostic-report&quot;\n* entry[0].resource = MyDiagnosticReport\n// and here&#39;s the questionable part, overriding a value in the contained resource\n* entry[0].resource.result[0].reference = &quot;http://someotherserver.com/fhir/Observation/my-observation&quot;\n* entry[1].fullUrl = &quot;http://someotherserver.com/fhir/Observation/my-observation&quot;\n* entry[1].resource = MyObservation\n</pre></div>\n\n\n<p>What do you think <span class=\"user-mention\" data-user-id=\"239822\">@Nick Freiter</span> ?</p>",
        "id": 193052320,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1586184327
    },
    {
        "content": "<p>When you say \"would something like this work\", do you mean work currently? Because if that's the question no this couldn't currently work.</p>",
        "id": 193054322,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1586185092
    },
    {
        "content": "<p>I think the only way to do this right now would be to make two different DiagnosticReport's, one specifically for use in the Bundle, that has a different DiagnosticReport.results. If you were going to do it this way, this may be a good place to use a RuleSet, since the rules for both DiagnosticReports may be identical outside of the the DiagnosticReport.results.</p>",
        "id": 193054715,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1586185264
    },
    {
        "content": "<p>fyi, before I stared using sushi I was using a <code>urn:uuid:xxxx</code> as a fullUrl and reference in my transaction bundle examples. I once tried creating local references in my standalone resource examples, but got errors in the publisher for them not existing, so then started using <code>http://example.org/fhir/blah</code> for those standalone examples. This got past the publisher but of course they didn't actually exist.</p>",
        "id": 193059515,
        "sender_full_name": " Bob Milius",
        "timestamp": 1586187254
    },
    {
        "content": "<p>I've been able to an example transaction bundle using inline instances. As I said above, I like to use <code>urn:uuid:xxxx</code> as a fullUrl, and this works okay. But the resulting bundle entries each contains an <code>Id</code>. Have you found a way to suppress that (you discussed it above)? I'm thinking the transaction bundle when posted to a FHIR server will create individual Ids as they are processed, so presumably, they wouldn't have Ids to begin with (or at least ignore them).  Would it be possible to create an alias/macro that generates a uuid and saves it with an alias/variable that gets reused? Or should I just stop using uuids? I'd like to have examples that folks can POST to FHIR server to try out. Here's a snippet of bundle that currently gets created.</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;entry&quot; : [\n    {\n      &quot;fullUrl&quot; : &quot;urn:uuid:1fb210d2-fa8c-404f-a2c3-1847e97737df&quot;,\n      &quot;resource&quot; : {\n        &quot;resourceType&quot; : &quot;Observation&quot;,\n        &quot;id&quot; : &quot;MyObservation1&quot;,\n...snip...\n        &quot;derivedFrom&quot; : [\n          {\n            &quot;reference&quot; : &quot;urn:uuid:5fc06349-9571-4baf-88c2-8da41d215b90&quot;\n          }\n        ],\n...snip...\n      },\n      &quot;request&quot; : {\n        &quot;method&quot; : &quot;POST&quot;,\n        &quot;url&quot; : &quot;Observation&quot;\n      }\n    },\n    {\n      &quot;fullUrl&quot; : &quot;urn:uuid:5fc06349-9571-4baf-88c2-8da41d215b90&quot;,\n      &quot;resource&quot; : {\n        &quot;resourceType&quot; : &quot;Observation&quot;,\n        &quot;id&quot; : &quot;MyObservation2&quot;,\n...snip...\n</code></pre></div>",
        "id": 198002082,
        "sender_full_name": " Bob Milius",
        "timestamp": 1589840069
    },
    {
        "content": "<p>If you don't want the <code>id</code> field to be added to a contained instance, you have to define the contained instance entirely inline on the other instance. As an example see the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>Instance: BundleInstance\nInstanceOf: Bundle\n* type = #transaction\n// entry[0] is defined fully inline\n* entry[0].fullUrl = &quot;urn:uuid:1fb210d2-fa8c-404f-a2c3-1847e97737df&quot;\n* entry[0].resource.resourceType = &quot;Observation&quot;\n* entry[0].resource.valueString = &quot;A fully inline observation&quot;\n// entry[1] references an instance defined elsewhere\n* entry[1].fullUrl = &quot;urn:uuid:5fc06349-9571-4baf-88c2-8da41d215b90&quot;\n* entry[1].resource = ObservationInstance\n\nInstance: ObservationInstance\nInstanceOf: Observation\n* valueString = &quot;A non-inline observation&quot;\n</code></pre></div>\n\n\n<p>Since entry[1] references <code>ObservationInstance</code>, in the process of generating <code>ObservationInstance</code>, SUSHI will add an <code>id</code> to <code>ObservationInstance</code>. But in the case of <code>entry[0]</code>, there is no external definition for the resource you are defining at <code>entry[0].resource</code>, you can define that resource entirely from within <code>BundleInstance</code>. In this case, you have full control, if you don't add an <code>entry[0].resource.id</code>, then no <code>id</code> will exist on this resource. Here is the output from the SUSHI posted above:</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  &quot;resourceType&quot;: &quot;Bundle&quot;,\n  &quot;id&quot;: &quot;BundleInstance&quot;,\n  &quot;type&quot;: &quot;transaction&quot;,\n  &quot;entry&quot;: [\n    {\n      &quot;fullUrl&quot;: &quot;urn:uuid:1fb210d2-fa8c-404f-a2c3-1847e97737df&quot;,\n      &quot;resource&quot;: {\n        &quot;resourceType&quot;: &quot;Observation&quot;,\n        &quot;valueString&quot;: &quot;A fully inline observation&quot;\n      }\n    },\n    {\n      &quot;fullUrl&quot;: &quot;urn:uuid:5fc06349-9571-4baf-88c2-8da41d215b90&quot;,\n      &quot;resource&quot;: {\n        &quot;resourceType&quot;: &quot;Observation&quot;,\n        &quot;id&quot;: &quot;ObservationInstance&quot;,\n        &quot;valueString&quot;: &quot;A non-inline observation&quot;\n      }\n    }\n  ]\n}\n</code></pre></div>\n\n\n<p>As you can see, the resource in <code>entry[0]</code> does not have an <code>id</code>.</p>",
        "id": 198054948,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1589889965
    }
]