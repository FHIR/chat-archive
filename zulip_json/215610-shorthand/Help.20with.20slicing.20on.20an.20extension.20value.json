[
    {
        "content": "<p>Okay, I need help from the big guns -&gt; Help me <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> , you're my only hope!</p>\n<p>I'm trying to slice Claim.careTeam on a boolean value in an extension.  Here is the thread where Grahame has been trying to help: <a href=\"#narrow/stream/179252-IG-creation/topic/How.20to.20slice.20on.20the.20value.20of.20an.20extension\">https://chat.fhir.org/#narrow/stream/179252-IG-creation/topic/How.20to.20slice.20on.20the.20value.20of.20an.20extension</a>. Basically, it appears that whatever I'm doing, SUSHI is taking my FSH file and not creating a proper differential.  Here is the repository: <a href=\"https://github.com/HL7/davinci-pas\">https://github.com/HL7/davinci-pas</a></p>\n<p>I declare the extension on Claim.careTeam:</p>\n<div class=\"codehilite\"><pre><span></span><code>* careTeam MS\n* careTeam.extension contains CareTeamClaimScope named careTeamClaimScope 1..1 MS\n</code></pre></div>\n<p>And then I slice careTeam on the value of the extension:</p>\n<div class=\"codehilite\"><pre><span></span><code>* careTeam ^slicing.discriminator.type = #value\n* careTeam ^slicing.discriminator.path = &quot;extension(&#39;http://hl7.org/fhir/us/davinci-pas/StructureDefinition/extension-careTeamClaimScope&#39;).value as Boolean&quot;\n* careTeam ^slicing.rules = #open\n* careTeam ^slicing.description = &quot;Slice based on whether the care team member belongs to the overall claim or to an individual claim item.&quot;\n* careTeam contains OverallClaimMember 0..14 and ItemClaimMember 0..10\n* careTeam[OverallClaimMember].extension contains CareTeamClaimScope named careTeamScope 1..1 MS\n* careTeam[OverallClaimMember].extension[careTeamClaimScope].valueBoolean = true (exactly)\n* careTeam[ItemClaimMember].extension contains CareTeamClaimScope named careTeamScope 1..1 MS\n* careTeam[ItemClaimMember].extension[careTeamClaimScope].valueBoolean = false (exactly)\n</code></pre></div>\n<p>Here is what Grahame said about the slicing:</p>\n<blockquote>\n<p>so the problem is around how slicing works. I'm pretty what I'm about to say is on record, but I can't find it :-(<br>\nthe base slice defines the constraints that apply to all the slices. The validator will test the rules in the base slice first, then match the slices, and then apply the rules in the slice<br>\nbut the snapshot generator does not replicate the constraints in the slice into each of the slices. That would be multiple inheritance, and we don't do that<br>\nusually, it doesn't matter, since the validator tests both<br>\n but you've found a case where it does: you have to manually redeclare the extension constraint in the slice, since the discriminator refers to it</p>\n</blockquote>\n<p>That is why I added the xxx.extension contains XXX in each of the slices.  But that still isn't enough as I'm still getting an error and Grahame then said:</p>\n<blockquote>\n<p>so I don't think that the differential has changed in a meaningful way . The differential in profile <a href=\"http://hl7.org/fhir/us/davinci-pas/StructureDefinition/profile-claim\">http://hl7.org/fhir/us/davinci-pas/StructureDefinition/profile-claim</a> says:</p>\n<p>Claim.careTeam sliced by the value of the extension <a href=\"http://hl7.org/fhir/us/davinci-pas/StructureDefinition/extension-careTeamClaimScope\">http://hl7.org/fhir/us/davinci-pas/StructureDefinition/extension-careTeamClaimScope</a><br>\nClaim.careTeam.extension sliced by URL<br>\none care team claim scope extension which is extension <a href=\"http://hl7.org/fhir/us/davinci-pas/StructureDefinition/extension-careTeamClaimScope\">http://hl7.org/fhir/us/davinci-pas/StructureDefinition/extension-careTeamClaimScope</a><br>\nThen it defines the first slice:</p>\n<p>Claim.careTeam:OverallClaimMember<br>\nClaim.careTeam:OverallClaimMember.extension - 2..*<br>\nClaim.careTeam:OverallClaimMember.extension:careTeamClaimScope - defines the named slice<br>\nClaim.careTeam:OverallClaimMember.extension:careTeamClaimScope.valueBoolean - fixes the value to true<br>\nBut... see what I wrote above:</p>\n<p>the snapshot generator does not replicate the constraints in the slice into each of the slices</p>\n<p>so when it goes to process the first slice, nothing ever says that the extension careTeamClaimScope is actually the extension <a href=\"http://hl7.org/fhir/us/davinci-pas/StructureDefinition/extension-careTeamClaimScope\">http://hl7.org/fhir/us/davinci-pas/StructureDefinition/extension-careTeamClaimScope</a></p>\n</blockquote>\n<p>Is there something that I'm doing wrong in how I'm declaring the extension in the slices?  Is this just something SUSHI can't convert?</p>",
        "id": 255233281,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1632841933
    },
    {
        "content": "<p>I need to look into this more, but on first glance my guess is that SUSHI recognizes that the extension is already declared in the \"base slice\" (as Grahame referred to it), and thinks that since it is in that base slice, it does not need to be repeated in each individual slice -- because it's not actually a <em>diff</em> from the base slice.  SUSHI tries really hard not to put anything into the differential that isn't actually <em>different</em> -- so even if you manually code it up in FSH, SUSHI says \"Dude, that's not necessary.  Let me clean that up for you.\"</p>\n<p>This is just my guess though.  I'd need to dig deeper to confirm.</p>",
        "id": 255461723,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1632944595
    },
    {
        "content": "<p>Thanks for your patience, <span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span>.  I've looked into this a bit more and have a better idea what is going on.</p>\n<p>Case 1: In the case where you did <em>not</em> redeclare the extensions on the individual careTeam slices, SUSHI did not redeclare them for you because it only outputs the <em>differences</em> in the slice vs the base.  So we know why we're not seeing the extensions in the slices there.</p>\n<p>Case 2: If you redeclare the extensions on each slice and use <em>the same slice name</em> as in the base (careTeamClaimScope), then SUSHI spits a warning at you about declaring a slice name that already exists.  But since what you declared is <em>exactly the same</em> as the base, SUSHI still omits it in the differential since it is not <em>different</em> from the base.  We end up w/ the same output as Case 1 above.</p>\n<p>Case 3: If you redeclare the extensions on each slice and use <em>a different slice name</em> (careTeamScope, not careTeamClaimScope), then SUSHI <em>does</em> actually produce a differential w/ the extensions declared in that careTeamScope slice of the extension element.  But note that it is treated as a <em>different</em> extension slice, which is also 1..1.  So now you have the base requiring 1..1 careTeamClaimScope extension slice and the careTeam slices each also requiring 1..1 careTeamScope extension slice.  SUSHI sees two extension slices, each declared as 1..1, and then thinks it should bump the overall extension cardinality to <code>2..*</code>.  <em>(This is starting to get confusing, isn't it?)</em>.  Now... in your example, after redeclaring the extension slices as careTeamScope, you then set the fixed value on the careTeamClaimScope extension slice (the one from the base, not from the slice) -- and the validator thinks the value is not fixed in the careTeam slice now since it doesn't know what the base extension slice is.  <em>(Yup, still confusing, but it makes sense if you think it through)</em>. You can actually fix this by changing the lines that fix the extension's value to use the careTeamScope slice instead of the careTeamClaimScope slice.  BUT... you still end up w/ the error due to SUSHI marking the base extension as <code>2..*</code>.</p>",
        "id": 257446288,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1634162730
    },
    {
        "content": "<p>Oh.  And there was one more issue.  In the discriminator, you had <code>value as Boolean</code>, but <code>Boolean</code> is not a valid FHIR type -- it needs to be <code>value as boolean</code> (although I think you can get away with just <code>value</code> actually).</p>",
        "id": 257450079,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1634164762
    },
    {
        "content": "<p>So... I expect you're looking for a solution ;-).  I actually have one for you!  SUSHI applies rules top-down.  When it creates slices, it starts each slice as a clone of the base element being sliced -- and the diff is generated from that.  In other words, the diff is based on the state of the base element <em>at the time the slice was created</em>.  So... we can use that to our advantage here.  So to make everything happy, here is what you need to do:</p>\n<ul>\n<li>Move the <code>* careTeam.extension contains...</code> rule to the <em>end</em> of the definition (<em>after</em> you declare the careTeam slices)</li>\n<li>Use consistent slice names across the base and slices (e.g., name them all <code>careTeamClaimScope</code>)</li>\n<li>Fix the discriminator to use <code>as boolean</code> instead of <code>as Boolean</code></li>\n</ul>\n<p>You should end up w/ a set of rules something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>* careTeam MS\n* careTeam ^slicing.discriminator.type = #value\n* careTeam ^slicing.discriminator.path = &quot;extension(&#39;http://hl7.org/fhir/us/davinci-pas/StructureDefinition/extension-careTeamClaimScope&#39;).value as boolean&quot;\n* careTeam ^slicing.rules = #open\n* careTeam ^slicing.description = &quot;Slice based on whether the care team member belongs to the overall claim or to an individual claim item.&quot;\n* careTeam contains OverallClaimMember 0..14 and ItemClaimMember 0..10\n* careTeam[OverallClaimMember].extension contains CareTeamClaimScope named careTeamClaimScope 1..1 MS\n* careTeam[OverallClaimMember].extension[careTeamClaimScope].valueBoolean = true (exactly)\n* careTeam[ItemClaimMember].extension contains CareTeamClaimScope named careTeamClaimScope 1..1 MS\n* careTeam[ItemClaimMember].extension[careTeamClaimScope].valueBoolean = false (exactly)\n// Apply this last so that slices above don&#39;t treat it as an inherited constraint and suppress it from the differential\n* careTeam.extension contains CareTeamClaimScope named careTeamClaimScope 1..1 MS\n</code></pre></div>\n<p>I'll also pipe in on that other thread and try to determine what things should be redeclared in slices (and when) so that in the future you don't need to resort to these rule-ordering tricks.</p>",
        "id": 257450867,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1634165264
    },
    {
        "content": "<p>woo hoo!  success!  now I can just fix my 64 warnings from terminology and examples :)</p>",
        "id": 257553473,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1634224901
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span>.  We've improved SUSHI's handling of this in <a href=\"https://github.com/FHIR/sushi/releases/tag/v2.2.0\">SUSHI 2.2.0</a>.  Now your original FSH should work without needing to do the rule-order hack I suggested before.  All constraints from the base element are mirrored into the slice when the slice is created.</p>",
        "id": 261309047,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1636750349
    }
]