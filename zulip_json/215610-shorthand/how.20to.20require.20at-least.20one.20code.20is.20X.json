[
    {
        "content": "<p>on a CodeableConcept that is 0..*; I want to say in my profile that at-least one of them must be code X, but not disallow other codes. I thought that simple profiling assignment would do that</p>\n<blockquote>\n<ul>\n<li>subtype = mySystem#myCode</li>\n</ul>\n</blockquote>\n<p>This seems to say in my IG rendering of that profile --&gt; \"Required Pattern: At least the following\"<br>\nBUT, this seems to actually forbid any other code</p>",
        "id": 277445429,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648831127
    },
    {
        "content": "<p>I could slice, and get the behavior I want</p>\n<div class=\"codehilite\"><pre><span></span><code>* subtype ^slicing.discriminator.type = #value\n* subtype ^slicing.discriminator.path = &quot;$this&quot;\n* subtype ^slicing.rules = #open\n* subtype ^slicing.description = &quot;needs to at least be a disclosure event&quot;\n* subtype contains disclosure 1..1\n* subtype[disclosure] = http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle#disclose &quot;Disclose Record Lifecycle Event&quot;\n</code></pre></div>\n<p>But that seems so much harder</p>",
        "id": 277445519,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648831176
    },
    {
        "content": "<p>Hi @John,</p>\n<p>It seems to me that this is a bug within SUSHI, and that other codes should be allowed when an array element is constrained with an assignment rule as you did here. I've filed an issue in SUSHI (<a href=\"https://github.com/FHIR/sushi/issues/1055\">#1055</a>)to address this.</p>",
        "id": 277468123,
        "sender_full_name": "Julian Carter",
        "timestamp": 1648841681
    },
    {
        "content": "<p>I am not so sure it is sushi fault. because the IG publisher is the one rendering the profile and it is the one indicating \"at least the following\"</p>",
        "id": 277469259,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648842404
    },
    {
        "content": "<p><a href=\"/user_uploads/10155/3eQu-sELIxsTBIiL-nrbou89/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/10155/3eQu-sELIxsTBIiL-nrbou89/image.png\" title=\"image.png\"><img src=\"/user_uploads/10155/3eQu-sELIxsTBIiL-nrbou89/image.png\"></a></div>",
        "id": 277469266,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648842407
    },
    {
        "content": "<p>ah, so sushi is failing to allow it multiple codes in my examples... that the slicing did allow.</p>\n<blockquote>\n<p>Sushi couldn't be run. Complete output from running Sushi : error Cannot assign <a href=\"http://hl7.org/fhir/restful-interaction#read\">http://hl7.org/fhir/restful-interaction#read</a> \"read\" to this element; a different Coding is already assigned: {\"code\":\"disclose\",\"system\":\"http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle\",\"display\":\"Disclose Record Lifecycle Ev (00:35.0356)</p>\n</blockquote>",
        "id": 277470020,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648842865
    },
    {
        "content": "<p>So... it's actually <em>unclear</em> what <code>pattern[x]</code> means on a repeating (<code>0..*</code>) element.  The spec (<a href=\"http://hl7.org/fhir/R4/elementdefinition-definitions.html#ElementDefinition.pattern_x_\">as written</a>) is confusing, but seems to imply that what's in the <code>pattern[x]</code> only has to match on one element in the array. But several people, including Lloyd and Grahame, apparently thought it should apply to <em>all elements</em> in the array.  I brought this up a few months ago and there still seemed to be a lot of confusion (<a href=\"#narrow/stream/179177-conformance/topic/pattern.5Bx.5D.20on.200.2E.2E*.20elements/near/264222809\">this thread is a bit of a roller coaster</a>).  I'm going to revive that thread to see if a decision was made.</p>",
        "id": 277470054,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1648842893
    },
    {
        "content": "<p>I thought  I remembered discussion on this topic.. and thought I remembered no conclusion.</p>",
        "id": 277470187,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648842977
    },
    {
        "content": "<p>what is odd is that the IG publisher clearly decorates it as \"at least...\"</p>",
        "id": 277470202,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648842991
    },
    {
        "content": "<p>which is what I figured was happening. and had no examples that stressed this, until now.</p>",
        "id": 277470261,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648843023
    },
    {
        "content": "<p>Disclaimer: I am bumbling around in the dark as much as anyone on these things =)</p>\n<p>Putting it into FSH online, the differential looks okay to me, as long as you are stating that a conformant AuditEvent <em>must have exactly one</em> <code>disclosure</code> slice.</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"w\">  </span><span class=\"nt\">\"differential\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">\"element\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"AuditEvent.subtype\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">\"path\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"AuditEvent.subtype\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">\"slicing\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"nt\">\"discriminator\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">              </span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"value\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">              </span><span class=\"nt\">\"path\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"$this\"</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"nt\">\"rules\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"open\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"nt\">\"description\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"needs to at least be a disclosure event\"</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">\"min\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"AuditEvent.subtype:disclosure\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">\"path\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"AuditEvent.subtype\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">\"sliceName\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"disclosure\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">\"min\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">\"max\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">\"patternCoding\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"nt\">\"code\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"disclose\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"nt\">\"system\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"nt\">\"display\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Disclose Record Lifecycle Event\"</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>To me, that reads that:</p>\n<ul>\n<li>AuditEvent.subtype now has a min cardinality of 1.</li>\n<li>The pattern established by <code>disclosure</code> has a cardinality of <code>1..1</code></li>\n</ul>",
        "id": 277470966,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1648843392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222054\">@Gino Canessa</span> yes, it works if I slice... I just don't think i should have to slice.</p>",
        "id": 277471289,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648843577
    },
    {
        "content": "<p>I would far prefer in sushi to just say</p>\n<blockquote>\n<ul>\n<li>subtype = <a href=\"http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle#disclose\">http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle#disclose</a> \"Disclose Record Lifecycle Event\"</li>\n</ul>\n</blockquote>",
        "id": 277471362,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648843619
    },
    {
        "content": "<p>The problem with that would be that element id's would no longer be unique.  E.g., if you wanted to have a <code>disclose</code> and a <code>verify</code>, you have no way of adding both of those discriminators uniquely without slicing.</p>",
        "id": 277471551,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1648843705
    },
    {
        "content": "<p>Hmm... though I don't know if that matters.</p>",
        "id": 277471615,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1648843740
    },
    {
        "content": "<p>understood... if I need more than one... Fine, I will switch to slicing.. and have</p>",
        "id": 277471627,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648843744
    },
    {
        "content": "<p>(I am trying to work through this from the side of parsing and understanding a differential/snapshot)</p>",
        "id": 277471681,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1648843775
    },
    {
        "content": "<p>I just have many cases where I simply want to say that an element in a profile needs to at-least have X</p>",
        "id": 277471718,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648843787
    },
    {
        "content": "<p>see the other stream for less about sushi, and more about profiling -- <a href=\"#narrow/stream/179177-conformance/topic/pattern.5Bx.5D.20on.200.2E.2E*.20elements/near/264222809\">https://chat.fhir.org/#narrow/stream/179177-conformance/topic/pattern.5Bx.5D.20on.200.2E.2E*.20elements/near/264222809</a></p>",
        "id": 277471811,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648843831
    },
    {
        "content": "<p>Yes.. I am trying to figure out how to say that in an ElementDefinition without slicing though.</p>",
        "id": 277471832,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1648843841
    },
    {
        "content": "<p>pattern[x] seems should work... if patern[x] is seen as \"at least\" which is what gets rendered by the IG publisher.</p>",
        "id": 277471881,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648843873
    },
    {
        "content": "<p>My concern is that since <code>ElementDefinition.pattern[x]</code> has a max cardinality of <code>1</code>, I think a pattern like that would prohibit anything else useful from being said downstream.</p>",
        "id": 277472002,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1648843924
    },
    {
        "content": "<p>and if that is the conclusion... then it is just up to sushi enforcing that definition on pattern[x], rather than today it is enforcing \"all must\"</p>",
        "id": 277472022,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648843937
    },
    {
        "content": "<p>(and changing the cardinality there would not help, since what would that even mean?)</p>",
        "id": 277472041,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1648843949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191404\">John Moehrke</span> <a href=\"#narrow/stream/215610-shorthand/topic/how.20to.20require.20at-least.20one.20code.20is.20X/near/277469266\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/10155/3eQu-sELIxsTBIiL-nrbou89/image.png\">image.png</a></p>\n</blockquote>\n<p>this shows subtype as 0..*, with \"at least...\"</p>",
        "id": 277472116,
        "sender_full_name": "John Moehrke",
        "timestamp": 1648843991
    },
    {
        "content": "<p>Right.  It comes down to what <code>pattern[x]</code> actually <em>means</em> in the context of a <code>0..*</code> element.  Until that is decided for sure, we don't know what SUSHI should do.  As I said in the other thread, someone needs to decide which of these is right:</p>\n<ul>\n<li>A <code>pattern[x]</code> on a repeating element must match <em>every</em> element in the instance array, OR</li>\n<li>A <code>pattern[x]</code> on a repeating element must match <em>at least one</em> element in the instance array</li>\n</ul>",
        "id": 277472539,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1648844248
    },
    {
        "content": "<p>so... now that FHIR-I has clarified that pattern[x] really means \"all\"... can we have sushi support for \"at least one\"?</p>\n<p>so where I presumed the following setup an at-least one,</p>\n<blockquote>\n<p>subtype = <a href=\"http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle#disclose\">http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle#disclose</a> \"Disclose Record Lifecycle Event\"</p>\n</blockquote>\n<p>how about  keyword <code>atLeast</code> that automatically does all the slicing stuff?</p>\n<blockquote>\n<p>subtype atLeast <a href=\"http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle#disclose\">http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle#disclose</a> \"Disclose Record Lifecycle Event\"</p>\n</blockquote>\n<p>is equivalent to</p>\n<div class=\"codehilite\"><pre><span></span><code>* subtype ^slicing.discriminator.type = #value\n* subtype ^slicing.discriminator.path = &quot;$this&quot;\n* subtype ^slicing.rules = #open\n* subtype contains disclosure 1..1\n* subtype[disclosure] = http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle#disclose &quot;Disclose Record Lifecycle Event&quot;\n</code></pre></div>",
        "id": 277791173,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649105190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191404\">@John Moehrke</span> -- that's an interesting proposal.  I think my one concern w/ it would be that by obscuring the slicing, we might be introducing ways for people to shoot themselves in the foot if they then try to go and do explicit slicing as well.  But... I suppose we could issue warnings for that...  I'd be interested to hear what others in the community think.</p>",
        "id": 277791869,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1649105521
    },
    {
        "content": "<p>well, isn't that the whole role of sushi? It hides all kinds of complexity behind a more simple (and constrained) encoding</p>",
        "id": 277791981,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649105566
    },
    {
        "content": "<p>simple profile assignment when the element is ..1 is proper; but it seems completely useless because of the pattern[x] definition to be done on elements with upper that is not 1.</p>",
        "id": 277792086,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649105628
    },
    {
        "content": "<p>Yeah, I get it.  It's just that sometimes when we obscure things, it causes problems.  There is a balance between having just the right amount of magic and having too much magic.  I want to be sure that something like this is closer to the former than the latter.</p>\n<p>I know it's not as elegant, but this can be made a bit simpler w/ a RuleSet for the time being:</p>\n<div class=\"codehilite\"><pre><span></span><code>RuleSet: requireAtLeastOneMatch(path, slice, pattern)\n* {path} ^slicing.discriminator.type = #value\n* {path} ^slicing.discriminator.path = &quot;$this&quot;\n* {path} ^slicing.rules = #open\n* {path} contains {slice} 1..1\n* {path}[{slice}] = {pattern}\n\nProfile: AuditEventProfile\nParent: AuditEvent\n* insert requireAtLeastOneMatch(subtype, disclosure, http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle#disclose &quot;Disclose Record Lifecycle Event&quot;)\n</code></pre></div>\n<p><a href=\"https://fshschool.org/FSHOnline/#/share/3j59yJ5\">Example on FSH Online</a></p>",
        "id": 277793286,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1649106218
    },
    {
        "content": "<p>I guess that is just about as elegant. I have not played with that feature of sushi... too powerful to fully understand is a surely a \"razor\" defined by someone</p>",
        "id": 277794772,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649106944
    },
    {
        "content": "<p>I am more worried there are these kinds of things that I don't know I did. The simple assignment is so easy to use.</p>",
        "id": 277794899,
        "sender_full_name": "John Moehrke",
        "timestamp": 1649106990
    },
    {
        "content": "<p>Is there any guidance on slicing vs. invariants for that?  I'm not sure if the FHIRPath would work on the field itself.</p>\n<p>Invariant:  some-rule<br>\nExpression: '$this.where(coding.system=\"<a href=\"http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle\">http://terminology.hl7.org/CodeSystem/iso-21089-lifecycle</a>\" and coding.type = \"disclose\").exists()'</p>\n<p>Then in the profile</p>\n<ul>\n<li>subtype obeys some-rule</li>\n</ul>\n<p>Or if that doesn't work, put the rule on the top of the resource and use subtype instead of $this in the expression.  Is that easier or better than slicing?</p>",
        "id": 278608333,
        "sender_full_name": "Luke Duncan",
        "timestamp": 1649707221
    }
]