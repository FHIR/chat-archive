[
    {
        "content": "<p>Has the SUSHI team ever thought about pulling out the instance generation feature of SUSHI to make example files for testing?  It is a heavy work load to create files for processing in connect-a-thons of some of the more complicated IGs.   How complicated would it be?   I know you would need the IG, but is there a way to parameterize the sushi command to refer to the IG validator then generate the instances to a specified folder?</p>",
        "id": 274200502,
        "sender_full_name": "Catherine Hosage Norman",
        "timestamp": 1646434921
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"197370\">@Catherine Hosage Norman</span>.  Are you asking about the possibility of SUSHI automatically generating examples based on the profile definitions?  If so, it's something we've very briefly thought about but haven't really pursued -- as SUSHI is more focused on the use case of intentional examples authored by humans.</p>\n<p>I do recall people talking about creating scripts that would generate FSH files w/ examples (perhaps driven by spreadsheet input) and then having SUSHI process those files -- but that's a bit different since it's a separate script doing all the hard work (not SUSHI).</p>\n<p>I've also heard people talk about potentially extending Synthea to support generating examples from IGs -- although I don't know if anyone has yet done it.</p>",
        "id": 274426495,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1646674008
    },
    {
        "content": "<p>I am asking about the possibility of SUSHI generating examples based on the Instance syntax, except you do not have to generate the output for the whole IG, just fork the examples to a designated folder.  I am thinking of the instance files in a desinated folder outside of the fsh folder and the IG structure. Especially if the IG is already generated, pointing to the validator  created by the build.   The target user is someone testing the data structures of the IG without  a lot of FHIR knowelege.   I did create an Excel basic code for a prototype a couple of years ago that used xslt to output FHIR from the values in the datasheet cells.  I will have so many of these to do in the comming year,  I am looking for a faster method.  For one connectathon I hand built files in Altova.  This is not something that we can expect end useres to do.</p>",
        "id": 274437735,
        "sender_full_name": "Catherine Hosage Norman",
        "timestamp": 1646678260
    },
    {
        "content": "<p>This use case has its roots in there being no software industry that is supporting regulatory FHIR.  The health care software industry is tuned into FHIR and is extending current software.  The regulatory arena does not have a comparable software industry that will develop at risk prior to notice that the standards being required.  Since this is all brand new, it would be prudent to not only kick the tires, but test drive on an interstate.</p>",
        "id": 274439338,
        "sender_full_name": "Catherine Hosage Norman",
        "timestamp": 1646678939
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"197370\">@Catherine Hosage Norman</span>.  If I understand you correctly, I think that what you're looking for could be fairly easily built using the <a href=\"https://fshschool.org/docs/sushi/api/\">SUSHI API</a>.</p>",
        "id": 274749953,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1646858794
    },
    {
        "content": "<p>This looks promising.  I am under time constraints now to get this IG done.  Will look into this soon.</p>",
        "id": 274769556,
        "sender_full_name": "Catherine Hosage Norman",
        "timestamp": 1646869597
    },
    {
        "content": "<ol>\n<li>Ping <span class=\"user-mention\" data-user-id=\"194192\">@Richard Stanley</span></li>\n</ol>",
        "id": 274789379,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646887752
    },
    {
        "content": "<ol start=\"2\">\n<li>We should really get this standardized <span class=\"user-mention\" data-user-id=\"191320\">@Lloyd McKenzie</span></li>\n</ol>",
        "id": 274789427,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646887801
    },
    {
        "content": "<p>'This' could be 'test data expression', one that contains an expression of some type, like <code>date(random)</code> or <code>val(colX)</code> or <code>lookup(random,colX)</code>...</p>",
        "id": 274789743,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646888077
    },
    {
        "content": "<p>(meaning: a random date, the current value of ColX - eg in a lookup file, and lookup a random row in ColX)</p>",
        "id": 274789790,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646888136
    },
    {
        "content": "<p>Or anything else really</p>",
        "id": 274789795,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646888143
    },
    {
        "content": "<p>My idea is that we should have a standard extension. Then fsh can create its own syntax (e.g. with handlebars) and parse that and create the extension</p>",
        "id": 274789873,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646888220
    },
    {
        "content": "<p>This extension would be in a definition resource (usually structuredef).<br>\nAnd when requested, sushi/publisher(?) Can actually run the creation of instances from the definition</p>",
        "id": 274789963,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646888301
    },
    {
        "content": "<p>This should be aligned with synthea and with TestScript</p>",
        "id": 274790014,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1646888359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"191832\">Jose Costa Teixeira</span> <a href=\"#narrow/stream/215610-shorthand/topic/example.20generator/near/274790014\">said</a>:</p>\n<blockquote>\n<p>This should be aligned with synthea and with TestScript</p>\n</blockquote>\n<p>I'm not sure how much is inherited from Testscript, but Touchstone has some nice capabilities for generating test instances from text configuration. It would be good if this used a similar solution/syntax. (<span class=\"user-mention\" data-user-id=\"191370\">@Richard Ettema</span>)</p>",
        "id": 274855308,
        "sender_full_name": "Elliot Silver",
        "timestamp": 1646928018
    },
    {
        "content": "<p>One that might be useful for dates is date.Now() or date(\"Now\") as well as relative dates, e.g when you need the test data to be consistently relative to a certain date.   Maybe date.Now(-{offsetIn}) where {offset} could be specified with a date type identifier, e.g. date.Now(-20d) or date.Now(-36h), etc.   The use case for this is if you wanted to have certain test data generated within and outside of the time window for inclusion in some criteria (CQL look-back window?)<br>\n(I've done this for a completely different project because we needed control of the relative dates, e.g. or Observations, for our testing.)</p>",
        "id": 274963928,
        "sender_full_name": "John Silva",
        "timestamp": 1646999024
    },
    {
        "content": "<p>We have a Touchstone Testing IG that defines TestScript extensions and additional functionality where date generation can be performed. We follow the TestScript variable format; for example, \"${CURRENTDATETIME}\". Date arithmetic can be added in the form of addition arguments that defines date formatted offsets. So, if you wanted to generate a date 10 days before the current date, you would use \"${CURRENTDATE,d,-10}\".</p>\n<p>Here's the link to our IG that defines this functionality - <a href=\"https://touchstone.aegis.net/touchstone/fhir/testing/1.5.0/guidance.html#functions-for-dynamic-data-generation\">https://touchstone.aegis.net/touchstone/fhir/testing/1.5.0/guidance.html#functions-for-dynamic-data-generation</a>.</p>",
        "id": 275009337,
        "sender_full_name": "Richard Ettema",
        "timestamp": 1647021260
    },
    {
        "content": "<p>The Synthea team is looking at ways to generate data given an arbitrary IG. Data that meets our modest standards (meaning it goes beyond just random noise). Progress is slow. Having built-in hints and expressions in an IG -- whether in the profile StructureDefinitions directly, or in example resources -- would be helpful.</p>",
        "id": 275834540,
        "sender_full_name": "Jason Walonoski",
        "timestamp": 1647623652
    },
    {
        "content": "<p>IMO we'd end up with a standard extension like \"DataGenerationExpression\" to apply in StructureDefs (and other) resources, on each element.<br>\nIt should be a FHIR thing (i.e. not sushi).<br>\nI can put some thoughts together, but ideally there would be some discussion on this. But where?</p>",
        "id": 275991734,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1647816289
    }
]