[
    {
        "content": "<p>Hey all, we are trying to make a decision about the syntax of FSH going forward, and we are hoping to get some feedback.</p>\n<p>In FSH, the <code>Reference</code> keyword is used in situations where we are handling <br>\nelements of type Reference. As an example, on an Observation profile we may constrain <code>subject</code> as:</p>\n<div class=\"codehilite\"><pre><span></span><code>* subject only Reference(Patient | Group)\n</code></pre></div>\n\n\n<p>this is different from a non-reference type constraint such as:</p>\n<div class=\"codehilite\"><pre><span></span><code>* value[x] only Quantity or CodeableConcept\n</code></pre></div>\n\n\n<p>We have had requests to unite these two syntaxes, and eliminate the <code>Reference</code> keyword, so that the first example would be expressed as:</p>\n<div class=\"codehilite\"><pre><span></span><code>* subject only Patient or Group\n</code></pre></div>\n\n\n<p>The <code>Reference</code> keyword is not strictly necessary since SUSHI can infer it is a reference by looking at <code>subject</code>'s type.<br>\nWe're seeking feedback on this.  Should FHIR Shorthand:</p>\n<ol>\n<li>Require the <code>Reference</code> keyword, which makes the FSH more verbose, but also explicitly expresses the intent; or</li>\n<li>Remove the <code>Reference</code> keyword, which makes the FSH more succinct, but obscures the fact that it is a reference.</li>\n</ol>\n<p>Note that this discussion also pertains to canonical types and a potential Canonical keyword.</p>",
        "id": 199629218,
        "sender_full_name": "Nick Freiter",
        "timestamp": 1591195857
    },
    {
        "content": "<p>So using option 1:</p>\n<div class=\"codehilite\"><pre><span></span><code>Extension: ...\n* value[x] only CodeableConcept or Reference\n* valueReference only Reference(BeNlPatient | BeFr-Patient | BeNlOrganization | BeFrOrganization)\n</code></pre></div>\n\n\n<p>and 2:</p>\n<div class=\"codehilite\"><pre><span></span><code>Extension: ...\n* value[x] only CodeableConcept or Reference\n* valueReference only BeNlPatient or BeFrPatient or BeNlOrganization or BeFrOrganization\n</code></pre></div>\n\n\n<p>?</p>",
        "id": 199632779,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1591197424
    },
    {
        "content": "<p>Yes, I think that covers the basic idea well.  Good example.</p>",
        "id": 199635656,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1591198606
    },
    {
        "content": "<p>Note also that an even shorter variant would be allowed (combining the two lines into one):<br>\nOption 1:</p>\n<div class=\"codehilite\"><pre><span></span><code>Extension: ...\n* value[x] only CodeableConcept or Reference(BeNlPatient | BeFr-Patient | BeNlOrganization | BeFrOrganization)\n</code></pre></div>\n\n\n<p>Option 2:</p>\n<div class=\"codehilite\"><pre><span></span><code>Extension: ...\n* value[x] only CodeableConcept or BeNlPatient or BeFrPatient or BeNlOrganization or BeFrOrganization\n</code></pre></div>",
        "id": 199635909,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1591198730
    },
    {
        "content": "<p>Is there a problem with Bundle.entry (and potentially other cases) where it is an actual type that is specified?</p>",
        "id": 199636666,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1591199096
    },
    {
        "content": "<p>(i updated my example to have 2 sibling profiles, not parent-child - I assume that is supported but it's off topic anyway).</p>",
        "id": 199637580,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1591199508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"192166\">@Jean Duteau</span> -  I don't think so... <code>Bundle.entry.resource</code> and <code>contained</code> (both of which use inline resources instead of references) would still be done the same way as now (without a <code>Reference</code> keyword).  The only place where there could be ambiguity is if you had a choice that allowed <code>Reference</code> and inlined resources (like <code>Patient</code>, not data types) at the same time.  But I don't think that ever happens.</p>",
        "id": 199637648,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1591199529
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Option 2:\n```\nExtension: ...\n* value[x] only CodeableConcept or BePatient or BeOrganization\n```\n</code></pre></div>\n\n\n<p>this makes me feel that option 1 is clearer. (And I would prefer \"or\" instead of pipes)?</p>",
        "id": 199637738,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1591199592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> -- I updated my replies to match your updated example.  And yes, option 1 is clearer at the expense of being more verbose (and requiring the author to explicitly state things that can be implied).  That's the tradeoff!  Within option 1, we could have the option to switch <code>|</code> to <code>or</code>... we have a ballot comment on that.</p>",
        "id": 199638204,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1591199816
    },
    {
        "content": "<p>Not for being verbose but for being explicit, I'd vote for option 1</p>",
        "id": 199638395,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1591199896
    },
    {
        "content": "<p>+1 for Option #1</p>",
        "id": 199642550,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1591201751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191362\">@Richard Kavanagh</span> <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> Note that Option #1 mixes \"or\" and \"|\", both meaning \"or\".  Is that confusing? (We got multiple votes asking us to choose one or the other)</p>",
        "id": 199649459,
        "sender_full_name": "Mark Kramer",
        "timestamp": 1591204955
    },
    {
        "content": "<p>I think I agree with Option #1 - it is more explicit that these are references than types.  Although I can tell that BePatient is a profile and probably a profile on Patient, if the name of the profile wasn't that explicit, it would be hard to know whether this is a profile on a datatype or a profile on a Object, i.e. a Reference.</p>",
        "id": 199651291,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1591205865
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> already expressed a preference for switching <code>|</code> to <code>or</code>:</p>\n<blockquote>\n<p>And I would prefer \"or\" instead of pipes</p>\n</blockquote>",
        "id": 199654895,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1591207540
    },
    {
        "content": "<p>It's the brackets in Option #1 that swings it for me. The use of \"or\" and \"|\" does not bother me, though I can understand the desirevfor consistency</p>",
        "id": 199665527,
        "sender_full_name": "Richard Kavanagh",
        "timestamp": 1591212720
    },
    {
        "content": "<p>I can live with either, but would honestly prefer option 2.  My rational is that Reference is noise, and SUSHI fails to adequately report the error when you say * field only Xyz instead of * field only Reference(Xyz).  So, if we go with option 1, please clean up the error reporting when somebody forgets to use Reference() appropriately.  It will at least make it easier for someone to fix the problem.</p>",
        "id": 199982621,
        "sender_full_name": "Keith Boone",
        "timestamp": 1591460696
    },
    {
        "content": "<p>option 2</p>",
        "id": 199988152,
        "sender_full_name": "Eric Haas",
        "timestamp": 1591469471
    },
    {
        "content": "<p>For my (one? relatively late to the party on this :-) cent,  I'd vote option 1.</p>\n<ul>\n<li>I think it's important to be explicit in the actual data type being used</li>\n<li>I worry about overloading the resource types (e.g., sometimes Patient means Patient, sometimes it means Reference(Patient))</li>\n<li>Right now you can imply it's a reference, but there may be additional possibilities in the future</li>\n</ul>",
        "id": 199988995,
        "sender_full_name": "Gino Canessa",
        "timestamp": 1591470776
    }
]