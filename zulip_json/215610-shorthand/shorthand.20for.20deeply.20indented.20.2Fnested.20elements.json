[
    {
        "content": "<p>Not sure this is covered elsewhere but the closest I've seen was Aliases:<br>\nDoes it make sense to have some shorthand syntax for nested elements? At some point, especially when creating examples, it'd be shorter (and visually nicer I think) to have some way to express indented elements.</p>",
        "id": 203290032,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1594225764
    },
    {
        "content": "<p>Funny you should ask.  We were just discussing this today... It's one of the things we want to look at for SUSHI STU2.  We're open to suggestions.  So far, we've thought of:</p>\n<ul>\n<li>YAML-like syntax (but making FSH whitespace sensitive is a big change)</li>\n<li>Block syntax (e.g., using <code>{</code> <code>}</code> or other delimiters to encapsulate child paths</li>\n<li>Declarative contexts (e.g., <code>CONTEXT a.b.c</code> would prefix following rules with <code>a.b.c.</code></li>\n<li>Alias (e.g., <code>* Alias: abc = a.b.c =</code> or <code>* a.b.c alias abc</code> then <code>* abc.d</code>.</li>\n</ul>\n<p>We're open to suggestions!</p>",
        "id": 203314292,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1594238019
    },
    {
        "content": "<p>I was only thinking of 2 ways: </p>\n<ol>\n<li>yaml-like </li>\n<li>something like * and <code>**</code> in markdown list item indenting: the second star means \"this next statement starts on the first indentation of the previous statement\" - and <code>***</code> or <code>****</code> meaning second or third indentations. this is somewhat limited...</li>\n<li>(alias +) a special keyword - I'm recalling <code>with</code> statement in Pascal: <br>\ncombining these ideas, instead of </li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>* a.b.c.d = 1\n* a.b.c.e = &quot;string&quot;\n* a.b.c.f = #code\n</code></pre></div>\n\n\n<p>we'd have</p>\n<div class=\"codehilite\"><pre><span></span><code>* with a.b.c:\n** d = 1\n** e = &quot;string&quot;\n** f = #code\n</code></pre></div>\n\n\n<p>or </p>\n<div class=\"codehilite\"><pre><span></span><code>* a.b.c as abc\n* with abc:\n** d = 1\n** e = &quot;string&quot;\n** f = #code\n</code></pre></div>",
        "id": 203325057,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1594243289
    },
    {
        "content": "<p>(sorry for the incidental odd syntax for aliasing, I don't know where it comes from, but that is not the focal point)</p>",
        "id": 203325297,
        "sender_full_name": "Jose Costa Teixeira",
        "timestamp": 1594243427
    },
    {
        "content": "<p>I have to admit that \"Go FSH\" fills me with joy - whatever it is the app does :)</p>",
        "id": 203331081,
        "sender_full_name": "Lloyd McKenzie",
        "timestamp": 1594246940
    },
    {
        "content": "<p>I like this one, <span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> :</p>\n<div class=\"codehilite\"><pre><span></span><code>* with a.b.c:\n** d = 1\n** e = &quot;string&quot;\n** f = #code\n</code></pre></div>\n\n\n<p>definitely a contender!</p>",
        "id": 203331180,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1594247034
    }
]