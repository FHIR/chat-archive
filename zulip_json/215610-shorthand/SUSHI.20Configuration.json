[
    {
        "content": "<p>SUSHI currently uses the following files for configuration: <code>package.json</code>, <code>ig-data/ig.ini</code>, and <code>ig-data/package-list.json</code>.  Despite using three different config files, SUSHI still provides no way for the user to supply custom configuration that would go into the <code>ImplementationGuide</code> instance representing the IG.  Rather than add a <em>fourth</em> place to put configuration, we propose replacing these <em>all</em> with a single config file.</p>\n<p>The idea is that this config would be <em>loosely</em> based on the <code>ImplementationGuide</code> resource, but also provide the necessary aspects of the other files (<code>ig.ini</code>, <code>package-list.json</code>) <em>and</em> other concerns like defining the menu.  In other words, it's a one-stop-shop for all config SUSHI needs.  For ease of use, this file would be written using YAML, would streamline some of the more verbose syntaxes of <code>ImplementationGuide</code>, and would allow for \"sparse\" sections where SUSHI can insert generated content when building the IG source.</p>\n<p>I've pasted a proposed annotated version of this file below.  Note that a minimal config would likely contain about 10 key properties, but we show more in the file below to demonstrate the <em>possible</em> entries.  Also note that we plan to implement a command in sushi to initialize a project and generate a configuration file with default values that authors would then edit.  We welcome any and all feedback!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># This IG YML file is inspired by the ImplementationGuide resource</span>\n<span class=\"c1\"># and also draws from package.json, package-list.json, and ig.ini.</span>\n<span class=\"c1\"># That said, it is structured for ease-of-use, so it is not strictly</span>\n<span class=\"c1\"># conformant to any of those existing configuration formats.</span>\n\n<span class=\"c1\"># SUSHI will use id as both id and packageId in the IG unless a</span>\n<span class=\"c1\"># specific packageId is also provided in this file.</span>\n<span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">fhir.us.mcode</span>\n<span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://hl7.org/fhir/us/mcode</span>\n<span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">mCODE IG</span>\n<span class=\"nt\">title</span><span class=\"p\">:</span> <span class=\"s\">&quot;HL7</span><span class=\"nv\"> </span><span class=\"s\">FHIR</span><span class=\"nv\"> </span><span class=\"s\">Implementation</span><span class=\"nv\"> </span><span class=\"s\">Guide:</span><span class=\"nv\"> </span><span class=\"s\">minimal</span><span class=\"nv\"> </span><span class=\"s\">Common</span><span class=\"nv\"> </span><span class=\"s\">Oncology</span><span class=\"nv\"> </span><span class=\"s\">Data</span><span class=\"nv\"> </span><span class=\"s\">Elements</span><span class=\"nv\"> </span><span class=\"s\">(mCODE)</span><span class=\"nv\"> </span><span class=\"s\">Release</span><span class=\"nv\"> </span><span class=\"s\">1</span><span class=\"nv\"> </span><span class=\"s\">-</span><span class=\"nv\"> </span><span class=\"s\">US</span><span class=\"nv\"> </span><span class=\"s\">Realm</span><span class=\"nv\"> </span><span class=\"s\">|</span><span class=\"nv\"> </span><span class=\"s\">STU1&quot;</span>\n<span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">mCODEâ„¢ (short for Minimal Common Oncology Data Elements) is an initiative intended to assemble a core set of structured data elements for oncology electronic health records.</span>\n<span class=\"nt\">status</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">active</span>\n<span class=\"nt\">license</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">CC0-1.0</span>\n<span class=\"nt\">date</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2020-02-26</span>\n<span class=\"nt\">version</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1.0.0</span>\n\n<span class=\"c1\"># Although fhirVersions is 0..* in the ImplementationGuide resource</span>\n<span class=\"c1\"># it can be a single item OR and array here (but so far SUSHI only</span>\n<span class=\"c1\"># support 4.0.1 anyway).</span>\n<span class=\"nt\">fhirVersion</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">4.0.1</span>\n\n<span class=\"c1\"># The template property will be copied into the ig.ini file.</span>\n<span class=\"c1\"># If the value of template is &quot;none&quot;, then only the resources will be</span>\n<span class=\"c1\"># generated (with no supporting ImplementationGuide sources).</span>\n<span class=\"nt\">template</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">hl7.fhir.template#0.0.5</span>\n\n<span class=\"c1\"># The following two lines correspond to items that used to be in</span>\n<span class=\"c1\"># ig.ini but were recently moved to IG.definition.parameter. For</span>\n<span class=\"c1\"># consistency within this file, the names are represented using</span>\n<span class=\"c1\"># camelcase, but if authors use the formal parameter names, SUSHI</span>\n<span class=\"c1\"># will recognize them as well. In either case, they&#39;ll be copied</span>\n<span class=\"c1\"># to the IG JSON using the formal names.</span>\n<span class=\"nt\">copyrightYear</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2019+</span>\n<span class=\"nt\">releaseLabel</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">STU1</span>\n\n<span class=\"c1\"># The publisher can be a single item or a list, each with a name and</span>\n<span class=\"c1\"># optional url and/or email. The first publisher&#39;s name will be used</span>\n<span class=\"c1\"># as IG.publisher.  The contact details and/or additional publishers</span>\n<span class=\"c1\"># will be translated into IG.contact values.</span>\n<span class=\"nt\">publisher</span><span class=\"p\">:</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">HL7 International Clinical Interoperability Council</span>\n  <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://www.hl7.org/Special/committees/cic</span>\n  <span class=\"nt\">email</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ciclist@lists.HL7.org</span>\n\n<span class=\"c1\"># Those who need more control or want to add additional details</span>\n<span class=\"c1\"># to the contact values can use contact directly and follow the</span>\n<span class=\"c1\"># format outlined in the ImplementationGuide resource and</span>\n<span class=\"c1\"># ContactDetail.  E.g.,</span>\n<span class=\"c1\">#   contact:</span>\n<span class=\"c1\">#   - name: Bob Smith</span>\n<span class=\"c1\">#     - telecom:</span>\n<span class=\"c1\">#         system: email</span>\n<span class=\"c1\">#         value: bobsmith@example.org</span>\n<span class=\"c1\">#         use: work</span>\n\n<span class=\"c1\"># The jurisdiction can be a single item or a list. The FHIR Shorthand</span>\n<span class=\"c1\"># code syntax can be used here.</span>\n<span class=\"nt\">jurisdiction</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">urn:iso:std:iso:3166#US &quot;United States of America&quot;</span>\n\n<span class=\"c1\"># The dependencies property corresponds to IG.dependsOn. They key is the</span>\n<span class=\"c1\"># package id and the value is the version (or dev/current).</span>\n<span class=\"nt\">dependencies</span><span class=\"p\">:</span>\n  <span class=\"nt\">hl7.fhir.us.core</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">3.1.0</span>\n\n<span class=\"c1\"># The global property corresponds to the IG.global property, but it</span>\n<span class=\"c1\"># uses the type as the YAML key and the profile as its value. Since</span>\n<span class=\"c1\"># FHIR does not explicitly disallow more than one profile per type,</span>\n<span class=\"c1\"># neither do we; the value can be a single profile URL or an array</span>\n<span class=\"c1\"># of profile URLs.</span>\n<span class=\"nt\">global</span><span class=\"p\">:</span>\n  <span class=\"nt\">Patient</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://example.org/fhir/StructureDefinition/my-patient-profile</span>\n  <span class=\"nt\">Encounter</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://example.org/fhir/StructureDefinition/my-encounter-profile</span>\n\n<span class=\"c1\"># The resources property corresponds to IG.definition.resource.</span>\n<span class=\"c1\"># SUSHI can auto-generate all of the resource entries based on</span>\n<span class=\"c1\"># the FSH definitions and/or information in any user-provided</span>\n<span class=\"c1\"># JSON resource files. If the generated entries are not</span>\n<span class=\"c1\"># sufficient or complete, however, the author can add entries</span>\n<span class=\"c1\"># here. If the reference matches a generated entry, it will</span>\n<span class=\"c1\"># replace the generated entry. If it doesn&#39;t match any generated</span>\n<span class=\"c1\"># entries, it will be added to the generated entries. The format</span>\n<span class=\"c1\"># follows IG.definition.resource with the following differences:</span>\n<span class=\"c1\">#   * use IG.definition.resource.reference.reference as the YAML key</span>\n<span class=\"c1\">#   * specify &quot;omit&quot; to omit a FSH-generated resource from the</span>\n<span class=\"c1\">#     resource list.</span>\n<span class=\"c1\">#   * groupingId can be used, but top-level groups syntax may be a</span>\n<span class=\"c1\">#     better option (see below).</span>\n<span class=\"c1\"># The following are simple examples to demonstrate what this might</span>\n<span class=\"c1\"># look like:</span>\n<span class=\"nt\">resources</span><span class=\"p\">:</span>\n  <span class=\"nt\">Patient/my-example-patient</span><span class=\"p\">:</span>\n    <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">My Example Patient</span>\n    <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">An example Patient</span>\n    <span class=\"nt\">exampleBoolean</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n  <span class=\"nt\">Patient/bad-example</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">omit</span>\n\n<span class=\"c1\"># Groups can control certain aspects of the IG generation.  The IG</span>\n<span class=\"c1\"># documentation recommends that authors use the default groups that</span>\n<span class=\"c1\"># are provided by the templating framework, but if authors want to</span>\n<span class=\"c1\"># use their own instead, they can use the mechanism below.  This will</span>\n<span class=\"c1\"># create IG.definition.grouping entries and associate the individual</span>\n<span class=\"c1\"># resource entries with the corresponding groupIds.</span>\n<span class=\"nt\">groups</span><span class=\"p\">:</span>\n  <span class=\"nt\">GroupA</span><span class=\"p\">:</span>\n    <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">The Alpha Group</span>\n    <span class=\"nt\">resources</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">StructureDefinition/animal-patient</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">StructureDefinition/arm-procedure</span>\n  <span class=\"nt\">GroupB</span><span class=\"p\">:</span>\n    <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">The Beta Group</span>\n    <span class=\"nt\">resources</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">StructureDefinition/bark-control</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">StructureDefinition/bee-sting</span>\n\n<span class=\"c1\"># The pages property corresponds to IG.definition.page. SUSHI can</span>\n<span class=\"c1\"># auto-generate the page list, but if the author includes pages in</span>\n<span class=\"c1\"># this file, it is assumed that the author will fully manage the</span>\n<span class=\"c1\"># pages section and SUSHI will not generate any page entries.</span>\n<span class=\"c1\"># The page file name is used as the key. If title is not provided,</span>\n<span class=\"c1\"># then the title will be generated from the file name.  If a</span>\n<span class=\"c1\"># generation value is not provided, it will be inferred from the</span>\n<span class=\"c1\"># file name extension.  Any subproperties that are valid filenames</span>\n<span class=\"c1\"># with supported extensions (e.g., .md/.xml) will be treated as</span>\n<span class=\"c1\"># sub-pages.</span>\n<span class=\"nt\">pages</span><span class=\"p\">:</span>\n  <span class=\"nt\">index.md</span><span class=\"p\">:</span>\n    <span class=\"nt\">title</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">mCODE Home</span>\n  <span class=\"nt\">implementation.xml</span><span class=\"p\">:</span>\n  <span class=\"nt\">examples.xml</span><span class=\"p\">:</span>\n    <span class=\"nt\">title</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Examples Overview</span>\n    <span class=\"nt\">simpleExamples.xml</span><span class=\"p\">:</span>\n    <span class=\"nt\">complexExamples.xml</span><span class=\"p\">:</span>\n\n<span class=\"c1\"># The menu property will be used to generate the input/menu.xml file.</span>\n<span class=\"c1\"># The menu is represented as a simple structure where the YAML key</span>\n<span class=\"c1\"># is the menu item name and the value is the URL. The IG publisher</span>\n<span class=\"c1\"># currently only supports one level deep on sub-menus.</span>\n<span class=\"c1\"># TO CONSIDER: If no menu data is provided, can we generate the menu</span>\n<span class=\"c1\"># based on the pages order or should we just generate a very standard</span>\n<span class=\"c1\"># menu (since there may be too many pages to fit in a menu).</span>\n<span class=\"nt\">menu</span><span class=\"p\">:</span>\n  <span class=\"nt\">Home</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">index.html</span>\n  <span class=\"nt\">Artifacts</span><span class=\"p\">:</span>\n    <span class=\"nt\">Profiles</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">artifacts.html#2</span>\n    <span class=\"nt\">Extensions</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">artifacts.html#3</span>\n    <span class=\"nt\">Value Sets</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">artifacts.html#4</span>\n  <span class=\"nt\">Downloads</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">downloads.html</span>\n  <span class=\"nt\">History</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://hl7.org/fhir/us/mcode/history.html</span>\n\n<span class=\"c1\"># The parameters property represents IG.definition.parameter. Rather</span>\n<span class=\"c1\"># than a list of code/value pairs (as in the ImplementationGuide</span>\n<span class=\"c1\"># resource, the code is the YAML key. If a parameter allows repeating</span>\n<span class=\"c1\"># values, the value in the YAML should be a sequence/array. For a</span>\n<span class=\"c1\"># partial list of allowed parameters see:</span>\n<span class=\"c1\"># https://confluence.hl7.org/display/FHIR/Implementation+Guide+Parameters</span>\n<span class=\"nt\">parameters</span><span class=\"p\">:</span>\n  <span class=\"nt\">excludettl</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n  <span class=\"nt\">validation</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">allow-any-extensions</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">no-broken-links</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"c1\"># The history property corresponds to package-list.json. SUSHI will</span>\n<span class=\"c1\"># use the existing top-level properties in its config to populate the</span>\n<span class=\"c1\"># top-level package-list.json properties: packageId, canonical, title,</span>\n<span class=\"c1\"># and introduction. Authors that wish to provide different values can</span>\n<span class=\"c1\"># supply them as properties under history. All other properties under</span>\n<span class=\"c1\"># history are assumed to be versions.</span>\n<span class=\"nt\">history</span><span class=\"p\">:</span>\n  <span class=\"c1\"># The current version is special. If the author provides only a</span>\n  <span class=\"c1\"># single value, it is assumed to be the URL path to the current</span>\n  <span class=\"c1\"># build. The following default values will then be used:</span>\n  <span class=\"c1\">#   desc: Continuous Integration Build (latest in version control)</span>\n  <span class=\"c1\">#   status: ci-build</span>\n  <span class=\"c1\">#   current: true</span>\n  <span class=\"nt\">current</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://build.fhir.org/ig/HL7/fhir-mCODE-ig/</span>\n  <span class=\"c1\"># All other versions need each of their values fully specified.</span>\n  <span class=\"c1\"># See: https://confluence.hl7.org/pages/viewpage.action?pageId=66928420#FHIRIGPackageListdoco-PublicationObject</span>\n  <span class=\"nt\">1.0.0</span><span class=\"p\">:</span>\n    <span class=\"nt\">fhirversion</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">4.0.1</span>\n    <span class=\"nt\">date</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2020-03-06</span>\n    <span class=\"nt\">desc</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">STU 1 Release</span>\n    <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://hl7.org/fhir/us/mcode/STU1/</span>\n    <span class=\"nt\">status</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">trial-use</span>\n    <span class=\"nt\">sequence</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">STU 1</span>\n    <span class=\"nt\">current</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n  <span class=\"nt\">0.9.1</span><span class=\"p\">:</span>\n    <span class=\"nt\">fhirversion</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">4.0.0</span>\n    <span class=\"nt\">date</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2019-06-10</span>\n    <span class=\"nt\">desc</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Initial STU ballot (Sep 2019 Ballot)</span>\n    <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://hl7.org/fhir/us/mcode/2019Sep/</span>\n    <span class=\"nt\">status</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ballot</span>\n    <span class=\"nt\">sequence</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">STU 1</span>\n\n<span class=\"c1\"># The ImplementationGuide resource defines several other properties</span>\n<span class=\"c1\"># not represented above. These properties can be used as-is and</span>\n<span class=\"c1\"># should follow the format defined in ImplementationGuide:</span>\n<span class=\"c1\"># * experimental</span>\n<span class=\"c1\"># * useContext</span>\n<span class=\"c1\"># * copyright</span>\n<span class=\"c1\"># * definition.template (but use a top-level &quot;templates&quot; property)</span>\n</pre></div>",
        "id": 189348334,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1582922173
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://media.tenor.com/images/8d6c25e651dfe4e2a8ba07ef7dfe71c8/tenor.gif\" target=\"_blank\" title=\"https://media.tenor.com/images/8d6c25e651dfe4e2a8ba07ef7dfe71c8/tenor.gif\"><img src=\"https://media.tenor.com/images/8d6c25e651dfe4e2a8ba07ef7dfe71c8/tenor.gif\"></a></div>",
        "id": 189351550,
        "sender_full_name": "Jens Villadsen",
        "timestamp": 1582924388
    },
    {
        "content": "<p>+1 on use of YAML</p>",
        "id": 189352476,
        "sender_full_name": "Keith Boone",
        "timestamp": 1582924964
    },
    {
        "content": "<p>I do like the idea of one config file to rule them all...</p>",
        "id": 189399783,
        "sender_full_name": "David Hay",
        "timestamp": 1583000521
    },
    {
        "content": "<p>I also use the IG resource for my own stuff so would be nice use a similar format to define them. In particular, what about extensions? for example:</p>\n<div class=\"codehilite\"><pre><span></span>resources:\n  Patient/my-example-patient:\n    name: My Example Patient\n    description: An example Patient\n    exampleBoolean: true\n    extension:\n      http://clinfhir.com/StructureDefinition/igEntryType: logical\n\n  Patient/my-nextexample-patient:\n    name: My Example Patient\n    description: An example Patient\n    exampleBoolean: true\n</pre></div>\n\n\n<p>Would work for strings (which is all I use) - not sure about other datatypes</p>",
        "id": 189402381,
        "sender_full_name": "David Hay",
        "timestamp": 1583004752
    },
    {
        "content": "<p>BTW - why is 'title' (in the example) quoted?</p>",
        "id": 189407009,
        "sender_full_name": "David Hay",
        "timestamp": 1583013243
    },
    {
        "content": "<p>The title is quoted because it contains a <code>:</code> character followed by a space, so it has to be escaped by quoting the whole string.</p>",
        "id": 189442930,
        "sender_full_name": "Mint Thompson",
        "timestamp": 1583087659
    },
    {
        "content": "<p>but so is description...</p>",
        "id": 189443611,
        "sender_full_name": "David Hay",
        "timestamp": 1583088854
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191321\">@David Hay</span> -- as <span class=\"user-mention\" data-user-id=\"242620\">@Mint Thompson</span> noted, the reason title is quoted is due to how YAML is parsed.  Since the title contains a <code>:</code>, we need to quote it, else YAML can't parse it correctly.  I'm not sure what you mean by, \"but so is description\" -- but I'll also note that YAML <em>does</em> understand URLs -- so when a URL contains <code>:</code> (as they all do), YAML <em>doesn't</em> require the quotes for that.</p>",
        "id": 189447535,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1583096462
    },
    {
        "content": "<blockquote>\n<p>I also use the IG resource for my own stuff so would be nice use a similar format to define them. In particular, what about extensions?</p>\n</blockquote>\n<p>Good point, <span class=\"user-mention\" data-user-id=\"191321\">@David Hay</span>.  I hadn't thought of that, but I don't see why we couldn't (or wouldn't) support extensions.  I think we'd treat the section under the resource like the <code>IG.definition.resource</code> element (so since extension is allowed there, we'd allow it as well).</p>\n<p>That brings up a question though.  I said in the comment for that section of the config that if you put in a resource that matches a generated resource, your entry would override the generated entry -- but maybe in some cases, we'd want it merged?  E.g., if the <code>name</code>, <code>description</code>, and <code>exampleBoolean</code>, are generated correctly, maybe you really should only have to say this:</p>\n<div class=\"codehilite\"><pre><span></span>resources:\n  Patient/my-example-patient:\n    extension:\n      http://clinfhir.com/StructureDefinition/igEntryType: logical\n</pre></div>\n\n\n<p>and since you don't supply <code>name</code>, <code>description</code> or <code>example[x]</code>, we keep the generated values for those too.</p>",
        "id": 189447814,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1583096898
    },
    {
        "content": "<p>Ah silly me - didn't read <span class=\"user-mention\" data-user-id=\"242620\">@Mint Thompson</span> answer correctly...</p>",
        "id": 189448361,
        "sender_full_name": "David Hay",
        "timestamp": 1583097831
    },
    {
        "content": "<p>So <code>name</code>  and <code>description</code> come from the fsh file for the <code>my-example-patient</code> instance . But where does <code>exampleBoolean</code> come from? It's not in the example instance is it? Could you infer exampleCanonical from the <code>instanceOf</code> element?</p>",
        "id": 189448682,
        "sender_full_name": "David Hay",
        "timestamp": 1583098378
    },
    {
        "content": "<p>Currently, SUSHI treats all instances as examples, but a future version (soon) will allow the author to make the distinction between example instances and conformance instances.  If an instance is an example, then it will use:</p>\n<ul>\n<li><code>exampleCanonical</code> if it is an example of a profile in the IG, or</li>\n<li><code>exampleBoolean</code> otherwise. </li>\n</ul>\n<p>Through trial and error, we've determined that's what the IG Publisher expects.  If you set <code>exampleCanonical</code> to a canonical URL for a core FHIR resource or a profile in a different IG, the publisher barks at you.</p>",
        "id": 189450434,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1583101312
    },
    {
        "content": "<blockquote>\n<p>If you set exampleCanonical to a canonical URL for a core FHIR resource or a profile in a different IG, the publisher barks at you.</p>\n</blockquote>\n<p>That's an oversight. It should be possible to provide examples for profiles defined in other IGs</p>",
        "id": 189451316,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1583102826
    },
    {
        "content": "<p>I assumed it was mainly because as best I can tell, <code>exampleCanonical</code> mainly just ensures that the example shows up on the profile page's examples tab -- and that wouldn't really be relevant for profiles outside the IG.  Still, I would prefer if it weren't treated as an error.  (Although, to be honest, I can't remember 100% for sure that it happened with profiles in other IGs, but it definitely happened for FHIR core resources).</p>",
        "id": 189457398,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1583113845
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> , is there a way we can run this config file in the current version of sushi ? Executing <code>sushi .</code> returns No package.json in FSH definition folder. <br>\nThis is for me to play with a few resources and structure definitions and see how the IG looks. Thanks</p>",
        "id": 189490684,
        "sender_full_name": "Amogh Thali",
        "timestamp": 1583155913
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"261178\">@Amogh Thali</span>.  The YAML config above is currently being proposed; we haven't implemented it yet.  The current version of SUSHI still works using <code>package.json</code>.  You have to create your own <code>package.json</code>, but here is an example to get you started:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n <span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;myproject&quot;</span><span class=\"p\">,</span>\n <span class=\"nt\">&quot;version&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;0.1.0&quot;</span><span class=\"p\">,</span>\n <span class=\"nt\">&quot;canonical&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;http://example.org/fhir/myproject&quot;</span><span class=\"p\">,</span>\n <span class=\"nt\">&quot;url&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;http://example.org/fhir/myproject&quot;</span><span class=\"p\">,</span>\n <span class=\"nt\">&quot;title&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;My Project&quot;</span><span class=\"p\">,</span>\n <span class=\"nt\">&quot;description&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;A description of my project&quot;</span><span class=\"p\">,</span>\n <span class=\"nt\">&quot;dependencies&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;hl7.fhir.r4.core&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;4.0.1&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;hl7.fhir.us.core&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;3.1.0&quot;</span>\n <span class=\"p\">},</span>\n <span class=\"nt\">&quot;author&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Cameron Cod&quot;</span><span class=\"p\">,</span>\n <span class=\"nt\">&quot;maintainers&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n   <span class=\"p\">{</span>\n     <span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Cod Fans&quot;</span><span class=\"p\">,</span>\n     <span class=\"nt\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://example.org/codfans&quot;</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">],</span>\n <span class=\"nt\">&quot;license&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;CC0-1.0&quot;</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 189497174,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1583160473
    }
]