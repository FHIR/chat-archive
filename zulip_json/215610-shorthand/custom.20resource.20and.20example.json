[
    {
        "content": "<p>I am struggling a bit in trying to get sushi to process a custom resource and an example.   I run into two issues:<br>\n1) the custom resource has to be hardcoded into the IG.xml file<br>\n2) when trying to create an example of the custom resource, sushi doesn't seem to know about the custom resource</p>",
        "id": 232749900,
        "sender_full_name": "Carl Leitner",
        "timestamp": 1617281124
    },
    {
        "content": "<p>Issue w/ 2 may very well be my issue, but not sure what it should be.  Does anyone have a complete example of a similar scenario?</p>",
        "id": 232750054,
        "sender_full_name": "Carl Leitner",
        "timestamp": 1617281190
    },
    {
        "content": "<p>FYI here is what I am looking at:</p>\n<ul>\n<li>Custom resource is the \"SVC-QR-UVCI\" which is here:  <a href=\"https://github.com/who-int/svc/blob/rc2/input/fsh/svc-qrcodes.fsh\">https://github.com/who-int/svc/blob/rc2/input/fsh/svc-qrcodes.fsh</a></li>\n<li>Without hardcoding the resource, output is <a href=\"https://who-int.github.io/svc/refs/heads/rc2/artifacts.html\">https://who-int.github.io/svc/refs/heads/rc2/artifacts.html</a>  see the row with StructureDefinition/SVC-QR-UVCI  </li>\n<li>Example I am trying to instantiate is here <a href=\"https://github.com/who-int/svc/blob/rc2/input/fsh/svc-qrcode-example.fsh\">https://github.com/who-int/svc/blob/rc2/input/fsh/svc-qrcode-example.fsh</a></li>\n</ul>\n<p>Sushi error is:  error InstanceOf SVC-QR-UVCI not found for svc-qr-uvci-example</p>",
        "id": 232751157,
        "sender_full_name": "Carl Leitner",
        "timestamp": 1617281727
    },
    {
        "content": "<p>any help would be appreciated!</p>",
        "id": 232751192,
        "sender_full_name": "Carl Leitner",
        "timestamp": 1617281743
    },
    {
        "content": "<p>I'm no sushi expert, but I ran into similar problems. As far as I understand, the problem is that StructureDefinitions created with <code>Instance: </code> are not put into the appropriate internal data-structures that hold all the other StructureDefinitions. </p>\n<p>One thing you can do (it's undocumented!), is to run sushi once, then take the generated <code>StructureDefinition-SVC-QR-UVCI-json</code> and place it into the folder<code>input/resources</code>.  Then, on the next run, it will be available, because sushi scans this folder and parses all contents into the appropriate data-structures. This is the method that I am currently using.</p>\n<p>Another method could be to place the generated StructureDefinition into your local FHIR-cache (look for a folder called <code>.fhir</code> in your user-directory/home-directory). You could either place it into the 4.0.1 package (super-hacky!), or you create a new, local package and metion this local package as a dependency in the sushi-config.yaml.</p>",
        "id": 232759399,
        "sender_full_name": "Martin Höcker",
        "timestamp": 1617285110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217988\">@Martin Höcker</span> got it pretty well right.  Not bad for someone who claims to not be a SUSHI expert! ;-)</p>\n<p>Ideally, SUSHI <em>should</em> support creating an instance of a StructureDefinition that is defined using <code>Instance</code>.  The fact that we don't is at-best a limitation (and at-worst a bug). BUT... even if SUSHI could find it, SUSHI would still not be able to use it because it does not have a <code>snapshot</code>.  SUSHI requires a <code>snapshot</code> in order to properly process an SD as the basis for an instance (or as a parent of a profile).  So if we made it so SUSHI could find that SD instance, you would still need to update the instance to also include the snapshot elements (which is tedious, I know).</p>\n<p>Martin's idea to write the FSH and then generate the SD and copy the SD into <code>input/resources</code> is probably your best bet for now.  But there are a few things to note: (a) Since SUSHI needs the snapshot, you'd actually want to use the SD that is produced by the IG Publisher (since it will generate the snapshot for you).  (b) You'll want to comment out the FSH that originally produced the instance so that we don't have duplicate definitions to contend with.</p>\n<p>The good news is that support for logical models and custom resources is in the works (thanks to <span class=\"user-mention\" data-user-id=\"211704\">@Joe Paquette</span> at athenaHealth).  We hope to have native support for building custom resources soon!  Once we have that, you won't need to use <code>Instance</code> and all this stuff should work much better.</p>",
        "id": 232769844,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617288753
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>  and <span class=\"user-mention\" data-user-id=\"217988\">@Martin Höcker</span>  for the suggestions.  the pre-pre-processing with SUSHI was what I was expecting (assuming there was no magic bullet/errors on my side).  I guess for b) I could also have a second non-normative directory like inputs/pre-fsh or so.</p>",
        "id": 232772470,
        "sender_full_name": "Carl Leitner",
        "timestamp": 1617289663
    },
    {
        "content": "<p>Ahh, yes, I forgot about the snapshot! I don't yet have IG in my toolchain, so I use <code>sushi -s</code> to generate the snapshot.</p>",
        "id": 232774699,
        "sender_full_name": "Martin Höcker",
        "timestamp": 1617290254
    },
    {
        "content": "<p>The <code>-s</code> flag does a decent job of producing the snapshot for profiles/extensions created using the <code>Profile:</code>/<code>Extension:</code> syntax, but it will <em>not</em> produce a valid snapshot for <code>StructureDefinition</code>s created using the <code>Instance:</code> syntax.</p>",
        "id": 232776840,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617290996
    },
    {
        "content": "<p><span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span> That's good to know! And also good proof that I'm not a sushi expert! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>Come to think of it, generating the custom resources happened a long time ago and some massaging was necessary afterwards (for other reasons). It could be that we generated the snapshot in another way. </p>\n<p>Looking forward to the full support of custom resources!</p>",
        "id": 232779822,
        "sender_full_name": "Martin Höcker",
        "timestamp": 1617292110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>  should I take your last comment to mean that for the time being it's probably better just to not use fsh for the customer resource and really just do it by hand? Or are you saying that we should be using a something different than the instance syntax? ( Flagging for <span class=\"user-mention\" data-user-id=\"193299\">@Luke Duncan</span> )</p>",
        "id": 232790749,
        "sender_full_name": "Carl Leitner",
        "timestamp": 1617296539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191604\">@Carl Leitner</span> - My last comment (re: the <code>-s</code> flag) means you should not rely on <em>SUSHI</em> to create a snapshot.  This is why I recommended in my earlier comment that if you put the built SD into <code>input/resources</code>, use the SD created by the IG Publisher (not <em>directly</em> from SUSHI).  In other words, this should work fine for creating and using custom resources:</p>\n<ol>\n<li>Use FSH <code>Instance</code> syntax to create an instance of <code>StructureDefinition</code> with <code>differential</code> elements specified.</li>\n<li>Build w/ SUSHI to produce formal SD in <code>fsh-generated</code>, but it will still have no snapshot elements.</li>\n<li>Use IG Publisher to build the IG, which will create a new SD in <code>output</code> w/ the snapshot elements.</li>\n<li>Copy the SD from <code>output</code> to <code>input/resources</code> so that SUSHI will pick it up as a FHIR definition next time.</li>\n<li>Comment out the original FSH definition (from step 1) so SUSHI doesn't generate it again.</li>\n<li>Now you can use that custom resource as an <code>InstanceOf</code> or <code>Parent</code> in other FSH definitions.</li>\n</ol>\n<p>Of course you <em>can</em> use another tool (like Forge) to create the custom resource, but if you prefer to use FSH and don't mind the sequence up above, it should work.  Of course, you'll need to redo that every time you need to make edits to the custom resource.</p>",
        "id": 232792191,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617297135
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> for clearly articulating the process!</p>",
        "id": 232792496,
        "sender_full_name": "Carl Leitner",
        "timestamp": 1617297294
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>  I did try the suggestions you provided (see lines 42-52 here FWIW <a href=\"https://github.com/who-int/svc/blob/rc2/pre-process-fishy-examples.sh\">https://github.com/who-int/svc/blob/rc2/pre-process-fishy-examples.sh</a>) but it didn't seem to process the example.  </p>\n<p>Note, I really am trying to get the $transform of the examples.  It seems that I should be adding exValue and index extensions along the lines of <a href=\"https://hl7.org/fhir/2017Jan/extension-structuredefinition-example.json.html\">https://hl7.org/fhir/2017Jan/extension-structuredefinition-example.json.html</a> as the IG Publisher seems to process those: <br>\n<a href=\"https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r4/src/main/java/org/hl7/fhir/r4/conformance/ProfileUtilities.java#L4176\">https://github.com/hapifhir/org.hl7.fhir.core/blob/master/org.hl7.fhir.r4/src/main/java/org/hl7/fhir/r4/conformance/ProfileUtilities.java#L4176</a>   </p>\n<p>Do you know if sushi or the IG publisher was injecting these extensions from the examples into the SD snapshot?</p>",
        "id": 233179283,
        "sender_full_name": "Carl Leitner",
        "timestamp": 1617633218
    },
    {
        "content": "<p>flagging for <span class=\"user-mention\" data-user-id=\"193299\">@Luke Duncan</span></p>",
        "id": 233179471,
        "sender_full_name": "Carl Leitner",
        "timestamp": 1617633290
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"191604\">@Carl Leitner</span>.  I checked this out locally to try to get a better understanding of it.  I ran the commands in your script one at a time to see what happened.  Here's what I found...</p>\n<p>First I did:</p>\n<div class=\"codehilite\"><pre><span></span><code>rm -f input/resources/StructureDefinition-svc-qr-uvci.xml\nrm -f input/resources/StructureDefinition-svc-qr-uvcei.xml\nrm -f input/fsh/svc-qr-uvci-example.fsh\nrm -f input/fsh/svc-qr-uvcei-example.fsh\nrm -f input/examples/svc-qr-uvci-example.json\nrm -f input/examples/svc-qr-uvcei-example.json\ncp input/pre-generated/svc-qr-uvci.fsh input/fsh/svc-qr-uvci.fsh\ncp input/pre-generated/svc-qr-uvcei.fsh input/fsh/svc-qr-uvcei.fsh\nsushi\n</code></pre></div>\n<p>SUSHI ran just fine.</p>\n<p>Then I did:</p>\n<div class=\"codehilite\"><pre><span></span><code>./_genonce.sh\n</code></pre></div>\n<p>I noticed two thrown exceptions from the IG Publisher.  I'm not sure if we care of if this is expected?</p>\n<ul>\n<li>Exception generating resource /Users/cmoesel/dev/fsh/svc/fsh-generated/resources/StructureDefinition-svc-qr-uvcei::StructureDefinition/svc-qr-uvcei: not the right kind of structure to generate schematrons for (00:47.0621)</li>\n<li>Exception generating resource /Users/cmoesel/dev/fsh/svc/fsh-generated/resources/StructureDefinition-svc-qr-uvci::StructureDefinition/svc-qr-uvci: not the right kind of structure to generate schematrons for (00:49.0336)</li>\n</ul>\n<p>Then I did:</p>\n<div class=\"codehilite\"><pre><span></span><code>cp output/StructureDefinition-svc-qr-uvci.xml input/resources/\ncp output/StructureDefinition-svc-qr-uvcei.xml input/resources/\ncp input/pre-generated/svc-qr-uvci-example.fsh input/fsh\ncp input/pre-generated/svc-qr-uvcei-example.fsh input/fsh\nrm -f input/fsh/svc-qr-uvci.fsh\nrm -f input/fsh/svc-qr-uvcei.fsh\n</code></pre></div>\n<p>I got one error, which was a valid error because it <em>does</em> seem that file is not checked in.</p>\n<ul>\n<li>cp: input/pre-generated/svc-qr-uvcei-example.fsh: No such file or directory</li>\n</ul>\n<p>I continued and ran this again:</p>\n<div class=\"codehilite\"><pre><span></span><code>./_genonce.sh\n</code></pre></div>\n<p>SUSHI ran cleanly again (no errors) and the IG Publisher reported the same two exceptions as before.</p>\n<p>Then I ran these commands, although, honestly, I'm not sure I understand the point of them:</p>\n<div class=\"codehilite\"><pre><span></span><code>rm -f input/fsh/svc-qr-uvci-example.fsh\nrm -f input/fsh/svc-qr-uvcei-example.fsh\nmkdir -p input/examples\ncp fsh-generated/resources/svc-qr-uvci-example.json input/examples\ncp fsh-generated/resources/svc-qr-uvcei-example.json input/examples\n</code></pre></div>\n<p>I again received an error regarding the missing <code>uvcei</code> example, but that's expected since the <code>fsh</code> file wasn't checked in (so SUSHI didn't generate it).</p>\n<p>And finally ran SUSHI one more time:</p>\n<div class=\"codehilite\"><pre><span></span><code>sushi .\n</code></pre></div>\n<p>and did not receive any errors.  Does this line up w/ what you've experienced?  The problem I was trying to solve above was getting past the SUSHI error, and it <em>seems</em> that this process has gotten around that.</p>\n<p>BUT... I did notice that the IG Publisher does not seem to render the example of your custom resource.  So we've got past the FSH issue but now are into a <em>potential</em> issue w/ the IG Publisher.  I'm not sure what is going on there.  It may be worth asking in <a class=\"stream\" data-stream-id=\"179252\" href=\"/#narrow/stream/179252-IG-creation\">#IG creation</a> if there are any additional steps needed to cause the IG Publisher to correctly process examples of custom resources.</p>",
        "id": 233390992,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617743563
    },
    {
        "content": "<p>Actually, I just noticed an error I missed before.  The second time running <code>genonce.sh</code>, the IG Publisher emits this error:</p>\n<blockquote>\n<p>This does not appear to be a FHIR resource (unknown name 'svc-qr-uvci') at line -1 col -1 loading /Users/cmoesel/dev/fsh/svc/fsh-generated/resources/svc-qr-uvci-example.js</p>\n</blockquote>\n<p>This looks like it's definitely the reason we don't get the example in the IG.  The publisher, for whatever reason, does not recognize the custom resource.</p>",
        "id": 233393657,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617744364
    },
    {
        "content": "<p>BTW -- I wondered if the problem might be that your resource name did not follow the recommended format, so I changed <code>svc-qr-uvci</code> to <code>SvcQrUvci</code> -- but that did not change anything.  It still had all the same errors and did not produce an example in the IG.</p>",
        "id": 233394968,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1617745021
    },
    {
        "content": "<p>thanks for looking <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span>  - yes, I had tried other versions of the ID format as well to no success.  Looks like I need to go through the IG Publisher code more carefully.   BTW... I don't think the schematron warning is related (at least directly) to the example issue - it's in a different part of the IG publisher</p>",
        "id": 233495324,
        "sender_full_name": "Carl Leitner",
        "timestamp": 1617805041
    },
    {
        "content": "<p>(and yes, you previous comment does line up w/ my experience)</p>",
        "id": 233495426,
        "sender_full_name": "Carl Leitner",
        "timestamp": 1617805077
    }
]