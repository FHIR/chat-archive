[
    {
        "content": "<p>I'm running latest IG-Builder and getting this:</p>\n<p>Package Cache: C:\\Users\\kboone\\.fhir\\packages                                    (00:00.0140)<br>\nRun Sushi on C:\\Users\\kboone\\git\\fhir-saner                                      (00:00.0140)<br>\nSushi: info  Running SUSHI v0.12.0                                               (00:01.0233)<br>\nSushi: info  Current FSH tank conforms to an IG Publisher context. Output will be adjusted accordingly. (00:01.0233)<br>\nSushi: info  Checking local cache for hl7.fhir.r4.core#4.0.1...                  (00:01.0246)<br>\nSushi: info  Found hl7.fhir.r4.core#4.0.1 in local cache.                        (00:02.0707)<br>\nSushi: info  Importing FSH text...                                               (00:02.0712)<br>\nSushi: info  Preprocessed 11 documents with 1 aliases.                           (00:02.0909)<br>\nSushi: info  Imported 36 definitions and 25 instances.                           (00:02.0931)<br>\nSushi: info  Loaded package hl7.fhir.r4.core#4.0.1                               (00:02.0939)<br>\nSushi: info  Converting FSH to FHIR resources...                                 (00:02.0946)<br>\n<strong>Sushi has failed - no errors count in the output.</strong> Complete output from running Sushi : warn  Extension with slice name 'type' will be treated as an inline extension, even though the name can be resolved to the external extension: <a href=\"http://hl7.org/fhir/StructureDefinition/familymemberhistory-type\" title=\"http://hl7.org/fhir/StructureDefinition/familymemberhistory-type\">http://hl7.org/fhir/StructureDefinition/familymemberhistory-type</a>. Starting with SUSHI 0.10.0, extension slices us (00:08.0665)<br>\nLoad Template from #ig-template    </p>\n<p>I don't know if I'd call this a Sushi error or a ig-publisher error.</p>",
        "id": 194634597,
        "sender_full_name": "Keith Boone",
        "timestamp": 1587360787
    },
    {
        "content": "<p>It's actually fine if there really aren't any errors, but if there are, <br>\na) I'm not seeing the output in Eclipse Console view of my batch script<br>\nb) The build hangs waiting for sushi to finish.<br>\n<span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> <span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span></p>",
        "id": 194634669,
        "sender_full_name": "Keith Boone",
        "timestamp": 1587360884
    },
    {
        "content": "<p>the publisher thinks that the warning from sushi is an error when it isn't.  but with my publisher run where I have the same error, it doesn't hang the publisher</p>",
        "id": 194634752,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1587361008
    },
    {
        "content": "<p>Sushi: info  Converting FSH to FHIR resources...                                 (00:03.0419)<br>\nSushi has failed - no errors count in the output. Complete output from running Sushi : warn  Extension with slice name 'question' will be treated as an inline extension, even though the name can be resolved to the external extension: <a href=\"http://hl7.org/fhir/StructureDefinition/elementdefinition-question\" title=\"http://hl7.org/fhir/StructureDefinition/elementdefinition-question\">http://hl7.org/fhir/StructureDefinition/elementdefinition-question</a>. Starting with SUSHI 0.10.0, extension sli (00:05.0565)<br>\nLoad Template from fhir.base.template                                            (00:07.0006)</p>\n<p>onLoad.findSpreadsheets:</p>\n<p>onLoad.updateIg:<br>\n...</p>\n<p>and so on</p>",
        "id": 194634779,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1587361062
    },
    {
        "content": "<p>If I don't actually have any errors, the publisher continues.  Otherwise, it waits for a while.</p>",
        "id": 194634835,
        "sender_full_name": "Keith Boone",
        "timestamp": 1587361142
    },
    {
        "content": "<p>And then I get bored and kill it, because it clearly isn't doing anything but waiting for Sushi to finish, which it already has.</p>",
        "id": 194634847,
        "sender_full_name": "Keith Boone",
        "timestamp": 1587361184
    },
    {
        "content": "<p>if your build is hanging, could it be the template load that is wrong:<br>\nhmm, this line in your log does look suspicious:<br>\nLoad Template from #ig-template</p>\n<p>I think #ig-template should have been replaced with the specific template that you want your guide to use?</p>",
        "id": 194634892,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1587361225
    },
    {
        "content": "<p>yeah, I just checked and when it spits out that \"Load Template...\" line, it's done with sushi and has moved on</p>\n<div class=\"codehilite\"><pre><span></span>logger.logMessage(Utilities.padLeft(&quot;&quot;, &#39; &#39;, level) + &quot;Load Template from &quot;+template);\nNpmPackage npm = loadPackage(template, rootFolder);\n</pre></div>",
        "id": 194634925,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1587361301
    },
    {
        "content": "<p>Um, no.  #ig-template means load a local template from the ig-template folder.  I add a small thing or do to CSS to make some things less hard.<br>\nmore trouble than it's worth to turn into a full-blown template.</p>",
        "id": 194635336,
        "sender_full_name": "Keith Boone",
        "timestamp": 1587361946
    },
    {
        "content": "<p>oh okay.  just wondering</p>",
        "id": 194635339,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1587361957
    },
    {
        "content": "<p>but I am right that it's not longer waiting for sushi when it spits out that line</p>",
        "id": 194635347,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1587361975
    },
    {
        "content": "<p>Right.</p>",
        "id": 194635352,
        "sender_full_name": "Keith Boone",
        "timestamp": 1587361987
    },
    {
        "content": "<p>what a complex web we've weaved! :)</p>",
        "id": 194635354,
        "sender_full_name": "Jean Duteau",
        "timestamp": 1587362000
    },
    {
        "content": "<p>So my first dump was from a build that was completing, because It never gets to the line \"Sushi has failed\" when it hangs, but it's all related.</p>",
        "id": 194635364,
        "sender_full_name": "Keith Boone",
        "timestamp": 1587362035
    },
    {
        "content": "<p>So, there's a problem in the interface between Sushi and IG-builder.  Now we understand ourselves the kind of frustrations our customers have.</p>",
        "id": 194635431,
        "sender_full_name": "Keith Boone",
        "timestamp": 1587362096
    },
    {
        "content": "<p>IG builder checks that Sushi says no errors. if it doesn't then the IG builder assumes that Sushi failed in some unusual way</p>",
        "id": 194663097,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1587382975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> -- are you attempting to parse the output text to see if there are errors or are you checking the exit code of the process?  Ideally the IG Publisher should just look at the exit code.  If it's <code>0</code>, you're good to go; otherwise there was an error.  Parsing the text will be subject to changes in how we log output, which, by the way, changed in the last few versions.</p>",
        "id": 194672897,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1587388589
    },
    {
        "content": "<p>in that past I've found that exit code is a quite unreliable way to assess that, but if you're confident about it, I'll change to do that</p>",
        "id": 194674691,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1587389443
    },
    {
        "content": "<p>We've coded SUSHI to use exit code to indicate whether or not there are errors, specifically with CI use cases in mind.  That said, I've just done some further testing and found that if I force a thrown exception to bubble all the way to the top, Node suppresses the exception and exits w/ error code <code>0</code>.  That should be very rare (I'm not aware of any cases where that <em>would</em> happen), but we do call them \"unexpected errors\" for a reason -- so we'll update SUSHI to try to catch those at the top level and return a non-zero error code.</p>",
        "id": 194677559,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1587390759
    },
    {
        "content": "<p>Logged as <a href=\"https://github.com/FHIR/sushi/issues/375\" title=\"https://github.com/FHIR/sushi/issues/375\">fhir/sushi#375</a></p>",
        "id": 194682808,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1587393083
    }
]