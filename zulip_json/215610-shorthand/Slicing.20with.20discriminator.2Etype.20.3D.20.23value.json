[
    {
        "content": "<p>I wrote a profile that contains a discriminator that is based on \"value\" (<a href=\"https://fshschool.org/FSHOnline/#/share/2Nlhtpo\">example online</a>):</p>\n<div class=\"codehilite\"><pre><span></span><code>Profile: SlicedPatient\nParent: Patient\n* name ^slicing.discriminator.path = &quot;name&quot;\n* name ^slicing.discriminator.type = #value\n* name contains officialName 1..1\n* name[officialName].use = #official\n* name[officialName].given 1..1\n</code></pre></div>\n<p>The output contains</p>\n<div class=\"codehilite\"><pre><span></span><code>...\n      {\n        &quot;id&quot;: &quot;Patient.name:officialName.use&quot;,\n        &quot;path&quot;: &quot;Patient.name.use&quot;,\n        &quot;patternCode&quot;: &quot;official&quot;\n      },\n...\n</code></pre></div>\n<p>Is \"patternCode\" correct here, or should the output rather say \"fixedCode\"?</p>",
        "id": 226977649,
        "sender_full_name": "Martin Höcker",
        "timestamp": 1613748041
    },
    {
        "content": "<p>if you want fixed[x] use the (exactly) keyword after the fsh where you set the value<br>\notherwise it assumes pattern[x]</p>",
        "id": 226979007,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1613748591
    },
    {
        "content": "<p>@ryan moehrke: Thank you! With your suggestion </p>\n<div class=\"codehilite\"><pre><span></span><code>* name[officialName].use = #official (exactly)\n</code></pre></div>\n<p>I now get a <code>fixedCode</code> in the output. </p>\n<p>Reading about <code>(exactly)</code> in the FSH spec. I understand that its usage is discouraged. Just for my understanding and out of curiosity: Would it be better to switch to <code>discriminator.type = #pattern</code> instead, or are both discriminators equivalent in this case (since the datatype is <code>code</code>)? I'm still a beginner when it comes to slicing...</p>",
        "id": 226991197,
        "sender_full_name": "Martin Höcker",
        "timestamp": 1613752912
    },
    {
        "content": "<p>I believe that the distinction (and why it is discouraged) is that fixed[x] defines that no other information can be possible <br>\nex. valueCoding = http://system.name#code123 (exactly) can not have a display value<br>\nwhile pattern[x] allows for other information, just specifies that the pattern has to exist.</p>",
        "id": 226992232,
        "sender_full_name": "ryan moehrke",
        "timestamp": 1613753328
    },
    {
        "content": "<p>That's correct.  We default to <code>pattern[x]</code> because <code>fixed[x]</code> can be overly prescriptive (for the reason <span class=\"user-mention\" data-user-id=\"237342\">@ryan moehrke</span> provided above).  When applying it to complex types (like <code>CodeableConcept</code> and <code>Coding</code>), it is a particularly important distinction.  When applying it to primitives (like <code>code</code>), however, it's a little less crucial. If you use <code>fixed[x]</code> on a primitive it basically means that no one could put an <code>id</code> or <code>extension</code> on that primitive, but that's about it.  So in your situation (<code>code</code>), I don't think there is a wrong answer.</p>",
        "id": 226998723,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1613755979
    }
]