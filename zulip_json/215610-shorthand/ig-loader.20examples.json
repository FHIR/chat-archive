[
    {
        "content": "<p>Does someone have a working use of \"ig-loader\" Binary adjunct files support? I am reading the documentation and not grok<br>\n<a href=\"https://confluence.hl7.org/pages/viewpage.action?pageId=66938614#ImplementationGuideParameters-BinaryAdjunctFiles\">https://confluence.hl7.org/pages/viewpage.action?pageId=66938614#ImplementationGuideParameters-BinaryAdjunctFiles</a></p>",
        "id": 264493590,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639163125
    },
    {
        "content": "<p>I would like to use this ig-loader functionality, but I can't get it to work.</p>",
        "id": 264858868,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639489560
    },
    {
        "content": "<p>I feel like I tried this once before.  I will check to see if I still have that example lying around somewhere.</p>",
        "id": 264861337,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1639490549
    },
    {
        "content": "<p>OK.  I found it and experimented some more.  When I use it w/ CQL (which includes special behavior to also compile to ELM), it works well.  When I use it w/ a JPG, it causes errors.  But... it does seem to populate the base64 data anyway (although I thought it would also populate <code>contentType</code>, which doesn't seem to be happening).</p>\n<p>Here's my sample project: <a href=\"/user_uploads/10155/0QhZvnHF4N8SFrIrZekDjJNC/BinaryAdjunct.zip\">BinaryAdjunct.zip</a></p>",
        "id": 264866877,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1639492829
    },
    {
        "content": "<p>I tried it with .txt files. It did not appear to put the file into the DocumentReference.content</p>",
        "id": 265069932,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639599692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191832\">@Jose Costa Teixeira</span> have you used ig-loader to load binary?</p>",
        "id": 265071282,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639600327
    },
    {
        "content": "<p>I just got it to work with Binary and a jpg file... (my own fat fingers typo to blame).</p>",
        "id": 265073599,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639601631
    },
    {
        "content": "<p>do notice that in DocumentReference. It will work, but will not set the contentType, and if you try to set the contentType, the the ig-loader solution will not work (just puts the ig-loader filename on the id). I think this is the first problem I was noticing. So, this works</p>\n<div class=\"codehilite\"><pre><span></span><code>Instance: Dr-SAML-QDI\nInstanceOf: DocumentReference\n* status = #current\n* content.attachment.id = &quot;ig-loader-QDI-SAML-20211210.jpg&quot;\n</code></pre></div>\n<p>but will not give you a DocumentReference with a contentType.</p>\n<p>If you add contentType, then you will not get what you want.</p>",
        "id": 265074756,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639602201
    },
    {
        "content": "<p>And as <span class=\"user-mention\" data-user-id=\"191469\">@Chris Moesel</span> mentions two errors do show up in the QA report</p>\n<div class=\"codehilite\"><pre><span></span><code>att-1: &#39;If the Attachment has data, it SHALL have a contentType&#39; Rule &#39;If the Attachment has data, it SHALL have a contentType&#39; Failed\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code>Unknown file type foobar.txt\n</code></pre></div>",
        "id": 265076083,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639603009
    },
    {
        "content": "<p>so, is this a problem in sushi support for ig-loader? Or is this a problem in IG builder? or both? ... meaning, where should I log an issue?</p>",
        "id": 265078269,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639604076
    },
    {
        "content": "<p>I believe it's in the IG Publisher.  SUSHI doesn't do anything special for adjunct binary.  It's just another instance from SUSHI's point of view.  All of the magic is in IG Publisher.</p>",
        "id": 265159865,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1639663423
    },
    {
        "content": "<p>That said, the one thing SUSHI could potentially improve here is its treatment of <code>Binary</code> when the <code>data</code> field starts w/ <code>ig-loader-</code>.  Since SUSHI treats it like a normal instance, it emits an error if you don't specify <code>contentType</code> (since it is 1..1), but if the IG Publisher populates <code>contentType</code> for adjunct binaries, then SUSHI could potentially detect that the <code>data</code> value starts with <code>ig-loader-</code> and then relax the cardinality check...  but I don't think that would fix the issue you see here.</p>",
        "id": 265160397,
        "sender_full_name": "Chris Moesel",
        "timestamp": 1639663660
    },
    {
        "content": "<p>that seems right. I will record as ig-publisher bug.</p>",
        "id": 265161961,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639664400
    },
    {
        "content": "<p><a href=\"https://github.com/HL7/fhir-ig-publisher/issues/355\">https://github.com/HL7/fhir-ig-publisher/issues/355</a></p>",
        "id": 265165690,
        "sender_full_name": "John Moehrke",
        "timestamp": 1639665934
    }
]