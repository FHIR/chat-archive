[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> <span class=\"user-mention\" data-user-id=\"191414\">@Dan Gottlieb</span> I think that my server is good to go for this track. Do you know of any issues?</p>",
        "id": 153926941,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1514065324
    },
    {
        "content": "<p>We discussed last week -- we still plan to review and share any issues, but there's no known issues currently. SMART will bring a simple server, too, as well as a CLI and Web UI client.</p>",
        "id": 153926942,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1514065737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> Getting around to testing again (cc <span class=\"user-mention\" data-user-id=\"191414\">@Dan Gottlieb</span>) and I'm seeing the same (old, surprising) behavior from your server.</p>",
        "id": 153928347,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1515623745
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>curl -vvv -H &quot;Accept: application/fhir+ndjson&quot; -H &quot;Prefer: respond-async&quot; &quot;http://test.fhir.org/r3/Patient/$everything&quot;\n</pre></div>\n\n\n<p>still kicks off a job that only produces Patient outputs (not other resource types) and only 50 of them.</p>",
        "id": 153928348,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1515623780
    },
    {
        "content": "<p>Whereas I'm expecting to see resource-type-specific .ndjson output files (e.g. Patient, Observation, Immunization, etc) with many resources in each file.</p>",
        "id": 153928349,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1515623824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> I don't understand. I get 100s of results of all different types returned by that query</p>",
        "id": 153928369,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515645862
    },
    {
        "content": "<p>just like what you're expecting</p>",
        "id": 153928370,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515645880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> -  it looks to be working for me when testing from postman (for example, I get 161 Observation resources as one of the files). I haven't tried using authentication yet, since I'm in a meeting and am supposed to be paying attention :)</p>",
        "id": 153928447,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1515691001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> We'll need to define what's returned if there are no resources that match the query. Currently your server is returning a link header with empty bundle and a zip file of some sort (I can't open it). On the SMART bulk data server, we're returning a  204 \"No Content\" response.</p>\n<p><code>&lt;http://test.fhir.org/r3/task/f69d2261-3d71-4fdb-971e-a847860c2488/Bundle.ndjson&gt;;rel=item,\n &lt;http://test.fhir.org/r3/task/f69d2261-3d71-4fdb-971e-a847860c2488.zip&gt;;rel=collection</code></p>",
        "id": 153928452,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1515694017
    },
    {
        "content": "<p>we do need to agree about that. technically there's always a bundle, which is empty. I always return the bundle, btw, when there's data, since the bundle threads all the data together - though it's not clear how often that's relevant - it depends on what you're going to do with the data</p>",
        "id": 153928483,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515702084
    },
    {
        "content": "<p>I suppose you could argue that if there's no data, there should be no data, though there's one important piece of information in the bundle that .. might not ... be anywhere else - the server data to use in the next query if checking for changes</p>",
        "id": 153928487,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515702133
    },
    {
        "content": "<p>But shouldn't the client that initiated the request already know the start date it asked for (or the request timestamp if no start date is included)?</p>",
        "id": 153928497,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1515703252
    },
    {
        "content": "<p>well, yes, and no. if you're asking for changes since the last time... you should use the server's nominated transaction time to ask for that</p>",
        "id": 153928517,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515706354
    },
    {
        "content": "<p>Got it - could we return that in a header instead of making the client download and parse a bundle?</p>",
        "id": 153928519,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1515707150
    },
    {
        "content": "<p>well, the header contains a date (usually) but it wouldn't be the date of the transaction. I think. So it would have to be a custom header</p>",
        "id": 153928525,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515707938
    },
    {
        "content": "<p>Yup - I created an issue to track this question: <a href=\"https://github.com/smart-on-fhir/fhir-bulk-data-docs/issues/4\" target=\"_blank\" title=\"https://github.com/smart-on-fhir/fhir-bulk-data-docs/issues/4\">https://github.com/smart-on-fhir/fhir-bulk-data-docs/issues/4</a></p>",
        "id": 153928526,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1515708098
    },
    {
        "content": "<p>so do we want to define a custom header?</p>",
        "id": 153928539,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515711135
    },
    {
        "content": "<p>I'm curious why I was seeing different behavior. I was using public access, with the same curl queries I showed preciously.</p>",
        "id": 153928566,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1515718699
    },
    {
        "content": "<p>I think you had a caching issue. is it sorted now?</p>",
        "id": 153928571,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515718987
    },
    {
        "content": "<p>If we end up moving the link list to the body (<a href=\"https://github.com/smart-on-fhir/fhir-bulk-data-docs/issues/1\" target=\"_blank\" title=\"https://github.com/smart-on-fhir/fhir-bulk-data-docs/issues/1\">https://github.com/smart-on-fhir/fhir-bulk-data-docs/issues/1</a> ) , we could put the timestamp there, but otherwise I think a header on the last status response would make sense. Do you think using last-modified would be confusing? Otherwise, I suppose we could do something custom like x-transaction-date.</p>",
        "id": 153928642,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1515764459
    },
    {
        "content": "<p>what would last modified refer to in this case?</p>",
        "id": 153928671,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515793434
    },
    {
        "content": "<p>The FHIR data in the ndjson files linked in the response header (which is why it might be confusing)</p>",
        "id": 153928678,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1515795088
    },
    {
        "content": "<p>wouldn't last-modified have to change as you varied the response during the life-time of the task?</p>",
        "id": 153928679,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515795348
    },
    {
        "content": "<p>I think we'd only want to return it with the link header in the final status response</p>",
        "id": 153928680,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1515795733
    },
    {
        "content": "<p>then it's not the standard last-modified header. I think</p>",
        "id": 153928683,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1515796187
    },
    {
        "content": "<p>My issue definitely wasn't with caching since I was just running curl.  Or if there was caching going on, it could have been on the fhir server side. Is that what you're suggesting Grahame? I will take a look again today <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 153929073,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1516109895
    },
    {
        "content": "<p>Here's what I'm seeing -- issuing a \"get everything\" bulk data request getting just a few resources and only 49 lines per output file. Am I doing something silly <span class=\"user-mention\" data-user-id=\"191316\">@Grahame Grieve</span> ?</p>\n<div class=\"codehilite\"><pre><span></span>jmandel@morel:~$ curl -vvv -H &quot;Accept: application/fhir+ndjson&quot; -H &quot;Prefer: respond-async&quot; &quot;http://test.fhir.org/r3/Patient/$everything&quot; 2&gt;&amp;1\n*   Trying 104.154.149.246...\n* TCP_NODELAY set\n* Connected to test.fhir.org (104.154.149.246) port 80 (#0)\n&gt; GET /r3/Patient/ HTTP/1.1\n&gt; Host: test.fhir.org\n&gt; User-Agent: curl/7.52.1\n&gt; Accept: application/fhir+ndjson\n&gt; Prefer: respond-async\n&gt;\n&lt; HTTP/1.1 202 Accepted\n&lt; Connection: close\n&lt; Content-Type: text/plain; charset=ISO-8859-1\n&lt; Content-Length: 0\n&lt; Cache-control: public, max-age=600\n&lt; Date: Tue, 16 Jan 2018 19:51:12 GMT\n&lt; X-Request-Id: 32-2274\n&lt; Access-Control-Allow-Origin: *\n&lt; Access-Control-Expose-Headers: Content-Location, Location\n&lt; Access-Control-Allow-Methods: GET, POST, PUT, PATCH, DELETE\n&lt; Content-Location: http://test.fhir.org/r3/task/3484a0d1-b268-4909-b241-1b2cb8cefe10\n&lt; Server: Health Intersections FHIR Server\n&lt;\n* Curl_http_done: called premature == 0\n* Closing connection 0\njmandel@morel:~$ curl -H &quot;Accept: application/fhir+ndjson&quot; -v  http://test.fhir.org/r3/task/3484a0d1-b268-4909-b241-1b2cb8cefe10\n*   Trying 104.154.149.246...\n* TCP_NODELAY set\n* Connected to test.fhir.org (104.154.149.246) port 80 (#0)\n&gt; GET /r3/task/3484a0d1-b268-4909-b241-1b2cb8cefe10 HTTP/1.1\n&gt; Host: test.fhir.org\n&gt; User-Agent: curl/7.52.1\n&gt; Accept: application/fhir+ndjson\n&gt;\n&lt; HTTP/1.1 200 OK\n&lt; Connection: close\n&lt; Content-Type: text/plain; charset=ISO-8859-1\n&lt; Content-Length: 0\n&lt; Cache-control: public, max-age=600\n&lt; Date: Tue, 16 Jan 2018 19:51:44 GMT\n&lt; X-Request-Id: 32-2277\n&lt; Access-Control-Allow-Origin: *\n&lt; Access-Control-Expose-Headers: Content-Location, Location\n&lt; Access-Control-Allow-Methods: GET, POST, PUT, PATCH, DELETE\n&lt; Link: &lt;http://test.fhir.org/r3/task/3484a0d1-b268-4909-b241-1b2cb8cefe10/Bundle.ndjson&gt;;rel=item, &lt;http://test.fhir.org/r3/task/3484a0d1-b268-4909-b241-1b2cb8cefe10/Patient.ndjson&gt;;rel=item, &lt;http://test.fhir.org/r3/task/3484a0d1-b268-4909-b241-1b2cb8cefe10.zip&gt;;rel=collection\n&lt; Server: Health Intersections FHIR Server\n&lt;\n* Curl_http_done: called premature == 0\n* Closing connection 0\njmandel@morel:~$ curl -H &quot;Accept: application/fhir+ndjson&quot; -v  http://test.fhir.org/r3/task/3484a0d1-b268-4909-b241-1b2cb8cefe10/Patient.ndjson | wc -l\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 104.154.149.246...\n* TCP_NODELAY set\n* Connected to test.fhir.org (104.154.149.246) port 80 (#0)\n&gt; GET /r3/task/3484a0d1-b268-4909-b241-1b2cb8cefe10/Patient.ndjson HTTP/1.1\n&gt; Host: test.fhir.org\n&gt; User-Agent: curl/7.52.1\n&gt; Accept: application/fhir+ndjson\n&gt;\n&lt; HTTP/1.1 200 OK\n&lt; Connection: close\n&lt; Content-Type: application/x-ndjson\n&lt; Content-Length: 31032\n&lt; Cache-control: public, max-age=600\n&lt; Date: Tue, 16 Jan 2018 19:52:11 GMT\n&lt; X-Request-Id: 32-2278\n&lt; Access-Control-Allow-Origin: *\n&lt; Access-Control-Expose-Headers: Content-Location, Location\n&lt; Access-Control-Allow-Methods: GET, POST, PUT, PATCH, DELETE\n&lt; Server: Health Intersections FHIR Server\n&lt;\n{ [1374 bytes data]\n* Curl_http_done: called premature == 0\n100 31032  100 31032    0     0   144k      0 --:--:-- --:--:-- --:--:--  144k\n* Closing connection 0\n49\njmandel@morel:~$\n</pre></div>",
        "id": 153929116,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1516132467
    },
    {
        "content": "<p>The specific surprises are:</p>\n<p>1.  Expected many more resource types, and didn't expect a zip file:</p>\n<div class=\"codehilite\"><pre><span></span>Link: &lt;http://test.fhir.org/r3/task/3484a0d1-b268-4909-b241-1b2cb8cefe10/Bundle.ndjson&gt;;rel=item,\n&lt;http://test.fhir.org/r3/task/3484a0d1-b268-4909-b241-1b2cb8cefe10/Patient.ndjson&gt;;rel=item,\n&lt;http://test.fhir.org/r3/task/3484a0d1-b268-4909-b241-1b2cb8cefe10.zip&gt;;rel=collection\n</pre></div>\n\n\n<p>2. Expected many more rows in <code>GET /r3/task/3484a0d1-b268-4909-b241-1b2cb8cefe10/Patient.ndjson</code> but only found 49.</p>",
        "id": 153929159,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1516142509
    },
    {
        "content": "<p>I don't understand this at all. I won't use curl because it has a stupid dependency list on windows. but when I do the same request, I get a a redirect, to <a href=\"http://test.fhir.org/r3/task/cf913aff-ad0d-4bde-b0c2-1cd2194316b0\" target=\"_blank\" title=\"http://test.fhir.org/r3/task/cf913aff-ad0d-4bde-b0c2-1cd2194316b0\">http://test.fhir.org/r3/task/cf913aff-ad0d-4bde-b0c2-1cd2194316b0</a>. If I wait a couple of minutes, the file <a href=\"http://test.fhir.org/r3/task/cf913aff-ad0d-4bde-b0c2-1cd2194316b0/Patient.ndjson\" target=\"_blank\" title=\"http://test.fhir.org/r3/task/cf913aff-ad0d-4bde-b0c2-1cd2194316b0/Patient.ndjson\">http://test.fhir.org/r3/task/cf913aff-ad0d-4bde-b0c2-1cd2194316b0/Patient.ndjson</a> is available and has 341247 bytes. I don't know why you're getting the same response as last time you used curl... that doesn't make any sense, because I fixed this weeks ago</p>",
        "id": 153929212,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1516189015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191414\">@Dan Gottlieb</span> Are you able to reproduce my findings above?</p>",
        "id": 153929323,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1516216337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191315\">@Josh Mandel</span> I just tested it and get the same reponse when using curl, but get the full set of data when I use postman. I'm not enough of a curl user to debug, but the issue seems to be client specific...</p>",
        "id": 153929336,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1516219082
    },
    {
        "content": "<p>Fascinating. I'll compare headers (e.g. user-agent).</p>",
        "id": 153929342,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1516220256
    },
    {
        "content": "<p>Ok, the issue was shell variable interoplation: <code>$everything</code> gets resolved by the shell (as an empty string) so the initial request went to <code>/Patient</code> instead of <code>/Patient/$everything</code>.  Silly me indeed :-)</p>",
        "id": 153929358,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1516225585
    },
    {
        "content": "<p>Ha, there's an obvious thing we both missed :)</p>",
        "id": 153929360,
        "sender_full_name": "Dan Gottlieb",
        "timestamp": 1516228024
    },
    {
        "content": "<p>woah. that's tricky.</p>",
        "id": 153929403,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1516270581
    },
    {
        "content": "<p>though you should get 50 lines, not 49 lines</p>",
        "id": 153929404,
        "sender_full_name": "Grahame Grieve",
        "timestamp": 1516270615
    },
    {
        "content": "<p>The internet should be an interesting challenge for this track</p>",
        "id": 153931113,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1517068051
    },
    {
        "content": "<p>One of the things raised internally was if we should require chunking to be supportted - on our pop health side, we found that it wasn't uncommon for a client to drop connection or have an issue midway for large file downloads. Chunking would let you start from last chunk rather than all over</p>",
        "id": 153931115,
        "sender_full_name": "Jenni Syed",
        "timestamp": 1517068122
    },
    {
        "content": "<p>I added a server column to the tracking spreadsheet if any others want to add where they have something clients can start working with</p>",
        "id": 153931151,
        "sender_full_name": "Dennis Patterson",
        "timestamp": 1517069034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191356\">@Jenni Syed</span> there's chunking and also <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests\" target=\"_blank\" title=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests</a> -- I'm not familiar with how a \"restart from last chunk\" works; would be good if we can catch up so you can educate me on this.</p>",
        "id": 153931210,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1517071382
    },
    {
        "content": "<p>(Also note that we've got the <a class=\"stream\" data-stream-id=\"95\" href=\"/#narrow/stream/bulk%20data\">#bulk data</a>  channel for spec discussion.)</p>",
        "id": 153931212,
        "sender_full_name": "Josh Mandel",
        "timestamp": 1517071558
    },
    {
        "content": "<p>I created the bulk data track on - <a href=\"http://conman.fhir.org/connectathon.html?event=cologne2018\" target=\"_blank\" title=\"http://conman.fhir.org/connectathon.html?event=cologne2018\">http://conman.fhir.org/connectathon.html?event=cologne2018</a>  .  Check the server tab for Cerner's FHIR server base url</p>",
        "id": 153958263,
        "sender_full_name": "Dennis Patterson",
        "timestamp": 1526112269
    },
    {
        "content": "<p>The Epic FHIR server is also up - let me know if you'd like to test and I'll give you a group ID to test $export with.</p>",
        "id": 153958264,
        "sender_full_name": "Danielle Friend",
        "timestamp": 1526112521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"191914\">@Danielle Friend</span>  I would like to try to test thanks!</p>",
        "id": 153958445,
        "sender_full_name": "Julie Maas",
        "timestamp": 1526131138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"194368\">@Julie Maas</span> Awesome - you can test with this URL: <a href=\"https://connectathon.epic.com/Interconnect-Fhir-Bulk/api/FHIR/STU3/Group/ebUKRzWjCOkHtNr8R-zHgzc4TdaZx9-TOvXKIeP0bLnM3/$export\" target=\"_blank\" title=\"https://connectathon.epic.com/Interconnect-Fhir-Bulk/api/FHIR/STU3/Group/ebUKRzWjCOkHtNr8R-zHgzc4TdaZx9-TOvXKIeP0bLnM3/$export\">https://connectathon.epic.com/Interconnect-Fhir-Bulk/api/FHIR/STU3/Group/ebUKRzWjCOkHtNr8R-zHgzc4TdaZx9-TOvXKIeP0bLnM3/$export</a></p>\n<p>You'll also need to specify the following header to your requests: <br>\nEpic-Client-ID: 37c67e7b-b694-4fe8-8d46-7c1d27b1c206</p>",
        "id": 153958481,
        "sender_full_name": "Danielle Friend",
        "timestamp": 1526134221
    }
]